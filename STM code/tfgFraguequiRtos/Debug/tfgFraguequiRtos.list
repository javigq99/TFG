
tfgFraguequiRtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001116c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025b4  08011300  08011300  00021300  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138b4  080138b4  00030a98  2**0
                  CONTENTS
  4 .ARM          00000008  080138b4  080138b4  000238b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138bc  080138bc  00030a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138bc  080138bc  000238bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138c0  080138c0  000238c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a98  20000000  080138c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d98  20000a98  0801435c  00030a98  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20004830  0801435c  00034830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a98  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b41  00000000  00000000  00030ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004676  00000000  00000000  00051609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  00055c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  000573f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000725c  00000000  00000000  000589b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce3a  00000000  00000000  0005fc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001028ff  00000000  00000000  0007ca4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  0017f34d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000720c  00000000  00000000  0017f418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a98 	.word	0x20000a98
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080112e4 	.word	0x080112e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a9c 	.word	0x20000a9c
 80001cc:	080112e4 	.word	0x080112e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb0:	f001 fa4b 	bl	800234a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb4:	f000 f820 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb8:	f000 f902 	bl	80010c0 <MX_GPIO_Init>
  MX_CRC_Init();
 8000ebc:	f000 f86e 	bl	8000f9c <MX_CRC_Init>
  MX_I2C2_Init();
 8000ec0:	f000 f88e 	bl	8000fe0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000ec4:	f000 f8cc 	bl	8001060 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ec8:	f006 fb80 	bl	80075cc <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  createNnObjects();
 8000ecc:	f000 fb34 	bl	8001538 <createNnObjects>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <main+0x40>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <main+0x44>)
 8000ed6:	f006 fbc3 	bl	8007660 <osThreadNew>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <main+0x48>)
 8000ede:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  initSensorsAndNN();
 8000ee0:	f000 fb80 	bl	80015e4 <initSensorsAndNN>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ee4:	f006 fb96 	bl	8007614 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <main+0x3c>
 8000eea:	bf00      	nop
 8000eec:	080116c4 	.word	0x080116c4
 8000ef0:	080014f1 	.word	0x080014f1
 8000ef4:	20000bb0 	.word	0x20000bb0

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b096      	sub	sp, #88	; 0x58
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	2244      	movs	r2, #68	; 0x44
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f00d fbb2 	bl	800e670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f1e:	f003 fdb9 	bl	8004a94 <HAL_PWREx_ControlVoltageScaling>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f28:	f000 faea 	bl	8001500 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f30:	2301      	movs	r3, #1
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f38:	2360      	movs	r3, #96	; 0x60
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f40:	2301      	movs	r3, #1
 8000f42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f48:	2328      	movs	r3, #40	; 0x28
 8000f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 fdef 	bl	8004b40 <HAL_RCC_OscConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f68:	f000 faca 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f70:	2303      	movs	r3, #3
 8000f72:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	2104      	movs	r1, #4
 8000f84:	4618      	mov	r0, r3
 8000f86:	f004 f9b7 	bl	80052f8 <HAL_RCC_ClockConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f90:	f000 fab6 	bl	8001500 <Error_Handler>
  }
}
 8000f94:	bf00      	nop
 8000f96:	3758      	adds	r7, #88	; 0x58
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <MX_CRC_Init+0x3c>)
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <MX_CRC_Init+0x40>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_CRC_Init+0x3c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <MX_CRC_Init+0x3c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_CRC_Init+0x3c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <MX_CRC_Init+0x3c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_CRC_Init+0x3c>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <MX_CRC_Init+0x3c>)
 8000fc6:	f001 fb47 	bl	8002658 <HAL_CRC_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000fd0:	f000 fa96 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000ab4 	.word	0x20000ab4
 8000fdc:	40023000 	.word	0x40023000

08000fe0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_I2C2_Init+0x74>)
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <MX_I2C2_Init+0x78>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_I2C2_Init+0x74>)
 8000fec:	4a1b      	ldr	r2, [pc, #108]	; (800105c <MX_I2C2_Init+0x7c>)
 8000fee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_I2C2_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_I2C2_Init+0x74>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_I2C2_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_I2C2_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_I2C2_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_I2C2_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_I2C2_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800101a:	480e      	ldr	r0, [pc, #56]	; (8001054 <MX_I2C2_Init+0x74>)
 800101c:	f001 fe79 	bl	8002d12 <HAL_I2C_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001026:	f000 fa6b 	bl	8001500 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800102a:	2100      	movs	r1, #0
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <MX_I2C2_Init+0x74>)
 800102e:	f003 fc8b 	bl	8004948 <HAL_I2CEx_ConfigAnalogFilter>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001038:	f000 fa62 	bl	8001500 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800103c:	2100      	movs	r1, #0
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_I2C2_Init+0x74>)
 8001040:	f003 fccd 	bl	80049de <HAL_I2CEx_ConfigDigitalFilter>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800104a:	f000 fa59 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000ad8 	.word	0x20000ad8
 8001058:	40005800 	.word	0x40005800
 800105c:	10909cec 	.word	0x10909cec

08001060 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 8001066:	4a15      	ldr	r2, [pc, #84]	; (80010bc <MX_USART1_UART_Init+0x5c>)
 8001068:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_USART1_UART_Init+0x58>)
 80010a4:	f005 f808 	bl	80060b8 <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010ae:	f000 fa27 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000b2c 	.word	0x20000b2c
 80010bc:	40013800 	.word	0x40013800

080010c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d6:	4bbc      	ldr	r3, [pc, #752]	; (80013c8 <MX_GPIO_Init+0x308>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	4abb      	ldr	r2, [pc, #748]	; (80013c8 <MX_GPIO_Init+0x308>)
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e2:	4bb9      	ldr	r3, [pc, #740]	; (80013c8 <MX_GPIO_Init+0x308>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	4bb6      	ldr	r3, [pc, #728]	; (80013c8 <MX_GPIO_Init+0x308>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4ab5      	ldr	r2, [pc, #724]	; (80013c8 <MX_GPIO_Init+0x308>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4bb3      	ldr	r3, [pc, #716]	; (80013c8 <MX_GPIO_Init+0x308>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4bb0      	ldr	r3, [pc, #704]	; (80013c8 <MX_GPIO_Init+0x308>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4aaf      	ldr	r2, [pc, #700]	; (80013c8 <MX_GPIO_Init+0x308>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4bad      	ldr	r3, [pc, #692]	; (80013c8 <MX_GPIO_Init+0x308>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	4baa      	ldr	r3, [pc, #680]	; (80013c8 <MX_GPIO_Init+0x308>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4aa9      	ldr	r2, [pc, #676]	; (80013c8 <MX_GPIO_Init+0x308>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4ba7      	ldr	r3, [pc, #668]	; (80013c8 <MX_GPIO_Init+0x308>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001136:	4ba4      	ldr	r3, [pc, #656]	; (80013c8 <MX_GPIO_Init+0x308>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4aa3      	ldr	r2, [pc, #652]	; (80013c8 <MX_GPIO_Init+0x308>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4ba1      	ldr	r3, [pc, #644]	; (80013c8 <MX_GPIO_Init+0x308>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001154:	489d      	ldr	r0, [pc, #628]	; (80013cc <MX_GPIO_Init+0x30c>)
 8001156:	f001 fda1 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f248 1104 	movw	r1, #33028	; 0x8104
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f001 fd9a 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001168:	2200      	movs	r2, #0
 800116a:	f24f 0114 	movw	r1, #61460	; 0xf014
 800116e:	4898      	ldr	r0, [pc, #608]	; (80013d0 <MX_GPIO_Init+0x310>)
 8001170:	f001 fd94 	bl	8002c9c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f241 0181 	movw	r1, #4225	; 0x1081
 800117a:	4896      	ldr	r0, [pc, #600]	; (80013d4 <MX_GPIO_Init+0x314>)
 800117c:	f001 fd8e 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001186:	4893      	ldr	r0, [pc, #588]	; (80013d4 <MX_GPIO_Init+0x314>)
 8001188:	f001 fd88 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001192:	4891      	ldr	r0, [pc, #580]	; (80013d8 <MX_GPIO_Init+0x318>)
 8001194:	f001 fd82 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2120      	movs	r1, #32
 800119c:	488c      	ldr	r0, [pc, #560]	; (80013d0 <MX_GPIO_Init+0x310>)
 800119e:	f001 fd7d 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	2101      	movs	r1, #1
 80011a6:	4889      	ldr	r0, [pc, #548]	; (80013cc <MX_GPIO_Init+0x30c>)
 80011a8:	f001 fd78 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80011ac:	f240 1315 	movw	r3, #277	; 0x115
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4881      	ldr	r0, [pc, #516]	; (80013cc <MX_GPIO_Init+0x30c>)
 80011c6:	f001 fbbf 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80011ca:	236a      	movs	r3, #106	; 0x6a
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	487b      	ldr	r0, [pc, #492]	; (80013cc <MX_GPIO_Init+0x30c>)
 80011e0:	f001 fbb2 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80011e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4877      	ldr	r0, [pc, #476]	; (80013d8 <MX_GPIO_Init+0x318>)
 80011fc:	f001 fba4 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001200:	233f      	movs	r3, #63	; 0x3f
 8001202:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001204:	230b      	movs	r3, #11
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4871      	ldr	r0, [pc, #452]	; (80013d8 <MX_GPIO_Init+0x318>)
 8001214:	f001 fb98 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001218:	2303      	movs	r3, #3
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001228:	2308      	movs	r3, #8
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001236:	f001 fb87 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800123a:	f248 1304 	movw	r3, #33028	; 0x8104
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001256:	f001 fb77 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800125a:	2308      	movs	r3, #8
 800125c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800126a:	2301      	movs	r3, #1
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f001 fb66 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800127c:	2310      	movs	r3, #16
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001280:	230b      	movs	r3, #11
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001292:	f001 fb59 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001296:	23e0      	movs	r3, #224	; 0xe0
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012a6:	2305      	movs	r3, #5
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b4:	f001 fb48 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80012b8:	2301      	movs	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4840      	ldr	r0, [pc, #256]	; (80013d0 <MX_GPIO_Init+0x310>)
 80012ce:	f001 fb3b 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80012d2:	2302      	movs	r3, #2
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012d6:	230b      	movs	r3, #11
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	483a      	ldr	r0, [pc, #232]	; (80013d0 <MX_GPIO_Init+0x310>)
 80012e6:	f001 fb2f 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80012ea:	f24f 0334 	movw	r3, #61492	; 0xf034
 80012ee:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4833      	ldr	r0, [pc, #204]	; (80013d0 <MX_GPIO_Init+0x310>)
 8001304:	f001 fb20 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001308:	f44f 7320 	mov.w	r3, #640	; 0x280
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800131a:	2306      	movs	r3, #6
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4829      	ldr	r0, [pc, #164]	; (80013cc <MX_GPIO_Init+0x30c>)
 8001326:	f001 fb0f 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800132a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800132e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800133c:	230a      	movs	r3, #10
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4821      	ldr	r0, [pc, #132]	; (80013cc <MX_GPIO_Init+0x30c>)
 8001348:	f001 fafe 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800134c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800135e:	2307      	movs	r3, #7
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	481a      	ldr	r0, [pc, #104]	; (80013d4 <MX_GPIO_Init+0x314>)
 800136a:	f001 faed 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800136e:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001372:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001374:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <MX_GPIO_Init+0x314>)
 8001386:	f001 fadf 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800138a:	f243 0381 	movw	r3, #12417	; 0x3081
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_GPIO_Init+0x314>)
 80013a4:	f001 fad0 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80013a8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_GPIO_Init+0x318>)
 80013c2:	f001 fac1 	bl	8002948 <HAL_GPIO_Init>
 80013c6:	e009      	b.n	80013dc <MX_GPIO_Init+0x31c>
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48001000 	.word	0x48001000
 80013d0:	48000400 	.word	0x48000400
 80013d4:	48000c00 	.word	0x48000c00
 80013d8:	48000800 	.word	0x48000800

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80013dc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	483c      	ldr	r0, [pc, #240]	; (80014e4 <MX_GPIO_Init+0x424>)
 80013f4:	f001 faa8 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80013f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001410:	f001 fa9a 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001414:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001426:	230a      	movs	r3, #10
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001434:	f001 fa88 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001438:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800143c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800144a:	2306      	movs	r3, #6
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4823      	ldr	r0, [pc, #140]	; (80014e4 <MX_GPIO_Init+0x424>)
 8001456:	f001 fa77 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800145a:	2302      	movs	r3, #2
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800146a:	2305      	movs	r3, #5
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	481c      	ldr	r0, [pc, #112]	; (80014e8 <MX_GPIO_Init+0x428>)
 8001476:	f001 fa67 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800147a:	2378      	movs	r3, #120	; 0x78
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800148a:	2307      	movs	r3, #7
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	4814      	ldr	r0, [pc, #80]	; (80014e8 <MX_GPIO_Init+0x428>)
 8001496:	f001 fa57 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800149a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a0:	2312      	movs	r3, #18
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ac:	2304      	movs	r3, #4
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_GPIO_Init+0x42c>)
 80014b8:	f001 fa46 	bl	8002948 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2105      	movs	r1, #5
 80014c0:	2017      	movs	r0, #23
 80014c2:	f001 f892 	bl	80025ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014c6:	2017      	movs	r0, #23
 80014c8:	f001 f8ab 	bl	8002622 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2105      	movs	r1, #5
 80014d0:	2028      	movs	r0, #40	; 0x28
 80014d2:	f001 f88a 	bl	80025ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d6:	2028      	movs	r0, #40	; 0x28
 80014d8:	f001 f8a3 	bl	8002622 <HAL_NVIC_EnableIRQ>

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	48000800 	.word	0x48000800
 80014e8:	48000c00 	.word	0x48000c00
 80014ec:	48000400 	.word	0x48000400

080014f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f006 f943 	bl	8007784 <osDelay>
 80014fe:	e7fb      	b.n	80014f8 <StartDefaultTask+0x8>

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	e7fe      	b.n	8001508 <Error_Handler+0x8>
	...

0800150c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001510:	f3bf 8f4f 	dsb	sy
}
 8001514:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <__NVIC_SystemReset+0x24>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800151e:	4904      	ldr	r1, [pc, #16]	; (8001530 <__NVIC_SystemReset+0x24>)
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <__NVIC_SystemReset+0x28>)
 8001522:	4313      	orrs	r3, r2
 8001524:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001526:	f3bf 8f4f 	dsb	sy
}
 800152a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <__NVIC_SystemReset+0x20>
 8001530:	e000ed00 	.word	0xe000ed00
 8001534:	05fa0004 	.word	0x05fa0004

08001538 <createNnObjects>:
/* Allocate data payload for the output tensor */
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

void createNnObjects(){
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

	uartSemaphoreHandle = xSemaphoreCreateBinary();
 800153c:	2203      	movs	r2, #3
 800153e:	2100      	movs	r1, #0
 8001540:	2001      	movs	r0, #1
 8001542:	f006 fb03 	bl	8007b4c <xQueueGenericCreate>
 8001546:	4603      	mov	r3, r0
 8001548:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <createNnObjects+0x98>)
 800154a:	6013      	str	r3, [r2, #0]
	inputSemHandle = xSemaphoreCreateBinary();
 800154c:	2203      	movs	r2, #3
 800154e:	2100      	movs	r1, #0
 8001550:	2001      	movs	r0, #1
 8001552:	f006 fafb 	bl	8007b4c <xQueueGenericCreate>
 8001556:	4603      	mov	r3, r0
 8001558:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <createNnObjects+0x9c>)
 800155a:	6013      	str	r3, [r2, #0]
	outputSemHandle = xSemaphoreCreateBinary();
 800155c:	2203      	movs	r2, #3
 800155e:	2100      	movs	r1, #0
 8001560:	2001      	movs	r0, #1
 8001562:	f006 faf3 	bl	8007b4c <xQueueGenericCreate>
 8001566:	4603      	mov	r3, r0
 8001568:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <createNnObjects+0xa0>)
 800156a:	6013      	str	r3, [r2, #0]
	I2CBusySem = xSemaphoreCreateBinary();
 800156c:	2203      	movs	r2, #3
 800156e:	2100      	movs	r1, #0
 8001570:	2001      	movs	r0, #1
 8001572:	f006 faeb 	bl	8007b4c <xQueueGenericCreate>
 8001576:	4603      	mov	r3, r0
 8001578:	4a18      	ldr	r2, [pc, #96]	; (80015dc <createNnObjects+0xa4>)
 800157a:	6013      	str	r3, [r2, #0]
	I2CBufferReadySem = xSemaphoreCreateBinary();
 800157c:	2203      	movs	r2, #3
 800157e:	2100      	movs	r1, #0
 8001580:	2001      	movs	r0, #1
 8001582:	f006 fae3 	bl	8007b4c <xQueueGenericCreate>
 8001586:	4603      	mov	r3, r0
 8001588:	4a15      	ldr	r2, [pc, #84]	; (80015e0 <createNnObjects+0xa8>)
 800158a:	6013      	str	r3, [r2, #0]

	xSemaphoreGive(uartSemaphoreHandle); // UART printf
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <createNnObjects+0x98>)
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	2300      	movs	r3, #0
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	f006 fb37 	bl	8007c08 <xQueueGenericSend>
	xSemaphoreGive(I2CBusySem);
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <createNnObjects+0xa4>)
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	2300      	movs	r3, #0
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	f006 fb30 	bl	8007c08 <xQueueGenericSend>
	xSemaphoreTake(inputSemHandle,0); //Buffer de entrada
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <createNnObjects+0x9c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f006 fe30 	bl	8008214 <xQueueSemaphoreTake>
	xSemaphoreTake(outputSemHandle,0); //Buffer de salida
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <createNnObjects+0xa0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f006 fe2a 	bl	8008214 <xQueueSemaphoreTake>
	xSemaphoreTake(I2CBufferReadySem,0);
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <createNnObjects+0xa8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f006 fe24 	bl	8008214 <xQueueSemaphoreTake>

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000bd4 	.word	0x20000bd4
 80015d4:	20000bcc 	.word	0x20000bcc
 80015d8:	20000bd0 	.word	0x20000bd0
 80015dc:	20000bd8 	.word	0x20000bd8
 80015e0:	20000bdc 	.word	0x20000bdc

080015e4 <initSensorsAndNN>:

void initSensorsAndNN(){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af02      	add	r7, sp, #8

	xTaskCreate(initTask,"initTask",512,NULL,1,&initHandle);
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <initSensorsAndNN+0x24>)
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	2301      	movs	r3, #1
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2300      	movs	r3, #0
 80015f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f8:	4904      	ldr	r1, [pc, #16]	; (800160c <initSensorsAndNN+0x28>)
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <initSensorsAndNN+0x2c>)
 80015fc:	f007 f8f9 	bl	80087f2 <xTaskCreate>
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000be0 	.word	0x20000be0
 800160c:	0801132c 	.word	0x0801132c
 8001610:	08001619 	.word	0x08001619
 8001614:	00000000 	.word	0x00000000

08001618 <initTask>:

void initTask(void * param){
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af02      	add	r7, sp, #8
 800161e:	6078      	str	r0, [r7, #4]

	uint8_t ret;

	ret = initSensors();
 8001620:	f000 fb16 	bl	8001c50 <initSensors>
 8001624:	4603      	mov	r3, r0
 8001626:	73fb      	strb	r3, [r7, #15]

	if (ret == 0){
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d114      	bne.n	8001658 <initTask+0x40>

		printf("Acelerómetro y Giroscopio configurados a una frecuencia de %d Hz en un rango de medida: +- %.2f mg,dps \r\n\n",SENSORS_DATA_RATE,MEASUREMENT_RANGE);
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <initTask+0x70>)
 8001634:	211a      	movs	r1, #26
 8001636:	4815      	ldr	r0, [pc, #84]	; (800168c <initTask+0x74>)
 8001638:	f00d fd6c 	bl	800f114 <iprintf>
		printf("Sensibilidad de los sensores: %.3f ,%.6f \r\n\n",ACEL_SENSIVITY,GIR_SENSIVITY);
 800163c:	a30e      	add	r3, pc, #56	; (adr r3, 8001678 <initTask+0x60>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	e9cd 2300 	strd	r2, r3, [sp]
 8001646:	a30e      	add	r3, pc, #56	; (adr r3, 8001680 <initTask+0x68>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	4810      	ldr	r0, [pc, #64]	; (8001690 <initTask+0x78>)
 800164e:	f00d fd61 	bl	800f114 <iprintf>

		initNN();
 8001652:	f000 f937 	bl	80018c4 <initNN>
 8001656:	e004      	b.n	8001662 <initTask+0x4a>

	}else{

		printf("Ha ocurrido un error iniciando los sensores\r\n");
 8001658:	480e      	ldr	r0, [pc, #56]	; (8001694 <initTask+0x7c>)
 800165a:	f00d fde1 	bl	800f220 <puts>
		NVIC_SystemReset();
 800165e:	f7ff ff55 	bl	800150c <__NVIC_SystemReset>
	}

	createNnTasks();
 8001662:	f000 f81b 	bl	800169c <createNnTasks>

	vTaskDelete(initHandle);
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <initTask+0x80>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f007 fa1c 	bl	8008aa8 <vTaskDelete>

}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000000 	.word	0x20000000
 800167c:	3fb1eb85 	.word	0x3fb1eb85
 8001680:	60000000 	.word	0x60000000
 8001684:	3faf3b64 	.word	0x3faf3b64
 8001688:	409f4000 	.word	0x409f4000
 800168c:	08011338 	.word	0x08011338
 8001690:	080113a4 	.word	0x080113a4
 8001694:	080113d4 	.word	0x080113d4
 8001698:	20000be0 	.word	0x20000be0

0800169c <createNnTasks>:
void createNnTasks()
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af02      	add	r7, sp, #8

	xTaskCreate(processDataTask, "processDataTask",256, NULL,1, &processDataHandle);
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <createNnTasks+0x50>)
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	2301      	movs	r3, #1
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2300      	movs	r3, #0
 80016ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b0:	490f      	ldr	r1, [pc, #60]	; (80016f0 <createNnTasks+0x54>)
 80016b2:	4810      	ldr	r0, [pc, #64]	; (80016f4 <createNnTasks+0x58>)
 80016b4:	f007 f89d 	bl	80087f2 <xTaskCreate>

	xTaskCreate(postProcessTask, "postProcessTask",256, NULL,1, &postProcessHandle);
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <createNnTasks+0x5c>)
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	2301      	movs	r3, #1
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	2300      	movs	r3, #0
 80016c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c6:	490d      	ldr	r1, [pc, #52]	; (80016fc <createNnTasks+0x60>)
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <createNnTasks+0x64>)
 80016ca:	f007 f892 	bl	80087f2 <xTaskCreate>

	xTaskCreate(acquireDataTask, "acquireDataTask",256, NULL,1, &acquireDataHandle);
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <createNnTasks+0x68>)
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	2301      	movs	r3, #1
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2300      	movs	r3, #0
 80016d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016dc:	490a      	ldr	r1, [pc, #40]	; (8001708 <createNnTasks+0x6c>)
 80016de:	480b      	ldr	r0, [pc, #44]	; (800170c <createNnTasks+0x70>)
 80016e0:	f007 f887 	bl	80087f2 <xTaskCreate>


}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000be8 	.word	0x20000be8
 80016f0:	08011404 	.word	0x08011404
 80016f4:	08001a5d 	.word	0x08001a5d
 80016f8:	20000bec 	.word	0x20000bec
 80016fc:	08011414 	.word	0x08011414
 8001700:	08001ac9 	.word	0x08001ac9
 8001704:	20000be4 	.word	0x20000be4
 8001708:	08011424 	.word	0x08011424
 800170c:	08001969 	.word	0x08001969

08001710 <ai_log_err>:


static void ai_log_err(const ai_error err, const char *fct)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d009      	beq.n	8001734 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8001720:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8001722:	461a      	mov	r2, r3
        err.type, err.code);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800172a:	6839      	ldr	r1, [r7, #0]
 800172c:	4806      	ldr	r0, [pc, #24]	; (8001748 <ai_log_err+0x38>)
 800172e:	f00d fcf1 	bl	800f114 <iprintf>
 8001732:	e008      	b.n	8001746 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8001734:	793b      	ldrb	r3, [r7, #4]
 8001736:	4619      	mov	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800173e:	461a      	mov	r2, r3
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <ai_log_err+0x3c>)
 8001742:	f00d fce7 	bl	800f114 <iprintf>

  do {} while (1);
 8001746:	e7fe      	b.n	8001746 <ai_log_err+0x36>
 8001748:	08011434 	.word	0x08011434
 800174c:	08011468 	.word	0x08011468

08001750 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b090      	sub	sp, #64	; 0x40
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800175a:	2100      	movs	r1, #0
 800175c:	4838      	ldr	r0, [pc, #224]	; (8001840 <ai_boostrap+0xf0>)
 800175e:	f009 f989 	bl	800aa74 <ai_network_create>
 8001762:	4603      	mov	r3, r0
 8001764:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 8001766:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <ai_boostrap+0x2c>
    ai_log_err(err, "ai_network_create");
 800176e:	4935      	ldr	r1, [pc, #212]	; (8001844 <ai_boostrap+0xf4>)
 8001770:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001772:	f7ff ffcd 	bl	8001710 <ai_log_err>
    return -1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	e05c      	b.n	8001836 <ai_boostrap+0xe6>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 800177c:	4b32      	ldr	r3, [pc, #200]	; (8001848 <ai_boostrap+0xf8>)
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	2301      	movs	r3, #1
 8001782:	823b      	strh	r3, [r7, #16]
 8001784:	2301      	movs	r3, #1
 8001786:	827b      	strh	r3, [r7, #18]
 8001788:	2301      	movs	r3, #1
 800178a:	82bb      	strh	r3, [r7, #20]
 800178c:	f641 5344 	movw	r3, #7492	; 0x1d44
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
 800179a:	4b2c      	ldr	r3, [pc, #176]	; (800184c <ai_boostrap+0xfc>)
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
 800179e:	2301      	movs	r3, #1
 80017a0:	853b      	strh	r3, [r7, #40]	; 0x28
 80017a2:	2301      	movs	r3, #1
 80017a4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80017a6:	2301      	movs	r3, #1
 80017a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80017aa:	f44f 7350 	mov.w	r3, #832	; 0x340
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
 80017b4:	2300      	movs	r3, #0
 80017b6:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) );

  if (!ai_network_init(network, &params)) {
 80017b8:	4b21      	ldr	r3, [pc, #132]	; (8001840 <ai_boostrap+0xf0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f107 020c 	add.w	r2, r7, #12
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f009 f978 	bl	800aab8 <ai_network_init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f083 0301 	eor.w	r3, r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00d      	beq.n	80017f0 <ai_boostrap+0xa0>
      err = ai_network_get_error(network);
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <ai_boostrap+0xf0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f009 f93f 	bl	800aa5c <ai_network_get_error>
 80017de:	4603      	mov	r3, r0
 80017e0:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_network_init");
 80017e2:	491b      	ldr	r1, [pc, #108]	; (8001850 <ai_boostrap+0x100>)
 80017e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80017e6:	f7ff ff93 	bl	8001710 <ai_log_err>
      return -1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e022      	b.n	8001836 <ai_boostrap+0xe6>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <ai_boostrap+0xf0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4917      	ldr	r1, [pc, #92]	; (8001854 <ai_boostrap+0x104>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	f009 f8d2 	bl	800a9a0 <ai_network_get_info>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f083 0301 	eor.w	r3, r3, #1
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d015      	beq.n	8001834 <ai_boostrap+0xe4>
    err = ai_network_get_error(network);
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <ai_boostrap+0xf0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f009 f925 	bl	800aa5c <ai_network_get_error>
 8001812:	4603      	mov	r3, r0
 8001814:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_network_get_error");
 8001816:	4910      	ldr	r1, [pc, #64]	; (8001858 <ai_boostrap+0x108>)
 8001818:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800181a:	f7ff ff79 	bl	8001710 <ai_log_err>
    ai_network_destroy(network);
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <ai_boostrap+0xf0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f009 f93c 	bl	800aaa0 <ai_network_destroy>
    network = AI_HANDLE_NULL;
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <ai_boostrap+0xf0>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
    return -3;
 800182e:	f06f 0302 	mvn.w	r3, #2
 8001832:	e000      	b.n	8001836 <ai_boostrap+0xe6>
  }

  return 0;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3740      	adds	r7, #64	; 0x40
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000c04 	.word	0x20000c04
 8001844:	08011498 	.word	0x08011498
 8001848:	40040440 	.word	0x40040440
 800184c:	00040440 	.word	0x00040440
 8001850:	080114ac 	.word	0x080114ac
 8001854:	20000c08 	.word	0x20000c08
 8001858:	080114bc 	.word	0x080114bc

0800185c <ai_run>:

static int ai_run(void *data_in, void *data_out)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  ai_i32 batch;

  ai_buffer *ai_input = network_info.inputs;
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <ai_run+0x5c>)
 8001868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186a:	617b      	str	r3, [r7, #20]
  ai_buffer *ai_output = network_info.outputs;
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <ai_run+0x5c>)
 800186e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001870:	613b      	str	r3, [r7, #16]

  ai_input[0].data = AI_HANDLE_PTR(data_in);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	611a      	str	r2, [r3, #16]
  ai_output[0].data = AI_HANDLE_PTR(data_out);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	611a      	str	r2, [r3, #16]

  batch = ai_network_run(network, ai_input, ai_output);
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <ai_run+0x60>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	6979      	ldr	r1, [r7, #20]
 8001886:	4618      	mov	r0, r3
 8001888:	f009 f952 	bl	800ab30 <ai_network_run>
 800188c:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d00c      	beq.n	80018ae <ai_run+0x52>
    ai_log_err(ai_network_get_error(network),
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <ai_run+0x60>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f009 f8df 	bl	800aa5c <ai_network_get_error>
 800189e:	4603      	mov	r3, r0
 80018a0:	4907      	ldr	r1, [pc, #28]	; (80018c0 <ai_run+0x64>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff34 	bl	8001710 <ai_log_err>
        "ai_network_run");
    return -1;
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ac:	e000      	b.n	80018b0 <ai_run+0x54>
  }

  return 0;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000c08 	.word	0x20000c08
 80018bc:	20000c04 	.word	0x20000c04
 80018c0:	080114d4 	.word	0x080114d4

080018c4 <initNN>:

void initNN()
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0

	ai_boostrap(ai_network_data_weights_get(), activations);
 80018ca:	f009 f941 	bl	800ab50 <ai_network_data_weights_get>
 80018ce:	4603      	mov	r3, r0
 80018d0:	491b      	ldr	r1, [pc, #108]	; (8001940 <initNN+0x7c>)
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff3c 	bl	8001750 <ai_boostrap>

	if (network) {
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <initNN+0x80>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d014      	beq.n	800190a <initNN+0x46>

		if ((network_info.n_inputs != 1) || (network_info.n_outputs != 1)) {
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <initNN+0x84>)
 80018e2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d103      	bne.n	80018f0 <initNN+0x2c>
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <initNN+0x84>)
 80018ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d00c      	beq.n	800190a <initNN+0x46>
  			ai_error err = {AI_ERROR_INVALID_PARAM, AI_ERROR_CODE_OUT_OF_RANGE};
 80018f0:	2314      	movs	r3, #20
 80018f2:	713b      	strb	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2220      	movs	r2, #32
 80018f8:	f362 231f 	bfi	r3, r2, #8, #24
 80018fc:	607b      	str	r3, [r7, #4]
  			ai_log_err(err, "template code should be updated\r\n to support a model with multiple IO");
 80018fe:	4913      	ldr	r1, [pc, #76]	; (800194c <initNN+0x88>)
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff05 	bl	8001710 <ai_log_err>
  			NVIC_SystemReset();
 8001906:	f7ff fe01 	bl	800150c <__NVIC_SystemReset>
	/* 1 - Set the I/O data buffer */

	#if AI_NETWORK_INPUTS_IN_ACTIVATIONS
		in_data = network_info.inputs[0].data;
	#else
		in_data = in_data_s;
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <initNN+0x8c>)
 800190c:	4a11      	ldr	r2, [pc, #68]	; (8001954 <initNN+0x90>)
 800190e:	601a      	str	r2, [r3, #0]
	#endif

	#if AI_NETWORK_OUTPUTS_IN_ACTIVATIONS
		out_data = network_info.outputs[0].data;
	#else
		out_data = out_data_s;
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <initNN+0x94>)
 8001912:	4a12      	ldr	r2, [pc, #72]	; (800195c <initNN+0x98>)
 8001914:	601a      	str	r2, [r3, #0]
	#endif

	if ((!in_data) || (!out_data)) {
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <initNN+0x8c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <initNN+0x62>
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <initNN+0x94>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d104      	bne.n	8001930 <initNN+0x6c>
		printf("TEMPLATE - I/O buffers are invalid\r\n");
 8001926:	480e      	ldr	r0, [pc, #56]	; (8001960 <initNN+0x9c>)
 8001928:	f00d fc7a 	bl	800f220 <puts>
		NVIC_SystemReset(); //Reset al dispositivo
 800192c:	f7ff fdee 	bl	800150c <__NVIC_SystemReset>
	}


	printf("\r\nRed neuronal inicializada\r\n\n");
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <initNN+0xa0>)
 8001932:	f00d fc75 	bl	800f220 <puts>


}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000c7c 	.word	0x20000c7c
 8001944:	20000c04 	.word	0x20000c04
 8001948:	20000c08 	.word	0x20000c08
 800194c:	080114e4 	.word	0x080114e4
 8001950:	20000bfc 	.word	0x20000bfc
 8001954:	20000fbc 	.word	0x20000fbc
 8001958:	20000c00 	.word	0x20000c00
 800195c:	2000122c 	.word	0x2000122c
 8001960:	0801152c 	.word	0x0801152c
 8001964:	08011550 	.word	0x08011550

08001968 <acquireDataTask>:


void acquireDataTask(void * param)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

	uint8_t i;

	for(;;){
		for(i = 0; i < AI_NETWORK_IN_1_SIZE; i += 6){
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	e05d      	b.n	8001a32 <acquireDataTask+0xca>
			readSensorsIT();
 8001976:	f000 f9b7 	bl	8001ce8 <readSensorsIT>
			((ai_float *)in_data)[i] = (ai_float)(acelBuff[0]/MEASUREMENT_RANGE); //2000
 800197a:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <acquireDataTask+0xe0>)
 800197c:	ed93 7a00 	vldr	s14, [r3]
 8001980:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <acquireDataTask+0xe4>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001a50 <acquireDataTask+0xe8>
 800198e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001992:	edc3 7a00 	vstr	s15, [r3]
			((ai_float *)in_data)[i+1] = (ai_float)(acelBuff[1]/MEASUREMENT_RANGE);
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <acquireDataTask+0xe0>)
 8001998:	ed93 7a01 	vldr	s14, [r3, #4]
 800199c:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <acquireDataTask+0xe4>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	3301      	adds	r3, #1
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001a50 <acquireDataTask+0xe8>
 80019ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b0:	edc3 7a00 	vstr	s15, [r3]
			((ai_float *)in_data)[i+2] = (ai_float)(acelBuff[2]/MEASUREMENT_RANGE);
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <acquireDataTask+0xe0>)
 80019b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80019ba:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <acquireDataTask+0xe4>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	3302      	adds	r3, #2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001a50 <acquireDataTask+0xe8>
 80019ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ce:	edc3 7a00 	vstr	s15, [r3]
			((ai_float *)in_data)[i+3] = (ai_float)(girBuff[0]/MEASUREMENT_RANGE);
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <acquireDataTask+0xec>)
 80019d4:	ed93 7a00 	vldr	s14, [r3]
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <acquireDataTask+0xe4>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	3303      	adds	r3, #3
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001a50 <acquireDataTask+0xe8>
 80019e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ec:	edc3 7a00 	vstr	s15, [r3]
			((ai_float *)in_data)[i+4] = (ai_float)(girBuff[1]/MEASUREMENT_RANGE);
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <acquireDataTask+0xec>)
 80019f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <acquireDataTask+0xe4>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	3304      	adds	r3, #4
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001a50 <acquireDataTask+0xe8>
 8001a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
			((ai_float *)in_data)[i+5] = (ai_float)(girBuff[2]/MEASUREMENT_RANGE);
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <acquireDataTask+0xec>)
 8001a10:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <acquireDataTask+0xe4>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	3305      	adds	r3, #5
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001a50 <acquireDataTask+0xe8>
 8001a24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a28:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < AI_NETWORK_IN_1_SIZE; i += 6){
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	3306      	adds	r3, #6
 8001a30:	73fb      	strb	r3, [r7, #15]
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	2b9b      	cmp	r3, #155	; 0x9b
 8001a36:	d99e      	bls.n	8001976 <acquireDataTask+0xe>
		}

		xSemaphoreGive(inputSemHandle);
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <acquireDataTask+0xf0>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	f006 f8e1 	bl	8007c08 <xQueueGenericSend>
		for(i = 0; i < AI_NETWORK_IN_1_SIZE; i += 6){
 8001a46:	e793      	b.n	8001970 <acquireDataTask+0x8>
 8001a48:	20000bb4 	.word	0x20000bb4
 8001a4c:	20000bfc 	.word	0x20000bfc
 8001a50:	44fa0000 	.word	0x44fa0000
 8001a54:	20000bc0 	.word	0x20000bc0
 8001a58:	20000bcc 	.word	0x20000bcc

08001a5c <processDataTask>:
	}

}

void processDataTask(void * param)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

	int res;

	for(;;){

		xSemaphoreTake(inputSemHandle,portMAX_DELAY);
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <processDataTask+0x58>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f006 fbd1 	bl	8008214 <xQueueSemaphoreTake>

		res = ai_run(in_data,out_data); //Inferencia
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <processDataTask+0x5c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a11      	ldr	r2, [pc, #68]	; (8001abc <processDataTask+0x60>)
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff feed 	bl	800185c <ai_run>
 8001a82:	60f8      	str	r0, [r7, #12]


		if (res) {
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00c      	beq.n	8001aa4 <processDataTask+0x48>

			ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8001a8a:	2311      	movs	r3, #17
 8001a8c:	723b      	strb	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2210      	movs	r2, #16
 8001a92:	f362 231f 	bfi	r3, r2, #8, #24
 8001a96:	60bb      	str	r3, [r7, #8]
		    ai_log_err(err, "Process has FAILED");
 8001a98:	4909      	ldr	r1, [pc, #36]	; (8001ac0 <processDataTask+0x64>)
 8001a9a:	68b8      	ldr	r0, [r7, #8]
 8001a9c:	f7ff fe38 	bl	8001710 <ai_log_err>
		    NVIC_SystemReset();
 8001aa0:	f7ff fd34 	bl	800150c <__NVIC_SystemReset>

		}else{

			xSemaphoreGive(outputSemHandle);
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <processDataTask+0x68>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	f006 f8ab 	bl	8007c08 <xQueueGenericSend>
		xSemaphoreTake(inputSemHandle,portMAX_DELAY);
 8001ab2:	e7d7      	b.n	8001a64 <processDataTask+0x8>
 8001ab4:	20000bcc 	.word	0x20000bcc
 8001ab8:	20000bfc 	.word	0x20000bfc
 8001abc:	20000c00 	.word	0x20000c00
 8001ac0:	08011570 	.word	0x08011570
 8001ac4:	20000bd0 	.word	0x20000bd0

08001ac8 <postProcessTask>:
		}

	}
}
void postProcessTask(void * param)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	uint8_t maxIndex;
	uint8_t i;

	for(;;){

		xSemaphoreTake(outputSemHandle,portMAX_DELAY);
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <postProcessTask+0xa8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f006 fb9b 	bl	8008214 <xQueueSemaphoreTake>
		maxIndex = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	73fb      	strb	r3, [r7, #15]
		for(i = 1; i < AI_NETWORK_OUT_1_SIZE; i++){
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	73bb      	strb	r3, [r7, #14]
 8001ae6:	e017      	b.n	8001b18 <postProcessTask+0x50>
				if(((float*)out_data)[i] > ((float*)out_data)[maxIndex]){
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <postProcessTask+0xac>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	7bbb      	ldrb	r3, [r7, #14]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	ed93 7a00 	vldr	s14, [r3]
 8001af6:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <postProcessTask+0xac>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0c:	dd01      	ble.n	8001b12 <postProcessTask+0x4a>
					maxIndex = i;
 8001b0e:	7bbb      	ldrb	r3, [r7, #14]
 8001b10:	73fb      	strb	r3, [r7, #15]
		for(i = 1; i < AI_NETWORK_OUT_1_SIZE; i++){
 8001b12:	7bbb      	ldrb	r3, [r7, #14]
 8001b14:	3301      	adds	r3, #1
 8001b16:	73bb      	strb	r3, [r7, #14]
 8001b18:	7bbb      	ldrb	r3, [r7, #14]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d9e4      	bls.n	8001ae8 <postProcessTask+0x20>
				}
		}

		salida = ((float*)out_data)[maxIndex];
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <postProcessTask+0xac>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	60bb      	str	r3, [r7, #8]
		elapsed = end - start;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <postProcessTask+0xb0>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <postProcessTask+0xb4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <postProcessTask+0xb8>)
 8001b38:	6013      	str	r3, [r2, #0]
		printf("Precisión: %f \r\n",salida);
 8001b3a:	68b8      	ldr	r0, [r7, #8]
 8001b3c:	f7fe fd04 	bl	8000548 <__aeabi_f2d>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	480f      	ldr	r0, [pc, #60]	; (8001b84 <postProcessTask+0xbc>)
 8001b46:	f00d fae5 	bl	800f114 <iprintf>
		printf("Movimiento: %s \r\n",movements[maxIndex]);
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <postProcessTask+0xc0>)
 8001b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b52:	4619      	mov	r1, r3
 8001b54:	480d      	ldr	r0, [pc, #52]	; (8001b8c <postProcessTask+0xc4>)
 8001b56:	f00d fadd 	bl	800f114 <iprintf>
		printf("Tiempo de inferencia: %lu ticks (ms) \r\n",elapsed);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <postProcessTask+0xb8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	480b      	ldr	r0, [pc, #44]	; (8001b90 <postProcessTask+0xc8>)
 8001b62:	f00d fad7 	bl	800f114 <iprintf>
		printf("======================== \r\n");
 8001b66:	480b      	ldr	r0, [pc, #44]	; (8001b94 <postProcessTask+0xcc>)
 8001b68:	f00d fb5a 	bl	800f220 <puts>
		xSemaphoreTake(outputSemHandle,portMAX_DELAY);
 8001b6c:	e7b0      	b.n	8001ad0 <postProcessTask+0x8>
 8001b6e:	bf00      	nop
 8001b70:	20000bd0 	.word	0x20000bd0
 8001b74:	20000c00 	.word	0x20000c00
 8001b78:	20000bf4 	.word	0x20000bf4
 8001b7c:	20000bf0 	.word	0x20000bf0
 8001b80:	20000bf8 	.word	0x20000bf8
 8001b84:	08011584 	.word	0x08011584
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	08011598 	.word	0x08011598
 8001b90:	080115ac 	.word	0x080115ac
 8001b94:	080115d4 	.word	0x080115d4

08001b98 <HAL_I2C_MemRxCpltCallback>:

	}
}

void HAL_I2C_MemRxCpltCallback( I2C_HandleTypeDef *hi2c)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

    BaseType_t hasWaken;

    xSemaphoreGiveFromISR(I2CBusySem,&hasWaken);
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_I2C_MemRxCpltCallback+0x48>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f107 020c 	add.w	r2, r7, #12
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f006 f9c5 	bl	8007f3a <xQueueGiveFromISR>

    xSemaphoreGiveFromISR(I2CBufferReadySem,&hasWaken);
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_I2C_MemRxCpltCallback+0x4c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f107 020c 	add.w	r2, r7, #12
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f006 f9bd 	bl	8007f3a <xQueueGiveFromISR>

    portYIELD_FROM_ISR(hasWaken);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <HAL_I2C_MemRxCpltCallback+0x3e>
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_I2C_MemRxCpltCallback+0x50>)
 8001bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f3bf 8f4f 	dsb	sy
 8001bd2:	f3bf 8f6f 	isb	sy


}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000bd8 	.word	0x20000bd8
 8001be4:	20000bdc 	.word	0x20000bdc
 8001be8:	e000ed04 	.word	0xe000ed04

08001bec <ReadI2C_IT>:

void ReadI2C_IT(uint8_t *buffer,uint16_t addr, uint8_t len)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	707b      	strb	r3, [r7, #1]

	xSemaphoreTake(I2CBusySem, portMAX_DELAY);
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <ReadI2C_IT+0x58>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	4618      	mov	r0, r3
 8001c06:	f006 fb05 	bl	8008214 <xQueueSemaphoreTake>

	HAL_I2C_Mem_Read_IT(&hi2c2, 0xD5, addr,I2C_MEMADD_SIZE_8BIT, buffer, len);
 8001c0a:	787b      	ldrb	r3, [r7, #1]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2301      	movs	r3, #1
 8001c18:	21d5      	movs	r1, #213	; 0xd5
 8001c1a:	480b      	ldr	r0, [pc, #44]	; (8001c48 <ReadI2C_IT+0x5c>)
 8001c1c:	f001 fa1c 	bl	8003058 <HAL_I2C_Mem_Read_IT>

	xSemaphoreTake(I2CBufferReadySem, portMAX_DELAY);
 8001c20:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <ReadI2C_IT+0x60>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f006 faf3 	bl	8008214 <xQueueSemaphoreTake>

	xSemaphoreTake(I2CBufferReadySem, 0);
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <ReadI2C_IT+0x60>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f006 faed 	bl	8008214 <xQueueSemaphoreTake>

}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000bd8 	.word	0x20000bd8
 8001c48:	20000ad8 	.word	0x20000ad8
 8001c4c:	20000bdc 	.word	0x20000bdc

08001c50 <initSensors>:

uint8_t initSensors()
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af04      	add	r7, sp, #16

	uint8_t acelConfig [1] = {0x20}; //contenido del registro con la configuracion adecuada
 8001c56:	2320      	movs	r3, #32
 8001c58:	713b      	strb	r3, [r7, #4]
	uint8_t girConfig [1] = {0x2C}; // 26Hz 2000mg, 2000dps
 8001c5a:	232c      	movs	r3, #44	; 0x2c
 8001c5c:	703b      	strb	r3, [r7, #0]
	uint8_t ret;

	ret = HAL_I2C_Mem_Write(&hi2c2, WRITE_ADDR, GIR_CONTROL_REG, I2C_MEMADD_SIZE_8BIT, girConfig, 1, 100);
 8001c5e:	2364      	movs	r3, #100	; 0x64
 8001c60:	9302      	str	r3, [sp, #8]
 8001c62:	2301      	movs	r3, #1
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	463b      	mov	r3, r7
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	2211      	movs	r2, #17
 8001c6e:	21d4      	movs	r1, #212	; 0xd4
 8001c70:	4819      	ldr	r0, [pc, #100]	; (8001cd8 <initSensors+0x88>)
 8001c72:	f001 f8dd 	bl	8002e30 <HAL_I2C_Mem_Write>
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]

	ret |= HAL_I2C_Mem_Write(&hi2c2, WRITE_ADDR, ACEL_CONTROL_REG, I2C_MEMADD_SIZE_8BIT, acelConfig, 1, 100);
 8001c7a:	2364      	movs	r3, #100	; 0x64
 8001c7c:	9302      	str	r3, [sp, #8]
 8001c7e:	2301      	movs	r3, #1
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2301      	movs	r3, #1
 8001c88:	2210      	movs	r2, #16
 8001c8a:	21d4      	movs	r1, #212	; 0xd4
 8001c8c:	4812      	ldr	r0, [pc, #72]	; (8001cd8 <initSensors+0x88>)
 8001c8e:	f001 f8cf 	bl	8002e30 <HAL_I2C_Mem_Write>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	71fb      	strb	r3, [r7, #7]

	printf("Acelerómetro y Giroscopio configurados en un rango de medida: +- %.2f mg,dps \r\n",MEASUREMENT_RANGE);
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <initSensors+0x8c>)
 8001ca2:	480f      	ldr	r0, [pc, #60]	; (8001ce0 <initSensors+0x90>)
 8001ca4:	f00d fa36 	bl	800f114 <iprintf>
	printf("Sensibilidad de los sensores: %.3f ,%.6f \r\n\n",ACEL_SENSIVITY,GIR_SENSIVITY);
 8001ca8:	a307      	add	r3, pc, #28	; (adr r3, 8001cc8 <initSensors+0x78>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	e9cd 2300 	strd	r2, r3, [sp]
 8001cb2:	a307      	add	r3, pc, #28	; (adr r3, 8001cd0 <initSensors+0x80>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	480a      	ldr	r0, [pc, #40]	; (8001ce4 <initSensors+0x94>)
 8001cba:	f00d fa2b 	bl	800f114 <iprintf>

	return ret;
 8001cbe:	79fb      	ldrb	r3, [r7, #7]

}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	3fb1eb85 	.word	0x3fb1eb85
 8001cd0:	60000000 	.word	0x60000000
 8001cd4:	3faf3b64 	.word	0x3faf3b64
 8001cd8:	20000ad8 	.word	0x20000ad8
 8001cdc:	409f4000 	.word	0x409f4000
 8001ce0:	080115f0 	.word	0x080115f0
 8001ce4:	080113a4 	.word	0x080113a4

08001ce8 <readSensorsIT>:

void readSensorsIT()
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0

	uint8_t i2cBuffer[12];
	uint8_t i;

	ReadI2C_IT(i2cBuffer, REG_STATUS, 1);
 8001cee:	463b      	mov	r3, r7
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	211e      	movs	r1, #30
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff79 	bl	8001bec <ReadI2C_IT>

	while((i2cBuffer[0] & 0x03) != 0x03){ // Polling a los bits que indican cuando hay datos nuevos
 8001cfa:	e005      	b.n	8001d08 <readSensorsIT+0x20>

		ReadI2C_IT(i2cBuffer, REG_STATUS, 1);
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	2201      	movs	r2, #1
 8001d00:	211e      	movs	r1, #30
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff72 	bl	8001bec <ReadI2C_IT>
	while((i2cBuffer[0] & 0x03) != 0x03){ // Polling a los bits que indican cuando hay datos nuevos
 8001d08:	783b      	ldrb	r3, [r7, #0]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d1f4      	bne.n	8001cfc <readSensorsIT+0x14>

	}

	ReadI2C_IT(i2cBuffer, REG_GIR, 12); // 0x22 reg acel y 0x28, al estar consecutivos podemos
 8001d12:	463b      	mov	r3, r7
 8001d14:	220c      	movs	r2, #12
 8001d16:	2122      	movs	r1, #34	; 0x22
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff67 	bl	8001bec <ReadI2C_IT>
									    // leer los 2 sensores de una sola transferencia
	for(i = 0; i < 3; i++){
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]
 8001d22:	e041      	b.n	8001da8 <readSensorsIT+0xc0>

		girBuff[i] = (float) ((int16_t) (i2cBuffer[2*i+1] << 8) | i2cBuffer[2*i]) * GIR_SENSIVITY;
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	3301      	adds	r3, #1
 8001d2a:	3310      	adds	r3, #16
 8001d2c:	443b      	add	r3, r7
 8001d2e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	461a      	mov	r2, r3
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	3310      	adds	r3, #16
 8001d3e:	443b      	add	r3, r7
 8001d40:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001db8 <readSensorsIT+0xd0>
 8001d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d58:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <readSensorsIT+0xd4>)
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	edc3 7a00 	vstr	s15, [r3]

		acelBuff[i] = (float) ((int16_t) (i2cBuffer[(2*i+1)+6] << 8) | i2cBuffer[(2*i)+6]) * ACEL_SENSIVITY;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	3307      	adds	r3, #7
 8001d68:	3310      	adds	r3, #16
 8001d6a:	443b      	add	r3, r7
 8001d6c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	3303      	adds	r3, #3
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	3310      	adds	r3, #16
 8001d7e:	443b      	add	r3, r7
 8001d80:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001dc0 <readSensorsIT+0xd8>
 8001d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d98:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <readSensorsIT+0xdc>)
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0; i < 3; i++){
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	3301      	adds	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d9ba      	bls.n	8001d24 <readSensorsIT+0x3c>

		//0.14  0.29  0.43  0.58
	}

}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	3d8f5c29 	.word	0x3d8f5c29
 8001dbc:	20000bc0 	.word	0x20000bc0
 8001dc0:	3d79db23 	.word	0x3d79db23
 8001dc4:	20000bb4 	.word	0x20000bb4

08001dc8 <HAL_UART_TxCpltCallback>:

extern UART_HandleTypeDef huart1;
extern SemaphoreHandle_t uartSemaphoreHandle;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	static signed long xHigherPriorityTaskWoken = pdFALSE;

	xSemaphoreGiveFromISR(uartSemaphoreHandle, &xHigherPriorityTaskWoken);
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_UART_TxCpltCallback+0x34>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	490a      	ldr	r1, [pc, #40]	; (8001e00 <HAL_UART_TxCpltCallback+0x38>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f006 f8af 	bl	8007f3a <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_UART_TxCpltCallback+0x38>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <HAL_UART_TxCpltCallback+0x2c>
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <HAL_UART_TxCpltCallback+0x3c>)
 8001de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	f3bf 8f4f 	dsb	sy
 8001df0:	f3bf 8f6f 	isb	sy

}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000bd4 	.word	0x20000bd4
 8001e00:	2000123c 	.word	0x2000123c
 8001e04:	e000ed04 	.word	0xe000ed04

08001e08 <__io_putchar>:

int __io_putchar(int ch)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(uartSemaphoreHandle, 0xffff);
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <__io_putchar+0x2c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f006 f9fb 	bl	8008214 <xQueueSemaphoreTake>

	HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ch, 1);
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	2201      	movs	r2, #1
 8001e22:	4619      	mov	r1, r3
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <__io_putchar+0x30>)
 8001e26:	f004 fa67 	bl	80062f8 <HAL_UART_Transmit_IT>

	//while(HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 30000))
	//{
	//	;
	//}
	return ch;
 8001e2a:	687b      	ldr	r3, [r7, #4]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000bd4 	.word	0x20000bd4
 8001e38:	20000b2c 	.word	0x20000b2c

08001e3c <__io_getchar>:

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

int __io_getchar(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	71fb      	strb	r3, [r7, #7]

	//while(HAL_OK != HAL_UART_Receive(&huart1, &ch, 1, 30000))
	//{
	//	;
	//}
	HAL_UART_Receive(&huart1, &ch, 1, 0);
 8001e46:	1df9      	adds	r1, r7, #7
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4803      	ldr	r0, [pc, #12]	; (8001e5c <__io_getchar+0x20>)
 8001e4e:	f004 f981 	bl	8006154 <HAL_UART_Receive>

	return ch;
 8001e52:	79fb      	ldrb	r3, [r7, #7]


}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000b2c 	.word	0x20000b2c

08001e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_MspInit+0x4c>)
 8001e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_MspInit+0x4c>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6613      	str	r3, [r2, #96]	; 0x60
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_MspInit+0x4c>)
 8001e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_MspInit+0x4c>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <HAL_MspInit+0x4c>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_MspInit+0x4c>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	210f      	movs	r1, #15
 8001e9a:	f06f 0001 	mvn.w	r0, #1
 8001e9e:	f000 fba4 	bl	80025ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_CRC_MspInit+0x38>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d10b      	bne.n	8001eda <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_CRC_MspInit+0x3c>)
 8001ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_CRC_MspInit+0x3c>)
 8001ec8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ecc:	6493      	str	r3, [r2, #72]	; 0x48
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <HAL_CRC_MspInit+0x3c>)
 8001ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40023000 	.word	0x40023000
 8001eec:	40021000 	.word	0x40021000

08001ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0ac      	sub	sp, #176	; 0xb0
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	2288      	movs	r2, #136	; 0x88
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f00c fbad 	bl	800e670 <memset>
  if(hi2c->Instance==I2C2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <HAL_I2C_MspInit+0xc0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d143      	bne.n	8001fa8 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 fc07 	bl	8005740 <HAL_RCCEx_PeriphCLKConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f38:	f7ff fae2 	bl	8001500 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_I2C_MspInit+0xc4>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <HAL_I2C_MspInit+0xc4>)
 8001f42:	f043 0302 	orr.w	r3, r3, #2
 8001f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f48:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <HAL_I2C_MspInit+0xc4>)
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001f54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f5c:	2312      	movs	r3, #18
 8001f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480f      	ldr	r0, [pc, #60]	; (8001fb8 <HAL_I2C_MspInit+0xc8>)
 8001f7c:	f000 fce4 	bl	8002948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <HAL_I2C_MspInit+0xc4>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <HAL_I2C_MspInit+0xc4>)
 8001f86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_I2C_MspInit+0xc4>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2105      	movs	r1, #5
 8001f9c:	2021      	movs	r0, #33	; 0x21
 8001f9e:	f000 fb24 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001fa2:	2021      	movs	r0, #33	; 0x21
 8001fa4:	f000 fb3d 	bl	8002622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fa8:	bf00      	nop
 8001faa:	37b0      	adds	r7, #176	; 0xb0
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40005800 	.word	0x40005800
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	48000400 	.word	0x48000400

08001fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0ac      	sub	sp, #176	; 0xb0
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2288      	movs	r2, #136	; 0x88
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00c fb47 	bl	800e670 <memset>
  if(huart->Instance==USART1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a25      	ldr	r2, [pc, #148]	; (800207c <HAL_UART_MspInit+0xc0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d142      	bne.n	8002072 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 fba1 	bl	8005740 <HAL_RCCEx_PeriphCLKConfig>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002004:	f7ff fa7c 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002008:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <HAL_UART_MspInit+0xc4>)
 800200a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200c:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <HAL_UART_MspInit+0xc4>)
 800200e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002012:	6613      	str	r3, [r2, #96]	; 0x60
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_UART_MspInit+0xc4>)
 8002016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002020:	4b17      	ldr	r3, [pc, #92]	; (8002080 <HAL_UART_MspInit+0xc4>)
 8002022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002024:	4a16      	ldr	r2, [pc, #88]	; (8002080 <HAL_UART_MspInit+0xc4>)
 8002026:	f043 0302 	orr.w	r3, r3, #2
 800202a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <HAL_UART_MspInit+0xc4>)
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002038:	23c0      	movs	r3, #192	; 0xc0
 800203a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002050:	2307      	movs	r3, #7
 8002052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002056:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800205a:	4619      	mov	r1, r3
 800205c:	4809      	ldr	r0, [pc, #36]	; (8002084 <HAL_UART_MspInit+0xc8>)
 800205e:	f000 fc73 	bl	8002948 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	2105      	movs	r1, #5
 8002066:	2025      	movs	r0, #37	; 0x25
 8002068:	f000 fabf 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800206c:	2025      	movs	r0, #37	; 0x25
 800206e:	f000 fad8 	bl	8002622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002072:	bf00      	nop
 8002074:	37b0      	adds	r7, #176	; 0xb0
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40013800 	.word	0x40013800
 8002080:	40021000 	.word	0x40021000
 8002084:	48000400 	.word	0x48000400

08002088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800208c:	e7fe      	b.n	800208c <NMI_Handler+0x4>

0800208e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002092:	e7fe      	b.n	8002092 <HardFault_Handler+0x4>

08002094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <MemManage_Handler+0x4>

0800209a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800209e:	e7fe      	b.n	800209e <BusFault_Handler+0x4>

080020a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <UsageFault_Handler+0x4>

080020a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b8:	f000 f99c 	bl	80023f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80020bc:	f007 f9f6 	bl	80094ac <xTaskGetSchedulerState>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d001      	beq.n	80020ca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80020c6:	f008 f8df 	bl	800a288 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}

080020ce <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80020d2:	2020      	movs	r0, #32
 80020d4:	f000 fdfa 	bl	8002ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80020d8:	2040      	movs	r0, #64	; 0x40
 80020da:	f000 fdf7 	bl	8002ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80020de:	2080      	movs	r0, #128	; 0x80
 80020e0:	f000 fdf4 	bl	8002ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80020e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020e8:	f000 fdf0 	bl	8002ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <I2C2_EV_IRQHandler+0x10>)
 80020f6:	f001 f835 	bl	8003164 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000ad8 	.word	0x20000ad8

08002104 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <USART1_IRQHandler+0x10>)
 800210a:	f004 f963 	bl	80063d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000b2c 	.word	0x20000b2c

08002118 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800211c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002120:	f000 fdd4 	bl	8002ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002124:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002128:	f000 fdd0 	bl	8002ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800212c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002130:	f000 fdcc 	bl	8002ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002134:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002138:	f000 fdc8 	bl	8002ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800213c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002140:	f000 fdc4 	bl	8002ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}

08002148 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
	return 1;
 800214c:	2301      	movs	r3, #1
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_kill>:

int _kill(int pid, int sig)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002162:	f00c f94b 	bl	800e3fc <__errno>
 8002166:	4603      	mov	r3, r0
 8002168:	2216      	movs	r2, #22
 800216a:	601a      	str	r2, [r3, #0]
	return -1;
 800216c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <_exit>:

void _exit (int status)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002180:	f04f 31ff 	mov.w	r1, #4294967295
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ffe7 	bl	8002158 <_kill>
	while (1) {}		/* Make sure we hang here */
 800218a:	e7fe      	b.n	800218a <_exit+0x12>

0800218c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e00a      	b.n	80021b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800219e:	f7ff fe4d 	bl	8001e3c <__io_getchar>
 80021a2:	4601      	mov	r1, r0
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	60ba      	str	r2, [r7, #8]
 80021aa:	b2ca      	uxtb	r2, r1
 80021ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3301      	adds	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	dbf0      	blt.n	800219e <_read+0x12>
	}

return len;
 80021bc:	687b      	ldr	r3, [r7, #4]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	e009      	b.n	80021ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	60ba      	str	r2, [r7, #8]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fe11 	bl	8001e08 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	3301      	adds	r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	dbf1      	blt.n	80021d8 <_write+0x12>
	}
	return len;
 80021f4:	687b      	ldr	r3, [r7, #4]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <_close>:

int _close(int file)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
	return -1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002226:	605a      	str	r2, [r3, #4]
	return 0;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <_isatty>:

int _isatty(int file)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
	return 1;
 800223e:	2301      	movs	r3, #1
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
	return 0;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002270:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <_sbrk+0x5c>)
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <_sbrk+0x60>)
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <_sbrk+0x64>)
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <_sbrk+0x68>)
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <_sbrk+0x64>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	429a      	cmp	r2, r3
 8002296:	d207      	bcs.n	80022a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002298:	f00c f8b0 	bl	800e3fc <__errno>
 800229c:	4603      	mov	r3, r0
 800229e:	220c      	movs	r2, #12
 80022a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
 80022a6:	e009      	b.n	80022bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <_sbrk+0x64>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	4a05      	ldr	r2, [pc, #20]	; (80022cc <_sbrk+0x64>)
 80022b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20018000 	.word	0x20018000
 80022c8:	00000800 	.word	0x00000800
 80022cc:	20001240 	.word	0x20001240
 80022d0:	20004830 	.word	0x20004830

080022d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <SystemInit+0x20>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <SystemInit+0x20>)
 80022e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002330 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022fc:	f7ff ffea 	bl	80022d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002300:	480c      	ldr	r0, [pc, #48]	; (8002334 <LoopForever+0x6>)
  ldr r1, =_edata
 8002302:	490d      	ldr	r1, [pc, #52]	; (8002338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <LoopForever+0xe>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002308:	e002      	b.n	8002310 <LoopCopyDataInit>

0800230a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800230c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800230e:	3304      	adds	r3, #4

08002310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002314:	d3f9      	bcc.n	800230a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002318:	4c0a      	ldr	r4, [pc, #40]	; (8002344 <LoopForever+0x16>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800231c:	e001      	b.n	8002322 <LoopFillZerobss>

0800231e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800231e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002320:	3204      	adds	r2, #4

08002322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002324:	d3fb      	bcc.n	800231e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002326:	f00c f965 	bl	800e5f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800232a:	f7fe fdbf 	bl	8000eac <main>

0800232e <LoopForever>:

LoopForever:
    b LoopForever
 800232e:	e7fe      	b.n	800232e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002330:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002338:	20000a98 	.word	0x20000a98
  ldr r2, =_sidata
 800233c:	080138c4 	.word	0x080138c4
  ldr r2, =_sbss
 8002340:	20000a98 	.word	0x20000a98
  ldr r4, =_ebss
 8002344:	20004830 	.word	0x20004830

08002348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002348:	e7fe      	b.n	8002348 <ADC1_2_IRQHandler>

0800234a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002354:	2003      	movs	r0, #3
 8002356:	f000 f93d 	bl	80025d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800235a:	200f      	movs	r0, #15
 800235c:	f000 f80e 	bl	800237c <HAL_InitTick>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	71fb      	strb	r3, [r7, #7]
 800236a:	e001      	b.n	8002370 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800236c:	f7ff fd78 	bl	8001e60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002370:	79fb      	ldrb	r3, [r7, #7]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002388:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <HAL_InitTick+0x6c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d023      	beq.n	80023d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002390:	4b16      	ldr	r3, [pc, #88]	; (80023ec <HAL_InitTick+0x70>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <HAL_InitTick+0x6c>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4619      	mov	r1, r3
 800239a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239e:	fbb3 f3f1 	udiv	r3, r3, r1
 80023a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f949 	bl	800263e <HAL_SYSTICK_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10f      	bne.n	80023d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b0f      	cmp	r3, #15
 80023b6:	d809      	bhi.n	80023cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b8:	2200      	movs	r2, #0
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f000 f913 	bl	80025ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023c4:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <HAL_InitTick+0x74>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e007      	b.n	80023dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	e004      	b.n	80023dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	e001      	b.n	80023dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000018 	.word	0x20000018
 80023ec:	20000010 	.word	0x20000010
 80023f0:	20000014 	.word	0x20000014

080023f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_IncTick+0x20>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_IncTick+0x24>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_IncTick+0x24>)
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000018 	.word	0x20000018
 8002418:	20001244 	.word	0x20001244

0800241c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return uwTick;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_GetTick+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20001244 	.word	0x20001244

08002434 <__NVIC_SetPriorityGrouping>:
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002450:	4013      	ands	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800245c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002466:	4a04      	ldr	r2, [pc, #16]	; (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	60d3      	str	r3, [r2, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_GetPriorityGrouping>:
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <__NVIC_GetPriorityGrouping+0x18>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	f003 0307 	and.w	r3, r3, #7
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_EnableIRQ>:
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	db0b      	blt.n	80024c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4907      	ldr	r1, [pc, #28]	; (80024d0 <__NVIC_EnableIRQ+0x38>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	2001      	movs	r0, #1
 80024ba:	fa00 f202 	lsl.w	r2, r0, r2
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e100 	.word	0xe000e100

080024d4 <__NVIC_SetPriority>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	db0a      	blt.n	80024fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	490c      	ldr	r1, [pc, #48]	; (8002520 <__NVIC_SetPriority+0x4c>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024fc:	e00a      	b.n	8002514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4908      	ldr	r1, [pc, #32]	; (8002524 <__NVIC_SetPriority+0x50>)
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	3b04      	subs	r3, #4
 800250c:	0112      	lsls	r2, r2, #4
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	440b      	add	r3, r1
 8002512:	761a      	strb	r2, [r3, #24]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000e100 	.word	0xe000e100
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <NVIC_EncodePriority>:
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f1c3 0307 	rsb	r3, r3, #7
 8002542:	2b04      	cmp	r3, #4
 8002544:	bf28      	it	cs
 8002546:	2304      	movcs	r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3304      	adds	r3, #4
 800254e:	2b06      	cmp	r3, #6
 8002550:	d902      	bls.n	8002558 <NVIC_EncodePriority+0x30>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3b03      	subs	r3, #3
 8002556:	e000      	b.n	800255a <NVIC_EncodePriority+0x32>
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	f04f 32ff 	mov.w	r2, #4294967295
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	401a      	ands	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002570:	f04f 31ff 	mov.w	r1, #4294967295
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	43d9      	mvns	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	4313      	orrs	r3, r2
}
 8002582:	4618      	mov	r0, r3
 8002584:	3724      	adds	r7, #36	; 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a0:	d301      	bcc.n	80025a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00f      	b.n	80025c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <SysTick_Config+0x40>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ae:	210f      	movs	r1, #15
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	f7ff ff8e 	bl	80024d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <SysTick_Config+0x40>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025be:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <SysTick_Config+0x40>)
 80025c0:	2207      	movs	r2, #7
 80025c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	e000e010 	.word	0xe000e010

080025d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff29 	bl	8002434 <__NVIC_SetPriorityGrouping>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025fc:	f7ff ff3e 	bl	800247c <__NVIC_GetPriorityGrouping>
 8002600:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	6978      	ldr	r0, [r7, #20]
 8002608:	f7ff ff8e 	bl	8002528 <NVIC_EncodePriority>
 800260c:	4602      	mov	r2, r0
 800260e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff5d 	bl	80024d4 <__NVIC_SetPriority>
}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff31 	bl	8002498 <__NVIC_EnableIRQ>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ffa2 	bl	8002590 <SysTick_Config>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e054      	b.n	8002714 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7f5b      	ldrb	r3, [r3, #29]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d105      	bne.n	8002680 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff fc18 	bl	8001eb0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	791b      	ldrb	r3, [r3, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10c      	bne.n	80026a8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a22      	ldr	r2, [pc, #136]	; (800271c <HAL_CRC_Init+0xc4>)
 8002694:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0218 	bic.w	r2, r2, #24
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	e00c      	b.n	80026c2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6899      	ldr	r1, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	461a      	mov	r2, r3
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f834 	bl	8002720 <HAL_CRCEx_Polynomial_Set>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e028      	b.n	8002714 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	795b      	ldrb	r3, [r3, #5]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f04f 32ff 	mov.w	r2, #4294967295
 80026d2:	611a      	str	r2, [r3, #16]
 80026d4:	e004      	b.n	80026e0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6912      	ldr	r2, [r2, #16]
 80026de:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	04c11db7 	.word	0x04c11db7

08002720 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002730:	231f      	movs	r3, #31
 8002732:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002734:	bf00      	nop
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1e5a      	subs	r2, r3, #1
 800273a:	613a      	str	r2, [r7, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d009      	beq.n	8002754 <HAL_CRCEx_Polynomial_Set+0x34>
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b18      	cmp	r3, #24
 8002758:	d846      	bhi.n	80027e8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800275a:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <HAL_CRCEx_Polynomial_Set+0x40>)
 800275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002760:	080027ef 	.word	0x080027ef
 8002764:	080027e9 	.word	0x080027e9
 8002768:	080027e9 	.word	0x080027e9
 800276c:	080027e9 	.word	0x080027e9
 8002770:	080027e9 	.word	0x080027e9
 8002774:	080027e9 	.word	0x080027e9
 8002778:	080027e9 	.word	0x080027e9
 800277c:	080027e9 	.word	0x080027e9
 8002780:	080027dd 	.word	0x080027dd
 8002784:	080027e9 	.word	0x080027e9
 8002788:	080027e9 	.word	0x080027e9
 800278c:	080027e9 	.word	0x080027e9
 8002790:	080027e9 	.word	0x080027e9
 8002794:	080027e9 	.word	0x080027e9
 8002798:	080027e9 	.word	0x080027e9
 800279c:	080027e9 	.word	0x080027e9
 80027a0:	080027d1 	.word	0x080027d1
 80027a4:	080027e9 	.word	0x080027e9
 80027a8:	080027e9 	.word	0x080027e9
 80027ac:	080027e9 	.word	0x080027e9
 80027b0:	080027e9 	.word	0x080027e9
 80027b4:	080027e9 	.word	0x080027e9
 80027b8:	080027e9 	.word	0x080027e9
 80027bc:	080027e9 	.word	0x080027e9
 80027c0:	080027c5 	.word	0x080027c5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	2b06      	cmp	r3, #6
 80027c8:	d913      	bls.n	80027f2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80027ce:	e010      	b.n	80027f2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2b07      	cmp	r3, #7
 80027d4:	d90f      	bls.n	80027f6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80027da:	e00c      	b.n	80027f6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	2b0f      	cmp	r3, #15
 80027e0:	d90b      	bls.n	80027fa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80027e6:	e008      	b.n	80027fa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	75fb      	strb	r3, [r7, #23]
      break;
 80027ec:	e006      	b.n	80027fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80027ee:	bf00      	nop
 80027f0:	e004      	b.n	80027fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80027f2:	bf00      	nop
 80027f4:	e002      	b.n	80027fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80027f6:	bf00      	nop
 80027f8:	e000      	b.n	80027fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80027fa:	bf00      	nop
  }
  if (status == HAL_OK)
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10d      	bne.n	800281e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 0118 	bic.w	r1, r3, #24
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	430a      	orrs	r2, r1
 800281c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800281e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002820:	4618      	mov	r0, r3
 8002822:	371c      	adds	r7, #28
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d008      	beq.n	8002856 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2204      	movs	r2, #4
 8002848:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e022      	b.n	800289c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 020e 	bic.w	r2, r2, #14
 8002864:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0201 	bic.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f003 021c 	and.w	r2, r3, #28
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800289a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d005      	beq.n	80028cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2204      	movs	r2, #4
 80028c4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	e029      	b.n	8002920 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 020e 	bic.w	r2, r2, #14
 80028da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	f003 021c 	and.w	r2, r3, #28
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	2101      	movs	r1, #1
 80028fa:	fa01 f202 	lsl.w	r2, r1, r2
 80028fe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
    }
  }
  return status;
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002938:	b2db      	uxtb	r3, r3
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002956:	e17f      	b.n	8002c58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2101      	movs	r1, #1
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	4013      	ands	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 8171 	beq.w	8002c52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d005      	beq.n	8002988 <HAL_GPIO_Init+0x40>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d130      	bne.n	80029ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029be:	2201      	movs	r2, #1
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	f003 0201 	and.w	r2, r3, #1
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d118      	bne.n	8002a28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029fc:	2201      	movs	r2, #1
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	08db      	lsrs	r3, r3, #3
 8002a12:	f003 0201 	and.w	r2, r3, #1
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d017      	beq.n	8002a64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	2203      	movs	r2, #3
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d123      	bne.n	8002ab8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	08da      	lsrs	r2, r3, #3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3208      	adds	r2, #8
 8002a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	220f      	movs	r2, #15
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	08da      	lsrs	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3208      	adds	r2, #8
 8002ab2:	6939      	ldr	r1, [r7, #16]
 8002ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0203 	and.w	r2, r3, #3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80ac 	beq.w	8002c52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afa:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <HAL_GPIO_Init+0x330>)
 8002afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afe:	4a5e      	ldr	r2, [pc, #376]	; (8002c78 <HAL_GPIO_Init+0x330>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6613      	str	r3, [r2, #96]	; 0x60
 8002b06:	4b5c      	ldr	r3, [pc, #368]	; (8002c78 <HAL_GPIO_Init+0x330>)
 8002b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b12:	4a5a      	ldr	r2, [pc, #360]	; (8002c7c <HAL_GPIO_Init+0x334>)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	220f      	movs	r2, #15
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b3c:	d025      	beq.n	8002b8a <HAL_GPIO_Init+0x242>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a4f      	ldr	r2, [pc, #316]	; (8002c80 <HAL_GPIO_Init+0x338>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01f      	beq.n	8002b86 <HAL_GPIO_Init+0x23e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4e      	ldr	r2, [pc, #312]	; (8002c84 <HAL_GPIO_Init+0x33c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d019      	beq.n	8002b82 <HAL_GPIO_Init+0x23a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4d      	ldr	r2, [pc, #308]	; (8002c88 <HAL_GPIO_Init+0x340>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <HAL_GPIO_Init+0x236>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a4c      	ldr	r2, [pc, #304]	; (8002c8c <HAL_GPIO_Init+0x344>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00d      	beq.n	8002b7a <HAL_GPIO_Init+0x232>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a4b      	ldr	r2, [pc, #300]	; (8002c90 <HAL_GPIO_Init+0x348>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d007      	beq.n	8002b76 <HAL_GPIO_Init+0x22e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4a      	ldr	r2, [pc, #296]	; (8002c94 <HAL_GPIO_Init+0x34c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d101      	bne.n	8002b72 <HAL_GPIO_Init+0x22a>
 8002b6e:	2306      	movs	r3, #6
 8002b70:	e00c      	b.n	8002b8c <HAL_GPIO_Init+0x244>
 8002b72:	2307      	movs	r3, #7
 8002b74:	e00a      	b.n	8002b8c <HAL_GPIO_Init+0x244>
 8002b76:	2305      	movs	r3, #5
 8002b78:	e008      	b.n	8002b8c <HAL_GPIO_Init+0x244>
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	e006      	b.n	8002b8c <HAL_GPIO_Init+0x244>
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e004      	b.n	8002b8c <HAL_GPIO_Init+0x244>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e002      	b.n	8002b8c <HAL_GPIO_Init+0x244>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <HAL_GPIO_Init+0x244>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	f002 0203 	and.w	r2, r2, #3
 8002b92:	0092      	lsls	r2, r2, #2
 8002b94:	4093      	lsls	r3, r2
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b9c:	4937      	ldr	r1, [pc, #220]	; (8002c7c <HAL_GPIO_Init+0x334>)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	089b      	lsrs	r3, r3, #2
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002baa:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_GPIO_Init+0x350>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bce:	4a32      	ldr	r2, [pc, #200]	; (8002c98 <HAL_GPIO_Init+0x350>)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bd4:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <HAL_GPIO_Init+0x350>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bf8:	4a27      	ldr	r2, [pc, #156]	; (8002c98 <HAL_GPIO_Init+0x350>)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bfe:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <HAL_GPIO_Init+0x350>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c22:	4a1d      	ldr	r2, [pc, #116]	; (8002c98 <HAL_GPIO_Init+0x350>)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c28:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_GPIO_Init+0x350>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4013      	ands	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c4c:	4a12      	ldr	r2, [pc, #72]	; (8002c98 <HAL_GPIO_Init+0x350>)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	3301      	adds	r3, #1
 8002c56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f47f ae78 	bne.w	8002958 <HAL_GPIO_Init+0x10>
  }
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	48000400 	.word	0x48000400
 8002c84:	48000800 	.word	0x48000800
 8002c88:	48000c00 	.word	0x48000c00
 8002c8c:	48001000 	.word	0x48001000
 8002c90:	48001400 	.word	0x48001400
 8002c94:	48001800 	.word	0x48001800
 8002c98:	40010400 	.word	0x40010400

08002c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	807b      	strh	r3, [r7, #2]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cac:	787b      	ldrb	r3, [r7, #1]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cb2:	887a      	ldrh	r2, [r7, #2]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cb8:	e002      	b.n	8002cc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cba:	887a      	ldrh	r2, [r7, #2]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cd6:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ce2:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f806 	bl	8002cfc <HAL_GPIO_EXTI_Callback>
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40010400 	.word	0x40010400

08002cfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e081      	b.n	8002e28 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d106      	bne.n	8002d3e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff f8d9 	bl	8001ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2224      	movs	r2, #36	; 0x24
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d62:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d72:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d107      	bne.n	8002d8c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	e006      	b.n	8002d9a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d98:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d104      	bne.n	8002dac <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002daa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dbe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69d9      	ldr	r1, [r3, #28]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1a      	ldr	r2, [r3, #32]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	817b      	strh	r3, [r7, #10]
 8002e42:	460b      	mov	r3, r1
 8002e44:	813b      	strh	r3, [r7, #8]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	f040 80f9 	bne.w	800304a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_I2C_Mem_Write+0x34>
 8002e5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d105      	bne.n	8002e70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0ed      	b.n	800304c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_I2C_Mem_Write+0x4e>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e0e6      	b.n	800304c <HAL_I2C_Mem_Write+0x21c>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e86:	f7ff fac9 	bl	800241c <HAL_GetTick>
 8002e8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2319      	movs	r3, #25
 8002e92:	2201      	movs	r2, #1
 8002e94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f001 fab2 	bl	8004402 <I2C_WaitOnFlagUntilTimeout>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0d1      	b.n	800304c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2221      	movs	r2, #33	; 0x21
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2240      	movs	r2, #64	; 0x40
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a3a      	ldr	r2, [r7, #32]
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ed0:	88f8      	ldrh	r0, [r7, #6]
 8002ed2:	893a      	ldrh	r2, [r7, #8]
 8002ed4:	8979      	ldrh	r1, [r7, #10]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	4603      	mov	r3, r0
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fdb7 	bl	8003a54 <I2C_RequestMemoryWrite>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0a9      	b.n	800304c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2bff      	cmp	r3, #255	; 0xff
 8002f00:	d90e      	bls.n	8002f20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	22ff      	movs	r2, #255	; 0xff
 8002f06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	8979      	ldrh	r1, [r7, #10]
 8002f10:	2300      	movs	r3, #0
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f001 fc1b 	bl	8004754 <I2C_TransferConfig>
 8002f1e:	e00f      	b.n	8002f40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	8979      	ldrh	r1, [r7, #10]
 8002f32:	2300      	movs	r3, #0
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f001 fc0a 	bl	8004754 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f001 fa9c 	bl	8004482 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e07b      	b.n	800304c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	781a      	ldrb	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d034      	beq.n	8002ff8 <HAL_I2C_Mem_Write+0x1c8>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d130      	bne.n	8002ff8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2180      	movs	r1, #128	; 0x80
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f001 fa2e 	bl	8004402 <I2C_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e04d      	b.n	800304c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2bff      	cmp	r3, #255	; 0xff
 8002fb8:	d90e      	bls.n	8002fd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	22ff      	movs	r2, #255	; 0xff
 8002fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	8979      	ldrh	r1, [r7, #10]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f001 fbbf 	bl	8004754 <I2C_TransferConfig>
 8002fd6:	e00f      	b.n	8002ff8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	8979      	ldrh	r1, [r7, #10]
 8002fea:	2300      	movs	r3, #0
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f001 fbae 	bl	8004754 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d19e      	bne.n	8002f40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f001 fa7b 	bl	8004502 <I2C_WaitOnSTOPFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e01a      	b.n	800304c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2220      	movs	r2, #32
 800301c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <HAL_I2C_Mem_Write+0x224>)
 800302a:	400b      	ands	r3, r1
 800302c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	e000      	b.n	800304c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800304a:	2302      	movs	r3, #2
  }
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	fe00e800 	.word	0xfe00e800

08003058 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	4608      	mov	r0, r1
 8003062:	4611      	mov	r1, r2
 8003064:	461a      	mov	r2, r3
 8003066:	4603      	mov	r3, r0
 8003068:	817b      	strh	r3, [r7, #10]
 800306a:	460b      	mov	r3, r1
 800306c:	813b      	strh	r3, [r7, #8]
 800306e:	4613      	mov	r3, r2
 8003070:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b20      	cmp	r3, #32
 800307c:	d166      	bne.n	800314c <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <HAL_I2C_Mem_Read_IT+0x32>
 8003084:	8bbb      	ldrh	r3, [r7, #28]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d105      	bne.n	8003096 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003090:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e05b      	b.n	800314e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a4:	d101      	bne.n	80030aa <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
 80030a8:	e051      	b.n	800314e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_I2C_Mem_Read_IT+0x60>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e04a      	b.n	800314e <HAL_I2C_Mem_Read_IT+0xf6>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2222      	movs	r2, #34	; 0x22
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2240      	movs	r2, #64	; 0x40
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8bba      	ldrh	r2, [r7, #28]
 80030e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4a1c      	ldr	r2, [pc, #112]	; (8003158 <HAL_I2C_Mem_Read_IT+0x100>)
 80030e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a1c      	ldr	r2, [pc, #112]	; (800315c <HAL_I2C_Mem_Read_IT+0x104>)
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80030ee:	897a      	ldrh	r2, [r7, #10]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d109      	bne.n	800310e <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030fa:	893b      	ldrh	r3, [r7, #8]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f04f 32ff 	mov.w	r2, #4294967295
 800310a:	651a      	str	r2, [r3, #80]	; 0x50
 800310c:	e00b      	b.n	8003126 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800310e:	893b      	ldrh	r3, [r7, #8]
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	b29b      	uxth	r3, r3
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800311c:	893b      	ldrh	r3, [r7, #8]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	8979      	ldrh	r1, [r7, #10]
 800312c:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <HAL_I2C_Mem_Read_IT+0x108>)
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	2300      	movs	r3, #0
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f001 fb0e 	bl	8004754 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, (I2C_XFER_TX_IT | I2C_XFER_RX_IT));
 8003140:	2103      	movs	r1, #3
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f001 fb38 	bl	80047b8 <I2C_Enable_IRQ>

    return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e000      	b.n	800314e <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800314c:	2302      	movs	r3, #2
  }
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	ffff0000 	.word	0xffff0000
 800315c:	08003255 	.word	0x08003255
 8003160:	80002000 	.word	0x80002000

08003164 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	68f9      	ldr	r1, [r7, #12]
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
  }
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	70fb      	strb	r3, [r7, #3]
 80031f4:	4613      	mov	r3, r2
 80031f6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af02      	add	r7, sp, #8
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003260:	4b8f      	ldr	r3, [pc, #572]	; (80034a0 <I2C_Mem_ISR_IT+0x24c>)
 8003262:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <I2C_Mem_ISR_IT+0x22>
 8003272:	2302      	movs	r3, #2
 8003274:	e110      	b.n	8003498 <I2C_Mem_ISR_IT+0x244>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d013      	beq.n	80032b2 <I2C_Mem_ISR_IT+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00d      	beq.n	80032b2 <I2C_Mem_ISR_IT+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2210      	movs	r2, #16
 800329c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	f043 0204 	orr.w	r2, r3, #4
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f001 f867 	bl	800437e <I2C_Flush_TXDR>
 80032b0:	e0dd      	b.n	800346e <I2C_Mem_ISR_IT+0x21a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d023      	beq.n	8003306 <I2C_Mem_ISR_IT+0xb2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	089b      	lsrs	r3, r3, #2
 80032c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01d      	beq.n	8003306 <I2C_Mem_ISR_IT+0xb2>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f023 0304 	bic.w	r3, r3, #4
 80032d0:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003304:	e0b3      	b.n	800346e <I2C_Mem_ISR_IT+0x21a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d02d      	beq.n	800336e <I2C_Mem_ISR_IT+0x11a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800331a:	2b00      	cmp	r3, #0
 800331c:	d027      	beq.n	800336e <I2C_Mem_ISR_IT+0x11a>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003326:	d118      	bne.n	800335a <I2C_Mem_ISR_IT+0x106>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003358:	e089      	b.n	800346e <I2C_Mem_ISR_IT+0x21a>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003362:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f04f 32ff 	mov.w	r2, #4294967295
 800336a:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800336c:	e07f      	b.n	800346e <I2C_Mem_ISR_IT+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	09db      	lsrs	r3, r3, #7
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d03d      	beq.n	80033f6 <I2C_Mem_ISR_IT+0x1a2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	099b      	lsrs	r3, r3, #6
 800337e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003382:	2b00      	cmp	r3, #0
 8003384:	d037      	beq.n	80033f6 <I2C_Mem_ISR_IT+0x1a2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d02c      	beq.n	80033ea <I2C_Mem_ISR_IT+0x196>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	d128      	bne.n	80033ea <I2C_Mem_ISR_IT+0x196>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	2bff      	cmp	r3, #255	; 0xff
 80033a0:	d910      	bls.n	80033c4 <I2C_Mem_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	22ff      	movs	r2, #255	; 0xff
 80033a6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ac:	b299      	uxth	r1, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	2300      	movs	r3, #0
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f001 f9c9 	bl	8004754 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033c2:	e017      	b.n	80033f4 <I2C_Mem_ISR_IT+0x1a0>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d2:	b299      	uxth	r1, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	2300      	movs	r3, #0
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f001 f9b6 	bl	8004754 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033e8:	e004      	b.n	80033f4 <I2C_Mem_ISR_IT+0x1a0>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80033ea:	2140      	movs	r1, #64	; 0x40
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fecf 	bl	8004190 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033f2:	e03c      	b.n	800346e <I2C_Mem_ISR_IT+0x21a>
 80033f4:	e03b      	b.n	800346e <I2C_Mem_ISR_IT+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	099b      	lsrs	r3, r3, #6
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d035      	beq.n	800346e <I2C_Mem_ISR_IT+0x21a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	099b      	lsrs	r3, r3, #6
 8003406:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800340a:	2b00      	cmp	r3, #0
 800340c:	d02f      	beq.n	800346e <I2C_Mem_ISR_IT+0x21a>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b22      	cmp	r3, #34	; 0x22
 8003418:	d101      	bne.n	800341e <I2C_Mem_ISR_IT+0x1ca>
    {
      direction = I2C_GENERATE_START_READ;
 800341a:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <I2C_Mem_ISR_IT+0x250>)
 800341c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	2bff      	cmp	r3, #255	; 0xff
 8003426:	d910      	bls.n	800344a <I2C_Mem_ISR_IT+0x1f6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	22ff      	movs	r2, #255	; 0xff
 800342c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003432:	b299      	uxth	r1, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003438:	b2da      	uxtb	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f001 f986 	bl	8004754 <I2C_TransferConfig>
 8003448:	e011      	b.n	800346e <I2C_Mem_ISR_IT+0x21a>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003458:	b299      	uxth	r1, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345e:	b2da      	uxtb	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f001 f973 	bl	8004754 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d009      	beq.n	800348e <I2C_Mem_ISR_IT+0x23a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <I2C_Mem_ISR_IT+0x23a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003486:	6939      	ldr	r1, [r7, #16]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fc57 	bl	8003d3c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	80002000 	.word	0x80002000
 80034a4:	80002400 	.word	0x80002400

080034a8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <I2C_Slave_ISR_IT+0x24>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e0ec      	b.n	80036a6 <I2C_Slave_ISR_IT+0x1fe>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d009      	beq.n	80034f4 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80034ec:	6939      	ldr	r1, [r7, #16]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fcee 	bl	8003ed0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d04d      	beq.n	800359c <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003508:	2b00      	cmp	r3, #0
 800350a:	d047      	beq.n	800359c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d128      	bne.n	8003568 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b28      	cmp	r3, #40	; 0x28
 8003520:	d108      	bne.n	8003534 <I2C_Slave_ISR_IT+0x8c>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003528:	d104      	bne.n	8003534 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800352a:	6939      	ldr	r1, [r7, #16]
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fdd9 	bl	80040e4 <I2C_ITListenCplt>
 8003532:	e032      	b.n	800359a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b29      	cmp	r3, #41	; 0x29
 800353e:	d10e      	bne.n	800355e <I2C_Slave_ISR_IT+0xb6>
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003546:	d00a      	beq.n	800355e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2210      	movs	r2, #16
 800354e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 ff14 	bl	800437e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fb91 	bl	8003c7e <I2C_ITSlaveSeqCplt>
 800355c:	e01d      	b.n	800359a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2210      	movs	r2, #16
 8003564:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003566:	e096      	b.n	8003696 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2210      	movs	r2, #16
 800356e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	f043 0204 	orr.w	r2, r3, #4
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d004      	beq.n	800358c <I2C_Slave_ISR_IT+0xe4>
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003588:	f040 8085 	bne.w	8003696 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	4619      	mov	r1, r3
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fdfc 	bl	8004190 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003598:	e07d      	b.n	8003696 <I2C_Slave_ISR_IT+0x1ee>
 800359a:	e07c      	b.n	8003696 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	089b      	lsrs	r3, r3, #2
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d030      	beq.n	800360a <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	089b      	lsrs	r3, r3, #2
 80035ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d02a      	beq.n	800360a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d018      	beq.n	80035f0 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d14f      	bne.n	800369a <I2C_Slave_ISR_IT+0x1f2>
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003600:	d04b      	beq.n	800369a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 fb3b 	bl	8003c7e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003608:	e047      	b.n	800369a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	08db      	lsrs	r3, r3, #3
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	08db      	lsrs	r3, r3, #3
 800361a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003622:	6939      	ldr	r1, [r7, #16]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 fa69 	bl	8003afc <I2C_ITAddrCplt>
 800362a:	e037      	b.n	800369c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	085b      	lsrs	r3, r3, #1
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d031      	beq.n	800369c <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	085b      	lsrs	r3, r3, #1
 800363c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003640:	2b00      	cmp	r3, #0
 8003642:	d02b      	beq.n	800369c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d018      	beq.n	8003680 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	781a      	ldrb	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	851a      	strh	r2, [r3, #40]	; 0x28
 800367e:	e00d      	b.n	800369c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003686:	d002      	beq.n	800368e <I2C_Slave_ISR_IT+0x1e6>
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 faf5 	bl	8003c7e <I2C_ITSlaveSeqCplt>
 8003694:	e002      	b.n	800369c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003696:	bf00      	nop
 8003698:	e000      	b.n	800369c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800369a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b088      	sub	sp, #32
 80036b2:	af02      	add	r7, sp, #8
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <I2C_Master_ISR_DMA+0x1a>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e0e1      	b.n	800388c <I2C_Master_ISR_DMA+0x1de>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d017      	beq.n	800370c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d011      	beq.n	800370c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2210      	movs	r2, #16
 80036ee:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	f043 0204 	orr.w	r2, r3, #4
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80036fc:	2120      	movs	r1, #32
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f001 f85a 	bl	80047b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fe3a 	bl	800437e <I2C_Flush_TXDR>
 800370a:	e0ba      	b.n	8003882 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	09db      	lsrs	r3, r3, #7
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d072      	beq.n	80037fe <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	099b      	lsrs	r3, r3, #6
 800371c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003720:	2b00      	cmp	r3, #0
 8003722:	d06c      	beq.n	80037fe <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003732:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d04e      	beq.n	80037dc <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	b29b      	uxth	r3, r3
 8003746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800374a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	2bff      	cmp	r3, #255	; 0xff
 8003754:	d906      	bls.n	8003764 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	22ff      	movs	r2, #255	; 0xff
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800375c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	e010      	b.n	8003786 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003776:	d003      	beq.n	8003780 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e002      	b.n	8003786 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003784:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378a:	b2da      	uxtb	r2, r3
 800378c:	8a79      	ldrh	r1, [r7, #18]
 800378e:	2300      	movs	r3, #0
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 ffdd 	bl	8004754 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b22      	cmp	r3, #34	; 0x22
 80037b6:	d108      	bne.n	80037ca <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80037c8:	e05b      	b.n	8003882 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80037da:	e052      	b.n	8003882 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037ea:	d003      	beq.n	80037f4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fa09 	bl	8003c04 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80037f2:	e046      	b.n	8003882 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80037f4:	2140      	movs	r1, #64	; 0x40
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fcca 	bl	8004190 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80037fc:	e041      	b.n	8003882 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d029      	beq.n	800385e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	099b      	lsrs	r3, r3, #6
 800380e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003812:	2b00      	cmp	r3, #0
 8003814:	d023      	beq.n	800385e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d119      	bne.n	8003854 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800382e:	d027      	beq.n	8003880 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003838:	d108      	bne.n	800384c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003848:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800384a:	e019      	b.n	8003880 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f9d9 	bl	8003c04 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003852:	e015      	b.n	8003880 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003854:	2140      	movs	r1, #64	; 0x40
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 fc9a 	bl	8004190 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800385c:	e010      	b.n	8003880 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	095b      	lsrs	r3, r3, #5
 800386e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fa5f 	bl	8003d3c <I2C_ITMasterCplt>
 800387e:	e000      	b.n	8003882 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003880:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <I2C_Slave_ISR_DMA+0x24>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e0c9      	b.n	8003a4c <I2C_Slave_ISR_DMA+0x1b8>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d009      	beq.n	80038e0 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 faf8 	bl	8003ed0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 809a 	beq.w	8003a22 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8093 	beq.w	8003a22 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	0b9b      	lsrs	r3, r3, #14
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	0bdb      	lsrs	r3, r3, #15
 800390c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003910:	2b00      	cmp	r3, #0
 8003912:	d07f      	beq.n	8003a14 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00d      	beq.n	8003938 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	0bdb      	lsrs	r3, r3, #15
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d007      	beq.n	8003938 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003934:	2301      	movs	r3, #1
 8003936:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00d      	beq.n	800395c <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	0b9b      	lsrs	r3, r3, #14
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003958:	2301      	movs	r3, #1
 800395a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d128      	bne.n	80039b4 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b28      	cmp	r3, #40	; 0x28
 800396c:	d108      	bne.n	8003980 <I2C_Slave_ISR_DMA+0xec>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003974:	d104      	bne.n	8003980 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 fbb3 	bl	80040e4 <I2C_ITListenCplt>
 800397e:	e048      	b.n	8003a12 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b29      	cmp	r3, #41	; 0x29
 800398a:	d10e      	bne.n	80039aa <I2C_Slave_ISR_DMA+0x116>
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003992:	d00a      	beq.n	80039aa <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2210      	movs	r2, #16
 800399a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fcee 	bl	800437e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f96b 	bl	8003c7e <I2C_ITSlaveSeqCplt>
 80039a8:	e033      	b.n	8003a12 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2210      	movs	r2, #16
 80039b0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80039b2:	e034      	b.n	8003a1e <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2210      	movs	r2, #16
 80039ba:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c0:	f043 0204 	orr.w	r2, r3, #4
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ce:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <I2C_Slave_ISR_DMA+0x14a>
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039dc:	d11f      	bne.n	8003a1e <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039de:	7dfb      	ldrb	r3, [r7, #23]
 80039e0:	2b21      	cmp	r3, #33	; 0x21
 80039e2:	d002      	beq.n	80039ea <I2C_Slave_ISR_DMA+0x156>
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
 80039e6:	2b29      	cmp	r3, #41	; 0x29
 80039e8:	d103      	bne.n	80039f2 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2221      	movs	r2, #33	; 0x21
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30
 80039f0:	e008      	b.n	8003a04 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039f2:	7dfb      	ldrb	r3, [r7, #23]
 80039f4:	2b22      	cmp	r3, #34	; 0x22
 80039f6:	d002      	beq.n	80039fe <I2C_Slave_ISR_DMA+0x16a>
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	2b2a      	cmp	r3, #42	; 0x2a
 80039fc:	d102      	bne.n	8003a04 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2222      	movs	r2, #34	; 0x22
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	4619      	mov	r1, r3
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fbc0 	bl	8004190 <I2C_ITError>
      if (treatdmanack == 1U)
 8003a10:	e005      	b.n	8003a1e <I2C_Slave_ISR_DMA+0x18a>
 8003a12:	e004      	b.n	8003a1e <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2210      	movs	r2, #16
 8003a1a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003a1c:	e011      	b.n	8003a42 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003a1e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003a20:	e00f      	b.n	8003a42 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	08db      	lsrs	r3, r3, #3
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	08db      	lsrs	r3, r3, #3
 8003a32:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f85d 	bl	8003afc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3720      	adds	r7, #32
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	4608      	mov	r0, r1
 8003a5e:	4611      	mov	r1, r2
 8003a60:	461a      	mov	r2, r3
 8003a62:	4603      	mov	r3, r0
 8003a64:	817b      	strh	r3, [r7, #10]
 8003a66:	460b      	mov	r3, r1
 8003a68:	813b      	strh	r3, [r7, #8]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	8979      	ldrh	r1, [r7, #10]
 8003a74:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <I2C_RequestMemoryWrite+0xa4>)
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fe69 	bl	8004754 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	69b9      	ldr	r1, [r7, #24]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fcfb 	bl	8004482 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e02c      	b.n	8003af0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d105      	bne.n	8003aa8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a9c:	893b      	ldrh	r3, [r7, #8]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	629a      	str	r2, [r3, #40]	; 0x28
 8003aa6:	e015      	b.n	8003ad4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003aa8:	893b      	ldrh	r3, [r7, #8]
 8003aaa:	0a1b      	lsrs	r3, r3, #8
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	69b9      	ldr	r1, [r7, #24]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fce1 	bl	8004482 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e012      	b.n	8003af0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aca:	893b      	ldrh	r3, [r7, #8]
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	2200      	movs	r2, #0
 8003adc:	2180      	movs	r1, #128	; 0x80
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 fc8f 	bl	8004402 <I2C_WaitOnFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	80002000 	.word	0x80002000

08003afc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b12:	2b28      	cmp	r3, #40	; 0x28
 8003b14:	d16a      	bne.n	8003bec <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	0c1b      	lsrs	r3, r3, #16
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b34:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b42:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b50:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d138      	bne.n	8003bcc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003b5a:	897b      	ldrh	r3, [r7, #10]
 8003b5c:	09db      	lsrs	r3, r3, #7
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	89bb      	ldrh	r3, [r7, #12]
 8003b62:	4053      	eors	r3, r2
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	f003 0306 	and.w	r3, r3, #6
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d11c      	bne.n	8003ba8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003b6e:	897b      	ldrh	r3, [r7, #10]
 8003b70:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d13b      	bne.n	8003bfc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2208      	movs	r2, #8
 8003b90:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b9a:	89ba      	ldrh	r2, [r7, #12]
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fb21 	bl	80031e8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ba6:	e029      	b.n	8003bfc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003ba8:	893b      	ldrh	r3, [r7, #8]
 8003baa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fe6b 	bl	800488c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bbe:	89ba      	ldrh	r2, [r7, #12]
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff fb0f 	bl	80031e8 <HAL_I2C_AddrCallback>
}
 8003bca:	e017      	b.n	8003bfc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003bcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fe5b 	bl	800488c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bde:	89ba      	ldrh	r2, [r7, #12]
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	4619      	mov	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff faff 	bl	80031e8 <HAL_I2C_AddrCallback>
}
 8003bea:	e007      	b.n	8003bfc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2208      	movs	r2, #8
 8003bf2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003bfc:	bf00      	nop
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b21      	cmp	r3, #33	; 0x21
 8003c1e:	d115      	bne.n	8003c4c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2211      	movs	r2, #17
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c34:	2101      	movs	r1, #1
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fe28 	bl	800488c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff faa7 	bl	8003198 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c4a:	e014      	b.n	8003c76 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2212      	movs	r2, #18
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c60:	2102      	movs	r1, #2
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fe12 	bl	800488c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff fa9b 	bl	80031ac <HAL_I2C_MasterRxCpltCallback>
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	0b9b      	lsrs	r3, r3, #14
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d008      	beq.n	8003cb4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e00d      	b.n	8003cd0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	0bdb      	lsrs	r3, r3, #15
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cce:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b29      	cmp	r3, #41	; 0x29
 8003cda:	d112      	bne.n	8003d02 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2228      	movs	r2, #40	; 0x28
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2221      	movs	r2, #33	; 0x21
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003cea:	2101      	movs	r1, #1
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fdcd 	bl	800488c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff fa60 	bl	80031c0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d00:	e017      	b.n	8003d32 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d0c:	d111      	bne.n	8003d32 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2228      	movs	r2, #40	; 0x28
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2222      	movs	r2, #34	; 0x22
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fdb4 	bl	800488c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff fa51 	bl	80031d4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b21      	cmp	r3, #33	; 0x21
 8003d5c:	d107      	bne.n	8003d6e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d5e:	2101      	movs	r1, #1
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fd93 	bl	800488c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2211      	movs	r2, #17
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d6c:	e00c      	b.n	8003d88 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b22      	cmp	r3, #34	; 0x22
 8003d78:	d106      	bne.n	8003d88 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fd85 	bl	800488c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2212      	movs	r2, #18
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6859      	ldr	r1, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b4d      	ldr	r3, [pc, #308]	; (8003ec8 <I2C_ITMasterCplt+0x18c>)
 8003d94:	400b      	ands	r3, r1
 8003d96:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a4a      	ldr	r2, [pc, #296]	; (8003ecc <I2C_ITMasterCplt+0x190>)
 8003da2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d009      	beq.n	8003dc4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2210      	movs	r2, #16
 8003db6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbc:	f043 0204 	orr.w	r2, r3, #4
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b60      	cmp	r3, #96	; 0x60
 8003dce:	d10b      	bne.n	8003de8 <I2C_ITMasterCplt+0xac>
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	089b      	lsrs	r3, r3, #2
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003de6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fac8 	bl	800437e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b60      	cmp	r3, #96	; 0x60
 8003dfe:	d002      	beq.n	8003e06 <I2C_ITMasterCplt+0xca>
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d006      	beq.n	8003e14 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f9bf 	bl	8004190 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e12:	e054      	b.n	8003ebe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b21      	cmp	r3, #33	; 0x21
 8003e1e:	d124      	bne.n	8003e6a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b40      	cmp	r3, #64	; 0x40
 8003e38:	d10b      	bne.n	8003e52 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff f9e4 	bl	8003218 <HAL_I2C_MemTxCpltCallback>
}
 8003e50:	e035      	b.n	8003ebe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff f998 	bl	8003198 <HAL_I2C_MasterTxCpltCallback>
}
 8003e68:	e029      	b.n	8003ebe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b22      	cmp	r3, #34	; 0x22
 8003e74:	d123      	bne.n	8003ebe <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d10b      	bne.n	8003ea8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fd fe79 	bl	8001b98 <HAL_I2C_MemRxCpltCallback>
}
 8003ea6:	e00a      	b.n	8003ebe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff f977 	bl	80031ac <HAL_I2C_MasterRxCpltCallback>
}
 8003ebe:	bf00      	nop
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	fe00e800 	.word	0xfe00e800
 8003ecc:	ffff0000 	.word	0xffff0000

08003ed0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eec:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	2b21      	cmp	r3, #33	; 0x21
 8003efa:	d002      	beq.n	8003f02 <I2C_ITSlaveCplt+0x32>
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	2b29      	cmp	r3, #41	; 0x29
 8003f00:	d108      	bne.n	8003f14 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003f02:	f248 0101 	movw	r1, #32769	; 0x8001
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fcc0 	bl	800488c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2221      	movs	r2, #33	; 0x21
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
 8003f12:	e00d      	b.n	8003f30 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	2b22      	cmp	r3, #34	; 0x22
 8003f18:	d002      	beq.n	8003f20 <I2C_ITSlaveCplt+0x50>
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f1e:	d107      	bne.n	8003f30 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003f20:	f248 0102 	movw	r1, #32770	; 0x8002
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fcb1 	bl	800488c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2222      	movs	r2, #34	; 0x22
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f3e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b64      	ldr	r3, [pc, #400]	; (80040dc <I2C_ITSlaveCplt+0x20c>)
 8003f4c:	400b      	ands	r3, r1
 8003f4e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fa14 	bl	800437e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	0b9b      	lsrs	r3, r3, #14
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d013      	beq.n	8003f8a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f70:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d020      	beq.n	8003fbc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f88:	e018      	b.n	8003fbc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	0bdb      	lsrs	r3, r3, #15
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d012      	beq.n	8003fbc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fa4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d006      	beq.n	8003fbc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	089b      	lsrs	r3, r3, #2
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d020      	beq.n	800400a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f023 0304 	bic.w	r3, r3, #4
 8003fce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00c      	beq.n	800400a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	f043 0204 	orr.w	r2, r3, #4
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	2b00      	cmp	r3, #0
 8004034:	d010      	beq.n	8004058 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	4619      	mov	r1, r3
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f8a7 	bl	8004190 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b28      	cmp	r3, #40	; 0x28
 800404c:	d141      	bne.n	80040d2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800404e:	6979      	ldr	r1, [r7, #20]
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f847 	bl	80040e4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004056:	e03c      	b.n	80040d2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004060:	d014      	beq.n	800408c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fe0b 	bl	8003c7e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <I2C_ITSlaveCplt+0x210>)
 800406c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff f8bd 	bl	8003204 <HAL_I2C_ListenCpltCallback>
}
 800408a:	e022      	b.n	80040d2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b22      	cmp	r3, #34	; 0x22
 8004096:	d10e      	bne.n	80040b6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff f890 	bl	80031d4 <HAL_I2C_SlaveRxCpltCallback>
}
 80040b4:	e00d      	b.n	80040d2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff f877 	bl	80031c0 <HAL_I2C_SlaveTxCpltCallback>
}
 80040d2:	bf00      	nop
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	fe00e800 	.word	0xfe00e800
 80040e0:	ffff0000 	.word	0xffff0000

080040e4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a26      	ldr	r2, [pc, #152]	; (800418c <I2C_ITListenCplt+0xa8>)
 80040f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	089b      	lsrs	r3, r3, #2
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d022      	beq.n	8004162 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	2b00      	cmp	r3, #0
 800413a:	d012      	beq.n	8004162 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	f043 0204 	orr.w	r2, r3, #4
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004162:	f248 0103 	movw	r1, #32771	; 0x8003
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fb90 	bl	800488c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2210      	movs	r2, #16
 8004172:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff f841 	bl	8003204 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	ffff0000 	.word	0xffff0000

08004190 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a5d      	ldr	r2, [pc, #372]	; (8004324 <I2C_ITError+0x194>)
 80041ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b28      	cmp	r3, #40	; 0x28
 80041c6:	d005      	beq.n	80041d4 <I2C_ITError+0x44>
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b29      	cmp	r3, #41	; 0x29
 80041cc:	d002      	beq.n	80041d4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	2b2a      	cmp	r3, #42	; 0x2a
 80041d2:	d10b      	bne.n	80041ec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041d4:	2103      	movs	r1, #3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fb58 	bl	800488c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2228      	movs	r2, #40	; 0x28
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a50      	ldr	r2, [pc, #320]	; (8004328 <I2C_ITError+0x198>)
 80041e8:	635a      	str	r2, [r3, #52]	; 0x34
 80041ea:	e011      	b.n	8004210 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041ec:	f248 0103 	movw	r1, #32771	; 0x8003
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fb4b 	bl	800488c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b60      	cmp	r3, #96	; 0x60
 8004200:	d003      	beq.n	800420a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	2b00      	cmp	r3, #0
 800421c:	d039      	beq.n	8004292 <I2C_ITError+0x102>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b11      	cmp	r3, #17
 8004222:	d002      	beq.n	800422a <I2C_ITError+0x9a>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b21      	cmp	r3, #33	; 0x21
 8004228:	d133      	bne.n	8004292 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004238:	d107      	bne.n	800424a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004248:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fb6b 	bl	800292a <HAL_DMA_GetState>
 8004254:	4603      	mov	r3, r0
 8004256:	2b01      	cmp	r3, #1
 8004258:	d017      	beq.n	800428a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	4a33      	ldr	r2, [pc, #204]	; (800432c <I2C_ITError+0x19c>)
 8004260:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe fb1a 	bl	80028a8 <HAL_DMA_Abort_IT>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d04d      	beq.n	8004316 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004284:	4610      	mov	r0, r2
 8004286:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004288:	e045      	b.n	8004316 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f850 	bl	8004330 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004290:	e041      	b.n	8004316 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d039      	beq.n	800430e <I2C_ITError+0x17e>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b12      	cmp	r3, #18
 800429e:	d002      	beq.n	80042a6 <I2C_ITError+0x116>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b22      	cmp	r3, #34	; 0x22
 80042a4:	d133      	bne.n	800430e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b4:	d107      	bne.n	80042c6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042c4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe fb2d 	bl	800292a <HAL_DMA_GetState>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d017      	beq.n	8004306 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	4a14      	ldr	r2, [pc, #80]	; (800432c <I2C_ITError+0x19c>)
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fadc 	bl	80028a8 <HAL_DMA_Abort_IT>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d011      	beq.n	800431a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004300:	4610      	mov	r0, r2
 8004302:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004304:	e009      	b.n	800431a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f812 	bl	8004330 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800430c:	e005      	b.n	800431a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f80e 	bl	8004330 <I2C_TreatErrorCallback>
  }
}
 8004314:	e002      	b.n	800431c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004316:	bf00      	nop
 8004318:	e000      	b.n	800431c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800431a:	bf00      	nop
}
 800431c:	bf00      	nop
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	ffff0000 	.word	0xffff0000
 8004328:	080034a9 	.word	0x080034a9
 800432c:	080043c7 	.word	0x080043c7

08004330 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b60      	cmp	r3, #96	; 0x60
 8004342:	d10e      	bne.n	8004362 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fe ff70 	bl	8003240 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004360:	e009      	b.n	8004376 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7fe ff5b 	bl	800322c <HAL_I2C_ErrorCallback>
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b02      	cmp	r3, #2
 8004392:	d103      	bne.n	800439c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2200      	movs	r2, #0
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d007      	beq.n	80043ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699a      	ldr	r2, [r3, #24]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0201 	orr.w	r2, r2, #1
 80043b8:	619a      	str	r2, [r3, #24]
  }
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	2200      	movs	r2, #0
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f0:	2200      	movs	r2, #0
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff ff9b 	bl	8004330 <I2C_TreatErrorCallback>
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	603b      	str	r3, [r7, #0]
 800440e:	4613      	mov	r3, r2
 8004410:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004412:	e022      	b.n	800445a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d01e      	beq.n	800445a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441c:	f7fd fffe 	bl	800241c <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d302      	bcc.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x30>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d113      	bne.n	800445a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004436:	f043 0220 	orr.w	r2, r3, #32
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e00f      	b.n	800447a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699a      	ldr	r2, [r3, #24]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4013      	ands	r3, r2
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	429a      	cmp	r2, r3
 8004476:	d0cd      	beq.n	8004414 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800448e:	e02c      	b.n	80044ea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f871 	bl	800457c <I2C_IsErrorOccurred>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e02a      	b.n	80044fa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044aa:	d01e      	beq.n	80044ea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ac:	f7fd ffb6 	bl	800241c <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d113      	bne.n	80044ea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	f043 0220 	orr.w	r2, r3, #32
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e007      	b.n	80044fa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d1cb      	bne.n	8004490 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800450e:	e028      	b.n	8004562 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f831 	bl	800457c <I2C_IsErrorOccurred>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e026      	b.n	8004572 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004524:	f7fd ff7a 	bl	800241c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	429a      	cmp	r2, r3
 8004532:	d302      	bcc.n	800453a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d113      	bne.n	8004562 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	f043 0220 	orr.w	r2, r3, #32
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e007      	b.n	8004572 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b20      	cmp	r3, #32
 800456e:	d1cf      	bne.n	8004510 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	; 0x28
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d075      	beq.n	8004694 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2210      	movs	r2, #16
 80045ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045b0:	e056      	b.n	8004660 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d052      	beq.n	8004660 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045ba:	f7fd ff2f 	bl	800241c <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <I2C_IsErrorOccurred+0x54>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d147      	bne.n	8004660 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f2:	d12e      	bne.n	8004652 <I2C_IsErrorOccurred+0xd6>
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045fa:	d02a      	beq.n	8004652 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80045fc:	7cfb      	ldrb	r3, [r7, #19]
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d027      	beq.n	8004652 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004610:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004612:	f7fd ff03 	bl	800241c <HAL_GetTick>
 8004616:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004618:	e01b      	b.n	8004652 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800461a:	f7fd feff 	bl	800241c <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b19      	cmp	r3, #25
 8004626:	d914      	bls.n	8004652 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462c:	f043 0220 	orr.w	r2, r3, #32
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b20      	cmp	r3, #32
 800465e:	d1dc      	bne.n	800461a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b20      	cmp	r3, #32
 800466c:	d003      	beq.n	8004676 <I2C_IsErrorOccurred+0xfa>
 800466e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004672:	2b00      	cmp	r3, #0
 8004674:	d09d      	beq.n	80045b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2220      	movs	r2, #32
 8004684:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	f043 0304 	orr.w	r3, r3, #4
 800468c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00b      	beq.n	80046e0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	f043 0308 	orr.w	r3, r3, #8
 80046ce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00b      	beq.n	8004702 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004706:	2b00      	cmp	r3, #0
 8004708:	d01c      	beq.n	8004744 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f7ff fe37 	bl	800437e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6859      	ldr	r1, [r3, #4]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <I2C_IsErrorOccurred+0x1d4>)
 800471c:	400b      	ands	r3, r1
 800471e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	431a      	orrs	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004748:	4618      	mov	r0, r3
 800474a:	3728      	adds	r7, #40	; 0x28
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	fe00e800 	.word	0xfe00e800

08004754 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	607b      	str	r3, [r7, #4]
 800475e:	460b      	mov	r3, r1
 8004760:	817b      	strh	r3, [r7, #10]
 8004762:	4613      	mov	r3, r2
 8004764:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004766:	897b      	ldrh	r3, [r7, #10]
 8004768:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800476c:	7a7b      	ldrb	r3, [r7, #9]
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004774:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	4313      	orrs	r3, r2
 800477e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004782:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	0d5b      	lsrs	r3, r3, #21
 800478e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004792:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <I2C_TransferConfig+0x60>)
 8004794:	430b      	orrs	r3, r1
 8004796:	43db      	mvns	r3, r3
 8004798:	ea02 0103 	and.w	r1, r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	03ff63ff 	.word	0x03ff63ff

080047b8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047cc:	4a2d      	ldr	r2, [pc, #180]	; (8004884 <I2C_Enable_IRQ+0xcc>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80047d6:	4a2c      	ldr	r2, [pc, #176]	; (8004888 <I2C_Enable_IRQ+0xd0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d11d      	bne.n	8004818 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	da03      	bge.n	80047ec <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80047ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80047ec:	887b      	ldrh	r3, [r7, #2]
 80047ee:	2b10      	cmp	r3, #16
 80047f0:	d103      	bne.n	80047fa <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80047f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80047fa:	887b      	ldrh	r3, [r7, #2]
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d103      	bne.n	8004808 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004806:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004808:	887b      	ldrh	r3, [r7, #2]
 800480a:	2b40      	cmp	r3, #64	; 0x40
 800480c:	d12c      	bne.n	8004868 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004814:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004816:	e027      	b.n	8004868 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004818:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800481c:	2b00      	cmp	r3, #0
 800481e:	da03      	bge.n	8004828 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004826:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004828:	887b      	ldrh	r3, [r7, #2]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004838:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800483a:	887b      	ldrh	r3, [r7, #2]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800484a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800484c:	887b      	ldrh	r3, [r7, #2]
 800484e:	2b10      	cmp	r3, #16
 8004850:	d103      	bne.n	800485a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004858:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800485a:	887b      	ldrh	r3, [r7, #2]
 800485c:	2b20      	cmp	r3, #32
 800485e:	d103      	bne.n	8004868 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f043 0320 	orr.w	r3, r3, #32
 8004866:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6819      	ldr	r1, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	430a      	orrs	r2, r1
 8004876:	601a      	str	r2, [r3, #0]
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	080036af 	.word	0x080036af
 8004888:	08003895 	.word	0x08003895

0800488c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800489c:	887b      	ldrh	r3, [r7, #2]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00f      	beq.n	80048c6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80048ac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048ba:	2b28      	cmp	r3, #40	; 0x28
 80048bc:	d003      	beq.n	80048c6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80048c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80048c6:	887b      	ldrh	r3, [r7, #2]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00f      	beq.n	80048f0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80048d6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048e4:	2b28      	cmp	r3, #40	; 0x28
 80048e6:	d003      	beq.n	80048f0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80048ee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80048f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	da03      	bge.n	8004900 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80048fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004900:	887b      	ldrh	r3, [r7, #2]
 8004902:	2b10      	cmp	r3, #16
 8004904:	d103      	bne.n	800490e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800490c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800490e:	887b      	ldrh	r3, [r7, #2]
 8004910:	2b20      	cmp	r3, #32
 8004912:	d103      	bne.n	800491c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f043 0320 	orr.w	r3, r3, #32
 800491a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800491c:	887b      	ldrh	r3, [r7, #2]
 800491e:	2b40      	cmp	r3, #64	; 0x40
 8004920:	d103      	bne.n	800492a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004928:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	43da      	mvns	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	400a      	ands	r2, r1
 800493a:	601a      	str	r2, [r3, #0]
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b20      	cmp	r3, #32
 800495c:	d138      	bne.n	80049d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004968:	2302      	movs	r3, #2
 800496a:	e032      	b.n	80049d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2224      	movs	r2, #36	; 0x24
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800499a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6819      	ldr	r1, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	e000      	b.n	80049d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049d0:	2302      	movs	r3, #2
  }
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049de:	b480      	push	{r7}
 80049e0:	b085      	sub	sp, #20
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d139      	bne.n	8004a68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e033      	b.n	8004a6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2224      	movs	r2, #36	; 0x24
 8004a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0201 	bic.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e000      	b.n	8004a6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
  }
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40007000 	.word	0x40007000

08004a94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa2:	d130      	bne.n	8004b06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aa4:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab0:	d038      	beq.n	8004b24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ab2:	4b20      	ldr	r3, [pc, #128]	; (8004b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004aba:	4a1e      	ldr	r2, [pc, #120]	; (8004b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004abc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ac0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ac2:	4b1d      	ldr	r3, [pc, #116]	; (8004b38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2232      	movs	r2, #50	; 0x32
 8004ac8:	fb02 f303 	mul.w	r3, r2, r3
 8004acc:	4a1b      	ldr	r2, [pc, #108]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004ace:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad2:	0c9b      	lsrs	r3, r3, #18
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ad8:	e002      	b.n	8004ae0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ae0:	4b14      	ldr	r3, [pc, #80]	; (8004b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aec:	d102      	bne.n	8004af4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1f2      	bne.n	8004ada <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004af4:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b00:	d110      	bne.n	8004b24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e00f      	b.n	8004b26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b06:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b12:	d007      	beq.n	8004b24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b14:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b1c:	4a05      	ldr	r2, [pc, #20]	; (8004b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40007000 	.word	0x40007000
 8004b38:	20000010 	.word	0x20000010
 8004b3c:	431bde83 	.word	0x431bde83

08004b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e3ca      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b52:	4b97      	ldr	r3, [pc, #604]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 030c 	and.w	r3, r3, #12
 8004b5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b5c:	4b94      	ldr	r3, [pc, #592]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0310 	and.w	r3, r3, #16
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 80e4 	beq.w	8004d3c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <HAL_RCC_OscConfig+0x4a>
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b0c      	cmp	r3, #12
 8004b7e:	f040 808b 	bne.w	8004c98 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	f040 8087 	bne.w	8004c98 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b8a:	4b89      	ldr	r3, [pc, #548]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x62>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e3a2      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1a      	ldr	r2, [r3, #32]
 8004ba6:	4b82      	ldr	r3, [pc, #520]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d004      	beq.n	8004bbc <HAL_RCC_OscConfig+0x7c>
 8004bb2:	4b7f      	ldr	r3, [pc, #508]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bba:	e005      	b.n	8004bc8 <HAL_RCC_OscConfig+0x88>
 8004bbc:	4b7c      	ldr	r3, [pc, #496]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc2:	091b      	lsrs	r3, r3, #4
 8004bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d223      	bcs.n	8004c14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fd55 	bl	8005680 <RCC_SetFlashLatencyFromMSIRange>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e383      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004be0:	4b73      	ldr	r3, [pc, #460]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a72      	ldr	r2, [pc, #456]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004be6:	f043 0308 	orr.w	r3, r3, #8
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	4b70      	ldr	r3, [pc, #448]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	496d      	ldr	r1, [pc, #436]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bfe:	4b6c      	ldr	r3, [pc, #432]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	4968      	ldr	r1, [pc, #416]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	604b      	str	r3, [r1, #4]
 8004c12:	e025      	b.n	8004c60 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c14:	4b66      	ldr	r3, [pc, #408]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a65      	ldr	r2, [pc, #404]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c1a:	f043 0308 	orr.w	r3, r3, #8
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	4b63      	ldr	r3, [pc, #396]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	4960      	ldr	r1, [pc, #384]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c32:	4b5f      	ldr	r3, [pc, #380]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	021b      	lsls	r3, r3, #8
 8004c40:	495b      	ldr	r1, [pc, #364]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d109      	bne.n	8004c60 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fd15 	bl	8005680 <RCC_SetFlashLatencyFromMSIRange>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e343      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c60:	f000 fc4a 	bl	80054f8 <HAL_RCC_GetSysClockFreq>
 8004c64:	4602      	mov	r2, r0
 8004c66:	4b52      	ldr	r3, [pc, #328]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	4950      	ldr	r1, [pc, #320]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004c72:	5ccb      	ldrb	r3, [r1, r3]
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7c:	4a4e      	ldr	r2, [pc, #312]	; (8004db8 <HAL_RCC_OscConfig+0x278>)
 8004c7e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c80:	4b4e      	ldr	r3, [pc, #312]	; (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fd fb79 	bl	800237c <HAL_InitTick>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d052      	beq.n	8004d3a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	e327      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d032      	beq.n	8004d06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ca0:	4b43      	ldr	r3, [pc, #268]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a42      	ldr	r2, [pc, #264]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004ca6:	f043 0301 	orr.w	r3, r3, #1
 8004caa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cac:	f7fd fbb6 	bl	800241c <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cb4:	f7fd fbb2 	bl	800241c <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e310      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cc6:	4b3a      	ldr	r3, [pc, #232]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cd2:	4b37      	ldr	r3, [pc, #220]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a36      	ldr	r2, [pc, #216]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004cd8:	f043 0308 	orr.w	r3, r3, #8
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	4b34      	ldr	r3, [pc, #208]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	4931      	ldr	r1, [pc, #196]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cf0:	4b2f      	ldr	r3, [pc, #188]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	492c      	ldr	r1, [pc, #176]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]
 8004d04:	e01a      	b.n	8004d3c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d06:	4b2a      	ldr	r3, [pc, #168]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a29      	ldr	r2, [pc, #164]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004d0c:	f023 0301 	bic.w	r3, r3, #1
 8004d10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d12:	f7fd fb83 	bl	800241c <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d1a:	f7fd fb7f 	bl	800241c <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e2dd      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d2c:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f0      	bne.n	8004d1a <HAL_RCC_OscConfig+0x1da>
 8004d38:	e000      	b.n	8004d3c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d074      	beq.n	8004e32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d005      	beq.n	8004d5a <HAL_RCC_OscConfig+0x21a>
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b0c      	cmp	r3, #12
 8004d52:	d10e      	bne.n	8004d72 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d10b      	bne.n	8004d72 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d5a:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d064      	beq.n	8004e30 <HAL_RCC_OscConfig+0x2f0>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d160      	bne.n	8004e30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e2ba      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d7a:	d106      	bne.n	8004d8a <HAL_RCC_OscConfig+0x24a>
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a0b      	ldr	r2, [pc, #44]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	e026      	b.n	8004dd8 <HAL_RCC_OscConfig+0x298>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d92:	d115      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x280>
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a05      	ldr	r2, [pc, #20]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004d9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a02      	ldr	r2, [pc, #8]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004daa:	6013      	str	r3, [r2, #0]
 8004dac:	e014      	b.n	8004dd8 <HAL_RCC_OscConfig+0x298>
 8004dae:	bf00      	nop
 8004db0:	40021000 	.word	0x40021000
 8004db4:	080116e8 	.word	0x080116e8
 8004db8:	20000010 	.word	0x20000010
 8004dbc:	20000014 	.word	0x20000014
 8004dc0:	4ba0      	ldr	r3, [pc, #640]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a9f      	ldr	r2, [pc, #636]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	4b9d      	ldr	r3, [pc, #628]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a9c      	ldr	r2, [pc, #624]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d013      	beq.n	8004e08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fd fb1c 	bl	800241c <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004de8:	f7fd fb18 	bl	800241c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b64      	cmp	r3, #100	; 0x64
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e276      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dfa:	4b92      	ldr	r3, [pc, #584]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x2a8>
 8004e06:	e014      	b.n	8004e32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fd fb08 	bl	800241c <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e10:	f7fd fb04 	bl	800241c <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b64      	cmp	r3, #100	; 0x64
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e262      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e22:	4b88      	ldr	r3, [pc, #544]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x2d0>
 8004e2e:	e000      	b.n	8004e32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d060      	beq.n	8004f00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d005      	beq.n	8004e50 <HAL_RCC_OscConfig+0x310>
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b0c      	cmp	r3, #12
 8004e48:	d119      	bne.n	8004e7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d116      	bne.n	8004e7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e50:	4b7c      	ldr	r3, [pc, #496]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_RCC_OscConfig+0x328>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e23f      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e68:	4b76      	ldr	r3, [pc, #472]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	061b      	lsls	r3, r3, #24
 8004e76:	4973      	ldr	r1, [pc, #460]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e7c:	e040      	b.n	8004f00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d023      	beq.n	8004ece <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e86:	4b6f      	ldr	r3, [pc, #444]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a6e      	ldr	r2, [pc, #440]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7fd fac3 	bl	800241c <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e9a:	f7fd fabf 	bl	800241c <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e21d      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eac:	4b65      	ldr	r3, [pc, #404]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f0      	beq.n	8004e9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb8:	4b62      	ldr	r3, [pc, #392]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	061b      	lsls	r3, r3, #24
 8004ec6:	495f      	ldr	r1, [pc, #380]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	604b      	str	r3, [r1, #4]
 8004ecc:	e018      	b.n	8004f00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ece:	4b5d      	ldr	r3, [pc, #372]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a5c      	ldr	r2, [pc, #368]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eda:	f7fd fa9f 	bl	800241c <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee2:	f7fd fa9b 	bl	800241c <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e1f9      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ef4:	4b53      	ldr	r3, [pc, #332]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1f0      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d03c      	beq.n	8004f86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01c      	beq.n	8004f4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f14:	4b4b      	ldr	r3, [pc, #300]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f1a:	4a4a      	ldr	r2, [pc, #296]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004f1c:	f043 0301 	orr.w	r3, r3, #1
 8004f20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f24:	f7fd fa7a 	bl	800241c <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f2c:	f7fd fa76 	bl	800241c <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e1d4      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f3e:	4b41      	ldr	r3, [pc, #260]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0ef      	beq.n	8004f2c <HAL_RCC_OscConfig+0x3ec>
 8004f4c:	e01b      	b.n	8004f86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f4e:	4b3d      	ldr	r3, [pc, #244]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f54:	4a3b      	ldr	r2, [pc, #236]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004f56:	f023 0301 	bic.w	r3, r3, #1
 8004f5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5e:	f7fd fa5d 	bl	800241c <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f66:	f7fd fa59 	bl	800241c <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e1b7      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f78:	4b32      	ldr	r3, [pc, #200]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1ef      	bne.n	8004f66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 80a6 	beq.w	80050e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f94:	2300      	movs	r3, #0
 8004f96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f98:	4b2a      	ldr	r3, [pc, #168]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10d      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa4:	4b27      	ldr	r3, [pc, #156]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa8:	4a26      	ldr	r2, [pc, #152]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fae:	6593      	str	r3, [r2, #88]	; 0x58
 8004fb0:	4b24      	ldr	r3, [pc, #144]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8004fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fc0:	4b21      	ldr	r3, [pc, #132]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d118      	bne.n	8004ffe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fcc:	4b1e      	ldr	r3, [pc, #120]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a1d      	ldr	r2, [pc, #116]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fd8:	f7fd fa20 	bl	800241c <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe0:	f7fd fa1c 	bl	800241c <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e17a      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff2:	4b15      	ldr	r3, [pc, #84]	; (8005048 <HAL_RCC_OscConfig+0x508>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d108      	bne.n	8005018 <HAL_RCC_OscConfig+0x4d8>
 8005006:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8005008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500c:	4a0d      	ldr	r2, [pc, #52]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 800500e:	f043 0301 	orr.w	r3, r3, #1
 8005012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005016:	e029      	b.n	800506c <HAL_RCC_OscConfig+0x52c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b05      	cmp	r3, #5
 800501e:	d115      	bne.n	800504c <HAL_RCC_OscConfig+0x50c>
 8005020:	4b08      	ldr	r3, [pc, #32]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	4a07      	ldr	r2, [pc, #28]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8005028:	f043 0304 	orr.w	r3, r3, #4
 800502c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005030:	4b04      	ldr	r3, [pc, #16]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	4a03      	ldr	r2, [pc, #12]	; (8005044 <HAL_RCC_OscConfig+0x504>)
 8005038:	f043 0301 	orr.w	r3, r3, #1
 800503c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005040:	e014      	b.n	800506c <HAL_RCC_OscConfig+0x52c>
 8005042:	bf00      	nop
 8005044:	40021000 	.word	0x40021000
 8005048:	40007000 	.word	0x40007000
 800504c:	4b9c      	ldr	r3, [pc, #624]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	4a9b      	ldr	r2, [pc, #620]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 8005054:	f023 0301 	bic.w	r3, r3, #1
 8005058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800505c:	4b98      	ldr	r3, [pc, #608]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005062:	4a97      	ldr	r2, [pc, #604]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 8005064:	f023 0304 	bic.w	r3, r3, #4
 8005068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d016      	beq.n	80050a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005074:	f7fd f9d2 	bl	800241c <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800507a:	e00a      	b.n	8005092 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507c:	f7fd f9ce 	bl	800241c <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f241 3288 	movw	r2, #5000	; 0x1388
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e12a      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005092:	4b8b      	ldr	r3, [pc, #556]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0ed      	beq.n	800507c <HAL_RCC_OscConfig+0x53c>
 80050a0:	e015      	b.n	80050ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a2:	f7fd f9bb 	bl	800241c <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050a8:	e00a      	b.n	80050c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050aa:	f7fd f9b7 	bl	800241c <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e113      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050c0:	4b7f      	ldr	r3, [pc, #508]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1ed      	bne.n	80050aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ce:	7ffb      	ldrb	r3, [r7, #31]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d105      	bne.n	80050e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d4:	4b7a      	ldr	r3, [pc, #488]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 80050d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d8:	4a79      	ldr	r2, [pc, #484]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 80050da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 80fe 	beq.w	80052e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	f040 80d0 	bne.w	8005294 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050f4:	4b72      	ldr	r3, [pc, #456]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f003 0203 	and.w	r2, r3, #3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	429a      	cmp	r2, r3
 8005106:	d130      	bne.n	800516a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	3b01      	subs	r3, #1
 8005114:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005116:	429a      	cmp	r2, r3
 8005118:	d127      	bne.n	800516a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005124:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005126:	429a      	cmp	r2, r3
 8005128:	d11f      	bne.n	800516a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005134:	2a07      	cmp	r2, #7
 8005136:	bf14      	ite	ne
 8005138:	2201      	movne	r2, #1
 800513a:	2200      	moveq	r2, #0
 800513c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800513e:	4293      	cmp	r3, r2
 8005140:	d113      	bne.n	800516a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514c:	085b      	lsrs	r3, r3, #1
 800514e:	3b01      	subs	r3, #1
 8005150:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005152:	429a      	cmp	r2, r3
 8005154:	d109      	bne.n	800516a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	085b      	lsrs	r3, r3, #1
 8005162:	3b01      	subs	r3, #1
 8005164:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005166:	429a      	cmp	r2, r3
 8005168:	d06e      	beq.n	8005248 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b0c      	cmp	r3, #12
 800516e:	d069      	beq.n	8005244 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005170:	4b53      	ldr	r3, [pc, #332]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d105      	bne.n	8005188 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800517c:	4b50      	ldr	r3, [pc, #320]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0ad      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800518c:	4b4c      	ldr	r3, [pc, #304]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a4b      	ldr	r2, [pc, #300]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 8005192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005196:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005198:	f7fd f940 	bl	800241c <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a0:	f7fd f93c 	bl	800241c <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e09a      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b2:	4b43      	ldr	r3, [pc, #268]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051be:	4b40      	ldr	r3, [pc, #256]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	4b40      	ldr	r3, [pc, #256]	; (80052c4 <HAL_RCC_OscConfig+0x784>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051ce:	3a01      	subs	r2, #1
 80051d0:	0112      	lsls	r2, r2, #4
 80051d2:	4311      	orrs	r1, r2
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051d8:	0212      	lsls	r2, r2, #8
 80051da:	4311      	orrs	r1, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051e0:	0852      	lsrs	r2, r2, #1
 80051e2:	3a01      	subs	r2, #1
 80051e4:	0552      	lsls	r2, r2, #21
 80051e6:	4311      	orrs	r1, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051ec:	0852      	lsrs	r2, r2, #1
 80051ee:	3a01      	subs	r2, #1
 80051f0:	0652      	lsls	r2, r2, #25
 80051f2:	4311      	orrs	r1, r2
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051f8:	0912      	lsrs	r2, r2, #4
 80051fa:	0452      	lsls	r2, r2, #17
 80051fc:	430a      	orrs	r2, r1
 80051fe:	4930      	ldr	r1, [pc, #192]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 8005200:	4313      	orrs	r3, r2
 8005202:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005204:	4b2e      	ldr	r3, [pc, #184]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2d      	ldr	r2, [pc, #180]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 800520a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800520e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005210:	4b2b      	ldr	r3, [pc, #172]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4a2a      	ldr	r2, [pc, #168]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 8005216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800521a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800521c:	f7fd f8fe 	bl	800241c <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005224:	f7fd f8fa 	bl	800241c <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e058      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005236:	4b22      	ldr	r3, [pc, #136]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005242:	e050      	b.n	80052e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e04f      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005248:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d148      	bne.n	80052e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005254:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a19      	ldr	r2, [pc, #100]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 800525a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800525e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005260:	4b17      	ldr	r3, [pc, #92]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	4a16      	ldr	r2, [pc, #88]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 8005266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800526a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800526c:	f7fd f8d6 	bl	800241c <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005274:	f7fd f8d2 	bl	800241c <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e030      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005286:	4b0e      	ldr	r3, [pc, #56]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0f0      	beq.n	8005274 <HAL_RCC_OscConfig+0x734>
 8005292:	e028      	b.n	80052e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	2b0c      	cmp	r3, #12
 8005298:	d023      	beq.n	80052e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529a:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a08      	ldr	r2, [pc, #32]	; (80052c0 <HAL_RCC_OscConfig+0x780>)
 80052a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a6:	f7fd f8b9 	bl	800241c <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052ac:	e00c      	b.n	80052c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ae:	f7fd f8b5 	bl	800241c <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d905      	bls.n	80052c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e013      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
 80052c0:	40021000 	.word	0x40021000
 80052c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052c8:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <HAL_RCC_OscConfig+0x7b0>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1ec      	bne.n	80052ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80052d4:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <HAL_RCC_OscConfig+0x7b0>)
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	4905      	ldr	r1, [pc, #20]	; (80052f0 <HAL_RCC_OscConfig+0x7b0>)
 80052da:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <HAL_RCC_OscConfig+0x7b4>)
 80052dc:	4013      	ands	r3, r2
 80052de:	60cb      	str	r3, [r1, #12]
 80052e0:	e001      	b.n	80052e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40021000 	.word	0x40021000
 80052f4:	feeefffc 	.word	0xfeeefffc

080052f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0e7      	b.n	80054dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800530c:	4b75      	ldr	r3, [pc, #468]	; (80054e4 <HAL_RCC_ClockConfig+0x1ec>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d910      	bls.n	800533c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531a:	4b72      	ldr	r3, [pc, #456]	; (80054e4 <HAL_RCC_ClockConfig+0x1ec>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f023 0207 	bic.w	r2, r3, #7
 8005322:	4970      	ldr	r1, [pc, #448]	; (80054e4 <HAL_RCC_ClockConfig+0x1ec>)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	4313      	orrs	r3, r2
 8005328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532a:	4b6e      	ldr	r3, [pc, #440]	; (80054e4 <HAL_RCC_ClockConfig+0x1ec>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e0cf      	b.n	80054dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d010      	beq.n	800536a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	4b66      	ldr	r3, [pc, #408]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005354:	429a      	cmp	r2, r3
 8005356:	d908      	bls.n	800536a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005358:	4b63      	ldr	r3, [pc, #396]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	4960      	ldr	r1, [pc, #384]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005366:	4313      	orrs	r3, r2
 8005368:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d04c      	beq.n	8005410 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b03      	cmp	r3, #3
 800537c:	d107      	bne.n	800538e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800537e:	4b5a      	ldr	r3, [pc, #360]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d121      	bne.n	80053ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e0a6      	b.n	80054dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d107      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005396:	4b54      	ldr	r3, [pc, #336]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d115      	bne.n	80053ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e09a      	b.n	80054dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d107      	bne.n	80053be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053ae:	4b4e      	ldr	r3, [pc, #312]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d109      	bne.n	80053ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e08e      	b.n	80054dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053be:	4b4a      	ldr	r3, [pc, #296]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e086      	b.n	80054dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053ce:	4b46      	ldr	r3, [pc, #280]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f023 0203 	bic.w	r2, r3, #3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	4943      	ldr	r1, [pc, #268]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e0:	f7fd f81c 	bl	800241c <HAL_GetTick>
 80053e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e6:	e00a      	b.n	80053fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e8:	f7fd f818 	bl	800241c <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e06e      	b.n	80054dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fe:	4b3a      	ldr	r3, [pc, #232]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 020c 	and.w	r2, r3, #12
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	429a      	cmp	r2, r3
 800540e:	d1eb      	bne.n	80053e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d010      	beq.n	800543e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	4b31      	ldr	r3, [pc, #196]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005428:	429a      	cmp	r2, r3
 800542a:	d208      	bcs.n	800543e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800542c:	4b2e      	ldr	r3, [pc, #184]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	492b      	ldr	r1, [pc, #172]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 800543a:	4313      	orrs	r3, r2
 800543c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800543e:	4b29      	ldr	r3, [pc, #164]	; (80054e4 <HAL_RCC_ClockConfig+0x1ec>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d210      	bcs.n	800546e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544c:	4b25      	ldr	r3, [pc, #148]	; (80054e4 <HAL_RCC_ClockConfig+0x1ec>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f023 0207 	bic.w	r2, r3, #7
 8005454:	4923      	ldr	r1, [pc, #140]	; (80054e4 <HAL_RCC_ClockConfig+0x1ec>)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	4313      	orrs	r3, r2
 800545a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800545c:	4b21      	ldr	r3, [pc, #132]	; (80054e4 <HAL_RCC_ClockConfig+0x1ec>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d001      	beq.n	800546e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e036      	b.n	80054dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b00      	cmp	r3, #0
 8005478:	d008      	beq.n	800548c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800547a:	4b1b      	ldr	r3, [pc, #108]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	4918      	ldr	r1, [pc, #96]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005488:	4313      	orrs	r3, r2
 800548a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b00      	cmp	r3, #0
 8005496:	d009      	beq.n	80054ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005498:	4b13      	ldr	r3, [pc, #76]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	4910      	ldr	r1, [pc, #64]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054ac:	f000 f824 	bl	80054f8 <HAL_RCC_GetSysClockFreq>
 80054b0:	4602      	mov	r2, r0
 80054b2:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <HAL_RCC_ClockConfig+0x1f0>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	091b      	lsrs	r3, r3, #4
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	490b      	ldr	r1, [pc, #44]	; (80054ec <HAL_RCC_ClockConfig+0x1f4>)
 80054be:	5ccb      	ldrb	r3, [r1, r3]
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	fa22 f303 	lsr.w	r3, r2, r3
 80054c8:	4a09      	ldr	r2, [pc, #36]	; (80054f0 <HAL_RCC_ClockConfig+0x1f8>)
 80054ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054cc:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <HAL_RCC_ClockConfig+0x1fc>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fc ff53 	bl	800237c <HAL_InitTick>
 80054d6:	4603      	mov	r3, r0
 80054d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80054da:	7afb      	ldrb	r3, [r7, #11]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40022000 	.word	0x40022000
 80054e8:	40021000 	.word	0x40021000
 80054ec:	080116e8 	.word	0x080116e8
 80054f0:	20000010 	.word	0x20000010
 80054f4:	20000014 	.word	0x20000014

080054f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b089      	sub	sp, #36	; 0x24
 80054fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	2300      	movs	r3, #0
 8005504:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005506:	4b3e      	ldr	r3, [pc, #248]	; (8005600 <HAL_RCC_GetSysClockFreq+0x108>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005510:	4b3b      	ldr	r3, [pc, #236]	; (8005600 <HAL_RCC_GetSysClockFreq+0x108>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d005      	beq.n	800552c <HAL_RCC_GetSysClockFreq+0x34>
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2b0c      	cmp	r3, #12
 8005524:	d121      	bne.n	800556a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d11e      	bne.n	800556a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800552c:	4b34      	ldr	r3, [pc, #208]	; (8005600 <HAL_RCC_GetSysClockFreq+0x108>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d107      	bne.n	8005548 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005538:	4b31      	ldr	r3, [pc, #196]	; (8005600 <HAL_RCC_GetSysClockFreq+0x108>)
 800553a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553e:	0a1b      	lsrs	r3, r3, #8
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	e005      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005548:	4b2d      	ldr	r3, [pc, #180]	; (8005600 <HAL_RCC_GetSysClockFreq+0x108>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	091b      	lsrs	r3, r3, #4
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005554:	4a2b      	ldr	r2, [pc, #172]	; (8005604 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800555c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10d      	bne.n	8005580 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005568:	e00a      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	2b04      	cmp	r3, #4
 800556e:	d102      	bne.n	8005576 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005570:	4b25      	ldr	r3, [pc, #148]	; (8005608 <HAL_RCC_GetSysClockFreq+0x110>)
 8005572:	61bb      	str	r3, [r7, #24]
 8005574:	e004      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b08      	cmp	r3, #8
 800557a:	d101      	bne.n	8005580 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800557c:	4b23      	ldr	r3, [pc, #140]	; (800560c <HAL_RCC_GetSysClockFreq+0x114>)
 800557e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2b0c      	cmp	r3, #12
 8005584:	d134      	bne.n	80055f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005586:	4b1e      	ldr	r3, [pc, #120]	; (8005600 <HAL_RCC_GetSysClockFreq+0x108>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d003      	beq.n	800559e <HAL_RCC_GetSysClockFreq+0xa6>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b03      	cmp	r3, #3
 800559a:	d003      	beq.n	80055a4 <HAL_RCC_GetSysClockFreq+0xac>
 800559c:	e005      	b.n	80055aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800559e:	4b1a      	ldr	r3, [pc, #104]	; (8005608 <HAL_RCC_GetSysClockFreq+0x110>)
 80055a0:	617b      	str	r3, [r7, #20]
      break;
 80055a2:	e005      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055a4:	4b19      	ldr	r3, [pc, #100]	; (800560c <HAL_RCC_GetSysClockFreq+0x114>)
 80055a6:	617b      	str	r3, [r7, #20]
      break;
 80055a8:	e002      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	617b      	str	r3, [r7, #20]
      break;
 80055ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055b0:	4b13      	ldr	r3, [pc, #76]	; (8005600 <HAL_RCC_GetSysClockFreq+0x108>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	091b      	lsrs	r3, r3, #4
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	3301      	adds	r3, #1
 80055bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055be:	4b10      	ldr	r3, [pc, #64]	; (8005600 <HAL_RCC_GetSysClockFreq+0x108>)
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	fb03 f202 	mul.w	r2, r3, r2
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055d6:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <HAL_RCC_GetSysClockFreq+0x108>)
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	0e5b      	lsrs	r3, r3, #25
 80055dc:	f003 0303 	and.w	r3, r3, #3
 80055e0:	3301      	adds	r3, #1
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055f0:	69bb      	ldr	r3, [r7, #24]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3724      	adds	r7, #36	; 0x24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40021000 	.word	0x40021000
 8005604:	08011700 	.word	0x08011700
 8005608:	00f42400 	.word	0x00f42400
 800560c:	007a1200 	.word	0x007a1200

08005610 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005614:	4b03      	ldr	r3, [pc, #12]	; (8005624 <HAL_RCC_GetHCLKFreq+0x14>)
 8005616:	681b      	ldr	r3, [r3, #0]
}
 8005618:	4618      	mov	r0, r3
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20000010 	.word	0x20000010

08005628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800562c:	f7ff fff0 	bl	8005610 <HAL_RCC_GetHCLKFreq>
 8005630:	4602      	mov	r2, r0
 8005632:	4b06      	ldr	r3, [pc, #24]	; (800564c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	0a1b      	lsrs	r3, r3, #8
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	4904      	ldr	r1, [pc, #16]	; (8005650 <HAL_RCC_GetPCLK1Freq+0x28>)
 800563e:	5ccb      	ldrb	r3, [r1, r3]
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005648:	4618      	mov	r0, r3
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40021000 	.word	0x40021000
 8005650:	080116f8 	.word	0x080116f8

08005654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005658:	f7ff ffda 	bl	8005610 <HAL_RCC_GetHCLKFreq>
 800565c:	4602      	mov	r2, r0
 800565e:	4b06      	ldr	r3, [pc, #24]	; (8005678 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	0adb      	lsrs	r3, r3, #11
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4904      	ldr	r1, [pc, #16]	; (800567c <HAL_RCC_GetPCLK2Freq+0x28>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	f003 031f 	and.w	r3, r3, #31
 8005670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005674:	4618      	mov	r0, r3
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40021000 	.word	0x40021000
 800567c:	080116f8 	.word	0x080116f8

08005680 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005688:	2300      	movs	r3, #0
 800568a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800568c:	4b2a      	ldr	r3, [pc, #168]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800568e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005698:	f7ff f9ee 	bl	8004a78 <HAL_PWREx_GetVoltageRange>
 800569c:	6178      	str	r0, [r7, #20]
 800569e:	e014      	b.n	80056ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056a0:	4b25      	ldr	r3, [pc, #148]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a4:	4a24      	ldr	r2, [pc, #144]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056aa:	6593      	str	r3, [r2, #88]	; 0x58
 80056ac:	4b22      	ldr	r3, [pc, #136]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056b8:	f7ff f9de 	bl	8004a78 <HAL_PWREx_GetVoltageRange>
 80056bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056be:	4b1e      	ldr	r3, [pc, #120]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c2:	4a1d      	ldr	r2, [pc, #116]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056d0:	d10b      	bne.n	80056ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b80      	cmp	r3, #128	; 0x80
 80056d6:	d919      	bls.n	800570c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2ba0      	cmp	r3, #160	; 0xa0
 80056dc:	d902      	bls.n	80056e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056de:	2302      	movs	r3, #2
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	e013      	b.n	800570c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056e4:	2301      	movs	r3, #1
 80056e6:	613b      	str	r3, [r7, #16]
 80056e8:	e010      	b.n	800570c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b80      	cmp	r3, #128	; 0x80
 80056ee:	d902      	bls.n	80056f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056f0:	2303      	movs	r3, #3
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	e00a      	b.n	800570c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b80      	cmp	r3, #128	; 0x80
 80056fa:	d102      	bne.n	8005702 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056fc:	2302      	movs	r3, #2
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	e004      	b.n	800570c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b70      	cmp	r3, #112	; 0x70
 8005706:	d101      	bne.n	800570c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005708:	2301      	movs	r3, #1
 800570a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800570c:	4b0b      	ldr	r3, [pc, #44]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f023 0207 	bic.w	r2, r3, #7
 8005714:	4909      	ldr	r1, [pc, #36]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800571c:	4b07      	ldr	r3, [pc, #28]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	429a      	cmp	r2, r3
 8005728:	d001      	beq.n	800572e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40021000 	.word	0x40021000
 800573c:	40022000 	.word	0x40022000

08005740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005748:	2300      	movs	r3, #0
 800574a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800574c:	2300      	movs	r3, #0
 800574e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005758:	2b00      	cmp	r3, #0
 800575a:	d041      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005760:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005764:	d02a      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005766:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800576a:	d824      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800576c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005770:	d008      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005772:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005776:	d81e      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800577c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005780:	d010      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005782:	e018      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005784:	4b86      	ldr	r3, [pc, #536]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	4a85      	ldr	r2, [pc, #532]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800578a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800578e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005790:	e015      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3304      	adds	r3, #4
 8005796:	2100      	movs	r1, #0
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fabb 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 800579e:	4603      	mov	r3, r0
 80057a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057a2:	e00c      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3320      	adds	r3, #32
 80057a8:	2100      	movs	r1, #0
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fba6 	bl	8005efc <RCCEx_PLLSAI2_Config>
 80057b0:	4603      	mov	r3, r0
 80057b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057b4:	e003      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	74fb      	strb	r3, [r7, #19]
      break;
 80057ba:	e000      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80057bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057be:	7cfb      	ldrb	r3, [r7, #19]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10b      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057c4:	4b76      	ldr	r3, [pc, #472]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057d2:	4973      	ldr	r1, [pc, #460]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057da:	e001      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d041      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057f4:	d02a      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80057f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057fa:	d824      	bhi.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80057fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005800:	d008      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005806:	d81e      	bhi.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800580c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005810:	d010      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005812:	e018      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005814:	4b62      	ldr	r3, [pc, #392]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	4a61      	ldr	r2, [pc, #388]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800581a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800581e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005820:	e015      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3304      	adds	r3, #4
 8005826:	2100      	movs	r1, #0
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fa73 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 800582e:	4603      	mov	r3, r0
 8005830:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005832:	e00c      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3320      	adds	r3, #32
 8005838:	2100      	movs	r1, #0
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fb5e 	bl	8005efc <RCCEx_PLLSAI2_Config>
 8005840:	4603      	mov	r3, r0
 8005842:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005844:	e003      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	74fb      	strb	r3, [r7, #19]
      break;
 800584a:	e000      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800584c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800584e:	7cfb      	ldrb	r3, [r7, #19]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10b      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005854:	4b52      	ldr	r3, [pc, #328]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005862:	494f      	ldr	r1, [pc, #316]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800586a:	e001      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586c:	7cfb      	ldrb	r3, [r7, #19]
 800586e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 80a0 	beq.w	80059be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800587e:	2300      	movs	r3, #0
 8005880:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005882:	4b47      	ldr	r3, [pc, #284]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005892:	2300      	movs	r3, #0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00d      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005898:	4b41      	ldr	r3, [pc, #260]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800589a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589c:	4a40      	ldr	r2, [pc, #256]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800589e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a2:	6593      	str	r3, [r2, #88]	; 0x58
 80058a4:	4b3e      	ldr	r3, [pc, #248]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058b0:	2301      	movs	r3, #1
 80058b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058b4:	4b3b      	ldr	r3, [pc, #236]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a3a      	ldr	r2, [pc, #232]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058c0:	f7fc fdac 	bl	800241c <HAL_GetTick>
 80058c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058c6:	e009      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c8:	f7fc fda8 	bl	800241c <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d902      	bls.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	74fb      	strb	r3, [r7, #19]
        break;
 80058da:	e005      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058dc:	4b31      	ldr	r3, [pc, #196]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0ef      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80058e8:	7cfb      	ldrb	r3, [r7, #19]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d15c      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058ee:	4b2c      	ldr	r3, [pc, #176]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01f      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	429a      	cmp	r2, r3
 800590a:	d019      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800590c:	4b24      	ldr	r3, [pc, #144]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800590e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005916:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005918:	4b21      	ldr	r3, [pc, #132]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591e:	4a20      	ldr	r2, [pc, #128]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005928:	4b1d      	ldr	r3, [pc, #116]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	4a1c      	ldr	r2, [pc, #112]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005938:	4a19      	ldr	r2, [pc, #100]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d016      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594a:	f7fc fd67 	bl	800241c <HAL_GetTick>
 800594e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005950:	e00b      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005952:	f7fc fd63 	bl	800241c <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005960:	4293      	cmp	r3, r2
 8005962:	d902      	bls.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	74fb      	strb	r3, [r7, #19]
            break;
 8005968:	e006      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800596a:	4b0d      	ldr	r3, [pc, #52]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800596c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0ec      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005978:	7cfb      	ldrb	r3, [r7, #19]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10c      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800597e:	4b08      	ldr	r3, [pc, #32]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005984:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800598e:	4904      	ldr	r1, [pc, #16]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005996:	e009      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005998:	7cfb      	ldrb	r3, [r7, #19]
 800599a:	74bb      	strb	r3, [r7, #18]
 800599c:	e006      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800599e:	bf00      	nop
 80059a0:	40021000 	.word	0x40021000
 80059a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a8:	7cfb      	ldrb	r3, [r7, #19]
 80059aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059ac:	7c7b      	ldrb	r3, [r7, #17]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d105      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b2:	4b9e      	ldr	r3, [pc, #632]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b6:	4a9d      	ldr	r2, [pc, #628]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059ca:	4b98      	ldr	r3, [pc, #608]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d0:	f023 0203 	bic.w	r2, r3, #3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	4994      	ldr	r1, [pc, #592]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059ec:	4b8f      	ldr	r3, [pc, #572]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f2:	f023 020c 	bic.w	r2, r3, #12
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fa:	498c      	ldr	r1, [pc, #560]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0304 	and.w	r3, r3, #4
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a0e:	4b87      	ldr	r3, [pc, #540]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	4983      	ldr	r1, [pc, #524]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0308 	and.w	r3, r3, #8
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a30:	4b7e      	ldr	r3, [pc, #504]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3e:	497b      	ldr	r1, [pc, #492]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0310 	and.w	r3, r3, #16
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a52:	4b76      	ldr	r3, [pc, #472]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a60:	4972      	ldr	r1, [pc, #456]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a74:	4b6d      	ldr	r3, [pc, #436]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a82:	496a      	ldr	r1, [pc, #424]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a96:	4b65      	ldr	r3, [pc, #404]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa4:	4961      	ldr	r1, [pc, #388]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ab8:	4b5c      	ldr	r3, [pc, #368]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac6:	4959      	ldr	r1, [pc, #356]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ada:	4b54      	ldr	r3, [pc, #336]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae8:	4950      	ldr	r1, [pc, #320]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005afc:	4b4b      	ldr	r3, [pc, #300]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0a:	4948      	ldr	r1, [pc, #288]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b1e:	4b43      	ldr	r3, [pc, #268]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2c:	493f      	ldr	r1, [pc, #252]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d028      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b40:	4b3a      	ldr	r3, [pc, #232]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b4e:	4937      	ldr	r1, [pc, #220]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b5e:	d106      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b60:	4b32      	ldr	r3, [pc, #200]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4a31      	ldr	r2, [pc, #196]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b6a:	60d3      	str	r3, [r2, #12]
 8005b6c:	e011      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b76:	d10c      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 f8c8 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b88:	7cfb      	ldrb	r3, [r7, #19]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005b8e:	7cfb      	ldrb	r3, [r7, #19]
 8005b90:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d028      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b9e:	4b23      	ldr	r3, [pc, #140]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bac:	491f      	ldr	r1, [pc, #124]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bbc:	d106      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bbe:	4b1b      	ldr	r3, [pc, #108]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	4a1a      	ldr	r2, [pc, #104]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bc8:	60d3      	str	r3, [r2, #12]
 8005bca:	e011      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bd4:	d10c      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	2101      	movs	r1, #1
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 f899 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 8005be2:	4603      	mov	r3, r0
 8005be4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005be6:	7cfb      	ldrb	r3, [r7, #19]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005bec:	7cfb      	ldrb	r3, [r7, #19]
 8005bee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d02b      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c0a:	4908      	ldr	r1, [pc, #32]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c1a:	d109      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c1c:	4b03      	ldr	r3, [pc, #12]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	4a02      	ldr	r2, [pc, #8]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c26:	60d3      	str	r3, [r2, #12]
 8005c28:	e014      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005c2a:	bf00      	nop
 8005c2c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c38:	d10c      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	2101      	movs	r1, #1
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 f867 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 8005c46:	4603      	mov	r3, r0
 8005c48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c4a:	7cfb      	ldrb	r3, [r7, #19]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005c50:	7cfb      	ldrb	r3, [r7, #19]
 8005c52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d02f      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c60:	4b2b      	ldr	r3, [pc, #172]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c6e:	4928      	ldr	r1, [pc, #160]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c7e:	d10d      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3304      	adds	r3, #4
 8005c84:	2102      	movs	r1, #2
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 f844 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c90:	7cfb      	ldrb	r3, [r7, #19]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d014      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c96:	7cfb      	ldrb	r3, [r7, #19]
 8005c98:	74bb      	strb	r3, [r7, #18]
 8005c9a:	e011      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca4:	d10c      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3320      	adds	r3, #32
 8005caa:	2102      	movs	r1, #2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 f925 	bl	8005efc <RCCEx_PLLSAI2_Config>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cb6:	7cfb      	ldrb	r3, [r7, #19]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005cbc:	7cfb      	ldrb	r3, [r7, #19]
 8005cbe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ccc:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cda:	490d      	ldr	r1, [pc, #52]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00b      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cee:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cfe:	4904      	ldr	r1, [pc, #16]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d06:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40021000 	.word	0x40021000

08005d14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d22:	4b75      	ldr	r3, [pc, #468]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d018      	beq.n	8005d60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d2e:	4b72      	ldr	r3, [pc, #456]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0203 	and.w	r2, r3, #3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d10d      	bne.n	8005d5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
       ||
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d46:	4b6c      	ldr	r3, [pc, #432]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	091b      	lsrs	r3, r3, #4
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
       ||
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d047      	beq.n	8005dea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	73fb      	strb	r3, [r7, #15]
 8005d5e:	e044      	b.n	8005dea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d018      	beq.n	8005d9a <RCCEx_PLLSAI1_Config+0x86>
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d825      	bhi.n	8005db8 <RCCEx_PLLSAI1_Config+0xa4>
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d002      	beq.n	8005d76 <RCCEx_PLLSAI1_Config+0x62>
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d009      	beq.n	8005d88 <RCCEx_PLLSAI1_Config+0x74>
 8005d74:	e020      	b.n	8005db8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d76:	4b60      	ldr	r3, [pc, #384]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d11d      	bne.n	8005dbe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d86:	e01a      	b.n	8005dbe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d88:	4b5b      	ldr	r3, [pc, #364]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d116      	bne.n	8005dc2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d98:	e013      	b.n	8005dc2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d9a:	4b57      	ldr	r3, [pc, #348]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10f      	bne.n	8005dc6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005da6:	4b54      	ldr	r3, [pc, #336]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d109      	bne.n	8005dc6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005db6:	e006      	b.n	8005dc6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	73fb      	strb	r3, [r7, #15]
      break;
 8005dbc:	e004      	b.n	8005dc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e002      	b.n	8005dc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dc2:	bf00      	nop
 8005dc4:	e000      	b.n	8005dc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10d      	bne.n	8005dea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005dce:	4b4a      	ldr	r3, [pc, #296]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6819      	ldr	r1, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	011b      	lsls	r3, r3, #4
 8005de2:	430b      	orrs	r3, r1
 8005de4:	4944      	ldr	r1, [pc, #272]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d17d      	bne.n	8005eec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005df0:	4b41      	ldr	r3, [pc, #260]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a40      	ldr	r2, [pc, #256]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dfc:	f7fc fb0e 	bl	800241c <HAL_GetTick>
 8005e00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e02:	e009      	b.n	8005e18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e04:	f7fc fb0a 	bl	800241c <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d902      	bls.n	8005e18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	73fb      	strb	r3, [r7, #15]
        break;
 8005e16:	e005      	b.n	8005e24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e18:	4b37      	ldr	r3, [pc, #220]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1ef      	bne.n	8005e04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d160      	bne.n	8005eec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d111      	bne.n	8005e54 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e30:	4b31      	ldr	r3, [pc, #196]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6892      	ldr	r2, [r2, #8]
 8005e40:	0211      	lsls	r1, r2, #8
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	68d2      	ldr	r2, [r2, #12]
 8005e46:	0912      	lsrs	r2, r2, #4
 8005e48:	0452      	lsls	r2, r2, #17
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	492a      	ldr	r1, [pc, #168]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	610b      	str	r3, [r1, #16]
 8005e52:	e027      	b.n	8005ea4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d112      	bne.n	8005e80 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e5a:	4b27      	ldr	r3, [pc, #156]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005e62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6892      	ldr	r2, [r2, #8]
 8005e6a:	0211      	lsls	r1, r2, #8
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6912      	ldr	r2, [r2, #16]
 8005e70:	0852      	lsrs	r2, r2, #1
 8005e72:	3a01      	subs	r2, #1
 8005e74:	0552      	lsls	r2, r2, #21
 8005e76:	430a      	orrs	r2, r1
 8005e78:	491f      	ldr	r1, [pc, #124]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	610b      	str	r3, [r1, #16]
 8005e7e:	e011      	b.n	8005ea4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e80:	4b1d      	ldr	r3, [pc, #116]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6892      	ldr	r2, [r2, #8]
 8005e90:	0211      	lsls	r1, r2, #8
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6952      	ldr	r2, [r2, #20]
 8005e96:	0852      	lsrs	r2, r2, #1
 8005e98:	3a01      	subs	r2, #1
 8005e9a:	0652      	lsls	r2, r2, #25
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	4916      	ldr	r1, [pc, #88]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ea4:	4b14      	ldr	r3, [pc, #80]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a13      	ldr	r2, [pc, #76]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005eae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb0:	f7fc fab4 	bl	800241c <HAL_GetTick>
 8005eb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005eb6:	e009      	b.n	8005ecc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005eb8:	f7fc fab0 	bl	800241c <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d902      	bls.n	8005ecc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	73fb      	strb	r3, [r7, #15]
          break;
 8005eca:	e005      	b.n	8005ed8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0ef      	beq.n	8005eb8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ede:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	4904      	ldr	r1, [pc, #16]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40021000 	.word	0x40021000

08005efc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f0a:	4b6a      	ldr	r3, [pc, #424]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d018      	beq.n	8005f48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f16:	4b67      	ldr	r3, [pc, #412]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f003 0203 	and.w	r2, r3, #3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d10d      	bne.n	8005f42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
       ||
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d009      	beq.n	8005f42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f2e:	4b61      	ldr	r3, [pc, #388]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	091b      	lsrs	r3, r3, #4
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
       ||
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d047      	beq.n	8005fd2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	73fb      	strb	r3, [r7, #15]
 8005f46:	e044      	b.n	8005fd2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d018      	beq.n	8005f82 <RCCEx_PLLSAI2_Config+0x86>
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d825      	bhi.n	8005fa0 <RCCEx_PLLSAI2_Config+0xa4>
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d002      	beq.n	8005f5e <RCCEx_PLLSAI2_Config+0x62>
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d009      	beq.n	8005f70 <RCCEx_PLLSAI2_Config+0x74>
 8005f5c:	e020      	b.n	8005fa0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f5e:	4b55      	ldr	r3, [pc, #340]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d11d      	bne.n	8005fa6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f6e:	e01a      	b.n	8005fa6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f70:	4b50      	ldr	r3, [pc, #320]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d116      	bne.n	8005faa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f80:	e013      	b.n	8005faa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f82:	4b4c      	ldr	r3, [pc, #304]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10f      	bne.n	8005fae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f8e:	4b49      	ldr	r3, [pc, #292]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d109      	bne.n	8005fae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f9e:	e006      	b.n	8005fae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa4:	e004      	b.n	8005fb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fa6:	bf00      	nop
 8005fa8:	e002      	b.n	8005fb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005faa:	bf00      	nop
 8005fac:	e000      	b.n	8005fb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fae:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10d      	bne.n	8005fd2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005fb6:	4b3f      	ldr	r3, [pc, #252]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6819      	ldr	r1, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	011b      	lsls	r3, r3, #4
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	4939      	ldr	r1, [pc, #228]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d167      	bne.n	80060a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005fd8:	4b36      	ldr	r3, [pc, #216]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a35      	ldr	r2, [pc, #212]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fe4:	f7fc fa1a 	bl	800241c <HAL_GetTick>
 8005fe8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fea:	e009      	b.n	8006000 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fec:	f7fc fa16 	bl	800241c <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d902      	bls.n	8006000 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	73fb      	strb	r3, [r7, #15]
        break;
 8005ffe:	e005      	b.n	800600c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006000:	4b2c      	ldr	r3, [pc, #176]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1ef      	bne.n	8005fec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d14a      	bne.n	80060a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d111      	bne.n	800603c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006018:	4b26      	ldr	r3, [pc, #152]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6892      	ldr	r2, [r2, #8]
 8006028:	0211      	lsls	r1, r2, #8
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	68d2      	ldr	r2, [r2, #12]
 800602e:	0912      	lsrs	r2, r2, #4
 8006030:	0452      	lsls	r2, r2, #17
 8006032:	430a      	orrs	r2, r1
 8006034:	491f      	ldr	r1, [pc, #124]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006036:	4313      	orrs	r3, r2
 8006038:	614b      	str	r3, [r1, #20]
 800603a:	e011      	b.n	8006060 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800603c:	4b1d      	ldr	r3, [pc, #116]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006044:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6892      	ldr	r2, [r2, #8]
 800604c:	0211      	lsls	r1, r2, #8
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6912      	ldr	r2, [r2, #16]
 8006052:	0852      	lsrs	r2, r2, #1
 8006054:	3a01      	subs	r2, #1
 8006056:	0652      	lsls	r2, r2, #25
 8006058:	430a      	orrs	r2, r1
 800605a:	4916      	ldr	r1, [pc, #88]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800605c:	4313      	orrs	r3, r2
 800605e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006060:	4b14      	ldr	r3, [pc, #80]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a13      	ldr	r2, [pc, #76]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800606a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606c:	f7fc f9d6 	bl	800241c <HAL_GetTick>
 8006070:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006072:	e009      	b.n	8006088 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006074:	f7fc f9d2 	bl	800241c <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d902      	bls.n	8006088 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	73fb      	strb	r3, [r7, #15]
          break;
 8006086:	e005      	b.n	8006094 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006088:	4b0a      	ldr	r3, [pc, #40]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0ef      	beq.n	8006074 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800609a:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800609c:	695a      	ldr	r2, [r3, #20]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	4904      	ldr	r1, [pc, #16]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40021000 	.word	0x40021000

080060b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e040      	b.n	800614c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d106      	bne.n	80060e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7fb ff6e 	bl	8001fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2224      	movs	r2, #36	; 0x24
 80060e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0201 	bic.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fc64 	bl	80069c4 <UART_SetConfig>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e022      	b.n	800614c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 ff10 	bl	8006f34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 ff97 	bl	8007078 <UART_CheckIdleState>
 800614a:	4603      	mov	r3, r0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08a      	sub	sp, #40	; 0x28
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	4613      	mov	r3, r2
 8006162:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006168:	2b20      	cmp	r3, #32
 800616a:	f040 80bf 	bne.w	80062ec <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <HAL_UART_Receive+0x26>
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e0b7      	b.n	80062ee <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_UART_Receive+0x38>
 8006188:	2302      	movs	r3, #2
 800618a:	e0b0      	b.n	80062ee <HAL_UART_Receive+0x19a>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2222      	movs	r2, #34	; 0x22
 80061a0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061a8:	f7fc f938 	bl	800241c <HAL_GetTick>
 80061ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	88fa      	ldrh	r2, [r7, #6]
 80061b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	88fa      	ldrh	r2, [r7, #6]
 80061ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c6:	d10e      	bne.n	80061e6 <HAL_UART_Receive+0x92>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d105      	bne.n	80061dc <HAL_UART_Receive+0x88>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061da:	e02d      	b.n	8006238 <HAL_UART_Receive+0xe4>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	22ff      	movs	r2, #255	; 0xff
 80061e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061e4:	e028      	b.n	8006238 <HAL_UART_Receive+0xe4>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10d      	bne.n	800620a <HAL_UART_Receive+0xb6>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d104      	bne.n	8006200 <HAL_UART_Receive+0xac>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	22ff      	movs	r2, #255	; 0xff
 80061fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061fe:	e01b      	b.n	8006238 <HAL_UART_Receive+0xe4>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	227f      	movs	r2, #127	; 0x7f
 8006204:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006208:	e016      	b.n	8006238 <HAL_UART_Receive+0xe4>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006212:	d10d      	bne.n	8006230 <HAL_UART_Receive+0xdc>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <HAL_UART_Receive+0xd2>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	227f      	movs	r2, #127	; 0x7f
 8006220:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006224:	e008      	b.n	8006238 <HAL_UART_Receive+0xe4>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	223f      	movs	r2, #63	; 0x3f
 800622a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800622e:	e003      	b.n	8006238 <HAL_UART_Receive+0xe4>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800623e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006248:	d108      	bne.n	800625c <HAL_UART_Receive+0x108>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d104      	bne.n	800625c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006252:	2300      	movs	r3, #0
 8006254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	61bb      	str	r3, [r7, #24]
 800625a:	e003      	b.n	8006264 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006260:	2300      	movs	r3, #0
 8006262:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800626c:	e033      	b.n	80062d6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2200      	movs	r2, #0
 8006276:	2120      	movs	r1, #32
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 ff46 	bl	800710a <UART_WaitOnFlagUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e032      	b.n	80062ee <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10c      	bne.n	80062a8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006294:	b29a      	uxth	r2, r3
 8006296:	8a7b      	ldrh	r3, [r7, #18]
 8006298:	4013      	ands	r3, r2
 800629a:	b29a      	uxth	r2, r3
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	3302      	adds	r3, #2
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	e00d      	b.n	80062c4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	8a7b      	ldrh	r3, [r7, #18]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	4013      	ands	r3, r2
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	3301      	adds	r3, #1
 80062c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1c5      	bne.n	800626e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2220      	movs	r2, #32
 80062e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e000      	b.n	80062ee <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80062ec:	2302      	movs	r3, #2
  }
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
	...

080062f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b08b      	sub	sp, #44	; 0x2c
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	4613      	mov	r3, r2
 8006304:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800630a:	2b20      	cmp	r3, #32
 800630c:	d156      	bne.n	80063bc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <HAL_UART_Transmit_IT+0x22>
 8006314:	88fb      	ldrh	r3, [r7, #6]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e04f      	b.n	80063be <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006324:	2b01      	cmp	r3, #1
 8006326:	d101      	bne.n	800632c <HAL_UART_Transmit_IT+0x34>
 8006328:	2302      	movs	r3, #2
 800632a:	e048      	b.n	80063be <HAL_UART_Transmit_IT+0xc6>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	88fa      	ldrh	r2, [r7, #6]
 800633e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	88fa      	ldrh	r2, [r7, #6]
 8006346:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2221      	movs	r2, #33	; 0x21
 800635c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006366:	d107      	bne.n	8006378 <HAL_UART_Transmit_IT+0x80>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d103      	bne.n	8006378 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4a16      	ldr	r2, [pc, #88]	; (80063cc <HAL_UART_Transmit_IT+0xd4>)
 8006374:	669a      	str	r2, [r3, #104]	; 0x68
 8006376:	e002      	b.n	800637e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4a15      	ldr	r2, [pc, #84]	; (80063d0 <HAL_UART_Transmit_IT+0xd8>)
 800637c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	e853 3f00 	ldrex	r3, [r3]
 8006392:	613b      	str	r3, [r7, #16]
   return(result);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639a:	627b      	str	r3, [r7, #36]	; 0x24
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	461a      	mov	r2, r3
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	623b      	str	r3, [r7, #32]
 80063a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	69f9      	ldr	r1, [r7, #28]
 80063aa:	6a3a      	ldr	r2, [r7, #32]
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e6      	bne.n	8006386 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	e000      	b.n	80063be <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80063bc:	2302      	movs	r3, #2
  }
}
 80063be:	4618      	mov	r0, r3
 80063c0:	372c      	adds	r7, #44	; 0x2c
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	0800743d 	.word	0x0800743d
 80063d0:	08007385 	.word	0x08007385

080063d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b0ba      	sub	sp, #232	; 0xe8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80063fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8006402:	4013      	ands	r3, r2
 8006404:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800640c:	2b00      	cmp	r3, #0
 800640e:	d115      	bne.n	800643c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00f      	beq.n	800643c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800641c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	d009      	beq.n	800643c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 82a6 	beq.w	800697e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	4798      	blx	r3
      }
      return;
 800643a:	e2a0      	b.n	800697e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800643c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 8117 	beq.w	8006674 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006452:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006456:	4b85      	ldr	r3, [pc, #532]	; (800666c <HAL_UART_IRQHandler+0x298>)
 8006458:	4013      	ands	r3, r2
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 810a 	beq.w	8006674 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b00      	cmp	r3, #0
 800646a:	d011      	beq.n	8006490 <HAL_UART_IRQHandler+0xbc>
 800646c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00b      	beq.n	8006490 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2201      	movs	r2, #1
 800647e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006486:	f043 0201 	orr.w	r2, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d011      	beq.n	80064c0 <HAL_UART_IRQHandler+0xec>
 800649c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00b      	beq.n	80064c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2202      	movs	r2, #2
 80064ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064b6:	f043 0204 	orr.w	r2, r3, #4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d011      	beq.n	80064f0 <HAL_UART_IRQHandler+0x11c>
 80064cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2204      	movs	r2, #4
 80064de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064e6:	f043 0202 	orr.w	r2, r3, #2
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d017      	beq.n	800652c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b00      	cmp	r3, #0
 8006506:	d105      	bne.n	8006514 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800650c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2208      	movs	r2, #8
 800651a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006522:	f043 0208 	orr.w	r2, r3, #8
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800652c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006534:	2b00      	cmp	r3, #0
 8006536:	d012      	beq.n	800655e <HAL_UART_IRQHandler+0x18a>
 8006538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800653c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00c      	beq.n	800655e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800654c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006554:	f043 0220 	orr.w	r2, r3, #32
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 820c 	beq.w	8006982 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800656a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00d      	beq.n	8006592 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	d007      	beq.n	8006592 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006598:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a6:	2b40      	cmp	r3, #64	; 0x40
 80065a8:	d005      	beq.n	80065b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d04f      	beq.n	8006656 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fe6b 	bl	8007292 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c6:	2b40      	cmp	r3, #64	; 0x40
 80065c8:	d141      	bne.n	800664e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3308      	adds	r3, #8
 80065d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3308      	adds	r3, #8
 80065f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006602:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800660e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1d9      	bne.n	80065ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	2b00      	cmp	r3, #0
 800661c:	d013      	beq.n	8006646 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006622:	4a13      	ldr	r2, [pc, #76]	; (8006670 <HAL_UART_IRQHandler+0x29c>)
 8006624:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662a:	4618      	mov	r0, r3
 800662c:	f7fc f93c 	bl	80028a8 <HAL_DMA_Abort_IT>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d017      	beq.n	8006666 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006640:	4610      	mov	r0, r2
 8006642:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006644:	e00f      	b.n	8006666 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f9a6 	bl	8006998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800664c:	e00b      	b.n	8006666 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f9a2 	bl	8006998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006654:	e007      	b.n	8006666 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f99e 	bl	8006998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006664:	e18d      	b.n	8006982 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006666:	bf00      	nop
    return;
 8006668:	e18b      	b.n	8006982 <HAL_UART_IRQHandler+0x5ae>
 800666a:	bf00      	nop
 800666c:	04000120 	.word	0x04000120
 8006670:	08007359 	.word	0x08007359

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006678:	2b01      	cmp	r3, #1
 800667a:	f040 8146 	bne.w	800690a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800667e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006682:	f003 0310 	and.w	r3, r3, #16
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 813f 	beq.w	800690a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800668c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006690:	f003 0310 	and.w	r3, r3, #16
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 8138 	beq.w	800690a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2210      	movs	r2, #16
 80066a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ac:	2b40      	cmp	r3, #64	; 0x40
 80066ae:	f040 80b4 	bne.w	800681a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 815f 	beq.w	8006986 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066d2:	429a      	cmp	r2, r3
 80066d4:	f080 8157 	bcs.w	8006986 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f040 8085 	bne.w	80067fe <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006700:	e853 3f00 	ldrex	r3, [r3]
 8006704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006708:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800670c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800671e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006722:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800672a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1da      	bne.n	80066f4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3308      	adds	r3, #8
 8006744:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800674e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3308      	adds	r3, #8
 800675e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006762:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006766:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006768:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800676a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800676e:	e841 2300 	strex	r3, r2, [r1]
 8006772:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1e1      	bne.n	800673e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3308      	adds	r3, #8
 8006780:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800678a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800678c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006790:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3308      	adds	r3, #8
 800679a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800679e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067a6:	e841 2300 	strex	r3, r2, [r1]
 80067aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1e3      	bne.n	800677a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2220      	movs	r2, #32
 80067b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c6:	e853 3f00 	ldrex	r3, [r3]
 80067ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ce:	f023 0310 	bic.w	r3, r3, #16
 80067d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80067e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067e8:	e841 2300 	strex	r3, r2, [r1]
 80067ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e4      	bne.n	80067be <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fc f817 	bl	800282c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800680a:	b29b      	uxth	r3, r3
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	b29b      	uxth	r3, r3
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f8ca 	bl	80069ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006818:	e0b5      	b.n	8006986 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006826:	b29b      	uxth	r3, r3
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 80a7 	beq.w	800698a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800683c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 80a2 	beq.w	800698a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006856:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800685a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006868:	647b      	str	r3, [r7, #68]	; 0x44
 800686a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800686e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006870:	e841 2300 	strex	r3, r2, [r1]
 8006874:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1e4      	bne.n	8006846 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3308      	adds	r3, #8
 8006882:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	e853 3f00 	ldrex	r3, [r3]
 800688a:	623b      	str	r3, [r7, #32]
   return(result);
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	f023 0301 	bic.w	r3, r3, #1
 8006892:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068a0:	633a      	str	r2, [r7, #48]	; 0x30
 80068a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a8:	e841 2300 	strex	r3, r2, [r1]
 80068ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e3      	bne.n	800687c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2220      	movs	r2, #32
 80068b8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0310 	bic.w	r3, r3, #16
 80068da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068e8:	61fb      	str	r3, [r7, #28]
 80068ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	69b9      	ldr	r1, [r7, #24]
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	617b      	str	r3, [r7, #20]
   return(result);
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e4      	bne.n	80068c6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f852 	bl	80069ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006908:	e03f      	b.n	800698a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800690a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00e      	beq.n	8006934 <HAL_UART_IRQHandler+0x560>
 8006916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800691a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d008      	beq.n	8006934 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800692a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fe0f 	bl	8007550 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006932:	e02d      	b.n	8006990 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00e      	beq.n	800695e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006948:	2b00      	cmp	r3, #0
 800694a:	d008      	beq.n	800695e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006950:	2b00      	cmp	r3, #0
 8006952:	d01c      	beq.n	800698e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	4798      	blx	r3
    }
    return;
 800695c:	e017      	b.n	800698e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800695e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	d012      	beq.n	8006990 <HAL_UART_IRQHandler+0x5bc>
 800696a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800696e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00c      	beq.n	8006990 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fdc0 	bl	80074fc <UART_EndTransmit_IT>
    return;
 800697c:	e008      	b.n	8006990 <HAL_UART_IRQHandler+0x5bc>
      return;
 800697e:	bf00      	nop
 8006980:	e006      	b.n	8006990 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006982:	bf00      	nop
 8006984:	e004      	b.n	8006990 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006986:	bf00      	nop
 8006988:	e002      	b.n	8006990 <HAL_UART_IRQHandler+0x5bc>
      return;
 800698a:	bf00      	nop
 800698c:	e000      	b.n	8006990 <HAL_UART_IRQHandler+0x5bc>
    return;
 800698e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006990:	37e8      	adds	r7, #232	; 0xe8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop

08006998 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c8:	b08a      	sub	sp, #40	; 0x28
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	431a      	orrs	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	4ba4      	ldr	r3, [pc, #656]	; (8006c84 <UART_SetConfig+0x2c0>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	6812      	ldr	r2, [r2, #0]
 80069fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069fc:	430b      	orrs	r3, r1
 80069fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a99      	ldr	r2, [pc, #612]	; (8006c88 <UART_SetConfig+0x2c4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d004      	beq.n	8006a30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a40:	430a      	orrs	r2, r1
 8006a42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a90      	ldr	r2, [pc, #576]	; (8006c8c <UART_SetConfig+0x2c8>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d126      	bne.n	8006a9c <UART_SetConfig+0xd8>
 8006a4e:	4b90      	ldr	r3, [pc, #576]	; (8006c90 <UART_SetConfig+0x2cc>)
 8006a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a54:	f003 0303 	and.w	r3, r3, #3
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d81b      	bhi.n	8006a94 <UART_SetConfig+0xd0>
 8006a5c:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <UART_SetConfig+0xa0>)
 8006a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a62:	bf00      	nop
 8006a64:	08006a75 	.word	0x08006a75
 8006a68:	08006a85 	.word	0x08006a85
 8006a6c:	08006a7d 	.word	0x08006a7d
 8006a70:	08006a8d 	.word	0x08006a8d
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7a:	e116      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a82:	e112      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006a84:	2304      	movs	r3, #4
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8a:	e10e      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006a8c:	2308      	movs	r3, #8
 8006a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a92:	e10a      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006a94:	2310      	movs	r3, #16
 8006a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9a:	e106      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a7c      	ldr	r2, [pc, #496]	; (8006c94 <UART_SetConfig+0x2d0>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d138      	bne.n	8006b18 <UART_SetConfig+0x154>
 8006aa6:	4b7a      	ldr	r3, [pc, #488]	; (8006c90 <UART_SetConfig+0x2cc>)
 8006aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aac:	f003 030c 	and.w	r3, r3, #12
 8006ab0:	2b0c      	cmp	r3, #12
 8006ab2:	d82d      	bhi.n	8006b10 <UART_SetConfig+0x14c>
 8006ab4:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <UART_SetConfig+0xf8>)
 8006ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aba:	bf00      	nop
 8006abc:	08006af1 	.word	0x08006af1
 8006ac0:	08006b11 	.word	0x08006b11
 8006ac4:	08006b11 	.word	0x08006b11
 8006ac8:	08006b11 	.word	0x08006b11
 8006acc:	08006b01 	.word	0x08006b01
 8006ad0:	08006b11 	.word	0x08006b11
 8006ad4:	08006b11 	.word	0x08006b11
 8006ad8:	08006b11 	.word	0x08006b11
 8006adc:	08006af9 	.word	0x08006af9
 8006ae0:	08006b11 	.word	0x08006b11
 8006ae4:	08006b11 	.word	0x08006b11
 8006ae8:	08006b11 	.word	0x08006b11
 8006aec:	08006b09 	.word	0x08006b09
 8006af0:	2300      	movs	r3, #0
 8006af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af6:	e0d8      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006af8:	2302      	movs	r3, #2
 8006afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afe:	e0d4      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006b00:	2304      	movs	r3, #4
 8006b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b06:	e0d0      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006b08:	2308      	movs	r3, #8
 8006b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0e:	e0cc      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006b10:	2310      	movs	r3, #16
 8006b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b16:	e0c8      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a5e      	ldr	r2, [pc, #376]	; (8006c98 <UART_SetConfig+0x2d4>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d125      	bne.n	8006b6e <UART_SetConfig+0x1aa>
 8006b22:	4b5b      	ldr	r3, [pc, #364]	; (8006c90 <UART_SetConfig+0x2cc>)
 8006b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b2c:	2b30      	cmp	r3, #48	; 0x30
 8006b2e:	d016      	beq.n	8006b5e <UART_SetConfig+0x19a>
 8006b30:	2b30      	cmp	r3, #48	; 0x30
 8006b32:	d818      	bhi.n	8006b66 <UART_SetConfig+0x1a2>
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d00a      	beq.n	8006b4e <UART_SetConfig+0x18a>
 8006b38:	2b20      	cmp	r3, #32
 8006b3a:	d814      	bhi.n	8006b66 <UART_SetConfig+0x1a2>
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <UART_SetConfig+0x182>
 8006b40:	2b10      	cmp	r3, #16
 8006b42:	d008      	beq.n	8006b56 <UART_SetConfig+0x192>
 8006b44:	e00f      	b.n	8006b66 <UART_SetConfig+0x1a2>
 8006b46:	2300      	movs	r3, #0
 8006b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b4c:	e0ad      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b54:	e0a9      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006b56:	2304      	movs	r3, #4
 8006b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b5c:	e0a5      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006b5e:	2308      	movs	r3, #8
 8006b60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b64:	e0a1      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006b66:	2310      	movs	r3, #16
 8006b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6c:	e09d      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a4a      	ldr	r2, [pc, #296]	; (8006c9c <UART_SetConfig+0x2d8>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d125      	bne.n	8006bc4 <UART_SetConfig+0x200>
 8006b78:	4b45      	ldr	r3, [pc, #276]	; (8006c90 <UART_SetConfig+0x2cc>)
 8006b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b82:	2bc0      	cmp	r3, #192	; 0xc0
 8006b84:	d016      	beq.n	8006bb4 <UART_SetConfig+0x1f0>
 8006b86:	2bc0      	cmp	r3, #192	; 0xc0
 8006b88:	d818      	bhi.n	8006bbc <UART_SetConfig+0x1f8>
 8006b8a:	2b80      	cmp	r3, #128	; 0x80
 8006b8c:	d00a      	beq.n	8006ba4 <UART_SetConfig+0x1e0>
 8006b8e:	2b80      	cmp	r3, #128	; 0x80
 8006b90:	d814      	bhi.n	8006bbc <UART_SetConfig+0x1f8>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <UART_SetConfig+0x1d8>
 8006b96:	2b40      	cmp	r3, #64	; 0x40
 8006b98:	d008      	beq.n	8006bac <UART_SetConfig+0x1e8>
 8006b9a:	e00f      	b.n	8006bbc <UART_SetConfig+0x1f8>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba2:	e082      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006baa:	e07e      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006bac:	2304      	movs	r3, #4
 8006bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb2:	e07a      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006bb4:	2308      	movs	r3, #8
 8006bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bba:	e076      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006bbc:	2310      	movs	r3, #16
 8006bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc2:	e072      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a35      	ldr	r2, [pc, #212]	; (8006ca0 <UART_SetConfig+0x2dc>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d12a      	bne.n	8006c24 <UART_SetConfig+0x260>
 8006bce:	4b30      	ldr	r3, [pc, #192]	; (8006c90 <UART_SetConfig+0x2cc>)
 8006bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bdc:	d01a      	beq.n	8006c14 <UART_SetConfig+0x250>
 8006bde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006be2:	d81b      	bhi.n	8006c1c <UART_SetConfig+0x258>
 8006be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be8:	d00c      	beq.n	8006c04 <UART_SetConfig+0x240>
 8006bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bee:	d815      	bhi.n	8006c1c <UART_SetConfig+0x258>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <UART_SetConfig+0x238>
 8006bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf8:	d008      	beq.n	8006c0c <UART_SetConfig+0x248>
 8006bfa:	e00f      	b.n	8006c1c <UART_SetConfig+0x258>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c02:	e052      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006c04:	2302      	movs	r3, #2
 8006c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c0a:	e04e      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006c0c:	2304      	movs	r3, #4
 8006c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c12:	e04a      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006c14:	2308      	movs	r3, #8
 8006c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c1a:	e046      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006c1c:	2310      	movs	r3, #16
 8006c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c22:	e042      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a17      	ldr	r2, [pc, #92]	; (8006c88 <UART_SetConfig+0x2c4>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d13a      	bne.n	8006ca4 <UART_SetConfig+0x2e0>
 8006c2e:	4b18      	ldr	r3, [pc, #96]	; (8006c90 <UART_SetConfig+0x2cc>)
 8006c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c3c:	d01a      	beq.n	8006c74 <UART_SetConfig+0x2b0>
 8006c3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c42:	d81b      	bhi.n	8006c7c <UART_SetConfig+0x2b8>
 8006c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c48:	d00c      	beq.n	8006c64 <UART_SetConfig+0x2a0>
 8006c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c4e:	d815      	bhi.n	8006c7c <UART_SetConfig+0x2b8>
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <UART_SetConfig+0x298>
 8006c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c58:	d008      	beq.n	8006c6c <UART_SetConfig+0x2a8>
 8006c5a:	e00f      	b.n	8006c7c <UART_SetConfig+0x2b8>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c62:	e022      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006c64:	2302      	movs	r3, #2
 8006c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6a:	e01e      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006c6c:	2304      	movs	r3, #4
 8006c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c72:	e01a      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006c74:	2308      	movs	r3, #8
 8006c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7a:	e016      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c82:	e012      	b.n	8006caa <UART_SetConfig+0x2e6>
 8006c84:	efff69f3 	.word	0xefff69f3
 8006c88:	40008000 	.word	0x40008000
 8006c8c:	40013800 	.word	0x40013800
 8006c90:	40021000 	.word	0x40021000
 8006c94:	40004400 	.word	0x40004400
 8006c98:	40004800 	.word	0x40004800
 8006c9c:	40004c00 	.word	0x40004c00
 8006ca0:	40005000 	.word	0x40005000
 8006ca4:	2310      	movs	r3, #16
 8006ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a9f      	ldr	r2, [pc, #636]	; (8006f2c <UART_SetConfig+0x568>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d17a      	bne.n	8006daa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d824      	bhi.n	8006d06 <UART_SetConfig+0x342>
 8006cbc:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <UART_SetConfig+0x300>)
 8006cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc2:	bf00      	nop
 8006cc4:	08006ce9 	.word	0x08006ce9
 8006cc8:	08006d07 	.word	0x08006d07
 8006ccc:	08006cf1 	.word	0x08006cf1
 8006cd0:	08006d07 	.word	0x08006d07
 8006cd4:	08006cf7 	.word	0x08006cf7
 8006cd8:	08006d07 	.word	0x08006d07
 8006cdc:	08006d07 	.word	0x08006d07
 8006ce0:	08006d07 	.word	0x08006d07
 8006ce4:	08006cff 	.word	0x08006cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce8:	f7fe fc9e 	bl	8005628 <HAL_RCC_GetPCLK1Freq>
 8006cec:	61f8      	str	r0, [r7, #28]
        break;
 8006cee:	e010      	b.n	8006d12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cf0:	4b8f      	ldr	r3, [pc, #572]	; (8006f30 <UART_SetConfig+0x56c>)
 8006cf2:	61fb      	str	r3, [r7, #28]
        break;
 8006cf4:	e00d      	b.n	8006d12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf6:	f7fe fbff 	bl	80054f8 <HAL_RCC_GetSysClockFreq>
 8006cfa:	61f8      	str	r0, [r7, #28]
        break;
 8006cfc:	e009      	b.n	8006d12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d02:	61fb      	str	r3, [r7, #28]
        break;
 8006d04:	e005      	b.n	8006d12 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 80fb 	beq.w	8006f10 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	4413      	add	r3, r2
 8006d24:	69fa      	ldr	r2, [r7, #28]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d305      	bcc.n	8006d36 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d903      	bls.n	8006d3e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d3c:	e0e8      	b.n	8006f10 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	2200      	movs	r2, #0
 8006d42:	461c      	mov	r4, r3
 8006d44:	4615      	mov	r5, r2
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	022b      	lsls	r3, r5, #8
 8006d50:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006d54:	0222      	lsls	r2, r4, #8
 8006d56:	68f9      	ldr	r1, [r7, #12]
 8006d58:	6849      	ldr	r1, [r1, #4]
 8006d5a:	0849      	lsrs	r1, r1, #1
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	4688      	mov	r8, r1
 8006d60:	4681      	mov	r9, r0
 8006d62:	eb12 0a08 	adds.w	sl, r2, r8
 8006d66:	eb43 0b09 	adc.w	fp, r3, r9
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	603b      	str	r3, [r7, #0]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d78:	4650      	mov	r0, sl
 8006d7a:	4659      	mov	r1, fp
 8006d7c:	f7f9 ff14 	bl	8000ba8 <__aeabi_uldivmod>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4613      	mov	r3, r2
 8006d86:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d8e:	d308      	bcc.n	8006da2 <UART_SetConfig+0x3de>
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d96:	d204      	bcs.n	8006da2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	60da      	str	r2, [r3, #12]
 8006da0:	e0b6      	b.n	8006f10 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006da8:	e0b2      	b.n	8006f10 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006db2:	d15e      	bne.n	8006e72 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006db4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d828      	bhi.n	8006e0e <UART_SetConfig+0x44a>
 8006dbc:	a201      	add	r2, pc, #4	; (adr r2, 8006dc4 <UART_SetConfig+0x400>)
 8006dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc2:	bf00      	nop
 8006dc4:	08006de9 	.word	0x08006de9
 8006dc8:	08006df1 	.word	0x08006df1
 8006dcc:	08006df9 	.word	0x08006df9
 8006dd0:	08006e0f 	.word	0x08006e0f
 8006dd4:	08006dff 	.word	0x08006dff
 8006dd8:	08006e0f 	.word	0x08006e0f
 8006ddc:	08006e0f 	.word	0x08006e0f
 8006de0:	08006e0f 	.word	0x08006e0f
 8006de4:	08006e07 	.word	0x08006e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006de8:	f7fe fc1e 	bl	8005628 <HAL_RCC_GetPCLK1Freq>
 8006dec:	61f8      	str	r0, [r7, #28]
        break;
 8006dee:	e014      	b.n	8006e1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006df0:	f7fe fc30 	bl	8005654 <HAL_RCC_GetPCLK2Freq>
 8006df4:	61f8      	str	r0, [r7, #28]
        break;
 8006df6:	e010      	b.n	8006e1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006df8:	4b4d      	ldr	r3, [pc, #308]	; (8006f30 <UART_SetConfig+0x56c>)
 8006dfa:	61fb      	str	r3, [r7, #28]
        break;
 8006dfc:	e00d      	b.n	8006e1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dfe:	f7fe fb7b 	bl	80054f8 <HAL_RCC_GetSysClockFreq>
 8006e02:	61f8      	str	r0, [r7, #28]
        break;
 8006e04:	e009      	b.n	8006e1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e0a:	61fb      	str	r3, [r7, #28]
        break;
 8006e0c:	e005      	b.n	8006e1a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d077      	beq.n	8006f10 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	005a      	lsls	r2, r3, #1
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	085b      	lsrs	r3, r3, #1
 8006e2a:	441a      	add	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	2b0f      	cmp	r3, #15
 8006e3a:	d916      	bls.n	8006e6a <UART_SetConfig+0x4a6>
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e42:	d212      	bcs.n	8006e6a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f023 030f 	bic.w	r3, r3, #15
 8006e4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	085b      	lsrs	r3, r3, #1
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	f003 0307 	and.w	r3, r3, #7
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	8afb      	ldrh	r3, [r7, #22]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	8afa      	ldrh	r2, [r7, #22]
 8006e66:	60da      	str	r2, [r3, #12]
 8006e68:	e052      	b.n	8006f10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e70:	e04e      	b.n	8006f10 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d827      	bhi.n	8006eca <UART_SetConfig+0x506>
 8006e7a:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <UART_SetConfig+0x4bc>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006ea5 	.word	0x08006ea5
 8006e84:	08006ead 	.word	0x08006ead
 8006e88:	08006eb5 	.word	0x08006eb5
 8006e8c:	08006ecb 	.word	0x08006ecb
 8006e90:	08006ebb 	.word	0x08006ebb
 8006e94:	08006ecb 	.word	0x08006ecb
 8006e98:	08006ecb 	.word	0x08006ecb
 8006e9c:	08006ecb 	.word	0x08006ecb
 8006ea0:	08006ec3 	.word	0x08006ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ea4:	f7fe fbc0 	bl	8005628 <HAL_RCC_GetPCLK1Freq>
 8006ea8:	61f8      	str	r0, [r7, #28]
        break;
 8006eaa:	e014      	b.n	8006ed6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eac:	f7fe fbd2 	bl	8005654 <HAL_RCC_GetPCLK2Freq>
 8006eb0:	61f8      	str	r0, [r7, #28]
        break;
 8006eb2:	e010      	b.n	8006ed6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb4:	4b1e      	ldr	r3, [pc, #120]	; (8006f30 <UART_SetConfig+0x56c>)
 8006eb6:	61fb      	str	r3, [r7, #28]
        break;
 8006eb8:	e00d      	b.n	8006ed6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eba:	f7fe fb1d 	bl	80054f8 <HAL_RCC_GetSysClockFreq>
 8006ebe:	61f8      	str	r0, [r7, #28]
        break;
 8006ec0:	e009      	b.n	8006ed6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ec6:	61fb      	str	r3, [r7, #28]
        break;
 8006ec8:	e005      	b.n	8006ed6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ed4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d019      	beq.n	8006f10 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	085a      	lsrs	r2, r3, #1
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	441a      	add	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	2b0f      	cmp	r3, #15
 8006ef4:	d909      	bls.n	8006f0a <UART_SetConfig+0x546>
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006efc:	d205      	bcs.n	8006f0a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	60da      	str	r2, [r3, #12]
 8006f08:	e002      	b.n	8006f10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3728      	adds	r7, #40	; 0x28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f2a:	bf00      	nop
 8006f2c:	40008000 	.word	0x40008000
 8006f30:	00f42400 	.word	0x00f42400

08006f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00a      	beq.n	8006f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00a      	beq.n	8006fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	f003 0308 	and.w	r3, r3, #8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00a      	beq.n	8006fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	f003 0310 	and.w	r3, r3, #16
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00a      	beq.n	8006fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	f003 0320 	and.w	r3, r3, #32
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	430a      	orrs	r2, r1
 8007006:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007010:	2b00      	cmp	r3, #0
 8007012:	d01a      	beq.n	800704a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007032:	d10a      	bne.n	800704a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	605a      	str	r2, [r3, #4]
  }
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af02      	add	r7, sp, #8
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007088:	f7fb f9c8 	bl	800241c <HAL_GetTick>
 800708c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0308 	and.w	r3, r3, #8
 8007098:	2b08      	cmp	r3, #8
 800709a:	d10e      	bne.n	80070ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800709c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f82d 	bl	800710a <UART_WaitOnFlagUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e023      	b.n	8007102 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d10e      	bne.n	80070e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f817 	bl	800710a <UART_WaitOnFlagUntilTimeout>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e00d      	b.n	8007102 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2220      	movs	r2, #32
 80070ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2220      	movs	r2, #32
 80070f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b09c      	sub	sp, #112	; 0x70
 800710e:	af00      	add	r7, sp, #0
 8007110:	60f8      	str	r0, [r7, #12]
 8007112:	60b9      	str	r1, [r7, #8]
 8007114:	603b      	str	r3, [r7, #0]
 8007116:	4613      	mov	r3, r2
 8007118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800711a:	e0a5      	b.n	8007268 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800711c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800711e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007122:	f000 80a1 	beq.w	8007268 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007126:	f7fb f979 	bl	800241c <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007132:	429a      	cmp	r2, r3
 8007134:	d302      	bcc.n	800713c <UART_WaitOnFlagUntilTimeout+0x32>
 8007136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007138:	2b00      	cmp	r3, #0
 800713a:	d13e      	bne.n	80071ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800714a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800714c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007150:	667b      	str	r3, [r7, #100]	; 0x64
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800715a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800715c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007160:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e6      	bne.n	800713c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3308      	adds	r3, #8
 8007174:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800717e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	663b      	str	r3, [r7, #96]	; 0x60
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3308      	adds	r3, #8
 800718c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800718e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007190:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800719c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e5      	bne.n	800716e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2220      	movs	r2, #32
 80071ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e067      	b.n	800728a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d04f      	beq.n	8007268 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071d6:	d147      	bne.n	8007268 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007200:	637b      	str	r3, [r7, #52]	; 0x34
 8007202:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800720e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e6      	bne.n	80071e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3308      	adds	r3, #8
 800721a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	613b      	str	r3, [r7, #16]
   return(result);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f023 0301 	bic.w	r3, r3, #1
 800722a:	66bb      	str	r3, [r7, #104]	; 0x68
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3308      	adds	r3, #8
 8007232:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007234:	623a      	str	r2, [r7, #32]
 8007236:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	69f9      	ldr	r1, [r7, #28]
 800723a:	6a3a      	ldr	r2, [r7, #32]
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	61bb      	str	r3, [r7, #24]
   return(result);
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e5      	bne.n	8007214 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2220      	movs	r2, #32
 800724c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2220      	movs	r2, #32
 8007252:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2220      	movs	r2, #32
 8007258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e010      	b.n	800728a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	69da      	ldr	r2, [r3, #28]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	4013      	ands	r3, r2
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	429a      	cmp	r2, r3
 8007276:	bf0c      	ite	eq
 8007278:	2301      	moveq	r3, #1
 800727a:	2300      	movne	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	461a      	mov	r2, r3
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	429a      	cmp	r2, r3
 8007284:	f43f af4a 	beq.w	800711c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3770      	adds	r7, #112	; 0x70
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007292:	b480      	push	{r7}
 8007294:	b095      	sub	sp, #84	; 0x54
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a2:	e853 3f00 	ldrex	r3, [r3]
 80072a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	461a      	mov	r2, r3
 80072b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b8:	643b      	str	r3, [r7, #64]	; 0x40
 80072ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072c0:	e841 2300 	strex	r3, r2, [r1]
 80072c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e6      	bne.n	800729a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3308      	adds	r3, #8
 80072d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	61fb      	str	r3, [r7, #28]
   return(result);
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f023 0301 	bic.w	r3, r3, #1
 80072e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3308      	adds	r3, #8
 80072ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e5      	bne.n	80072cc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007304:	2b01      	cmp	r3, #1
 8007306:	d118      	bne.n	800733a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	60bb      	str	r3, [r7, #8]
   return(result);
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	f023 0310 	bic.w	r3, r3, #16
 800731c:	647b      	str	r3, [r7, #68]	; 0x44
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007326:	61bb      	str	r3, [r7, #24]
 8007328:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6979      	ldr	r1, [r7, #20]
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	613b      	str	r3, [r7, #16]
   return(result);
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e6      	bne.n	8007308 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2220      	movs	r2, #32
 800733e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800734c:	bf00      	nop
 800734e:	3754      	adds	r7, #84	; 0x54
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007364:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7ff fb0e 	bl	8006998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800737c:	bf00      	nop
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007384:	b480      	push	{r7}
 8007386:	b08f      	sub	sp, #60	; 0x3c
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007390:	2b21      	cmp	r3, #33	; 0x21
 8007392:	d14d      	bne.n	8007430 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800739a:	b29b      	uxth	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	d132      	bne.n	8007406 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073b4:	637b      	str	r3, [r7, #52]	; 0x34
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073c6:	e841 2300 	strex	r3, r2, [r1]
 80073ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1e6      	bne.n	80073a0 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	e853 3f00 	ldrex	r3, [r3]
 80073de:	60bb      	str	r3, [r7, #8]
   return(result);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073e6:	633b      	str	r3, [r7, #48]	; 0x30
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	61bb      	str	r3, [r7, #24]
 80073f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f4:	6979      	ldr	r1, [r7, #20]
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	e841 2300 	strex	r3, r2, [r1]
 80073fc:	613b      	str	r3, [r7, #16]
   return(result);
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e6      	bne.n	80073d2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007404:	e014      	b.n	8007430 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800740a:	781a      	ldrb	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	b292      	uxth	r2, r2
 8007412:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007430:	bf00      	nop
 8007432:	373c      	adds	r7, #60	; 0x3c
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800743c:	b480      	push	{r7}
 800743e:	b091      	sub	sp, #68	; 0x44
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007448:	2b21      	cmp	r3, #33	; 0x21
 800744a:	d151      	bne.n	80074f0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007452:	b29b      	uxth	r3, r3
 8007454:	2b00      	cmp	r3, #0
 8007456:	d132      	bne.n	80074be <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	623b      	str	r3, [r7, #32]
   return(result);
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800746c:	63bb      	str	r3, [r7, #56]	; 0x38
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	633b      	str	r3, [r7, #48]	; 0x30
 8007478:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800747c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e6      	bne.n	8007458 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	60fb      	str	r3, [r7, #12]
   return(result);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800749e:	637b      	str	r3, [r7, #52]	; 0x34
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	461a      	mov	r2, r3
 80074a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	69b9      	ldr	r1, [r7, #24]
 80074ae:	69fa      	ldr	r2, [r7, #28]
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	617b      	str	r3, [r7, #20]
   return(result);
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e6      	bne.n	800748a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80074bc:	e018      	b.n	80074f0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80074c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c6:	881a      	ldrh	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074d0:	b292      	uxth	r2, r2
 80074d2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d8:	1c9a      	adds	r2, r3, #2
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	3b01      	subs	r3, #1
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80074f0:	bf00      	nop
 80074f2:	3744      	adds	r7, #68	; 0x44
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b088      	sub	sp, #32
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	e853 3f00 	ldrex	r3, [r3]
 8007510:	60bb      	str	r3, [r7, #8]
   return(result);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007518:	61fb      	str	r3, [r7, #28]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	61bb      	str	r3, [r7, #24]
 8007524:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	6979      	ldr	r1, [r7, #20]
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	e841 2300 	strex	r3, r2, [r1]
 800752e:	613b      	str	r3, [r7, #16]
   return(result);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e6      	bne.n	8007504 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2220      	movs	r2, #32
 800753a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fa fc40 	bl	8001dc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007548:	bf00      	nop
 800754a:	3720      	adds	r7, #32
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <__NVIC_SetPriority>:
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	6039      	str	r1, [r7, #0]
 800756e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007574:	2b00      	cmp	r3, #0
 8007576:	db0a      	blt.n	800758e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	b2da      	uxtb	r2, r3
 800757c:	490c      	ldr	r1, [pc, #48]	; (80075b0 <__NVIC_SetPriority+0x4c>)
 800757e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007582:	0112      	lsls	r2, r2, #4
 8007584:	b2d2      	uxtb	r2, r2
 8007586:	440b      	add	r3, r1
 8007588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800758c:	e00a      	b.n	80075a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	b2da      	uxtb	r2, r3
 8007592:	4908      	ldr	r1, [pc, #32]	; (80075b4 <__NVIC_SetPriority+0x50>)
 8007594:	79fb      	ldrb	r3, [r7, #7]
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	3b04      	subs	r3, #4
 800759c:	0112      	lsls	r2, r2, #4
 800759e:	b2d2      	uxtb	r2, r2
 80075a0:	440b      	add	r3, r1
 80075a2:	761a      	strb	r2, [r3, #24]
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	e000e100 	.word	0xe000e100
 80075b4:	e000ed00 	.word	0xe000ed00

080075b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80075bc:	2100      	movs	r1, #0
 80075be:	f06f 0004 	mvn.w	r0, #4
 80075c2:	f7ff ffcf 	bl	8007564 <__NVIC_SetPriority>
#endif
}
 80075c6:	bf00      	nop
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075d2:	f3ef 8305 	mrs	r3, IPSR
 80075d6:	603b      	str	r3, [r7, #0]
  return(result);
 80075d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80075de:	f06f 0305 	mvn.w	r3, #5
 80075e2:	607b      	str	r3, [r7, #4]
 80075e4:	e00c      	b.n	8007600 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80075e6:	4b0a      	ldr	r3, [pc, #40]	; (8007610 <osKernelInitialize+0x44>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d105      	bne.n	80075fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80075ee:	4b08      	ldr	r3, [pc, #32]	; (8007610 <osKernelInitialize+0x44>)
 80075f0:	2201      	movs	r2, #1
 80075f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	607b      	str	r3, [r7, #4]
 80075f8:	e002      	b.n	8007600 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80075fa:	f04f 33ff 	mov.w	r3, #4294967295
 80075fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007600:	687b      	ldr	r3, [r7, #4]
}
 8007602:	4618      	mov	r0, r3
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	20001248 	.word	0x20001248

08007614 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800761a:	f3ef 8305 	mrs	r3, IPSR
 800761e:	603b      	str	r3, [r7, #0]
  return(result);
 8007620:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007626:	f06f 0305 	mvn.w	r3, #5
 800762a:	607b      	str	r3, [r7, #4]
 800762c:	e010      	b.n	8007650 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800762e:	4b0b      	ldr	r3, [pc, #44]	; (800765c <osKernelStart+0x48>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d109      	bne.n	800764a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007636:	f7ff ffbf 	bl	80075b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800763a:	4b08      	ldr	r3, [pc, #32]	; (800765c <osKernelStart+0x48>)
 800763c:	2202      	movs	r2, #2
 800763e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007640:	f001 fad8 	bl	8008bf4 <vTaskStartScheduler>
      stat = osOK;
 8007644:	2300      	movs	r3, #0
 8007646:	607b      	str	r3, [r7, #4]
 8007648:	e002      	b.n	8007650 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800764a:	f04f 33ff 	mov.w	r3, #4294967295
 800764e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007650:	687b      	ldr	r3, [r7, #4]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	20001248 	.word	0x20001248

08007660 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007660:	b580      	push	{r7, lr}
 8007662:	b08e      	sub	sp, #56	; 0x38
 8007664:	af04      	add	r7, sp, #16
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800766c:	2300      	movs	r3, #0
 800766e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007670:	f3ef 8305 	mrs	r3, IPSR
 8007674:	617b      	str	r3, [r7, #20]
  return(result);
 8007676:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007678:	2b00      	cmp	r3, #0
 800767a:	d17e      	bne.n	800777a <osThreadNew+0x11a>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d07b      	beq.n	800777a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007682:	2380      	movs	r3, #128	; 0x80
 8007684:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007686:	2318      	movs	r3, #24
 8007688:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800768a:	2300      	movs	r3, #0
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800768e:	f04f 33ff 	mov.w	r3, #4294967295
 8007692:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d045      	beq.n	8007726 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <osThreadNew+0x48>
        name = attr->name;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d008      	beq.n	80076ce <osThreadNew+0x6e>
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	2b38      	cmp	r3, #56	; 0x38
 80076c0:	d805      	bhi.n	80076ce <osThreadNew+0x6e>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <osThreadNew+0x72>
        return (NULL);
 80076ce:	2300      	movs	r3, #0
 80076d0:	e054      	b.n	800777c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d003      	beq.n	80076e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	089b      	lsrs	r3, r3, #2
 80076e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00e      	beq.n	8007708 <osThreadNew+0xa8>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	2bbb      	cmp	r3, #187	; 0xbb
 80076f0:	d90a      	bls.n	8007708 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d006      	beq.n	8007708 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <osThreadNew+0xa8>
        mem = 1;
 8007702:	2301      	movs	r3, #1
 8007704:	61bb      	str	r3, [r7, #24]
 8007706:	e010      	b.n	800772a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10c      	bne.n	800772a <osThreadNew+0xca>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d108      	bne.n	800772a <osThreadNew+0xca>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d104      	bne.n	800772a <osThreadNew+0xca>
          mem = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	61bb      	str	r3, [r7, #24]
 8007724:	e001      	b.n	800772a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007726:	2300      	movs	r3, #0
 8007728:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d110      	bne.n	8007752 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007738:	9202      	str	r2, [sp, #8]
 800773a:	9301      	str	r3, [sp, #4]
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	6a3a      	ldr	r2, [r7, #32]
 8007744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 fff6 	bl	8008738 <xTaskCreateStatic>
 800774c:	4603      	mov	r3, r0
 800774e:	613b      	str	r3, [r7, #16]
 8007750:	e013      	b.n	800777a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d110      	bne.n	800777a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	b29a      	uxth	r2, r3
 800775c:	f107 0310 	add.w	r3, r7, #16
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f001 f841 	bl	80087f2 <xTaskCreate>
 8007770:	4603      	mov	r3, r0
 8007772:	2b01      	cmp	r3, #1
 8007774:	d001      	beq.n	800777a <osThreadNew+0x11a>
            hTask = NULL;
 8007776:	2300      	movs	r3, #0
 8007778:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800777a:	693b      	ldr	r3, [r7, #16]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3728      	adds	r7, #40	; 0x28
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800778c:	f3ef 8305 	mrs	r3, IPSR
 8007790:	60bb      	str	r3, [r7, #8]
  return(result);
 8007792:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <osDelay+0x1c>
    stat = osErrorISR;
 8007798:	f06f 0305 	mvn.w	r3, #5
 800779c:	60fb      	str	r3, [r7, #12]
 800779e:	e007      	b.n	80077b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 f9ee 	bl	8008b8c <vTaskDelay>
    }
  }

  return (stat);
 80077b0:	68fb      	ldr	r3, [r7, #12]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4a07      	ldr	r2, [pc, #28]	; (80077e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80077cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	4a06      	ldr	r2, [pc, #24]	; (80077ec <vApplicationGetIdleTaskMemory+0x30>)
 80077d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2280      	movs	r2, #128	; 0x80
 80077d8:	601a      	str	r2, [r3, #0]
}
 80077da:	bf00      	nop
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	2000124c 	.word	0x2000124c
 80077ec:	20001308 	.word	0x20001308

080077f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4a07      	ldr	r2, [pc, #28]	; (800781c <vApplicationGetTimerTaskMemory+0x2c>)
 8007800:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	4a06      	ldr	r2, [pc, #24]	; (8007820 <vApplicationGetTimerTaskMemory+0x30>)
 8007806:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800780e:	601a      	str	r2, [r3, #0]
}
 8007810:	bf00      	nop
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	20001508 	.word	0x20001508
 8007820:	200015c4 	.word	0x200015c4

08007824 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f103 0208 	add.w	r2, r3, #8
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f04f 32ff 	mov.w	r2, #4294967295
 800783c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f103 0208 	add.w	r2, r3, #8
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f103 0208 	add.w	r2, r3, #8
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	601a      	str	r2, [r3, #0]
}
 80078ba:	bf00      	nop
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078c6:	b480      	push	{r7}
 80078c8:	b085      	sub	sp, #20
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078dc:	d103      	bne.n	80078e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	e00c      	b.n	8007900 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3308      	adds	r3, #8
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	e002      	b.n	80078f4 <vListInsert+0x2e>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d2f6      	bcs.n	80078ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	601a      	str	r2, [r3, #0]
}
 800792c:	bf00      	nop
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	6892      	ldr	r2, [r2, #8]
 800794e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6852      	ldr	r2, [r2, #4]
 8007958:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	429a      	cmp	r2, r3
 8007962:	d103      	bne.n	800796c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	1e5a      	subs	r2, r3, #1
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80079b6:	f002 fbd5 	bl	800a164 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c2:	68f9      	ldr	r1, [r7, #12]
 80079c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079c6:	fb01 f303 	mul.w	r3, r1, r3
 80079ca:	441a      	add	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e6:	3b01      	subs	r3, #1
 80079e8:	68f9      	ldr	r1, [r7, #12]
 80079ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079ec:	fb01 f303 	mul.w	r3, r1, r3
 80079f0:	441a      	add	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	22ff      	movs	r2, #255	; 0xff
 80079fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	22ff      	movs	r2, #255	; 0xff
 8007a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d114      	bne.n	8007a36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d01a      	beq.n	8007a4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3310      	adds	r3, #16
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f001 fb85 	bl	8009128 <xTaskRemoveFromEventList>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d012      	beq.n	8007a4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a24:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <xQueueGenericReset+0xcc>)
 8007a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	e009      	b.n	8007a4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3310      	adds	r3, #16
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7ff fef2 	bl	8007824 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3324      	adds	r3, #36	; 0x24
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7ff feed 	bl	8007824 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a4a:	f002 fbbb 	bl	800a1c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a4e:	2301      	movs	r3, #1
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	e000ed04 	.word	0xe000ed04

08007a5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08e      	sub	sp, #56	; 0x38
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
 8007a68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10a      	bne.n	8007a86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a82:	bf00      	nop
 8007a84:	e7fe      	b.n	8007a84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <xQueueGenericCreateStatic+0x52>
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <xQueueGenericCreateStatic+0x56>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <xQueueGenericCreateStatic+0x58>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10a      	bne.n	8007ace <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	623b      	str	r3, [r7, #32]
}
 8007aca:	bf00      	nop
 8007acc:	e7fe      	b.n	8007acc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d102      	bne.n	8007ada <xQueueGenericCreateStatic+0x7e>
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <xQueueGenericCreateStatic+0x82>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e000      	b.n	8007ae0 <xQueueGenericCreateStatic+0x84>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10a      	bne.n	8007afa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	61fb      	str	r3, [r7, #28]
}
 8007af6:	bf00      	nop
 8007af8:	e7fe      	b.n	8007af8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007afa:	2350      	movs	r3, #80	; 0x50
 8007afc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b50      	cmp	r3, #80	; 0x50
 8007b02:	d00a      	beq.n	8007b1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	61bb      	str	r3, [r7, #24]
}
 8007b16:	bf00      	nop
 8007b18:	e7fe      	b.n	8007b18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00d      	beq.n	8007b42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	4613      	mov	r3, r2
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	68b9      	ldr	r1, [r7, #8]
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 f83f 	bl	8007bc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3730      	adds	r7, #48	; 0x30
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08a      	sub	sp, #40	; 0x28
 8007b50:	af02      	add	r7, sp, #8
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	4613      	mov	r3, r2
 8007b58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10a      	bne.n	8007b76 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	613b      	str	r3, [r7, #16]
}
 8007b72:	bf00      	nop
 8007b74:	e7fe      	b.n	8007b74 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	fb02 f303 	mul.w	r3, r2, r3
 8007b7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	3350      	adds	r3, #80	; 0x50
 8007b84:	4618      	mov	r0, r3
 8007b86:	f002 fc0f 	bl	800a3a8 <pvPortMalloc>
 8007b8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d011      	beq.n	8007bb6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	3350      	adds	r3, #80	; 0x50
 8007b9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ba4:	79fa      	ldrb	r2, [r7, #7]
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	4613      	mov	r3, r2
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	68b9      	ldr	r1, [r7, #8]
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 f805 	bl	8007bc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bb6:	69bb      	ldr	r3, [r7, #24]
	}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3720      	adds	r7, #32
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d103      	bne.n	8007bdc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	e002      	b.n	8007be2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007bee:	2101      	movs	r1, #1
 8007bf0:	69b8      	ldr	r0, [r7, #24]
 8007bf2:	f7ff fecb 	bl	800798c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	78fa      	ldrb	r2, [r7, #3]
 8007bfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08e      	sub	sp, #56	; 0x38
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c16:	2300      	movs	r3, #0
 8007c18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10a      	bne.n	8007c3a <xQueueGenericSend+0x32>
	__asm volatile
 8007c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c36:	bf00      	nop
 8007c38:	e7fe      	b.n	8007c38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d103      	bne.n	8007c48 <xQueueGenericSend+0x40>
 8007c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <xQueueGenericSend+0x44>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e000      	b.n	8007c4e <xQueueGenericSend+0x46>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10a      	bne.n	8007c68 <xQueueGenericSend+0x60>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c64:	bf00      	nop
 8007c66:	e7fe      	b.n	8007c66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d103      	bne.n	8007c76 <xQueueGenericSend+0x6e>
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d101      	bne.n	8007c7a <xQueueGenericSend+0x72>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <xQueueGenericSend+0x74>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <xQueueGenericSend+0x8e>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	623b      	str	r3, [r7, #32]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c96:	f001 fc09 	bl	80094ac <xTaskGetSchedulerState>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d102      	bne.n	8007ca6 <xQueueGenericSend+0x9e>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <xQueueGenericSend+0xa2>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e000      	b.n	8007cac <xQueueGenericSend+0xa4>
 8007caa:	2300      	movs	r3, #0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	61fb      	str	r3, [r7, #28]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cc6:	f002 fa4d 	bl	800a164 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d302      	bcc.n	8007cdc <xQueueGenericSend+0xd4>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d129      	bne.n	8007d30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	68b9      	ldr	r1, [r7, #8]
 8007ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ce2:	f000 fbbb 	bl	800845c <prvCopyDataToQueue>
 8007ce6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d010      	beq.n	8007d12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	3324      	adds	r3, #36	; 0x24
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f001 fa17 	bl	8009128 <xTaskRemoveFromEventList>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d013      	beq.n	8007d28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d00:	4b3f      	ldr	r3, [pc, #252]	; (8007e00 <xQueueGenericSend+0x1f8>)
 8007d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	e00a      	b.n	8007d28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d007      	beq.n	8007d28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d18:	4b39      	ldr	r3, [pc, #228]	; (8007e00 <xQueueGenericSend+0x1f8>)
 8007d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d28:	f002 fa4c 	bl	800a1c4 <vPortExitCritical>
				return pdPASS;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e063      	b.n	8007df8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d103      	bne.n	8007d3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d36:	f002 fa45 	bl	800a1c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	e05c      	b.n	8007df8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d106      	bne.n	8007d52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d44:	f107 0314 	add.w	r3, r7, #20
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f001 fa51 	bl	80091f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d52:	f002 fa37 	bl	800a1c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d56:	f000 ffbd 	bl	8008cd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d5a:	f002 fa03 	bl	800a164 <vPortEnterCritical>
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d64:	b25b      	sxtb	r3, r3
 8007d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6a:	d103      	bne.n	8007d74 <xQueueGenericSend+0x16c>
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d7a:	b25b      	sxtb	r3, r3
 8007d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d80:	d103      	bne.n	8007d8a <xQueueGenericSend+0x182>
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d8a:	f002 fa1b 	bl	800a1c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d8e:	1d3a      	adds	r2, r7, #4
 8007d90:	f107 0314 	add.w	r3, r7, #20
 8007d94:	4611      	mov	r1, r2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f001 fa40 	bl	800921c <xTaskCheckForTimeOut>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d124      	bne.n	8007dec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007da2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007da4:	f000 fc52 	bl	800864c <prvIsQueueFull>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d018      	beq.n	8007de0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	3310      	adds	r3, #16
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	4611      	mov	r1, r2
 8007db6:	4618      	mov	r0, r3
 8007db8:	f001 f966 	bl	8009088 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dbe:	f000 fbdd 	bl	800857c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007dc2:	f000 ff95 	bl	8008cf0 <xTaskResumeAll>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f47f af7c 	bne.w	8007cc6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007dce:	4b0c      	ldr	r3, [pc, #48]	; (8007e00 <xQueueGenericSend+0x1f8>)
 8007dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	e772      	b.n	8007cc6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007de2:	f000 fbcb 	bl	800857c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007de6:	f000 ff83 	bl	8008cf0 <xTaskResumeAll>
 8007dea:	e76c      	b.n	8007cc6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dee:	f000 fbc5 	bl	800857c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007df2:	f000 ff7d 	bl	8008cf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007df6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3738      	adds	r7, #56	; 0x38
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b090      	sub	sp, #64	; 0x40
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d103      	bne.n	8007e40 <xQueueGenericSendFromISR+0x3c>
 8007e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <xQueueGenericSendFromISR+0x40>
 8007e40:	2301      	movs	r3, #1
 8007e42:	e000      	b.n	8007e46 <xQueueGenericSendFromISR+0x42>
 8007e44:	2300      	movs	r3, #0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10a      	bne.n	8007e60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e5c:	bf00      	nop
 8007e5e:	e7fe      	b.n	8007e5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d103      	bne.n	8007e6e <xQueueGenericSendFromISR+0x6a>
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d101      	bne.n	8007e72 <xQueueGenericSendFromISR+0x6e>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e000      	b.n	8007e74 <xQueueGenericSendFromISR+0x70>
 8007e72:	2300      	movs	r3, #0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10a      	bne.n	8007e8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	623b      	str	r3, [r7, #32]
}
 8007e8a:	bf00      	nop
 8007e8c:	e7fe      	b.n	8007e8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e8e:	f002 fa4b 	bl	800a328 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e92:	f3ef 8211 	mrs	r2, BASEPRI
 8007e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	61fa      	str	r2, [r7, #28]
 8007ea8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007eaa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007eac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d302      	bcc.n	8007ec0 <xQueueGenericSendFromISR+0xbc>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d12f      	bne.n	8007f20 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ece:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	68b9      	ldr	r1, [r7, #8]
 8007ed4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ed6:	f000 fac1 	bl	800845c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007eda:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee2:	d112      	bne.n	8007f0a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d016      	beq.n	8007f1a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eee:	3324      	adds	r3, #36	; 0x24
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f001 f919 	bl	8009128 <xTaskRemoveFromEventList>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00e      	beq.n	8007f1a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00b      	beq.n	8007f1a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	e007      	b.n	8007f1a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f0e:	3301      	adds	r3, #1
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	b25a      	sxtb	r2, r3
 8007f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007f1e:	e001      	b.n	8007f24 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f20:	2300      	movs	r3, #0
 8007f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f26:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3740      	adds	r7, #64	; 0x40
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b08e      	sub	sp, #56	; 0x38
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10a      	bne.n	8007f64 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	623b      	str	r3, [r7, #32]
}
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00a      	beq.n	8007f82 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	61fb      	str	r3, [r7, #28]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d103      	bne.n	8007f92 <xQueueGiveFromISR+0x58>
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <xQueueGiveFromISR+0x5c>
 8007f92:	2301      	movs	r3, #1
 8007f94:	e000      	b.n	8007f98 <xQueueGiveFromISR+0x5e>
 8007f96:	2300      	movs	r3, #0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10a      	bne.n	8007fb2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	61bb      	str	r3, [r7, #24]
}
 8007fae:	bf00      	nop
 8007fb0:	e7fe      	b.n	8007fb0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fb2:	f002 f9b9 	bl	800a328 <vPortValidateInterruptPriority>
	__asm volatile
 8007fb6:	f3ef 8211 	mrs	r2, BASEPRI
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	617a      	str	r2, [r7, #20]
 8007fcc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007fce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d22b      	bcs.n	800803a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ff4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffc:	d112      	bne.n	8008024 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	2b00      	cmp	r3, #0
 8008004:	d016      	beq.n	8008034 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	3324      	adds	r3, #36	; 0x24
 800800a:	4618      	mov	r0, r3
 800800c:	f001 f88c 	bl	8009128 <xTaskRemoveFromEventList>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00e      	beq.n	8008034 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00b      	beq.n	8008034 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2201      	movs	r2, #1
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	e007      	b.n	8008034 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008028:	3301      	adds	r3, #1
 800802a:	b2db      	uxtb	r3, r3
 800802c:	b25a      	sxtb	r2, r3
 800802e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008034:	2301      	movs	r3, #1
 8008036:	637b      	str	r3, [r7, #52]	; 0x34
 8008038:	e001      	b.n	800803e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800803a:	2300      	movs	r3, #0
 800803c:	637b      	str	r3, [r7, #52]	; 0x34
 800803e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008040:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f383 8811 	msr	BASEPRI, r3
}
 8008048:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800804a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800804c:	4618      	mov	r0, r3
 800804e:	3738      	adds	r7, #56	; 0x38
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b08c      	sub	sp, #48	; 0x30
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008060:	2300      	movs	r3, #0
 8008062:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10a      	bne.n	8008084 <xQueueReceive+0x30>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	623b      	str	r3, [r7, #32]
}
 8008080:	bf00      	nop
 8008082:	e7fe      	b.n	8008082 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d103      	bne.n	8008092 <xQueueReceive+0x3e>
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <xQueueReceive+0x42>
 8008092:	2301      	movs	r3, #1
 8008094:	e000      	b.n	8008098 <xQueueReceive+0x44>
 8008096:	2300      	movs	r3, #0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10a      	bne.n	80080b2 <xQueueReceive+0x5e>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	61fb      	str	r3, [r7, #28]
}
 80080ae:	bf00      	nop
 80080b0:	e7fe      	b.n	80080b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080b2:	f001 f9fb 	bl	80094ac <xTaskGetSchedulerState>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d102      	bne.n	80080c2 <xQueueReceive+0x6e>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <xQueueReceive+0x72>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e000      	b.n	80080c8 <xQueueReceive+0x74>
 80080c6:	2300      	movs	r3, #0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10a      	bne.n	80080e2 <xQueueReceive+0x8e>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	61bb      	str	r3, [r7, #24]
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080e2:	f002 f83f 	bl	800a164 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d01f      	beq.n	8008132 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080f2:	68b9      	ldr	r1, [r7, #8]
 80080f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080f6:	f000 fa1b 	bl	8008530 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	1e5a      	subs	r2, r3, #1
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00f      	beq.n	800812a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800810a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810c:	3310      	adds	r3, #16
 800810e:	4618      	mov	r0, r3
 8008110:	f001 f80a 	bl	8009128 <xTaskRemoveFromEventList>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d007      	beq.n	800812a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800811a:	4b3d      	ldr	r3, [pc, #244]	; (8008210 <xQueueReceive+0x1bc>)
 800811c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800812a:	f002 f84b 	bl	800a1c4 <vPortExitCritical>
				return pdPASS;
 800812e:	2301      	movs	r3, #1
 8008130:	e069      	b.n	8008206 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d103      	bne.n	8008140 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008138:	f002 f844 	bl	800a1c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800813c:	2300      	movs	r3, #0
 800813e:	e062      	b.n	8008206 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008146:	f107 0310 	add.w	r3, r7, #16
 800814a:	4618      	mov	r0, r3
 800814c:	f001 f850 	bl	80091f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008150:	2301      	movs	r3, #1
 8008152:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008154:	f002 f836 	bl	800a1c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008158:	f000 fdbc 	bl	8008cd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800815c:	f002 f802 	bl	800a164 <vPortEnterCritical>
 8008160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008166:	b25b      	sxtb	r3, r3
 8008168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816c:	d103      	bne.n	8008176 <xQueueReceive+0x122>
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800817c:	b25b      	sxtb	r3, r3
 800817e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008182:	d103      	bne.n	800818c <xQueueReceive+0x138>
 8008184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008186:	2200      	movs	r2, #0
 8008188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800818c:	f002 f81a 	bl	800a1c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008190:	1d3a      	adds	r2, r7, #4
 8008192:	f107 0310 	add.w	r3, r7, #16
 8008196:	4611      	mov	r1, r2
 8008198:	4618      	mov	r0, r3
 800819a:	f001 f83f 	bl	800921c <xTaskCheckForTimeOut>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d123      	bne.n	80081ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081a6:	f000 fa3b 	bl	8008620 <prvIsQueueEmpty>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d017      	beq.n	80081e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	3324      	adds	r3, #36	; 0x24
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	4611      	mov	r1, r2
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 ff65 	bl	8009088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081c0:	f000 f9dc 	bl	800857c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081c4:	f000 fd94 	bl	8008cf0 <xTaskResumeAll>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d189      	bne.n	80080e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80081ce:	4b10      	ldr	r3, [pc, #64]	; (8008210 <xQueueReceive+0x1bc>)
 80081d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	e780      	b.n	80080e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081e2:	f000 f9cb 	bl	800857c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081e6:	f000 fd83 	bl	8008cf0 <xTaskResumeAll>
 80081ea:	e77a      	b.n	80080e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ee:	f000 f9c5 	bl	800857c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081f2:	f000 fd7d 	bl	8008cf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081f8:	f000 fa12 	bl	8008620 <prvIsQueueEmpty>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f43f af6f 	beq.w	80080e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008204:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008206:	4618      	mov	r0, r3
 8008208:	3730      	adds	r7, #48	; 0x30
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	e000ed04 	.word	0xe000ed04

08008214 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b08e      	sub	sp, #56	; 0x38
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800821e:	2300      	movs	r3, #0
 8008220:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008226:	2300      	movs	r3, #0
 8008228:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800822a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10a      	bne.n	8008246 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	623b      	str	r3, [r7, #32]
}
 8008242:	bf00      	nop
 8008244:	e7fe      	b.n	8008244 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00a      	beq.n	8008264 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	61fb      	str	r3, [r7, #28]
}
 8008260:	bf00      	nop
 8008262:	e7fe      	b.n	8008262 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008264:	f001 f922 	bl	80094ac <xTaskGetSchedulerState>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d102      	bne.n	8008274 <xQueueSemaphoreTake+0x60>
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <xQueueSemaphoreTake+0x64>
 8008274:	2301      	movs	r3, #1
 8008276:	e000      	b.n	800827a <xQueueSemaphoreTake+0x66>
 8008278:	2300      	movs	r3, #0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	61bb      	str	r3, [r7, #24]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008294:	f001 ff66 	bl	800a164 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d024      	beq.n	80082ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	1e5a      	subs	r2, r3, #1
 80082a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d104      	bne.n	80082be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80082b4:	f001 fa70 	bl	8009798 <pvTaskIncrementMutexHeldCount>
 80082b8:	4602      	mov	r2, r0
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00f      	beq.n	80082e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c8:	3310      	adds	r3, #16
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 ff2c 	bl	8009128 <xTaskRemoveFromEventList>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d007      	beq.n	80082e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082d6:	4b54      	ldr	r3, [pc, #336]	; (8008428 <xQueueSemaphoreTake+0x214>)
 80082d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082e6:	f001 ff6d 	bl	800a1c4 <vPortExitCritical>
				return pdPASS;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e097      	b.n	800841e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d111      	bne.n	8008318 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80082f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00a      	beq.n	8008310 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80082fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fe:	f383 8811 	msr	BASEPRI, r3
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	617b      	str	r3, [r7, #20]
}
 800830c:	bf00      	nop
 800830e:	e7fe      	b.n	800830e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008310:	f001 ff58 	bl	800a1c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008314:	2300      	movs	r3, #0
 8008316:	e082      	b.n	800841e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831a:	2b00      	cmp	r3, #0
 800831c:	d106      	bne.n	800832c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800831e:	f107 030c 	add.w	r3, r7, #12
 8008322:	4618      	mov	r0, r3
 8008324:	f000 ff64 	bl	80091f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008328:	2301      	movs	r3, #1
 800832a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800832c:	f001 ff4a 	bl	800a1c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008330:	f000 fcd0 	bl	8008cd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008334:	f001 ff16 	bl	800a164 <vPortEnterCritical>
 8008338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800833e:	b25b      	sxtb	r3, r3
 8008340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008344:	d103      	bne.n	800834e <xQueueSemaphoreTake+0x13a>
 8008346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008354:	b25b      	sxtb	r3, r3
 8008356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835a:	d103      	bne.n	8008364 <xQueueSemaphoreTake+0x150>
 800835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008364:	f001 ff2e 	bl	800a1c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008368:	463a      	mov	r2, r7
 800836a:	f107 030c 	add.w	r3, r7, #12
 800836e:	4611      	mov	r1, r2
 8008370:	4618      	mov	r0, r3
 8008372:	f000 ff53 	bl	800921c <xTaskCheckForTimeOut>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d132      	bne.n	80083e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800837c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800837e:	f000 f94f 	bl	8008620 <prvIsQueueEmpty>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d026      	beq.n	80083d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d109      	bne.n	80083a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008390:	f001 fee8 	bl	800a164 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	4618      	mov	r0, r3
 800839a:	f001 f8a5 	bl	80094e8 <xTaskPriorityInherit>
 800839e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80083a0:	f001 ff10 	bl	800a1c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a6:	3324      	adds	r3, #36	; 0x24
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	4611      	mov	r1, r2
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 fe6b 	bl	8009088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083b4:	f000 f8e2 	bl	800857c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083b8:	f000 fc9a 	bl	8008cf0 <xTaskResumeAll>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f47f af68 	bne.w	8008294 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80083c4:	4b18      	ldr	r3, [pc, #96]	; (8008428 <xQueueSemaphoreTake+0x214>)
 80083c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	e75e      	b.n	8008294 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80083d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083d8:	f000 f8d0 	bl	800857c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083dc:	f000 fc88 	bl	8008cf0 <xTaskResumeAll>
 80083e0:	e758      	b.n	8008294 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80083e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083e4:	f000 f8ca 	bl	800857c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083e8:	f000 fc82 	bl	8008cf0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083ee:	f000 f917 	bl	8008620 <prvIsQueueEmpty>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f43f af4d 	beq.w	8008294 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00d      	beq.n	800841c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008400:	f001 feb0 	bl	800a164 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008404:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008406:	f000 f811 	bl	800842c <prvGetDisinheritPriorityAfterTimeout>
 800840a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008412:	4618      	mov	r0, r3
 8008414:	f001 f93e 	bl	8009694 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008418:	f001 fed4 	bl	800a1c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800841c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800841e:	4618      	mov	r0, r3
 8008420:	3738      	adds	r7, #56	; 0x38
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	e000ed04 	.word	0xe000ed04

0800842c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	2b00      	cmp	r3, #0
 800843a:	d006      	beq.n	800844a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	e001      	b.n	800844e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800844a:	2300      	movs	r3, #0
 800844c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800844e:	68fb      	ldr	r3, [r7, #12]
	}
 8008450:	4618      	mov	r0, r3
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008468:	2300      	movs	r3, #0
 800846a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008470:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10d      	bne.n	8008496 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d14d      	bne.n	800851e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	4618      	mov	r0, r3
 8008488:	f001 f896 	bl	80095b8 <xTaskPriorityDisinherit>
 800848c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	609a      	str	r2, [r3, #8]
 8008494:	e043      	b.n	800851e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d119      	bne.n	80084d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6858      	ldr	r0, [r3, #4]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a4:	461a      	mov	r2, r3
 80084a6:	68b9      	ldr	r1, [r7, #8]
 80084a8:	f006 f8d4 	bl	800e654 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b4:	441a      	add	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d32b      	bcc.n	800851e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	605a      	str	r2, [r3, #4]
 80084ce:	e026      	b.n	800851e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	68d8      	ldr	r0, [r3, #12]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d8:	461a      	mov	r2, r3
 80084da:	68b9      	ldr	r1, [r7, #8]
 80084dc:	f006 f8ba 	bl	800e654 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	68da      	ldr	r2, [r3, #12]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e8:	425b      	negs	r3, r3
 80084ea:	441a      	add	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	68da      	ldr	r2, [r3, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d207      	bcs.n	800850c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	689a      	ldr	r2, [r3, #8]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008504:	425b      	negs	r3, r3
 8008506:	441a      	add	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b02      	cmp	r3, #2
 8008510:	d105      	bne.n	800851e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	3b01      	subs	r3, #1
 800851c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	1c5a      	adds	r2, r3, #1
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008526:	697b      	ldr	r3, [r7, #20]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853e:	2b00      	cmp	r3, #0
 8008540:	d018      	beq.n	8008574 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68da      	ldr	r2, [r3, #12]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	441a      	add	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68da      	ldr	r2, [r3, #12]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	429a      	cmp	r2, r3
 800855a:	d303      	bcc.n	8008564 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	68d9      	ldr	r1, [r3, #12]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856c:	461a      	mov	r2, r3
 800856e:	6838      	ldr	r0, [r7, #0]
 8008570:	f006 f870 	bl	800e654 <memcpy>
	}
}
 8008574:	bf00      	nop
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008584:	f001 fdee 	bl	800a164 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800858e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008590:	e011      	b.n	80085b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008596:	2b00      	cmp	r3, #0
 8008598:	d012      	beq.n	80085c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3324      	adds	r3, #36	; 0x24
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 fdc2 	bl	8009128 <xTaskRemoveFromEventList>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085aa:	f000 fe99 	bl	80092e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085ae:	7bfb      	ldrb	r3, [r7, #15]
 80085b0:	3b01      	subs	r3, #1
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	dce9      	bgt.n	8008592 <prvUnlockQueue+0x16>
 80085be:	e000      	b.n	80085c2 <prvUnlockQueue+0x46>
					break;
 80085c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	22ff      	movs	r2, #255	; 0xff
 80085c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80085ca:	f001 fdfb 	bl	800a1c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80085ce:	f001 fdc9 	bl	800a164 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085da:	e011      	b.n	8008600 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d012      	beq.n	800860a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	3310      	adds	r3, #16
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 fd9d 	bl	8009128 <xTaskRemoveFromEventList>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80085f4:	f000 fe74 	bl	80092e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	3b01      	subs	r3, #1
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008604:	2b00      	cmp	r3, #0
 8008606:	dce9      	bgt.n	80085dc <prvUnlockQueue+0x60>
 8008608:	e000      	b.n	800860c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800860a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	22ff      	movs	r2, #255	; 0xff
 8008610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008614:	f001 fdd6 	bl	800a1c4 <vPortExitCritical>
}
 8008618:	bf00      	nop
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008628:	f001 fd9c 	bl	800a164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008630:	2b00      	cmp	r3, #0
 8008632:	d102      	bne.n	800863a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008634:	2301      	movs	r3, #1
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	e001      	b.n	800863e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800863a:	2300      	movs	r3, #0
 800863c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800863e:	f001 fdc1 	bl	800a1c4 <vPortExitCritical>

	return xReturn;
 8008642:	68fb      	ldr	r3, [r7, #12]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008654:	f001 fd86 	bl	800a164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008660:	429a      	cmp	r2, r3
 8008662:	d102      	bne.n	800866a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008664:	2301      	movs	r3, #1
 8008666:	60fb      	str	r3, [r7, #12]
 8008668:	e001      	b.n	800866e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800866a:	2300      	movs	r3, #0
 800866c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800866e:	f001 fda9 	bl	800a1c4 <vPortExitCritical>

	return xReturn;
 8008672:	68fb      	ldr	r3, [r7, #12]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
 800868a:	e014      	b.n	80086b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800868c:	4a0f      	ldr	r2, [pc, #60]	; (80086cc <vQueueAddToRegistry+0x50>)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10b      	bne.n	80086b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008698:	490c      	ldr	r1, [pc, #48]	; (80086cc <vQueueAddToRegistry+0x50>)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086a2:	4a0a      	ldr	r2, [pc, #40]	; (80086cc <vQueueAddToRegistry+0x50>)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	4413      	add	r3, r2
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80086ae:	e006      	b.n	80086be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3301      	adds	r3, #1
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2b07      	cmp	r3, #7
 80086ba:	d9e7      	bls.n	800868c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80086bc:	bf00      	nop
 80086be:	bf00      	nop
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	200019c4 	.word	0x200019c4

080086d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80086e0:	f001 fd40 	bl	800a164 <vPortEnterCritical>
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086ea:	b25b      	sxtb	r3, r3
 80086ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f0:	d103      	bne.n	80086fa <vQueueWaitForMessageRestricted+0x2a>
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008700:	b25b      	sxtb	r3, r3
 8008702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008706:	d103      	bne.n	8008710 <vQueueWaitForMessageRestricted+0x40>
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008710:	f001 fd58 	bl	800a1c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008718:	2b00      	cmp	r3, #0
 800871a:	d106      	bne.n	800872a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	3324      	adds	r3, #36	; 0x24
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	68b9      	ldr	r1, [r7, #8]
 8008724:	4618      	mov	r0, r3
 8008726:	f000 fcd3 	bl	80090d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800872a:	6978      	ldr	r0, [r7, #20]
 800872c:	f7ff ff26 	bl	800857c <prvUnlockQueue>
	}
 8008730:	bf00      	nop
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008738:	b580      	push	{r7, lr}
 800873a:	b08e      	sub	sp, #56	; 0x38
 800873c:	af04      	add	r7, sp, #16
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10a      	bne.n	8008762 <xTaskCreateStatic+0x2a>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	623b      	str	r3, [r7, #32]
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10a      	bne.n	800877e <xTaskCreateStatic+0x46>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	61fb      	str	r3, [r7, #28]
}
 800877a:	bf00      	nop
 800877c:	e7fe      	b.n	800877c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800877e:	23bc      	movs	r3, #188	; 0xbc
 8008780:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	2bbc      	cmp	r3, #188	; 0xbc
 8008786:	d00a      	beq.n	800879e <xTaskCreateStatic+0x66>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	61bb      	str	r3, [r7, #24]
}
 800879a:	bf00      	nop
 800879c:	e7fe      	b.n	800879c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800879e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d01e      	beq.n	80087e4 <xTaskCreateStatic+0xac>
 80087a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d01b      	beq.n	80087e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	2202      	movs	r2, #2
 80087ba:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087be:	2300      	movs	r3, #0
 80087c0:	9303      	str	r3, [sp, #12]
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	9302      	str	r3, [sp, #8]
 80087c6:	f107 0314 	add.w	r3, r7, #20
 80087ca:	9301      	str	r3, [sp, #4]
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	68b9      	ldr	r1, [r7, #8]
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f000 f850 	bl	800887c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087de:	f000 f8f3 	bl	80089c8 <prvAddNewTaskToReadyList>
 80087e2:	e001      	b.n	80087e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80087e4:	2300      	movs	r3, #0
 80087e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80087e8:	697b      	ldr	r3, [r7, #20]
	}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3728      	adds	r7, #40	; 0x28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b08c      	sub	sp, #48	; 0x30
 80087f6:	af04      	add	r7, sp, #16
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	603b      	str	r3, [r7, #0]
 80087fe:	4613      	mov	r3, r2
 8008800:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008802:	88fb      	ldrh	r3, [r7, #6]
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4618      	mov	r0, r3
 8008808:	f001 fdce 	bl	800a3a8 <pvPortMalloc>
 800880c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00e      	beq.n	8008832 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008814:	20bc      	movs	r0, #188	; 0xbc
 8008816:	f001 fdc7 	bl	800a3a8 <pvPortMalloc>
 800881a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	631a      	str	r2, [r3, #48]	; 0x30
 8008828:	e005      	b.n	8008836 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800882a:	6978      	ldr	r0, [r7, #20]
 800882c:	f001 fe88 	bl	800a540 <vPortFree>
 8008830:	e001      	b.n	8008836 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008832:	2300      	movs	r3, #0
 8008834:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d017      	beq.n	800886c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008844:	88fa      	ldrh	r2, [r7, #6]
 8008846:	2300      	movs	r3, #0
 8008848:	9303      	str	r3, [sp, #12]
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	9302      	str	r3, [sp, #8]
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008850:	9301      	str	r3, [sp, #4]
 8008852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	68b9      	ldr	r1, [r7, #8]
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 f80e 	bl	800887c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008860:	69f8      	ldr	r0, [r7, #28]
 8008862:	f000 f8b1 	bl	80089c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008866:	2301      	movs	r3, #1
 8008868:	61bb      	str	r3, [r7, #24]
 800886a:	e002      	b.n	8008872 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800886c:	f04f 33ff 	mov.w	r3, #4294967295
 8008870:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008872:	69bb      	ldr	r3, [r7, #24]
	}
 8008874:	4618      	mov	r0, r3
 8008876:	3720      	adds	r7, #32
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
 8008888:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	461a      	mov	r2, r3
 8008894:	21a5      	movs	r1, #165	; 0xa5
 8008896:	f005 feeb 	bl	800e670 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80088a4:	3b01      	subs	r3, #1
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	f023 0307 	bic.w	r3, r3, #7
 80088b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	f003 0307 	and.w	r3, r3, #7
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00a      	beq.n	80088d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	617b      	str	r3, [r7, #20]
}
 80088d0:	bf00      	nop
 80088d2:	e7fe      	b.n	80088d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d01f      	beq.n	800891a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088da:	2300      	movs	r3, #0
 80088dc:	61fb      	str	r3, [r7, #28]
 80088de:	e012      	b.n	8008906 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	4413      	add	r3, r2
 80088e6:	7819      	ldrb	r1, [r3, #0]
 80088e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	4413      	add	r3, r2
 80088ee:	3334      	adds	r3, #52	; 0x34
 80088f0:	460a      	mov	r2, r1
 80088f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	4413      	add	r3, r2
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d006      	beq.n	800890e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	3301      	adds	r3, #1
 8008904:	61fb      	str	r3, [r7, #28]
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	2b0f      	cmp	r3, #15
 800890a:	d9e9      	bls.n	80088e0 <prvInitialiseNewTask+0x64>
 800890c:	e000      	b.n	8008910 <prvInitialiseNewTask+0x94>
			{
				break;
 800890e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008918:	e003      	b.n	8008922 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	2b37      	cmp	r3, #55	; 0x37
 8008926:	d901      	bls.n	800892c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008928:	2337      	movs	r3, #55	; 0x37
 800892a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800892c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008930:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008936:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	2200      	movs	r2, #0
 800893c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	3304      	adds	r3, #4
 8008942:	4618      	mov	r0, r3
 8008944:	f7fe ff8e 	bl	8007864 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894a:	3318      	adds	r3, #24
 800894c:	4618      	mov	r0, r3
 800894e:	f7fe ff89 	bl	8007864 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008956:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800895e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008960:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008966:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896a:	2200      	movs	r2, #0
 800896c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	2200      	movs	r2, #0
 8008974:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	3354      	adds	r3, #84	; 0x54
 800897c:	2260      	movs	r2, #96	; 0x60
 800897e:	2100      	movs	r1, #0
 8008980:	4618      	mov	r0, r3
 8008982:	f005 fe75 	bl	800e670 <memset>
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	4a0c      	ldr	r2, [pc, #48]	; (80089bc <prvInitialiseNewTask+0x140>)
 800898a:	659a      	str	r2, [r3, #88]	; 0x58
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	4a0c      	ldr	r2, [pc, #48]	; (80089c0 <prvInitialiseNewTask+0x144>)
 8008990:	65da      	str	r2, [r3, #92]	; 0x5c
 8008992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008994:	4a0b      	ldr	r2, [pc, #44]	; (80089c4 <prvInitialiseNewTask+0x148>)
 8008996:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	68f9      	ldr	r1, [r7, #12]
 800899c:	69b8      	ldr	r0, [r7, #24]
 800899e:	f001 fab1 	bl	8009f04 <pxPortInitialiseStack>
 80089a2:	4602      	mov	r2, r0
 80089a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80089a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d002      	beq.n	80089b4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80089ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089b4:	bf00      	nop
 80089b6:	3720      	adds	r7, #32
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	080134e0 	.word	0x080134e0
 80089c0:	08013500 	.word	0x08013500
 80089c4:	080134c0 	.word	0x080134c0

080089c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80089d0:	f001 fbc8 	bl	800a164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80089d4:	4b2d      	ldr	r3, [pc, #180]	; (8008a8c <prvAddNewTaskToReadyList+0xc4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3301      	adds	r3, #1
 80089da:	4a2c      	ldr	r2, [pc, #176]	; (8008a8c <prvAddNewTaskToReadyList+0xc4>)
 80089dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80089de:	4b2c      	ldr	r3, [pc, #176]	; (8008a90 <prvAddNewTaskToReadyList+0xc8>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d109      	bne.n	80089fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80089e6:	4a2a      	ldr	r2, [pc, #168]	; (8008a90 <prvAddNewTaskToReadyList+0xc8>)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80089ec:	4b27      	ldr	r3, [pc, #156]	; (8008a8c <prvAddNewTaskToReadyList+0xc4>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d110      	bne.n	8008a16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80089f4:	f000 fc98 	bl	8009328 <prvInitialiseTaskLists>
 80089f8:	e00d      	b.n	8008a16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80089fa:	4b26      	ldr	r3, [pc, #152]	; (8008a94 <prvAddNewTaskToReadyList+0xcc>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d109      	bne.n	8008a16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a02:	4b23      	ldr	r3, [pc, #140]	; (8008a90 <prvAddNewTaskToReadyList+0xc8>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d802      	bhi.n	8008a16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a10:	4a1f      	ldr	r2, [pc, #124]	; (8008a90 <prvAddNewTaskToReadyList+0xc8>)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a16:	4b20      	ldr	r3, [pc, #128]	; (8008a98 <prvAddNewTaskToReadyList+0xd0>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	4a1e      	ldr	r2, [pc, #120]	; (8008a98 <prvAddNewTaskToReadyList+0xd0>)
 8008a1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a20:	4b1d      	ldr	r3, [pc, #116]	; (8008a98 <prvAddNewTaskToReadyList+0xd0>)
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a2c:	4b1b      	ldr	r3, [pc, #108]	; (8008a9c <prvAddNewTaskToReadyList+0xd4>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d903      	bls.n	8008a3c <prvAddNewTaskToReadyList+0x74>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	4a18      	ldr	r2, [pc, #96]	; (8008a9c <prvAddNewTaskToReadyList+0xd4>)
 8008a3a:	6013      	str	r3, [r2, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4a15      	ldr	r2, [pc, #84]	; (8008aa0 <prvAddNewTaskToReadyList+0xd8>)
 8008a4a:	441a      	add	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3304      	adds	r3, #4
 8008a50:	4619      	mov	r1, r3
 8008a52:	4610      	mov	r0, r2
 8008a54:	f7fe ff13 	bl	800787e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a58:	f001 fbb4 	bl	800a1c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a5c:	4b0d      	ldr	r3, [pc, #52]	; (8008a94 <prvAddNewTaskToReadyList+0xcc>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00e      	beq.n	8008a82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a64:	4b0a      	ldr	r3, [pc, #40]	; (8008a90 <prvAddNewTaskToReadyList+0xc8>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d207      	bcs.n	8008a82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a72:	4b0c      	ldr	r3, [pc, #48]	; (8008aa4 <prvAddNewTaskToReadyList+0xdc>)
 8008a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a78:	601a      	str	r2, [r3, #0]
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a82:	bf00      	nop
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20001ed8 	.word	0x20001ed8
 8008a90:	20001a04 	.word	0x20001a04
 8008a94:	20001ee4 	.word	0x20001ee4
 8008a98:	20001ef4 	.word	0x20001ef4
 8008a9c:	20001ee0 	.word	0x20001ee0
 8008aa0:	20001a08 	.word	0x20001a08
 8008aa4:	e000ed04 	.word	0xe000ed04

08008aa8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008ab0:	f001 fb58 	bl	800a164 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d102      	bne.n	8008ac0 <vTaskDelete+0x18>
 8008aba:	4b2c      	ldr	r3, [pc, #176]	; (8008b6c <vTaskDelete+0xc4>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	e000      	b.n	8008ac2 <vTaskDelete+0x1a>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fe ff35 	bl	8007938 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d004      	beq.n	8008ae0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3318      	adds	r3, #24
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe ff2c 	bl	8007938 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008ae0:	4b23      	ldr	r3, [pc, #140]	; (8008b70 <vTaskDelete+0xc8>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	4a22      	ldr	r2, [pc, #136]	; (8008b70 <vTaskDelete+0xc8>)
 8008ae8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008aea:	4b20      	ldr	r3, [pc, #128]	; (8008b6c <vTaskDelete+0xc4>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d10b      	bne.n	8008b0c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	3304      	adds	r3, #4
 8008af8:	4619      	mov	r1, r3
 8008afa:	481e      	ldr	r0, [pc, #120]	; (8008b74 <vTaskDelete+0xcc>)
 8008afc:	f7fe febf 	bl	800787e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008b00:	4b1d      	ldr	r3, [pc, #116]	; (8008b78 <vTaskDelete+0xd0>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3301      	adds	r3, #1
 8008b06:	4a1c      	ldr	r2, [pc, #112]	; (8008b78 <vTaskDelete+0xd0>)
 8008b08:	6013      	str	r3, [r2, #0]
 8008b0a:	e009      	b.n	8008b20 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008b0c:	4b1b      	ldr	r3, [pc, #108]	; (8008b7c <vTaskDelete+0xd4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3b01      	subs	r3, #1
 8008b12:	4a1a      	ldr	r2, [pc, #104]	; (8008b7c <vTaskDelete+0xd4>)
 8008b14:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f000 fc74 	bl	8009404 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008b1c:	f000 fca6 	bl	800946c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008b20:	f001 fb50 	bl	800a1c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008b24:	4b16      	ldr	r3, [pc, #88]	; (8008b80 <vTaskDelete+0xd8>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d01b      	beq.n	8008b64 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8008b2c:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <vTaskDelete+0xc4>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d116      	bne.n	8008b64 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008b36:	4b13      	ldr	r3, [pc, #76]	; (8008b84 <vTaskDelete+0xdc>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00a      	beq.n	8008b54 <vTaskDelete+0xac>
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	60bb      	str	r3, [r7, #8]
}
 8008b50:	bf00      	nop
 8008b52:	e7fe      	b.n	8008b52 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008b54:	4b0c      	ldr	r3, [pc, #48]	; (8008b88 <vTaskDelete+0xe0>)
 8008b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b64:	bf00      	nop
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20001a04 	.word	0x20001a04
 8008b70:	20001ef4 	.word	0x20001ef4
 8008b74:	20001eac 	.word	0x20001eac
 8008b78:	20001ec0 	.word	0x20001ec0
 8008b7c:	20001ed8 	.word	0x20001ed8
 8008b80:	20001ee4 	.word	0x20001ee4
 8008b84:	20001f00 	.word	0x20001f00
 8008b88:	e000ed04 	.word	0xe000ed04

08008b8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b94:	2300      	movs	r3, #0
 8008b96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d017      	beq.n	8008bce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b9e:	4b13      	ldr	r3, [pc, #76]	; (8008bec <vTaskDelay+0x60>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <vTaskDelay+0x30>
	__asm volatile
 8008ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	60bb      	str	r3, [r7, #8]
}
 8008bb8:	bf00      	nop
 8008bba:	e7fe      	b.n	8008bba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008bbc:	f000 f88a 	bl	8008cd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fdfc 	bl	80097c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008bc8:	f000 f892 	bl	8008cf0 <xTaskResumeAll>
 8008bcc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d107      	bne.n	8008be4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008bd4:	4b06      	ldr	r3, [pc, #24]	; (8008bf0 <vTaskDelay+0x64>)
 8008bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008be4:	bf00      	nop
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	20001f00 	.word	0x20001f00
 8008bf0:	e000ed04 	.word	0xe000ed04

08008bf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b08a      	sub	sp, #40	; 0x28
 8008bf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c02:	463a      	mov	r2, r7
 8008c04:	1d39      	adds	r1, r7, #4
 8008c06:	f107 0308 	add.w	r3, r7, #8
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe fdd6 	bl	80077bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	9202      	str	r2, [sp, #8]
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	460a      	mov	r2, r1
 8008c22:	4924      	ldr	r1, [pc, #144]	; (8008cb4 <vTaskStartScheduler+0xc0>)
 8008c24:	4824      	ldr	r0, [pc, #144]	; (8008cb8 <vTaskStartScheduler+0xc4>)
 8008c26:	f7ff fd87 	bl	8008738 <xTaskCreateStatic>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	4a23      	ldr	r2, [pc, #140]	; (8008cbc <vTaskStartScheduler+0xc8>)
 8008c2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c30:	4b22      	ldr	r3, [pc, #136]	; (8008cbc <vTaskStartScheduler+0xc8>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	617b      	str	r3, [r7, #20]
 8008c3c:	e001      	b.n	8008c42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d102      	bne.n	8008c4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c48:	f000 fe0e 	bl	8009868 <xTimerCreateTimerTask>
 8008c4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d11b      	bne.n	8008c8c <vTaskStartScheduler+0x98>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	613b      	str	r3, [r7, #16]
}
 8008c66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c68:	4b15      	ldr	r3, [pc, #84]	; (8008cc0 <vTaskStartScheduler+0xcc>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3354      	adds	r3, #84	; 0x54
 8008c6e:	4a15      	ldr	r2, [pc, #84]	; (8008cc4 <vTaskStartScheduler+0xd0>)
 8008c70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c72:	4b15      	ldr	r3, [pc, #84]	; (8008cc8 <vTaskStartScheduler+0xd4>)
 8008c74:	f04f 32ff 	mov.w	r2, #4294967295
 8008c78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c7a:	4b14      	ldr	r3, [pc, #80]	; (8008ccc <vTaskStartScheduler+0xd8>)
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c80:	4b13      	ldr	r3, [pc, #76]	; (8008cd0 <vTaskStartScheduler+0xdc>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c86:	f001 f9cb 	bl	800a020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c8a:	e00e      	b.n	8008caa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c92:	d10a      	bne.n	8008caa <vTaskStartScheduler+0xb6>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	60fb      	str	r3, [r7, #12]
}
 8008ca6:	bf00      	nop
 8008ca8:	e7fe      	b.n	8008ca8 <vTaskStartScheduler+0xb4>
}
 8008caa:	bf00      	nop
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	08011644 	.word	0x08011644
 8008cb8:	080092f9 	.word	0x080092f9
 8008cbc:	20001efc 	.word	0x20001efc
 8008cc0:	20001a04 	.word	0x20001a04
 8008cc4:	200008c8 	.word	0x200008c8
 8008cc8:	20001ef8 	.word	0x20001ef8
 8008ccc:	20001ee4 	.word	0x20001ee4
 8008cd0:	20001edc 	.word	0x20001edc

08008cd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008cd8:	4b04      	ldr	r3, [pc, #16]	; (8008cec <vTaskSuspendAll+0x18>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	4a03      	ldr	r2, [pc, #12]	; (8008cec <vTaskSuspendAll+0x18>)
 8008ce0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ce2:	bf00      	nop
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	20001f00 	.word	0x20001f00

08008cf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008cfe:	4b42      	ldr	r3, [pc, #264]	; (8008e08 <xTaskResumeAll+0x118>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10a      	bne.n	8008d1c <xTaskResumeAll+0x2c>
	__asm volatile
 8008d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	603b      	str	r3, [r7, #0]
}
 8008d18:	bf00      	nop
 8008d1a:	e7fe      	b.n	8008d1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d1c:	f001 fa22 	bl	800a164 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d20:	4b39      	ldr	r3, [pc, #228]	; (8008e08 <xTaskResumeAll+0x118>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3b01      	subs	r3, #1
 8008d26:	4a38      	ldr	r2, [pc, #224]	; (8008e08 <xTaskResumeAll+0x118>)
 8008d28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d2a:	4b37      	ldr	r3, [pc, #220]	; (8008e08 <xTaskResumeAll+0x118>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d162      	bne.n	8008df8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d32:	4b36      	ldr	r3, [pc, #216]	; (8008e0c <xTaskResumeAll+0x11c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d05e      	beq.n	8008df8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d3a:	e02f      	b.n	8008d9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d3c:	4b34      	ldr	r3, [pc, #208]	; (8008e10 <xTaskResumeAll+0x120>)
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	3318      	adds	r3, #24
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fe fdf5 	bl	8007938 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	3304      	adds	r3, #4
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe fdf0 	bl	8007938 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d5c:	4b2d      	ldr	r3, [pc, #180]	; (8008e14 <xTaskResumeAll+0x124>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d903      	bls.n	8008d6c <xTaskResumeAll+0x7c>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d68:	4a2a      	ldr	r2, [pc, #168]	; (8008e14 <xTaskResumeAll+0x124>)
 8008d6a:	6013      	str	r3, [r2, #0]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d70:	4613      	mov	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4a27      	ldr	r2, [pc, #156]	; (8008e18 <xTaskResumeAll+0x128>)
 8008d7a:	441a      	add	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3304      	adds	r3, #4
 8008d80:	4619      	mov	r1, r3
 8008d82:	4610      	mov	r0, r2
 8008d84:	f7fe fd7b 	bl	800787e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8c:	4b23      	ldr	r3, [pc, #140]	; (8008e1c <xTaskResumeAll+0x12c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d302      	bcc.n	8008d9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008d96:	4b22      	ldr	r3, [pc, #136]	; (8008e20 <xTaskResumeAll+0x130>)
 8008d98:	2201      	movs	r2, #1
 8008d9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d9c:	4b1c      	ldr	r3, [pc, #112]	; (8008e10 <xTaskResumeAll+0x120>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1cb      	bne.n	8008d3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d001      	beq.n	8008dae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008daa:	f000 fb5f 	bl	800946c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008dae:	4b1d      	ldr	r3, [pc, #116]	; (8008e24 <xTaskResumeAll+0x134>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d010      	beq.n	8008ddc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008dba:	f000 f847 	bl	8008e4c <xTaskIncrementTick>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d002      	beq.n	8008dca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008dc4:	4b16      	ldr	r3, [pc, #88]	; (8008e20 <xTaskResumeAll+0x130>)
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1f1      	bne.n	8008dba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008dd6:	4b13      	ldr	r3, [pc, #76]	; (8008e24 <xTaskResumeAll+0x134>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ddc:	4b10      	ldr	r3, [pc, #64]	; (8008e20 <xTaskResumeAll+0x130>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d009      	beq.n	8008df8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008de4:	2301      	movs	r3, #1
 8008de6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008de8:	4b0f      	ldr	r3, [pc, #60]	; (8008e28 <xTaskResumeAll+0x138>)
 8008dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008df8:	f001 f9e4 	bl	800a1c4 <vPortExitCritical>

	return xAlreadyYielded;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	20001f00 	.word	0x20001f00
 8008e0c:	20001ed8 	.word	0x20001ed8
 8008e10:	20001e98 	.word	0x20001e98
 8008e14:	20001ee0 	.word	0x20001ee0
 8008e18:	20001a08 	.word	0x20001a08
 8008e1c:	20001a04 	.word	0x20001a04
 8008e20:	20001eec 	.word	0x20001eec
 8008e24:	20001ee8 	.word	0x20001ee8
 8008e28:	e000ed04 	.word	0xe000ed04

08008e2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e32:	4b05      	ldr	r3, [pc, #20]	; (8008e48 <xTaskGetTickCount+0x1c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e38:	687b      	ldr	r3, [r7, #4]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	20001edc 	.word	0x20001edc

08008e4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e52:	2300      	movs	r3, #0
 8008e54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e56:	4b4f      	ldr	r3, [pc, #316]	; (8008f94 <xTaskIncrementTick+0x148>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f040 808f 	bne.w	8008f7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e60:	4b4d      	ldr	r3, [pc, #308]	; (8008f98 <xTaskIncrementTick+0x14c>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3301      	adds	r3, #1
 8008e66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e68:	4a4b      	ldr	r2, [pc, #300]	; (8008f98 <xTaskIncrementTick+0x14c>)
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d120      	bne.n	8008eb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e74:	4b49      	ldr	r3, [pc, #292]	; (8008f9c <xTaskIncrementTick+0x150>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00a      	beq.n	8008e94 <xTaskIncrementTick+0x48>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	603b      	str	r3, [r7, #0]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <xTaskIncrementTick+0x46>
 8008e94:	4b41      	ldr	r3, [pc, #260]	; (8008f9c <xTaskIncrementTick+0x150>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60fb      	str	r3, [r7, #12]
 8008e9a:	4b41      	ldr	r3, [pc, #260]	; (8008fa0 <xTaskIncrementTick+0x154>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a3f      	ldr	r2, [pc, #252]	; (8008f9c <xTaskIncrementTick+0x150>)
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	4a3f      	ldr	r2, [pc, #252]	; (8008fa0 <xTaskIncrementTick+0x154>)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	4b3e      	ldr	r3, [pc, #248]	; (8008fa4 <xTaskIncrementTick+0x158>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3301      	adds	r3, #1
 8008eae:	4a3d      	ldr	r2, [pc, #244]	; (8008fa4 <xTaskIncrementTick+0x158>)
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	f000 fadb 	bl	800946c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008eb6:	4b3c      	ldr	r3, [pc, #240]	; (8008fa8 <xTaskIncrementTick+0x15c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d349      	bcc.n	8008f54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ec0:	4b36      	ldr	r3, [pc, #216]	; (8008f9c <xTaskIncrementTick+0x150>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d104      	bne.n	8008ed4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eca:	4b37      	ldr	r3, [pc, #220]	; (8008fa8 <xTaskIncrementTick+0x15c>)
 8008ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed0:	601a      	str	r2, [r3, #0]
					break;
 8008ed2:	e03f      	b.n	8008f54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ed4:	4b31      	ldr	r3, [pc, #196]	; (8008f9c <xTaskIncrementTick+0x150>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d203      	bcs.n	8008ef4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008eec:	4a2e      	ldr	r2, [pc, #184]	; (8008fa8 <xTaskIncrementTick+0x15c>)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ef2:	e02f      	b.n	8008f54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fe fd1d 	bl	8007938 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d004      	beq.n	8008f10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	3318      	adds	r3, #24
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe fd14 	bl	8007938 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f14:	4b25      	ldr	r3, [pc, #148]	; (8008fac <xTaskIncrementTick+0x160>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d903      	bls.n	8008f24 <xTaskIncrementTick+0xd8>
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	4a22      	ldr	r2, [pc, #136]	; (8008fac <xTaskIncrementTick+0x160>)
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f28:	4613      	mov	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4a1f      	ldr	r2, [pc, #124]	; (8008fb0 <xTaskIncrementTick+0x164>)
 8008f32:	441a      	add	r2, r3
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	3304      	adds	r3, #4
 8008f38:	4619      	mov	r1, r3
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	f7fe fc9f 	bl	800787e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f44:	4b1b      	ldr	r3, [pc, #108]	; (8008fb4 <xTaskIncrementTick+0x168>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d3b8      	bcc.n	8008ec0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f52:	e7b5      	b.n	8008ec0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f54:	4b17      	ldr	r3, [pc, #92]	; (8008fb4 <xTaskIncrementTick+0x168>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f5a:	4915      	ldr	r1, [pc, #84]	; (8008fb0 <xTaskIncrementTick+0x164>)
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	440b      	add	r3, r1
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d901      	bls.n	8008f70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f70:	4b11      	ldr	r3, [pc, #68]	; (8008fb8 <xTaskIncrementTick+0x16c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d007      	beq.n	8008f88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	617b      	str	r3, [r7, #20]
 8008f7c:	e004      	b.n	8008f88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f7e:	4b0f      	ldr	r3, [pc, #60]	; (8008fbc <xTaskIncrementTick+0x170>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3301      	adds	r3, #1
 8008f84:	4a0d      	ldr	r2, [pc, #52]	; (8008fbc <xTaskIncrementTick+0x170>)
 8008f86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f88:	697b      	ldr	r3, [r7, #20]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	20001f00 	.word	0x20001f00
 8008f98:	20001edc 	.word	0x20001edc
 8008f9c:	20001e90 	.word	0x20001e90
 8008fa0:	20001e94 	.word	0x20001e94
 8008fa4:	20001ef0 	.word	0x20001ef0
 8008fa8:	20001ef8 	.word	0x20001ef8
 8008fac:	20001ee0 	.word	0x20001ee0
 8008fb0:	20001a08 	.word	0x20001a08
 8008fb4:	20001a04 	.word	0x20001a04
 8008fb8:	20001eec 	.word	0x20001eec
 8008fbc:	20001ee8 	.word	0x20001ee8

08008fc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008fc6:	4b2a      	ldr	r3, [pc, #168]	; (8009070 <vTaskSwitchContext+0xb0>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008fce:	4b29      	ldr	r3, [pc, #164]	; (8009074 <vTaskSwitchContext+0xb4>)
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008fd4:	e046      	b.n	8009064 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008fd6:	4b27      	ldr	r3, [pc, #156]	; (8009074 <vTaskSwitchContext+0xb4>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fdc:	4b26      	ldr	r3, [pc, #152]	; (8009078 <vTaskSwitchContext+0xb8>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	60fb      	str	r3, [r7, #12]
 8008fe2:	e010      	b.n	8009006 <vTaskSwitchContext+0x46>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10a      	bne.n	8009000 <vTaskSwitchContext+0x40>
	__asm volatile
 8008fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fee:	f383 8811 	msr	BASEPRI, r3
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	f3bf 8f4f 	dsb	sy
 8008ffa:	607b      	str	r3, [r7, #4]
}
 8008ffc:	bf00      	nop
 8008ffe:	e7fe      	b.n	8008ffe <vTaskSwitchContext+0x3e>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	3b01      	subs	r3, #1
 8009004:	60fb      	str	r3, [r7, #12]
 8009006:	491d      	ldr	r1, [pc, #116]	; (800907c <vTaskSwitchContext+0xbc>)
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	4613      	mov	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4413      	add	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	440b      	add	r3, r1
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d0e4      	beq.n	8008fe4 <vTaskSwitchContext+0x24>
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	4613      	mov	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4a15      	ldr	r2, [pc, #84]	; (800907c <vTaskSwitchContext+0xbc>)
 8009026:	4413      	add	r3, r2
 8009028:	60bb      	str	r3, [r7, #8]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	605a      	str	r2, [r3, #4]
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	3308      	adds	r3, #8
 800903c:	429a      	cmp	r2, r3
 800903e:	d104      	bne.n	800904a <vTaskSwitchContext+0x8a>
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	685a      	ldr	r2, [r3, #4]
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	605a      	str	r2, [r3, #4]
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	4a0b      	ldr	r2, [pc, #44]	; (8009080 <vTaskSwitchContext+0xc0>)
 8009052:	6013      	str	r3, [r2, #0]
 8009054:	4a08      	ldr	r2, [pc, #32]	; (8009078 <vTaskSwitchContext+0xb8>)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800905a:	4b09      	ldr	r3, [pc, #36]	; (8009080 <vTaskSwitchContext+0xc0>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3354      	adds	r3, #84	; 0x54
 8009060:	4a08      	ldr	r2, [pc, #32]	; (8009084 <vTaskSwitchContext+0xc4>)
 8009062:	6013      	str	r3, [r2, #0]
}
 8009064:	bf00      	nop
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	20001f00 	.word	0x20001f00
 8009074:	20001eec 	.word	0x20001eec
 8009078:	20001ee0 	.word	0x20001ee0
 800907c:	20001a08 	.word	0x20001a08
 8009080:	20001a04 	.word	0x20001a04
 8009084:	200008c8 	.word	0x200008c8

08009088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10a      	bne.n	80090ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	60fb      	str	r3, [r7, #12]
}
 80090aa:	bf00      	nop
 80090ac:	e7fe      	b.n	80090ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090ae:	4b07      	ldr	r3, [pc, #28]	; (80090cc <vTaskPlaceOnEventList+0x44>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3318      	adds	r3, #24
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7fe fc05 	bl	80078c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090bc:	2101      	movs	r1, #1
 80090be:	6838      	ldr	r0, [r7, #0]
 80090c0:	f000 fb7e 	bl	80097c0 <prvAddCurrentTaskToDelayedList>
}
 80090c4:	bf00      	nop
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	20001a04 	.word	0x20001a04

080090d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	617b      	str	r3, [r7, #20]
}
 80090f4:	bf00      	nop
 80090f6:	e7fe      	b.n	80090f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090f8:	4b0a      	ldr	r3, [pc, #40]	; (8009124 <vTaskPlaceOnEventListRestricted+0x54>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3318      	adds	r3, #24
 80090fe:	4619      	mov	r1, r3
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f7fe fbbc 	bl	800787e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800910c:	f04f 33ff 	mov.w	r3, #4294967295
 8009110:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009112:	6879      	ldr	r1, [r7, #4]
 8009114:	68b8      	ldr	r0, [r7, #8]
 8009116:	f000 fb53 	bl	80097c0 <prvAddCurrentTaskToDelayedList>
	}
 800911a:	bf00      	nop
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	20001a04 	.word	0x20001a04

08009128 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10a      	bne.n	8009154 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	60fb      	str	r3, [r7, #12]
}
 8009150:	bf00      	nop
 8009152:	e7fe      	b.n	8009152 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	3318      	adds	r3, #24
 8009158:	4618      	mov	r0, r3
 800915a:	f7fe fbed 	bl	8007938 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800915e:	4b1e      	ldr	r3, [pc, #120]	; (80091d8 <xTaskRemoveFromEventList+0xb0>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d11d      	bne.n	80091a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	3304      	adds	r3, #4
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe fbe4 	bl	8007938 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009174:	4b19      	ldr	r3, [pc, #100]	; (80091dc <xTaskRemoveFromEventList+0xb4>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	429a      	cmp	r2, r3
 800917a:	d903      	bls.n	8009184 <xTaskRemoveFromEventList+0x5c>
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009180:	4a16      	ldr	r2, [pc, #88]	; (80091dc <xTaskRemoveFromEventList+0xb4>)
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4a13      	ldr	r2, [pc, #76]	; (80091e0 <xTaskRemoveFromEventList+0xb8>)
 8009192:	441a      	add	r2, r3
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	3304      	adds	r3, #4
 8009198:	4619      	mov	r1, r3
 800919a:	4610      	mov	r0, r2
 800919c:	f7fe fb6f 	bl	800787e <vListInsertEnd>
 80091a0:	e005      	b.n	80091ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	3318      	adds	r3, #24
 80091a6:	4619      	mov	r1, r3
 80091a8:	480e      	ldr	r0, [pc, #56]	; (80091e4 <xTaskRemoveFromEventList+0xbc>)
 80091aa:	f7fe fb68 	bl	800787e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b2:	4b0d      	ldr	r3, [pc, #52]	; (80091e8 <xTaskRemoveFromEventList+0xc0>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d905      	bls.n	80091c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80091bc:	2301      	movs	r3, #1
 80091be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80091c0:	4b0a      	ldr	r3, [pc, #40]	; (80091ec <xTaskRemoveFromEventList+0xc4>)
 80091c2:	2201      	movs	r2, #1
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	e001      	b.n	80091cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80091c8:	2300      	movs	r3, #0
 80091ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80091cc:	697b      	ldr	r3, [r7, #20]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3718      	adds	r7, #24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20001f00 	.word	0x20001f00
 80091dc:	20001ee0 	.word	0x20001ee0
 80091e0:	20001a08 	.word	0x20001a08
 80091e4:	20001e98 	.word	0x20001e98
 80091e8:	20001a04 	.word	0x20001a04
 80091ec:	20001eec 	.word	0x20001eec

080091f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80091f8:	4b06      	ldr	r3, [pc, #24]	; (8009214 <vTaskInternalSetTimeOutState+0x24>)
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009200:	4b05      	ldr	r3, [pc, #20]	; (8009218 <vTaskInternalSetTimeOutState+0x28>)
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	605a      	str	r2, [r3, #4]
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	20001ef0 	.word	0x20001ef0
 8009218:	20001edc 	.word	0x20001edc

0800921c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b088      	sub	sp, #32
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10a      	bne.n	8009242 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	613b      	str	r3, [r7, #16]
}
 800923e:	bf00      	nop
 8009240:	e7fe      	b.n	8009240 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10a      	bne.n	800925e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	60fb      	str	r3, [r7, #12]
}
 800925a:	bf00      	nop
 800925c:	e7fe      	b.n	800925c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800925e:	f000 ff81 	bl	800a164 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009262:	4b1d      	ldr	r3, [pc, #116]	; (80092d8 <xTaskCheckForTimeOut+0xbc>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	69ba      	ldr	r2, [r7, #24]
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800927a:	d102      	bne.n	8009282 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800927c:	2300      	movs	r3, #0
 800927e:	61fb      	str	r3, [r7, #28]
 8009280:	e023      	b.n	80092ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	4b15      	ldr	r3, [pc, #84]	; (80092dc <xTaskCheckForTimeOut+0xc0>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	429a      	cmp	r2, r3
 800928c:	d007      	beq.n	800929e <xTaskCheckForTimeOut+0x82>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	69ba      	ldr	r2, [r7, #24]
 8009294:	429a      	cmp	r2, r3
 8009296:	d302      	bcc.n	800929e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009298:	2301      	movs	r3, #1
 800929a:	61fb      	str	r3, [r7, #28]
 800929c:	e015      	b.n	80092ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d20b      	bcs.n	80092c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	1ad2      	subs	r2, r2, r3
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f7ff ff9b 	bl	80091f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80092ba:	2300      	movs	r3, #0
 80092bc:	61fb      	str	r3, [r7, #28]
 80092be:	e004      	b.n	80092ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80092c6:	2301      	movs	r3, #1
 80092c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80092ca:	f000 ff7b 	bl	800a1c4 <vPortExitCritical>

	return xReturn;
 80092ce:	69fb      	ldr	r3, [r7, #28]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3720      	adds	r7, #32
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20001edc 	.word	0x20001edc
 80092dc:	20001ef0 	.word	0x20001ef0

080092e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80092e0:	b480      	push	{r7}
 80092e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80092e4:	4b03      	ldr	r3, [pc, #12]	; (80092f4 <vTaskMissedYield+0x14>)
 80092e6:	2201      	movs	r2, #1
 80092e8:	601a      	str	r2, [r3, #0]
}
 80092ea:	bf00      	nop
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	20001eec 	.word	0x20001eec

080092f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009300:	f000 f852 	bl	80093a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009304:	4b06      	ldr	r3, [pc, #24]	; (8009320 <prvIdleTask+0x28>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d9f9      	bls.n	8009300 <prvIdleTask+0x8>
			{
				taskYIELD();
 800930c:	4b05      	ldr	r3, [pc, #20]	; (8009324 <prvIdleTask+0x2c>)
 800930e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800931c:	e7f0      	b.n	8009300 <prvIdleTask+0x8>
 800931e:	bf00      	nop
 8009320:	20001a08 	.word	0x20001a08
 8009324:	e000ed04 	.word	0xe000ed04

08009328 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800932e:	2300      	movs	r3, #0
 8009330:	607b      	str	r3, [r7, #4]
 8009332:	e00c      	b.n	800934e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	4613      	mov	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4a12      	ldr	r2, [pc, #72]	; (8009388 <prvInitialiseTaskLists+0x60>)
 8009340:	4413      	add	r3, r2
 8009342:	4618      	mov	r0, r3
 8009344:	f7fe fa6e 	bl	8007824 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	3301      	adds	r3, #1
 800934c:	607b      	str	r3, [r7, #4]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b37      	cmp	r3, #55	; 0x37
 8009352:	d9ef      	bls.n	8009334 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009354:	480d      	ldr	r0, [pc, #52]	; (800938c <prvInitialiseTaskLists+0x64>)
 8009356:	f7fe fa65 	bl	8007824 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800935a:	480d      	ldr	r0, [pc, #52]	; (8009390 <prvInitialiseTaskLists+0x68>)
 800935c:	f7fe fa62 	bl	8007824 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009360:	480c      	ldr	r0, [pc, #48]	; (8009394 <prvInitialiseTaskLists+0x6c>)
 8009362:	f7fe fa5f 	bl	8007824 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009366:	480c      	ldr	r0, [pc, #48]	; (8009398 <prvInitialiseTaskLists+0x70>)
 8009368:	f7fe fa5c 	bl	8007824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800936c:	480b      	ldr	r0, [pc, #44]	; (800939c <prvInitialiseTaskLists+0x74>)
 800936e:	f7fe fa59 	bl	8007824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009372:	4b0b      	ldr	r3, [pc, #44]	; (80093a0 <prvInitialiseTaskLists+0x78>)
 8009374:	4a05      	ldr	r2, [pc, #20]	; (800938c <prvInitialiseTaskLists+0x64>)
 8009376:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009378:	4b0a      	ldr	r3, [pc, #40]	; (80093a4 <prvInitialiseTaskLists+0x7c>)
 800937a:	4a05      	ldr	r2, [pc, #20]	; (8009390 <prvInitialiseTaskLists+0x68>)
 800937c:	601a      	str	r2, [r3, #0]
}
 800937e:	bf00      	nop
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	20001a08 	.word	0x20001a08
 800938c:	20001e68 	.word	0x20001e68
 8009390:	20001e7c 	.word	0x20001e7c
 8009394:	20001e98 	.word	0x20001e98
 8009398:	20001eac 	.word	0x20001eac
 800939c:	20001ec4 	.word	0x20001ec4
 80093a0:	20001e90 	.word	0x20001e90
 80093a4:	20001e94 	.word	0x20001e94

080093a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093ae:	e019      	b.n	80093e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80093b0:	f000 fed8 	bl	800a164 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093b4:	4b10      	ldr	r3, [pc, #64]	; (80093f8 <prvCheckTasksWaitingTermination+0x50>)
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	3304      	adds	r3, #4
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fe fab9 	bl	8007938 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80093c6:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <prvCheckTasksWaitingTermination+0x54>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3b01      	subs	r3, #1
 80093cc:	4a0b      	ldr	r2, [pc, #44]	; (80093fc <prvCheckTasksWaitingTermination+0x54>)
 80093ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093d0:	4b0b      	ldr	r3, [pc, #44]	; (8009400 <prvCheckTasksWaitingTermination+0x58>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	4a0a      	ldr	r2, [pc, #40]	; (8009400 <prvCheckTasksWaitingTermination+0x58>)
 80093d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80093da:	f000 fef3 	bl	800a1c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f810 	bl	8009404 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093e4:	4b06      	ldr	r3, [pc, #24]	; (8009400 <prvCheckTasksWaitingTermination+0x58>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1e1      	bne.n	80093b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093ec:	bf00      	nop
 80093ee:	bf00      	nop
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	20001eac 	.word	0x20001eac
 80093fc:	20001ed8 	.word	0x20001ed8
 8009400:	20001ec0 	.word	0x20001ec0

08009404 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	3354      	adds	r3, #84	; 0x54
 8009410:	4618      	mov	r0, r3
 8009412:	f005 ff1b 	bl	800f24c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800941c:	2b00      	cmp	r3, #0
 800941e:	d108      	bne.n	8009432 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009424:	4618      	mov	r0, r3
 8009426:	f001 f88b 	bl	800a540 <vPortFree>
				vPortFree( pxTCB );
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f001 f888 	bl	800a540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009430:	e018      	b.n	8009464 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009438:	2b01      	cmp	r3, #1
 800943a:	d103      	bne.n	8009444 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f001 f87f 	bl	800a540 <vPortFree>
	}
 8009442:	e00f      	b.n	8009464 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800944a:	2b02      	cmp	r3, #2
 800944c:	d00a      	beq.n	8009464 <prvDeleteTCB+0x60>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	60fb      	str	r3, [r7, #12]
}
 8009460:	bf00      	nop
 8009462:	e7fe      	b.n	8009462 <prvDeleteTCB+0x5e>
	}
 8009464:	bf00      	nop
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009472:	4b0c      	ldr	r3, [pc, #48]	; (80094a4 <prvResetNextTaskUnblockTime+0x38>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d104      	bne.n	8009486 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800947c:	4b0a      	ldr	r3, [pc, #40]	; (80094a8 <prvResetNextTaskUnblockTime+0x3c>)
 800947e:	f04f 32ff 	mov.w	r2, #4294967295
 8009482:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009484:	e008      	b.n	8009498 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009486:	4b07      	ldr	r3, [pc, #28]	; (80094a4 <prvResetNextTaskUnblockTime+0x38>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	4a04      	ldr	r2, [pc, #16]	; (80094a8 <prvResetNextTaskUnblockTime+0x3c>)
 8009496:	6013      	str	r3, [r2, #0]
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	20001e90 	.word	0x20001e90
 80094a8:	20001ef8 	.word	0x20001ef8

080094ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094b2:	4b0b      	ldr	r3, [pc, #44]	; (80094e0 <xTaskGetSchedulerState+0x34>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d102      	bne.n	80094c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094ba:	2301      	movs	r3, #1
 80094bc:	607b      	str	r3, [r7, #4]
 80094be:	e008      	b.n	80094d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094c0:	4b08      	ldr	r3, [pc, #32]	; (80094e4 <xTaskGetSchedulerState+0x38>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d102      	bne.n	80094ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80094c8:	2302      	movs	r3, #2
 80094ca:	607b      	str	r3, [r7, #4]
 80094cc:	e001      	b.n	80094d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80094ce:	2300      	movs	r3, #0
 80094d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80094d2:	687b      	ldr	r3, [r7, #4]
	}
 80094d4:	4618      	mov	r0, r3
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	20001ee4 	.word	0x20001ee4
 80094e4:	20001f00 	.word	0x20001f00

080094e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80094f4:	2300      	movs	r3, #0
 80094f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d051      	beq.n	80095a2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009502:	4b2a      	ldr	r3, [pc, #168]	; (80095ac <xTaskPriorityInherit+0xc4>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009508:	429a      	cmp	r2, r3
 800950a:	d241      	bcs.n	8009590 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	2b00      	cmp	r3, #0
 8009512:	db06      	blt.n	8009522 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009514:	4b25      	ldr	r3, [pc, #148]	; (80095ac <xTaskPriorityInherit+0xc4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	6959      	ldr	r1, [r3, #20]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952a:	4613      	mov	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4a1f      	ldr	r2, [pc, #124]	; (80095b0 <xTaskPriorityInherit+0xc8>)
 8009534:	4413      	add	r3, r2
 8009536:	4299      	cmp	r1, r3
 8009538:	d122      	bne.n	8009580 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	3304      	adds	r3, #4
 800953e:	4618      	mov	r0, r3
 8009540:	f7fe f9fa 	bl	8007938 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009544:	4b19      	ldr	r3, [pc, #100]	; (80095ac <xTaskPriorityInherit+0xc4>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009552:	4b18      	ldr	r3, [pc, #96]	; (80095b4 <xTaskPriorityInherit+0xcc>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	429a      	cmp	r2, r3
 8009558:	d903      	bls.n	8009562 <xTaskPriorityInherit+0x7a>
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955e:	4a15      	ldr	r2, [pc, #84]	; (80095b4 <xTaskPriorityInherit+0xcc>)
 8009560:	6013      	str	r3, [r2, #0]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009566:	4613      	mov	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4a10      	ldr	r2, [pc, #64]	; (80095b0 <xTaskPriorityInherit+0xc8>)
 8009570:	441a      	add	r2, r3
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	3304      	adds	r3, #4
 8009576:	4619      	mov	r1, r3
 8009578:	4610      	mov	r0, r2
 800957a:	f7fe f980 	bl	800787e <vListInsertEnd>
 800957e:	e004      	b.n	800958a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009580:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <xTaskPriorityInherit+0xc4>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800958a:	2301      	movs	r3, #1
 800958c:	60fb      	str	r3, [r7, #12]
 800958e:	e008      	b.n	80095a2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009594:	4b05      	ldr	r3, [pc, #20]	; (80095ac <xTaskPriorityInherit+0xc4>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959a:	429a      	cmp	r2, r3
 800959c:	d201      	bcs.n	80095a2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800959e:	2301      	movs	r3, #1
 80095a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095a2:	68fb      	ldr	r3, [r7, #12]
	}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	20001a04 	.word	0x20001a04
 80095b0:	20001a08 	.word	0x20001a08
 80095b4:	20001ee0 	.word	0x20001ee0

080095b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095c4:	2300      	movs	r3, #0
 80095c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d056      	beq.n	800967c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095ce:	4b2e      	ldr	r3, [pc, #184]	; (8009688 <xTaskPriorityDisinherit+0xd0>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d00a      	beq.n	80095ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80095d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	60fb      	str	r3, [r7, #12]
}
 80095ea:	bf00      	nop
 80095ec:	e7fe      	b.n	80095ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10a      	bne.n	800960c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80095f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	60bb      	str	r3, [r7, #8]
}
 8009608:	bf00      	nop
 800960a:	e7fe      	b.n	800960a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009610:	1e5a      	subs	r2, r3, #1
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800961e:	429a      	cmp	r2, r3
 8009620:	d02c      	beq.n	800967c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009626:	2b00      	cmp	r3, #0
 8009628:	d128      	bne.n	800967c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	3304      	adds	r3, #4
 800962e:	4618      	mov	r0, r3
 8009630:	f7fe f982 	bl	8007938 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009640:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800964c:	4b0f      	ldr	r3, [pc, #60]	; (800968c <xTaskPriorityDisinherit+0xd4>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	429a      	cmp	r2, r3
 8009652:	d903      	bls.n	800965c <xTaskPriorityDisinherit+0xa4>
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009658:	4a0c      	ldr	r2, [pc, #48]	; (800968c <xTaskPriorityDisinherit+0xd4>)
 800965a:	6013      	str	r3, [r2, #0]
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009660:	4613      	mov	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4413      	add	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4a09      	ldr	r2, [pc, #36]	; (8009690 <xTaskPriorityDisinherit+0xd8>)
 800966a:	441a      	add	r2, r3
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	3304      	adds	r3, #4
 8009670:	4619      	mov	r1, r3
 8009672:	4610      	mov	r0, r2
 8009674:	f7fe f903 	bl	800787e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009678:	2301      	movs	r3, #1
 800967a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800967c:	697b      	ldr	r3, [r7, #20]
	}
 800967e:	4618      	mov	r0, r3
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	20001a04 	.word	0x20001a04
 800968c:	20001ee0 	.word	0x20001ee0
 8009690:	20001a08 	.word	0x20001a08

08009694 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009694:	b580      	push	{r7, lr}
 8009696:	b088      	sub	sp, #32
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80096a2:	2301      	movs	r3, #1
 80096a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d06a      	beq.n	8009782 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10a      	bne.n	80096ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	60fb      	str	r3, [r7, #12]
}
 80096c6:	bf00      	nop
 80096c8:	e7fe      	b.n	80096c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d902      	bls.n	80096da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	61fb      	str	r3, [r7, #28]
 80096d8:	e002      	b.n	80096e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e4:	69fa      	ldr	r2, [r7, #28]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d04b      	beq.n	8009782 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d146      	bne.n	8009782 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80096f4:	4b25      	ldr	r3, [pc, #148]	; (800978c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	69ba      	ldr	r2, [r7, #24]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d10a      	bne.n	8009714 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	60bb      	str	r3, [r7, #8]
}
 8009710:	bf00      	nop
 8009712:	e7fe      	b.n	8009712 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009718:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	69fa      	ldr	r2, [r7, #28]
 800971e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	2b00      	cmp	r3, #0
 8009726:	db04      	blt.n	8009732 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	6959      	ldr	r1, [r3, #20]
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	4613      	mov	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4413      	add	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4a13      	ldr	r2, [pc, #76]	; (8009790 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009742:	4413      	add	r3, r2
 8009744:	4299      	cmp	r1, r3
 8009746:	d11c      	bne.n	8009782 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	3304      	adds	r3, #4
 800974c:	4618      	mov	r0, r3
 800974e:	f7fe f8f3 	bl	8007938 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009756:	4b0f      	ldr	r3, [pc, #60]	; (8009794 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	429a      	cmp	r2, r3
 800975c:	d903      	bls.n	8009766 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009762:	4a0c      	ldr	r2, [pc, #48]	; (8009794 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009764:	6013      	str	r3, [r2, #0]
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4a07      	ldr	r2, [pc, #28]	; (8009790 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009774:	441a      	add	r2, r3
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	3304      	adds	r3, #4
 800977a:	4619      	mov	r1, r3
 800977c:	4610      	mov	r0, r2
 800977e:	f7fe f87e 	bl	800787e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009782:	bf00      	nop
 8009784:	3720      	adds	r7, #32
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20001a04 	.word	0x20001a04
 8009790:	20001a08 	.word	0x20001a08
 8009794:	20001ee0 	.word	0x20001ee0

08009798 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009798:	b480      	push	{r7}
 800979a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800979c:	4b07      	ldr	r3, [pc, #28]	; (80097bc <pvTaskIncrementMutexHeldCount+0x24>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d004      	beq.n	80097ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80097a4:	4b05      	ldr	r3, [pc, #20]	; (80097bc <pvTaskIncrementMutexHeldCount+0x24>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097aa:	3201      	adds	r2, #1
 80097ac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80097ae:	4b03      	ldr	r3, [pc, #12]	; (80097bc <pvTaskIncrementMutexHeldCount+0x24>)
 80097b0:	681b      	ldr	r3, [r3, #0]
	}
 80097b2:	4618      	mov	r0, r3
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	20001a04 	.word	0x20001a04

080097c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097ca:	4b21      	ldr	r3, [pc, #132]	; (8009850 <prvAddCurrentTaskToDelayedList+0x90>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097d0:	4b20      	ldr	r3, [pc, #128]	; (8009854 <prvAddCurrentTaskToDelayedList+0x94>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3304      	adds	r3, #4
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fe f8ae 	bl	8007938 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e2:	d10a      	bne.n	80097fa <prvAddCurrentTaskToDelayedList+0x3a>
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d007      	beq.n	80097fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097ea:	4b1a      	ldr	r3, [pc, #104]	; (8009854 <prvAddCurrentTaskToDelayedList+0x94>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	3304      	adds	r3, #4
 80097f0:	4619      	mov	r1, r3
 80097f2:	4819      	ldr	r0, [pc, #100]	; (8009858 <prvAddCurrentTaskToDelayedList+0x98>)
 80097f4:	f7fe f843 	bl	800787e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097f8:	e026      	b.n	8009848 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4413      	add	r3, r2
 8009800:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009802:	4b14      	ldr	r3, [pc, #80]	; (8009854 <prvAddCurrentTaskToDelayedList+0x94>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	429a      	cmp	r2, r3
 8009810:	d209      	bcs.n	8009826 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009812:	4b12      	ldr	r3, [pc, #72]	; (800985c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	4b0f      	ldr	r3, [pc, #60]	; (8009854 <prvAddCurrentTaskToDelayedList+0x94>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3304      	adds	r3, #4
 800981c:	4619      	mov	r1, r3
 800981e:	4610      	mov	r0, r2
 8009820:	f7fe f851 	bl	80078c6 <vListInsert>
}
 8009824:	e010      	b.n	8009848 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009826:	4b0e      	ldr	r3, [pc, #56]	; (8009860 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	4b0a      	ldr	r3, [pc, #40]	; (8009854 <prvAddCurrentTaskToDelayedList+0x94>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3304      	adds	r3, #4
 8009830:	4619      	mov	r1, r3
 8009832:	4610      	mov	r0, r2
 8009834:	f7fe f847 	bl	80078c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009838:	4b0a      	ldr	r3, [pc, #40]	; (8009864 <prvAddCurrentTaskToDelayedList+0xa4>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	429a      	cmp	r2, r3
 8009840:	d202      	bcs.n	8009848 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009842:	4a08      	ldr	r2, [pc, #32]	; (8009864 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	6013      	str	r3, [r2, #0]
}
 8009848:	bf00      	nop
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	20001edc 	.word	0x20001edc
 8009854:	20001a04 	.word	0x20001a04
 8009858:	20001ec4 	.word	0x20001ec4
 800985c:	20001e94 	.word	0x20001e94
 8009860:	20001e90 	.word	0x20001e90
 8009864:	20001ef8 	.word	0x20001ef8

08009868 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b08a      	sub	sp, #40	; 0x28
 800986c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800986e:	2300      	movs	r3, #0
 8009870:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009872:	f000 fb07 	bl	8009e84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009876:	4b1c      	ldr	r3, [pc, #112]	; (80098e8 <xTimerCreateTimerTask+0x80>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d021      	beq.n	80098c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800987e:	2300      	movs	r3, #0
 8009880:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009882:	2300      	movs	r3, #0
 8009884:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009886:	1d3a      	adds	r2, r7, #4
 8009888:	f107 0108 	add.w	r1, r7, #8
 800988c:	f107 030c 	add.w	r3, r7, #12
 8009890:	4618      	mov	r0, r3
 8009892:	f7fd ffad 	bl	80077f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	9202      	str	r2, [sp, #8]
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	2302      	movs	r3, #2
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	2300      	movs	r3, #0
 80098a6:	460a      	mov	r2, r1
 80098a8:	4910      	ldr	r1, [pc, #64]	; (80098ec <xTimerCreateTimerTask+0x84>)
 80098aa:	4811      	ldr	r0, [pc, #68]	; (80098f0 <xTimerCreateTimerTask+0x88>)
 80098ac:	f7fe ff44 	bl	8008738 <xTaskCreateStatic>
 80098b0:	4603      	mov	r3, r0
 80098b2:	4a10      	ldr	r2, [pc, #64]	; (80098f4 <xTimerCreateTimerTask+0x8c>)
 80098b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80098b6:	4b0f      	ldr	r3, [pc, #60]	; (80098f4 <xTimerCreateTimerTask+0x8c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098be:	2301      	movs	r3, #1
 80098c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10a      	bne.n	80098de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80098c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	613b      	str	r3, [r7, #16]
}
 80098da:	bf00      	nop
 80098dc:	e7fe      	b.n	80098dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098de:	697b      	ldr	r3, [r7, #20]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3718      	adds	r7, #24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20001f34 	.word	0x20001f34
 80098ec:	0801164c 	.word	0x0801164c
 80098f0:	08009a2d 	.word	0x08009a2d
 80098f4:	20001f38 	.word	0x20001f38

080098f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b08a      	sub	sp, #40	; 0x28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
 8009904:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009906:	2300      	movs	r3, #0
 8009908:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10a      	bne.n	8009926 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	623b      	str	r3, [r7, #32]
}
 8009922:	bf00      	nop
 8009924:	e7fe      	b.n	8009924 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009926:	4b1a      	ldr	r3, [pc, #104]	; (8009990 <xTimerGenericCommand+0x98>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d02a      	beq.n	8009984 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	2b05      	cmp	r3, #5
 800993e:	dc18      	bgt.n	8009972 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009940:	f7ff fdb4 	bl	80094ac <xTaskGetSchedulerState>
 8009944:	4603      	mov	r3, r0
 8009946:	2b02      	cmp	r3, #2
 8009948:	d109      	bne.n	800995e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800994a:	4b11      	ldr	r3, [pc, #68]	; (8009990 <xTimerGenericCommand+0x98>)
 800994c:	6818      	ldr	r0, [r3, #0]
 800994e:	f107 0110 	add.w	r1, r7, #16
 8009952:	2300      	movs	r3, #0
 8009954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009956:	f7fe f957 	bl	8007c08 <xQueueGenericSend>
 800995a:	6278      	str	r0, [r7, #36]	; 0x24
 800995c:	e012      	b.n	8009984 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800995e:	4b0c      	ldr	r3, [pc, #48]	; (8009990 <xTimerGenericCommand+0x98>)
 8009960:	6818      	ldr	r0, [r3, #0]
 8009962:	f107 0110 	add.w	r1, r7, #16
 8009966:	2300      	movs	r3, #0
 8009968:	2200      	movs	r2, #0
 800996a:	f7fe f94d 	bl	8007c08 <xQueueGenericSend>
 800996e:	6278      	str	r0, [r7, #36]	; 0x24
 8009970:	e008      	b.n	8009984 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009972:	4b07      	ldr	r3, [pc, #28]	; (8009990 <xTimerGenericCommand+0x98>)
 8009974:	6818      	ldr	r0, [r3, #0]
 8009976:	f107 0110 	add.w	r1, r7, #16
 800997a:	2300      	movs	r3, #0
 800997c:	683a      	ldr	r2, [r7, #0]
 800997e:	f7fe fa41 	bl	8007e04 <xQueueGenericSendFromISR>
 8009982:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009986:	4618      	mov	r0, r3
 8009988:	3728      	adds	r7, #40	; 0x28
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	20001f34 	.word	0x20001f34

08009994 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b088      	sub	sp, #32
 8009998:	af02      	add	r7, sp, #8
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800999e:	4b22      	ldr	r3, [pc, #136]	; (8009a28 <prvProcessExpiredTimer+0x94>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	3304      	adds	r3, #4
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fd ffc3 	bl	8007938 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099b8:	f003 0304 	and.w	r3, r3, #4
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d022      	beq.n	8009a06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	699a      	ldr	r2, [r3, #24]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	18d1      	adds	r1, r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	6978      	ldr	r0, [r7, #20]
 80099ce:	f000 f8d1 	bl	8009b74 <prvInsertTimerInActiveList>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d01f      	beq.n	8009a18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099d8:	2300      	movs	r3, #0
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	2300      	movs	r3, #0
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	2100      	movs	r1, #0
 80099e2:	6978      	ldr	r0, [r7, #20]
 80099e4:	f7ff ff88 	bl	80098f8 <xTimerGenericCommand>
 80099e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d113      	bne.n	8009a18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	60fb      	str	r3, [r7, #12]
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a0c:	f023 0301 	bic.w	r3, r3, #1
 8009a10:	b2da      	uxtb	r2, r3
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	6978      	ldr	r0, [r7, #20]
 8009a1e:	4798      	blx	r3
}
 8009a20:	bf00      	nop
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	20001f2c 	.word	0x20001f2c

08009a2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a34:	f107 0308 	add.w	r3, r7, #8
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 f857 	bl	8009aec <prvGetNextExpireTime>
 8009a3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	4619      	mov	r1, r3
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f000 f803 	bl	8009a50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a4a:	f000 f8d5 	bl	8009bf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a4e:	e7f1      	b.n	8009a34 <prvTimerTask+0x8>

08009a50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a5a:	f7ff f93b 	bl	8008cd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a5e:	f107 0308 	add.w	r3, r7, #8
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 f866 	bl	8009b34 <prvSampleTimeNow>
 8009a68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d130      	bne.n	8009ad2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10a      	bne.n	8009a8c <prvProcessTimerOrBlockTask+0x3c>
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d806      	bhi.n	8009a8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a7e:	f7ff f937 	bl	8008cf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a82:	68f9      	ldr	r1, [r7, #12]
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f7ff ff85 	bl	8009994 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a8a:	e024      	b.n	8009ad6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d008      	beq.n	8009aa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a92:	4b13      	ldr	r3, [pc, #76]	; (8009ae0 <prvProcessTimerOrBlockTask+0x90>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d101      	bne.n	8009aa0 <prvProcessTimerOrBlockTask+0x50>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e000      	b.n	8009aa2 <prvProcessTimerOrBlockTask+0x52>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009aa4:	4b0f      	ldr	r3, [pc, #60]	; (8009ae4 <prvProcessTimerOrBlockTask+0x94>)
 8009aa6:	6818      	ldr	r0, [r3, #0]
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	f7fe fe0d 	bl	80086d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ab6:	f7ff f91b 	bl	8008cf0 <xTaskResumeAll>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d10a      	bne.n	8009ad6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ac0:	4b09      	ldr	r3, [pc, #36]	; (8009ae8 <prvProcessTimerOrBlockTask+0x98>)
 8009ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	f3bf 8f6f 	isb	sy
}
 8009ad0:	e001      	b.n	8009ad6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009ad2:	f7ff f90d 	bl	8008cf0 <xTaskResumeAll>
}
 8009ad6:	bf00      	nop
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	20001f30 	.word	0x20001f30
 8009ae4:	20001f34 	.word	0x20001f34
 8009ae8:	e000ed04 	.word	0xe000ed04

08009aec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009af4:	4b0e      	ldr	r3, [pc, #56]	; (8009b30 <prvGetNextExpireTime+0x44>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <prvGetNextExpireTime+0x16>
 8009afe:	2201      	movs	r2, #1
 8009b00:	e000      	b.n	8009b04 <prvGetNextExpireTime+0x18>
 8009b02:	2200      	movs	r2, #0
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d105      	bne.n	8009b1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b10:	4b07      	ldr	r3, [pc, #28]	; (8009b30 <prvGetNextExpireTime+0x44>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	60fb      	str	r3, [r7, #12]
 8009b1a:	e001      	b.n	8009b20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b20:	68fb      	ldr	r3, [r7, #12]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	20001f2c 	.word	0x20001f2c

08009b34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b3c:	f7ff f976 	bl	8008e2c <xTaskGetTickCount>
 8009b40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b42:	4b0b      	ldr	r3, [pc, #44]	; (8009b70 <prvSampleTimeNow+0x3c>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d205      	bcs.n	8009b58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b4c:	f000 f936 	bl	8009dbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	601a      	str	r2, [r3, #0]
 8009b56:	e002      	b.n	8009b5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b5e:	4a04      	ldr	r2, [pc, #16]	; (8009b70 <prvSampleTimeNow+0x3c>)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b64:	68fb      	ldr	r3, [r7, #12]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	20001f3c 	.word	0x20001f3c

08009b74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
 8009b80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b82:	2300      	movs	r3, #0
 8009b84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d812      	bhi.n	8009bc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	1ad2      	subs	r2, r2, r3
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d302      	bcc.n	8009bae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	617b      	str	r3, [r7, #20]
 8009bac:	e01b      	b.n	8009be6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009bae:	4b10      	ldr	r3, [pc, #64]	; (8009bf0 <prvInsertTimerInActiveList+0x7c>)
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	4610      	mov	r0, r2
 8009bba:	f7fd fe84 	bl	80078c6 <vListInsert>
 8009bbe:	e012      	b.n	8009be6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d206      	bcs.n	8009bd6 <prvInsertTimerInActiveList+0x62>
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d302      	bcc.n	8009bd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	617b      	str	r3, [r7, #20]
 8009bd4:	e007      	b.n	8009be6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bd6:	4b07      	ldr	r3, [pc, #28]	; (8009bf4 <prvInsertTimerInActiveList+0x80>)
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3304      	adds	r3, #4
 8009bde:	4619      	mov	r1, r3
 8009be0:	4610      	mov	r0, r2
 8009be2:	f7fd fe70 	bl	80078c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009be6:	697b      	ldr	r3, [r7, #20]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	20001f30 	.word	0x20001f30
 8009bf4:	20001f2c 	.word	0x20001f2c

08009bf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08e      	sub	sp, #56	; 0x38
 8009bfc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bfe:	e0ca      	b.n	8009d96 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	da18      	bge.n	8009c38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c06:	1d3b      	adds	r3, r7, #4
 8009c08:	3304      	adds	r3, #4
 8009c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10a      	bne.n	8009c28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	61fb      	str	r3, [r7, #28]
}
 8009c24:	bf00      	nop
 8009c26:	e7fe      	b.n	8009c26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c2e:	6850      	ldr	r0, [r2, #4]
 8009c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c32:	6892      	ldr	r2, [r2, #8]
 8009c34:	4611      	mov	r1, r2
 8009c36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f2c0 80aa 	blt.w	8009d94 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d004      	beq.n	8009c56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	3304      	adds	r3, #4
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fd fe71 	bl	8007938 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c56:	463b      	mov	r3, r7
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff ff6b 	bl	8009b34 <prvSampleTimeNow>
 8009c5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b09      	cmp	r3, #9
 8009c64:	f200 8097 	bhi.w	8009d96 <prvProcessReceivedCommands+0x19e>
 8009c68:	a201      	add	r2, pc, #4	; (adr r2, 8009c70 <prvProcessReceivedCommands+0x78>)
 8009c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6e:	bf00      	nop
 8009c70:	08009c99 	.word	0x08009c99
 8009c74:	08009c99 	.word	0x08009c99
 8009c78:	08009c99 	.word	0x08009c99
 8009c7c:	08009d0d 	.word	0x08009d0d
 8009c80:	08009d21 	.word	0x08009d21
 8009c84:	08009d6b 	.word	0x08009d6b
 8009c88:	08009c99 	.word	0x08009c99
 8009c8c:	08009c99 	.word	0x08009c99
 8009c90:	08009d0d 	.word	0x08009d0d
 8009c94:	08009d21 	.word	0x08009d21
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c9e:	f043 0301 	orr.w	r3, r3, #1
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	18d1      	adds	r1, r2, r3
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cb8:	f7ff ff5c 	bl	8009b74 <prvInsertTimerInActiveList>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d069      	beq.n	8009d96 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cd0:	f003 0304 	and.w	r3, r3, #4
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d05e      	beq.n	8009d96 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	441a      	add	r2, r3
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cea:	f7ff fe05 	bl	80098f8 <xTimerGenericCommand>
 8009cee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d14f      	bne.n	8009d96 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfa:	f383 8811 	msr	BASEPRI, r3
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f3bf 8f4f 	dsb	sy
 8009d06:	61bb      	str	r3, [r7, #24]
}
 8009d08:	bf00      	nop
 8009d0a:	e7fe      	b.n	8009d0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d12:	f023 0301 	bic.w	r3, r3, #1
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009d1e:	e03a      	b.n	8009d96 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d26:	f043 0301 	orr.w	r3, r3, #1
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10a      	bne.n	8009d56 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	617b      	str	r3, [r7, #20]
}
 8009d52:	bf00      	nop
 8009d54:	e7fe      	b.n	8009d54 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d58:	699a      	ldr	r2, [r3, #24]
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	18d1      	adds	r1, r2, r3
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d64:	f7ff ff06 	bl	8009b74 <prvInsertTimerInActiveList>
					break;
 8009d68:	e015      	b.n	8009d96 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d103      	bne.n	8009d80 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d7a:	f000 fbe1 	bl	800a540 <vPortFree>
 8009d7e:	e00a      	b.n	8009d96 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d86:	f023 0301 	bic.w	r3, r3, #1
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d92:	e000      	b.n	8009d96 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009d94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d96:	4b08      	ldr	r3, [pc, #32]	; (8009db8 <prvProcessReceivedCommands+0x1c0>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	1d39      	adds	r1, r7, #4
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fe f958 	bl	8008054 <xQueueReceive>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f47f af2a 	bne.w	8009c00 <prvProcessReceivedCommands+0x8>
	}
}
 8009dac:	bf00      	nop
 8009dae:	bf00      	nop
 8009db0:	3730      	adds	r7, #48	; 0x30
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20001f34 	.word	0x20001f34

08009dbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b088      	sub	sp, #32
 8009dc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dc2:	e048      	b.n	8009e56 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dc4:	4b2d      	ldr	r3, [pc, #180]	; (8009e7c <prvSwitchTimerLists+0xc0>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dce:	4b2b      	ldr	r3, [pc, #172]	; (8009e7c <prvSwitchTimerLists+0xc0>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	3304      	adds	r3, #4
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7fd fdab 	bl	8007938 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6a1b      	ldr	r3, [r3, #32]
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009df0:	f003 0304 	and.w	r3, r3, #4
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d02e      	beq.n	8009e56 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	693a      	ldr	r2, [r7, #16]
 8009dfe:	4413      	add	r3, r2
 8009e00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d90e      	bls.n	8009e28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e16:	4b19      	ldr	r3, [pc, #100]	; (8009e7c <prvSwitchTimerLists+0xc0>)
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	4619      	mov	r1, r3
 8009e20:	4610      	mov	r0, r2
 8009e22:	f7fd fd50 	bl	80078c6 <vListInsert>
 8009e26:	e016      	b.n	8009e56 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e28:	2300      	movs	r3, #0
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	693a      	ldr	r2, [r7, #16]
 8009e30:	2100      	movs	r1, #0
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f7ff fd60 	bl	80098f8 <xTimerGenericCommand>
 8009e38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10a      	bne.n	8009e56 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	603b      	str	r3, [r7, #0]
}
 8009e52:	bf00      	nop
 8009e54:	e7fe      	b.n	8009e54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e56:	4b09      	ldr	r3, [pc, #36]	; (8009e7c <prvSwitchTimerLists+0xc0>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1b1      	bne.n	8009dc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e60:	4b06      	ldr	r3, [pc, #24]	; (8009e7c <prvSwitchTimerLists+0xc0>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e66:	4b06      	ldr	r3, [pc, #24]	; (8009e80 <prvSwitchTimerLists+0xc4>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a04      	ldr	r2, [pc, #16]	; (8009e7c <prvSwitchTimerLists+0xc0>)
 8009e6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e6e:	4a04      	ldr	r2, [pc, #16]	; (8009e80 <prvSwitchTimerLists+0xc4>)
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	6013      	str	r3, [r2, #0]
}
 8009e74:	bf00      	nop
 8009e76:	3718      	adds	r7, #24
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	20001f2c 	.word	0x20001f2c
 8009e80:	20001f30 	.word	0x20001f30

08009e84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e8a:	f000 f96b 	bl	800a164 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e8e:	4b15      	ldr	r3, [pc, #84]	; (8009ee4 <prvCheckForValidListAndQueue+0x60>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d120      	bne.n	8009ed8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e96:	4814      	ldr	r0, [pc, #80]	; (8009ee8 <prvCheckForValidListAndQueue+0x64>)
 8009e98:	f7fd fcc4 	bl	8007824 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e9c:	4813      	ldr	r0, [pc, #76]	; (8009eec <prvCheckForValidListAndQueue+0x68>)
 8009e9e:	f7fd fcc1 	bl	8007824 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ea2:	4b13      	ldr	r3, [pc, #76]	; (8009ef0 <prvCheckForValidListAndQueue+0x6c>)
 8009ea4:	4a10      	ldr	r2, [pc, #64]	; (8009ee8 <prvCheckForValidListAndQueue+0x64>)
 8009ea6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ea8:	4b12      	ldr	r3, [pc, #72]	; (8009ef4 <prvCheckForValidListAndQueue+0x70>)
 8009eaa:	4a10      	ldr	r2, [pc, #64]	; (8009eec <prvCheckForValidListAndQueue+0x68>)
 8009eac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009eae:	2300      	movs	r3, #0
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	4b11      	ldr	r3, [pc, #68]	; (8009ef8 <prvCheckForValidListAndQueue+0x74>)
 8009eb4:	4a11      	ldr	r2, [pc, #68]	; (8009efc <prvCheckForValidListAndQueue+0x78>)
 8009eb6:	2110      	movs	r1, #16
 8009eb8:	200a      	movs	r0, #10
 8009eba:	f7fd fdcf 	bl	8007a5c <xQueueGenericCreateStatic>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	4a08      	ldr	r2, [pc, #32]	; (8009ee4 <prvCheckForValidListAndQueue+0x60>)
 8009ec2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ec4:	4b07      	ldr	r3, [pc, #28]	; (8009ee4 <prvCheckForValidListAndQueue+0x60>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d005      	beq.n	8009ed8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ecc:	4b05      	ldr	r3, [pc, #20]	; (8009ee4 <prvCheckForValidListAndQueue+0x60>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	490b      	ldr	r1, [pc, #44]	; (8009f00 <prvCheckForValidListAndQueue+0x7c>)
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe fbd2 	bl	800867c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ed8:	f000 f974 	bl	800a1c4 <vPortExitCritical>
}
 8009edc:	bf00      	nop
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20001f34 	.word	0x20001f34
 8009ee8:	20001f04 	.word	0x20001f04
 8009eec:	20001f18 	.word	0x20001f18
 8009ef0:	20001f2c 	.word	0x20001f2c
 8009ef4:	20001f30 	.word	0x20001f30
 8009ef8:	20001fe0 	.word	0x20001fe0
 8009efc:	20001f40 	.word	0x20001f40
 8009f00:	08011654 	.word	0x08011654

08009f04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3b04      	subs	r3, #4
 8009f14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3b04      	subs	r3, #4
 8009f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	f023 0201 	bic.w	r2, r3, #1
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	3b04      	subs	r3, #4
 8009f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f34:	4a0c      	ldr	r2, [pc, #48]	; (8009f68 <pxPortInitialiseStack+0x64>)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3b14      	subs	r3, #20
 8009f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	3b04      	subs	r3, #4
 8009f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f06f 0202 	mvn.w	r2, #2
 8009f52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3b20      	subs	r3, #32
 8009f58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3714      	adds	r7, #20
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	08009f6d 	.word	0x08009f6d

08009f6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b085      	sub	sp, #20
 8009f70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f72:	2300      	movs	r3, #0
 8009f74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f76:	4b12      	ldr	r3, [pc, #72]	; (8009fc0 <prvTaskExitError+0x54>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7e:	d00a      	beq.n	8009f96 <prvTaskExitError+0x2a>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	60fb      	str	r3, [r7, #12]
}
 8009f92:	bf00      	nop
 8009f94:	e7fe      	b.n	8009f94 <prvTaskExitError+0x28>
	__asm volatile
 8009f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	60bb      	str	r3, [r7, #8]
}
 8009fa8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009faa:	bf00      	nop
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d0fc      	beq.n	8009fac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009fb2:	bf00      	nop
 8009fb4:	bf00      	nop
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	2000001c 	.word	0x2000001c
	...

08009fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fd0:	4b07      	ldr	r3, [pc, #28]	; (8009ff0 <pxCurrentTCBConst2>)
 8009fd2:	6819      	ldr	r1, [r3, #0]
 8009fd4:	6808      	ldr	r0, [r1, #0]
 8009fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fda:	f380 8809 	msr	PSP, r0
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f04f 0000 	mov.w	r0, #0
 8009fe6:	f380 8811 	msr	BASEPRI, r0
 8009fea:	4770      	bx	lr
 8009fec:	f3af 8000 	nop.w

08009ff0 <pxCurrentTCBConst2>:
 8009ff0:	20001a04 	.word	0x20001a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop

08009ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ff8:	4808      	ldr	r0, [pc, #32]	; (800a01c <prvPortStartFirstTask+0x24>)
 8009ffa:	6800      	ldr	r0, [r0, #0]
 8009ffc:	6800      	ldr	r0, [r0, #0]
 8009ffe:	f380 8808 	msr	MSP, r0
 800a002:	f04f 0000 	mov.w	r0, #0
 800a006:	f380 8814 	msr	CONTROL, r0
 800a00a:	b662      	cpsie	i
 800a00c:	b661      	cpsie	f
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	df00      	svc	0
 800a018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a01a:	bf00      	nop
 800a01c:	e000ed08 	.word	0xe000ed08

0800a020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a026:	4b46      	ldr	r3, [pc, #280]	; (800a140 <xPortStartScheduler+0x120>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a46      	ldr	r2, [pc, #280]	; (800a144 <xPortStartScheduler+0x124>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d10a      	bne.n	800a046 <xPortStartScheduler+0x26>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	613b      	str	r3, [r7, #16]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a046:	4b3e      	ldr	r3, [pc, #248]	; (800a140 <xPortStartScheduler+0x120>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a3f      	ldr	r2, [pc, #252]	; (800a148 <xPortStartScheduler+0x128>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d10a      	bne.n	800a066 <xPortStartScheduler+0x46>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	60fb      	str	r3, [r7, #12]
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a066:	4b39      	ldr	r3, [pc, #228]	; (800a14c <xPortStartScheduler+0x12c>)
 800a068:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	22ff      	movs	r2, #255	; 0xff
 800a076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a080:	78fb      	ldrb	r3, [r7, #3]
 800a082:	b2db      	uxtb	r3, r3
 800a084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	4b31      	ldr	r3, [pc, #196]	; (800a150 <xPortStartScheduler+0x130>)
 800a08c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a08e:	4b31      	ldr	r3, [pc, #196]	; (800a154 <xPortStartScheduler+0x134>)
 800a090:	2207      	movs	r2, #7
 800a092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a094:	e009      	b.n	800a0aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a096:	4b2f      	ldr	r3, [pc, #188]	; (800a154 <xPortStartScheduler+0x134>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3b01      	subs	r3, #1
 800a09c:	4a2d      	ldr	r2, [pc, #180]	; (800a154 <xPortStartScheduler+0x134>)
 800a09e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0a0:	78fb      	ldrb	r3, [r7, #3]
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	005b      	lsls	r3, r3, #1
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0aa:	78fb      	ldrb	r3, [r7, #3]
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0b2:	2b80      	cmp	r3, #128	; 0x80
 800a0b4:	d0ef      	beq.n	800a096 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0b6:	4b27      	ldr	r3, [pc, #156]	; (800a154 <xPortStartScheduler+0x134>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f1c3 0307 	rsb	r3, r3, #7
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d00a      	beq.n	800a0d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	60bb      	str	r3, [r7, #8]
}
 800a0d4:	bf00      	nop
 800a0d6:	e7fe      	b.n	800a0d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0d8:	4b1e      	ldr	r3, [pc, #120]	; (800a154 <xPortStartScheduler+0x134>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	021b      	lsls	r3, r3, #8
 800a0de:	4a1d      	ldr	r2, [pc, #116]	; (800a154 <xPortStartScheduler+0x134>)
 800a0e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0e2:	4b1c      	ldr	r3, [pc, #112]	; (800a154 <xPortStartScheduler+0x134>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0ea:	4a1a      	ldr	r2, [pc, #104]	; (800a154 <xPortStartScheduler+0x134>)
 800a0ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0f6:	4b18      	ldr	r3, [pc, #96]	; (800a158 <xPortStartScheduler+0x138>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a17      	ldr	r2, [pc, #92]	; (800a158 <xPortStartScheduler+0x138>)
 800a0fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a102:	4b15      	ldr	r3, [pc, #84]	; (800a158 <xPortStartScheduler+0x138>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a14      	ldr	r2, [pc, #80]	; (800a158 <xPortStartScheduler+0x138>)
 800a108:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a10c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a10e:	f000 f8dd 	bl	800a2cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a112:	4b12      	ldr	r3, [pc, #72]	; (800a15c <xPortStartScheduler+0x13c>)
 800a114:	2200      	movs	r2, #0
 800a116:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a118:	f000 f8fc 	bl	800a314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a11c:	4b10      	ldr	r3, [pc, #64]	; (800a160 <xPortStartScheduler+0x140>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a0f      	ldr	r2, [pc, #60]	; (800a160 <xPortStartScheduler+0x140>)
 800a122:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a126:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a128:	f7ff ff66 	bl	8009ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a12c:	f7fe ff48 	bl	8008fc0 <vTaskSwitchContext>
	prvTaskExitError();
 800a130:	f7ff ff1c 	bl	8009f6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	e000ed00 	.word	0xe000ed00
 800a144:	410fc271 	.word	0x410fc271
 800a148:	410fc270 	.word	0x410fc270
 800a14c:	e000e400 	.word	0xe000e400
 800a150:	20002030 	.word	0x20002030
 800a154:	20002034 	.word	0x20002034
 800a158:	e000ed20 	.word	0xe000ed20
 800a15c:	2000001c 	.word	0x2000001c
 800a160:	e000ef34 	.word	0xe000ef34

0800a164 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
	__asm volatile
 800a16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	607b      	str	r3, [r7, #4]
}
 800a17c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a17e:	4b0f      	ldr	r3, [pc, #60]	; (800a1bc <vPortEnterCritical+0x58>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3301      	adds	r3, #1
 800a184:	4a0d      	ldr	r2, [pc, #52]	; (800a1bc <vPortEnterCritical+0x58>)
 800a186:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a188:	4b0c      	ldr	r3, [pc, #48]	; (800a1bc <vPortEnterCritical+0x58>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d10f      	bne.n	800a1b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a190:	4b0b      	ldr	r3, [pc, #44]	; (800a1c0 <vPortEnterCritical+0x5c>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00a      	beq.n	800a1b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19e:	f383 8811 	msr	BASEPRI, r3
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	603b      	str	r3, [r7, #0]
}
 800a1ac:	bf00      	nop
 800a1ae:	e7fe      	b.n	800a1ae <vPortEnterCritical+0x4a>
	}
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	2000001c 	.word	0x2000001c
 800a1c0:	e000ed04 	.word	0xe000ed04

0800a1c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1ca:	4b12      	ldr	r3, [pc, #72]	; (800a214 <vPortExitCritical+0x50>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10a      	bne.n	800a1e8 <vPortExitCritical+0x24>
	__asm volatile
 800a1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d6:	f383 8811 	msr	BASEPRI, r3
 800a1da:	f3bf 8f6f 	isb	sy
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	607b      	str	r3, [r7, #4]
}
 800a1e4:	bf00      	nop
 800a1e6:	e7fe      	b.n	800a1e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1e8:	4b0a      	ldr	r3, [pc, #40]	; (800a214 <vPortExitCritical+0x50>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	4a09      	ldr	r2, [pc, #36]	; (800a214 <vPortExitCritical+0x50>)
 800a1f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1f2:	4b08      	ldr	r3, [pc, #32]	; (800a214 <vPortExitCritical+0x50>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d105      	bne.n	800a206 <vPortExitCritical+0x42>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	f383 8811 	msr	BASEPRI, r3
}
 800a204:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a206:	bf00      	nop
 800a208:	370c      	adds	r7, #12
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	2000001c 	.word	0x2000001c
	...

0800a220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a220:	f3ef 8009 	mrs	r0, PSP
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	4b15      	ldr	r3, [pc, #84]	; (800a280 <pxCurrentTCBConst>)
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	f01e 0f10 	tst.w	lr, #16
 800a230:	bf08      	it	eq
 800a232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23a:	6010      	str	r0, [r2, #0]
 800a23c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a240:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a244:	f380 8811 	msr	BASEPRI, r0
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f7fe feb6 	bl	8008fc0 <vTaskSwitchContext>
 800a254:	f04f 0000 	mov.w	r0, #0
 800a258:	f380 8811 	msr	BASEPRI, r0
 800a25c:	bc09      	pop	{r0, r3}
 800a25e:	6819      	ldr	r1, [r3, #0]
 800a260:	6808      	ldr	r0, [r1, #0]
 800a262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a266:	f01e 0f10 	tst.w	lr, #16
 800a26a:	bf08      	it	eq
 800a26c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a270:	f380 8809 	msr	PSP, r0
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	f3af 8000 	nop.w

0800a280 <pxCurrentTCBConst>:
 800a280:	20001a04 	.word	0x20001a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a284:	bf00      	nop
 800a286:	bf00      	nop

0800a288 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	607b      	str	r3, [r7, #4]
}
 800a2a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2a2:	f7fe fdd3 	bl	8008e4c <xTaskIncrementTick>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d003      	beq.n	800a2b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2ac:	4b06      	ldr	r3, [pc, #24]	; (800a2c8 <xPortSysTickHandler+0x40>)
 800a2ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	f383 8811 	msr	BASEPRI, r3
}
 800a2be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2c0:	bf00      	nop
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	e000ed04 	.word	0xe000ed04

0800a2cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2d0:	4b0b      	ldr	r3, [pc, #44]	; (800a300 <vPortSetupTimerInterrupt+0x34>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2d6:	4b0b      	ldr	r3, [pc, #44]	; (800a304 <vPortSetupTimerInterrupt+0x38>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2dc:	4b0a      	ldr	r3, [pc, #40]	; (800a308 <vPortSetupTimerInterrupt+0x3c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a0a      	ldr	r2, [pc, #40]	; (800a30c <vPortSetupTimerInterrupt+0x40>)
 800a2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e6:	099b      	lsrs	r3, r3, #6
 800a2e8:	4a09      	ldr	r2, [pc, #36]	; (800a310 <vPortSetupTimerInterrupt+0x44>)
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2ee:	4b04      	ldr	r3, [pc, #16]	; (800a300 <vPortSetupTimerInterrupt+0x34>)
 800a2f0:	2207      	movs	r2, #7
 800a2f2:	601a      	str	r2, [r3, #0]
}
 800a2f4:	bf00      	nop
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	e000e010 	.word	0xe000e010
 800a304:	e000e018 	.word	0xe000e018
 800a308:	20000010 	.word	0x20000010
 800a30c:	10624dd3 	.word	0x10624dd3
 800a310:	e000e014 	.word	0xe000e014

0800a314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a324 <vPortEnableVFP+0x10>
 800a318:	6801      	ldr	r1, [r0, #0]
 800a31a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a31e:	6001      	str	r1, [r0, #0]
 800a320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a322:	bf00      	nop
 800a324:	e000ed88 	.word	0xe000ed88

0800a328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a32e:	f3ef 8305 	mrs	r3, IPSR
 800a332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2b0f      	cmp	r3, #15
 800a338:	d914      	bls.n	800a364 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a33a:	4a17      	ldr	r2, [pc, #92]	; (800a398 <vPortValidateInterruptPriority+0x70>)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4413      	add	r3, r2
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a344:	4b15      	ldr	r3, [pc, #84]	; (800a39c <vPortValidateInterruptPriority+0x74>)
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	7afa      	ldrb	r2, [r7, #11]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d20a      	bcs.n	800a364 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	607b      	str	r3, [r7, #4]
}
 800a360:	bf00      	nop
 800a362:	e7fe      	b.n	800a362 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a364:	4b0e      	ldr	r3, [pc, #56]	; (800a3a0 <vPortValidateInterruptPriority+0x78>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a36c:	4b0d      	ldr	r3, [pc, #52]	; (800a3a4 <vPortValidateInterruptPriority+0x7c>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	429a      	cmp	r2, r3
 800a372:	d90a      	bls.n	800a38a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	603b      	str	r3, [r7, #0]
}
 800a386:	bf00      	nop
 800a388:	e7fe      	b.n	800a388 <vPortValidateInterruptPriority+0x60>
	}
 800a38a:	bf00      	nop
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	e000e3f0 	.word	0xe000e3f0
 800a39c:	20002030 	.word	0x20002030
 800a3a0:	e000ed0c 	.word	0xe000ed0c
 800a3a4:	20002034 	.word	0x20002034

0800a3a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08a      	sub	sp, #40	; 0x28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3b4:	f7fe fc8e 	bl	8008cd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3b8:	4b5b      	ldr	r3, [pc, #364]	; (800a528 <pvPortMalloc+0x180>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d101      	bne.n	800a3c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3c0:	f000 f920 	bl	800a604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3c4:	4b59      	ldr	r3, [pc, #356]	; (800a52c <pvPortMalloc+0x184>)
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f040 8093 	bne.w	800a4f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d01d      	beq.n	800a414 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a3d8:	2208      	movs	r2, #8
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4413      	add	r3, r2
 800a3de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f003 0307 	and.w	r3, r3, #7
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d014      	beq.n	800a414 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f023 0307 	bic.w	r3, r3, #7
 800a3f0:	3308      	adds	r3, #8
 800a3f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f003 0307 	and.w	r3, r3, #7
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00a      	beq.n	800a414 <pvPortMalloc+0x6c>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	617b      	str	r3, [r7, #20]
}
 800a410:	bf00      	nop
 800a412:	e7fe      	b.n	800a412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d06e      	beq.n	800a4f8 <pvPortMalloc+0x150>
 800a41a:	4b45      	ldr	r3, [pc, #276]	; (800a530 <pvPortMalloc+0x188>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	429a      	cmp	r2, r3
 800a422:	d869      	bhi.n	800a4f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a424:	4b43      	ldr	r3, [pc, #268]	; (800a534 <pvPortMalloc+0x18c>)
 800a426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a428:	4b42      	ldr	r3, [pc, #264]	; (800a534 <pvPortMalloc+0x18c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a42e:	e004      	b.n	800a43a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	429a      	cmp	r2, r3
 800a442:	d903      	bls.n	800a44c <pvPortMalloc+0xa4>
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1f1      	bne.n	800a430 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a44c:	4b36      	ldr	r3, [pc, #216]	; (800a528 <pvPortMalloc+0x180>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a452:	429a      	cmp	r2, r3
 800a454:	d050      	beq.n	800a4f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2208      	movs	r2, #8
 800a45c:	4413      	add	r3, r2
 800a45e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	1ad2      	subs	r2, r2, r3
 800a470:	2308      	movs	r3, #8
 800a472:	005b      	lsls	r3, r3, #1
 800a474:	429a      	cmp	r2, r3
 800a476:	d91f      	bls.n	800a4b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4413      	add	r3, r2
 800a47e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	f003 0307 	and.w	r3, r3, #7
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00a      	beq.n	800a4a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	613b      	str	r3, [r7, #16]
}
 800a49c:	bf00      	nop
 800a49e:	e7fe      	b.n	800a49e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	685a      	ldr	r2, [r3, #4]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	1ad2      	subs	r2, r2, r3
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4b2:	69b8      	ldr	r0, [r7, #24]
 800a4b4:	f000 f908 	bl	800a6c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4b8:	4b1d      	ldr	r3, [pc, #116]	; (800a530 <pvPortMalloc+0x188>)
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	4a1b      	ldr	r2, [pc, #108]	; (800a530 <pvPortMalloc+0x188>)
 800a4c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4c6:	4b1a      	ldr	r3, [pc, #104]	; (800a530 <pvPortMalloc+0x188>)
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	4b1b      	ldr	r3, [pc, #108]	; (800a538 <pvPortMalloc+0x190>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d203      	bcs.n	800a4da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4d2:	4b17      	ldr	r3, [pc, #92]	; (800a530 <pvPortMalloc+0x188>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a18      	ldr	r2, [pc, #96]	; (800a538 <pvPortMalloc+0x190>)
 800a4d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	4b13      	ldr	r3, [pc, #76]	; (800a52c <pvPortMalloc+0x184>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a4ee:	4b13      	ldr	r3, [pc, #76]	; (800a53c <pvPortMalloc+0x194>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	4a11      	ldr	r2, [pc, #68]	; (800a53c <pvPortMalloc+0x194>)
 800a4f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4f8:	f7fe fbfa 	bl	8008cf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	f003 0307 	and.w	r3, r3, #7
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00a      	beq.n	800a51c <pvPortMalloc+0x174>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	60fb      	str	r3, [r7, #12]
}
 800a518:	bf00      	nop
 800a51a:	e7fe      	b.n	800a51a <pvPortMalloc+0x172>
	return pvReturn;
 800a51c:	69fb      	ldr	r3, [r7, #28]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3728      	adds	r7, #40	; 0x28
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20004750 	.word	0x20004750
 800a52c:	20004764 	.word	0x20004764
 800a530:	20004754 	.word	0x20004754
 800a534:	20004748 	.word	0x20004748
 800a538:	20004758 	.word	0x20004758
 800a53c:	2000475c 	.word	0x2000475c

0800a540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d04d      	beq.n	800a5ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a552:	2308      	movs	r3, #8
 800a554:	425b      	negs	r3, r3
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	4413      	add	r3, r2
 800a55a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	4b24      	ldr	r3, [pc, #144]	; (800a5f8 <vPortFree+0xb8>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4013      	ands	r3, r2
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10a      	bne.n	800a584 <vPortFree+0x44>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	60fb      	str	r3, [r7, #12]
}
 800a580:	bf00      	nop
 800a582:	e7fe      	b.n	800a582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00a      	beq.n	800a5a2 <vPortFree+0x62>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	60bb      	str	r3, [r7, #8]
}
 800a59e:	bf00      	nop
 800a5a0:	e7fe      	b.n	800a5a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	685a      	ldr	r2, [r3, #4]
 800a5a6:	4b14      	ldr	r3, [pc, #80]	; (800a5f8 <vPortFree+0xb8>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d01e      	beq.n	800a5ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d11a      	bne.n	800a5ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	685a      	ldr	r2, [r3, #4]
 800a5bc:	4b0e      	ldr	r3, [pc, #56]	; (800a5f8 <vPortFree+0xb8>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	43db      	mvns	r3, r3
 800a5c2:	401a      	ands	r2, r3
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5c8:	f7fe fb84 	bl	8008cd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	4b0a      	ldr	r3, [pc, #40]	; (800a5fc <vPortFree+0xbc>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	4a09      	ldr	r2, [pc, #36]	; (800a5fc <vPortFree+0xbc>)
 800a5d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5da:	6938      	ldr	r0, [r7, #16]
 800a5dc:	f000 f874 	bl	800a6c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a5e0:	4b07      	ldr	r3, [pc, #28]	; (800a600 <vPortFree+0xc0>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	4a06      	ldr	r2, [pc, #24]	; (800a600 <vPortFree+0xc0>)
 800a5e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a5ea:	f7fe fb81 	bl	8008cf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5ee:	bf00      	nop
 800a5f0:	3718      	adds	r7, #24
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20004764 	.word	0x20004764
 800a5fc:	20004754 	.word	0x20004754
 800a600:	20004760 	.word	0x20004760

0800a604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a60a:	f242 7310 	movw	r3, #10000	; 0x2710
 800a60e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a610:	4b27      	ldr	r3, [pc, #156]	; (800a6b0 <prvHeapInit+0xac>)
 800a612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f003 0307 	and.w	r3, r3, #7
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00c      	beq.n	800a638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3307      	adds	r3, #7
 800a622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f023 0307 	bic.w	r3, r3, #7
 800a62a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	1ad3      	subs	r3, r2, r3
 800a632:	4a1f      	ldr	r2, [pc, #124]	; (800a6b0 <prvHeapInit+0xac>)
 800a634:	4413      	add	r3, r2
 800a636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a63c:	4a1d      	ldr	r2, [pc, #116]	; (800a6b4 <prvHeapInit+0xb0>)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a642:	4b1c      	ldr	r3, [pc, #112]	; (800a6b4 <prvHeapInit+0xb0>)
 800a644:	2200      	movs	r2, #0
 800a646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	4413      	add	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a650:	2208      	movs	r2, #8
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	1a9b      	subs	r3, r3, r2
 800a656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f023 0307 	bic.w	r3, r3, #7
 800a65e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	4a15      	ldr	r2, [pc, #84]	; (800a6b8 <prvHeapInit+0xb4>)
 800a664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a666:	4b14      	ldr	r3, [pc, #80]	; (800a6b8 <prvHeapInit+0xb4>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2200      	movs	r2, #0
 800a66c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a66e:	4b12      	ldr	r3, [pc, #72]	; (800a6b8 <prvHeapInit+0xb4>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2200      	movs	r2, #0
 800a674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	1ad2      	subs	r2, r2, r3
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a684:	4b0c      	ldr	r3, [pc, #48]	; (800a6b8 <prvHeapInit+0xb4>)
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	4a0a      	ldr	r2, [pc, #40]	; (800a6bc <prvHeapInit+0xb8>)
 800a692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	4a09      	ldr	r2, [pc, #36]	; (800a6c0 <prvHeapInit+0xbc>)
 800a69a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a69c:	4b09      	ldr	r3, [pc, #36]	; (800a6c4 <prvHeapInit+0xc0>)
 800a69e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a6a2:	601a      	str	r2, [r3, #0]
}
 800a6a4:	bf00      	nop
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	20002038 	.word	0x20002038
 800a6b4:	20004748 	.word	0x20004748
 800a6b8:	20004750 	.word	0x20004750
 800a6bc:	20004758 	.word	0x20004758
 800a6c0:	20004754 	.word	0x20004754
 800a6c4:	20004764 	.word	0x20004764

0800a6c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6d0:	4b28      	ldr	r3, [pc, #160]	; (800a774 <prvInsertBlockIntoFreeList+0xac>)
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	e002      	b.n	800a6dc <prvInsertBlockIntoFreeList+0x14>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	60fb      	str	r3, [r7, #12]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d8f7      	bhi.n	800a6d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d108      	bne.n	800a70a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	441a      	add	r2, r3
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	441a      	add	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d118      	bne.n	800a750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	4b15      	ldr	r3, [pc, #84]	; (800a778 <prvInsertBlockIntoFreeList+0xb0>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	429a      	cmp	r2, r3
 800a728:	d00d      	beq.n	800a746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	685a      	ldr	r2, [r3, #4]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	441a      	add	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	e008      	b.n	800a758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a746:	4b0c      	ldr	r3, [pc, #48]	; (800a778 <prvInsertBlockIntoFreeList+0xb0>)
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	e003      	b.n	800a758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d002      	beq.n	800a766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a766:	bf00      	nop
 800a768:	3714      	adds	r7, #20
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	20004748 	.word	0x20004748
 800a778:	20004750 	.word	0x20004750

0800a77c <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 800a786:	2300      	movs	r3, #0
 800a788:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 800a78a:	f107 030c 	add.w	r3, r7, #12
 800a78e:	683a      	ldr	r2, [r7, #0]
 800a790:	2101      	movs	r1, #1
 800a792:	4618      	mov	r0, r3
 800a794:	f000 fa1e 	bl	800abd4 <ai_platform_get_activations_map>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d03f      	beq.n	800a81e <network_configure_activations+0xa2>
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800a79e:	4b22      	ldr	r3, [pc, #136]	; (800a828 <network_configure_activations+0xac>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800a7a4:	4b20      	ldr	r3, [pc, #128]	; (800a828 <network_configure_activations+0xac>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	60da      	str	r2, [r3, #12]
    conv1d_output_array.data = AI_PTR(activations_map[0] + 128);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	3380      	adds	r3, #128	; 0x80
 800a7ae:	4a1f      	ldr	r2, [pc, #124]	; (800a82c <network_configure_activations+0xb0>)
 800a7b0:	6093      	str	r3, [r2, #8]
    conv1d_output_array.data_start = AI_PTR(activations_map[0] + 128);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3380      	adds	r3, #128	; 0x80
 800a7b6:	4a1d      	ldr	r2, [pc, #116]	; (800a82c <network_configure_activations+0xb0>)
 800a7b8:	60d3      	str	r3, [r2, #12]
    conv1d_1_output_array.data = AI_PTR(activations_map[0] + 64);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	3340      	adds	r3, #64	; 0x40
 800a7be:	4a1c      	ldr	r2, [pc, #112]	; (800a830 <network_configure_activations+0xb4>)
 800a7c0:	6093      	str	r3, [r2, #8]
    conv1d_1_output_array.data_start = AI_PTR(activations_map[0] + 64);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	3340      	adds	r3, #64	; 0x40
 800a7c6:	4a1a      	ldr	r2, [pc, #104]	; (800a830 <network_configure_activations+0xb4>)
 800a7c8:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(activations_map[0] + 160);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	33a0      	adds	r3, #160	; 0xa0
 800a7ce:	4a19      	ldr	r2, [pc, #100]	; (800a834 <network_configure_activations+0xb8>)
 800a7d0:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations_map[0] + 160);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	33a0      	adds	r3, #160	; 0xa0
 800a7d6:	4a17      	ldr	r2, [pc, #92]	; (800a834 <network_configure_activations+0xb8>)
 800a7d8:	60d3      	str	r3, [r2, #12]
    dense_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	4a16      	ldr	r2, [pc, #88]	; (800a838 <network_configure_activations+0xbc>)
 800a7de:	6093      	str	r3, [r2, #8]
    dense_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	4a15      	ldr	r2, [pc, #84]	; (800a838 <network_configure_activations+0xbc>)
 800a7e4:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations_map[0] + 100);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	3364      	adds	r3, #100	; 0x64
 800a7ea:	4a14      	ldr	r2, [pc, #80]	; (800a83c <network_configure_activations+0xc0>)
 800a7ec:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations_map[0] + 100);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3364      	adds	r3, #100	; 0x64
 800a7f2:	4a12      	ldr	r2, [pc, #72]	; (800a83c <network_configure_activations+0xc0>)
 800a7f4:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(NULL);
 800a7f6:	4b12      	ldr	r3, [pc, #72]	; (800a840 <network_configure_activations+0xc4>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	609a      	str	r2, [r3, #8]
    dense_1_nl_output_array.data_start = AI_PTR(NULL);
 800a7fc:	4b10      	ldr	r3, [pc, #64]	; (800a840 <network_configure_activations+0xc4>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	60da      	str	r2, [r3, #12]
    conv1d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	4a0f      	ldr	r2, [pc, #60]	; (800a844 <network_configure_activations+0xc8>)
 800a806:	6093      	str	r3, [r2, #8]
    conv1d_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	4a0e      	ldr	r2, [pc, #56]	; (800a844 <network_configure_activations+0xc8>)
 800a80c:	60d3      	str	r3, [r2, #12]
    conv1d_1_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	4a0d      	ldr	r2, [pc, #52]	; (800a848 <network_configure_activations+0xcc>)
 800a812:	6093      	str	r3, [r2, #8]
    conv1d_1_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	4a0c      	ldr	r2, [pc, #48]	; (800a848 <network_configure_activations+0xcc>)
 800a818:	60d3      	str	r3, [r2, #12]
    
    return true;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e000      	b.n	800a820 <network_configure_activations+0xa4>
  }
  return false;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	20000020 	.word	0x20000020
 800a82c:	20000030 	.word	0x20000030
 800a830:	20000040 	.word	0x20000040
 800a834:	20000050 	.word	0x20000050
 800a838:	20000060 	.word	0x20000060
 800a83c:	20000070 	.word	0x20000070
 800a840:	20000080 	.word	0x20000080
 800a844:	20000110 	.word	0x20000110
 800a848:	20000120 	.word	0x20000120

0800a84c <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 800a856:	2300      	movs	r3, #0
 800a858:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 800a85a:	f107 030c 	add.w	r3, r7, #12
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	2101      	movs	r1, #1
 800a862:	4618      	mov	r0, r3
 800a864:	f000 f982 	bl	800ab6c <ai_platform_get_weights_map>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f000 8082 	beq.w	800a974 <network_configure_weights+0x128>
    /* Updating weights with array addresses */
    
    conv1d_weights_array.format |= AI_FMT_FLAG_CONST;
 800a870:	4b43      	ldr	r3, [pc, #268]	; (800a980 <network_configure_weights+0x134>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a878:	4a41      	ldr	r2, [pc, #260]	; (800a980 <network_configure_weights+0x134>)
 800a87a:	6013      	str	r3, [r2, #0]
    conv1d_weights_array.data = AI_PTR(weights_map[0] + 0);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4a40      	ldr	r2, [pc, #256]	; (800a980 <network_configure_weights+0x134>)
 800a880:	6093      	str	r3, [r2, #8]
    conv1d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	4a3e      	ldr	r2, [pc, #248]	; (800a980 <network_configure_weights+0x134>)
 800a886:	60d3      	str	r3, [r2, #12]
    conv1d_bias_array.format |= AI_FMT_FLAG_CONST;
 800a888:	4b3e      	ldr	r3, [pc, #248]	; (800a984 <network_configure_weights+0x138>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a890:	4a3c      	ldr	r2, [pc, #240]	; (800a984 <network_configure_weights+0x138>)
 800a892:	6013      	str	r3, [r2, #0]
    conv1d_bias_array.data = AI_PTR(weights_map[0] + 1920);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 800a89a:	4a3a      	ldr	r2, [pc, #232]	; (800a984 <network_configure_weights+0x138>)
 800a89c:	6093      	str	r3, [r2, #8]
    conv1d_bias_array.data_start = AI_PTR(weights_map[0] + 1920);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 800a8a4:	4a37      	ldr	r2, [pc, #220]	; (800a984 <network_configure_weights+0x138>)
 800a8a6:	60d3      	str	r3, [r2, #12]
    conv1d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800a8a8:	4b37      	ldr	r3, [pc, #220]	; (800a988 <network_configure_weights+0x13c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8b0:	4a35      	ldr	r2, [pc, #212]	; (800a988 <network_configure_weights+0x13c>)
 800a8b2:	6013      	str	r3, [r2, #0]
    conv1d_1_weights_array.data = AI_PTR(weights_map[0] + 1984);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800a8ba:	4a33      	ldr	r2, [pc, #204]	; (800a988 <network_configure_weights+0x13c>)
 800a8bc:	6093      	str	r3, [r2, #8]
    conv1d_1_weights_array.data_start = AI_PTR(weights_map[0] + 1984);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800a8c4:	4a30      	ldr	r2, [pc, #192]	; (800a988 <network_configure_weights+0x13c>)
 800a8c6:	60d3      	str	r3, [r2, #12]
    conv1d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800a8c8:	4b30      	ldr	r3, [pc, #192]	; (800a98c <network_configure_weights+0x140>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8d0:	4a2e      	ldr	r2, [pc, #184]	; (800a98c <network_configure_weights+0x140>)
 800a8d2:	6013      	str	r3, [r2, #0]
    conv1d_1_bias_array.data = AI_PTR(weights_map[0] + 4544);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 800a8da:	4a2c      	ldr	r2, [pc, #176]	; (800a98c <network_configure_weights+0x140>)
 800a8dc:	6093      	str	r3, [r2, #8]
    conv1d_1_bias_array.data_start = AI_PTR(weights_map[0] + 4544);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 800a8e4:	4a29      	ldr	r2, [pc, #164]	; (800a98c <network_configure_weights+0x140>)
 800a8e6:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800a8e8:	4b29      	ldr	r3, [pc, #164]	; (800a990 <network_configure_weights+0x144>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8f0:	4a27      	ldr	r2, [pc, #156]	; (800a990 <network_configure_weights+0x144>)
 800a8f2:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights_map[0] + 4576);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 800a8fa:	4a25      	ldr	r2, [pc, #148]	; (800a990 <network_configure_weights+0x144>)
 800a8fc:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights_map[0] + 4576);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 800a904:	4a22      	ldr	r2, [pc, #136]	; (800a990 <network_configure_weights+0x144>)
 800a906:	60d3      	str	r3, [r2, #12]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800a908:	4b22      	ldr	r3, [pc, #136]	; (800a994 <network_configure_weights+0x148>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a910:	4a20      	ldr	r2, [pc, #128]	; (800a994 <network_configure_weights+0x148>)
 800a912:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights_map[0] + 6976);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 800a91a:	4a1e      	ldr	r2, [pc, #120]	; (800a994 <network_configure_weights+0x148>)
 800a91c:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights_map[0] + 6976);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 800a924:	4a1b      	ldr	r2, [pc, #108]	; (800a994 <network_configure_weights+0x148>)
 800a926:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800a928:	4b1b      	ldr	r3, [pc, #108]	; (800a998 <network_configure_weights+0x14c>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a930:	4a19      	ldr	r2, [pc, #100]	; (800a998 <network_configure_weights+0x14c>)
 800a932:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights_map[0] + 7076);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 800a93a:	3304      	adds	r3, #4
 800a93c:	4a16      	ldr	r2, [pc, #88]	; (800a998 <network_configure_weights+0x14c>)
 800a93e:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights_map[0] + 7076);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 800a946:	3304      	adds	r3, #4
 800a948:	4a13      	ldr	r2, [pc, #76]	; (800a998 <network_configure_weights+0x14c>)
 800a94a:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800a94c:	4b13      	ldr	r3, [pc, #76]	; (800a99c <network_configure_weights+0x150>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a954:	4a11      	ldr	r2, [pc, #68]	; (800a99c <network_configure_weights+0x150>)
 800a956:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 7476);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800a95e:	3314      	adds	r3, #20
 800a960:	4a0e      	ldr	r2, [pc, #56]	; (800a99c <network_configure_weights+0x150>)
 800a962:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights_map[0] + 7476);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800a96a:	3314      	adds	r3, #20
 800a96c:	4a0b      	ldr	r2, [pc, #44]	; (800a99c <network_configure_weights+0x150>)
 800a96e:	60d3      	str	r3, [r2, #12]
    return true;
 800a970:	2301      	movs	r3, #1
 800a972:	e000      	b.n	800a976 <network_configure_weights+0x12a>
  }
  return false;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	20000090 	.word	0x20000090
 800a984:	200000a0 	.word	0x200000a0
 800a988:	200000b0 	.word	0x200000b0
 800a98c:	200000c0 	.word	0x200000c0
 800a990:	200000d0 	.word	0x200000d0
 800a994:	200000e0 	.word	0x200000e0
 800a998:	200000f0 	.word	0x200000f0
 800a99c:	20000100 	.word	0x20000100

0800a9a0 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/
AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b0a0      	sub	sp, #128	; 0x80
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fa72 	bl	800ae94 <ai_platform_context_acquire>
 800a9b0:	67f8      	str	r0, [r7, #124]	; 0x7c

  if (report && net_ctx)
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d041      	beq.n	800aa3c <ai_network_get_info+0x9c>
 800a9b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d03e      	beq.n	800aa3c <ai_network_get_info+0x9c>
  {
    ai_network_report r = {
 800a9be:	f107 0308 	add.w	r3, r7, #8
 800a9c2:	2274      	movs	r2, #116	; 0x74
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f003 fe52 	bl	800e670 <memset>
 800a9cc:	4b1e      	ldr	r3, [pc, #120]	; (800aa48 <ai_network_get_info+0xa8>)
 800a9ce:	60bb      	str	r3, [r7, #8]
 800a9d0:	4b1e      	ldr	r3, [pc, #120]	; (800aa4c <ai_network_get_info+0xac>)
 800a9d2:	60fb      	str	r3, [r7, #12]
 800a9d4:	4b1e      	ldr	r3, [pc, #120]	; (800aa50 <ai_network_get_info+0xb0>)
 800a9d6:	613b      	str	r3, [r7, #16]
 800a9d8:	4b1e      	ldr	r3, [pc, #120]	; (800aa54 <ai_network_get_info+0xb4>)
 800a9da:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800a9dc:	f000 f92e 	bl	800ac3c <ai_platform_runtime_get_revision>
 800a9e0:	4603      	mov	r3, r0
    ai_network_report r = {
 800a9e2:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 800a9e4:	f000 f96c 	bl	800acc0 <ai_platform_runtime_get_version>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 800a9ec:	4b1a      	ldr	r3, [pc, #104]	; (800aa58 <ai_network_get_info+0xb8>)
 800a9ee:	623b      	str	r3, [r7, #32]
 800a9f0:	2307      	movs	r3, #7
 800a9f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 800a9f6:	f000 f9a5 	bl	800ad44 <ai_platform_api_get_version>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800a9fe:	f000 f9f5 	bl	800adec <ai_platform_interface_api_get_version>
 800aa02:	4603      	mov	r3, r0
 800aa04:	633b      	str	r3, [r7, #48]	; 0x30
    ai_network_report r = {
 800aa06:	f244 132e 	movw	r3, #16686	; 0x412e
 800aa0a:	637b      	str	r3, [r7, #52]	; 0x34
      .activations       = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800aa0c:	f107 0308 	add.w	r3, r7, #8
 800aa10:	4619      	mov	r1, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fb00 	bl	800b018 <ai_platform_api_get_network_report>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	f083 0301 	eor.w	r3, r3, #1
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <ai_network_get_info+0x88>
 800aa24:	2300      	movs	r3, #0
 800aa26:	e00a      	b.n	800aa3e <ai_network_get_info+0x9e>

    *report = r;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f107 0308 	add.w	r3, r7, #8
 800aa30:	2274      	movs	r2, #116	; 0x74
 800aa32:	4619      	mov	r1, r3
 800aa34:	f003 fe0e 	bl	800e654 <memcpy>
    return true;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e000      	b.n	800aa3e <ai_network_get_info+0x9e>
  }
  return false;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3780      	adds	r7, #128	; 0x80
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	0801165c 	.word	0x0801165c
 800aa4c:	08011664 	.word	0x08011664
 800aa50:	08011688 	.word	0x08011688
 800aa54:	080116a4 	.word	0x080116a4
 800aa58:	080116bc 	.word	0x080116bc

0800aa5c <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fa5d 	bl	800af24 <ai_platform_network_get_error>
 800aa6a:	4603      	mov	r3, r0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af02      	add	r7, sp, #8
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800aa7e:	2300      	movs	r3, #0
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	2304      	movs	r3, #4
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	2301      	movs	r3, #1
 800aa88:	4a04      	ldr	r2, [pc, #16]	; (800aa9c <ai_network_create+0x28>)
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fd65 	bl	800b55c <ai_platform_network_create>
 800aa92:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	20000880 	.word	0x20000880

0800aaa0 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fe2d 	bl	800b708 <ai_platform_network_destroy>
 800aaae:	4603      	mov	r3, r0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fe97 	bl	800b7f8 <ai_platform_network_init>
 800aaca:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <ai_network_init+0x1e>
 800aad2:	2300      	movs	r3, #0
 800aad4:	e028      	b.n	800ab28 <ai_network_init+0x70>

  ai_bool ok = true;
 800aad6:	2301      	movs	r3, #1
 800aad8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f7ff feb5 	bl	800a84c <network_configure_weights>
 800aae2:	4603      	mov	r3, r0
 800aae4:	461a      	mov	r2, r3
 800aae6:	7afb      	ldrb	r3, [r7, #11]
 800aae8:	4013      	ands	r3, r2
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	bf14      	ite	ne
 800aaee:	2301      	movne	r3, #1
 800aaf0:	2300      	moveq	r3, #0
 800aaf2:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f7ff fe40 	bl	800a77c <network_configure_activations>
 800aafc:	4603      	mov	r3, r0
 800aafe:	461a      	mov	r2, r3
 800ab00:	7afb      	ldrb	r3, [r7, #11]
 800ab02:	4013      	ands	r3, r2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	bf14      	ite	ne
 800ab08:	2301      	movne	r3, #1
 800ab0a:	2300      	moveq	r3, #0
 800ab0c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 ff84 	bl	800ba1c <ai_platform_network_post_init>
 800ab14:	4603      	mov	r3, r0
 800ab16:	461a      	mov	r2, r3
 800ab18:	7afb      	ldrb	r3, [r7, #11]
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	bf14      	ite	ne
 800ab20:	2301      	movne	r3, #1
 800ab22:	2300      	moveq	r3, #0
 800ab24:	72fb      	strb	r3, [r7, #11]

  return ok;
 800ab26:	7afb      	ldrb	r3, [r7, #11]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	68b9      	ldr	r1, [r7, #8]
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f000 ffff 	bl	800bb44 <ai_platform_network_process>
 800ab46:	4603      	mov	r3, r0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 800ab50:	b480      	push	{r7}
 800ab52:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_network_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_map);
 800ab54:	4b02      	ldr	r3, [pc, #8]	; (800ab60 <ai_network_data_weights_get+0x10>)

}
 800ab56:	4618      	mov	r0, r3
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	080134a8 	.word	0x080134a8

0800ab64 <_ai_platform_acquire_crc>:
 800ab64:	2001      	movs	r0, #1
 800ab66:	4770      	bx	lr

0800ab68 <_ai_platform_release_crc>:
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop

0800ab6c <ai_platform_get_weights_map>:
 800ab6c:	b132      	cbz	r2, 800ab7c <ai_platform_get_weights_map+0x10>
 800ab6e:	6912      	ldr	r2, [r2, #16]
 800ab70:	b122      	cbz	r2, 800ab7c <ai_platform_get_weights_map+0x10>
 800ab72:	b110      	cbz	r0, 800ab7a <ai_platform_get_weights_map+0xe>
 800ab74:	b921      	cbnz	r1, 800ab80 <ai_platform_get_weights_map+0x14>
 800ab76:	4608      	mov	r0, r1
 800ab78:	4770      	bx	lr
 800ab7a:	4770      	bx	lr
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	4770      	bx	lr
 800ab80:	b470      	push	{r4, r5, r6}
 800ab82:	4b13      	ldr	r3, [pc, #76]	; (800abd0 <ai_platform_get_weights_map+0x64>)
 800ab84:	6815      	ldr	r5, [r2, #0]
 800ab86:	429d      	cmp	r5, r3
 800ab88:	d007      	beq.n	800ab9a <ai_platform_get_weights_map+0x2e>
 800ab8a:	6002      	str	r2, [r0, #0]
 800ab8c:	f1a1 0001 	sub.w	r0, r1, #1
 800ab90:	fab0 f080 	clz	r0, r0
 800ab94:	0940      	lsrs	r0, r0, #5
 800ab96:	bc70      	pop	{r4, r5, r6}
 800ab98:	4770      	bx	lr
 800ab9a:	6854      	ldr	r4, [r2, #4]
 800ab9c:	42ac      	cmp	r4, r5
 800ab9e:	f102 0204 	add.w	r2, r2, #4
 800aba2:	d011      	beq.n	800abc8 <ai_platform_get_weights_map+0x5c>
 800aba4:	1f03      	subs	r3, r0, #4
 800aba6:	4616      	mov	r6, r2
 800aba8:	2000      	movs	r0, #0
 800abaa:	e003      	b.n	800abb4 <ai_platform_get_weights_map+0x48>
 800abac:	f856 4f04 	ldr.w	r4, [r6, #4]!
 800abb0:	42ac      	cmp	r4, r5
 800abb2:	d009      	beq.n	800abc8 <ai_platform_get_weights_map+0x5c>
 800abb4:	3001      	adds	r0, #1
 800abb6:	4281      	cmp	r1, r0
 800abb8:	f843 4f04 	str.w	r4, [r3, #4]!
 800abbc:	d1f6      	bne.n	800abac <ai_platform_get_weights_map+0x40>
 800abbe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800abc2:	4b03      	ldr	r3, [pc, #12]	; (800abd0 <ai_platform_get_weights_map+0x64>)
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d001      	beq.n	800abcc <ai_platform_get_weights_map+0x60>
 800abc8:	2000      	movs	r0, #0
 800abca:	e7e4      	b.n	800ab96 <ai_platform_get_weights_map+0x2a>
 800abcc:	2001      	movs	r0, #1
 800abce:	e7e2      	b.n	800ab96 <ai_platform_get_weights_map+0x2a>
 800abd0:	a1facade 	.word	0xa1facade

0800abd4 <ai_platform_get_activations_map>:
 800abd4:	b132      	cbz	r2, 800abe4 <ai_platform_get_activations_map+0x10>
 800abd6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800abd8:	b122      	cbz	r2, 800abe4 <ai_platform_get_activations_map+0x10>
 800abda:	b110      	cbz	r0, 800abe2 <ai_platform_get_activations_map+0xe>
 800abdc:	b921      	cbnz	r1, 800abe8 <ai_platform_get_activations_map+0x14>
 800abde:	4608      	mov	r0, r1
 800abe0:	4770      	bx	lr
 800abe2:	4770      	bx	lr
 800abe4:	4610      	mov	r0, r2
 800abe6:	4770      	bx	lr
 800abe8:	b470      	push	{r4, r5, r6}
 800abea:	4b13      	ldr	r3, [pc, #76]	; (800ac38 <ai_platform_get_activations_map+0x64>)
 800abec:	6815      	ldr	r5, [r2, #0]
 800abee:	429d      	cmp	r5, r3
 800abf0:	d007      	beq.n	800ac02 <ai_platform_get_activations_map+0x2e>
 800abf2:	6002      	str	r2, [r0, #0]
 800abf4:	f1a1 0001 	sub.w	r0, r1, #1
 800abf8:	fab0 f080 	clz	r0, r0
 800abfc:	0940      	lsrs	r0, r0, #5
 800abfe:	bc70      	pop	{r4, r5, r6}
 800ac00:	4770      	bx	lr
 800ac02:	6854      	ldr	r4, [r2, #4]
 800ac04:	42ac      	cmp	r4, r5
 800ac06:	f102 0204 	add.w	r2, r2, #4
 800ac0a:	d011      	beq.n	800ac30 <ai_platform_get_activations_map+0x5c>
 800ac0c:	1f03      	subs	r3, r0, #4
 800ac0e:	4616      	mov	r6, r2
 800ac10:	2000      	movs	r0, #0
 800ac12:	e003      	b.n	800ac1c <ai_platform_get_activations_map+0x48>
 800ac14:	f856 4f04 	ldr.w	r4, [r6, #4]!
 800ac18:	42ac      	cmp	r4, r5
 800ac1a:	d009      	beq.n	800ac30 <ai_platform_get_activations_map+0x5c>
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	4281      	cmp	r1, r0
 800ac20:	f843 4f04 	str.w	r4, [r3, #4]!
 800ac24:	d1f6      	bne.n	800ac14 <ai_platform_get_activations_map+0x40>
 800ac26:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ac2a:	4b03      	ldr	r3, [pc, #12]	; (800ac38 <ai_platform_get_activations_map+0x64>)
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d001      	beq.n	800ac34 <ai_platform_get_activations_map+0x60>
 800ac30:	2000      	movs	r0, #0
 800ac32:	e7e4      	b.n	800abfe <ai_platform_get_activations_map+0x2a>
 800ac34:	2001      	movs	r0, #1
 800ac36:	e7e2      	b.n	800abfe <ai_platform_get_activations_map+0x2a>
 800ac38:	a1facade 	.word	0xa1facade

0800ac3c <ai_platform_runtime_get_revision>:
 800ac3c:	b508      	push	{r3, lr}
 800ac3e:	4a17      	ldr	r2, [pc, #92]	; (800ac9c <ai_platform_runtime_get_revision+0x60>)
 800ac40:	6813      	ldr	r3, [r2, #0]
 800ac42:	f023 0301 	bic.w	r3, r3, #1
 800ac46:	6013      	str	r3, [r2, #0]
 800ac48:	f7ff ff8c 	bl	800ab64 <_ai_platform_acquire_crc>
 800ac4c:	4b14      	ldr	r3, [pc, #80]	; (800aca0 <ai_platform_runtime_get_revision+0x64>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac58:	d00d      	beq.n	800ac76 <ai_platform_runtime_get_revision+0x3a>
 800ac5a:	4b12      	ldr	r3, [pc, #72]	; (800aca4 <ai_platform_runtime_get_revision+0x68>)
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	601a      	str	r2, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	2a00      	cmp	r2, #0
 800ac64:	d1fc      	bne.n	800ac60 <ai_platform_runtime_get_revision+0x24>
 800ac66:	4b10      	ldr	r3, [pc, #64]	; (800aca8 <ai_platform_runtime_get_revision+0x6c>)
 800ac68:	4a10      	ldr	r2, [pc, #64]	; (800acac <ai_platform_runtime_get_revision+0x70>)
 800ac6a:	601a      	str	r2, [r3, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	4b10      	ldr	r3, [pc, #64]	; (800acb0 <ai_platform_runtime_get_revision+0x74>)
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d00e      	beq.n	800ac92 <ai_platform_runtime_get_revision+0x56>
 800ac74:	e7fe      	b.n	800ac74 <ai_platform_runtime_get_revision+0x38>
 800ac76:	4b0f      	ldr	r3, [pc, #60]	; (800acb4 <ai_platform_runtime_get_revision+0x78>)
 800ac78:	2201      	movs	r2, #1
 800ac7a:	601a      	str	r2, [r3, #0]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	2a00      	cmp	r2, #0
 800ac80:	d1fc      	bne.n	800ac7c <ai_platform_runtime_get_revision+0x40>
 800ac82:	4b0d      	ldr	r3, [pc, #52]	; (800acb8 <ai_platform_runtime_get_revision+0x7c>)
 800ac84:	4a09      	ldr	r2, [pc, #36]	; (800acac <ai_platform_runtime_get_revision+0x70>)
 800ac86:	601a      	str	r2, [r3, #0]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	4b09      	ldr	r3, [pc, #36]	; (800acb0 <ai_platform_runtime_get_revision+0x74>)
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d000      	beq.n	800ac92 <ai_platform_runtime_get_revision+0x56>
 800ac90:	e7fe      	b.n	800ac90 <ai_platform_runtime_get_revision+0x54>
 800ac92:	f7ff ff69 	bl	800ab68 <_ai_platform_release_crc>
 800ac96:	4809      	ldr	r0, [pc, #36]	; (800acbc <ai_platform_runtime_get_revision+0x80>)
 800ac98:	bd08      	pop	{r3, pc}
 800ac9a:	bf00      	nop
 800ac9c:	e0002000 	.word	0xe0002000
 800aca0:	e0042000 	.word	0xe0042000
 800aca4:	58024c08 	.word	0x58024c08
 800aca8:	58024c00 	.word	0x58024c00
 800acac:	f407a5c2 	.word	0xf407a5c2
 800acb0:	b5e8b5cd 	.word	0xb5e8b5cd
 800acb4:	40023008 	.word	0x40023008
 800acb8:	40023000 	.word	0x40023000
 800acbc:	080134b4 	.word	0x080134b4

0800acc0 <ai_platform_runtime_get_version>:
 800acc0:	b500      	push	{lr}
 800acc2:	4a18      	ldr	r2, [pc, #96]	; (800ad24 <ai_platform_runtime_get_version+0x64>)
 800acc4:	6813      	ldr	r3, [r2, #0]
 800acc6:	f023 0301 	bic.w	r3, r3, #1
 800acca:	6013      	str	r3, [r2, #0]
 800accc:	b083      	sub	sp, #12
 800acce:	f7ff ff49 	bl	800ab64 <_ai_platform_acquire_crc>
 800acd2:	4b15      	ldr	r3, [pc, #84]	; (800ad28 <ai_platform_runtime_get_version+0x68>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800acda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acde:	d00d      	beq.n	800acfc <ai_platform_runtime_get_version+0x3c>
 800ace0:	4b12      	ldr	r3, [pc, #72]	; (800ad2c <ai_platform_runtime_get_version+0x6c>)
 800ace2:	2201      	movs	r2, #1
 800ace4:	601a      	str	r2, [r3, #0]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	2a00      	cmp	r2, #0
 800acea:	d1fc      	bne.n	800ace6 <ai_platform_runtime_get_version+0x26>
 800acec:	4b10      	ldr	r3, [pc, #64]	; (800ad30 <ai_platform_runtime_get_version+0x70>)
 800acee:	4a11      	ldr	r2, [pc, #68]	; (800ad34 <ai_platform_runtime_get_version+0x74>)
 800acf0:	601a      	str	r2, [r3, #0]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	4b10      	ldr	r3, [pc, #64]	; (800ad38 <ai_platform_runtime_get_version+0x78>)
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d00e      	beq.n	800ad18 <ai_platform_runtime_get_version+0x58>
 800acfa:	e7fe      	b.n	800acfa <ai_platform_runtime_get_version+0x3a>
 800acfc:	4b0f      	ldr	r3, [pc, #60]	; (800ad3c <ai_platform_runtime_get_version+0x7c>)
 800acfe:	2201      	movs	r2, #1
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	2a00      	cmp	r2, #0
 800ad06:	d1fc      	bne.n	800ad02 <ai_platform_runtime_get_version+0x42>
 800ad08:	4b0d      	ldr	r3, [pc, #52]	; (800ad40 <ai_platform_runtime_get_version+0x80>)
 800ad0a:	4a0a      	ldr	r2, [pc, #40]	; (800ad34 <ai_platform_runtime_get_version+0x74>)
 800ad0c:	601a      	str	r2, [r3, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	4b09      	ldr	r3, [pc, #36]	; (800ad38 <ai_platform_runtime_get_version+0x78>)
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d000      	beq.n	800ad18 <ai_platform_runtime_get_version+0x58>
 800ad16:	e7fe      	b.n	800ad16 <ai_platform_runtime_get_version+0x56>
 800ad18:	f7ff ff26 	bl	800ab68 <_ai_platform_release_crc>
 800ad1c:	2007      	movs	r0, #7
 800ad1e:	b003      	add	sp, #12
 800ad20:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad24:	e0002000 	.word	0xe0002000
 800ad28:	e0042000 	.word	0xe0042000
 800ad2c:	58024c08 	.word	0x58024c08
 800ad30:	58024c00 	.word	0x58024c00
 800ad34:	f407a5c2 	.word	0xf407a5c2
 800ad38:	b5e8b5cd 	.word	0xb5e8b5cd
 800ad3c:	40023008 	.word	0x40023008
 800ad40:	40023000 	.word	0x40023000

0800ad44 <ai_platform_api_get_version>:
 800ad44:	b500      	push	{lr}
 800ad46:	4a20      	ldr	r2, [pc, #128]	; (800adc8 <ai_platform_api_get_version+0x84>)
 800ad48:	6813      	ldr	r3, [r2, #0]
 800ad4a:	f023 0301 	bic.w	r3, r3, #1
 800ad4e:	6013      	str	r3, [r2, #0]
 800ad50:	b083      	sub	sp, #12
 800ad52:	f7ff ff07 	bl	800ab64 <_ai_platform_acquire_crc>
 800ad56:	4b1d      	ldr	r3, [pc, #116]	; (800adcc <ai_platform_api_get_version+0x88>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad62:	d00d      	beq.n	800ad80 <ai_platform_api_get_version+0x3c>
 800ad64:	4b1a      	ldr	r3, [pc, #104]	; (800add0 <ai_platform_api_get_version+0x8c>)
 800ad66:	2201      	movs	r2, #1
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	2a00      	cmp	r2, #0
 800ad6e:	d1fc      	bne.n	800ad6a <ai_platform_api_get_version+0x26>
 800ad70:	4b18      	ldr	r3, [pc, #96]	; (800add4 <ai_platform_api_get_version+0x90>)
 800ad72:	4a19      	ldr	r2, [pc, #100]	; (800add8 <ai_platform_api_get_version+0x94>)
 800ad74:	601a      	str	r2, [r3, #0]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	4b18      	ldr	r3, [pc, #96]	; (800addc <ai_platform_api_get_version+0x98>)
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d00e      	beq.n	800ad9c <ai_platform_api_get_version+0x58>
 800ad7e:	e7fe      	b.n	800ad7e <ai_platform_api_get_version+0x3a>
 800ad80:	4b17      	ldr	r3, [pc, #92]	; (800ade0 <ai_platform_api_get_version+0x9c>)
 800ad82:	2201      	movs	r2, #1
 800ad84:	601a      	str	r2, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	2a00      	cmp	r2, #0
 800ad8a:	d1fc      	bne.n	800ad86 <ai_platform_api_get_version+0x42>
 800ad8c:	4b15      	ldr	r3, [pc, #84]	; (800ade4 <ai_platform_api_get_version+0xa0>)
 800ad8e:	4a12      	ldr	r2, [pc, #72]	; (800add8 <ai_platform_api_get_version+0x94>)
 800ad90:	601a      	str	r2, [r3, #0]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	4b11      	ldr	r3, [pc, #68]	; (800addc <ai_platform_api_get_version+0x98>)
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d000      	beq.n	800ad9c <ai_platform_api_get_version+0x58>
 800ad9a:	e7fe      	b.n	800ad9a <ai_platform_api_get_version+0x56>
 800ad9c:	f7ff fee4 	bl	800ab68 <_ai_platform_release_crc>
 800ada0:	4b11      	ldr	r3, [pc, #68]	; (800ade8 <ai_platform_api_get_version+0xa4>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2000      	movs	r0, #0
 800ada6:	b2da      	uxtb	r2, r3
 800ada8:	f362 0007 	bfi	r0, r2, #0, #8
 800adac:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800adb0:	f362 200f 	bfi	r0, r2, #8, #8
 800adb4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800adb8:	f362 4017 	bfi	r0, r2, #16, #8
 800adbc:	0e1b      	lsrs	r3, r3, #24
 800adbe:	f363 601f 	bfi	r0, r3, #24, #8
 800adc2:	b003      	add	sp, #12
 800adc4:	f85d fb04 	ldr.w	pc, [sp], #4
 800adc8:	e0002000 	.word	0xe0002000
 800adcc:	e0042000 	.word	0xe0042000
 800add0:	58024c08 	.word	0x58024c08
 800add4:	58024c00 	.word	0x58024c00
 800add8:	f407a5c2 	.word	0xf407a5c2
 800addc:	b5e8b5cd 	.word	0xb5e8b5cd
 800ade0:	40023008 	.word	0x40023008
 800ade4:	40023000 	.word	0x40023000
 800ade8:	080134b8 	.word	0x080134b8

0800adec <ai_platform_interface_api_get_version>:
 800adec:	b500      	push	{lr}
 800adee:	4a20      	ldr	r2, [pc, #128]	; (800ae70 <ai_platform_interface_api_get_version+0x84>)
 800adf0:	6813      	ldr	r3, [r2, #0]
 800adf2:	f023 0301 	bic.w	r3, r3, #1
 800adf6:	6013      	str	r3, [r2, #0]
 800adf8:	b083      	sub	sp, #12
 800adfa:	f7ff feb3 	bl	800ab64 <_ai_platform_acquire_crc>
 800adfe:	4b1d      	ldr	r3, [pc, #116]	; (800ae74 <ai_platform_interface_api_get_version+0x88>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae0a:	d00d      	beq.n	800ae28 <ai_platform_interface_api_get_version+0x3c>
 800ae0c:	4b1a      	ldr	r3, [pc, #104]	; (800ae78 <ai_platform_interface_api_get_version+0x8c>)
 800ae0e:	2201      	movs	r2, #1
 800ae10:	601a      	str	r2, [r3, #0]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	2a00      	cmp	r2, #0
 800ae16:	d1fc      	bne.n	800ae12 <ai_platform_interface_api_get_version+0x26>
 800ae18:	4b18      	ldr	r3, [pc, #96]	; (800ae7c <ai_platform_interface_api_get_version+0x90>)
 800ae1a:	4a19      	ldr	r2, [pc, #100]	; (800ae80 <ai_platform_interface_api_get_version+0x94>)
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	4b18      	ldr	r3, [pc, #96]	; (800ae84 <ai_platform_interface_api_get_version+0x98>)
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d00e      	beq.n	800ae44 <ai_platform_interface_api_get_version+0x58>
 800ae26:	e7fe      	b.n	800ae26 <ai_platform_interface_api_get_version+0x3a>
 800ae28:	4b17      	ldr	r3, [pc, #92]	; (800ae88 <ai_platform_interface_api_get_version+0x9c>)
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	2a00      	cmp	r2, #0
 800ae32:	d1fc      	bne.n	800ae2e <ai_platform_interface_api_get_version+0x42>
 800ae34:	4b15      	ldr	r3, [pc, #84]	; (800ae8c <ai_platform_interface_api_get_version+0xa0>)
 800ae36:	4a12      	ldr	r2, [pc, #72]	; (800ae80 <ai_platform_interface_api_get_version+0x94>)
 800ae38:	601a      	str	r2, [r3, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	4b11      	ldr	r3, [pc, #68]	; (800ae84 <ai_platform_interface_api_get_version+0x98>)
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d000      	beq.n	800ae44 <ai_platform_interface_api_get_version+0x58>
 800ae42:	e7fe      	b.n	800ae42 <ai_platform_interface_api_get_version+0x56>
 800ae44:	f7ff fe90 	bl	800ab68 <_ai_platform_release_crc>
 800ae48:	4b11      	ldr	r3, [pc, #68]	; (800ae90 <ai_platform_interface_api_get_version+0xa4>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	f362 0007 	bfi	r0, r2, #0, #8
 800ae54:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ae58:	f362 200f 	bfi	r0, r2, #8, #8
 800ae5c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ae60:	f362 4017 	bfi	r0, r2, #16, #8
 800ae64:	0e1b      	lsrs	r3, r3, #24
 800ae66:	f363 601f 	bfi	r0, r3, #24, #8
 800ae6a:	b003      	add	sp, #12
 800ae6c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae70:	e0002000 	.word	0xe0002000
 800ae74:	e0042000 	.word	0xe0042000
 800ae78:	58024c08 	.word	0x58024c08
 800ae7c:	58024c00 	.word	0x58024c00
 800ae80:	f407a5c2 	.word	0xf407a5c2
 800ae84:	b5e8b5cd 	.word	0xb5e8b5cd
 800ae88:	40023008 	.word	0x40023008
 800ae8c:	40023000 	.word	0x40023000
 800ae90:	080134bc 	.word	0x080134bc

0800ae94 <ai_platform_context_acquire>:
 800ae94:	b510      	push	{r4, lr}
 800ae96:	4604      	mov	r4, r0
 800ae98:	b120      	cbz	r0, 800aea4 <ai_platform_context_acquire+0x10>
 800ae9a:	4b19      	ldr	r3, [pc, #100]	; (800af00 <ai_platform_context_acquire+0x6c>)
 800ae9c:	6802      	ldr	r2, [r0, #0]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	bf18      	it	ne
 800aea2:	2400      	movne	r4, #0
 800aea4:	4a17      	ldr	r2, [pc, #92]	; (800af04 <ai_platform_context_acquire+0x70>)
 800aea6:	6813      	ldr	r3, [r2, #0]
 800aea8:	f023 0301 	bic.w	r3, r3, #1
 800aeac:	6013      	str	r3, [r2, #0]
 800aeae:	f7ff fe59 	bl	800ab64 <_ai_platform_acquire_crc>
 800aeb2:	4b15      	ldr	r3, [pc, #84]	; (800af08 <ai_platform_context_acquire+0x74>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aeba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aebe:	d00d      	beq.n	800aedc <ai_platform_context_acquire+0x48>
 800aec0:	4b12      	ldr	r3, [pc, #72]	; (800af0c <ai_platform_context_acquire+0x78>)
 800aec2:	2201      	movs	r2, #1
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	2a00      	cmp	r2, #0
 800aeca:	d1fc      	bne.n	800aec6 <ai_platform_context_acquire+0x32>
 800aecc:	4b10      	ldr	r3, [pc, #64]	; (800af10 <ai_platform_context_acquire+0x7c>)
 800aece:	4a11      	ldr	r2, [pc, #68]	; (800af14 <ai_platform_context_acquire+0x80>)
 800aed0:	601a      	str	r2, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	4b10      	ldr	r3, [pc, #64]	; (800af18 <ai_platform_context_acquire+0x84>)
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d00e      	beq.n	800aef8 <ai_platform_context_acquire+0x64>
 800aeda:	e7fe      	b.n	800aeda <ai_platform_context_acquire+0x46>
 800aedc:	4b0f      	ldr	r3, [pc, #60]	; (800af1c <ai_platform_context_acquire+0x88>)
 800aede:	2201      	movs	r2, #1
 800aee0:	601a      	str	r2, [r3, #0]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	2a00      	cmp	r2, #0
 800aee6:	d1fc      	bne.n	800aee2 <ai_platform_context_acquire+0x4e>
 800aee8:	4b0d      	ldr	r3, [pc, #52]	; (800af20 <ai_platform_context_acquire+0x8c>)
 800aeea:	4a0a      	ldr	r2, [pc, #40]	; (800af14 <ai_platform_context_acquire+0x80>)
 800aeec:	601a      	str	r2, [r3, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	4b09      	ldr	r3, [pc, #36]	; (800af18 <ai_platform_context_acquire+0x84>)
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d000      	beq.n	800aef8 <ai_platform_context_acquire+0x64>
 800aef6:	e7fe      	b.n	800aef6 <ai_platform_context_acquire+0x62>
 800aef8:	f7ff fe36 	bl	800ab68 <_ai_platform_release_crc>
 800aefc:	4620      	mov	r0, r4
 800aefe:	bd10      	pop	{r4, pc}
 800af00:	a1c00100 	.word	0xa1c00100
 800af04:	e0002000 	.word	0xe0002000
 800af08:	e0042000 	.word	0xe0042000
 800af0c:	58024c08 	.word	0x58024c08
 800af10:	58024c00 	.word	0x58024c00
 800af14:	f407a5c2 	.word	0xf407a5c2
 800af18:	b5e8b5cd 	.word	0xb5e8b5cd
 800af1c:	40023008 	.word	0x40023008
 800af20:	40023000 	.word	0x40023000

0800af24 <ai_platform_network_get_error>:
 800af24:	b510      	push	{r4, lr}
 800af26:	b120      	cbz	r0, 800af32 <ai_platform_network_get_error+0xe>
 800af28:	4b32      	ldr	r3, [pc, #200]	; (800aff4 <ai_platform_network_get_error+0xd0>)
 800af2a:	6802      	ldr	r2, [r0, #0]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	4604      	mov	r4, r0
 800af30:	d02e      	beq.n	800af90 <ai_platform_network_get_error+0x6c>
 800af32:	4a31      	ldr	r2, [pc, #196]	; (800aff8 <ai_platform_network_get_error+0xd4>)
 800af34:	6813      	ldr	r3, [r2, #0]
 800af36:	f023 0301 	bic.w	r3, r3, #1
 800af3a:	6013      	str	r3, [r2, #0]
 800af3c:	f7ff fe12 	bl	800ab64 <_ai_platform_acquire_crc>
 800af40:	4b2e      	ldr	r3, [pc, #184]	; (800affc <ai_platform_network_get_error+0xd8>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af4c:	d00d      	beq.n	800af6a <ai_platform_network_get_error+0x46>
 800af4e:	4b2c      	ldr	r3, [pc, #176]	; (800b000 <ai_platform_network_get_error+0xdc>)
 800af50:	2201      	movs	r2, #1
 800af52:	601a      	str	r2, [r3, #0]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	2a00      	cmp	r2, #0
 800af58:	d1fc      	bne.n	800af54 <ai_platform_network_get_error+0x30>
 800af5a:	4b2a      	ldr	r3, [pc, #168]	; (800b004 <ai_platform_network_get_error+0xe0>)
 800af5c:	4a2a      	ldr	r2, [pc, #168]	; (800b008 <ai_platform_network_get_error+0xe4>)
 800af5e:	601a      	str	r2, [r3, #0]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	4b2a      	ldr	r3, [pc, #168]	; (800b00c <ai_platform_network_get_error+0xe8>)
 800af64:	429a      	cmp	r2, r3
 800af66:	d00d      	beq.n	800af84 <ai_platform_network_get_error+0x60>
 800af68:	e7fe      	b.n	800af68 <ai_platform_network_get_error+0x44>
 800af6a:	4b29      	ldr	r3, [pc, #164]	; (800b010 <ai_platform_network_get_error+0xec>)
 800af6c:	2201      	movs	r2, #1
 800af6e:	601a      	str	r2, [r3, #0]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	2a00      	cmp	r2, #0
 800af74:	d1fc      	bne.n	800af70 <ai_platform_network_get_error+0x4c>
 800af76:	4b27      	ldr	r3, [pc, #156]	; (800b014 <ai_platform_network_get_error+0xf0>)
 800af78:	4a23      	ldr	r2, [pc, #140]	; (800b008 <ai_platform_network_get_error+0xe4>)
 800af7a:	601a      	str	r2, [r3, #0]
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	4b23      	ldr	r3, [pc, #140]	; (800b00c <ai_platform_network_get_error+0xe8>)
 800af80:	429a      	cmp	r2, r3
 800af82:	d104      	bne.n	800af8e <ai_platform_network_get_error+0x6a>
 800af84:	f7ff fdf0 	bl	800ab68 <_ai_platform_release_crc>
 800af88:	f241 0010 	movw	r0, #4112	; 0x1010
 800af8c:	bd10      	pop	{r4, pc}
 800af8e:	e7fe      	b.n	800af8e <ai_platform_network_get_error+0x6a>
 800af90:	4a19      	ldr	r2, [pc, #100]	; (800aff8 <ai_platform_network_get_error+0xd4>)
 800af92:	6813      	ldr	r3, [r2, #0]
 800af94:	f023 0301 	bic.w	r3, r3, #1
 800af98:	6013      	str	r3, [r2, #0]
 800af9a:	f7ff fde3 	bl	800ab64 <_ai_platform_acquire_crc>
 800af9e:	4b17      	ldr	r3, [pc, #92]	; (800affc <ai_platform_network_get_error+0xd8>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800afa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afaa:	d00d      	beq.n	800afc8 <ai_platform_network_get_error+0xa4>
 800afac:	4b14      	ldr	r3, [pc, #80]	; (800b000 <ai_platform_network_get_error+0xdc>)
 800afae:	2201      	movs	r2, #1
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	2a00      	cmp	r2, #0
 800afb6:	d1fc      	bne.n	800afb2 <ai_platform_network_get_error+0x8e>
 800afb8:	4b12      	ldr	r3, [pc, #72]	; (800b004 <ai_platform_network_get_error+0xe0>)
 800afba:	4a13      	ldr	r2, [pc, #76]	; (800b008 <ai_platform_network_get_error+0xe4>)
 800afbc:	601a      	str	r2, [r3, #0]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	4b12      	ldr	r3, [pc, #72]	; (800b00c <ai_platform_network_get_error+0xe8>)
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d00e      	beq.n	800afe4 <ai_platform_network_get_error+0xc0>
 800afc6:	e7fe      	b.n	800afc6 <ai_platform_network_get_error+0xa2>
 800afc8:	4b11      	ldr	r3, [pc, #68]	; (800b010 <ai_platform_network_get_error+0xec>)
 800afca:	2201      	movs	r2, #1
 800afcc:	601a      	str	r2, [r3, #0]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	2a00      	cmp	r2, #0
 800afd2:	d1fc      	bne.n	800afce <ai_platform_network_get_error+0xaa>
 800afd4:	4b0f      	ldr	r3, [pc, #60]	; (800b014 <ai_platform_network_get_error+0xf0>)
 800afd6:	4a0c      	ldr	r2, [pc, #48]	; (800b008 <ai_platform_network_get_error+0xe4>)
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	4b0b      	ldr	r3, [pc, #44]	; (800b00c <ai_platform_network_get_error+0xe8>)
 800afde:	429a      	cmp	r2, r3
 800afe0:	d000      	beq.n	800afe4 <ai_platform_network_get_error+0xc0>
 800afe2:	e7fe      	b.n	800afe2 <ai_platform_network_get_error+0xbe>
 800afe4:	f7ff fdc0 	bl	800ab68 <_ai_platform_release_crc>
 800afe8:	f104 0010 	add.w	r0, r4, #16
 800afec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aff0:	f001 b828 	b.w	800c044 <core_get_error>
 800aff4:	a1c00100 	.word	0xa1c00100
 800aff8:	e0002000 	.word	0xe0002000
 800affc:	e0042000 	.word	0xe0042000
 800b000:	58024c08 	.word	0x58024c08
 800b004:	58024c00 	.word	0x58024c00
 800b008:	f407a5c2 	.word	0xf407a5c2
 800b00c:	b5e8b5cd 	.word	0xb5e8b5cd
 800b010:	40023008 	.word	0x40023008
 800b014:	40023000 	.word	0x40023000

0800b018 <ai_platform_api_get_network_report>:
 800b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01c:	b083      	sub	sp, #12
 800b01e:	b120      	cbz	r0, 800b02a <ai_platform_api_get_network_report+0x12>
 800b020:	4ba1      	ldr	r3, [pc, #644]	; (800b2a8 <ai_platform_api_get_network_report+0x290>)
 800b022:	6802      	ldr	r2, [r0, #0]
 800b024:	429a      	cmp	r2, r3
 800b026:	4605      	mov	r5, r0
 800b028:	d030      	beq.n	800b08c <ai_platform_api_get_network_report+0x74>
 800b02a:	4aa0      	ldr	r2, [pc, #640]	; (800b2ac <ai_platform_api_get_network_report+0x294>)
 800b02c:	6813      	ldr	r3, [r2, #0]
 800b02e:	f023 0301 	bic.w	r3, r3, #1
 800b032:	6013      	str	r3, [r2, #0]
 800b034:	f7ff fd96 	bl	800ab64 <_ai_platform_acquire_crc>
 800b038:	4b9d      	ldr	r3, [pc, #628]	; (800b2b0 <ai_platform_api_get_network_report+0x298>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b044:	d00d      	beq.n	800b062 <ai_platform_api_get_network_report+0x4a>
 800b046:	4b9b      	ldr	r3, [pc, #620]	; (800b2b4 <ai_platform_api_get_network_report+0x29c>)
 800b048:	2201      	movs	r2, #1
 800b04a:	601a      	str	r2, [r3, #0]
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	2a00      	cmp	r2, #0
 800b050:	d1fc      	bne.n	800b04c <ai_platform_api_get_network_report+0x34>
 800b052:	4b99      	ldr	r3, [pc, #612]	; (800b2b8 <ai_platform_api_get_network_report+0x2a0>)
 800b054:	4a99      	ldr	r2, [pc, #612]	; (800b2bc <ai_platform_api_get_network_report+0x2a4>)
 800b056:	601a      	str	r2, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	4b99      	ldr	r3, [pc, #612]	; (800b2c0 <ai_platform_api_get_network_report+0x2a8>)
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d00d      	beq.n	800b07c <ai_platform_api_get_network_report+0x64>
 800b060:	e7fe      	b.n	800b060 <ai_platform_api_get_network_report+0x48>
 800b062:	4b98      	ldr	r3, [pc, #608]	; (800b2c4 <ai_platform_api_get_network_report+0x2ac>)
 800b064:	2201      	movs	r2, #1
 800b066:	601a      	str	r2, [r3, #0]
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	2a00      	cmp	r2, #0
 800b06c:	d1fc      	bne.n	800b068 <ai_platform_api_get_network_report+0x50>
 800b06e:	4b96      	ldr	r3, [pc, #600]	; (800b2c8 <ai_platform_api_get_network_report+0x2b0>)
 800b070:	4a92      	ldr	r2, [pc, #584]	; (800b2bc <ai_platform_api_get_network_report+0x2a4>)
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	4b92      	ldr	r3, [pc, #584]	; (800b2c0 <ai_platform_api_get_network_report+0x2a8>)
 800b078:	429a      	cmp	r2, r3
 800b07a:	d106      	bne.n	800b08a <ai_platform_api_get_network_report+0x72>
 800b07c:	f7ff fd74 	bl	800ab68 <_ai_platform_release_crc>
 800b080:	2600      	movs	r6, #0
 800b082:	4630      	mov	r0, r6
 800b084:	b003      	add	sp, #12
 800b086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b08a:	e7fe      	b.n	800b08a <ai_platform_api_get_network_report+0x72>
 800b08c:	4a87      	ldr	r2, [pc, #540]	; (800b2ac <ai_platform_api_get_network_report+0x294>)
 800b08e:	6813      	ldr	r3, [r2, #0]
 800b090:	f023 0301 	bic.w	r3, r3, #1
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	460c      	mov	r4, r1
 800b098:	f7ff fd64 	bl	800ab64 <_ai_platform_acquire_crc>
 800b09c:	4b84      	ldr	r3, [pc, #528]	; (800b2b0 <ai_platform_api_get_network_report+0x298>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0a8:	d00d      	beq.n	800b0c6 <ai_platform_api_get_network_report+0xae>
 800b0aa:	4b82      	ldr	r3, [pc, #520]	; (800b2b4 <ai_platform_api_get_network_report+0x29c>)
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	601a      	str	r2, [r3, #0]
 800b0b0:	681a      	ldr	r2, [r3, #0]
 800b0b2:	2a00      	cmp	r2, #0
 800b0b4:	d1fc      	bne.n	800b0b0 <ai_platform_api_get_network_report+0x98>
 800b0b6:	4b80      	ldr	r3, [pc, #512]	; (800b2b8 <ai_platform_api_get_network_report+0x2a0>)
 800b0b8:	4a80      	ldr	r2, [pc, #512]	; (800b2bc <ai_platform_api_get_network_report+0x2a4>)
 800b0ba:	601a      	str	r2, [r3, #0]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	4b80      	ldr	r3, [pc, #512]	; (800b2c0 <ai_platform_api_get_network_report+0x2a8>)
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d00e      	beq.n	800b0e2 <ai_platform_api_get_network_report+0xca>
 800b0c4:	e7fe      	b.n	800b0c4 <ai_platform_api_get_network_report+0xac>
 800b0c6:	4b7f      	ldr	r3, [pc, #508]	; (800b2c4 <ai_platform_api_get_network_report+0x2ac>)
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	601a      	str	r2, [r3, #0]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	2a00      	cmp	r2, #0
 800b0d0:	d1fc      	bne.n	800b0cc <ai_platform_api_get_network_report+0xb4>
 800b0d2:	4b7d      	ldr	r3, [pc, #500]	; (800b2c8 <ai_platform_api_get_network_report+0x2b0>)
 800b0d4:	4a79      	ldr	r2, [pc, #484]	; (800b2bc <ai_platform_api_get_network_report+0x2a4>)
 800b0d6:	601a      	str	r2, [r3, #0]
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	4b79      	ldr	r3, [pc, #484]	; (800b2c0 <ai_platform_api_get_network_report+0x2a8>)
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d000      	beq.n	800b0e2 <ai_platform_api_get_network_report+0xca>
 800b0e0:	e7fe      	b.n	800b0e0 <ai_platform_api_get_network_report+0xc8>
 800b0e2:	f7ff fd41 	bl	800ab68 <_ai_platform_release_crc>
 800b0e6:	2c00      	cmp	r4, #0
 800b0e8:	d07c      	beq.n	800b1e4 <ai_platform_api_get_network_report+0x1cc>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	66e3      	str	r3, [r4, #108]	; 0x6c
 800b0ee:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800b0f0:	2a00      	cmp	r2, #0
 800b0f2:	d079      	beq.n	800b1e8 <ai_platform_api_get_network_report+0x1d0>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	66e3      	str	r3, [r4, #108]	; 0x6c
 800b0f8:	6913      	ldr	r3, [r2, #16]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d00c      	beq.n	800b118 <ai_platform_api_get_network_report+0x100>
 800b0fe:	b15b      	cbz	r3, 800b118 <ai_platform_api_get_network_report+0x100>
 800b100:	2202      	movs	r2, #2
 800b102:	e003      	b.n	800b10c <ai_platform_api_get_network_report+0xf4>
 800b104:	1c50      	adds	r0, r2, #1
 800b106:	460b      	mov	r3, r1
 800b108:	b121      	cbz	r1, 800b114 <ai_platform_api_get_network_report+0xfc>
 800b10a:	4602      	mov	r2, r0
 800b10c:	66e2      	str	r2, [r4, #108]	; 0x6c
 800b10e:	6919      	ldr	r1, [r3, #16]
 800b110:	4299      	cmp	r1, r3
 800b112:	d1f7      	bne.n	800b104 <ai_platform_api_get_network_report+0xec>
 800b114:	2a00      	cmp	r2, #0
 800b116:	d067      	beq.n	800b1e8 <ai_platform_api_get_network_report+0x1d0>
 800b118:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f000 80d6 	beq.w	800b2cc <ai_platform_api_get_network_report+0x2b4>
 800b120:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 800b122:	2f00      	cmp	r7, #0
 800b124:	f000 80d2 	beq.w	800b2cc <ai_platform_api_get_network_report+0x2b4>
 800b128:	883b      	ldrh	r3, [r7, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f000 80ce 	beq.w	800b2cc <ai_platform_api_get_network_report+0x2b4>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	f000 80ca 	beq.w	800b2cc <ai_platform_api_get_network_report+0x2b4>
 800b138:	681e      	ldr	r6, [r3, #0]
 800b13a:	2e00      	cmp	r6, #0
 800b13c:	f000 80c6 	beq.w	800b2cc <ai_platform_api_get_network_report+0x2b4>
 800b140:	f04f 0800 	mov.w	r8, #0
 800b144:	4641      	mov	r1, r8
 800b146:	f04f 0b18 	mov.w	fp, #24
 800b14a:	f04f 0a01 	mov.w	sl, #1
 800b14e:	e019      	b.n	800b184 <ai_platform_api_get_network_report+0x16c>
 800b150:	f849 1038 	str.w	r1, [r9, r8, lsl #3]
 800b154:	6830      	ldr	r0, [r6, #0]
 800b156:	6050      	str	r0, [r2, #4]
 800b158:	2800      	cmp	r0, #0
 800b15a:	d039      	beq.n	800b1d0 <ai_platform_api_get_network_report+0x1b8>
 800b15c:	8840      	ldrh	r0, [r0, #2]
 800b15e:	2800      	cmp	r0, #0
 800b160:	d036      	beq.n	800b1d0 <ai_platform_api_get_network_report+0x1b8>
 800b162:	f849 a00c 	str.w	sl, [r9, ip]
 800b166:	615a      	str	r2, [r3, #20]
 800b168:	8838      	ldrh	r0, [r7, #0]
 800b16a:	f108 0301 	add.w	r3, r8, #1
 800b16e:	4283      	cmp	r3, r0
 800b170:	4698      	mov	r8, r3
 800b172:	b29a      	uxth	r2, r3
 800b174:	d240      	bcs.n	800b1f8 <ai_platform_api_get_network_report+0x1e0>
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	2800      	cmp	r0, #0
 800b17a:	d03d      	beq.n	800b1f8 <ai_platform_api_get_network_report+0x1e0>
 800b17c:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
 800b180:	2e00      	cmp	r6, #0
 800b182:	d039      	beq.n	800b1f8 <ai_platform_api_get_network_report+0x1e0>
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	69b2      	ldr	r2, [r6, #24]
 800b188:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800b18c:	6810      	ldr	r0, [r2, #0]
 800b18e:	685a      	ldr	r2, [r3, #4]
 800b190:	9101      	str	r1, [sp, #4]
 800b192:	9200      	str	r2, [sp, #0]
 800b194:	f003 f8b8 	bl	800e308 <ai_array_to_buffer_fmt>
 800b198:	9a00      	ldr	r2, [sp, #0]
 800b19a:	9901      	ldr	r1, [sp, #4]
 800b19c:	fb0b fc08 	mul.w	ip, fp, r8
 800b1a0:	eb02 030c 	add.w	r3, r2, ip
 800b1a4:	f842 000c 	str.w	r0, [r2, ip]
 800b1a8:	f8a3 a004 	strh.w	sl, [r3, #4]
 800b1ac:	68f2      	ldr	r2, [r6, #12]
 800b1ae:	68d2      	ldr	r2, [r2, #12]
 800b1b0:	80da      	strh	r2, [r3, #6]
 800b1b2:	68f2      	ldr	r2, [r6, #12]
 800b1b4:	6892      	ldr	r2, [r2, #8]
 800b1b6:	811a      	strh	r2, [r3, #8]
 800b1b8:	68f2      	ldr	r2, [r6, #12]
 800b1ba:	6852      	ldr	r2, [r2, #4]
 800b1bc:	60da      	str	r2, [r3, #12]
 800b1be:	69b2      	ldr	r2, [r6, #24]
 800b1c0:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800b1c4:	6892      	ldr	r2, [r2, #8]
 800b1c6:	611a      	str	r2, [r3, #16]
 800b1c8:	eb09 020c 	add.w	r2, r9, ip
 800b1cc:	2a00      	cmp	r2, #0
 800b1ce:	d1bf      	bne.n	800b150 <ai_platform_api_get_network_report+0x138>
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	e7c8      	b.n	800b166 <ai_platform_api_get_network_report+0x14e>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	8663      	strh	r3, [r4, #50]	; 0x32
 800b1d8:	f105 0010 	add.w	r0, r5, #16
 800b1dc:	2218      	movs	r2, #24
 800b1de:	2113      	movs	r1, #19
 800b1e0:	f000 ff36 	bl	800c050 <core_set_error>
 800b1e4:	2600      	movs	r6, #0
 800b1e6:	e74c      	b.n	800b082 <ai_platform_api_get_network_report+0x6a>
 800b1e8:	f105 0010 	add.w	r0, r5, #16
 800b1ec:	2218      	movs	r2, #24
 800b1ee:	2111      	movs	r1, #17
 800b1f0:	f000 ff2e 	bl	800c050 <core_set_error>
 800b1f4:	2600      	movs	r6, #0
 800b1f6:	e744      	b.n	800b082 <ai_platform_api_get_network_report+0x6a>
 800b1f8:	2a00      	cmp	r2, #0
 800b1fa:	d067      	beq.n	800b2cc <ai_platform_api_get_network_report+0x2b4>
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	6363      	str	r3, [r4, #52]	; 0x34
 800b202:	8622      	strh	r2, [r4, #48]	; 0x30
 800b204:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800b206:	2b01      	cmp	r3, #1
 800b208:	d9e4      	bls.n	800b1d4 <ai_platform_api_get_network_report+0x1bc>
 800b20a:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800b20e:	2600      	movs	r6, #0
 800b210:	f108 0a0c 	add.w	sl, r8, #12
 800b214:	4631      	mov	r1, r6
 800b216:	f04f 0b01 	mov.w	fp, #1
 800b21a:	b2b3      	uxth	r3, r6
 800b21c:	f1ba 0f00 	cmp.w	sl, #0
 800b220:	d05f      	beq.n	800b2e2 <ai_platform_api_get_network_report+0x2ca>
 800b222:	f8b8 000c 	ldrh.w	r0, [r8, #12]
 800b226:	4286      	cmp	r6, r0
 800b228:	d25b      	bcs.n	800b2e2 <ai_platform_api_get_network_report+0x2ca>
 800b22a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800b22e:	2800      	cmp	r0, #0
 800b230:	d057      	beq.n	800b2e2 <ai_platform_api_get_network_report+0x2ca>
 800b232:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800b236:	2f00      	cmp	r7, #0
 800b238:	d053      	beq.n	800b2e2 <ai_platform_api_get_network_report+0x2ca>
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800b240:	6818      	ldr	r0, [r3, #0]
 800b242:	6853      	ldr	r3, [r2, #4]
 800b244:	9101      	str	r1, [sp, #4]
 800b246:	9300      	str	r3, [sp, #0]
 800b248:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800b24c:	f003 f85c 	bl	800e308 <ai_array_to_buffer_fmt>
 800b250:	2318      	movs	r3, #24
 800b252:	fb03 fe06 	mul.w	lr, r3, r6
 800b256:	9b00      	ldr	r3, [sp, #0]
 800b258:	9901      	ldr	r1, [sp, #4]
 800b25a:	f843 000e 	str.w	r0, [r3, lr]
 800b25e:	eb03 0c0e 	add.w	ip, r3, lr
 800b262:	00f0      	lsls	r0, r6, #3
 800b264:	f8ac b004 	strh.w	fp, [ip, #4]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	f8ac 3006 	strh.w	r3, [ip, #6]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	f8ac 3008 	strh.w	r3, [ip, #8]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	f8cc 300c 	str.w	r3, [ip, #12]
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	f8cc 3010 	str.w	r3, [ip, #16]
 800b288:	eb09 0300 	add.w	r3, r9, r0
 800b28c:	b33b      	cbz	r3, 800b2de <ai_platform_api_get_network_report+0x2c6>
 800b28e:	f849 1036 	str.w	r1, [r9, r6, lsl #3]
 800b292:	683f      	ldr	r7, [r7, #0]
 800b294:	605f      	str	r7, [r3, #4]
 800b296:	b317      	cbz	r7, 800b2de <ai_platform_api_get_network_report+0x2c6>
 800b298:	887f      	ldrh	r7, [r7, #2]
 800b29a:	b307      	cbz	r7, 800b2de <ai_platform_api_get_network_report+0x2c6>
 800b29c:	f849 b000 	str.w	fp, [r9, r0]
 800b2a0:	f8cc 3014 	str.w	r3, [ip, #20]
 800b2a4:	3601      	adds	r6, #1
 800b2a6:	e7b8      	b.n	800b21a <ai_platform_api_get_network_report+0x202>
 800b2a8:	a1c00100 	.word	0xa1c00100
 800b2ac:	e0002000 	.word	0xe0002000
 800b2b0:	e0042000 	.word	0xe0042000
 800b2b4:	58024c08 	.word	0x58024c08
 800b2b8:	58024c00 	.word	0x58024c00
 800b2bc:	f407a5c2 	.word	0xf407a5c2
 800b2c0:	b5e8b5cd 	.word	0xb5e8b5cd
 800b2c4:	40023008 	.word	0x40023008
 800b2c8:	40023000 	.word	0x40023000
 800b2cc:	2600      	movs	r6, #0
 800b2ce:	f105 0010 	add.w	r0, r5, #16
 800b2d2:	8626      	strh	r6, [r4, #48]	; 0x30
 800b2d4:	2218      	movs	r2, #24
 800b2d6:	2112      	movs	r1, #18
 800b2d8:	f000 feba 	bl	800c050 <core_set_error>
 800b2dc:	e6d1      	b.n	800b082 <ai_platform_api_get_network_report+0x6a>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	e7de      	b.n	800b2a0 <ai_platform_api_get_network_report+0x288>
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f43f af77 	beq.w	800b1d6 <ai_platform_api_get_network_report+0x1be>
 800b2e8:	f8da 2008 	ldr.w	r2, [sl, #8]
 800b2ec:	6852      	ldr	r2, [r2, #4]
 800b2ee:	63a2      	str	r2, [r4, #56]	; 0x38
 800b2f0:	8663      	strh	r3, [r4, #50]	; 0x32
 800b2f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b2f4:	b16b      	cbz	r3, 800b312 <ai_platform_api_get_network_report+0x2fa>
 800b2f6:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800b2f8:	b15b      	cbz	r3, 800b312 <ai_platform_api_get_network_report+0x2fa>
 800b2fa:	6a2b      	ldr	r3, [r5, #32]
 800b2fc:	b10b      	cbz	r3, 800b302 <ai_platform_api_get_network_report+0x2ea>
 800b2fe:	8beb      	ldrh	r3, [r5, #30]
 800b300:	b97b      	cbnz	r3, 800b322 <ai_platform_api_get_network_report+0x30a>
 800b302:	f105 0010 	add.w	r0, r5, #16
 800b306:	2212      	movs	r2, #18
 800b308:	2111      	movs	r1, #17
 800b30a:	f000 fea1 	bl	800c050 <core_set_error>
 800b30e:	2600      	movs	r6, #0
 800b310:	e6b7      	b.n	800b082 <ai_platform_api_get_network_report+0x6a>
 800b312:	f105 0010 	add.w	r0, r5, #16
 800b316:	2213      	movs	r2, #19
 800b318:	2111      	movs	r1, #17
 800b31a:	f000 fe99 	bl	800c050 <core_set_error>
 800b31e:	2600      	movs	r6, #0
 800b320:	e6af      	b.n	800b082 <ai_platform_api_get_network_report+0x6a>
 800b322:	686b      	ldr	r3, [r5, #4]
 800b324:	4a83      	ldr	r2, [pc, #524]	; (800b534 <ai_platform_api_get_network_report+0x51c>)
 800b326:	6723      	str	r3, [r4, #112]	; 0x70
 800b328:	6813      	ldr	r3, [r2, #0]
 800b32a:	f023 0301 	bic.w	r3, r3, #1
 800b32e:	6013      	str	r3, [r2, #0]
 800b330:	f7ff fc18 	bl	800ab64 <_ai_platform_acquire_crc>
 800b334:	4b80      	ldr	r3, [pc, #512]	; (800b538 <ai_platform_api_get_network_report+0x520>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b33c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b340:	d00d      	beq.n	800b35e <ai_platform_api_get_network_report+0x346>
 800b342:	4b7e      	ldr	r3, [pc, #504]	; (800b53c <ai_platform_api_get_network_report+0x524>)
 800b344:	2201      	movs	r2, #1
 800b346:	601a      	str	r2, [r3, #0]
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	2a00      	cmp	r2, #0
 800b34c:	d1fc      	bne.n	800b348 <ai_platform_api_get_network_report+0x330>
 800b34e:	4b7c      	ldr	r3, [pc, #496]	; (800b540 <ai_platform_api_get_network_report+0x528>)
 800b350:	4a7c      	ldr	r2, [pc, #496]	; (800b544 <ai_platform_api_get_network_report+0x52c>)
 800b352:	601a      	str	r2, [r3, #0]
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	4b7c      	ldr	r3, [pc, #496]	; (800b548 <ai_platform_api_get_network_report+0x530>)
 800b358:	429a      	cmp	r2, r3
 800b35a:	d00e      	beq.n	800b37a <ai_platform_api_get_network_report+0x362>
 800b35c:	e7fe      	b.n	800b35c <ai_platform_api_get_network_report+0x344>
 800b35e:	4b7b      	ldr	r3, [pc, #492]	; (800b54c <ai_platform_api_get_network_report+0x534>)
 800b360:	2201      	movs	r2, #1
 800b362:	601a      	str	r2, [r3, #0]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	2a00      	cmp	r2, #0
 800b368:	d1fc      	bne.n	800b364 <ai_platform_api_get_network_report+0x34c>
 800b36a:	4b79      	ldr	r3, [pc, #484]	; (800b550 <ai_platform_api_get_network_report+0x538>)
 800b36c:	4a75      	ldr	r2, [pc, #468]	; (800b544 <ai_platform_api_get_network_report+0x52c>)
 800b36e:	601a      	str	r2, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	4b75      	ldr	r3, [pc, #468]	; (800b548 <ai_platform_api_get_network_report+0x530>)
 800b374:	429a      	cmp	r2, r3
 800b376:	d000      	beq.n	800b37a <ai_platform_api_get_network_report+0x362>
 800b378:	e7fe      	b.n	800b378 <ai_platform_api_get_network_report+0x360>
 800b37a:	f7ff fbf5 	bl	800ab68 <_ai_platform_release_crc>
 800b37e:	4a6d      	ldr	r2, [pc, #436]	; (800b534 <ai_platform_api_get_network_report+0x51c>)
 800b380:	4b74      	ldr	r3, [pc, #464]	; (800b554 <ai_platform_api_get_network_report+0x53c>)
 800b382:	6123      	str	r3, [r4, #16]
 800b384:	6813      	ldr	r3, [r2, #0]
 800b386:	f023 0301 	bic.w	r3, r3, #1
 800b38a:	6013      	str	r3, [r2, #0]
 800b38c:	f7ff fbea 	bl	800ab64 <_ai_platform_acquire_crc>
 800b390:	4b69      	ldr	r3, [pc, #420]	; (800b538 <ai_platform_api_get_network_report+0x520>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b39c:	d00d      	beq.n	800b3ba <ai_platform_api_get_network_report+0x3a2>
 800b39e:	4b67      	ldr	r3, [pc, #412]	; (800b53c <ai_platform_api_get_network_report+0x524>)
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	601a      	str	r2, [r3, #0]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	2a00      	cmp	r2, #0
 800b3a8:	d1fc      	bne.n	800b3a4 <ai_platform_api_get_network_report+0x38c>
 800b3aa:	4b65      	ldr	r3, [pc, #404]	; (800b540 <ai_platform_api_get_network_report+0x528>)
 800b3ac:	4a65      	ldr	r2, [pc, #404]	; (800b544 <ai_platform_api_get_network_report+0x52c>)
 800b3ae:	601a      	str	r2, [r3, #0]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	4b65      	ldr	r3, [pc, #404]	; (800b548 <ai_platform_api_get_network_report+0x530>)
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d00e      	beq.n	800b3d6 <ai_platform_api_get_network_report+0x3be>
 800b3b8:	e7fe      	b.n	800b3b8 <ai_platform_api_get_network_report+0x3a0>
 800b3ba:	4b64      	ldr	r3, [pc, #400]	; (800b54c <ai_platform_api_get_network_report+0x534>)
 800b3bc:	2201      	movs	r2, #1
 800b3be:	601a      	str	r2, [r3, #0]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	2a00      	cmp	r2, #0
 800b3c4:	d1fc      	bne.n	800b3c0 <ai_platform_api_get_network_report+0x3a8>
 800b3c6:	4b62      	ldr	r3, [pc, #392]	; (800b550 <ai_platform_api_get_network_report+0x538>)
 800b3c8:	4a5e      	ldr	r2, [pc, #376]	; (800b544 <ai_platform_api_get_network_report+0x52c>)
 800b3ca:	601a      	str	r2, [r3, #0]
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	4b5e      	ldr	r3, [pc, #376]	; (800b548 <ai_platform_api_get_network_report+0x530>)
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d000      	beq.n	800b3d6 <ai_platform_api_get_network_report+0x3be>
 800b3d4:	e7fe      	b.n	800b3d4 <ai_platform_api_get_network_report+0x3bc>
 800b3d6:	f7ff fbc7 	bl	800ab68 <_ai_platform_release_crc>
 800b3da:	4a56      	ldr	r2, [pc, #344]	; (800b534 <ai_platform_api_get_network_report+0x51c>)
 800b3dc:	2307      	movs	r3, #7
 800b3de:	6163      	str	r3, [r4, #20]
 800b3e0:	6813      	ldr	r3, [r2, #0]
 800b3e2:	f023 0301 	bic.w	r3, r3, #1
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	f7ff fbbc 	bl	800ab64 <_ai_platform_acquire_crc>
 800b3ec:	4b52      	ldr	r3, [pc, #328]	; (800b538 <ai_platform_api_get_network_report+0x520>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3f8:	d00d      	beq.n	800b416 <ai_platform_api_get_network_report+0x3fe>
 800b3fa:	4b50      	ldr	r3, [pc, #320]	; (800b53c <ai_platform_api_get_network_report+0x524>)
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	601a      	str	r2, [r3, #0]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	2a00      	cmp	r2, #0
 800b404:	d1fc      	bne.n	800b400 <ai_platform_api_get_network_report+0x3e8>
 800b406:	4b4e      	ldr	r3, [pc, #312]	; (800b540 <ai_platform_api_get_network_report+0x528>)
 800b408:	4a4e      	ldr	r2, [pc, #312]	; (800b544 <ai_platform_api_get_network_report+0x52c>)
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	4b4e      	ldr	r3, [pc, #312]	; (800b548 <ai_platform_api_get_network_report+0x530>)
 800b410:	429a      	cmp	r2, r3
 800b412:	d00e      	beq.n	800b432 <ai_platform_api_get_network_report+0x41a>
 800b414:	e7fe      	b.n	800b414 <ai_platform_api_get_network_report+0x3fc>
 800b416:	4b4d      	ldr	r3, [pc, #308]	; (800b54c <ai_platform_api_get_network_report+0x534>)
 800b418:	2201      	movs	r2, #1
 800b41a:	601a      	str	r2, [r3, #0]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	2a00      	cmp	r2, #0
 800b420:	d1fc      	bne.n	800b41c <ai_platform_api_get_network_report+0x404>
 800b422:	4b4b      	ldr	r3, [pc, #300]	; (800b550 <ai_platform_api_get_network_report+0x538>)
 800b424:	4a47      	ldr	r2, [pc, #284]	; (800b544 <ai_platform_api_get_network_report+0x52c>)
 800b426:	601a      	str	r2, [r3, #0]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	4b47      	ldr	r3, [pc, #284]	; (800b548 <ai_platform_api_get_network_report+0x530>)
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d000      	beq.n	800b432 <ai_platform_api_get_network_report+0x41a>
 800b430:	e7fe      	b.n	800b430 <ai_platform_api_get_network_report+0x418>
 800b432:	f7ff fb99 	bl	800ab68 <_ai_platform_release_crc>
 800b436:	4a3f      	ldr	r2, [pc, #252]	; (800b534 <ai_platform_api_get_network_report+0x51c>)
 800b438:	f240 1301 	movw	r3, #257	; 0x101
 800b43c:	6263      	str	r3, [r4, #36]	; 0x24
 800b43e:	6813      	ldr	r3, [r2, #0]
 800b440:	f023 0301 	bic.w	r3, r3, #1
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	f7ff fb8d 	bl	800ab64 <_ai_platform_acquire_crc>
 800b44a:	4b3b      	ldr	r3, [pc, #236]	; (800b538 <ai_platform_api_get_network_report+0x520>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b456:	d00d      	beq.n	800b474 <ai_platform_api_get_network_report+0x45c>
 800b458:	4b38      	ldr	r3, [pc, #224]	; (800b53c <ai_platform_api_get_network_report+0x524>)
 800b45a:	2201      	movs	r2, #1
 800b45c:	601a      	str	r2, [r3, #0]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	2a00      	cmp	r2, #0
 800b462:	d1fc      	bne.n	800b45e <ai_platform_api_get_network_report+0x446>
 800b464:	4b36      	ldr	r3, [pc, #216]	; (800b540 <ai_platform_api_get_network_report+0x528>)
 800b466:	4a37      	ldr	r2, [pc, #220]	; (800b544 <ai_platform_api_get_network_report+0x52c>)
 800b468:	601a      	str	r2, [r3, #0]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	4b36      	ldr	r3, [pc, #216]	; (800b548 <ai_platform_api_get_network_report+0x530>)
 800b46e:	429a      	cmp	r2, r3
 800b470:	d00e      	beq.n	800b490 <ai_platform_api_get_network_report+0x478>
 800b472:	e7fe      	b.n	800b472 <ai_platform_api_get_network_report+0x45a>
 800b474:	4b35      	ldr	r3, [pc, #212]	; (800b54c <ai_platform_api_get_network_report+0x534>)
 800b476:	2201      	movs	r2, #1
 800b478:	601a      	str	r2, [r3, #0]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	2a00      	cmp	r2, #0
 800b47e:	d1fc      	bne.n	800b47a <ai_platform_api_get_network_report+0x462>
 800b480:	4b33      	ldr	r3, [pc, #204]	; (800b550 <ai_platform_api_get_network_report+0x538>)
 800b482:	4a30      	ldr	r2, [pc, #192]	; (800b544 <ai_platform_api_get_network_report+0x52c>)
 800b484:	601a      	str	r2, [r3, #0]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	4b2f      	ldr	r3, [pc, #188]	; (800b548 <ai_platform_api_get_network_report+0x530>)
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d000      	beq.n	800b490 <ai_platform_api_get_network_report+0x478>
 800b48e:	e7fe      	b.n	800b48e <ai_platform_api_get_network_report+0x476>
 800b490:	f7ff fb6a 	bl	800ab68 <_ai_platform_release_crc>
 800b494:	f240 4301 	movw	r3, #1025	; 0x401
 800b498:	62a3      	str	r3, [r4, #40]	; 0x28
 800b49a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b49c:	4a2e      	ldr	r2, [pc, #184]	; (800b558 <ai_platform_api_get_network_report+0x540>)
 800b49e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b4a0:	0e18      	lsrs	r0, r3, #24
 800b4a2:	f884 0020 	strb.w	r0, [r4, #32]
 800b4a6:	0c18      	lsrs	r0, r3, #16
 800b4a8:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
 800b4ac:	0a1b      	lsrs	r3, r3, #8
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	4291      	cmp	r1, r2
 800b4b2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800b4b6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 800b4ba:	d019      	beq.n	800b4f0 <ai_platform_api_get_network_report+0x4d8>
 800b4bc:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800b4be:	b386      	cbz	r6, 800b522 <ai_platform_api_get_network_report+0x50a>
 800b4c0:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800b4c2:	b373      	cbz	r3, 800b522 <ai_platform_api_get_network_report+0x50a>
 800b4c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b4c6:	f104 0754 	add.w	r7, r4, #84	; 0x54
 800b4ca:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800b4cc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b4d0:	e887 0003 	stmia.w	r7, {r0, r1}
 800b4d4:	6a2b      	ldr	r3, [r5, #32]
 800b4d6:	b1db      	cbz	r3, 800b510 <ai_platform_api_get_network_report+0x4f8>
 800b4d8:	8bea      	ldrh	r2, [r5, #30]
 800b4da:	b1ca      	cbz	r2, 800b510 <ai_platform_api_get_network_report+0x4f8>
 800b4dc:	461d      	mov	r5, r3
 800b4de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4e0:	343c      	adds	r4, #60	; 0x3c
 800b4e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b4e8:	2601      	movs	r6, #1
 800b4ea:	e884 0003 	stmia.w	r4, {r0, r1}
 800b4ee:	e5c8      	b.n	800b082 <ai_platform_api_get_network_report+0x6a>
 800b4f0:	f105 0324 	add.w	r3, r5, #36	; 0x24
 800b4f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b4f8:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800b4fc:	e883 0003 	stmia.w	r3, {r0, r1}
 800b500:	351c      	adds	r5, #28
 800b502:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b506:	3440      	adds	r4, #64	; 0x40
 800b508:	e884 0003 	stmia.w	r4, {r0, r1}
 800b50c:	2601      	movs	r6, #1
 800b50e:	e5b8      	b.n	800b082 <ai_platform_api_get_network_report+0x6a>
 800b510:	2500      	movs	r5, #0
 800b512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b514:	343c      	adds	r4, #60	; 0x3c
 800b516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b518:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b51c:	e884 0003 	stmia.w	r4, {r0, r1}
 800b520:	deff      	udf	#255	; 0xff
 800b522:	2500      	movs	r5, #0
 800b524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b526:	3454      	adds	r4, #84	; 0x54
 800b528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b52a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b52e:	e884 0003 	stmia.w	r4, {r0, r1}
 800b532:	deff      	udf	#255	; 0xff
 800b534:	e0002000 	.word	0xe0002000
 800b538:	e0042000 	.word	0xe0042000
 800b53c:	58024c08 	.word	0x58024c08
 800b540:	58024c00 	.word	0x58024c00
 800b544:	f407a5c2 	.word	0xf407a5c2
 800b548:	b5e8b5cd 	.word	0xb5e8b5cd
 800b54c:	40023008 	.word	0x40023008
 800b550:	40023000 	.word	0x40023000
 800b554:	080134b4 	.word	0x080134b4
 800b558:	a1facade 	.word	0xa1facade

0800b55c <ai_platform_network_create>:
 800b55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b560:	b082      	sub	sp, #8
 800b562:	4607      	mov	r7, r0
 800b564:	4616      	mov	r6, r2
 800b566:	461d      	mov	r5, r3
 800b568:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800b56c:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 800b570:	f7ff faf8 	bl	800ab64 <_ai_platform_acquire_crc>
 800b574:	b178      	cbz	r0, 800b596 <ai_platform_network_create+0x3a>
 800b576:	4b5a      	ldr	r3, [pc, #360]	; (800b6e0 <ai_platform_network_create+0x184>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b57e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b582:	4602      	mov	r2, r0
 800b584:	d00c      	beq.n	800b5a0 <ai_platform_network_create+0x44>
 800b586:	4b57      	ldr	r3, [pc, #348]	; (800b6e4 <ai_platform_network_create+0x188>)
 800b588:	2118      	movs	r1, #24
 800b58a:	6019      	str	r1, [r3, #0]
 800b58c:	6819      	ldr	r1, [r3, #0]
 800b58e:	2918      	cmp	r1, #24
 800b590:	d034      	beq.n	800b5fc <ai_platform_network_create+0xa0>
 800b592:	f7ff fae9 	bl	800ab68 <_ai_platform_release_crc>
 800b596:	f241 0033 	movw	r0, #4147	; 0x1033
 800b59a:	b002      	add	sp, #8
 800b59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a0:	4b51      	ldr	r3, [pc, #324]	; (800b6e8 <ai_platform_network_create+0x18c>)
 800b5a2:	2101      	movs	r1, #1
 800b5a4:	6019      	str	r1, [r3, #0]
 800b5a6:	2114      	movs	r1, #20
 800b5a8:	e001      	b.n	800b5ae <ai_platform_network_create+0x52>
 800b5aa:	3901      	subs	r1, #1
 800b5ac:	d002      	beq.n	800b5b4 <ai_platform_network_create+0x58>
 800b5ae:	6818      	ldr	r0, [r3, #0]
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	d1fa      	bne.n	800b5aa <ai_platform_network_create+0x4e>
 800b5b4:	4b4c      	ldr	r3, [pc, #304]	; (800b6e8 <ai_platform_network_create+0x18c>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	b9f3      	cbnz	r3, 800b5f8 <ai_platform_network_create+0x9c>
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	f7ff fad4 	bl	800ab68 <_ai_platform_release_crc>
 800b5c0:	4a4a      	ldr	r2, [pc, #296]	; (800b6ec <ai_platform_network_create+0x190>)
 800b5c2:	6813      	ldr	r3, [r2, #0]
 800b5c4:	f023 0301 	bic.w	r3, r3, #1
 800b5c8:	6013      	str	r3, [r2, #0]
 800b5ca:	f7ff facb 	bl	800ab64 <_ai_platform_acquire_crc>
 800b5ce:	4b44      	ldr	r3, [pc, #272]	; (800b6e0 <ai_platform_network_create+0x184>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5da:	d015      	beq.n	800b608 <ai_platform_network_create+0xac>
 800b5dc:	4b41      	ldr	r3, [pc, #260]	; (800b6e4 <ai_platform_network_create+0x188>)
 800b5de:	2201      	movs	r2, #1
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	2a00      	cmp	r2, #0
 800b5e6:	d1fc      	bne.n	800b5e2 <ai_platform_network_create+0x86>
 800b5e8:	4b41      	ldr	r3, [pc, #260]	; (800b6f0 <ai_platform_network_create+0x194>)
 800b5ea:	4a42      	ldr	r2, [pc, #264]	; (800b6f4 <ai_platform_network_create+0x198>)
 800b5ec:	601a      	str	r2, [r3, #0]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	4b41      	ldr	r3, [pc, #260]	; (800b6f8 <ai_platform_network_create+0x19c>)
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d016      	beq.n	800b624 <ai_platform_network_create+0xc8>
 800b5f6:	e7fe      	b.n	800b5f6 <ai_platform_network_create+0x9a>
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	e7ca      	b.n	800b592 <ai_platform_network_create+0x36>
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	6019      	str	r1, [r3, #0]
 800b600:	6819      	ldr	r1, [r3, #0]
 800b602:	2900      	cmp	r1, #0
 800b604:	d1fc      	bne.n	800b600 <ai_platform_network_create+0xa4>
 800b606:	e7d8      	b.n	800b5ba <ai_platform_network_create+0x5e>
 800b608:	4b37      	ldr	r3, [pc, #220]	; (800b6e8 <ai_platform_network_create+0x18c>)
 800b60a:	2201      	movs	r2, #1
 800b60c:	601a      	str	r2, [r3, #0]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	2a00      	cmp	r2, #0
 800b612:	d1fc      	bne.n	800b60e <ai_platform_network_create+0xb2>
 800b614:	4b39      	ldr	r3, [pc, #228]	; (800b6fc <ai_platform_network_create+0x1a0>)
 800b616:	4a37      	ldr	r2, [pc, #220]	; (800b6f4 <ai_platform_network_create+0x198>)
 800b618:	601a      	str	r2, [r3, #0]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	4b36      	ldr	r3, [pc, #216]	; (800b6f8 <ai_platform_network_create+0x19c>)
 800b61e:	429a      	cmp	r2, r3
 800b620:	d000      	beq.n	800b624 <ai_platform_network_create+0xc8>
 800b622:	e7fe      	b.n	800b622 <ai_platform_network_create+0xc6>
 800b624:	f7ff faa0 	bl	800ab68 <_ai_platform_release_crc>
 800b628:	b1af      	cbz	r7, 800b656 <ai_platform_network_create+0xfa>
 800b62a:	4b35      	ldr	r3, [pc, #212]	; (800b700 <ai_platform_network_create+0x1a4>)
 800b62c:	6033      	str	r3, [r6, #0]
 800b62e:	603e      	str	r6, [r7, #0]
 800b630:	f000 fd06 	bl	800c040 <core_init>
 800b634:	b990      	cbnz	r0, 800b65c <ai_platform_network_create+0x100>
 800b636:	062d      	lsls	r5, r5, #24
 800b638:	0424      	lsls	r4, r4, #16
 800b63a:	2230      	movs	r2, #48	; 0x30
 800b63c:	2300      	movs	r3, #0
 800b63e:	603b      	str	r3, [r7, #0]
 800b640:	2110      	movs	r1, #16
 800b642:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 800b646:	2000      	movs	r0, #0
 800b648:	432b      	orrs	r3, r5
 800b64a:	f362 0007 	bfi	r0, r2, #0, #8
 800b64e:	6473      	str	r3, [r6, #68]	; 0x44
 800b650:	f361 201f 	bfi	r0, r1, #8, #24
 800b654:	e7a1      	b.n	800b59a <ai_platform_network_create+0x3e>
 800b656:	f241 0010 	movw	r0, #4112	; 0x1010
 800b65a:	e79e      	b.n	800b59a <ai_platform_network_create+0x3e>
 800b65c:	4a23      	ldr	r2, [pc, #140]	; (800b6ec <ai_platform_network_create+0x190>)
 800b65e:	6813      	ldr	r3, [r2, #0]
 800b660:	f023 0301 	bic.w	r3, r3, #1
 800b664:	6013      	str	r3, [r2, #0]
 800b666:	f7ff fa7d 	bl	800ab64 <_ai_platform_acquire_crc>
 800b66a:	4b1d      	ldr	r3, [pc, #116]	; (800b6e0 <ai_platform_network_create+0x184>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b676:	d00d      	beq.n	800b694 <ai_platform_network_create+0x138>
 800b678:	4b1a      	ldr	r3, [pc, #104]	; (800b6e4 <ai_platform_network_create+0x188>)
 800b67a:	2201      	movs	r2, #1
 800b67c:	601a      	str	r2, [r3, #0]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	2a00      	cmp	r2, #0
 800b682:	d1fc      	bne.n	800b67e <ai_platform_network_create+0x122>
 800b684:	4b1a      	ldr	r3, [pc, #104]	; (800b6f0 <ai_platform_network_create+0x194>)
 800b686:	4a1b      	ldr	r2, [pc, #108]	; (800b6f4 <ai_platform_network_create+0x198>)
 800b688:	601a      	str	r2, [r3, #0]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	4b1a      	ldr	r3, [pc, #104]	; (800b6f8 <ai_platform_network_create+0x19c>)
 800b68e:	429a      	cmp	r2, r3
 800b690:	d00e      	beq.n	800b6b0 <ai_platform_network_create+0x154>
 800b692:	e7fe      	b.n	800b692 <ai_platform_network_create+0x136>
 800b694:	4b14      	ldr	r3, [pc, #80]	; (800b6e8 <ai_platform_network_create+0x18c>)
 800b696:	2201      	movs	r2, #1
 800b698:	601a      	str	r2, [r3, #0]
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	2a00      	cmp	r2, #0
 800b69e:	d1fc      	bne.n	800b69a <ai_platform_network_create+0x13e>
 800b6a0:	4b16      	ldr	r3, [pc, #88]	; (800b6fc <ai_platform_network_create+0x1a0>)
 800b6a2:	4a14      	ldr	r2, [pc, #80]	; (800b6f4 <ai_platform_network_create+0x198>)
 800b6a4:	601a      	str	r2, [r3, #0]
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	4b13      	ldr	r3, [pc, #76]	; (800b6f8 <ai_platform_network_create+0x19c>)
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d000      	beq.n	800b6b0 <ai_platform_network_create+0x154>
 800b6ae:	e7fe      	b.n	800b6ae <ai_platform_network_create+0x152>
 800b6b0:	062d      	lsls	r5, r5, #24
 800b6b2:	0424      	lsls	r4, r4, #16
 800b6b4:	f7ff fa58 	bl	800ab68 <_ai_platform_release_crc>
 800b6b8:	ea45 0304 	orr.w	r3, r5, r4
 800b6bc:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800b6c0:	d001      	beq.n	800b6c6 <ai_platform_network_create+0x16a>
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	e7ba      	b.n	800b63c <ai_platform_network_create+0xe0>
 800b6c6:	a802      	add	r0, sp, #8
 800b6c8:	4b0e      	ldr	r3, [pc, #56]	; (800b704 <ai_platform_network_create+0x1a8>)
 800b6ca:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b6ce:	f002 fd5f 	bl	800e190 <ai_check_custom_types>
 800b6d2:	b110      	cbz	r0, 800b6da <ai_platform_network_create+0x17e>
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	460a      	mov	r2, r1
 800b6d8:	e7b3      	b.n	800b642 <ai_platform_network_create+0xe6>
 800b6da:	2202      	movs	r2, #2
 800b6dc:	e7ae      	b.n	800b63c <ai_platform_network_create+0xe0>
 800b6de:	bf00      	nop
 800b6e0:	e0042000 	.word	0xe0042000
 800b6e4:	58024c08 	.word	0x58024c08
 800b6e8:	40023008 	.word	0x40023008
 800b6ec:	e0002000 	.word	0xe0002000
 800b6f0:	58024c00 	.word	0x58024c00
 800b6f4:	f407a5c2 	.word	0xf407a5c2
 800b6f8:	b5e8b5cd 	.word	0xb5e8b5cd
 800b6fc:	40023000 	.word	0x40023000
 800b700:	a1c00100 	.word	0xa1c00100
 800b704:	84048403 	.word	0x84048403

0800b708 <ai_platform_network_destroy>:
 800b708:	b510      	push	{r4, lr}
 800b70a:	4604      	mov	r4, r0
 800b70c:	b118      	cbz	r0, 800b716 <ai_platform_network_destroy+0xe>
 800b70e:	4b31      	ldr	r3, [pc, #196]	; (800b7d4 <ai_platform_network_destroy+0xcc>)
 800b710:	6802      	ldr	r2, [r0, #0]
 800b712:	429a      	cmp	r2, r3
 800b714:	d02d      	beq.n	800b772 <ai_platform_network_destroy+0x6a>
 800b716:	4a30      	ldr	r2, [pc, #192]	; (800b7d8 <ai_platform_network_destroy+0xd0>)
 800b718:	6813      	ldr	r3, [r2, #0]
 800b71a:	f023 0301 	bic.w	r3, r3, #1
 800b71e:	6013      	str	r3, [r2, #0]
 800b720:	f7ff fa20 	bl	800ab64 <_ai_platform_acquire_crc>
 800b724:	4b2d      	ldr	r3, [pc, #180]	; (800b7dc <ai_platform_network_destroy+0xd4>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b72c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b730:	d00d      	beq.n	800b74e <ai_platform_network_destroy+0x46>
 800b732:	4b2b      	ldr	r3, [pc, #172]	; (800b7e0 <ai_platform_network_destroy+0xd8>)
 800b734:	2201      	movs	r2, #1
 800b736:	601a      	str	r2, [r3, #0]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	2a00      	cmp	r2, #0
 800b73c:	d1fc      	bne.n	800b738 <ai_platform_network_destroy+0x30>
 800b73e:	4b29      	ldr	r3, [pc, #164]	; (800b7e4 <ai_platform_network_destroy+0xdc>)
 800b740:	4a29      	ldr	r2, [pc, #164]	; (800b7e8 <ai_platform_network_destroy+0xe0>)
 800b742:	601a      	str	r2, [r3, #0]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	4b29      	ldr	r3, [pc, #164]	; (800b7ec <ai_platform_network_destroy+0xe4>)
 800b748:	429a      	cmp	r2, r3
 800b74a:	d00e      	beq.n	800b76a <ai_platform_network_destroy+0x62>
 800b74c:	e7fe      	b.n	800b74c <ai_platform_network_destroy+0x44>
 800b74e:	4b28      	ldr	r3, [pc, #160]	; (800b7f0 <ai_platform_network_destroy+0xe8>)
 800b750:	2201      	movs	r2, #1
 800b752:	601a      	str	r2, [r3, #0]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	2a00      	cmp	r2, #0
 800b758:	d1fc      	bne.n	800b754 <ai_platform_network_destroy+0x4c>
 800b75a:	4b26      	ldr	r3, [pc, #152]	; (800b7f4 <ai_platform_network_destroy+0xec>)
 800b75c:	4a22      	ldr	r2, [pc, #136]	; (800b7e8 <ai_platform_network_destroy+0xe0>)
 800b75e:	601a      	str	r2, [r3, #0]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	4b22      	ldr	r3, [pc, #136]	; (800b7ec <ai_platform_network_destroy+0xe4>)
 800b764:	429a      	cmp	r2, r3
 800b766:	d000      	beq.n	800b76a <ai_platform_network_destroy+0x62>
 800b768:	e7fe      	b.n	800b768 <ai_platform_network_destroy+0x60>
 800b76a:	f7ff f9fd 	bl	800ab68 <_ai_platform_release_crc>
 800b76e:	4620      	mov	r0, r4
 800b770:	bd10      	pop	{r4, pc}
 800b772:	4a19      	ldr	r2, [pc, #100]	; (800b7d8 <ai_platform_network_destroy+0xd0>)
 800b774:	6813      	ldr	r3, [r2, #0]
 800b776:	f023 0301 	bic.w	r3, r3, #1
 800b77a:	6013      	str	r3, [r2, #0]
 800b77c:	f7ff f9f2 	bl	800ab64 <_ai_platform_acquire_crc>
 800b780:	4b16      	ldr	r3, [pc, #88]	; (800b7dc <ai_platform_network_destroy+0xd4>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b78c:	d00d      	beq.n	800b7aa <ai_platform_network_destroy+0xa2>
 800b78e:	4b14      	ldr	r3, [pc, #80]	; (800b7e0 <ai_platform_network_destroy+0xd8>)
 800b790:	2201      	movs	r2, #1
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	2a00      	cmp	r2, #0
 800b798:	d1fc      	bne.n	800b794 <ai_platform_network_destroy+0x8c>
 800b79a:	4b12      	ldr	r3, [pc, #72]	; (800b7e4 <ai_platform_network_destroy+0xdc>)
 800b79c:	4a12      	ldr	r2, [pc, #72]	; (800b7e8 <ai_platform_network_destroy+0xe0>)
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	4b12      	ldr	r3, [pc, #72]	; (800b7ec <ai_platform_network_destroy+0xe4>)
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d00e      	beq.n	800b7c6 <ai_platform_network_destroy+0xbe>
 800b7a8:	e7fe      	b.n	800b7a8 <ai_platform_network_destroy+0xa0>
 800b7aa:	4b11      	ldr	r3, [pc, #68]	; (800b7f0 <ai_platform_network_destroy+0xe8>)
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	601a      	str	r2, [r3, #0]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	2a00      	cmp	r2, #0
 800b7b4:	d1fc      	bne.n	800b7b0 <ai_platform_network_destroy+0xa8>
 800b7b6:	4b0f      	ldr	r3, [pc, #60]	; (800b7f4 <ai_platform_network_destroy+0xec>)
 800b7b8:	4a0b      	ldr	r2, [pc, #44]	; (800b7e8 <ai_platform_network_destroy+0xe0>)
 800b7ba:	601a      	str	r2, [r3, #0]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	4b0b      	ldr	r3, [pc, #44]	; (800b7ec <ai_platform_network_destroy+0xe4>)
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d000      	beq.n	800b7c6 <ai_platform_network_destroy+0xbe>
 800b7c4:	e7fe      	b.n	800b7c4 <ai_platform_network_destroy+0xbc>
 800b7c6:	f7ff f9cf 	bl	800ab68 <_ai_platform_release_crc>
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f002 fd84 	bl	800e2d8 <ai_layers_destroy_all>
 800b7d0:	2400      	movs	r4, #0
 800b7d2:	e7cc      	b.n	800b76e <ai_platform_network_destroy+0x66>
 800b7d4:	a1c00100 	.word	0xa1c00100
 800b7d8:	e0002000 	.word	0xe0002000
 800b7dc:	e0042000 	.word	0xe0042000
 800b7e0:	58024c08 	.word	0x58024c08
 800b7e4:	58024c00 	.word	0x58024c00
 800b7e8:	f407a5c2 	.word	0xf407a5c2
 800b7ec:	b5e8b5cd 	.word	0xb5e8b5cd
 800b7f0:	40023008 	.word	0x40023008
 800b7f4:	40023000 	.word	0x40023000

0800b7f8 <ai_platform_network_init>:
 800b7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	d04d      	beq.n	800b89c <ai_platform_network_init+0xa4>
 800b800:	4b7c      	ldr	r3, [pc, #496]	; (800b9f4 <ai_platform_network_init+0x1fc>)
 800b802:	6802      	ldr	r2, [r0, #0]
 800b804:	429a      	cmp	r2, r3
 800b806:	4604      	mov	r4, r0
 800b808:	d148      	bne.n	800b89c <ai_platform_network_init+0xa4>
 800b80a:	4a7b      	ldr	r2, [pc, #492]	; (800b9f8 <ai_platform_network_init+0x200>)
 800b80c:	6813      	ldr	r3, [r2, #0]
 800b80e:	f023 0301 	bic.w	r3, r3, #1
 800b812:	6013      	str	r3, [r2, #0]
 800b814:	460d      	mov	r5, r1
 800b816:	f7ff f9a5 	bl	800ab64 <_ai_platform_acquire_crc>
 800b81a:	4b78      	ldr	r3, [pc, #480]	; (800b9fc <ai_platform_network_init+0x204>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b826:	d00d      	beq.n	800b844 <ai_platform_network_init+0x4c>
 800b828:	4b75      	ldr	r3, [pc, #468]	; (800ba00 <ai_platform_network_init+0x208>)
 800b82a:	2201      	movs	r2, #1
 800b82c:	601a      	str	r2, [r3, #0]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	2a00      	cmp	r2, #0
 800b832:	d1fc      	bne.n	800b82e <ai_platform_network_init+0x36>
 800b834:	4b73      	ldr	r3, [pc, #460]	; (800ba04 <ai_platform_network_init+0x20c>)
 800b836:	4a74      	ldr	r2, [pc, #464]	; (800ba08 <ai_platform_network_init+0x210>)
 800b838:	601a      	str	r2, [r3, #0]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	4b73      	ldr	r3, [pc, #460]	; (800ba0c <ai_platform_network_init+0x214>)
 800b83e:	429a      	cmp	r2, r3
 800b840:	d00d      	beq.n	800b85e <ai_platform_network_init+0x66>
 800b842:	e7fe      	b.n	800b842 <ai_platform_network_init+0x4a>
 800b844:	4b72      	ldr	r3, [pc, #456]	; (800ba10 <ai_platform_network_init+0x218>)
 800b846:	2201      	movs	r2, #1
 800b848:	601a      	str	r2, [r3, #0]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	2a00      	cmp	r2, #0
 800b84e:	d1fc      	bne.n	800b84a <ai_platform_network_init+0x52>
 800b850:	4b70      	ldr	r3, [pc, #448]	; (800ba14 <ai_platform_network_init+0x21c>)
 800b852:	4a6d      	ldr	r2, [pc, #436]	; (800ba08 <ai_platform_network_init+0x210>)
 800b854:	601a      	str	r2, [r3, #0]
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	4b6c      	ldr	r3, [pc, #432]	; (800ba0c <ai_platform_network_init+0x214>)
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d11d      	bne.n	800b89a <ai_platform_network_init+0xa2>
 800b85e:	f7ff f983 	bl	800ab68 <_ai_platform_release_crc>
 800b862:	2d00      	cmp	r5, #0
 800b864:	d076      	beq.n	800b954 <ai_platform_network_init+0x15c>
 800b866:	4b6c      	ldr	r3, [pc, #432]	; (800ba18 <ai_platform_network_init+0x220>)
 800b868:	682a      	ldr	r2, [r5, #0]
 800b86a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d030      	beq.n	800b8d4 <ai_platform_network_init+0xdc>
 800b872:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800b874:	46a9      	mov	r9, r5
 800b876:	f105 0118 	add.w	r1, r5, #24
 800b87a:	2e00      	cmp	r6, #0
 800b87c:	f000 8095 	beq.w	800b9aa <ai_platform_network_init+0x1b2>
 800b880:	f1bc 0f00 	cmp.w	ip, #0
 800b884:	f000 80a4 	beq.w	800b9d0 <ai_platform_network_init+0x1d8>
 800b888:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 800b88c:	f1b8 0f01 	cmp.w	r8, #1
 800b890:	d16a      	bne.n	800b968 <ai_platform_network_init+0x170>
 800b892:	2700      	movs	r7, #0
 800b894:	468c      	mov	ip, r1
 800b896:	83a7      	strh	r7, [r4, #28]
 800b898:	e028      	b.n	800b8ec <ai_platform_network_init+0xf4>
 800b89a:	e7fe      	b.n	800b89a <ai_platform_network_init+0xa2>
 800b89c:	4a56      	ldr	r2, [pc, #344]	; (800b9f8 <ai_platform_network_init+0x200>)
 800b89e:	6813      	ldr	r3, [r2, #0]
 800b8a0:	f023 0301 	bic.w	r3, r3, #1
 800b8a4:	6013      	str	r3, [r2, #0]
 800b8a6:	f7ff f95d 	bl	800ab64 <_ai_platform_acquire_crc>
 800b8aa:	4b54      	ldr	r3, [pc, #336]	; (800b9fc <ai_platform_network_init+0x204>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b8b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8b6:	d067      	beq.n	800b988 <ai_platform_network_init+0x190>
 800b8b8:	4b51      	ldr	r3, [pc, #324]	; (800ba00 <ai_platform_network_init+0x208>)
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	601a      	str	r2, [r3, #0]
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	2a00      	cmp	r2, #0
 800b8c2:	d1fc      	bne.n	800b8be <ai_platform_network_init+0xc6>
 800b8c4:	4b4f      	ldr	r3, [pc, #316]	; (800ba04 <ai_platform_network_init+0x20c>)
 800b8c6:	4a50      	ldr	r2, [pc, #320]	; (800ba08 <ai_platform_network_init+0x210>)
 800b8c8:	601a      	str	r2, [r3, #0]
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	4b4f      	ldr	r3, [pc, #316]	; (800ba0c <ai_platform_network_init+0x214>)
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d067      	beq.n	800b9a2 <ai_platform_network_init+0x1aa>
 800b8d2:	e7fe      	b.n	800b8d2 <ai_platform_network_init+0xda>
 800b8d4:	8be1      	ldrh	r1, [r4, #30]
 800b8d6:	88eb      	ldrh	r3, [r5, #6]
 800b8d8:	89af      	ldrh	r7, [r5, #12]
 800b8da:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 800b8de:	88aa      	ldrh	r2, [r5, #4]
 800b8e0:	f8d5 9008 	ldr.w	r9, [r5, #8]
 800b8e4:	428b      	cmp	r3, r1
 800b8e6:	d13f      	bne.n	800b968 <ai_platform_network_init+0x170>
 800b8e8:	83a2      	strh	r2, [r4, #28]
 800b8ea:	b19b      	cbz	r3, 800b914 <ai_platform_network_init+0x11c>
 800b8ec:	f04f 0e00 	mov.w	lr, #0
 800b8f0:	46f2      	mov	sl, lr
 800b8f2:	eb09 060e 	add.w	r6, r9, lr
 800b8f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b8f8:	6a25      	ldr	r5, [r4, #32]
 800b8fa:	4475      	add	r5, lr
 800b8fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b8fe:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b902:	e885 0003 	stmia.w	r5, {r0, r1}
 800b906:	8be3      	ldrh	r3, [r4, #30]
 800b908:	f10a 0a01 	add.w	sl, sl, #1
 800b90c:	459a      	cmp	sl, r3
 800b90e:	f10e 0e18 	add.w	lr, lr, #24
 800b912:	d3ee      	bcc.n	800b8f2 <ai_platform_network_init+0xfa>
 800b914:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800b916:	4598      	cmp	r8, r3
 800b918:	d12e      	bne.n	800b978 <ai_platform_network_init+0x180>
 800b91a:	84a7      	strh	r7, [r4, #36]	; 0x24
 800b91c:	f1b8 0f00 	cmp.w	r8, #0
 800b920:	d012      	beq.n	800b948 <ai_platform_network_init+0x150>
 800b922:	2700      	movs	r7, #0
 800b924:	46be      	mov	lr, r7
 800b926:	eb0c 0607 	add.w	r6, ip, r7
 800b92a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b92c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800b92e:	443d      	add	r5, r7
 800b930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b932:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b936:	e885 0003 	stmia.w	r5, {r0, r1}
 800b93a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800b93c:	f10e 0e01 	add.w	lr, lr, #1
 800b940:	459e      	cmp	lr, r3
 800b942:	f107 0718 	add.w	r7, r7, #24
 800b946:	d3ee      	bcc.n	800b926 <ai_platform_network_init+0x12e>
 800b948:	2303      	movs	r3, #3
 800b94a:	60e3      	str	r3, [r4, #12]
 800b94c:	4620      	mov	r0, r4
 800b94e:	f002 fc49 	bl	800e1e4 <ai_layers_init_all>
 800b952:	e006      	b.n	800b962 <ai_platform_network_init+0x16a>
 800b954:	f104 0010 	add.w	r0, r4, #16
 800b958:	2211      	movs	r2, #17
 800b95a:	2110      	movs	r1, #16
 800b95c:	462c      	mov	r4, r5
 800b95e:	f000 fb77 	bl	800c050 <core_set_error>
 800b962:	4620      	mov	r0, r4
 800b964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b968:	f104 0010 	add.w	r0, r4, #16
 800b96c:	2212      	movs	r2, #18
 800b96e:	2116      	movs	r1, #22
 800b970:	f000 fb6e 	bl	800c050 <core_set_error>
 800b974:	2400      	movs	r4, #0
 800b976:	e7f4      	b.n	800b962 <ai_platform_network_init+0x16a>
 800b978:	f104 0010 	add.w	r0, r4, #16
 800b97c:	2213      	movs	r2, #19
 800b97e:	2116      	movs	r1, #22
 800b980:	f000 fb66 	bl	800c050 <core_set_error>
 800b984:	2400      	movs	r4, #0
 800b986:	e7ec      	b.n	800b962 <ai_platform_network_init+0x16a>
 800b988:	4b21      	ldr	r3, [pc, #132]	; (800ba10 <ai_platform_network_init+0x218>)
 800b98a:	2201      	movs	r2, #1
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	2a00      	cmp	r2, #0
 800b992:	d1fc      	bne.n	800b98e <ai_platform_network_init+0x196>
 800b994:	4b1f      	ldr	r3, [pc, #124]	; (800ba14 <ai_platform_network_init+0x21c>)
 800b996:	4a1c      	ldr	r2, [pc, #112]	; (800ba08 <ai_platform_network_init+0x210>)
 800b998:	601a      	str	r2, [r3, #0]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	4b1b      	ldr	r3, [pc, #108]	; (800ba0c <ai_platform_network_init+0x214>)
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d115      	bne.n	800b9ce <ai_platform_network_init+0x1d6>
 800b9a2:	f7ff f8e1 	bl	800ab68 <_ai_platform_release_crc>
 800b9a6:	2400      	movs	r4, #0
 800b9a8:	e7db      	b.n	800b962 <ai_platform_network_init+0x16a>
 800b9aa:	8c28      	ldrh	r0, [r5, #32]
 800b9ac:	8bea      	ldrh	r2, [r5, #30]
 800b9ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b9b0:	fb02 f200 	mul.w	r2, r2, r0
 800b9b4:	fb03 f302 	mul.w	r3, r3, r2
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f43f af61 	beq.w	800b880 <ai_platform_network_init+0x88>
 800b9be:	f104 0010 	add.w	r0, r4, #16
 800b9c2:	2213      	movs	r2, #19
 800b9c4:	2110      	movs	r1, #16
 800b9c6:	4634      	mov	r4, r6
 800b9c8:	f000 fb42 	bl	800c050 <core_set_error>
 800b9cc:	e7c9      	b.n	800b962 <ai_platform_network_init+0x16a>
 800b9ce:	e7fe      	b.n	800b9ce <ai_platform_network_init+0x1d6>
 800b9d0:	8928      	ldrh	r0, [r5, #8]
 800b9d2:	88ea      	ldrh	r2, [r5, #6]
 800b9d4:	68eb      	ldr	r3, [r5, #12]
 800b9d6:	fb02 f200 	mul.w	r2, r2, r0
 800b9da:	fb03 f302 	mul.w	r3, r3, r2
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f43f af52 	beq.w	800b888 <ai_platform_network_init+0x90>
 800b9e4:	f104 0010 	add.w	r0, r4, #16
 800b9e8:	2212      	movs	r2, #18
 800b9ea:	2110      	movs	r1, #16
 800b9ec:	4664      	mov	r4, ip
 800b9ee:	f000 fb2f 	bl	800c050 <core_set_error>
 800b9f2:	e7b6      	b.n	800b962 <ai_platform_network_init+0x16a>
 800b9f4:	a1c00100 	.word	0xa1c00100
 800b9f8:	e0002000 	.word	0xe0002000
 800b9fc:	e0042000 	.word	0xe0042000
 800ba00:	58024c08 	.word	0x58024c08
 800ba04:	58024c00 	.word	0x58024c00
 800ba08:	f407a5c2 	.word	0xf407a5c2
 800ba0c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ba10:	40023008 	.word	0x40023008
 800ba14:	40023000 	.word	0x40023000
 800ba18:	a1facade 	.word	0xa1facade

0800ba1c <ai_platform_network_post_init>:
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	b120      	cbz	r0, 800ba2a <ai_platform_network_post_init+0xe>
 800ba20:	4b3f      	ldr	r3, [pc, #252]	; (800bb20 <ai_platform_network_post_init+0x104>)
 800ba22:	6802      	ldr	r2, [r0, #0]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	4604      	mov	r4, r0
 800ba28:	d02d      	beq.n	800ba86 <ai_platform_network_post_init+0x6a>
 800ba2a:	4a3e      	ldr	r2, [pc, #248]	; (800bb24 <ai_platform_network_post_init+0x108>)
 800ba2c:	6813      	ldr	r3, [r2, #0]
 800ba2e:	f023 0301 	bic.w	r3, r3, #1
 800ba32:	6013      	str	r3, [r2, #0]
 800ba34:	f7ff f896 	bl	800ab64 <_ai_platform_acquire_crc>
 800ba38:	4b3b      	ldr	r3, [pc, #236]	; (800bb28 <ai_platform_network_post_init+0x10c>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba44:	d00d      	beq.n	800ba62 <ai_platform_network_post_init+0x46>
 800ba46:	4b39      	ldr	r3, [pc, #228]	; (800bb2c <ai_platform_network_post_init+0x110>)
 800ba48:	2201      	movs	r2, #1
 800ba4a:	601a      	str	r2, [r3, #0]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	2a00      	cmp	r2, #0
 800ba50:	d1fc      	bne.n	800ba4c <ai_platform_network_post_init+0x30>
 800ba52:	4b37      	ldr	r3, [pc, #220]	; (800bb30 <ai_platform_network_post_init+0x114>)
 800ba54:	4a37      	ldr	r2, [pc, #220]	; (800bb34 <ai_platform_network_post_init+0x118>)
 800ba56:	601a      	str	r2, [r3, #0]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	4b37      	ldr	r3, [pc, #220]	; (800bb38 <ai_platform_network_post_init+0x11c>)
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d00d      	beq.n	800ba7c <ai_platform_network_post_init+0x60>
 800ba60:	e7fe      	b.n	800ba60 <ai_platform_network_post_init+0x44>
 800ba62:	4b36      	ldr	r3, [pc, #216]	; (800bb3c <ai_platform_network_post_init+0x120>)
 800ba64:	2201      	movs	r2, #1
 800ba66:	601a      	str	r2, [r3, #0]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	2a00      	cmp	r2, #0
 800ba6c:	d1fc      	bne.n	800ba68 <ai_platform_network_post_init+0x4c>
 800ba6e:	4b34      	ldr	r3, [pc, #208]	; (800bb40 <ai_platform_network_post_init+0x124>)
 800ba70:	4a30      	ldr	r2, [pc, #192]	; (800bb34 <ai_platform_network_post_init+0x118>)
 800ba72:	601a      	str	r2, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	4b30      	ldr	r3, [pc, #192]	; (800bb38 <ai_platform_network_post_init+0x11c>)
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d103      	bne.n	800ba84 <ai_platform_network_post_init+0x68>
 800ba7c:	f7ff f874 	bl	800ab68 <_ai_platform_release_crc>
 800ba80:	2000      	movs	r0, #0
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	e7fe      	b.n	800ba84 <ai_platform_network_post_init+0x68>
 800ba86:	4a27      	ldr	r2, [pc, #156]	; (800bb24 <ai_platform_network_post_init+0x108>)
 800ba88:	6813      	ldr	r3, [r2, #0]
 800ba8a:	f023 0301 	bic.w	r3, r3, #1
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	f7ff f868 	bl	800ab64 <_ai_platform_acquire_crc>
 800ba94:	4b24      	ldr	r3, [pc, #144]	; (800bb28 <ai_platform_network_post_init+0x10c>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800baa0:	d00d      	beq.n	800babe <ai_platform_network_post_init+0xa2>
 800baa2:	4b22      	ldr	r3, [pc, #136]	; (800bb2c <ai_platform_network_post_init+0x110>)
 800baa4:	2201      	movs	r2, #1
 800baa6:	601a      	str	r2, [r3, #0]
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	2a00      	cmp	r2, #0
 800baac:	d1fc      	bne.n	800baa8 <ai_platform_network_post_init+0x8c>
 800baae:	4b20      	ldr	r3, [pc, #128]	; (800bb30 <ai_platform_network_post_init+0x114>)
 800bab0:	4a20      	ldr	r2, [pc, #128]	; (800bb34 <ai_platform_network_post_init+0x118>)
 800bab2:	601a      	str	r2, [r3, #0]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	4b20      	ldr	r3, [pc, #128]	; (800bb38 <ai_platform_network_post_init+0x11c>)
 800bab8:	429a      	cmp	r2, r3
 800baba:	d00e      	beq.n	800bada <ai_platform_network_post_init+0xbe>
 800babc:	e7fe      	b.n	800babc <ai_platform_network_post_init+0xa0>
 800babe:	4b1f      	ldr	r3, [pc, #124]	; (800bb3c <ai_platform_network_post_init+0x120>)
 800bac0:	2201      	movs	r2, #1
 800bac2:	601a      	str	r2, [r3, #0]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	2a00      	cmp	r2, #0
 800bac8:	d1fc      	bne.n	800bac4 <ai_platform_network_post_init+0xa8>
 800baca:	4b1d      	ldr	r3, [pc, #116]	; (800bb40 <ai_platform_network_post_init+0x124>)
 800bacc:	4a19      	ldr	r2, [pc, #100]	; (800bb34 <ai_platform_network_post_init+0x118>)
 800bace:	601a      	str	r2, [r3, #0]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	4b19      	ldr	r3, [pc, #100]	; (800bb38 <ai_platform_network_post_init+0x11c>)
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d000      	beq.n	800bada <ai_platform_network_post_init+0xbe>
 800bad8:	e7fe      	b.n	800bad8 <ai_platform_network_post_init+0xbc>
 800bada:	f7ff f845 	bl	800ab68 <_ai_platform_release_crc>
 800bade:	68e3      	ldr	r3, [r4, #12]
 800bae0:	f013 0502 	ands.w	r5, r3, #2
 800bae4:	d011      	beq.n	800bb0a <ai_platform_network_post_init+0xee>
 800bae6:	4620      	mov	r0, r4
 800bae8:	f002 fb90 	bl	800e20c <ai_layers_post_init_all>
 800baec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800baee:	b1a3      	cbz	r3, 800bb1a <ai_platform_network_post_init+0xfe>
 800baf0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800baf2:	b195      	cbz	r5, 800bb1a <ai_platform_network_post_init+0xfe>
 800baf4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800baf6:	4629      	mov	r1, r5
 800baf8:	2000      	movs	r0, #0
 800bafa:	4798      	blx	r3
 800bafc:	692b      	ldr	r3, [r5, #16]
 800bafe:	42ab      	cmp	r3, r5
 800bb00:	d00b      	beq.n	800bb1a <ai_platform_network_post_init+0xfe>
 800bb02:	461d      	mov	r5, r3
 800bb04:	b14b      	cbz	r3, 800bb1a <ai_platform_network_post_init+0xfe>
 800bb06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bb08:	e7f4      	b.n	800baf4 <ai_platform_network_post_init+0xd8>
 800bb0a:	f104 0010 	add.w	r0, r4, #16
 800bb0e:	2210      	movs	r2, #16
 800bb10:	2111      	movs	r1, #17
 800bb12:	f000 fa9d 	bl	800c050 <core_set_error>
 800bb16:	4628      	mov	r0, r5
 800bb18:	bd38      	pop	{r3, r4, r5, pc}
 800bb1a:	2001      	movs	r0, #1
 800bb1c:	bd38      	pop	{r3, r4, r5, pc}
 800bb1e:	bf00      	nop
 800bb20:	a1c00100 	.word	0xa1c00100
 800bb24:	e0002000 	.word	0xe0002000
 800bb28:	e0042000 	.word	0xe0042000
 800bb2c:	58024c08 	.word	0x58024c08
 800bb30:	58024c00 	.word	0x58024c00
 800bb34:	f407a5c2 	.word	0xf407a5c2
 800bb38:	b5e8b5cd 	.word	0xb5e8b5cd
 800bb3c:	40023008 	.word	0x40023008
 800bb40:	40023000 	.word	0x40023000

0800bb44 <ai_platform_network_process>:
 800bb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	b085      	sub	sp, #20
 800bb4a:	460d      	mov	r5, r1
 800bb4c:	9202      	str	r2, [sp, #8]
 800bb4e:	4604      	mov	r4, r0
 800bb50:	b120      	cbz	r0, 800bb5c <ai_platform_network_process+0x18>
 800bb52:	4b7b      	ldr	r3, [pc, #492]	; (800bd40 <ai_platform_network_process+0x1fc>)
 800bb54:	6802      	ldr	r2, [r0, #0]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	bf18      	it	ne
 800bb5a:	2400      	movne	r4, #0
 800bb5c:	4a79      	ldr	r2, [pc, #484]	; (800bd44 <ai_platform_network_process+0x200>)
 800bb5e:	6813      	ldr	r3, [r2, #0]
 800bb60:	f023 0301 	bic.w	r3, r3, #1
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	f7fe fffd 	bl	800ab64 <_ai_platform_acquire_crc>
 800bb6a:	4b77      	ldr	r3, [pc, #476]	; (800bd48 <ai_platform_network_process+0x204>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb76:	d00d      	beq.n	800bb94 <ai_platform_network_process+0x50>
 800bb78:	4b74      	ldr	r3, [pc, #464]	; (800bd4c <ai_platform_network_process+0x208>)
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	2a00      	cmp	r2, #0
 800bb82:	d1fc      	bne.n	800bb7e <ai_platform_network_process+0x3a>
 800bb84:	4b72      	ldr	r3, [pc, #456]	; (800bd50 <ai_platform_network_process+0x20c>)
 800bb86:	4a73      	ldr	r2, [pc, #460]	; (800bd54 <ai_platform_network_process+0x210>)
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	4b72      	ldr	r3, [pc, #456]	; (800bd58 <ai_platform_network_process+0x214>)
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d00e      	beq.n	800bbb0 <ai_platform_network_process+0x6c>
 800bb92:	e7fe      	b.n	800bb92 <ai_platform_network_process+0x4e>
 800bb94:	4b71      	ldr	r3, [pc, #452]	; (800bd5c <ai_platform_network_process+0x218>)
 800bb96:	2201      	movs	r2, #1
 800bb98:	601a      	str	r2, [r3, #0]
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	2a00      	cmp	r2, #0
 800bb9e:	d1fc      	bne.n	800bb9a <ai_platform_network_process+0x56>
 800bba0:	4b6f      	ldr	r3, [pc, #444]	; (800bd60 <ai_platform_network_process+0x21c>)
 800bba2:	4a6c      	ldr	r2, [pc, #432]	; (800bd54 <ai_platform_network_process+0x210>)
 800bba4:	601a      	str	r2, [r3, #0]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	4b6b      	ldr	r3, [pc, #428]	; (800bd58 <ai_platform_network_process+0x214>)
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d000      	beq.n	800bbb0 <ai_platform_network_process+0x6c>
 800bbae:	e7fe      	b.n	800bbae <ai_platform_network_process+0x6a>
 800bbb0:	f7fe ffda 	bl	800ab68 <_ai_platform_release_crc>
 800bbb4:	2c00      	cmp	r4, #0
 800bbb6:	f000 808e 	beq.w	800bcd6 <ai_platform_network_process+0x192>
 800bbba:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800bbbc:	2f00      	cmp	r7, #0
 800bbbe:	f040 823c 	bne.w	800c03a <ai_platform_network_process+0x4f6>
 800bbc2:	68e3      	ldr	r3, [r4, #12]
 800bbc4:	f003 0303 	and.w	r3, r3, #3
 800bbc8:	f04f 0b00 	mov.w	fp, #0
 800bbcc:	2b03      	cmp	r3, #3
 800bbce:	f8c4 b014 	str.w	fp, [r4, #20]
 800bbd2:	f040 822b 	bne.w	800c02c <ai_platform_network_process+0x4e8>
 800bbd6:	2d00      	cmp	r5, #0
 800bbd8:	f000 80a8 	beq.w	800bd2c <ai_platform_network_process+0x1e8>
 800bbdc:	2f00      	cmp	r7, #0
 800bbde:	f000 80a5 	beq.w	800bd2c <ai_platform_network_process+0x1e8>
 800bbe2:	883b      	ldrh	r3, [r7, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f000 80a1 	beq.w	800bd2c <ai_platform_network_process+0x1e8>
 800bbea:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 800bbee:	9401      	str	r4, [sp, #4]
 800bbf0:	46d8      	mov	r8, fp
 800bbf2:	4598      	cmp	r8, r3
 800bbf4:	f080 80b6 	bcs.w	800bd64 <ai_platform_network_process+0x220>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f000 80b2 	beq.w	800bd64 <ai_platform_network_process+0x220>
 800bc00:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800bc04:	2e00      	cmp	r6, #0
 800bc06:	f000 80ad 	beq.w	800bd64 <ai_platform_network_process+0x220>
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	9303      	str	r3, [sp, #12]
 800bc10:	ea4f 1408 	mov.w	r4, r8, lsl #4
 800bc14:	eb13 0a04 	adds.w	sl, r3, r4
 800bc18:	f000 8087 	beq.w	800bd2a <ai_platform_network_process+0x1e6>
 800bc1c:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800bc20:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800bc24:	69b0      	ldr	r0, [r6, #24]
 800bc26:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800bc2a:	6841      	ldr	r1, [r0, #4]
 800bc2c:	fb0b f30e 	mul.w	r3, fp, lr
 800bc30:	fb0c f303 	mul.w	r3, ip, r3
 800bc34:	4299      	cmp	r1, r3
 800bc36:	d36e      	bcc.n	800bd16 <ai_platform_network_process+0x1d2>
 800bc38:	68f3      	ldr	r3, [r6, #12]
 800bc3a:	68da      	ldr	r2, [r3, #12]
 800bc3c:	455a      	cmp	r2, fp
 800bc3e:	d16a      	bne.n	800bd16 <ai_platform_network_process+0x1d2>
 800bc40:	689a      	ldr	r2, [r3, #8]
 800bc42:	4572      	cmp	r2, lr
 800bc44:	d167      	bne.n	800bd16 <ai_platform_network_process+0x1d2>
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	459c      	cmp	ip, r3
 800bc4a:	d164      	bne.n	800bd16 <ai_platform_network_process+0x1d2>
 800bc4c:	6800      	ldr	r0, [r0, #0]
 800bc4e:	f002 fbb3 	bl	800e3b8 <ai_array_get_byte_size>
 800bc52:	68f2      	ldr	r2, [r6, #12]
 800bc54:	6973      	ldr	r3, [r6, #20]
 800bc56:	68d2      	ldr	r2, [r2, #12]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	fb03 f302 	mul.w	r3, r3, r2
 800bc5e:	4298      	cmp	r0, r3
 800bc60:	d359      	bcc.n	800bd16 <ai_platform_network_process+0x1d2>
 800bc62:	69b3      	ldr	r3, [r6, #24]
 800bc64:	6818      	ldr	r0, [r3, #0]
 800bc66:	f002 fb4f 	bl	800e308 <ai_array_to_buffer_fmt>
 800bc6a:	682b      	ldr	r3, [r5, #0]
 800bc6c:	4043      	eors	r3, r0
 800bc6e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800bc72:	d146      	bne.n	800bd02 <ai_platform_network_process+0x1be>
 800bc74:	692b      	ldr	r3, [r5, #16]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d03a      	beq.n	800bcf0 <ai_platform_network_process+0x1ac>
 800bc7a:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800bc7e:	f1bb 0f00 	cmp.w	fp, #0
 800bc82:	d02d      	beq.n	800bce0 <ai_platform_network_process+0x19c>
 800bc84:	68f2      	ldr	r2, [r6, #12]
 800bc86:	6973      	ldr	r3, [r6, #20]
 800bc88:	68d1      	ldr	r1, [r2, #12]
 800bc8a:	68da      	ldr	r2, [r3, #12]
 800bc8c:	fb02 f201 	mul.w	r2, r2, r1
 800bc90:	f8ca 2008 	str.w	r2, [sl, #8]
 800bc94:	88ab      	ldrh	r3, [r5, #4]
 800bc96:	fb02 f203 	mul.w	r2, r2, r3
 800bc9a:	f8ca 200c 	str.w	r2, [sl, #12]
 800bc9e:	6929      	ldr	r1, [r5, #16]
 800bca0:	f8ca 1004 	str.w	r1, [sl, #4]
 800bca4:	692b      	ldr	r3, [r5, #16]
 800bca6:	4413      	add	r3, r2
 800bca8:	9a03      	ldr	r2, [sp, #12]
 800bcaa:	5113      	str	r3, [r2, r4]
 800bcac:	69b0      	ldr	r0, [r6, #24]
 800bcae:	6803      	ldr	r3, [r0, #0]
 800bcb0:	45d9      	cmp	r9, fp
 800bcb2:	bf38      	it	cc
 800bcb4:	46d9      	movcc	r9, fp
 800bcb6:	009a      	lsls	r2, r3, #2
 800bcb8:	d408      	bmi.n	800bccc <ai_platform_network_process+0x188>
 800bcba:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800bcbe:	1a9b      	subs	r3, r3, r2
 800bcc0:	4419      	add	r1, r3
 800bcc2:	6081      	str	r1, [r0, #8]
 800bcc4:	69b3      	ldr	r3, [r6, #24]
 800bcc6:	f8da 2004 	ldr.w	r2, [sl, #4]
 800bcca:	60da      	str	r2, [r3, #12]
 800bccc:	883b      	ldrh	r3, [r7, #0]
 800bcce:	f108 0801 	add.w	r8, r8, #1
 800bcd2:	3518      	adds	r5, #24
 800bcd4:	e78d      	b.n	800bbf2 <ai_platform_network_process+0xae>
 800bcd6:	46a3      	mov	fp, r4
 800bcd8:	4658      	mov	r0, fp
 800bcda:	b005      	add	sp, #20
 800bcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce0:	9c01      	ldr	r4, [sp, #4]
 800bce2:	2221      	movs	r2, #33	; 0x21
 800bce4:	f104 0010 	add.w	r0, r4, #16
 800bce8:	2112      	movs	r1, #18
 800bcea:	f000 f9b1 	bl	800c050 <core_set_error>
 800bcee:	e7f3      	b.n	800bcd8 <ai_platform_network_process+0x194>
 800bcf0:	9c01      	ldr	r4, [sp, #4]
 800bcf2:	2217      	movs	r2, #23
 800bcf4:	f104 0010 	add.w	r0, r4, #16
 800bcf8:	2112      	movs	r1, #18
 800bcfa:	469b      	mov	fp, r3
 800bcfc:	f000 f9a8 	bl	800c050 <core_set_error>
 800bd00:	e7ea      	b.n	800bcd8 <ai_platform_network_process+0x194>
 800bd02:	9c01      	ldr	r4, [sp, #4]
 800bd04:	2219      	movs	r2, #25
 800bd06:	f104 0010 	add.w	r0, r4, #16
 800bd0a:	2112      	movs	r1, #18
 800bd0c:	f000 f9a0 	bl	800c050 <core_set_error>
 800bd10:	f04f 0b00 	mov.w	fp, #0
 800bd14:	e7e0      	b.n	800bcd8 <ai_platform_network_process+0x194>
 800bd16:	9c01      	ldr	r4, [sp, #4]
 800bd18:	2218      	movs	r2, #24
 800bd1a:	f104 0010 	add.w	r0, r4, #16
 800bd1e:	2112      	movs	r1, #18
 800bd20:	f000 f996 	bl	800c050 <core_set_error>
 800bd24:	f04f 0b00 	mov.w	fp, #0
 800bd28:	e7d6      	b.n	800bcd8 <ai_platform_network_process+0x194>
 800bd2a:	9c01      	ldr	r4, [sp, #4]
 800bd2c:	f104 0010 	add.w	r0, r4, #16
 800bd30:	2217      	movs	r2, #23
 800bd32:	2112      	movs	r1, #18
 800bd34:	f000 f98c 	bl	800c050 <core_set_error>
 800bd38:	f04f 0b00 	mov.w	fp, #0
 800bd3c:	e7cc      	b.n	800bcd8 <ai_platform_network_process+0x194>
 800bd3e:	bf00      	nop
 800bd40:	a1c00100 	.word	0xa1c00100
 800bd44:	e0002000 	.word	0xe0002000
 800bd48:	e0042000 	.word	0xe0042000
 800bd4c:	58024c08 	.word	0x58024c08
 800bd50:	58024c00 	.word	0x58024c00
 800bd54:	f407a5c2 	.word	0xf407a5c2
 800bd58:	b5e8b5cd 	.word	0xb5e8b5cd
 800bd5c:	40023008 	.word	0x40023008
 800bd60:	40023000 	.word	0x40023000
 800bd64:	9c01      	ldr	r4, [sp, #4]
 800bd66:	9a02      	ldr	r2, [sp, #8]
 800bd68:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800bd6a:	2a00      	cmp	r2, #0
 800bd6c:	f000 80a9 	beq.w	800bec2 <ai_platform_network_process+0x37e>
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	f240 809b 	bls.w	800beac <ai_platform_network_process+0x368>
 800bd76:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800bd7a:	f11a 0f0c 	cmn.w	sl, #12
 800bd7e:	f000 8095 	beq.w	800beac <ai_platform_network_process+0x368>
 800bd82:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f000 8090 	beq.w	800beac <ai_platform_network_process+0x368>
 800bd8c:	9d02      	ldr	r5, [sp, #8]
 800bd8e:	9401      	str	r4, [sp, #4]
 800bd90:	f04f 0800 	mov.w	r8, #0
 800bd94:	4598      	cmp	r8, r3
 800bd96:	f080 8092 	bcs.w	800bebe <ai_platform_network_process+0x37a>
 800bd9a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f000 808d 	beq.w	800bebe <ai_platform_network_process+0x37a>
 800bda4:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800bda8:	2e00      	cmp	r6, #0
 800bdaa:	f000 8088 	beq.w	800bebe <ai_platform_network_process+0x37a>
 800bdae:	f8da 3014 	ldr.w	r3, [sl, #20]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	9302      	str	r3, [sp, #8]
 800bdb6:	ea4f 1408 	mov.w	r4, r8, lsl #4
 800bdba:	191f      	adds	r7, r3, r4
 800bdbc:	f000 812d 	beq.w	800c01a <ai_platform_network_process+0x4d6>
 800bdc0:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800bdc4:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800bdc8:	69b0      	ldr	r0, [r6, #24]
 800bdca:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800bdce:	6841      	ldr	r1, [r0, #4]
 800bdd0:	fb0b f30e 	mul.w	r3, fp, lr
 800bdd4:	fb0c f303 	mul.w	r3, ip, r3
 800bdd8:	4299      	cmp	r1, r3
 800bdda:	d366      	bcc.n	800beaa <ai_platform_network_process+0x366>
 800bddc:	68f3      	ldr	r3, [r6, #12]
 800bdde:	68da      	ldr	r2, [r3, #12]
 800bde0:	455a      	cmp	r2, fp
 800bde2:	d162      	bne.n	800beaa <ai_platform_network_process+0x366>
 800bde4:	689a      	ldr	r2, [r3, #8]
 800bde6:	4572      	cmp	r2, lr
 800bde8:	d15f      	bne.n	800beaa <ai_platform_network_process+0x366>
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	459c      	cmp	ip, r3
 800bdee:	d15c      	bne.n	800beaa <ai_platform_network_process+0x366>
 800bdf0:	6800      	ldr	r0, [r0, #0]
 800bdf2:	f002 fae1 	bl	800e3b8 <ai_array_get_byte_size>
 800bdf6:	68f2      	ldr	r2, [r6, #12]
 800bdf8:	6973      	ldr	r3, [r6, #20]
 800bdfa:	68d2      	ldr	r2, [r2, #12]
 800bdfc:	68db      	ldr	r3, [r3, #12]
 800bdfe:	fb03 f302 	mul.w	r3, r3, r2
 800be02:	4298      	cmp	r0, r3
 800be04:	d351      	bcc.n	800beaa <ai_platform_network_process+0x366>
 800be06:	69b3      	ldr	r3, [r6, #24]
 800be08:	6818      	ldr	r0, [r3, #0]
 800be0a:	f002 fa7d 	bl	800e308 <ai_array_to_buffer_fmt>
 800be0e:	682b      	ldr	r3, [r5, #0]
 800be10:	4043      	eors	r3, r0
 800be12:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800be16:	d13e      	bne.n	800be96 <ai_platform_network_process+0x352>
 800be18:	692b      	ldr	r3, [r5, #16]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d032      	beq.n	800be84 <ai_platform_network_process+0x340>
 800be1e:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800be22:	f1bb 0f00 	cmp.w	fp, #0
 800be26:	d025      	beq.n	800be74 <ai_platform_network_process+0x330>
 800be28:	68f2      	ldr	r2, [r6, #12]
 800be2a:	6973      	ldr	r3, [r6, #20]
 800be2c:	68d1      	ldr	r1, [r2, #12]
 800be2e:	68da      	ldr	r2, [r3, #12]
 800be30:	fb02 f201 	mul.w	r2, r2, r1
 800be34:	60ba      	str	r2, [r7, #8]
 800be36:	88ab      	ldrh	r3, [r5, #4]
 800be38:	fb02 f203 	mul.w	r2, r2, r3
 800be3c:	60fa      	str	r2, [r7, #12]
 800be3e:	6929      	ldr	r1, [r5, #16]
 800be40:	6079      	str	r1, [r7, #4]
 800be42:	692b      	ldr	r3, [r5, #16]
 800be44:	4413      	add	r3, r2
 800be46:	9a02      	ldr	r2, [sp, #8]
 800be48:	5113      	str	r3, [r2, r4]
 800be4a:	69b0      	ldr	r0, [r6, #24]
 800be4c:	6803      	ldr	r3, [r0, #0]
 800be4e:	45d9      	cmp	r9, fp
 800be50:	bf38      	it	cc
 800be52:	46d9      	movcc	r9, fp
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	d407      	bmi.n	800be68 <ai_platform_network_process+0x324>
 800be58:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800be5c:	1a9b      	subs	r3, r3, r2
 800be5e:	4419      	add	r1, r3
 800be60:	6081      	str	r1, [r0, #8]
 800be62:	69b3      	ldr	r3, [r6, #24]
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	60da      	str	r2, [r3, #12]
 800be68:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800be6c:	f108 0801 	add.w	r8, r8, #1
 800be70:	3518      	adds	r5, #24
 800be72:	e78f      	b.n	800bd94 <ai_platform_network_process+0x250>
 800be74:	9c01      	ldr	r4, [sp, #4]
 800be76:	2221      	movs	r2, #33	; 0x21
 800be78:	f104 0010 	add.w	r0, r4, #16
 800be7c:	2113      	movs	r1, #19
 800be7e:	f000 f8e7 	bl	800c050 <core_set_error>
 800be82:	e729      	b.n	800bcd8 <ai_platform_network_process+0x194>
 800be84:	9c01      	ldr	r4, [sp, #4]
 800be86:	2217      	movs	r2, #23
 800be88:	f104 0010 	add.w	r0, r4, #16
 800be8c:	2113      	movs	r1, #19
 800be8e:	469b      	mov	fp, r3
 800be90:	f000 f8de 	bl	800c050 <core_set_error>
 800be94:	e720      	b.n	800bcd8 <ai_platform_network_process+0x194>
 800be96:	9c01      	ldr	r4, [sp, #4]
 800be98:	2219      	movs	r2, #25
 800be9a:	f104 0010 	add.w	r0, r4, #16
 800be9e:	2113      	movs	r1, #19
 800bea0:	f000 f8d6 	bl	800c050 <core_set_error>
 800bea4:	f04f 0b00 	mov.w	fp, #0
 800bea8:	e716      	b.n	800bcd8 <ai_platform_network_process+0x194>
 800beaa:	9c01      	ldr	r4, [sp, #4]
 800beac:	f104 0010 	add.w	r0, r4, #16
 800beb0:	2218      	movs	r2, #24
 800beb2:	2113      	movs	r1, #19
 800beb4:	f000 f8cc 	bl	800c050 <core_set_error>
 800beb8:	f04f 0b00 	mov.w	fp, #0
 800bebc:	e70c      	b.n	800bcd8 <ai_platform_network_process+0x194>
 800bebe:	9c01      	ldr	r4, [sp, #4]
 800bec0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800bec2:	f8a4 9014 	strh.w	r9, [r4, #20]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	f000 80a4 	beq.w	800c014 <ai_platform_network_process+0x4d0>
 800becc:	2b01      	cmp	r3, #1
 800bece:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800bed0:	f240 809e 	bls.w	800c010 <ai_platform_network_process+0x4cc>
 800bed4:	f105 070c 	add.w	r7, r5, #12
 800bed8:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 800bedc:	8aa3      	ldrh	r3, [r4, #20]
 800bede:	455b      	cmp	r3, fp
 800bee0:	f67f aefa 	bls.w	800bcd8 <ai_platform_network_process+0x194>
 800bee4:	9401      	str	r4, [sp, #4]
 800bee6:	2d00      	cmp	r5, #0
 800bee8:	d036      	beq.n	800bf58 <ai_platform_network_process+0x414>
 800beea:	882b      	ldrh	r3, [r5, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d033      	beq.n	800bf58 <ai_platform_network_process+0x414>
 800bef0:	686b      	ldr	r3, [r5, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d030      	beq.n	800bf58 <ai_platform_network_process+0x414>
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f04f 0800 	mov.w	r8, #0
 800befc:	b9db      	cbnz	r3, 800bf36 <ai_platform_network_process+0x3f2>
 800befe:	e02b      	b.n	800bf58 <ai_platform_network_process+0x414>
 800bf00:	68d4      	ldr	r4, [r2, #12]
 800bf02:	1b00      	subs	r0, r0, r4
 800bf04:	4401      	add	r1, r0
 800bf06:	6091      	str	r1, [r2, #8]
 800bf08:	699b      	ldr	r3, [r3, #24]
 800bf0a:	6872      	ldr	r2, [r6, #4]
 800bf0c:	60da      	str	r2, [r3, #12]
 800bf0e:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800bf12:	f85a 2009 	ldr.w	r2, [sl, r9]
 800bf16:	440b      	add	r3, r1
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	bf24      	itt	cs
 800bf1c:	68f3      	ldrcs	r3, [r6, #12]
 800bf1e:	1ad3      	subcs	r3, r2, r3
 800bf20:	6073      	str	r3, [r6, #4]
 800bf22:	882b      	ldrh	r3, [r5, #0]
 800bf24:	f108 0801 	add.w	r8, r8, #1
 800bf28:	4598      	cmp	r8, r3
 800bf2a:	d215      	bcs.n	800bf58 <ai_platform_network_process+0x414>
 800bf2c:	686b      	ldr	r3, [r5, #4]
 800bf2e:	b19b      	cbz	r3, 800bf58 <ai_platform_network_process+0x414>
 800bf30:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800bf34:	b183      	cbz	r3, 800bf58 <ai_platform_network_process+0x414>
 800bf36:	68a9      	ldr	r1, [r5, #8]
 800bf38:	699a      	ldr	r2, [r3, #24]
 800bf3a:	f8d1 a000 	ldr.w	sl, [r1]
 800bf3e:	6814      	ldr	r4, [r2, #0]
 800bf40:	6890      	ldr	r0, [r2, #8]
 800bf42:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800bf46:	eb0a 0609 	add.w	r6, sl, r9
 800bf4a:	00a4      	lsls	r4, r4, #2
 800bf4c:	6871      	ldr	r1, [r6, #4]
 800bf4e:	d5d7      	bpl.n	800bf00 <ai_platform_network_process+0x3bc>
 800bf50:	68b2      	ldr	r2, [r6, #8]
 800bf52:	f002 fb7f 	bl	800e654 <memcpy>
 800bf56:	e7da      	b.n	800bf0e <ai_platform_network_process+0x3ca>
 800bf58:	9801      	ldr	r0, [sp, #4]
 800bf5a:	f002 f96f 	bl	800e23c <ai_layers_forward_all>
 800bf5e:	2f00      	cmp	r7, #0
 800bf60:	d047      	beq.n	800bff2 <ai_platform_network_process+0x4ae>
 800bf62:	883b      	ldrh	r3, [r7, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d044      	beq.n	800bff2 <ai_platform_network_process+0x4ae>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d041      	beq.n	800bff2 <ai_platform_network_process+0x4ae>
 800bf6e:	6818      	ldr	r0, [r3, #0]
 800bf70:	2800      	cmp	r0, #0
 800bf72:	d03e      	beq.n	800bff2 <ai_platform_network_process+0x4ae>
 800bf74:	f04f 0800 	mov.w	r8, #0
 800bf78:	e019      	b.n	800bfae <ai_platform_network_process+0x46a>
 800bf7a:	f85a 2009 	ldr.w	r2, [sl, r9]
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	bf24      	itt	cs
 800bf82:	68f3      	ldrcs	r3, [r6, #12]
 800bf84:	1ad3      	subcs	r3, r2, r3
 800bf86:	6073      	str	r3, [r6, #4]
 800bf88:	6981      	ldr	r1, [r0, #24]
 800bf8a:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800bf8e:	1b12      	subs	r2, r2, r4
 800bf90:	4413      	add	r3, r2
 800bf92:	608b      	str	r3, [r1, #8]
 800bf94:	6983      	ldr	r3, [r0, #24]
 800bf96:	6872      	ldr	r2, [r6, #4]
 800bf98:	60da      	str	r2, [r3, #12]
 800bf9a:	883b      	ldrh	r3, [r7, #0]
 800bf9c:	f108 0801 	add.w	r8, r8, #1
 800bfa0:	4598      	cmp	r8, r3
 800bfa2:	d226      	bcs.n	800bff2 <ai_platform_network_process+0x4ae>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	b323      	cbz	r3, 800bff2 <ai_platform_network_process+0x4ae>
 800bfa8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bfac:	b308      	cbz	r0, 800bff2 <ai_platform_network_process+0x4ae>
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	6981      	ldr	r1, [r0, #24]
 800bfb2:	f8d3 a000 	ldr.w	sl, [r3]
 800bfb6:	680c      	ldr	r4, [r1, #0]
 800bfb8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800bfbc:	eb0a 0609 	add.w	r6, sl, r9
 800bfc0:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800bfc4:	00a4      	lsls	r4, r4, #2
 800bfc6:	eb0c 0302 	add.w	r3, ip, r2
 800bfca:	d5d6      	bpl.n	800bf7a <ai_platform_network_process+0x436>
 800bfcc:	6889      	ldr	r1, [r1, #8]
 800bfce:	4660      	mov	r0, ip
 800bfd0:	f002 fb40 	bl	800e654 <memcpy>
 800bfd4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800bfd8:	f85a 2009 	ldr.w	r2, [sl, r9]
 800bfdc:	440b      	add	r3, r1
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	bf24      	itt	cs
 800bfe2:	68f3      	ldrcs	r3, [r6, #12]
 800bfe4:	1ad3      	subcs	r3, r2, r3
 800bfe6:	6073      	str	r3, [r6, #4]
 800bfe8:	883b      	ldrh	r3, [r7, #0]
 800bfea:	f108 0801 	add.w	r8, r8, #1
 800bfee:	4598      	cmp	r8, r3
 800bff0:	d3d8      	bcc.n	800bfa4 <ai_platform_network_process+0x460>
 800bff2:	9b01      	ldr	r3, [sp, #4]
 800bff4:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 800bff8:	461a      	mov	r2, r3
 800bffa:	f10b 0b01 	add.w	fp, fp, #1
 800bffe:	8a9b      	ldrh	r3, [r3, #20]
 800c000:	fa1f fb8b 	uxth.w	fp, fp
 800c004:	455b      	cmp	r3, fp
 800c006:	f8a2 b016 	strh.w	fp, [r2, #22]
 800c00a:	f63f af6c 	bhi.w	800bee6 <ai_platform_network_process+0x3a2>
 800c00e:	e663      	b.n	800bcd8 <ai_platform_network_process+0x194>
 800c010:	2700      	movs	r7, #0
 800c012:	e761      	b.n	800bed8 <ai_platform_network_process+0x394>
 800c014:	461d      	mov	r5, r3
 800c016:	461f      	mov	r7, r3
 800c018:	e75e      	b.n	800bed8 <ai_platform_network_process+0x394>
 800c01a:	9c01      	ldr	r4, [sp, #4]
 800c01c:	2217      	movs	r2, #23
 800c01e:	f104 0010 	add.w	r0, r4, #16
 800c022:	2113      	movs	r1, #19
 800c024:	f000 f814 	bl	800c050 <core_set_error>
 800c028:	46bb      	mov	fp, r7
 800c02a:	e655      	b.n	800bcd8 <ai_platform_network_process+0x194>
 800c02c:	f104 0010 	add.w	r0, r4, #16
 800c030:	2230      	movs	r2, #48	; 0x30
 800c032:	2111      	movs	r1, #17
 800c034:	f000 f80c 	bl	800c050 <core_set_error>
 800c038:	e64e      	b.n	800bcd8 <ai_platform_network_process+0x194>
 800c03a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800c03c:	e5c1      	b.n	800bbc2 <ai_platform_network_process+0x7e>
 800c03e:	bf00      	nop

0800c040 <core_init>:
 800c040:	2001      	movs	r0, #1
 800c042:	4770      	bx	lr

0800c044 <core_get_error>:
 800c044:	4603      	mov	r3, r0
 800c046:	2200      	movs	r2, #0
 800c048:	6800      	ldr	r0, [r0, #0]
 800c04a:	601a      	str	r2, [r3, #0]
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop

0800c050 <core_set_error>:
 800c050:	7803      	ldrb	r3, [r0, #0]
 800c052:	b933      	cbnz	r3, 800c062 <core_set_error+0x12>
 800c054:	7001      	strb	r1, [r0, #0]
 800c056:	6803      	ldr	r3, [r0, #0]
 800c058:	f362 231f 	bfi	r3, r2, #8, #24
 800c05c:	6003      	str	r3, [r0, #0]
 800c05e:	2001      	movs	r0, #1
 800c060:	4770      	bx	lr
 800c062:	2000      	movs	r0, #0
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop

0800c068 <func_dummy>:
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop

0800c06c <ai_dict8_dot_array_f32>:
 800c06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c070:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c074:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 800c078:	f000 80c0 	beq.w	800c1fc <ai_dict8_dot_array_f32+0x190>
 800c07c:	f101 0408 	add.w	r4, r1, #8
 800c080:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800c084:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800c204 <ai_dict8_dot_array_f32+0x198>
 800c088:	eb04 0e09 	add.w	lr, r4, r9
 800c08c:	f103 0520 	add.w	r5, r3, #32
 800c090:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 800c094:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800c098:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 800c09c:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 800c0a0:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 800c0a4:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800c0a8:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800c0ac:	ed55 3a04 	vldr	s7, [r5, #-16]
 800c0b0:	ed55 4a03 	vldr	s9, [r5, #-12]
 800c0b4:	ed55 5a02 	vldr	s11, [r5, #-8]
 800c0b8:	ed55 6a01 	vldr	s13, [r5, #-4]
 800c0bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c0c0:	edd6 7a00 	vldr	s15, [r6]
 800c0c4:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800c0c8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800c0cc:	ee67 7a83 	vmul.f32	s15, s15, s6
 800c0d0:	ed9a 3a00 	vldr	s6, [sl]
 800c0d4:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 800c0d8:	eee3 7a05 	vfma.f32	s15, s6, s10
 800c0dc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c0e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c0e4:	ed97 3a00 	vldr	s6, [r7]
 800c0e8:	ed96 5a00 	vldr	s10, [r6]
 800c0ec:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800c0f0:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 800c0f4:	eee3 7a04 	vfma.f32	s15, s6, s8
 800c0f8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800c0fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c100:	ed9a 3a00 	vldr	s6, [sl]
 800c104:	ed96 4a00 	vldr	s8, [r6]
 800c108:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800c10c:	eee5 7a06 	vfma.f32	s15, s10, s12
 800c110:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c114:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c118:	ed97 5a00 	vldr	s10, [r7]
 800c11c:	ed96 6a00 	vldr	s12, [r6]
 800c120:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c124:	3408      	adds	r4, #8
 800c126:	45a6      	cmp	lr, r4
 800c128:	f105 0520 	add.w	r5, r5, #32
 800c12c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c130:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c134:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c13c:	d1a8      	bne.n	800c090 <ai_dict8_dot_array_f32+0x24>
 800c13e:	4449      	add	r1, r9
 800c140:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800c144:	f01c 0c07 	ands.w	ip, ip, #7
 800c148:	d050      	beq.n	800c1ec <ai_dict8_dot_array_f32+0x180>
 800c14a:	780c      	ldrb	r4, [r1, #0]
 800c14c:	edd3 6a00 	vldr	s13, [r3]
 800c150:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c154:	edd4 7a00 	vldr	s15, [r4]
 800c158:	f1bc 0f01 	cmp.w	ip, #1
 800c15c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c160:	d044      	beq.n	800c1ec <ai_dict8_dot_array_f32+0x180>
 800c162:	784c      	ldrb	r4, [r1, #1]
 800c164:	edd3 6a01 	vldr	s13, [r3, #4]
 800c168:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c16c:	edd4 7a00 	vldr	s15, [r4]
 800c170:	f1bc 0f02 	cmp.w	ip, #2
 800c174:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c178:	d038      	beq.n	800c1ec <ai_dict8_dot_array_f32+0x180>
 800c17a:	788c      	ldrb	r4, [r1, #2]
 800c17c:	edd3 6a02 	vldr	s13, [r3, #8]
 800c180:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c184:	edd4 7a00 	vldr	s15, [r4]
 800c188:	f1bc 0f03 	cmp.w	ip, #3
 800c18c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c190:	d02c      	beq.n	800c1ec <ai_dict8_dot_array_f32+0x180>
 800c192:	78cc      	ldrb	r4, [r1, #3]
 800c194:	edd3 6a03 	vldr	s13, [r3, #12]
 800c198:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c19c:	edd4 7a00 	vldr	s15, [r4]
 800c1a0:	f1bc 0f04 	cmp.w	ip, #4
 800c1a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c1a8:	d020      	beq.n	800c1ec <ai_dict8_dot_array_f32+0x180>
 800c1aa:	790c      	ldrb	r4, [r1, #4]
 800c1ac:	edd3 6a04 	vldr	s13, [r3, #16]
 800c1b0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c1b4:	edd4 7a00 	vldr	s15, [r4]
 800c1b8:	f1bc 0f05 	cmp.w	ip, #5
 800c1bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c1c0:	d014      	beq.n	800c1ec <ai_dict8_dot_array_f32+0x180>
 800c1c2:	794c      	ldrb	r4, [r1, #5]
 800c1c4:	edd3 6a05 	vldr	s13, [r3, #20]
 800c1c8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c1cc:	edd4 7a00 	vldr	s15, [r4]
 800c1d0:	f1bc 0f06 	cmp.w	ip, #6
 800c1d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c1d8:	d008      	beq.n	800c1ec <ai_dict8_dot_array_f32+0x180>
 800c1da:	7989      	ldrb	r1, [r1, #6]
 800c1dc:	edd3 7a06 	vldr	s15, [r3, #24]
 800c1e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c1e4:	edd2 6a00 	vldr	s13, [r2]
 800c1e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c1ec:	edd0 7a00 	vldr	s15, [r0]
 800c1f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1f4:	ed80 7a00 	vstr	s14, [r0]
 800c1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1fc:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800c204 <ai_dict8_dot_array_f32+0x198>
 800c200:	e7a0      	b.n	800c144 <ai_dict8_dot_array_f32+0xd8>
 800c202:	bf00      	nop
 800c204:	00000000 	.word	0x00000000

0800c208 <ai_dict4_dot_array_f32>:
 800c208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c20e:	f027 0c01 	bic.w	ip, r7, #1
 800c212:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800c216:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800c21a:	f000 80ae 	beq.w	800c37a <ai_dict4_dot_array_f32+0x172>
 800c21e:	1d0d      	adds	r5, r1, #4
 800c220:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800c224:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800c380 <ai_dict4_dot_array_f32+0x178>
 800c228:	eb05 0e09 	add.w	lr, r5, r9
 800c22c:	f103 0420 	add.w	r4, r3, #32
 800c230:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800c234:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800c238:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 800c23c:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 800c240:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800c244:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800c248:	ed14 5a04 	vldr	s10, [r4, #-16]
 800c24c:	ed54 5a03 	vldr	s11, [r4, #-12]
 800c250:	ed14 6a02 	vldr	s12, [r4, #-8]
 800c254:	ed54 6a01 	vldr	s13, [r4, #-4]
 800c258:	f006 0a0f 	and.w	sl, r6, #15
 800c25c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800c260:	edda 7a00 	vldr	s15, [sl]
 800c264:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 800c268:	0936      	lsrs	r6, r6, #4
 800c26a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c26e:	ee67 7a83 	vmul.f32	s15, s15, s6
 800c272:	ed96 3a00 	vldr	s6, [r6]
 800c276:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800c27a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c27e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c282:	f00b 0b0f 	and.w	fp, fp, #15
 800c286:	edd6 3a00 	vldr	s7, [r6]
 800c28a:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800c28e:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c292:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800c296:	3504      	adds	r5, #4
 800c298:	ed9b 4a00 	vldr	s8, [fp]
 800c29c:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800c2a0:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c2a4:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800c2a8:	f00a 0a0f 	and.w	sl, sl, #15
 800c2ac:	eddb 4a00 	vldr	s9, [fp]
 800c2b0:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c2b4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800c2b8:	45ae      	cmp	lr, r5
 800c2ba:	ed9a 5a00 	vldr	s10, [sl]
 800c2be:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800c2c2:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c2c6:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800c2ca:	f006 060f 	and.w	r6, r6, #15
 800c2ce:	edda 5a00 	vldr	s11, [sl]
 800c2d2:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c2d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c2da:	f104 0420 	add.w	r4, r4, #32
 800c2de:	ed96 6a00 	vldr	s12, [r6]
 800c2e2:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c2e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c2ea:	d1a1      	bne.n	800c230 <ai_dict4_dot_array_f32+0x28>
 800c2ec:	4449      	add	r1, r9
 800c2ee:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800c2f2:	459c      	cmp	ip, r3
 800c2f4:	d92d      	bls.n	800c352 <ai_dict4_dot_array_f32+0x14a>
 800c2f6:	f10c 0c07 	add.w	ip, ip, #7
 800c2fa:	f103 0508 	add.w	r5, r3, #8
 800c2fe:	ebac 0c05 	sub.w	ip, ip, r5
 800c302:	f02c 0407 	bic.w	r4, ip, #7
 800c306:	f103 0810 	add.w	r8, r3, #16
 800c30a:	44a0      	add	r8, r4
 800c30c:	f101 3eff 	add.w	lr, r1, #4294967295
 800c310:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800c314:	ed15 6a01 	vldr	s12, [r5, #-4]
 800c318:	ed55 6a02 	vldr	s13, [r5, #-8]
 800c31c:	f004 060f 	and.w	r6, r4, #15
 800c320:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c324:	0924      	lsrs	r4, r4, #4
 800c326:	edd6 7a00 	vldr	s15, [r6]
 800c32a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c32e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c332:	ed94 6a00 	vldr	s12, [r4]
 800c336:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c33a:	3508      	adds	r5, #8
 800c33c:	45a8      	cmp	r8, r5
 800c33e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c342:	d1e5      	bne.n	800c310 <ai_dict4_dot_array_f32+0x108>
 800c344:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800c348:	f10c 0c01 	add.w	ip, ip, #1
 800c34c:	4461      	add	r1, ip
 800c34e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800c352:	07fc      	lsls	r4, r7, #31
 800c354:	d509      	bpl.n	800c36a <ai_dict4_dot_array_f32+0x162>
 800c356:	7809      	ldrb	r1, [r1, #0]
 800c358:	edd3 7a00 	vldr	s15, [r3]
 800c35c:	090b      	lsrs	r3, r1, #4
 800c35e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c362:	edd2 6a00 	vldr	s13, [r2]
 800c366:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c36a:	edd0 7a00 	vldr	s15, [r0]
 800c36e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c372:	ed80 7a00 	vstr	s14, [r0]
 800c376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c37a:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800c380 <ai_dict4_dot_array_f32+0x178>
 800c37e:	e7b8      	b.n	800c2f2 <ai_dict4_dot_array_f32+0xea>
 800c380:	00000000 	.word	0x00000000

0800c384 <ai_dict_decompress_f32>:
 800c384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c388:	9f08      	ldr	r7, [sp, #32]
 800c38a:	2b04      	cmp	r3, #4
 800c38c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800c390:	d00e      	beq.n	800c3b0 <ai_dict_decompress_f32+0x2c>
 800c392:	2b08      	cmp	r3, #8
 800c394:	d10a      	bne.n	800c3ac <ai_dict_decompress_f32+0x28>
 800c396:	42b8      	cmp	r0, r7
 800c398:	d208      	bcs.n	800c3ac <ai_dict_decompress_f32+0x28>
 800c39a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c39e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f840 3b04 	str.w	r3, [r0], #4
 800c3a8:	4287      	cmp	r7, r0
 800c3aa:	d8f6      	bhi.n	800c39a <ai_dict_decompress_f32+0x16>
 800c3ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3b0:	9b07      	ldr	r3, [sp, #28]
 800c3b2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800c3b6:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800c3ba:	f10c 38ff 	add.w	r8, ip, #4294967295
 800c3be:	f003 0e01 	and.w	lr, r3, #1
 800c3c2:	42b8      	cmp	r0, r7
 800c3c4:	d2f2      	bcs.n	800c3ac <ai_dict_decompress_f32+0x28>
 800c3c6:	f1bc 0f00 	cmp.w	ip, #0
 800c3ca:	d01a      	beq.n	800c402 <ai_dict_decompress_f32+0x7e>
 800c3cc:	f100 0508 	add.w	r5, r0, #8
 800c3d0:	1e4c      	subs	r4, r1, #1
 800c3d2:	eb01 0608 	add.w	r6, r1, r8
 800c3d6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c3da:	091b      	lsrs	r3, r3, #4
 800c3dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c3e0:	42a6      	cmp	r6, r4
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f845 3c08 	str.w	r3, [r5, #-8]
 800c3e8:	7823      	ldrb	r3, [r4, #0]
 800c3ea:	f003 030f 	and.w	r3, r3, #15
 800c3ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c3f2:	f105 0508 	add.w	r5, r5, #8
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f845 3c0c 	str.w	r3, [r5, #-12]
 800c3fc:	d1eb      	bne.n	800c3d6 <ai_dict_decompress_f32+0x52>
 800c3fe:	4461      	add	r1, ip
 800c400:	4448      	add	r0, r9
 800c402:	f1be 0f00 	cmp.w	lr, #0
 800c406:	d103      	bne.n	800c410 <ai_dict_decompress_f32+0x8c>
 800c408:	4287      	cmp	r7, r0
 800c40a:	d8dc      	bhi.n	800c3c6 <ai_dict_decompress_f32+0x42>
 800c40c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c410:	780b      	ldrb	r3, [r1, #0]
 800c412:	091b      	lsrs	r3, r3, #4
 800c414:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c418:	3101      	adds	r1, #1
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	6003      	str	r3, [r0, #0]
 800c41e:	3004      	adds	r0, #4
 800c420:	e7cf      	b.n	800c3c2 <ai_dict_decompress_f32+0x3e>
 800c422:	bf00      	nop

0800c424 <forward_conv2d_nl_pool>:
 800c424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c428:	ed2d 8b10 	vpush	{d8-d15}
 800c42c:	b0e1      	sub	sp, #388	; 0x184
 800c42e:	6983      	ldr	r3, [r0, #24]
 800c430:	881e      	ldrh	r6, [r3, #0]
 800c432:	af0a      	add	r7, sp, #40	; 0x28
 800c434:	2e00      	cmp	r6, #0
 800c436:	f000 859b 	beq.w	800cf70 <forward_conv2d_nl_pool+0xb4c>
 800c43a:	6859      	ldr	r1, [r3, #4]
 800c43c:	684a      	ldr	r2, [r1, #4]
 800c43e:	2a00      	cmp	r2, #0
 800c440:	f000 8593 	beq.w	800cf6a <forward_conv2d_nl_pool+0xb46>
 800c444:	f8d2 c000 	ldr.w	ip, [r2]
 800c448:	2e01      	cmp	r6, #1
 800c44a:	f240 858b 	bls.w	800cf64 <forward_conv2d_nl_pool+0xb40>
 800c44e:	690a      	ldr	r2, [r1, #16]
 800c450:	2a00      	cmp	r2, #0
 800c452:	f000 8582 	beq.w	800cf5a <forward_conv2d_nl_pool+0xb36>
 800c456:	f8d2 9000 	ldr.w	r9, [r2]
 800c45a:	2e02      	cmp	r6, #2
 800c45c:	f000 8582 	beq.w	800cf64 <forward_conv2d_nl_pool+0xb40>
 800c460:	69cd      	ldr	r5, [r1, #28]
 800c462:	2d00      	cmp	r5, #0
 800c464:	f000 8571 	beq.w	800cf4a <forward_conv2d_nl_pool+0xb26>
 800c468:	682a      	ldr	r2, [r5, #0]
 800c46a:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800c46e:	f111 0218 	adds.w	r2, r1, #24
 800c472:	d004      	beq.n	800c47e <forward_conv2d_nl_pool+0x5a>
 800c474:	8b0a      	ldrh	r2, [r1, #24]
 800c476:	2a01      	cmp	r2, #1
 800c478:	f240 857c 	bls.w	800cf74 <forward_conv2d_nl_pool+0xb50>
 800c47c:	686a      	ldr	r2, [r5, #4]
 800c47e:	68a9      	ldr	r1, [r5, #8]
 800c480:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c482:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800c486:	f8dc b018 	ldr.w	fp, [ip, #24]
 800c48a:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 800c48e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800c492:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800c496:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800c49a:	f8db 4008 	ldr.w	r4, [fp, #8]
 800c49e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800c4a2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c4a6:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800c4aa:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 800c4ae:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800c4b2:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800c4b6:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4ba:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800c4be:	f8de 4004 	ldr.w	r4, [lr, #4]
 800c4c2:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800c4c6:	f8de 400c 	ldr.w	r4, [lr, #12]
 800c4ca:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800c4ce:	f8de 4008 	ldr.w	r4, [lr, #8]
 800c4d2:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 800c4d6:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800c4da:	6824      	ldr	r4, [r4, #0]
 800c4dc:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 800c4e0:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800c4e4:	6864      	ldr	r4, [r4, #4]
 800c4e6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800c4ea:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800c4ee:	68a5      	ldr	r5, [r4, #8]
 800c4f0:	f8da 4004 	ldr.w	r4, [sl, #4]
 800c4f4:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800c4f8:	f8da 4008 	ldr.w	r4, [sl, #8]
 800c4fc:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800c500:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800c502:	6824      	ldr	r4, [r4, #0]
 800c504:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 800c508:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800c50a:	6864      	ldr	r4, [r4, #4]
 800c50c:	643c      	str	r4, [r7, #64]	; 0x40
 800c50e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800c512:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800c516:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c518:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800c51c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800c51e:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800c522:	69c4      	ldr	r4, [r0, #28]
 800c524:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 800c528:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c52a:	64bc      	str	r4, [r7, #72]	; 0x48
 800c52c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800c52e:	647c      	str	r4, [r7, #68]	; 0x44
 800c530:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800c532:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800c536:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 800c53a:	2a00      	cmp	r2, #0
 800c53c:	f000 84f8 	beq.w	800cf30 <forward_conv2d_nl_pool+0xb0c>
 800c540:	6992      	ldr	r2, [r2, #24]
 800c542:	6892      	ldr	r2, [r2, #8]
 800c544:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800c548:	4680      	mov	r8, r0
 800c54a:	6a00      	ldr	r0, [r0, #32]
 800c54c:	2900      	cmp	r1, #0
 800c54e:	f000 84e4 	beq.w	800cf1a <forward_conv2d_nl_pool+0xaf6>
 800c552:	698a      	ldr	r2, [r1, #24]
 800c554:	2a00      	cmp	r2, #0
 800c556:	f000 8533 	beq.w	800cfc0 <forward_conv2d_nl_pool+0xb9c>
 800c55a:	694b      	ldr	r3, [r1, #20]
 800c55c:	689b      	ldr	r3, [r3, #8]
 800c55e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c562:	e9d2 0100 	ldrd	r0, r1, [r2]
 800c566:	6893      	ldr	r3, [r2, #8]
 800c568:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c56c:	f001 ff24 	bl	800e3b8 <ai_array_get_byte_size>
 800c570:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c574:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800c578:	881e      	ldrh	r6, [r3, #0]
 800c57a:	f8d2 c018 	ldr.w	ip, [r2, #24]
 800c57e:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800c582:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 800c586:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c588:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800c58c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800c590:	fa11 f585 	uxtah	r5, r1, r5
 800c594:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800c598:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c59c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 800c5a0:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800c5a4:	3901      	subs	r1, #1
 800c5a6:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800c5aa:	eb05 0e00 	add.w	lr, r5, r0
 800c5ae:	fa1f f28a 	uxth.w	r2, sl
 800c5b2:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 800c5b6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800c5ba:	f8dc 4000 	ldr.w	r4, [ip]
 800c5be:	f8dc 1000 	ldr.w	r1, [ip]
 800c5c2:	3a01      	subs	r2, #1
 800c5c4:	fb00 5002 	mla	r0, r0, r2, r5
 800c5c8:	fa1f f28b 	uxth.w	r2, fp
 800c5cc:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 800c5d0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800c5d4:	f3c1 5141 	ubfx	r1, r1, #21, #2
 800c5d8:	1e50      	subs	r0, r2, #1
 800c5da:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800c5de:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800c5e2:	fa44 f101 	asr.w	r1, r4, r1
 800c5e6:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800c5ea:	f8dc 4000 	ldr.w	r4, [ip]
 800c5ee:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800c5f2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c5f6:	f3c4 4543 	ubfx	r5, r4, #17, #4
 800c5fa:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800c5fe:	ebae 0202 	sub.w	r2, lr, r2
 800c602:	fa1f fe81 	uxth.w	lr, r1
 800c606:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800c60a:	fbb2 f2f1 	udiv	r2, r2, r1
 800c60e:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800c612:	3c01      	subs	r4, #1
 800c614:	fb04 1100 	mla	r1, r4, r0, r1
 800c618:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800c61c:	1c51      	adds	r1, r2, #1
 800c61e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c622:	487c      	ldr	r0, [pc, #496]	; (800c814 <forward_conv2d_nl_pool+0x3f0>)
 800c624:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800c628:	4611      	mov	r1, r2
 800c62a:	2a00      	cmp	r2, #0
 800c62c:	bf08      	it	eq
 800c62e:	4601      	moveq	r1, r0
 800c630:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 800c634:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800c638:	2d04      	cmp	r5, #4
 800c63a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c63e:	f000 849e 	beq.w	800cf7e <forward_conv2d_nl_pool+0xb5a>
 800c642:	2d08      	cmp	r5, #8
 800c644:	f000 849b 	beq.w	800cf7e <forward_conv2d_nl_pool+0xb5a>
 800c648:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800c64c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800c650:	2e03      	cmp	r6, #3
 800c652:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 800c656:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800c65a:	f240 8483 	bls.w	800cf64 <forward_conv2d_nl_pool+0xb40>
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c662:	2b00      	cmp	r3, #0
 800c664:	f000 8489 	beq.w	800cf7a <forward_conv2d_nl_pool+0xb56>
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800c66e:	68da      	ldr	r2, [r3, #12]
 800c670:	699b      	ldr	r3, [r3, #24]
 800c672:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800c676:	6899      	ldr	r1, [r3, #8]
 800c678:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800c67c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800c680:	6896      	ldr	r6, [r2, #8]
 800c682:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 800c686:	4249      	negs	r1, r1
 800c688:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800c68c:	2800      	cmp	r0, #0
 800c68e:	f000 82dd 	beq.w	800cc4c <forward_conv2d_nl_pool+0x828>
 800c692:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c696:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800c69a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800c69e:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 800c6a2:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 800c818 <forward_conv2d_nl_pool+0x3f4>
 800c6a6:	fb03 f200 	mul.w	r2, r3, r0
 800c6aa:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800c6ae:	008c      	lsls	r4, r1, #2
 800c6b0:	fb04 f000 	mul.w	r0, r4, r0
 800c6b4:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 800c6b8:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800c6bc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 800c6c0:	fb01 fc02 	mul.w	ip, r1, r2
 800c6c4:	00a2      	lsls	r2, r4, #2
 800c6c6:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800c6ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c6ce:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 800c6d2:	00ab      	lsls	r3, r5, #2
 800c6d4:	4694      	mov	ip, r2
 800c6d6:	fb0c f204 	mul.w	r2, ip, r4
 800c6da:	fb04 f303 	mul.w	r3, r4, r3
 800c6de:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800c6e2:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800c6e6:	00a4      	lsls	r4, r4, #2
 800c6e8:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800c6ec:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800c6f0:	f04f 0c00 	mov.w	ip, #0
 800c6f4:	fa0f f58b 	sxth.w	r5, fp
 800c6f8:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 800c6fc:	46a4      	mov	ip, r4
 800c6fe:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 800c702:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 800c706:	fa0f f58a 	sxth.w	r5, sl
 800c70a:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 800c70e:	fb0c fc04 	mul.w	ip, ip, r4
 800c712:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 800c716:	fb06 fc03 	mul.w	ip, r6, r3
 800c71a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c71e:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 800c722:	4240      	negs	r0, r0
 800c724:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 800c728:	469c      	mov	ip, r3
 800c72a:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 800c72e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c732:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 800c736:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 800c73a:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 800c73e:	fb00 f303 	mul.w	r3, r0, r3
 800c742:	460d      	mov	r5, r1
 800c744:	fb0c fc04 	mul.w	ip, ip, r4
 800c748:	627b      	str	r3, [r7, #36]	; 0x24
 800c74a:	fb04 f305 	mul.w	r3, r4, r5
 800c74e:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 800c752:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 800c756:	623b      	str	r3, [r7, #32]
 800c758:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c75c:	46a6      	mov	lr, r4
 800c75e:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 800c762:	fb05 f503 	mul.w	r5, r5, r3
 800c766:	667d      	str	r5, [r7, #100]	; 0x64
 800c768:	4625      	mov	r5, r4
 800c76a:	fb05 f503 	mul.w	r5, r5, r3
 800c76e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c772:	66bd      	str	r5, [r7, #104]	; 0x68
 800c774:	fb00 f101 	mul.w	r1, r0, r1
 800c778:	fb03 f306 	mul.w	r3, r3, r6
 800c77c:	657b      	str	r3, [r7, #84]	; 0x54
 800c77e:	008b      	lsls	r3, r1, #2
 800c780:	633b      	str	r3, [r7, #48]	; 0x30
 800c782:	0093      	lsls	r3, r2, #2
 800c784:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c786:	0083      	lsls	r3, r0, #2
 800c788:	61bb      	str	r3, [r7, #24]
 800c78a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c78e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800c792:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c796:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800c79a:	2400      	movs	r4, #0
 800c79c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c79e:	4603      	mov	r3, r0
 800c7a0:	fb03 f301 	mul.w	r3, r3, r1
 800c7a4:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 800c7a8:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800c7ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c7b0:	00d1      	lsls	r1, r2, #3
 800c7b2:	0113      	lsls	r3, r2, #4
 800c7b4:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800c7b8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800c7bc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800c7c0:	fb00 f004 	mul.w	r0, r0, r4
 800c7c4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800c7c8:	66f8      	str	r0, [r7, #108]	; 0x6c
 800c7ca:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800c7ce:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800c7d2:	469a      	mov	sl, r3
 800c7d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f340 81d0 	ble.w	800cb7e <forward_conv2d_nl_pool+0x75a>
 800c7de:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800c7e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c7e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c7ea:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c7ee:	2900      	cmp	r1, #0
 800c7f0:	441a      	add	r2, r3
 800c7f2:	bfb4      	ite	lt
 800c7f4:	2100      	movlt	r1, #0
 800c7f6:	2300      	movge	r3, #0
 800c7f8:	4282      	cmp	r2, r0
 800c7fa:	bf28      	it	cs
 800c7fc:	4602      	movcs	r2, r0
 800c7fe:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800c802:	2801      	cmp	r0, #1
 800c804:	f000 83f6 	beq.w	800cff4 <forward_conv2d_nl_pool+0xbd0>
 800c808:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800c80c:	4281      	cmp	r1, r0
 800c80e:	f000 822a 	beq.w	800cc66 <forward_conv2d_nl_pool+0x842>
 800c812:	e003      	b.n	800c81c <forward_conv2d_nl_pool+0x3f8>
 800c814:	0800c069 	.word	0x0800c069
 800c818:	00000000 	.word	0x00000000
 800c81c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800c820:	2900      	cmp	r1, #0
 800c822:	f000 819f 	beq.w	800cb64 <forward_conv2d_nl_pool+0x740>
 800c826:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800c82a:	fb93 f1f0 	sdiv	r1, r3, r0
 800c82e:	fb00 3111 	mls	r1, r0, r1, r3
 800c832:	1a41      	subs	r1, r0, r1
 800c834:	1ad2      	subs	r2, r2, r3
 800c836:	fb91 f5f0 	sdiv	r5, r1, r0
 800c83a:	fb00 1515 	mls	r5, r0, r5, r1
 800c83e:	1b52      	subs	r2, r2, r5
 800c840:	4601      	mov	r1, r0
 800c842:	4402      	add	r2, r0
 800c844:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800c848:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 800c84c:	4604      	mov	r4, r0
 800c84e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800c852:	fbb4 f4f0 	udiv	r4, r4, r0
 800c856:	6a38      	ldr	r0, [r7, #32]
 800c858:	3a01      	subs	r2, #1
 800c85a:	fb92 f8f1 	sdiv	r8, r2, r1
 800c85e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800c862:	eba0 0c04 	sub.w	ip, r0, r4
 800c866:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800c86a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800c86e:	4614      	mov	r4, r2
 800c870:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c874:	fbb4 f2f2 	udiv	r2, r4, r2
 800c878:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800c87c:	663a      	str	r2, [r7, #96]	; 0x60
 800c87e:	441d      	add	r5, r3
 800c880:	fb0e f000 	mul.w	r0, lr, r0
 800c884:	440b      	add	r3, r1
 800c886:	eba6 0608 	sub.w	r6, r6, r8
 800c88a:	fb04 f505 	mul.w	r5, r4, r5
 800c88e:	3b01      	subs	r3, #1
 800c890:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800c894:	fb93 f3f4 	sdiv	r3, r3, r4
 800c898:	fb00 f406 	mul.w	r4, r0, r6
 800c89c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800c8a0:	677d      	str	r5, [r7, #116]	; 0x74
 800c8a2:	0091      	lsls	r1, r2, #2
 800c8a4:	fb00 f003 	mul.w	r0, r0, r3
 800c8a8:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800c8ac:	65f8      	str	r0, [r7, #92]	; 0x5c
 800c8ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c8b2:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800c8b6:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800c8ba:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800c8be:	1ac3      	subs	r3, r0, r3
 800c8c0:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800c8c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c8c8:	008b      	lsls	r3, r1, #2
 800c8ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8cc:	00d3      	lsls	r3, r2, #3
 800c8ce:	61fb      	str	r3, [r7, #28]
 800c8d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c8d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c8dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 800c8e6:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800c8ea:	67bb      	str	r3, [r7, #120]	; 0x78
 800c8ec:	46c2      	mov	sl, r8
 800c8ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c8f2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800c8f6:	eb03 0c02 	add.w	ip, r3, r2
 800c8fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	f2c0 811c 	blt.w	800cb3c <forward_conv2d_nl_pool+0x718>
 800c904:	2000      	movs	r0, #0
 800c906:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 800c908:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 800c90c:	4605      	mov	r5, r0
 800c90e:	4606      	mov	r6, r0
 800c910:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c914:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c918:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800c91c:	4413      	add	r3, r2
 800c91e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c922:	440a      	add	r2, r1
 800c924:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800c928:	428b      	cmp	r3, r1
 800c92a:	bf94      	ite	ls
 800c92c:	ebc6 0303 	rsbls	r3, r6, r3
 800c930:	ebc6 0301 	rsbhi	r3, r6, r1
 800c934:	4415      	add	r5, r2
 800c936:	1a1b      	subs	r3, r3, r0
 800c938:	00a4      	lsls	r4, r4, #2
 800c93a:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800c93e:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 800c942:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800c946:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 800c948:	4602      	mov	r2, r0
 800c94a:	2800      	cmp	r0, #0
 800c94c:	bf08      	it	eq
 800c94e:	4662      	moveq	r2, ip
 800c950:	f108 31ff 	add.w	r1, r8, #4294967295
 800c954:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800c958:	fb91 f1f0 	sdiv	r1, r1, r0
 800c95c:	4429      	add	r1, r5
 800c95e:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 800c962:	fb0e 5501 	mla	r5, lr, r1, r5
 800c966:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800c96a:	4403      	add	r3, r0
 800c96c:	fb01 6104 	mla	r1, r1, r4, r6
 800c970:	3b01      	subs	r3, #1
 800c972:	fb93 f6f0 	sdiv	r6, r3, r0
 800c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c978:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800c97c:	fb06 3110 	mls	r1, r6, r0, r3
 800c980:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800c984:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800c988:	4562      	cmp	r2, ip
 800c98a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c98e:	bf08      	it	eq
 800c990:	eeb0 6a48 	vmoveq.f32	s12, s16
 800c994:	1b9b      	subs	r3, r3, r6
 800c996:	2800      	cmp	r0, #0
 800c998:	d070      	beq.n	800ca7c <forward_conv2d_nl_pool+0x658>
 800c99a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800c99e:	fb0e f803 	mul.w	r8, lr, r3
 800c9a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9a4:	fb00 fb01 	mul.w	fp, r0, r1
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d067      	beq.n	800ca7c <forward_conv2d_nl_pool+0x658>
 800c9ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c9b0:	18d3      	adds	r3, r2, r3
 800c9b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c9b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c9ba:	1a9b      	subs	r3, r3, r2
 800c9bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9be:	2300      	movs	r3, #0
 800c9c0:	673b      	str	r3, [r7, #112]	; 0x70
 800c9c2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c8:	4413      	add	r3, r2
 800c9ca:	65bb      	str	r3, [r7, #88]	; 0x58
 800c9cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	4413      	add	r3, r2
 800c9d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800c9d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c9dc:	ecf3 7a01 	vldmia	r3!, {s15}
 800c9e0:	f1ba 0f00 	cmp.w	sl, #0
 800c9e4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800c9e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c9ec:	f340 80a4 	ble.w	800cb38 <forward_conv2d_nl_pool+0x714>
 800c9f0:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800c9f4:	f04f 0c00 	mov.w	ip, #0
 800c9f8:	2e00      	cmp	r6, #0
 800c9fa:	dd19      	ble.n	800ca30 <forward_conv2d_nl_pool+0x60c>
 800c9fc:	2100      	movs	r1, #0
 800c9fe:	eb00 040e 	add.w	r4, r0, lr
 800ca02:	4284      	cmp	r4, r0
 800ca04:	d910      	bls.n	800ca28 <forward_conv2d_nl_pool+0x604>
 800ca06:	4603      	mov	r3, r0
 800ca08:	462a      	mov	r2, r5
 800ca0a:	ecb3 7a01 	vldmia	r3!, {s14}
 800ca0e:	ecf2 6a01 	vldmia	r2!, {s13}
 800ca12:	429c      	cmp	r4, r3
 800ca14:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ca18:	d8f7      	bhi.n	800ca0a <forward_conv2d_nl_pool+0x5e6>
 800ca1a:	43c3      	mvns	r3, r0
 800ca1c:	441c      	add	r4, r3
 800ca1e:	f024 0403 	bic.w	r4, r4, #3
 800ca22:	3404      	adds	r4, #4
 800ca24:	4425      	add	r5, r4
 800ca26:	4420      	add	r0, r4
 800ca28:	3101      	adds	r1, #1
 800ca2a:	428e      	cmp	r6, r1
 800ca2c:	4448      	add	r0, r9
 800ca2e:	d1e6      	bne.n	800c9fe <forward_conv2d_nl_pool+0x5da>
 800ca30:	f10c 0c01 	add.w	ip, ip, #1
 800ca34:	45e2      	cmp	sl, ip
 800ca36:	4458      	add	r0, fp
 800ca38:	4445      	add	r5, r8
 800ca3a:	d1dd      	bne.n	800c9f8 <forward_conv2d_nl_pool+0x5d4>
 800ca3c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800ca40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca44:	441d      	add	r5, r3
 800ca46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ca4a:	ece3 7a01 	vstmia	r3!, {s15}
 800ca4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800ca52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d1be      	bne.n	800c9d8 <forward_conv2d_nl_pool+0x5b4>
 800ca5a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800ca5e:	69f9      	ldr	r1, [r7, #28]
 800ca60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca62:	4472      	add	r2, lr
 800ca64:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800ca68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca6a:	1a52      	subs	r2, r2, r1
 800ca6c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800ca70:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800ca74:	3301      	adds	r3, #1
 800ca76:	429a      	cmp	r2, r3
 800ca78:	673b      	str	r3, [r7, #112]	; 0x70
 800ca7a:	d1a2      	bne.n	800c9c2 <forward_conv2d_nl_pool+0x59e>
 800ca7c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800ca80:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ca84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca86:	4608      	mov	r0, r1
 800ca88:	4410      	add	r0, r2
 800ca8a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800ca8e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800ca92:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800ca96:	4401      	add	r1, r0
 800ca98:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800ca9c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800caa0:	1a8a      	subs	r2, r1, r2
 800caa2:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800caa6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800caaa:	3301      	adds	r3, #1
 800caac:	429a      	cmp	r2, r3
 800caae:	67bb      	str	r3, [r7, #120]	; 0x78
 800cab0:	f47f af1d 	bne.w	800c8ee <forward_conv2d_nl_pool+0x4ca>
 800cab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cab8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cabc:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800cac0:	699b      	ldr	r3, [r3, #24]
 800cac2:	2a00      	cmp	r2, #0
 800cac4:	f000 8210 	beq.w	800cee8 <forward_conv2d_nl_pool+0xac4>
 800cac8:	2400      	movs	r4, #0
 800caca:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 800cace:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 800cad2:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 800cad6:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 800cada:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800cade:	609e      	str	r6, [r3, #8]
 800cae0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800cae4:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 800cae8:	462b      	mov	r3, r5
 800caea:	4641      	mov	r1, r8
 800caec:	4640      	mov	r0, r8
 800caee:	47a0      	blx	r4
 800caf0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800caf4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800caf8:	6859      	ldr	r1, [r3, #4]
 800cafa:	68da      	ldr	r2, [r3, #12]
 800cafc:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800cb00:	4405      	add	r5, r0
 800cb02:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800cb06:	0089      	lsls	r1, r1, #2
 800cb08:	4406      	add	r6, r0
 800cb0a:	eba5 0c09 	sub.w	ip, r5, r9
 800cb0e:	1850      	adds	r0, r2, r1
 800cb10:	45a4      	cmp	ip, r4
 800cb12:	bfa8      	it	ge
 800cb14:	464d      	movge	r5, r9
 800cb16:	4286      	cmp	r6, r0
 800cb18:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800cb1c:	bf28      	it	cs
 800cb1e:	1a76      	subcs	r6, r6, r1
 800cb20:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800cb24:	3001      	adds	r0, #1
 800cb26:	4281      	cmp	r1, r0
 800cb28:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 800cb2c:	d1d7      	bne.n	800cade <forward_conv2d_nl_pool+0x6ba>
 800cb2e:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 800cb32:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 800cb36:	e019      	b.n	800cb6c <forward_conv2d_nl_pool+0x748>
 800cb38:	461a      	mov	r2, r3
 800cb3a:	e781      	b.n	800ca40 <forward_conv2d_nl_pool+0x61c>
 800cb3c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800cb40:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800cb44:	fb90 f3f2 	sdiv	r3, r0, r2
 800cb48:	fb02 0313 	mls	r3, r2, r3, r0
 800cb4c:	1ad3      	subs	r3, r2, r3
 800cb4e:	4605      	mov	r5, r0
 800cb50:	fb93 f0f2 	sdiv	r0, r3, r2
 800cb54:	fb02 3010 	mls	r0, r2, r0, r3
 800cb58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb5a:	462e      	mov	r6, r5
 800cb5c:	18c4      	adds	r4, r0, r3
 800cb5e:	eb02 0805 	add.w	r8, r2, r5
 800cb62:	e6d5      	b.n	800c910 <forward_conv2d_nl_pool+0x4ec>
 800cb64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cb68:	699b      	ldr	r3, [r3, #24]
 800cb6a:	68da      	ldr	r2, [r3, #12]
 800cb6c:	609a      	str	r2, [r3, #8]
 800cb6e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cb72:	3301      	adds	r3, #1
 800cb74:	b21b      	sxth	r3, r3
 800cb76:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800cb7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cb84:	f100 83bf 	bmi.w	800d306 <forward_conv2d_nl_pool+0xee2>
 800cb88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb8c:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800cb90:	42a3      	cmp	r3, r4
 800cb92:	f200 839d 	bhi.w	800d2d0 <forward_conv2d_nl_pool+0xeac>
 800cb96:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	6990      	ldr	r0, [r2, #24]
 800cb9e:	9301      	str	r3, [sp, #4]
 800cba0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cba4:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 800cba8:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 800cbac:	1a9b      	subs	r3, r3, r2
 800cbae:	fa1f f188 	uxth.w	r1, r8
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cbb8:	9308      	str	r3, [sp, #32]
 800cbba:	9105      	str	r1, [sp, #20]
 800cbbc:	2601      	movs	r6, #1
 800cbbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cbc2:	9607      	str	r6, [sp, #28]
 800cbc4:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 800cbc8:	9506      	str	r5, [sp, #24]
 800cbca:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 800cbce:	9304      	str	r3, [sp, #16]
 800cbd0:	1a64      	subs	r4, r4, r1
 800cbd2:	b2b1      	uxth	r1, r6
 800cbd4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cbd8:	9300      	str	r3, [sp, #0]
 800cbda:	e9cd 5102 	strd	r5, r1, [sp, #8]
 800cbde:	b224      	sxth	r4, r4
 800cbe0:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800cbe4:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800cbe8:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800cbec:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800cbee:	47a0      	blx	r4
 800cbf0:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800cbf4:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 800cbf8:	688a      	ldr	r2, [r1, #8]
 800cbfa:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800cbfc:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800cc00:	fa0f f388 	sxth.w	r3, r8
 800cc04:	1af3      	subs	r3, r6, r3
 800cc06:	4422      	add	r2, r4
 800cc08:	462e      	mov	r6, r5
 800cc0a:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800cc0e:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800cc12:	608a      	str	r2, [r1, #8]
 800cc14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cc18:	4426      	add	r6, r4
 800cc1a:	b21b      	sxth	r3, r3
 800cc1c:	1b2c      	subs	r4, r5, r4
 800cc1e:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800cc22:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 800cc24:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800cc28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cc2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cc30:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 800cc34:	3001      	adds	r0, #1
 800cc36:	442c      	add	r4, r5
 800cc38:	4283      	cmp	r3, r0
 800cc3a:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 800cc3e:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 800cc42:	f63f adc7 	bhi.w	800c7d4 <forward_conv2d_nl_pool+0x3b0>
 800cc46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cc4a:	699b      	ldr	r3, [r3, #24]
 800cc4c:	68da      	ldr	r2, [r3, #12]
 800cc4e:	609a      	str	r2, [r3, #8]
 800cc50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cc54:	68d3      	ldr	r3, [r2, #12]
 800cc56:	6093      	str	r3, [r2, #8]
 800cc58:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	ecbd 8b10 	vpop	{d8-d15}
 800cc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc66:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cc68:	2901      	cmp	r1, #1
 800cc6a:	f47f add7 	bne.w	800c81c <forward_conv2d_nl_pool+0x3f8>
 800cc6e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800cc72:	2900      	cmp	r1, #0
 800cc74:	f43f af76 	beq.w	800cb64 <forward_conv2d_nl_pool+0x740>
 800cc78:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800cc7c:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 800cc80:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800cc84:	1ad2      	subs	r2, r2, r3
 800cc86:	1a8c      	subs	r4, r1, r2
 800cc88:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800cc8c:	00b2      	lsls	r2, r6, #2
 800cc8e:	fb02 f204 	mul.w	r2, r2, r4
 800cc92:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800cc96:	fbb1 f1f0 	udiv	r1, r1, r0
 800cc9a:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 800cc9e:	460d      	mov	r5, r1
 800cca0:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cca2:	62ba      	str	r2, [r7, #40]	; 0x28
 800cca4:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 800cca8:	0082      	lsls	r2, r0, #2
 800ccaa:	65ba      	str	r2, [r7, #88]	; 0x58
 800ccac:	00ca      	lsls	r2, r1, #3
 800ccae:	607a      	str	r2, [r7, #4]
 800ccb0:	00aa      	lsls	r2, r5, #2
 800ccb2:	60ba      	str	r2, [r7, #8]
 800ccb4:	fb03 f206 	mul.w	r2, r3, r6
 800ccb8:	67ba      	str	r2, [r7, #120]	; 0x78
 800ccba:	69ba      	ldr	r2, [r7, #24]
 800ccbc:	fb02 f303 	mul.w	r3, r2, r3
 800ccc0:	617b      	str	r3, [r7, #20]
 800ccc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ccc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ccca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800ccce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800ccd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ccd6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ccda:	2300      	movs	r3, #0
 800ccdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f2c0 8112 	blt.w	800cf0e <forward_conv2d_nl_pool+0xaea>
 800ccea:	2100      	movs	r1, #0
 800ccec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ccee:	460a      	mov	r2, r1
 800ccf0:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800ccf4:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800ccf8:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800ccfc:	4420      	add	r0, r4
 800ccfe:	4408      	add	r0, r1
 800cd00:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800cd04:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800cd08:	190c      	adds	r4, r1, r4
 800cd0a:	42ac      	cmp	r4, r5
 800cd0c:	bf28      	it	cs
 800cd0e:	462c      	movcs	r4, r5
 800cd10:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 800cd14:	0080      	lsls	r0, r0, #2
 800cd16:	1aa4      	subs	r4, r4, r2
 800cd18:	2d00      	cmp	r5, #0
 800cd1a:	f000 80e9 	beq.w	800cef0 <forward_conv2d_nl_pool+0xacc>
 800cd1e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cd22:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 800cd26:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800cd2a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800cd2e:	42b5      	cmp	r5, r6
 800cd30:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800cd34:	eba3 0204 	sub.w	r2, r3, r4
 800cd38:	eba1 0104 	sub.w	r1, r1, r4
 800cd3c:	bf08      	it	eq
 800cd3e:	eef0 3a48 	vmoveq.f32	s7, s16
 800cd42:	462b      	mov	r3, r5
 800cd44:	697d      	ldr	r5, [r7, #20]
 800cd46:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 800cd4a:	4428      	add	r0, r5
 800cd4c:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 800cd50:	fb05 6e00 	mla	lr, r5, r0, r6
 800cd54:	eb0e 000b 	add.w	r0, lr, fp
 800cd58:	4586      	cmp	lr, r0
 800cd5a:	61f8      	str	r0, [r7, #28]
 800cd5c:	f080 80a5 	bcs.w	800ceaa <forward_conv2d_nl_pool+0xa86>
 800cd60:	0092      	lsls	r2, r2, #2
 800cd62:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800cd66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd68:	fb01 f10b 	mul.w	r1, r1, fp
 800cd6c:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800cd70:	f024 0803 	bic.w	r8, r4, #3
 800cd74:	2a00      	cmp	r2, #0
 800cd76:	f000 8098 	beq.w	800ceaa <forward_conv2d_nl_pool+0xa86>
 800cd7a:	f108 32ff 	add.w	r2, r8, #4294967295
 800cd7e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cd80:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800cd84:	0892      	lsrs	r2, r2, #2
 800cd86:	3201      	adds	r2, #1
 800cd88:	4401      	add	r1, r0
 800cd8a:	fb02 f00a 	mul.w	r0, r2, sl
 800cd8e:	6638      	str	r0, [r7, #96]	; 0x60
 800cd90:	0110      	lsls	r0, r2, #4
 800cd92:	0092      	lsls	r2, r2, #2
 800cd94:	65fa      	str	r2, [r7, #92]	; 0x5c
 800cd96:	1aca      	subs	r2, r1, r3
 800cd98:	613a      	str	r2, [r7, #16]
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	6738      	str	r0, [r7, #112]	; 0x70
 800cd9e:	4413      	add	r3, r2
 800cda0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cda4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cda8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdaa:	4413      	add	r3, r2
 800cdac:	60fb      	str	r3, [r7, #12]
 800cdae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	677b      	str	r3, [r7, #116]	; 0x74
 800cdb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800cdbc:	ecf3 6a01 	vldmia	r3!, {s13}
 800cdc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cdc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800cdce:	dd57      	ble.n	800ce80 <forward_conv2d_nl_pool+0xa5c>
 800cdd0:	4676      	mov	r6, lr
 800cdd2:	f04f 0c00 	mov.w	ip, #0
 800cdd6:	f1b8 0f00 	cmp.w	r8, #0
 800cdda:	f340 8087 	ble.w	800ceec <forward_conv2d_nl_pool+0xac8>
 800cdde:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800cde2:	f109 0310 	add.w	r3, r9, #16
 800cde6:	18b1      	adds	r1, r6, r2
 800cde8:	2000      	movs	r0, #0
 800cdea:	4632      	mov	r2, r6
 800cdec:	eb02 050b 	add.w	r5, r2, fp
 800cdf0:	ed95 7a00 	vldr	s14, [r5]
 800cdf4:	ed53 7a03 	vldr	s15, [r3, #-12]
 800cdf8:	ed92 4a00 	vldr	s8, [r2]
 800cdfc:	ed53 4a04 	vldr	s9, [r3, #-16]
 800ce00:	ed91 5a00 	vldr	s10, [r1]
 800ce04:	ed53 5a02 	vldr	s11, [r3, #-8]
 800ce08:	ed13 6a01 	vldr	s12, [r3, #-4]
 800ce0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce10:	eb01 050b 	add.w	r5, r1, fp
 800ce14:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ce18:	3004      	adds	r0, #4
 800ce1a:	4540      	cmp	r0, r8
 800ce1c:	ed95 7a00 	vldr	s14, [r5]
 800ce20:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ce24:	4452      	add	r2, sl
 800ce26:	4451      	add	r1, sl
 800ce28:	f103 0310 	add.w	r3, r3, #16
 800ce2c:	eee7 7a06 	vfma.f32	s15, s14, s12
 800ce30:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ce34:	dbda      	blt.n	800cdec <forward_conv2d_nl_pool+0x9c8>
 800ce36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce38:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ce3a:	441e      	add	r6, r3
 800ce3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce3e:	4499      	add	r9, r3
 800ce40:	42a0      	cmp	r0, r4
 800ce42:	da11      	bge.n	800ce68 <forward_conv2d_nl_pool+0xa44>
 800ce44:	4602      	mov	r2, r0
 800ce46:	4633      	mov	r3, r6
 800ce48:	4649      	mov	r1, r9
 800ce4a:	edd3 7a00 	vldr	s15, [r3]
 800ce4e:	ecb1 7a01 	vldmia	r1!, {s14}
 800ce52:	3201      	adds	r2, #1
 800ce54:	42a2      	cmp	r2, r4
 800ce56:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ce5a:	445b      	add	r3, fp
 800ce5c:	d1f5      	bne.n	800ce4a <forward_conv2d_nl_pool+0xa26>
 800ce5e:	1a20      	subs	r0, r4, r0
 800ce60:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800ce64:	fb00 660b 	mla	r6, r0, fp, r6
 800ce68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce6c:	441e      	add	r6, r3
 800ce6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ce72:	4499      	add	r9, r3
 800ce74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ce78:	f10c 0c01 	add.w	ip, ip, #1
 800ce7c:	4563      	cmp	r3, ip
 800ce7e:	d1aa      	bne.n	800cdd6 <forward_conv2d_nl_pool+0x9b2>
 800ce80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce82:	4499      	add	r9, r3
 800ce84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce86:	ece3 6a01 	vstmia	r3!, {s13}
 800ce8a:	677b      	str	r3, [r7, #116]	; 0x74
 800ce8c:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d191      	bne.n	800cdb8 <forward_conv2d_nl_pool+0x994>
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	1a9b      	subs	r3, r3, r2
 800ce9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	f10e 0e04 	add.w	lr, lr, #4
 800cea4:	459e      	cmp	lr, r3
 800cea6:	f4ff af7d 	bcc.w	800cda4 <forward_conv2d_nl_pool+0x980>
 800ceaa:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800ceae:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800ceb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ceb6:	440a      	add	r2, r1
 800ceb8:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800cebc:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800cec0:	4608      	mov	r0, r1
 800cec2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800cec6:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800ceca:	4410      	add	r0, r2
 800cecc:	1a8a      	subs	r2, r1, r2
 800cece:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800ced2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800ced6:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800ceda:	3301      	adds	r3, #1
 800cedc:	429a      	cmp	r2, r3
 800cede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cee2:	f47f aefd 	bne.w	800cce0 <forward_conv2d_nl_pool+0x8bc>
 800cee6:	e5e7      	b.n	800cab8 <forward_conv2d_nl_pool+0x694>
 800cee8:	68da      	ldr	r2, [r3, #12]
 800ceea:	e63f      	b.n	800cb6c <forward_conv2d_nl_pool+0x748>
 800ceec:	2000      	movs	r0, #0
 800ceee:	e7a7      	b.n	800ce40 <forward_conv2d_nl_pool+0xa1c>
 800cef0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800cef4:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800cef8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cefc:	1b19      	subs	r1, r3, r4
 800cefe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800cf02:	eef0 3a48 	vmov.f32	s7, s16
 800cf06:	1b1a      	subs	r2, r3, r4
 800cf08:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800cf0c:	e71a      	b.n	800cd44 <forward_conv2d_nl_pool+0x920>
 800cf0e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800cf12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf14:	460a      	mov	r2, r1
 800cf16:	440b      	add	r3, r1
 800cf18:	e6ea      	b.n	800ccf0 <forward_conv2d_nl_pool+0x8cc>
 800cf1a:	b168      	cbz	r0, 800cf38 <forward_conv2d_nl_pool+0xb14>
 800cf1c:	6882      	ldr	r2, [r0, #8]
 800cf1e:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800cf22:	2201      	movs	r2, #1
 800cf24:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800cf28:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800cf2c:	f7ff bb29 	b.w	800c582 <forward_conv2d_nl_pool+0x15e>
 800cf30:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800cf34:	f7ff bb08 	b.w	800c548 <forward_conv2d_nl_pool+0x124>
 800cf38:	2201      	movs	r2, #1
 800cf3a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800cf3e:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800cf42:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800cf46:	f7ff bb1c 	b.w	800c582 <forward_conv2d_nl_pool+0x15e>
 800cf4a:	3118      	adds	r1, #24
 800cf4c:	d008      	beq.n	800cf60 <forward_conv2d_nl_pool+0xb3c>
 800cf4e:	462a      	mov	r2, r5
 800cf50:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 800cf54:	4629      	mov	r1, r5
 800cf56:	f7ff ba93 	b.w	800c480 <forward_conv2d_nl_pool+0x5c>
 800cf5a:	4691      	mov	r9, r2
 800cf5c:	f7ff ba7d 	b.w	800c45a <forward_conv2d_nl_pool+0x36>
 800cf60:	68cb      	ldr	r3, [r1, #12]
 800cf62:	deff      	udf	#255	; 0xff
 800cf64:	2300      	movs	r3, #0
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	deff      	udf	#255	; 0xff
 800cf6a:	4694      	mov	ip, r2
 800cf6c:	f7ff ba6c 	b.w	800c448 <forward_conv2d_nl_pool+0x24>
 800cf70:	6873      	ldr	r3, [r6, #4]
 800cf72:	deff      	udf	#255	; 0xff
 800cf74:	2200      	movs	r2, #0
 800cf76:	f7ff ba82 	b.w	800c47e <forward_conv2d_nl_pool+0x5a>
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	deff      	udf	#255	; 0xff
 800cf7e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800cf82:	2a00      	cmp	r2, #0
 800cf84:	f43f ab60 	beq.w	800c648 <forward_conv2d_nl_pool+0x224>
 800cf88:	2e03      	cmp	r6, #3
 800cf8a:	d9eb      	bls.n	800cf64 <forward_conv2d_nl_pool+0xb40>
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf90:	b323      	cbz	r3, 800cfdc <forward_conv2d_nl_pool+0xbb8>
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	b313      	cbz	r3, 800cfdc <forward_conv2d_nl_pool+0xbb8>
 800cf96:	699b      	ldr	r3, [r3, #24]
 800cf98:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800cf9c:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800cfa0:	9301      	str	r3, [sp, #4]
 800cfa2:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800cfa6:	9000      	str	r0, [sp, #0]
 800cfa8:	4673      	mov	r3, lr
 800cfaa:	4620      	mov	r0, r4
 800cfac:	f7ff f9ea 	bl	800c384 <ai_dict_decompress_f32>
 800cfb0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800cfb4:	b17c      	cbz	r4, 800cfd6 <forward_conv2d_nl_pool+0xbb2>
 800cfb6:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800cfba:	881e      	ldrh	r6, [r3, #0]
 800cfbc:	f7ff bb44 	b.w	800c648 <forward_conv2d_nl_pool+0x224>
 800cfc0:	b178      	cbz	r0, 800cfe2 <forward_conv2d_nl_pool+0xbbe>
 800cfc2:	6881      	ldr	r1, [r0, #8]
 800cfc4:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800cfce:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800cfd2:	f7ff bad6 	b.w	800c582 <forward_conv2d_nl_pool+0x15e>
 800cfd6:	881e      	ldrh	r6, [r3, #0]
 800cfd8:	f7ff bb36 	b.w	800c648 <forward_conv2d_nl_pool+0x224>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	699b      	ldr	r3, [r3, #24]
 800cfe0:	deff      	udf	#255	; 0xff
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 800cfe8:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800cfec:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800cff0:	f7ff bac7 	b.w	800c582 <forward_conv2d_nl_pool+0x15e>
 800cff4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cff6:	2801      	cmp	r0, #1
 800cff8:	f47f ac10 	bne.w	800c81c <forward_conv2d_nl_pool+0x3f8>
 800cffc:	1ad2      	subs	r2, r2, r3
 800cffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d000:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800d004:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800d008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d00a:	fb00 4101 	mla	r1, r0, r1, r4
 800d00e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800d012:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800d016:	f080 81c4 	bcs.w	800d3a2 <forward_conv2d_nl_pool+0xf7e>
 800d01a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800d01e:	2a00      	cmp	r2, #0
 800d020:	f43f ad4a 	beq.w	800cab8 <forward_conv2d_nl_pool+0x694>
 800d024:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d028:	fb02 f303 	mul.w	r3, r2, r3
 800d02c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d02e:	677b      	str	r3, [r7, #116]	; 0x74
 800d030:	1a9b      	subs	r3, r3, r2
 800d032:	663b      	str	r3, [r7, #96]	; 0x60
 800d034:	188b      	adds	r3, r1, r2
 800d036:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d038:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d03c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800d040:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d044:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d048:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 800d04c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d050:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d054:	2300      	movs	r3, #0
 800d056:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d05a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d05e:	2b00      	cmp	r3, #0
 800d060:	f000 8133 	beq.w	800d2ca <forward_conv2d_nl_pool+0xea6>
 800d064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d068:	ed93 6a00 	vldr	s12, [r3]
 800d06c:	3304      	adds	r3, #4
 800d06e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d072:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800d076:	2b00      	cmp	r3, #0
 800d078:	f000 8101 	beq.w	800d27e <forward_conv2d_nl_pool+0xe5a>
 800d07c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d080:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d084:	eb03 0802 	add.w	r8, r3, r2
 800d088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d08a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d08e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d098:	67bb      	str	r3, [r7, #120]	; 0x78
 800d09a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d09e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d0a2:	f04f 0b00 	mov.w	fp, #0
 800d0a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f2c0 8104 	blt.w	800d2b8 <forward_conv2d_nl_pool+0xe94>
 800d0b0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800d0b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800d0bc:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800d0c0:	eb02 0c04 	add.w	ip, r2, r4
 800d0c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d0c8:	4540      	cmp	r0, r8
 800d0ca:	bf94      	ite	ls
 800d0cc:	ebc3 0300 	rsbls	r3, r3, r0
 800d0d0:	ebc3 0308 	rsbhi	r3, r3, r8
 800d0d4:	eba2 0903 	sub.w	r9, r2, r3
 800d0d8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800d0dc:	1ac4      	subs	r4, r0, r3
 800d0de:	fb03 f302 	mul.w	r3, r3, r2
 800d0e2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800d0e6:	2a00      	cmp	r2, #0
 800d0e8:	f340 80e3 	ble.w	800d2b2 <forward_conv2d_nl_pool+0xe8e>
 800d0ec:	f023 050f 	bic.w	r5, r3, #15
 800d0f0:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 800d0f4:	1e68      	subs	r0, r5, #1
 800d0f6:	0900      	lsrs	r0, r0, #4
 800d0f8:	3001      	adds	r0, #1
 800d0fa:	fb06 f204 	mul.w	r2, r6, r4
 800d0fe:	673a      	str	r2, [r7, #112]	; 0x70
 800d100:	0102      	lsls	r2, r0, #4
 800d102:	65ba      	str	r2, [r7, #88]	; 0x58
 800d104:	fb06 f909 	mul.w	r9, r6, r9
 800d108:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800d10c:	eef0 6a46 	vmov.f32	s13, s12
 800d110:	f04f 0e00 	mov.w	lr, #0
 800d114:	4662      	mov	r2, ip
 800d116:	2d00      	cmp	r5, #0
 800d118:	f340 80c9 	ble.w	800d2ae <forward_conv2d_nl_pool+0xe8a>
 800d11c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800d120:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800d124:	2600      	movs	r6, #0
 800d126:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800d12a:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800d12e:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 800d132:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800d136:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800d13a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800d13e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800d142:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800d146:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800d14a:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800d14e:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800d152:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 800d156:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800d15a:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 800d15e:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 800d162:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800d166:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800d16a:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 800d16e:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 800d172:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800d176:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800d17a:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800d17e:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800d182:	ed50 3a04 	vldr	s7, [r0, #-16]
 800d186:	ed14 4a04 	vldr	s8, [r4, #-16]
 800d18a:	ed50 4a03 	vldr	s9, [r0, #-12]
 800d18e:	ed14 5a03 	vldr	s10, [r4, #-12]
 800d192:	ed50 5a02 	vldr	s11, [r0, #-8]
 800d196:	ed14 7a02 	vldr	s14, [r4, #-8]
 800d19a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800d19e:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800d1a2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800d1a6:	3610      	adds	r6, #16
 800d1a8:	42ae      	cmp	r6, r5
 800d1aa:	ed14 fa01 	vldr	s30, [r4, #-4]
 800d1ae:	ed50 ea01 	vldr	s29, [r0, #-4]
 800d1b2:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800d1b6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800d1ba:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800d1be:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800d1c2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800d1c6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800d1ca:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800d1ce:	eee9 7a89 	vfma.f32	s15, s19, s18
 800d1d2:	eee8 7a80 	vfma.f32	s15, s17, s0
 800d1d6:	eee0 7a81 	vfma.f32	s15, s1, s2
 800d1da:	eee1 7a82 	vfma.f32	s15, s3, s4
 800d1de:	eee2 7a83 	vfma.f32	s15, s5, s6
 800d1e2:	eee3 7a84 	vfma.f32	s15, s7, s8
 800d1e6:	eee4 7a85 	vfma.f32	s15, s9, s10
 800d1ea:	eee5 7a87 	vfma.f32	s15, s11, s14
 800d1ee:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800d1f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d1f6:	db96      	blt.n	800d126 <forward_conv2d_nl_pool+0xd02>
 800d1f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d1fa:	4451      	add	r1, sl
 800d1fc:	4452      	add	r2, sl
 800d1fe:	4283      	cmp	r3, r0
 800d200:	dd0f      	ble.n	800d222 <forward_conv2d_nl_pool+0xdfe>
 800d202:	4604      	mov	r4, r0
 800d204:	468c      	mov	ip, r1
 800d206:	4616      	mov	r6, r2
 800d208:	ecb6 7a01 	vldmia	r6!, {s14}
 800d20c:	ecfc 7a01 	vldmia	ip!, {s15}
 800d210:	3401      	adds	r4, #1
 800d212:	42a3      	cmp	r3, r4
 800d214:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d218:	d1f6      	bne.n	800d208 <forward_conv2d_nl_pool+0xde4>
 800d21a:	1a18      	subs	r0, r3, r0
 800d21c:	0080      	lsls	r0, r0, #2
 800d21e:	4402      	add	r2, r0
 800d220:	4401      	add	r1, r0
 800d222:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800d224:	4402      	add	r2, r0
 800d226:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800d22a:	f10e 0e01 	add.w	lr, lr, #1
 800d22e:	4570      	cmp	r0, lr
 800d230:	4449      	add	r1, r9
 800d232:	f47f af70 	bne.w	800d116 <forward_conv2d_nl_pool+0xcf2>
 800d236:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800d23a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d23c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800d240:	edc3 6a00 	vstr	s13, [r3]
 800d244:	4608      	mov	r0, r1
 800d246:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800d24a:	440b      	add	r3, r1
 800d24c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800d250:	67bb      	str	r3, [r7, #120]	; 0x78
 800d252:	4410      	add	r0, r2
 800d254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d256:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800d25a:	4608      	mov	r0, r1
 800d25c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800d260:	4418      	add	r0, r3
 800d262:	1acb      	subs	r3, r1, r3
 800d264:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d268:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800d26c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800d270:	f10b 0b01 	add.w	fp, fp, #1
 800d274:	455b      	cmp	r3, fp
 800d276:	eba8 0802 	sub.w	r8, r8, r2
 800d27a:	f47f af14 	bne.w	800d0a6 <forward_conv2d_nl_pool+0xc82>
 800d27e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800d282:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d284:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d288:	440a      	add	r2, r1
 800d28a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800d28e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d292:	3204      	adds	r2, #4
 800d294:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800d298:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800d29c:	3301      	adds	r3, #1
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d2a4:	f47f aed9 	bne.w	800d05a <forward_conv2d_nl_pool+0xc36>
 800d2a8:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800d2ac:	e404      	b.n	800cab8 <forward_conv2d_nl_pool+0x694>
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	e7a5      	b.n	800d1fe <forward_conv2d_nl_pool+0xdda>
 800d2b2:	eef0 6a46 	vmov.f32	s13, s12
 800d2b6:	e7be      	b.n	800d236 <forward_conv2d_nl_pool+0xe12>
 800d2b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2bc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800d2c0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800d2c4:	eba8 0303 	sub.w	r3, r8, r3
 800d2c8:	e6f6      	b.n	800d0b8 <forward_conv2d_nl_pool+0xc94>
 800d2ca:	eeb0 6a48 	vmov.f32	s12, s16
 800d2ce:	e6d0      	b.n	800d072 <forward_conv2d_nl_pool+0xc4e>
 800d2d0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800d2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2d8:	4611      	mov	r1, r2
 800d2da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800d2de:	4419      	add	r1, r3
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800d2e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2ec:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800d2f0:	4413      	add	r3, r2
 800d2f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800d2f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d2fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d2fe:	4293      	cmp	r3, r2
 800d300:	f63f aa68 	bhi.w	800c7d4 <forward_conv2d_nl_pool+0x3b0>
 800d304:	e49f      	b.n	800cc46 <forward_conv2d_nl_pool+0x822>
 800d306:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d30a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800d30e:	699a      	ldr	r2, [r3, #24]
 800d310:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800d314:	68d1      	ldr	r1, [r2, #12]
 800d316:	6853      	ldr	r3, [r2, #4]
 800d318:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d31a:	fb00 4012 	mls	r0, r0, r2, r4
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	4281      	cmp	r1, r0
 800d322:	bf88      	it	hi
 800d324:	18c0      	addhi	r0, r0, r3
 800d326:	4281      	cmp	r1, r0
 800d328:	eb01 0203 	add.w	r2, r1, r3
 800d32c:	d216      	bcs.n	800d35c <forward_conv2d_nl_pool+0xf38>
 800d32e:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 800d332:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800d336:	42a1      	cmp	r1, r4
 800d338:	d010      	beq.n	800d35c <forward_conv2d_nl_pool+0xf38>
 800d33a:	4290      	cmp	r0, r2
 800d33c:	d20e      	bcs.n	800d35c <forward_conv2d_nl_pool+0xf38>
 800d33e:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800d342:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800d346:	f850 3b04 	ldr.w	r3, [r0], #4
 800d34a:	f841 3b04 	str.w	r3, [r1], #4
 800d34e:	69a2      	ldr	r2, [r4, #24]
 800d350:	6853      	ldr	r3, [r2, #4]
 800d352:	68d2      	ldr	r2, [r2, #12]
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	441a      	add	r2, r3
 800d358:	4282      	cmp	r2, r0
 800d35a:	d8f4      	bhi.n	800d346 <forward_conv2d_nl_pool+0xf22>
 800d35c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800d360:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 800d364:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 800d368:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800d36a:	4420      	add	r0, r4
 800d36c:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800d370:	1a40      	subs	r0, r0, r1
 800d372:	4421      	add	r1, r4
 800d374:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800d378:	442c      	add	r4, r5
 800d37a:	b209      	sxth	r1, r1
 800d37c:	b200      	sxth	r0, r0
 800d37e:	4294      	cmp	r4, r2
 800d380:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800d384:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800d388:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800d38c:	4621      	mov	r1, r4
 800d38e:	f4ff abfb 	bcc.w	800cb88 <forward_conv2d_nl_pool+0x764>
 800d392:	425b      	negs	r3, r3
 800d394:	4419      	add	r1, r3
 800d396:	4291      	cmp	r1, r2
 800d398:	d2fc      	bcs.n	800d394 <forward_conv2d_nl_pool+0xf70>
 800d39a:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800d39e:	f7ff bbf3 	b.w	800cb88 <forward_conv2d_nl_pool+0x764>
 800d3a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d3a6:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 800d3aa:	320a      	adds	r2, #10
 800d3ac:	f022 0207 	bic.w	r2, r2, #7
 800d3b0:	ebad 0d02 	sub.w	sp, sp, r2
 800d3b4:	aa0a      	add	r2, sp, #40	; 0x28
 800d3b6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800d3ba:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800d3be:	2a00      	cmp	r2, #0
 800d3c0:	f000 8153 	beq.w	800d66a <forward_conv2d_nl_pool+0x1246>
 800d3c4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d3c8:	f8c7 b01c 	str.w	fp, [r7, #28]
 800d3cc:	fb02 f303 	mul.w	r3, r2, r3
 800d3d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d3d2:	663b      	str	r3, [r7, #96]	; 0x60
 800d3d4:	1a9b      	subs	r3, r3, r2
 800d3d6:	65bb      	str	r3, [r7, #88]	; 0x58
 800d3d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d3dc:	f8c7 a014 	str.w	sl, [r7, #20]
 800d3e0:	4413      	add	r3, r2
 800d3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d3e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d3ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d3f0:	67bb      	str	r3, [r7, #120]	; 0x78
 800d3f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d3f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d400:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d404:	b13b      	cbz	r3, 800d416 <forward_conv2d_nl_pool+0xff2>
 800d406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d40a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800d40e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800d412:	f001 f91f 	bl	800e654 <memcpy>
 800d416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f000 8137 	beq.w	800d68e <forward_conv2d_nl_pool+0x126a>
 800d420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d422:	ed93 6a00 	vldr	s12, [r3]
 800d426:	3304      	adds	r3, #4
 800d428:	67bb      	str	r3, [r7, #120]	; 0x78
 800d42a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f000 8101 	beq.w	800d636 <forward_conv2d_nl_pool+0x1212>
 800d434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d438:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d43c:	eb03 0802 	add.w	r8, r3, r2
 800d440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d442:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d450:	677b      	str	r3, [r7, #116]	; 0x74
 800d452:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d456:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d45a:	f04f 0b00 	mov.w	fp, #0
 800d45e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d462:	2b00      	cmp	r3, #0
 800d464:	f2c0 810a 	blt.w	800d67c <forward_conv2d_nl_pool+0x1258>
 800d468:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800d46c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d46e:	2300      	movs	r3, #0
 800d470:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800d474:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800d478:	eb02 0c04 	add.w	ip, r2, r4
 800d47c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d480:	4540      	cmp	r0, r8
 800d482:	bf94      	ite	ls
 800d484:	ebc3 0300 	rsbls	r3, r3, r0
 800d488:	ebc3 0308 	rsbhi	r3, r3, r8
 800d48c:	eba2 0903 	sub.w	r9, r2, r3
 800d490:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800d494:	1ac4      	subs	r4, r0, r3
 800d496:	fb03 f302 	mul.w	r3, r3, r2
 800d49a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800d49e:	2a00      	cmp	r2, #0
 800d4a0:	f340 80e9 	ble.w	800d676 <forward_conv2d_nl_pool+0x1252>
 800d4a4:	f023 050f 	bic.w	r5, r3, #15
 800d4a8:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 800d4ac:	1e68      	subs	r0, r5, #1
 800d4ae:	0900      	lsrs	r0, r0, #4
 800d4b0:	3001      	adds	r0, #1
 800d4b2:	fb06 f204 	mul.w	r2, r6, r4
 800d4b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d4b8:	0102      	lsls	r2, r0, #4
 800d4ba:	62ba      	str	r2, [r7, #40]	; 0x28
 800d4bc:	fb06 f909 	mul.w	r9, r6, r9
 800d4c0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800d4c4:	eef0 6a46 	vmov.f32	s13, s12
 800d4c8:	f04f 0e00 	mov.w	lr, #0
 800d4cc:	4662      	mov	r2, ip
 800d4ce:	2d00      	cmp	r5, #0
 800d4d0:	f340 80cf 	ble.w	800d672 <forward_conv2d_nl_pool+0x124e>
 800d4d4:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800d4d8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800d4dc:	2600      	movs	r6, #0
 800d4de:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800d4e2:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800d4e6:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 800d4ea:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800d4ee:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800d4f2:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800d4f6:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800d4fa:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800d4fe:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800d502:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800d506:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800d50a:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800d50e:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800d512:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800d516:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800d51a:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800d51e:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800d522:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800d526:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800d52a:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800d52e:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800d532:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800d536:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800d53a:	ed50 3a04 	vldr	s7, [r0, #-16]
 800d53e:	ed14 4a04 	vldr	s8, [r4, #-16]
 800d542:	ed54 4a03 	vldr	s9, [r4, #-12]
 800d546:	ed10 5a03 	vldr	s10, [r0, #-12]
 800d54a:	ed50 5a02 	vldr	s11, [r0, #-8]
 800d54e:	ed14 7a02 	vldr	s14, [r4, #-8]
 800d552:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800d556:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800d55a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800d55e:	3610      	adds	r6, #16
 800d560:	42ae      	cmp	r6, r5
 800d562:	ed14 fa01 	vldr	s30, [r4, #-4]
 800d566:	ed50 ea01 	vldr	s29, [r0, #-4]
 800d56a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800d56e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800d572:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800d576:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800d57a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800d57e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800d582:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800d586:	eee9 7a89 	vfma.f32	s15, s19, s18
 800d58a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800d58e:	eee0 7a81 	vfma.f32	s15, s1, s2
 800d592:	eee1 7a82 	vfma.f32	s15, s3, s4
 800d596:	eee2 7a83 	vfma.f32	s15, s5, s6
 800d59a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800d59e:	eee4 7a85 	vfma.f32	s15, s9, s10
 800d5a2:	eee5 7a87 	vfma.f32	s15, s11, s14
 800d5a6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800d5aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d5ae:	db96      	blt.n	800d4de <forward_conv2d_nl_pool+0x10ba>
 800d5b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5b2:	4451      	add	r1, sl
 800d5b4:	4452      	add	r2, sl
 800d5b6:	4283      	cmp	r3, r0
 800d5b8:	dd0f      	ble.n	800d5da <forward_conv2d_nl_pool+0x11b6>
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	468c      	mov	ip, r1
 800d5be:	4616      	mov	r6, r2
 800d5c0:	ecb6 7a01 	vldmia	r6!, {s14}
 800d5c4:	ecfc 7a01 	vldmia	ip!, {s15}
 800d5c8:	3401      	adds	r4, #1
 800d5ca:	42a3      	cmp	r3, r4
 800d5cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d5d0:	d1f6      	bne.n	800d5c0 <forward_conv2d_nl_pool+0x119c>
 800d5d2:	1a18      	subs	r0, r3, r0
 800d5d4:	0080      	lsls	r0, r0, #2
 800d5d6:	4402      	add	r2, r0
 800d5d8:	4401      	add	r1, r0
 800d5da:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d5dc:	4402      	add	r2, r0
 800d5de:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800d5e2:	f10e 0e01 	add.w	lr, lr, #1
 800d5e6:	4570      	cmp	r0, lr
 800d5e8:	4449      	add	r1, r9
 800d5ea:	f47f af70 	bne.w	800d4ce <forward_conv2d_nl_pool+0x10aa>
 800d5ee:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800d5f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5f4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800d5f8:	edc3 6a00 	vstr	s13, [r3]
 800d5fc:	4608      	mov	r0, r1
 800d5fe:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800d602:	440b      	add	r3, r1
 800d604:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800d608:	677b      	str	r3, [r7, #116]	; 0x74
 800d60a:	4410      	add	r0, r2
 800d60c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d60e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800d612:	4608      	mov	r0, r1
 800d614:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800d618:	4418      	add	r0, r3
 800d61a:	1acb      	subs	r3, r1, r3
 800d61c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d620:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800d624:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800d628:	f10b 0b01 	add.w	fp, fp, #1
 800d62c:	455b      	cmp	r3, fp
 800d62e:	eba8 0802 	sub.w	r8, r8, r2
 800d632:	f47f af14 	bne.w	800d45e <forward_conv2d_nl_pool+0x103a>
 800d636:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800d63a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800d63e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d642:	440a      	add	r2, r1
 800d644:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800d648:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d64c:	3204      	adds	r2, #4
 800d64e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800d652:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800d656:	3301      	adds	r3, #1
 800d658:	429a      	cmp	r2, r3
 800d65a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d65e:	f47f aecf 	bne.w	800d400 <forward_conv2d_nl_pool+0xfdc>
 800d662:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 800d666:	f8d7 a014 	ldr.w	sl, [r7, #20]
 800d66a:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 800d66e:	f7ff ba23 	b.w	800cab8 <forward_conv2d_nl_pool+0x694>
 800d672:	2000      	movs	r0, #0
 800d674:	e79f      	b.n	800d5b6 <forward_conv2d_nl_pool+0x1192>
 800d676:	eef0 6a46 	vmov.f32	s13, s12
 800d67a:	e7b8      	b.n	800d5ee <forward_conv2d_nl_pool+0x11ca>
 800d67c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d680:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800d684:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800d688:	eba8 0303 	sub.w	r3, r8, r3
 800d68c:	e6f0      	b.n	800d470 <forward_conv2d_nl_pool+0x104c>
 800d68e:	eeb0 6a48 	vmov.f32	s12, s16
 800d692:	e6ca      	b.n	800d42a <forward_conv2d_nl_pool+0x1006>

0800d694 <forward_dense>:
 800d694:	6983      	ldr	r3, [r0, #24]
 800d696:	881a      	ldrh	r2, [r3, #0]
 800d698:	2a00      	cmp	r2, #0
 800d69a:	f000 80b5 	beq.w	800d808 <forward_dense+0x174>
 800d69e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a2:	ed2d 8b10 	vpush	{d8-d15}
 800d6a6:	685f      	ldr	r7, [r3, #4]
 800d6a8:	687e      	ldr	r6, [r7, #4]
 800d6aa:	b091      	sub	sp, #68	; 0x44
 800d6ac:	b106      	cbz	r6, 800d6b0 <forward_dense+0x1c>
 800d6ae:	6836      	ldr	r6, [r6, #0]
 800d6b0:	2a01      	cmp	r2, #1
 800d6b2:	f240 80a6 	bls.w	800d802 <forward_dense+0x16e>
 800d6b6:	693d      	ldr	r5, [r7, #16]
 800d6b8:	b105      	cbz	r5, 800d6bc <forward_dense+0x28>
 800d6ba:	682d      	ldr	r5, [r5, #0]
 800d6bc:	2a02      	cmp	r2, #2
 800d6be:	f000 80a5 	beq.w	800d80c <forward_dense+0x178>
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	f000 821b 	beq.w	800db00 <forward_dense+0x46c>
 800d6ca:	6819      	ldr	r1, [r3, #0]
 800d6cc:	9106      	str	r1, [sp, #24]
 800d6ce:	f117 0118 	adds.w	r1, r7, #24
 800d6d2:	f000 80c9 	beq.w	800d868 <forward_dense+0x1d4>
 800d6d6:	8b39      	ldrh	r1, [r7, #24]
 800d6d8:	2901      	cmp	r1, #1
 800d6da:	f240 820e 	bls.w	800dafa <forward_dense+0x466>
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f000 80c4 	beq.w	800d86c <forward_dense+0x1d8>
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	9307      	str	r3, [sp, #28]
 800d6e8:	9b06      	ldr	r3, [sp, #24]
 800d6ea:	68ec      	ldr	r4, [r5, #12]
 800d6ec:	6998      	ldr	r0, [r3, #24]
 800d6ee:	68f1      	ldr	r1, [r6, #12]
 800d6f0:	6803      	ldr	r3, [r0, #0]
 800d6f2:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800d6f6:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 800d6fa:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 800d6fe:	f3c3 5141 	ubfx	r1, r3, #21, #2
 800d702:	fa49 f101 	asr.w	r1, r9, r1
 800d706:	910b      	str	r1, [sp, #44]	; 0x2c
 800d708:	2a03      	cmp	r2, #3
 800d70a:	fb0e f10c 	mul.w	r1, lr, ip
 800d70e:	6864      	ldr	r4, [r4, #4]
 800d710:	9108      	str	r1, [sp, #32]
 800d712:	f000 81de 	beq.w	800dad2 <forward_dense+0x43e>
 800d716:	6abf      	ldr	r7, [r7, #40]	; 0x28
 800d718:	b117      	cbz	r7, 800d720 <forward_dense+0x8c>
 800d71a:	683f      	ldr	r7, [r7, #0]
 800d71c:	b107      	cbz	r7, 800d720 <forward_dense+0x8c>
 800d71e:	69bf      	ldr	r7, [r7, #24]
 800d720:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800d724:	2b04      	cmp	r3, #4
 800d726:	f000 81d7 	beq.w	800dad8 <forward_dense+0x444>
 800d72a:	2b08      	cmp	r3, #8
 800d72c:	f000 81d4 	beq.w	800dad8 <forward_dense+0x444>
 800d730:	f04f 0a00 	mov.w	sl, #0
 800d734:	69ab      	ldr	r3, [r5, #24]
 800d736:	69b2      	ldr	r2, [r6, #24]
 800d738:	6899      	ldr	r1, [r3, #8]
 800d73a:	9b06      	ldr	r3, [sp, #24]
 800d73c:	9104      	str	r1, [sp, #16]
 800d73e:	695b      	ldr	r3, [r3, #20]
 800d740:	6897      	ldr	r7, [r2, #8]
 800d742:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d746:	00a3      	lsls	r3, r4, #2
 800d748:	9309      	str	r3, [sp, #36]	; 0x24
 800d74a:	18ce      	adds	r6, r1, r3
 800d74c:	9b08      	ldr	r3, [sp, #32]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d052      	beq.n	800d7f8 <forward_dense+0x164>
 800d752:	f1a8 0310 	sub.w	r3, r8, #16
 800d756:	091b      	lsrs	r3, r3, #4
 800d758:	3301      	adds	r3, #1
 800d75a:	019b      	lsls	r3, r3, #6
 800d75c:	930c      	str	r3, [sp, #48]	; 0x30
 800d75e:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800d762:	930a      	str	r3, [sp, #40]	; 0x28
 800d764:	2300      	movs	r3, #0
 800d766:	9305      	str	r3, [sp, #20]
 800d768:	eddf aace 	vldr	s21, [pc, #824]	; 800daa4 <forward_dense+0x410>
 800d76c:	f008 030f 	and.w	r3, r8, #15
 800d770:	930d      	str	r3, [sp, #52]	; 0x34
 800d772:	9b06      	ldr	r3, [sp, #24]
 800d774:	699b      	ldr	r3, [r3, #24]
 800d776:	689d      	ldr	r5, [r3, #8]
 800d778:	9b07      	ldr	r3, [sp, #28]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f000 818f 	beq.w	800da9e <forward_dense+0x40a>
 800d780:	699b      	ldr	r3, [r3, #24]
 800d782:	689c      	ldr	r4, [r3, #8]
 800d784:	9b04      	ldr	r3, [sp, #16]
 800d786:	f1ba 0f00 	cmp.w	sl, #0
 800d78a:	d071      	beq.n	800d870 <forward_dense+0x1dc>
 800d78c:	42b3      	cmp	r3, r6
 800d78e:	d229      	bcs.n	800d7e4 <forward_dense+0x150>
 800d790:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d792:	469b      	mov	fp, r3
 800d794:	ab0f      	add	r3, sp, #60	; 0x3c
 800d796:	9303      	str	r3, [sp, #12]
 800d798:	2a04      	cmp	r2, #4
 800d79a:	4633      	mov	r3, r6
 800d79c:	4646      	mov	r6, r8
 800d79e:	4698      	mov	r8, r3
 800d7a0:	d037      	beq.n	800d812 <forward_dense+0x17e>
 800d7a2:	2c00      	cmp	r4, #0
 800d7a4:	f000 8180 	beq.w	800daa8 <forward_dense+0x414>
 800d7a8:	f8d4 c000 	ldr.w	ip, [r4]
 800d7ac:	9803      	ldr	r0, [sp, #12]
 800d7ae:	9600      	str	r6, [sp, #0]
 800d7b0:	463b      	mov	r3, r7
 800d7b2:	4629      	mov	r1, r5
 800d7b4:	4652      	mov	r2, sl
 800d7b6:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800d7ba:	f7fe fc57 	bl	800c06c <ai_dict8_dot_array_f32>
 800d7be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7c0:	f84b 3b04 	str.w	r3, [fp], #4
 800d7c4:	45c3      	cmp	fp, r8
 800d7c6:	f104 0404 	add.w	r4, r4, #4
 800d7ca:	444d      	add	r5, r9
 800d7cc:	d3e9      	bcc.n	800d7a2 <forward_dense+0x10e>
 800d7ce:	4643      	mov	r3, r8
 800d7d0:	46b0      	mov	r8, r6
 800d7d2:	461e      	mov	r6, r3
 800d7d4:	9a04      	ldr	r2, [sp, #16]
 800d7d6:	43d3      	mvns	r3, r2
 800d7d8:	4433      	add	r3, r6
 800d7da:	f023 0303 	bic.w	r3, r3, #3
 800d7de:	3304      	adds	r3, #4
 800d7e0:	18d3      	adds	r3, r2, r3
 800d7e2:	9304      	str	r3, [sp, #16]
 800d7e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7e6:	9b05      	ldr	r3, [sp, #20]
 800d7e8:	4417      	add	r7, r2
 800d7ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7ec:	4416      	add	r6, r2
 800d7ee:	9a08      	ldr	r2, [sp, #32]
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	9305      	str	r3, [sp, #20]
 800d7f6:	d1bc      	bne.n	800d772 <forward_dense+0xde>
 800d7f8:	b011      	add	sp, #68	; 0x44
 800d7fa:	ecbd 8b10 	vpop	{d8-d15}
 800d7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d802:	2300      	movs	r3, #0
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	deff      	udf	#255	; 0xff
 800d808:	6853      	ldr	r3, [r2, #4]
 800d80a:	deff      	udf	#255	; 0xff
 800d80c:	2300      	movs	r3, #0
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	deff      	udf	#255	; 0xff
 800d812:	b1a4      	cbz	r4, 800d83e <forward_dense+0x1aa>
 800d814:	f8d4 c000 	ldr.w	ip, [r4]
 800d818:	9803      	ldr	r0, [sp, #12]
 800d81a:	9600      	str	r6, [sp, #0]
 800d81c:	463b      	mov	r3, r7
 800d81e:	4629      	mov	r1, r5
 800d820:	4652      	mov	r2, sl
 800d822:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800d826:	f7fe fcef 	bl	800c208 <ai_dict4_dot_array_f32>
 800d82a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d82c:	f84b 3b04 	str.w	r3, [fp], #4
 800d830:	45c3      	cmp	fp, r8
 800d832:	f104 0404 	add.w	r4, r4, #4
 800d836:	444d      	add	r5, r9
 800d838:	d2c9      	bcs.n	800d7ce <forward_dense+0x13a>
 800d83a:	2c00      	cmp	r4, #0
 800d83c:	d1ea      	bne.n	800d814 <forward_dense+0x180>
 800d83e:	4634      	mov	r4, r6
 800d840:	4646      	mov	r6, r8
 800d842:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d846:	9400      	str	r4, [sp, #0]
 800d848:	463b      	mov	r3, r7
 800d84a:	4629      	mov	r1, r5
 800d84c:	4652      	mov	r2, sl
 800d84e:	4640      	mov	r0, r8
 800d850:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800d854:	f7fe fcd8 	bl	800c208 <ai_dict4_dot_array_f32>
 800d858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d85a:	f84b 3b04 	str.w	r3, [fp], #4
 800d85e:	45b3      	cmp	fp, r6
 800d860:	444d      	add	r5, r9
 800d862:	d3f0      	bcc.n	800d846 <forward_dense+0x1b2>
 800d864:	46a0      	mov	r8, r4
 800d866:	e7b5      	b.n	800d7d4 <forward_dense+0x140>
 800d868:	9107      	str	r1, [sp, #28]
 800d86a:	e73d      	b.n	800d6e8 <forward_dense+0x54>
 800d86c:	9307      	str	r3, [sp, #28]
 800d86e:	e73b      	b.n	800d6e8 <forward_dense+0x54>
 800d870:	42b3      	cmp	r3, r6
 800d872:	d2b7      	bcs.n	800d7e4 <forward_dense+0x150>
 800d874:	4618      	mov	r0, r3
 800d876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d878:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800d87c:	eb07 0c03 	add.w	ip, r7, r3
 800d880:	469e      	mov	lr, r3
 800d882:	2c00      	cmp	r4, #0
 800d884:	f000 80ff 	beq.w	800da86 <forward_dense+0x3f2>
 800d888:	f1b8 0f0f 	cmp.w	r8, #15
 800d88c:	edd4 fa00 	vldr	s31, [r4]
 800d890:	eddf 6a84 	vldr	s13, [pc, #528]	; 800daa4 <forward_dense+0x410>
 800d894:	f104 0404 	add.w	r4, r4, #4
 800d898:	f240 80fd 	bls.w	800da96 <forward_dense+0x402>
 800d89c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d8a0:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800d8a4:	4641      	mov	r1, r8
 800d8a6:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800d8aa:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800d8ae:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 800d8b2:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800d8b6:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800d8ba:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 800d8be:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 800d8c2:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800d8c6:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800d8ca:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 800d8ce:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 800d8d2:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800d8d6:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800d8da:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 800d8de:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 800d8e2:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800d8e6:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800d8ea:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 800d8ee:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800d8f2:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800d8f6:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800d8fa:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 800d8fe:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 800d902:	ed12 4a04 	vldr	s8, [r2, #-16]
 800d906:	ed53 4a04 	vldr	s9, [r3, #-16]
 800d90a:	ed13 5a03 	vldr	s10, [r3, #-12]
 800d90e:	ed52 5a03 	vldr	s11, [r2, #-12]
 800d912:	ed13 6a02 	vldr	s12, [r3, #-8]
 800d916:	ed12 7a02 	vldr	s14, [r2, #-8]
 800d91a:	ee67 7a8f 	vmul.f32	s15, s15, s30
 800d91e:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 800d922:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800d926:	3910      	subs	r1, #16
 800d928:	290f      	cmp	r1, #15
 800d92a:	ed52 ea01 	vldr	s29, [r2, #-4]
 800d92e:	ed13 ea01 	vldr	s28, [r3, #-4]
 800d932:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800d936:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800d93a:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800d93e:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800d942:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800d946:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 800d94a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800d94e:	eee8 7a88 	vfma.f32	s15, s17, s16
 800d952:	eee0 7a20 	vfma.f32	s15, s0, s1
 800d956:	eee1 7a21 	vfma.f32	s15, s2, s3
 800d95a:	eee2 7a22 	vfma.f32	s15, s4, s5
 800d95e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800d962:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d966:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d96a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d96e:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800d972:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d976:	d896      	bhi.n	800d8a6 <forward_dense+0x212>
 800d978:	eb05 010e 	add.w	r1, r5, lr
 800d97c:	465b      	mov	r3, fp
 800d97e:	4662      	mov	r2, ip
 800d980:	2b00      	cmp	r3, #0
 800d982:	d075      	beq.n	800da70 <forward_dense+0x3dc>
 800d984:	ed91 7a00 	vldr	s14, [r1]
 800d988:	edd2 7a00 	vldr	s15, [r2]
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d992:	d06d      	beq.n	800da70 <forward_dense+0x3dc>
 800d994:	ed91 7a01 	vldr	s14, [r1, #4]
 800d998:	edd2 7a01 	vldr	s15, [r2, #4]
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d9a2:	d065      	beq.n	800da70 <forward_dense+0x3dc>
 800d9a4:	ed91 7a02 	vldr	s14, [r1, #8]
 800d9a8:	edd2 7a02 	vldr	s15, [r2, #8]
 800d9ac:	2b03      	cmp	r3, #3
 800d9ae:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d9b2:	d05d      	beq.n	800da70 <forward_dense+0x3dc>
 800d9b4:	ed91 7a03 	vldr	s14, [r1, #12]
 800d9b8:	edd2 7a03 	vldr	s15, [r2, #12]
 800d9bc:	2b04      	cmp	r3, #4
 800d9be:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d9c2:	d055      	beq.n	800da70 <forward_dense+0x3dc>
 800d9c4:	ed91 7a04 	vldr	s14, [r1, #16]
 800d9c8:	edd2 7a04 	vldr	s15, [r2, #16]
 800d9cc:	2b05      	cmp	r3, #5
 800d9ce:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d9d2:	d04d      	beq.n	800da70 <forward_dense+0x3dc>
 800d9d4:	ed91 7a05 	vldr	s14, [r1, #20]
 800d9d8:	edd2 7a05 	vldr	s15, [r2, #20]
 800d9dc:	2b06      	cmp	r3, #6
 800d9de:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d9e2:	d045      	beq.n	800da70 <forward_dense+0x3dc>
 800d9e4:	ed91 7a06 	vldr	s14, [r1, #24]
 800d9e8:	edd2 7a06 	vldr	s15, [r2, #24]
 800d9ec:	2b07      	cmp	r3, #7
 800d9ee:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d9f2:	d03d      	beq.n	800da70 <forward_dense+0x3dc>
 800d9f4:	ed91 7a07 	vldr	s14, [r1, #28]
 800d9f8:	edd2 7a07 	vldr	s15, [r2, #28]
 800d9fc:	2b08      	cmp	r3, #8
 800d9fe:	eee7 6a27 	vfma.f32	s13, s14, s15
 800da02:	d035      	beq.n	800da70 <forward_dense+0x3dc>
 800da04:	ed91 7a08 	vldr	s14, [r1, #32]
 800da08:	edd2 7a08 	vldr	s15, [r2, #32]
 800da0c:	2b09      	cmp	r3, #9
 800da0e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800da12:	d02d      	beq.n	800da70 <forward_dense+0x3dc>
 800da14:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800da18:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800da1c:	2b0a      	cmp	r3, #10
 800da1e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800da22:	d025      	beq.n	800da70 <forward_dense+0x3dc>
 800da24:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800da28:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800da2c:	2b0b      	cmp	r3, #11
 800da2e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800da32:	d01d      	beq.n	800da70 <forward_dense+0x3dc>
 800da34:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800da38:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800da3c:	2b0c      	cmp	r3, #12
 800da3e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800da42:	d015      	beq.n	800da70 <forward_dense+0x3dc>
 800da44:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800da48:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800da4c:	2b0d      	cmp	r3, #13
 800da4e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800da52:	d00d      	beq.n	800da70 <forward_dense+0x3dc>
 800da54:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800da58:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800da5c:	2b0e      	cmp	r3, #14
 800da5e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800da62:	d005      	beq.n	800da70 <forward_dense+0x3dc>
 800da64:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800da68:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800da6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800da70:	444d      	add	r5, r9
 800da72:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800da76:	ece0 6a01 	vstmia	r0!, {s13}
 800da7a:	42b0      	cmp	r0, r6
 800da7c:	f4bf aeaa 	bcs.w	800d7d4 <forward_dense+0x140>
 800da80:	2c00      	cmp	r4, #0
 800da82:	f47f af01 	bne.w	800d888 <forward_dense+0x1f4>
 800da86:	f1b8 0f0f 	cmp.w	r8, #15
 800da8a:	eef0 fa6a 	vmov.f32	s31, s21
 800da8e:	eddf 6a05 	vldr	s13, [pc, #20]	; 800daa4 <forward_dense+0x410>
 800da92:	f63f af03 	bhi.w	800d89c <forward_dense+0x208>
 800da96:	4643      	mov	r3, r8
 800da98:	4629      	mov	r1, r5
 800da9a:	463a      	mov	r2, r7
 800da9c:	e770      	b.n	800d980 <forward_dense+0x2ec>
 800da9e:	461c      	mov	r4, r3
 800daa0:	e670      	b.n	800d784 <forward_dense+0xf0>
 800daa2:	bf00      	nop
 800daa4:	00000000 	.word	0x00000000
 800daa8:	4634      	mov	r4, r6
 800daaa:	4646      	mov	r6, r8
 800daac:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dab0:	9400      	str	r4, [sp, #0]
 800dab2:	463b      	mov	r3, r7
 800dab4:	4629      	mov	r1, r5
 800dab6:	4652      	mov	r2, sl
 800dab8:	4640      	mov	r0, r8
 800daba:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800dabe:	f7fe fad5 	bl	800c06c <ai_dict8_dot_array_f32>
 800dac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dac4:	f84b 3b04 	str.w	r3, [fp], #4
 800dac8:	455e      	cmp	r6, fp
 800daca:	444d      	add	r5, r9
 800dacc:	d8f0      	bhi.n	800dab0 <forward_dense+0x41c>
 800dace:	46a0      	mov	r8, r4
 800dad0:	e680      	b.n	800d7d4 <forward_dense+0x140>
 800dad2:	2300      	movs	r3, #0
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	deff      	udf	#255	; 0xff
 800dad8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800dadc:	2f00      	cmp	r7, #0
 800dade:	f43f ae29 	beq.w	800d734 <forward_dense+0xa0>
 800dae2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dae6:	f000 fc67 	bl	800e3b8 <ai_array_get_byte_size>
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	4602      	mov	r2, r0
 800daee:	4651      	mov	r1, sl
 800daf0:	4618      	mov	r0, r3
 800daf2:	f000 fdaf 	bl	800e654 <memcpy>
 800daf6:	4682      	mov	sl, r0
 800daf8:	e61c      	b.n	800d734 <forward_dense+0xa0>
 800dafa:	2300      	movs	r3, #0
 800dafc:	9307      	str	r3, [sp, #28]
 800dafe:	e5f3      	b.n	800d6e8 <forward_dense+0x54>
 800db00:	9306      	str	r3, [sp, #24]
 800db02:	e5e4      	b.n	800d6ce <forward_dense+0x3a>

0800db04 <nl_func_relu_array_f32>:
 800db04:	b410      	push	{r4}
 800db06:	698c      	ldr	r4, [r1, #24]
 800db08:	6981      	ldr	r1, [r0, #24]
 800db0a:	68a3      	ldr	r3, [r4, #8]
 800db0c:	6889      	ldr	r1, [r1, #8]
 800db0e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800db12:	3a01      	subs	r2, #1
 800db14:	0092      	lsls	r2, r2, #2
 800db16:	189b      	adds	r3, r3, r2
 800db18:	d216      	bcs.n	800db48 <nl_func_relu_array_f32+0x44>
 800db1a:	3204      	adds	r2, #4
 800db1c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800db50 <nl_func_relu_array_f32+0x4c>
 800db20:	4411      	add	r1, r2
 800db22:	3304      	adds	r3, #4
 800db24:	ed53 7a01 	vldr	s15, [r3, #-4]
 800db28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800db2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db30:	bfb8      	it	lt
 800db32:	eef0 7a47 	vmovlt.f32	s15, s14
 800db36:	ed61 7a01 	vstmdb	r1!, {s15}
 800db3a:	68a0      	ldr	r0, [r4, #8]
 800db3c:	f1a3 0208 	sub.w	r2, r3, #8
 800db40:	4290      	cmp	r0, r2
 800db42:	f1a3 0304 	sub.w	r3, r3, #4
 800db46:	d9ed      	bls.n	800db24 <nl_func_relu_array_f32+0x20>
 800db48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	00000000 	.word	0x00000000

0800db54 <nl_func_sm_array_f32>:
 800db54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db58:	ed2d 8b04 	vpush	{d8-d9}
 800db5c:	b089      	sub	sp, #36	; 0x24
 800db5e:	698f      	ldr	r7, [r1, #24]
 800db60:	6984      	ldr	r4, [r0, #24]
 800db62:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800db66:	68bd      	ldr	r5, [r7, #8]
 800db68:	9402      	str	r4, [sp, #8]
 800db6a:	4626      	mov	r6, r4
 800db6c:	4696      	mov	lr, r2
 800db6e:	eba2 020c 	sub.w	r2, r2, ip
 800db72:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800db76:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	68b6      	ldr	r6, [r6, #8]
 800db7c:	ebae 0e04 	sub.w	lr, lr, r4
 800db80:	4295      	cmp	r5, r2
 800db82:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800db86:	d354      	bcc.n	800dc32 <nl_func_sm_array_f32+0xde>
 800db88:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800db8c:	f1cc 0200 	rsb	r2, ip, #0
 800db90:	00a4      	lsls	r4, r4, #2
 800db92:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800db96:	9303      	str	r3, [sp, #12]
 800db98:	9204      	str	r2, [sp, #16]
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	4262      	negs	r2, r4
 800db9e:	9205      	str	r2, [sp, #20]
 800dba0:	9301      	str	r3, [sp, #4]
 800dba2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800dba6:	9b02      	ldr	r3, [sp, #8]
 800dba8:	9a07      	ldr	r2, [sp, #28]
 800dbaa:	60bd      	str	r5, [r7, #8]
 800dbac:	609e      	str	r6, [r3, #8]
 800dbae:	9b06      	ldr	r3, [sp, #24]
 800dbb0:	6992      	ldr	r2, [r2, #24]
 800dbb2:	699b      	ldr	r3, [r3, #24]
 800dbb4:	6894      	ldr	r4, [r2, #8]
 800dbb6:	9a03      	ldr	r2, [sp, #12]
 800dbb8:	689b      	ldr	r3, [r3, #8]
 800dbba:	2a01      	cmp	r2, #1
 800dbbc:	ed93 8a00 	vldr	s16, [r3]
 800dbc0:	d940      	bls.n	800dc44 <nl_func_sm_array_f32+0xf0>
 800dbc2:	9901      	ldr	r1, [sp, #4]
 800dbc4:	1d1a      	adds	r2, r3, #4
 800dbc6:	eb03 0b01 	add.w	fp, r3, r1
 800dbca:	ecf2 7a01 	vldmia	r2!, {s15}
 800dbce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800dbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd6:	bfb8      	it	lt
 800dbd8:	eeb0 8a67 	vmovlt.f32	s16, s15
 800dbdc:	4593      	cmp	fp, r2
 800dbde:	d1f4      	bne.n	800dbca <nl_func_sm_array_f32+0x76>
 800dbe0:	eddf 8a1b 	vldr	s17, [pc, #108]	; 800dc50 <nl_func_sm_array_f32+0xfc>
 800dbe4:	469a      	mov	sl, r3
 800dbe6:	46a1      	mov	r9, r4
 800dbe8:	46a0      	mov	r8, r4
 800dbea:	ecba 0a01 	vldmia	sl!, {s0}
 800dbee:	ee30 0a48 	vsub.f32	s0, s0, s16
 800dbf2:	f003 fa43 	bl	801107c <expf>
 800dbf6:	45d3      	cmp	fp, sl
 800dbf8:	eca8 0a01 	vstmia	r8!, {s0}
 800dbfc:	ee78 8a80 	vadd.f32	s17, s17, s0
 800dc00:	d1f3      	bne.n	800dbea <nl_func_sm_array_f32+0x96>
 800dc02:	eef5 8a40 	vcmp.f32	s17, #0.0
 800dc06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc0a:	d00b      	beq.n	800dc24 <nl_func_sm_array_f32+0xd0>
 800dc0c:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800dc10:	9b01      	ldr	r3, [sp, #4]
 800dc12:	441c      	add	r4, r3
 800dc14:	edd9 7a00 	vldr	s15, [r9]
 800dc18:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc1c:	ece9 7a01 	vstmia	r9!, {s15}
 800dc20:	454c      	cmp	r4, r9
 800dc22:	d1f7      	bne.n	800dc14 <nl_func_sm_array_f32+0xc0>
 800dc24:	9b04      	ldr	r3, [sp, #16]
 800dc26:	68fa      	ldr	r2, [r7, #12]
 800dc28:	441d      	add	r5, r3
 800dc2a:	9b05      	ldr	r3, [sp, #20]
 800dc2c:	42aa      	cmp	r2, r5
 800dc2e:	441e      	add	r6, r3
 800dc30:	d9b9      	bls.n	800dba6 <nl_func_sm_array_f32+0x52>
 800dc32:	60ba      	str	r2, [r7, #8]
 800dc34:	9a02      	ldr	r2, [sp, #8]
 800dc36:	68d3      	ldr	r3, [r2, #12]
 800dc38:	6093      	str	r3, [r2, #8]
 800dc3a:	b009      	add	sp, #36	; 0x24
 800dc3c:	ecbd 8b04 	vpop	{d8-d9}
 800dc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc44:	2a00      	cmp	r2, #0
 800dc46:	d0ed      	beq.n	800dc24 <nl_func_sm_array_f32+0xd0>
 800dc48:	9a01      	ldr	r2, [sp, #4]
 800dc4a:	eb03 0b02 	add.w	fp, r3, r2
 800dc4e:	e7c7      	b.n	800dbe0 <nl_func_sm_array_f32+0x8c>
 800dc50:	00000000 	.word	0x00000000

0800dc54 <nl_func_relu_generic_array_f32>:
 800dc54:	b430      	push	{r4, r5}
 800dc56:	6989      	ldr	r1, [r1, #24]
 800dc58:	6980      	ldr	r0, [r0, #24]
 800dc5a:	edd3 6a02 	vldr	s13, [r3, #8]
 800dc5e:	688c      	ldr	r4, [r1, #8]
 800dc60:	6880      	ldr	r0, [r0, #8]
 800dc62:	ed93 7a00 	vldr	s14, [r3]
 800dc66:	ed93 6a01 	vldr	s12, [r3, #4]
 800dc6a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800dc6e:	3a01      	subs	r2, #1
 800dc70:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800dc74:	0092      	lsls	r2, r2, #2
 800dc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc7a:	4410      	add	r0, r2
 800dc7c:	4422      	add	r2, r4
 800dc7e:	d421      	bmi.n	800dcc4 <nl_func_relu_generic_array_f32+0x70>
 800dc80:	4294      	cmp	r4, r2
 800dc82:	d83d      	bhi.n	800dd00 <nl_func_relu_generic_array_f32+0xac>
 800dc84:	1d13      	adds	r3, r2, #4
 800dc86:	1d02      	adds	r2, r0, #4
 800dc88:	e010      	b.n	800dcac <nl_func_relu_generic_array_f32+0x58>
 800dc8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc92:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800dc96:	d501      	bpl.n	800dc9c <nl_func_relu_generic_array_f32+0x48>
 800dc98:	ee65 7a86 	vmul.f32	s15, s11, s12
 800dc9c:	ed62 7a01 	vstmdb	r2!, {s15}
 800dca0:	6888      	ldr	r0, [r1, #8]
 800dca2:	f1a3 0408 	sub.w	r4, r3, #8
 800dca6:	4284      	cmp	r4, r0
 800dca8:	462b      	mov	r3, r5
 800dcaa:	d329      	bcc.n	800dd00 <nl_func_relu_generic_array_f32+0xac>
 800dcac:	ed53 7a01 	vldr	s15, [r3, #-4]
 800dcb0:	eef4 7ae6 	vcmpe.f32	s15, s13
 800dcb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcb8:	f1a3 0504 	sub.w	r5, r3, #4
 800dcbc:	d4e5      	bmi.n	800dc8a <nl_func_relu_generic_array_f32+0x36>
 800dcbe:	eef0 7a66 	vmov.f32	s15, s13
 800dcc2:	e7eb      	b.n	800dc9c <nl_func_relu_generic_array_f32+0x48>
 800dcc4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800dcc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dccc:	d01a      	beq.n	800dd04 <nl_func_relu_generic_array_f32+0xb0>
 800dcce:	4294      	cmp	r4, r2
 800dcd0:	d816      	bhi.n	800dd00 <nl_func_relu_generic_array_f32+0xac>
 800dcd2:	1d13      	adds	r3, r2, #4
 800dcd4:	1d02      	adds	r2, r0, #4
 800dcd6:	ed53 7a01 	vldr	s15, [r3, #-4]
 800dcda:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800dcde:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dce2:	f1a3 0408 	sub.w	r4, r3, #8
 800dce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcea:	f1a3 0004 	sub.w	r0, r3, #4
 800dcee:	ee66 6a86 	vmul.f32	s13, s13, s12
 800dcf2:	4623      	mov	r3, r4
 800dcf4:	d51e      	bpl.n	800dd34 <nl_func_relu_generic_array_f32+0xe0>
 800dcf6:	ed62 6a01 	vstmdb	r2!, {s13}
 800dcfa:	688b      	ldr	r3, [r1, #8]
 800dcfc:	42a3      	cmp	r3, r4
 800dcfe:	d91e      	bls.n	800dd3e <nl_func_relu_generic_array_f32+0xea>
 800dd00:	bc30      	pop	{r4, r5}
 800dd02:	4770      	bx	lr
 800dd04:	4294      	cmp	r4, r2
 800dd06:	d8fb      	bhi.n	800dd00 <nl_func_relu_generic_array_f32+0xac>
 800dd08:	1d13      	adds	r3, r2, #4
 800dd0a:	2500      	movs	r5, #0
 800dd0c:	1d02      	adds	r2, r0, #4
 800dd0e:	ed53 7a01 	vldr	s15, [r3, #-4]
 800dd12:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd16:	f1a3 0408 	sub.w	r4, r3, #8
 800dd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd1e:	f1a3 0004 	sub.w	r0, r3, #4
 800dd22:	4623      	mov	r3, r4
 800dd24:	db0d      	blt.n	800dd42 <nl_func_relu_generic_array_f32+0xee>
 800dd26:	ed62 7a01 	vstmdb	r2!, {s15}
 800dd2a:	688b      	ldr	r3, [r1, #8]
 800dd2c:	42a3      	cmp	r3, r4
 800dd2e:	d8e7      	bhi.n	800dd00 <nl_func_relu_generic_array_f32+0xac>
 800dd30:	4603      	mov	r3, r0
 800dd32:	e7ec      	b.n	800dd0e <nl_func_relu_generic_array_f32+0xba>
 800dd34:	ed62 7a01 	vstmdb	r2!, {s15}
 800dd38:	688c      	ldr	r4, [r1, #8]
 800dd3a:	429c      	cmp	r4, r3
 800dd3c:	d8e0      	bhi.n	800dd00 <nl_func_relu_generic_array_f32+0xac>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	e7c9      	b.n	800dcd6 <nl_func_relu_generic_array_f32+0x82>
 800dd42:	f842 5d04 	str.w	r5, [r2, #-4]!
 800dd46:	688c      	ldr	r4, [r1, #8]
 800dd48:	429c      	cmp	r4, r3
 800dd4a:	d8d9      	bhi.n	800dd00 <nl_func_relu_generic_array_f32+0xac>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	e7de      	b.n	800dd0e <nl_func_relu_generic_array_f32+0xba>

0800dd50 <forward_relu>:
 800dd50:	6982      	ldr	r2, [r0, #24]
 800dd52:	8813      	ldrh	r3, [r2, #0]
 800dd54:	b333      	cbz	r3, 800dda4 <forward_relu+0x54>
 800dd56:	6852      	ldr	r2, [r2, #4]
 800dd58:	6851      	ldr	r1, [r2, #4]
 800dd5a:	b101      	cbz	r1, 800dd5e <forward_relu+0xe>
 800dd5c:	6809      	ldr	r1, [r1, #0]
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d91d      	bls.n	800dd9e <forward_relu+0x4e>
 800dd62:	b4f0      	push	{r4, r5, r6, r7}
 800dd64:	6917      	ldr	r7, [r2, #16]
 800dd66:	b107      	cbz	r7, 800dd6a <forward_relu+0x1a>
 800dd68:	683f      	ldr	r7, [r7, #0]
 800dd6a:	688c      	ldr	r4, [r1, #8]
 800dd6c:	69c3      	ldr	r3, [r0, #28]
 800dd6e:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d044      	beq.n	800de00 <forward_relu+0xb0>
 800dd76:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800dd7a:	2d01      	cmp	r5, #1
 800dd7c:	d014      	beq.n	800dda8 <forward_relu+0x58>
 800dd7e:	2c00      	cmp	r4, #0
 800dd80:	d074      	beq.n	800de6c <forward_relu+0x11c>
 800dd82:	68ce      	ldr	r6, [r1, #12]
 800dd84:	2201      	movs	r2, #1
 800dd86:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800dd8a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dd8e:	42a6      	cmp	r6, r4
 800dd90:	fb05 f202 	mul.w	r2, r5, r2
 800dd94:	d1f9      	bne.n	800dd8a <forward_relu+0x3a>
 800dd96:	4638      	mov	r0, r7
 800dd98:	bcf0      	pop	{r4, r5, r6, r7}
 800dd9a:	f7ff bf5b 	b.w	800dc54 <nl_func_relu_generic_array_f32>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	deff      	udf	#255	; 0xff
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	deff      	udf	#255	; 0xff
 800dda8:	69ba      	ldr	r2, [r7, #24]
 800ddaa:	6988      	ldr	r0, [r1, #24]
 800ddac:	6896      	ldr	r6, [r2, #8]
 800ddae:	ed93 7a00 	vldr	s14, [r3]
 800ddb2:	6882      	ldr	r2, [r0, #8]
 800ddb4:	b184      	cbz	r4, 800ddd8 <forward_relu+0x88>
 800ddb6:	68cf      	ldr	r7, [r1, #12]
 800ddb8:	462b      	mov	r3, r5
 800ddba:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800ddbe:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800ddc2:	42a7      	cmp	r7, r4
 800ddc4:	fb01 f303 	mul.w	r3, r1, r3
 800ddc8:	d1f9      	bne.n	800ddbe <forward_relu+0x6e>
 800ddca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ddce:	3b01      	subs	r3, #1
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	18d2      	adds	r2, r2, r3
 800ddd4:	441e      	add	r6, r3
 800ddd6:	d23f      	bcs.n	800de58 <forward_relu+0x108>
 800ddd8:	1d13      	adds	r3, r2, #4
 800ddda:	2500      	movs	r5, #0
 800dddc:	1d32      	adds	r2, r6, #4
 800ddde:	ed53 7a01 	vldr	s15, [r3, #-4]
 800dde2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddea:	f1a3 0104 	sub.w	r1, r3, #4
 800ddee:	d835      	bhi.n	800de5c <forward_relu+0x10c>
 800ddf0:	ed62 7a01 	vstmdb	r2!, {s15}
 800ddf4:	6884      	ldr	r4, [r0, #8]
 800ddf6:	3b08      	subs	r3, #8
 800ddf8:	429c      	cmp	r4, r3
 800ddfa:	d82d      	bhi.n	800de58 <forward_relu+0x108>
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	e7ee      	b.n	800ddde <forward_relu+0x8e>
 800de00:	69bb      	ldr	r3, [r7, #24]
 800de02:	698d      	ldr	r5, [r1, #24]
 800de04:	6898      	ldr	r0, [r3, #8]
 800de06:	68ab      	ldr	r3, [r5, #8]
 800de08:	b184      	cbz	r4, 800de2c <forward_relu+0xdc>
 800de0a:	68ce      	ldr	r6, [r1, #12]
 800de0c:	2201      	movs	r2, #1
 800de0e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800de12:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800de16:	42a6      	cmp	r6, r4
 800de18:	fb01 f202 	mul.w	r2, r1, r2
 800de1c:	d1f9      	bne.n	800de12 <forward_relu+0xc2>
 800de1e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800de22:	3a01      	subs	r2, #1
 800de24:	0092      	lsls	r2, r2, #2
 800de26:	189b      	adds	r3, r3, r2
 800de28:	4410      	add	r0, r2
 800de2a:	d215      	bcs.n	800de58 <forward_relu+0x108>
 800de2c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800de70 <forward_relu+0x120>
 800de30:	3304      	adds	r3, #4
 800de32:	1d01      	adds	r1, r0, #4
 800de34:	ed53 7a01 	vldr	s15, [r3, #-4]
 800de38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de40:	bfb8      	it	lt
 800de42:	eef0 7a47 	vmovlt.f32	s15, s14
 800de46:	ed61 7a01 	vstmdb	r1!, {s15}
 800de4a:	68a8      	ldr	r0, [r5, #8]
 800de4c:	f1a3 0208 	sub.w	r2, r3, #8
 800de50:	4290      	cmp	r0, r2
 800de52:	f1a3 0304 	sub.w	r3, r3, #4
 800de56:	d9ed      	bls.n	800de34 <forward_relu+0xe4>
 800de58:	bcf0      	pop	{r4, r5, r6, r7}
 800de5a:	4770      	bx	lr
 800de5c:	f842 5d04 	str.w	r5, [r2, #-4]!
 800de60:	6884      	ldr	r4, [r0, #8]
 800de62:	3b08      	subs	r3, #8
 800de64:	429c      	cmp	r4, r3
 800de66:	d8f7      	bhi.n	800de58 <forward_relu+0x108>
 800de68:	460b      	mov	r3, r1
 800de6a:	e7b8      	b.n	800ddde <forward_relu+0x8e>
 800de6c:	2201      	movs	r2, #1
 800de6e:	e792      	b.n	800dd96 <forward_relu+0x46>
 800de70:	00000000 	.word	0x00000000

0800de74 <forward_sm>:
 800de74:	6982      	ldr	r2, [r0, #24]
 800de76:	8813      	ldrh	r3, [r2, #0]
 800de78:	b32b      	cbz	r3, 800dec6 <forward_sm+0x52>
 800de7a:	6852      	ldr	r2, [r2, #4]
 800de7c:	6851      	ldr	r1, [r2, #4]
 800de7e:	b101      	cbz	r1, 800de82 <forward_sm+0xe>
 800de80:	6809      	ldr	r1, [r1, #0]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d91c      	bls.n	800dec0 <forward_sm+0x4c>
 800de86:	6913      	ldr	r3, [r2, #16]
 800de88:	b1c3      	cbz	r3, 800debc <forward_sm+0x48>
 800de8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de8c:	6818      	ldr	r0, [r3, #0]
 800de8e:	688c      	ldr	r4, [r1, #8]
 800de90:	68c3      	ldr	r3, [r0, #12]
 800de92:	68ce      	ldr	r6, [r1, #12]
 800de94:	685f      	ldr	r7, [r3, #4]
 800de96:	6873      	ldr	r3, [r6, #4]
 800de98:	0a24      	lsrs	r4, r4, #8
 800de9a:	b083      	sub	sp, #12
 800de9c:	d015      	beq.n	800deca <forward_sm+0x56>
 800de9e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800dea2:	2201      	movs	r2, #1
 800dea4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dea8:	42a6      	cmp	r6, r4
 800deaa:	fb05 f202 	mul.w	r2, r5, r2
 800deae:	d1f9      	bne.n	800dea4 <forward_sm+0x30>
 800deb0:	e9cd 3700 	strd	r3, r7, [sp]
 800deb4:	f7ff fe4e 	bl	800db54 <nl_func_sm_array_f32>
 800deb8:	b003      	add	sp, #12
 800deba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	deff      	udf	#255	; 0xff
 800dec0:	2300      	movs	r3, #0
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	deff      	udf	#255	; 0xff
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	deff      	udf	#255	; 0xff
 800deca:	2201      	movs	r2, #1
 800decc:	e9cd 3700 	strd	r3, r7, [sp]
 800ded0:	f7ff fe40 	bl	800db54 <nl_func_sm_array_f32>
 800ded4:	b003      	add	sp, #12
 800ded6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ded8 <pool_func_mp_array_f32>:
 800ded8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dedc:	b093      	sub	sp, #76	; 0x4c
 800dede:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800dee2:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800dee4:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 800dee8:	68a8      	ldr	r0, [r5, #8]
 800deea:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 800deee:	9508      	str	r5, [sp, #32]
 800def0:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 800def4:	9002      	str	r0, [sp, #8]
 800def6:	950d      	str	r5, [sp, #52]	; 0x34
 800def8:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 800defc:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 800df00:	9004      	str	r0, [sp, #16]
 800df02:	9506      	str	r5, [sp, #24]
 800df04:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 800df08:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800df0c:	9009      	str	r0, [sp, #36]	; 0x24
 800df0e:	950b      	str	r5, [sp, #44]	; 0x2c
 800df10:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 800df14:	9200      	str	r2, [sp, #0]
 800df16:	468a      	mov	sl, r1
 800df18:	4699      	mov	r9, r3
 800df1a:	b95c      	cbnz	r4, 800df34 <pool_func_mp_array_f32+0x5c>
 800df1c:	b950      	cbnz	r0, 800df34 <pool_func_mp_array_f32+0x5c>
 800df1e:	9b04      	ldr	r3, [sp, #16]
 800df20:	1a5a      	subs	r2, r3, r1
 800df22:	9b06      	ldr	r3, [sp, #24]
 800df24:	9908      	ldr	r1, [sp, #32]
 800df26:	3a01      	subs	r2, #1
 800df28:	3b01      	subs	r3, #1
 800df2a:	fb13 2301 	smlabb	r3, r3, r1, r2
 800df2e:	041a      	lsls	r2, r3, #16
 800df30:	f100 809b 	bmi.w	800e06a <pool_func_mp_array_f32+0x192>
 800df34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df36:	2b00      	cmp	r3, #0
 800df38:	f000 808b 	beq.w	800e052 <pool_func_mp_array_f32+0x17a>
 800df3c:	9b06      	ldr	r3, [sp, #24]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f000 8087 	beq.w	800e052 <pool_func_mp_array_f32+0x17a>
 800df44:	f1b9 0f00 	cmp.w	r9, #0
 800df48:	f000 8083 	beq.w	800e052 <pool_func_mp_array_f32+0x17a>
 800df4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df4e:	1b1c      	subs	r4, r3, r4
 800df50:	9b04      	ldr	r3, [sp, #16]
 800df52:	1a1b      	subs	r3, r3, r0
 800df54:	b29b      	uxth	r3, r3
 800df56:	4240      	negs	r0, r0
 800df58:	2200      	movs	r2, #0
 800df5a:	b2a1      	uxth	r1, r4
 800df5c:	930f      	str	r3, [sp, #60]	; 0x3c
 800df5e:	b283      	uxth	r3, r0
 800df60:	920e      	str	r2, [sp, #56]	; 0x38
 800df62:	910c      	str	r1, [sp, #48]	; 0x30
 800df64:	9310      	str	r3, [sp, #64]	; 0x40
 800df66:	9c06      	ldr	r4, [sp, #24]
 800df68:	990c      	ldr	r1, [sp, #48]	; 0x30
 800df6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df6c:	fb02 f204 	mul.w	r2, r2, r4
 800df70:	1acb      	subs	r3, r1, r3
 800df72:	920a      	str	r2, [sp, #40]	; 0x28
 800df74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df76:	9205      	str	r2, [sp, #20]
 800df78:	2000      	movs	r0, #0
 800df7a:	b21b      	sxth	r3, r3
 800df7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df7e:	9303      	str	r3, [sp, #12]
 800df80:	9007      	str	r0, [sp, #28]
 800df82:	4603      	mov	r3, r0
 800df84:	fa0f f881 	sxth.w	r8, r1
 800df88:	9204      	str	r2, [sp, #16]
 800df8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df8c:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 800df90:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800df94:	4413      	add	r3, r2
 800df96:	f04f 0e00 	mov.w	lr, #0
 800df9a:	fb09 f303 	mul.w	r3, r9, r3
 800df9e:	9301      	str	r3, [sp, #4]
 800dfa0:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800dfa4:	4675      	mov	r5, lr
 800dfa6:	9903      	ldr	r1, [sp, #12]
 800dfa8:	eddf 7a78 	vldr	s15, [pc, #480]	; 800e18c <pool_func_mp_array_f32+0x2b4>
 800dfac:	4588      	cmp	r8, r1
 800dfae:	dd24      	ble.n	800dffa <pool_func_mp_array_f32+0x122>
 800dfb0:	4564      	cmp	r4, ip
 800dfb2:	dd1e      	ble.n	800dff2 <pool_func_mp_array_f32+0x11a>
 800dfb4:	2900      	cmp	r1, #0
 800dfb6:	fb0a f601 	mul.w	r6, sl, r1
 800dfba:	db1a      	blt.n	800dff2 <pool_func_mp_array_f32+0x11a>
 800dfbc:	9b00      	ldr	r3, [sp, #0]
 800dfbe:	4299      	cmp	r1, r3
 800dfc0:	da17      	bge.n	800dff2 <pool_func_mp_array_f32+0x11a>
 800dfc2:	f1bc 0f00 	cmp.w	ip, #0
 800dfc6:	4663      	mov	r3, ip
 800dfc8:	db46      	blt.n	800e058 <pool_func_mp_array_f32+0x180>
 800dfca:	18f2      	adds	r2, r6, r3
 800dfcc:	fb09 5202 	mla	r2, r9, r2, r5
 800dfd0:	1c58      	adds	r0, r3, #1
 800dfd2:	459a      	cmp	sl, r3
 800dfd4:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 800dfd8:	b203      	sxth	r3, r0
 800dfda:	dd08      	ble.n	800dfee <pool_func_mp_array_f32+0x116>
 800dfdc:	ed92 7a00 	vldr	s14, [r2]
 800dfe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dfe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfe8:	bfb8      	it	lt
 800dfea:	eef0 7a47 	vmovlt.f32	s15, s14
 800dfee:	429c      	cmp	r4, r3
 800dff0:	dceb      	bgt.n	800dfca <pool_func_mp_array_f32+0xf2>
 800dff2:	3101      	adds	r1, #1
 800dff4:	b209      	sxth	r1, r1
 800dff6:	4588      	cmp	r8, r1
 800dff8:	dcda      	bgt.n	800dfb0 <pool_func_mp_array_f32+0xd8>
 800dffa:	9b01      	ldr	r3, [sp, #4]
 800dffc:	f10e 0e01 	add.w	lr, lr, #1
 800e000:	441d      	add	r5, r3
 800e002:	9b02      	ldr	r3, [sp, #8]
 800e004:	fa0f fe8e 	sxth.w	lr, lr
 800e008:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800e00c:	45ce      	cmp	lr, r9
 800e00e:	edc5 7a00 	vstr	s15, [r5]
 800e012:	4675      	mov	r5, lr
 800e014:	dbc7      	blt.n	800dfa6 <pool_func_mp_array_f32+0xce>
 800e016:	9b07      	ldr	r3, [sp, #28]
 800e018:	9808      	ldr	r0, [sp, #32]
 800e01a:	3301      	adds	r3, #1
 800e01c:	b219      	sxth	r1, r3
 800e01e:	9b05      	ldr	r3, [sp, #20]
 800e020:	9107      	str	r1, [sp, #28]
 800e022:	461a      	mov	r2, r3
 800e024:	4402      	add	r2, r0
 800e026:	9b04      	ldr	r3, [sp, #16]
 800e028:	b292      	uxth	r2, r2
 800e02a:	9205      	str	r2, [sp, #20]
 800e02c:	9a06      	ldr	r2, [sp, #24]
 800e02e:	4403      	add	r3, r0
 800e030:	b29b      	uxth	r3, r3
 800e032:	428a      	cmp	r2, r1
 800e034:	9304      	str	r3, [sp, #16]
 800e036:	460b      	mov	r3, r1
 800e038:	dca7      	bgt.n	800df8a <pool_func_mp_array_f32+0xb2>
 800e03a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e03c:	3301      	adds	r3, #1
 800e03e:	b21a      	sxth	r2, r3
 800e040:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 800e044:	440b      	add	r3, r1
 800e046:	b29b      	uxth	r3, r3
 800e048:	930c      	str	r3, [sp, #48]	; 0x30
 800e04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e04c:	920e      	str	r2, [sp, #56]	; 0x38
 800e04e:	4293      	cmp	r3, r2
 800e050:	dc89      	bgt.n	800df66 <pool_func_mp_array_f32+0x8e>
 800e052:	b013      	add	sp, #76	; 0x4c
 800e054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e058:	3301      	adds	r3, #1
 800e05a:	b21b      	sxth	r3, r3
 800e05c:	42bb      	cmp	r3, r7
 800e05e:	dac6      	bge.n	800dfee <pool_func_mp_array_f32+0x116>
 800e060:	3301      	adds	r3, #1
 800e062:	b21b      	sxth	r3, r3
 800e064:	42bb      	cmp	r3, r7
 800e066:	dbf7      	blt.n	800e058 <pool_func_mp_array_f32+0x180>
 800e068:	e7c1      	b.n	800dfee <pool_func_mp_array_f32+0x116>
 800e06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e06c:	9a00      	ldr	r2, [sp, #0]
 800e06e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e070:	1a9a      	subs	r2, r3, r2
 800e072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e074:	3a01      	subs	r2, #1
 800e076:	3b01      	subs	r3, #1
 800e078:	fb13 2301 	smlabb	r3, r3, r1, r2
 800e07c:	041b      	lsls	r3, r3, #16
 800e07e:	f57f af59 	bpl.w	800df34 <pool_func_mp_array_f32+0x5c>
 800e082:	fb0a f309 	mul.w	r3, sl, r9
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 800e08c:	930e      	str	r3, [sp, #56]	; 0x38
 800e08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e090:	9001      	str	r0, [sp, #4]
 800e092:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800e09c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	ddd7      	ble.n	800e052 <pool_func_mp_array_f32+0x17a>
 800e0a2:	9a00      	ldr	r2, [sp, #0]
 800e0a4:	9906      	ldr	r1, [sp, #24]
 800e0a6:	fa0f f882 	sxth.w	r8, r2
 800e0aa:	2900      	cmp	r1, #0
 800e0ac:	d062      	beq.n	800e174 <pool_func_mp_array_f32+0x29c>
 800e0ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0b0:	fb01 f303 	mul.w	r3, r1, r3
 800e0b4:	1a12      	subs	r2, r2, r0
 800e0b6:	9305      	str	r3, [sp, #20]
 800e0b8:	b213      	sxth	r3, r2
 800e0ba:	9307      	str	r3, [sp, #28]
 800e0bc:	f1b9 0f00 	cmp.w	r9, #0
 800e0c0:	d058      	beq.n	800e174 <pool_func_mp_array_f32+0x29c>
 800e0c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e0c4:	fb02 f303 	mul.w	r3, r2, r3
 800e0c8:	2600      	movs	r6, #0
 800e0ca:	930c      	str	r3, [sp, #48]	; 0x30
 800e0cc:	9b04      	ldr	r3, [sp, #16]
 800e0ce:	9303      	str	r3, [sp, #12]
 800e0d0:	4637      	mov	r7, r6
 800e0d2:	46b2      	mov	sl, r6
 800e0d4:	9b05      	ldr	r3, [sp, #20]
 800e0d6:	9611      	str	r6, [sp, #68]	; 0x44
 800e0d8:	eb0a 0b03 	add.w	fp, sl, r3
 800e0dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0de:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800e0e2:	b235      	sxth	r5, r6
 800e0e4:	18eb      	adds	r3, r5, r3
 800e0e6:	f04f 0a00 	mov.w	sl, #0
 800e0ea:	fb09 f303 	mul.w	r3, r9, r3
 800e0ee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e0f0:	930a      	str	r3, [sp, #40]	; 0x28
 800e0f2:	fb09 fb0b 	mul.w	fp, r9, fp
 800e0f6:	46d6      	mov	lr, sl
 800e0f8:	9807      	ldr	r0, [sp, #28]
 800e0fa:	4580      	cmp	r8, r0
 800e0fc:	dd43      	ble.n	800e186 <pool_func_mp_array_f32+0x2ae>
 800e0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e100:	eddf 7a22 	vldr	s15, [pc, #136]	; 800e18c <pool_func_mp_array_f32+0x2b4>
 800e104:	eb0e 0403 	add.w	r4, lr, r3
 800e108:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e10a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e10e:	42a9      	cmp	r1, r5
 800e110:	dd0f      	ble.n	800e132 <pool_func_mp_array_f32+0x25a>
 800e112:	4622      	mov	r2, r4
 800e114:	462b      	mov	r3, r5
 800e116:	ed92 7a00 	vldr	s14, [r2]
 800e11a:	3301      	adds	r3, #1
 800e11c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e124:	b21b      	sxth	r3, r3
 800e126:	bfb8      	it	lt
 800e128:	eef0 7a47 	vmovlt.f32	s15, s14
 800e12c:	4299      	cmp	r1, r3
 800e12e:	4462      	add	r2, ip
 800e130:	d1f1      	bne.n	800e116 <pool_func_mp_array_f32+0x23e>
 800e132:	3001      	adds	r0, #1
 800e134:	b200      	sxth	r0, r0
 800e136:	4580      	cmp	r8, r0
 800e138:	4434      	add	r4, r6
 800e13a:	d1e8      	bne.n	800e10e <pool_func_mp_array_f32+0x236>
 800e13c:	f10a 0a01 	add.w	sl, sl, #1
 800e140:	9a02      	ldr	r2, [sp, #8]
 800e142:	eb0b 030e 	add.w	r3, fp, lr
 800e146:	fa0f fa8a 	sxth.w	sl, sl
 800e14a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e14e:	45ca      	cmp	sl, r9
 800e150:	edc3 7a00 	vstr	s15, [r3]
 800e154:	46d6      	mov	lr, sl
 800e156:	dbcf      	blt.n	800e0f8 <pool_func_mp_array_f32+0x220>
 800e158:	9b03      	ldr	r3, [sp, #12]
 800e15a:	9a08      	ldr	r2, [sp, #32]
 800e15c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800e15e:	4413      	add	r3, r2
 800e160:	b29b      	uxth	r3, r3
 800e162:	3701      	adds	r7, #1
 800e164:	9303      	str	r3, [sp, #12]
 800e166:	9b06      	ldr	r3, [sp, #24]
 800e168:	b23f      	sxth	r7, r7
 800e16a:	4416      	add	r6, r2
 800e16c:	42bb      	cmp	r3, r7
 800e16e:	b2b6      	uxth	r6, r6
 800e170:	46ba      	mov	sl, r7
 800e172:	dcaf      	bgt.n	800e0d4 <pool_func_mp_array_f32+0x1fc>
 800e174:	9b00      	ldr	r3, [sp, #0]
 800e176:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e178:	4413      	add	r3, r2
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	9300      	str	r3, [sp, #0]
 800e17e:	9b01      	ldr	r3, [sp, #4]
 800e180:	3301      	adds	r3, #1
 800e182:	9301      	str	r3, [sp, #4]
 800e184:	e788      	b.n	800e098 <pool_func_mp_array_f32+0x1c0>
 800e186:	eddf 7a01 	vldr	s15, [pc, #4]	; 800e18c <pool_func_mp_array_f32+0x2b4>
 800e18a:	e7d7      	b.n	800e13c <pool_func_mp_array_f32+0x264>
 800e18c:	cf000000 	.word	0xcf000000

0800e190 <ai_check_custom_types>:
 800e190:	4b13      	ldr	r3, [pc, #76]	; (800e1e0 <ai_check_custom_types+0x50>)
 800e192:	b082      	sub	sp, #8
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	9301      	str	r3, [sp, #4]
 800e198:	b118      	cbz	r0, 800e1a2 <ai_check_custom_types+0x12>
 800e19a:	7803      	ldrb	r3, [r0, #0]
 800e19c:	2b03      	cmp	r3, #3
 800e19e:	d002      	beq.n	800e1a6 <ai_check_custom_types+0x16>
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	b002      	add	sp, #8
 800e1a4:	4770      	bx	lr
 800e1a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d004      	beq.n	800e1b8 <ai_check_custom_types+0x28>
 800e1ae:	2001      	movs	r0, #1
 800e1b0:	f080 0001 	eor.w	r0, r0, #1
 800e1b4:	b002      	add	sp, #8
 800e1b6:	4770      	bx	lr
 800e1b8:	7842      	ldrb	r2, [r0, #1]
 800e1ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	f100 0001 	add.w	r0, r0, #1
 800e1c4:	d1f3      	bne.n	800e1ae <ai_check_custom_types+0x1e>
 800e1c6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800e1ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d1ed      	bne.n	800e1ae <ai_check_custom_types+0x1e>
 800e1d2:	7842      	ldrb	r2, [r0, #1]
 800e1d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d1e8      	bne.n	800e1ae <ai_check_custom_types+0x1e>
 800e1dc:	2000      	movs	r0, #0
 800e1de:	e7e7      	b.n	800e1b0 <ai_check_custom_types+0x20>
 800e1e0:	080116c0 	.word	0x080116c0

0800e1e4 <ai_layers_init_all>:
 800e1e4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e1e6:	b17a      	cbz	r2, 800e208 <ai_layers_init_all+0x24>
 800e1e8:	6913      	ldr	r3, [r2, #16]
 800e1ea:	60d0      	str	r0, [r2, #12]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	f04f 0201 	mov.w	r2, #1
 800e1f2:	d009      	beq.n	800e208 <ai_layers_init_all+0x24>
 800e1f4:	b143      	cbz	r3, 800e208 <ai_layers_init_all+0x24>
 800e1f6:	6919      	ldr	r1, [r3, #16]
 800e1f8:	60d8      	str	r0, [r3, #12]
 800e1fa:	4299      	cmp	r1, r3
 800e1fc:	f102 0201 	add.w	r2, r2, #1
 800e200:	d002      	beq.n	800e208 <ai_layers_init_all+0x24>
 800e202:	460b      	mov	r3, r1
 800e204:	2b00      	cmp	r3, #0
 800e206:	d1f6      	bne.n	800e1f6 <ai_layers_init_all+0x12>
 800e208:	4610      	mov	r0, r2
 800e20a:	4770      	bx	lr

0800e20c <ai_layers_post_init_all>:
 800e20c:	b538      	push	{r3, r4, r5, lr}
 800e20e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e210:	b18c      	cbz	r4, 800e236 <ai_layers_post_init_all+0x2a>
 800e212:	2500      	movs	r5, #0
 800e214:	6863      	ldr	r3, [r4, #4]
 800e216:	f013 0f01 	tst.w	r3, #1
 800e21a:	4620      	mov	r0, r4
 800e21c:	d003      	beq.n	800e226 <ai_layers_post_init_all+0x1a>
 800e21e:	6a23      	ldr	r3, [r4, #32]
 800e220:	b10b      	cbz	r3, 800e226 <ai_layers_post_init_all+0x1a>
 800e222:	4798      	blx	r3
 800e224:	3501      	adds	r5, #1
 800e226:	6923      	ldr	r3, [r4, #16]
 800e228:	42a3      	cmp	r3, r4
 800e22a:	d002      	beq.n	800e232 <ai_layers_post_init_all+0x26>
 800e22c:	461c      	mov	r4, r3
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d1f0      	bne.n	800e214 <ai_layers_post_init_all+0x8>
 800e232:	4628      	mov	r0, r5
 800e234:	bd38      	pop	{r3, r4, r5, pc}
 800e236:	4625      	mov	r5, r4
 800e238:	e7fb      	b.n	800e232 <ai_layers_post_init_all+0x26>
 800e23a:	bf00      	nop

0800e23c <ai_layers_forward_all>:
 800e23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e240:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800e242:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800e244:	4604      	mov	r4, r0
 800e246:	2f00      	cmp	r7, #0
 800e248:	d02c      	beq.n	800e2a4 <ai_layers_forward_all+0x68>
 800e24a:	2d00      	cmp	r5, #0
 800e24c:	d03f      	beq.n	800e2ce <ai_layers_forward_all+0x92>
 800e24e:	6385      	str	r5, [r0, #56]	; 0x38
 800e250:	4629      	mov	r1, r5
 800e252:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e254:	2001      	movs	r0, #1
 800e256:	47b8      	blx	r7
 800e258:	2600      	movs	r6, #0
 800e25a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e25c:	46b0      	mov	r8, r6
 800e25e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e260:	2002      	movs	r0, #2
 800e262:	47b8      	blx	r7
 800e264:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800e266:	696b      	ldr	r3, [r5, #20]
 800e268:	4628      	mov	r0, r5
 800e26a:	4798      	blx	r3
 800e26c:	692b      	ldr	r3, [r5, #16]
 800e26e:	429d      	cmp	r5, r3
 800e270:	f04f 0003 	mov.w	r0, #3
 800e274:	4619      	mov	r1, r3
 800e276:	d009      	beq.n	800e28c <ai_layers_forward_all+0x50>
 800e278:	63a3      	str	r3, [r4, #56]	; 0x38
 800e27a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e27c:	47b8      	blx	r7
 800e27e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e280:	3601      	adds	r6, #1
 800e282:	2900      	cmp	r1, #0
 800e284:	d1eb      	bne.n	800e25e <ai_layers_forward_all+0x22>
 800e286:	4630      	mov	r0, r6
 800e288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e28c:	2100      	movs	r1, #0
 800e28e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800e292:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e294:	47b8      	blx	r7
 800e296:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e298:	3601      	adds	r6, #1
 800e29a:	2900      	cmp	r1, #0
 800e29c:	d1df      	bne.n	800e25e <ai_layers_forward_all+0x22>
 800e29e:	4630      	mov	r0, r6
 800e2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a4:	b19d      	cbz	r5, 800e2ce <ai_layers_forward_all+0x92>
 800e2a6:	6385      	str	r5, [r0, #56]	; 0x38
 800e2a8:	463e      	mov	r6, r7
 800e2aa:	696b      	ldr	r3, [r5, #20]
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	4798      	blx	r3
 800e2b0:	692b      	ldr	r3, [r5, #16]
 800e2b2:	42ab      	cmp	r3, r5
 800e2b4:	f106 0601 	add.w	r6, r6, #1
 800e2b8:	d004      	beq.n	800e2c4 <ai_layers_forward_all+0x88>
 800e2ba:	63a3      	str	r3, [r4, #56]	; 0x38
 800e2bc:	461d      	mov	r5, r3
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1f3      	bne.n	800e2aa <ai_layers_forward_all+0x6e>
 800e2c2:	e7e0      	b.n	800e286 <ai_layers_forward_all+0x4a>
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	63a3      	str	r3, [r4, #56]	; 0x38
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2ce:	462e      	mov	r6, r5
 800e2d0:	4630      	mov	r0, r6
 800e2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2d6:	bf00      	nop

0800e2d8 <ai_layers_destroy_all>:
 800e2d8:	b538      	push	{r3, r4, r5, lr}
 800e2da:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e2dc:	b18c      	cbz	r4, 800e302 <ai_layers_destroy_all+0x2a>
 800e2de:	2500      	movs	r5, #0
 800e2e0:	6863      	ldr	r3, [r4, #4]
 800e2e2:	f013 0f04 	tst.w	r3, #4
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	d003      	beq.n	800e2f2 <ai_layers_destroy_all+0x1a>
 800e2ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e2ec:	b10b      	cbz	r3, 800e2f2 <ai_layers_destroy_all+0x1a>
 800e2ee:	4798      	blx	r3
 800e2f0:	3501      	adds	r5, #1
 800e2f2:	6923      	ldr	r3, [r4, #16]
 800e2f4:	42a3      	cmp	r3, r4
 800e2f6:	d002      	beq.n	800e2fe <ai_layers_destroy_all+0x26>
 800e2f8:	461c      	mov	r4, r3
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d1f0      	bne.n	800e2e0 <ai_layers_destroy_all+0x8>
 800e2fe:	4628      	mov	r0, r5
 800e300:	bd38      	pop	{r3, r4, r5, pc}
 800e302:	4625      	mov	r5, r4
 800e304:	e7fb      	b.n	800e2fe <ai_layers_destroy_all+0x26>
 800e306:	bf00      	nop

0800e308 <ai_array_to_buffer_fmt>:
 800e308:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	d029      	beq.n	800e364 <ai_array_to_buffer_fmt+0x5c>
 800e310:	4a22      	ldr	r2, [pc, #136]	; (800e39c <ai_array_to_buffer_fmt+0x94>)
 800e312:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800e316:	4293      	cmp	r3, r2
 800e318:	d010      	beq.n	800e33c <ai_array_to_buffer_fmt+0x34>
 800e31a:	dd13      	ble.n	800e344 <ai_array_to_buffer_fmt+0x3c>
 800e31c:	4a20      	ldr	r2, [pc, #128]	; (800e3a0 <ai_array_to_buffer_fmt+0x98>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d00c      	beq.n	800e33c <ai_array_to_buffer_fmt+0x34>
 800e322:	dc27      	bgt.n	800e374 <ai_array_to_buffer_fmt+0x6c>
 800e324:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800e328:	4293      	cmp	r3, r2
 800e32a:	d007      	beq.n	800e33c <ai_array_to_buffer_fmt+0x34>
 800e32c:	3207      	adds	r2, #7
 800e32e:	4293      	cmp	r3, r2
 800e330:	d004      	beq.n	800e33c <ai_array_to_buffer_fmt+0x34>
 800e332:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800e336:	4293      	cmp	r3, r2
 800e338:	d000      	beq.n	800e33c <ai_array_to_buffer_fmt+0x34>
 800e33a:	2340      	movs	r3, #64	; 0x40
 800e33c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800e340:	4318      	orrs	r0, r3
 800e342:	4770      	bx	lr
 800e344:	4a17      	ldr	r2, [pc, #92]	; (800e3a4 <ai_array_to_buffer_fmt+0x9c>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d0f8      	beq.n	800e33c <ai_array_to_buffer_fmt+0x34>
 800e34a:	dd1e      	ble.n	800e38a <ai_array_to_buffer_fmt+0x82>
 800e34c:	4a16      	ldr	r2, [pc, #88]	; (800e3a8 <ai_array_to_buffer_fmt+0xa0>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d0f4      	beq.n	800e33c <ai_array_to_buffer_fmt+0x34>
 800e352:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800e356:	4293      	cmp	r3, r2
 800e358:	d0f0      	beq.n	800e33c <ai_array_to_buffer_fmt+0x34>
 800e35a:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800e35e:	4293      	cmp	r3, r2
 800e360:	d1eb      	bne.n	800e33a <ai_array_to_buffer_fmt+0x32>
 800e362:	e7eb      	b.n	800e33c <ai_array_to_buffer_fmt+0x34>
 800e364:	4b11      	ldr	r3, [pc, #68]	; (800e3ac <ai_array_to_buffer_fmt+0xa4>)
 800e366:	4003      	ands	r3, r0
 800e368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e36c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800e370:	4318      	orrs	r0, r3
 800e372:	4770      	bx	lr
 800e374:	4a0e      	ldr	r2, [pc, #56]	; (800e3b0 <ai_array_to_buffer_fmt+0xa8>)
 800e376:	4293      	cmp	r3, r2
 800e378:	d0e0      	beq.n	800e33c <ai_array_to_buffer_fmt+0x34>
 800e37a:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800e37e:	4293      	cmp	r3, r2
 800e380:	d0dc      	beq.n	800e33c <ai_array_to_buffer_fmt+0x34>
 800e382:	4a0c      	ldr	r2, [pc, #48]	; (800e3b4 <ai_array_to_buffer_fmt+0xac>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d1d8      	bne.n	800e33a <ai_array_to_buffer_fmt+0x32>
 800e388:	e7d8      	b.n	800e33c <ai_array_to_buffer_fmt+0x34>
 800e38a:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800e38e:	4293      	cmp	r3, r2
 800e390:	d0d4      	beq.n	800e33c <ai_array_to_buffer_fmt+0x34>
 800e392:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e396:	4293      	cmp	r3, r2
 800e398:	d0d0      	beq.n	800e33c <ai_array_to_buffer_fmt+0x34>
 800e39a:	e7ce      	b.n	800e33a <ai_array_to_buffer_fmt+0x32>
 800e39c:	00060440 	.word	0x00060440
 800e3a0:	00840840 	.word	0x00840840
 800e3a4:	00040447 	.word	0x00040447
 800e3a8:	0004084f 	.word	0x0004084f
 800e3ac:	00803fff 	.word	0x00803fff
 800e3b0:	00841040 	.word	0x00841040
 800e3b4:	0084084f 	.word	0x0084084f

0800e3b8 <ai_array_get_byte_size>:
 800e3b8:	b1c1      	cbz	r1, 800e3ec <ai_array_get_byte_size+0x34>
 800e3ba:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800e3be:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800e3c2:	4413      	add	r3, r2
 800e3c4:	fb01 f103 	mul.w	r1, r1, r3
 800e3c8:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800e3cc:	3107      	adds	r1, #7
 800e3ce:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800e3d2:	f021 0107 	bic.w	r1, r1, #7
 800e3d6:	2804      	cmp	r0, #4
 800e3d8:	fa21 f102 	lsr.w	r1, r1, r2
 800e3dc:	d008      	beq.n	800e3f0 <ai_array_get_byte_size+0x38>
 800e3de:	2808      	cmp	r0, #8
 800e3e0:	d101      	bne.n	800e3e6 <ai_array_get_byte_size+0x2e>
 800e3e2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800e3e6:	3107      	adds	r1, #7
 800e3e8:	08c8      	lsrs	r0, r1, #3
 800e3ea:	4770      	bx	lr
 800e3ec:	4608      	mov	r0, r1
 800e3ee:	4770      	bx	lr
 800e3f0:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800e3f4:	3107      	adds	r1, #7
 800e3f6:	08c8      	lsrs	r0, r1, #3
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop

0800e3fc <__errno>:
 800e3fc:	4b01      	ldr	r3, [pc, #4]	; (800e404 <__errno+0x8>)
 800e3fe:	6818      	ldr	r0, [r3, #0]
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	200008c8 	.word	0x200008c8

0800e408 <std>:
 800e408:	2300      	movs	r3, #0
 800e40a:	b510      	push	{r4, lr}
 800e40c:	4604      	mov	r4, r0
 800e40e:	e9c0 3300 	strd	r3, r3, [r0]
 800e412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e416:	6083      	str	r3, [r0, #8]
 800e418:	8181      	strh	r1, [r0, #12]
 800e41a:	6643      	str	r3, [r0, #100]	; 0x64
 800e41c:	81c2      	strh	r2, [r0, #14]
 800e41e:	6183      	str	r3, [r0, #24]
 800e420:	4619      	mov	r1, r3
 800e422:	2208      	movs	r2, #8
 800e424:	305c      	adds	r0, #92	; 0x5c
 800e426:	f000 f923 	bl	800e670 <memset>
 800e42a:	4b05      	ldr	r3, [pc, #20]	; (800e440 <std+0x38>)
 800e42c:	6263      	str	r3, [r4, #36]	; 0x24
 800e42e:	4b05      	ldr	r3, [pc, #20]	; (800e444 <std+0x3c>)
 800e430:	62a3      	str	r3, [r4, #40]	; 0x28
 800e432:	4b05      	ldr	r3, [pc, #20]	; (800e448 <std+0x40>)
 800e434:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e436:	4b05      	ldr	r3, [pc, #20]	; (800e44c <std+0x44>)
 800e438:	6224      	str	r4, [r4, #32]
 800e43a:	6323      	str	r3, [r4, #48]	; 0x30
 800e43c:	bd10      	pop	{r4, pc}
 800e43e:	bf00      	nop
 800e440:	0800f325 	.word	0x0800f325
 800e444:	0800f347 	.word	0x0800f347
 800e448:	0800f37f 	.word	0x0800f37f
 800e44c:	0800f3a3 	.word	0x0800f3a3

0800e450 <_cleanup_r>:
 800e450:	4901      	ldr	r1, [pc, #4]	; (800e458 <_cleanup_r+0x8>)
 800e452:	f000 b8af 	b.w	800e5b4 <_fwalk_reent>
 800e456:	bf00      	nop
 800e458:	08010371 	.word	0x08010371

0800e45c <__sfmoreglue>:
 800e45c:	b570      	push	{r4, r5, r6, lr}
 800e45e:	2268      	movs	r2, #104	; 0x68
 800e460:	1e4d      	subs	r5, r1, #1
 800e462:	4355      	muls	r5, r2
 800e464:	460e      	mov	r6, r1
 800e466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e46a:	f000 f975 	bl	800e758 <_malloc_r>
 800e46e:	4604      	mov	r4, r0
 800e470:	b140      	cbz	r0, 800e484 <__sfmoreglue+0x28>
 800e472:	2100      	movs	r1, #0
 800e474:	e9c0 1600 	strd	r1, r6, [r0]
 800e478:	300c      	adds	r0, #12
 800e47a:	60a0      	str	r0, [r4, #8]
 800e47c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e480:	f000 f8f6 	bl	800e670 <memset>
 800e484:	4620      	mov	r0, r4
 800e486:	bd70      	pop	{r4, r5, r6, pc}

0800e488 <__sfp_lock_acquire>:
 800e488:	4801      	ldr	r0, [pc, #4]	; (800e490 <__sfp_lock_acquire+0x8>)
 800e48a:	f000 b8d8 	b.w	800e63e <__retarget_lock_acquire_recursive>
 800e48e:	bf00      	nop
 800e490:	20004821 	.word	0x20004821

0800e494 <__sfp_lock_release>:
 800e494:	4801      	ldr	r0, [pc, #4]	; (800e49c <__sfp_lock_release+0x8>)
 800e496:	f000 b8d3 	b.w	800e640 <__retarget_lock_release_recursive>
 800e49a:	bf00      	nop
 800e49c:	20004821 	.word	0x20004821

0800e4a0 <__sinit_lock_acquire>:
 800e4a0:	4801      	ldr	r0, [pc, #4]	; (800e4a8 <__sinit_lock_acquire+0x8>)
 800e4a2:	f000 b8cc 	b.w	800e63e <__retarget_lock_acquire_recursive>
 800e4a6:	bf00      	nop
 800e4a8:	20004822 	.word	0x20004822

0800e4ac <__sinit_lock_release>:
 800e4ac:	4801      	ldr	r0, [pc, #4]	; (800e4b4 <__sinit_lock_release+0x8>)
 800e4ae:	f000 b8c7 	b.w	800e640 <__retarget_lock_release_recursive>
 800e4b2:	bf00      	nop
 800e4b4:	20004822 	.word	0x20004822

0800e4b8 <__sinit>:
 800e4b8:	b510      	push	{r4, lr}
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	f7ff fff0 	bl	800e4a0 <__sinit_lock_acquire>
 800e4c0:	69a3      	ldr	r3, [r4, #24]
 800e4c2:	b11b      	cbz	r3, 800e4cc <__sinit+0x14>
 800e4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4c8:	f7ff bff0 	b.w	800e4ac <__sinit_lock_release>
 800e4cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e4d0:	6523      	str	r3, [r4, #80]	; 0x50
 800e4d2:	4b13      	ldr	r3, [pc, #76]	; (800e520 <__sinit+0x68>)
 800e4d4:	4a13      	ldr	r2, [pc, #76]	; (800e524 <__sinit+0x6c>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e4da:	42a3      	cmp	r3, r4
 800e4dc:	bf04      	itt	eq
 800e4de:	2301      	moveq	r3, #1
 800e4e0:	61a3      	streq	r3, [r4, #24]
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	f000 f820 	bl	800e528 <__sfp>
 800e4e8:	6060      	str	r0, [r4, #4]
 800e4ea:	4620      	mov	r0, r4
 800e4ec:	f000 f81c 	bl	800e528 <__sfp>
 800e4f0:	60a0      	str	r0, [r4, #8]
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	f000 f818 	bl	800e528 <__sfp>
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	60e0      	str	r0, [r4, #12]
 800e4fc:	2104      	movs	r1, #4
 800e4fe:	6860      	ldr	r0, [r4, #4]
 800e500:	f7ff ff82 	bl	800e408 <std>
 800e504:	68a0      	ldr	r0, [r4, #8]
 800e506:	2201      	movs	r2, #1
 800e508:	2109      	movs	r1, #9
 800e50a:	f7ff ff7d 	bl	800e408 <std>
 800e50e:	68e0      	ldr	r0, [r4, #12]
 800e510:	2202      	movs	r2, #2
 800e512:	2112      	movs	r1, #18
 800e514:	f7ff ff78 	bl	800e408 <std>
 800e518:	2301      	movs	r3, #1
 800e51a:	61a3      	str	r3, [r4, #24]
 800e51c:	e7d2      	b.n	800e4c4 <__sinit+0xc>
 800e51e:	bf00      	nop
 800e520:	08013520 	.word	0x08013520
 800e524:	0800e451 	.word	0x0800e451

0800e528 <__sfp>:
 800e528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e52a:	4607      	mov	r7, r0
 800e52c:	f7ff ffac 	bl	800e488 <__sfp_lock_acquire>
 800e530:	4b1e      	ldr	r3, [pc, #120]	; (800e5ac <__sfp+0x84>)
 800e532:	681e      	ldr	r6, [r3, #0]
 800e534:	69b3      	ldr	r3, [r6, #24]
 800e536:	b913      	cbnz	r3, 800e53e <__sfp+0x16>
 800e538:	4630      	mov	r0, r6
 800e53a:	f7ff ffbd 	bl	800e4b8 <__sinit>
 800e53e:	3648      	adds	r6, #72	; 0x48
 800e540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e544:	3b01      	subs	r3, #1
 800e546:	d503      	bpl.n	800e550 <__sfp+0x28>
 800e548:	6833      	ldr	r3, [r6, #0]
 800e54a:	b30b      	cbz	r3, 800e590 <__sfp+0x68>
 800e54c:	6836      	ldr	r6, [r6, #0]
 800e54e:	e7f7      	b.n	800e540 <__sfp+0x18>
 800e550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e554:	b9d5      	cbnz	r5, 800e58c <__sfp+0x64>
 800e556:	4b16      	ldr	r3, [pc, #88]	; (800e5b0 <__sfp+0x88>)
 800e558:	60e3      	str	r3, [r4, #12]
 800e55a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e55e:	6665      	str	r5, [r4, #100]	; 0x64
 800e560:	f000 f86c 	bl	800e63c <__retarget_lock_init_recursive>
 800e564:	f7ff ff96 	bl	800e494 <__sfp_lock_release>
 800e568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e56c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e570:	6025      	str	r5, [r4, #0]
 800e572:	61a5      	str	r5, [r4, #24]
 800e574:	2208      	movs	r2, #8
 800e576:	4629      	mov	r1, r5
 800e578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e57c:	f000 f878 	bl	800e670 <memset>
 800e580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e588:	4620      	mov	r0, r4
 800e58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e58c:	3468      	adds	r4, #104	; 0x68
 800e58e:	e7d9      	b.n	800e544 <__sfp+0x1c>
 800e590:	2104      	movs	r1, #4
 800e592:	4638      	mov	r0, r7
 800e594:	f7ff ff62 	bl	800e45c <__sfmoreglue>
 800e598:	4604      	mov	r4, r0
 800e59a:	6030      	str	r0, [r6, #0]
 800e59c:	2800      	cmp	r0, #0
 800e59e:	d1d5      	bne.n	800e54c <__sfp+0x24>
 800e5a0:	f7ff ff78 	bl	800e494 <__sfp_lock_release>
 800e5a4:	230c      	movs	r3, #12
 800e5a6:	603b      	str	r3, [r7, #0]
 800e5a8:	e7ee      	b.n	800e588 <__sfp+0x60>
 800e5aa:	bf00      	nop
 800e5ac:	08013520 	.word	0x08013520
 800e5b0:	ffff0001 	.word	0xffff0001

0800e5b4 <_fwalk_reent>:
 800e5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5b8:	4606      	mov	r6, r0
 800e5ba:	4688      	mov	r8, r1
 800e5bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e5c0:	2700      	movs	r7, #0
 800e5c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e5c6:	f1b9 0901 	subs.w	r9, r9, #1
 800e5ca:	d505      	bpl.n	800e5d8 <_fwalk_reent+0x24>
 800e5cc:	6824      	ldr	r4, [r4, #0]
 800e5ce:	2c00      	cmp	r4, #0
 800e5d0:	d1f7      	bne.n	800e5c2 <_fwalk_reent+0xe>
 800e5d2:	4638      	mov	r0, r7
 800e5d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5d8:	89ab      	ldrh	r3, [r5, #12]
 800e5da:	2b01      	cmp	r3, #1
 800e5dc:	d907      	bls.n	800e5ee <_fwalk_reent+0x3a>
 800e5de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	d003      	beq.n	800e5ee <_fwalk_reent+0x3a>
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	47c0      	blx	r8
 800e5ec:	4307      	orrs	r7, r0
 800e5ee:	3568      	adds	r5, #104	; 0x68
 800e5f0:	e7e9      	b.n	800e5c6 <_fwalk_reent+0x12>
	...

0800e5f4 <__libc_init_array>:
 800e5f4:	b570      	push	{r4, r5, r6, lr}
 800e5f6:	4d0d      	ldr	r5, [pc, #52]	; (800e62c <__libc_init_array+0x38>)
 800e5f8:	4c0d      	ldr	r4, [pc, #52]	; (800e630 <__libc_init_array+0x3c>)
 800e5fa:	1b64      	subs	r4, r4, r5
 800e5fc:	10a4      	asrs	r4, r4, #2
 800e5fe:	2600      	movs	r6, #0
 800e600:	42a6      	cmp	r6, r4
 800e602:	d109      	bne.n	800e618 <__libc_init_array+0x24>
 800e604:	4d0b      	ldr	r5, [pc, #44]	; (800e634 <__libc_init_array+0x40>)
 800e606:	4c0c      	ldr	r4, [pc, #48]	; (800e638 <__libc_init_array+0x44>)
 800e608:	f002 fe6c 	bl	80112e4 <_init>
 800e60c:	1b64      	subs	r4, r4, r5
 800e60e:	10a4      	asrs	r4, r4, #2
 800e610:	2600      	movs	r6, #0
 800e612:	42a6      	cmp	r6, r4
 800e614:	d105      	bne.n	800e622 <__libc_init_array+0x2e>
 800e616:	bd70      	pop	{r4, r5, r6, pc}
 800e618:	f855 3b04 	ldr.w	r3, [r5], #4
 800e61c:	4798      	blx	r3
 800e61e:	3601      	adds	r6, #1
 800e620:	e7ee      	b.n	800e600 <__libc_init_array+0xc>
 800e622:	f855 3b04 	ldr.w	r3, [r5], #4
 800e626:	4798      	blx	r3
 800e628:	3601      	adds	r6, #1
 800e62a:	e7f2      	b.n	800e612 <__libc_init_array+0x1e>
 800e62c:	080138bc 	.word	0x080138bc
 800e630:	080138bc 	.word	0x080138bc
 800e634:	080138bc 	.word	0x080138bc
 800e638:	080138c0 	.word	0x080138c0

0800e63c <__retarget_lock_init_recursive>:
 800e63c:	4770      	bx	lr

0800e63e <__retarget_lock_acquire_recursive>:
 800e63e:	4770      	bx	lr

0800e640 <__retarget_lock_release_recursive>:
 800e640:	4770      	bx	lr
	...

0800e644 <malloc>:
 800e644:	4b02      	ldr	r3, [pc, #8]	; (800e650 <malloc+0xc>)
 800e646:	4601      	mov	r1, r0
 800e648:	6818      	ldr	r0, [r3, #0]
 800e64a:	f000 b885 	b.w	800e758 <_malloc_r>
 800e64e:	bf00      	nop
 800e650:	200008c8 	.word	0x200008c8

0800e654 <memcpy>:
 800e654:	440a      	add	r2, r1
 800e656:	4291      	cmp	r1, r2
 800e658:	f100 33ff 	add.w	r3, r0, #4294967295
 800e65c:	d100      	bne.n	800e660 <memcpy+0xc>
 800e65e:	4770      	bx	lr
 800e660:	b510      	push	{r4, lr}
 800e662:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e66a:	4291      	cmp	r1, r2
 800e66c:	d1f9      	bne.n	800e662 <memcpy+0xe>
 800e66e:	bd10      	pop	{r4, pc}

0800e670 <memset>:
 800e670:	4402      	add	r2, r0
 800e672:	4603      	mov	r3, r0
 800e674:	4293      	cmp	r3, r2
 800e676:	d100      	bne.n	800e67a <memset+0xa>
 800e678:	4770      	bx	lr
 800e67a:	f803 1b01 	strb.w	r1, [r3], #1
 800e67e:	e7f9      	b.n	800e674 <memset+0x4>

0800e680 <_free_r>:
 800e680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e682:	2900      	cmp	r1, #0
 800e684:	d044      	beq.n	800e710 <_free_r+0x90>
 800e686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e68a:	9001      	str	r0, [sp, #4]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f1a1 0404 	sub.w	r4, r1, #4
 800e692:	bfb8      	it	lt
 800e694:	18e4      	addlt	r4, r4, r3
 800e696:	f001 ff23 	bl	80104e0 <__malloc_lock>
 800e69a:	4a1e      	ldr	r2, [pc, #120]	; (800e714 <_free_r+0x94>)
 800e69c:	9801      	ldr	r0, [sp, #4]
 800e69e:	6813      	ldr	r3, [r2, #0]
 800e6a0:	b933      	cbnz	r3, 800e6b0 <_free_r+0x30>
 800e6a2:	6063      	str	r3, [r4, #4]
 800e6a4:	6014      	str	r4, [r2, #0]
 800e6a6:	b003      	add	sp, #12
 800e6a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6ac:	f001 bf1e 	b.w	80104ec <__malloc_unlock>
 800e6b0:	42a3      	cmp	r3, r4
 800e6b2:	d908      	bls.n	800e6c6 <_free_r+0x46>
 800e6b4:	6825      	ldr	r5, [r4, #0]
 800e6b6:	1961      	adds	r1, r4, r5
 800e6b8:	428b      	cmp	r3, r1
 800e6ba:	bf01      	itttt	eq
 800e6bc:	6819      	ldreq	r1, [r3, #0]
 800e6be:	685b      	ldreq	r3, [r3, #4]
 800e6c0:	1949      	addeq	r1, r1, r5
 800e6c2:	6021      	streq	r1, [r4, #0]
 800e6c4:	e7ed      	b.n	800e6a2 <_free_r+0x22>
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	b10b      	cbz	r3, 800e6d0 <_free_r+0x50>
 800e6cc:	42a3      	cmp	r3, r4
 800e6ce:	d9fa      	bls.n	800e6c6 <_free_r+0x46>
 800e6d0:	6811      	ldr	r1, [r2, #0]
 800e6d2:	1855      	adds	r5, r2, r1
 800e6d4:	42a5      	cmp	r5, r4
 800e6d6:	d10b      	bne.n	800e6f0 <_free_r+0x70>
 800e6d8:	6824      	ldr	r4, [r4, #0]
 800e6da:	4421      	add	r1, r4
 800e6dc:	1854      	adds	r4, r2, r1
 800e6de:	42a3      	cmp	r3, r4
 800e6e0:	6011      	str	r1, [r2, #0]
 800e6e2:	d1e0      	bne.n	800e6a6 <_free_r+0x26>
 800e6e4:	681c      	ldr	r4, [r3, #0]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	6053      	str	r3, [r2, #4]
 800e6ea:	4421      	add	r1, r4
 800e6ec:	6011      	str	r1, [r2, #0]
 800e6ee:	e7da      	b.n	800e6a6 <_free_r+0x26>
 800e6f0:	d902      	bls.n	800e6f8 <_free_r+0x78>
 800e6f2:	230c      	movs	r3, #12
 800e6f4:	6003      	str	r3, [r0, #0]
 800e6f6:	e7d6      	b.n	800e6a6 <_free_r+0x26>
 800e6f8:	6825      	ldr	r5, [r4, #0]
 800e6fa:	1961      	adds	r1, r4, r5
 800e6fc:	428b      	cmp	r3, r1
 800e6fe:	bf04      	itt	eq
 800e700:	6819      	ldreq	r1, [r3, #0]
 800e702:	685b      	ldreq	r3, [r3, #4]
 800e704:	6063      	str	r3, [r4, #4]
 800e706:	bf04      	itt	eq
 800e708:	1949      	addeq	r1, r1, r5
 800e70a:	6021      	streq	r1, [r4, #0]
 800e70c:	6054      	str	r4, [r2, #4]
 800e70e:	e7ca      	b.n	800e6a6 <_free_r+0x26>
 800e710:	b003      	add	sp, #12
 800e712:	bd30      	pop	{r4, r5, pc}
 800e714:	20004824 	.word	0x20004824

0800e718 <sbrk_aligned>:
 800e718:	b570      	push	{r4, r5, r6, lr}
 800e71a:	4e0e      	ldr	r6, [pc, #56]	; (800e754 <sbrk_aligned+0x3c>)
 800e71c:	460c      	mov	r4, r1
 800e71e:	6831      	ldr	r1, [r6, #0]
 800e720:	4605      	mov	r5, r0
 800e722:	b911      	cbnz	r1, 800e72a <sbrk_aligned+0x12>
 800e724:	f000 fdee 	bl	800f304 <_sbrk_r>
 800e728:	6030      	str	r0, [r6, #0]
 800e72a:	4621      	mov	r1, r4
 800e72c:	4628      	mov	r0, r5
 800e72e:	f000 fde9 	bl	800f304 <_sbrk_r>
 800e732:	1c43      	adds	r3, r0, #1
 800e734:	d00a      	beq.n	800e74c <sbrk_aligned+0x34>
 800e736:	1cc4      	adds	r4, r0, #3
 800e738:	f024 0403 	bic.w	r4, r4, #3
 800e73c:	42a0      	cmp	r0, r4
 800e73e:	d007      	beq.n	800e750 <sbrk_aligned+0x38>
 800e740:	1a21      	subs	r1, r4, r0
 800e742:	4628      	mov	r0, r5
 800e744:	f000 fdde 	bl	800f304 <_sbrk_r>
 800e748:	3001      	adds	r0, #1
 800e74a:	d101      	bne.n	800e750 <sbrk_aligned+0x38>
 800e74c:	f04f 34ff 	mov.w	r4, #4294967295
 800e750:	4620      	mov	r0, r4
 800e752:	bd70      	pop	{r4, r5, r6, pc}
 800e754:	20004828 	.word	0x20004828

0800e758 <_malloc_r>:
 800e758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e75c:	1ccd      	adds	r5, r1, #3
 800e75e:	f025 0503 	bic.w	r5, r5, #3
 800e762:	3508      	adds	r5, #8
 800e764:	2d0c      	cmp	r5, #12
 800e766:	bf38      	it	cc
 800e768:	250c      	movcc	r5, #12
 800e76a:	2d00      	cmp	r5, #0
 800e76c:	4607      	mov	r7, r0
 800e76e:	db01      	blt.n	800e774 <_malloc_r+0x1c>
 800e770:	42a9      	cmp	r1, r5
 800e772:	d905      	bls.n	800e780 <_malloc_r+0x28>
 800e774:	230c      	movs	r3, #12
 800e776:	603b      	str	r3, [r7, #0]
 800e778:	2600      	movs	r6, #0
 800e77a:	4630      	mov	r0, r6
 800e77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e780:	4e2e      	ldr	r6, [pc, #184]	; (800e83c <_malloc_r+0xe4>)
 800e782:	f001 fead 	bl	80104e0 <__malloc_lock>
 800e786:	6833      	ldr	r3, [r6, #0]
 800e788:	461c      	mov	r4, r3
 800e78a:	bb34      	cbnz	r4, 800e7da <_malloc_r+0x82>
 800e78c:	4629      	mov	r1, r5
 800e78e:	4638      	mov	r0, r7
 800e790:	f7ff ffc2 	bl	800e718 <sbrk_aligned>
 800e794:	1c43      	adds	r3, r0, #1
 800e796:	4604      	mov	r4, r0
 800e798:	d14d      	bne.n	800e836 <_malloc_r+0xde>
 800e79a:	6834      	ldr	r4, [r6, #0]
 800e79c:	4626      	mov	r6, r4
 800e79e:	2e00      	cmp	r6, #0
 800e7a0:	d140      	bne.n	800e824 <_malloc_r+0xcc>
 800e7a2:	6823      	ldr	r3, [r4, #0]
 800e7a4:	4631      	mov	r1, r6
 800e7a6:	4638      	mov	r0, r7
 800e7a8:	eb04 0803 	add.w	r8, r4, r3
 800e7ac:	f000 fdaa 	bl	800f304 <_sbrk_r>
 800e7b0:	4580      	cmp	r8, r0
 800e7b2:	d13a      	bne.n	800e82a <_malloc_r+0xd2>
 800e7b4:	6821      	ldr	r1, [r4, #0]
 800e7b6:	3503      	adds	r5, #3
 800e7b8:	1a6d      	subs	r5, r5, r1
 800e7ba:	f025 0503 	bic.w	r5, r5, #3
 800e7be:	3508      	adds	r5, #8
 800e7c0:	2d0c      	cmp	r5, #12
 800e7c2:	bf38      	it	cc
 800e7c4:	250c      	movcc	r5, #12
 800e7c6:	4629      	mov	r1, r5
 800e7c8:	4638      	mov	r0, r7
 800e7ca:	f7ff ffa5 	bl	800e718 <sbrk_aligned>
 800e7ce:	3001      	adds	r0, #1
 800e7d0:	d02b      	beq.n	800e82a <_malloc_r+0xd2>
 800e7d2:	6823      	ldr	r3, [r4, #0]
 800e7d4:	442b      	add	r3, r5
 800e7d6:	6023      	str	r3, [r4, #0]
 800e7d8:	e00e      	b.n	800e7f8 <_malloc_r+0xa0>
 800e7da:	6822      	ldr	r2, [r4, #0]
 800e7dc:	1b52      	subs	r2, r2, r5
 800e7de:	d41e      	bmi.n	800e81e <_malloc_r+0xc6>
 800e7e0:	2a0b      	cmp	r2, #11
 800e7e2:	d916      	bls.n	800e812 <_malloc_r+0xba>
 800e7e4:	1961      	adds	r1, r4, r5
 800e7e6:	42a3      	cmp	r3, r4
 800e7e8:	6025      	str	r5, [r4, #0]
 800e7ea:	bf18      	it	ne
 800e7ec:	6059      	strne	r1, [r3, #4]
 800e7ee:	6863      	ldr	r3, [r4, #4]
 800e7f0:	bf08      	it	eq
 800e7f2:	6031      	streq	r1, [r6, #0]
 800e7f4:	5162      	str	r2, [r4, r5]
 800e7f6:	604b      	str	r3, [r1, #4]
 800e7f8:	4638      	mov	r0, r7
 800e7fa:	f104 060b 	add.w	r6, r4, #11
 800e7fe:	f001 fe75 	bl	80104ec <__malloc_unlock>
 800e802:	f026 0607 	bic.w	r6, r6, #7
 800e806:	1d23      	adds	r3, r4, #4
 800e808:	1af2      	subs	r2, r6, r3
 800e80a:	d0b6      	beq.n	800e77a <_malloc_r+0x22>
 800e80c:	1b9b      	subs	r3, r3, r6
 800e80e:	50a3      	str	r3, [r4, r2]
 800e810:	e7b3      	b.n	800e77a <_malloc_r+0x22>
 800e812:	6862      	ldr	r2, [r4, #4]
 800e814:	42a3      	cmp	r3, r4
 800e816:	bf0c      	ite	eq
 800e818:	6032      	streq	r2, [r6, #0]
 800e81a:	605a      	strne	r2, [r3, #4]
 800e81c:	e7ec      	b.n	800e7f8 <_malloc_r+0xa0>
 800e81e:	4623      	mov	r3, r4
 800e820:	6864      	ldr	r4, [r4, #4]
 800e822:	e7b2      	b.n	800e78a <_malloc_r+0x32>
 800e824:	4634      	mov	r4, r6
 800e826:	6876      	ldr	r6, [r6, #4]
 800e828:	e7b9      	b.n	800e79e <_malloc_r+0x46>
 800e82a:	230c      	movs	r3, #12
 800e82c:	603b      	str	r3, [r7, #0]
 800e82e:	4638      	mov	r0, r7
 800e830:	f001 fe5c 	bl	80104ec <__malloc_unlock>
 800e834:	e7a1      	b.n	800e77a <_malloc_r+0x22>
 800e836:	6025      	str	r5, [r4, #0]
 800e838:	e7de      	b.n	800e7f8 <_malloc_r+0xa0>
 800e83a:	bf00      	nop
 800e83c:	20004824 	.word	0x20004824

0800e840 <__cvt>:
 800e840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e844:	ec55 4b10 	vmov	r4, r5, d0
 800e848:	2d00      	cmp	r5, #0
 800e84a:	460e      	mov	r6, r1
 800e84c:	4619      	mov	r1, r3
 800e84e:	462b      	mov	r3, r5
 800e850:	bfbb      	ittet	lt
 800e852:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e856:	461d      	movlt	r5, r3
 800e858:	2300      	movge	r3, #0
 800e85a:	232d      	movlt	r3, #45	; 0x2d
 800e85c:	700b      	strb	r3, [r1, #0]
 800e85e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e860:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e864:	4691      	mov	r9, r2
 800e866:	f023 0820 	bic.w	r8, r3, #32
 800e86a:	bfbc      	itt	lt
 800e86c:	4622      	movlt	r2, r4
 800e86e:	4614      	movlt	r4, r2
 800e870:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e874:	d005      	beq.n	800e882 <__cvt+0x42>
 800e876:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e87a:	d100      	bne.n	800e87e <__cvt+0x3e>
 800e87c:	3601      	adds	r6, #1
 800e87e:	2102      	movs	r1, #2
 800e880:	e000      	b.n	800e884 <__cvt+0x44>
 800e882:	2103      	movs	r1, #3
 800e884:	ab03      	add	r3, sp, #12
 800e886:	9301      	str	r3, [sp, #4]
 800e888:	ab02      	add	r3, sp, #8
 800e88a:	9300      	str	r3, [sp, #0]
 800e88c:	ec45 4b10 	vmov	d0, r4, r5
 800e890:	4653      	mov	r3, sl
 800e892:	4632      	mov	r2, r6
 800e894:	f000 fef8 	bl	800f688 <_dtoa_r>
 800e898:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e89c:	4607      	mov	r7, r0
 800e89e:	d102      	bne.n	800e8a6 <__cvt+0x66>
 800e8a0:	f019 0f01 	tst.w	r9, #1
 800e8a4:	d022      	beq.n	800e8ec <__cvt+0xac>
 800e8a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e8aa:	eb07 0906 	add.w	r9, r7, r6
 800e8ae:	d110      	bne.n	800e8d2 <__cvt+0x92>
 800e8b0:	783b      	ldrb	r3, [r7, #0]
 800e8b2:	2b30      	cmp	r3, #48	; 0x30
 800e8b4:	d10a      	bne.n	800e8cc <__cvt+0x8c>
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	4629      	mov	r1, r5
 800e8be:	f7f2 f903 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8c2:	b918      	cbnz	r0, 800e8cc <__cvt+0x8c>
 800e8c4:	f1c6 0601 	rsb	r6, r6, #1
 800e8c8:	f8ca 6000 	str.w	r6, [sl]
 800e8cc:	f8da 3000 	ldr.w	r3, [sl]
 800e8d0:	4499      	add	r9, r3
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	4629      	mov	r1, r5
 800e8da:	f7f2 f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8de:	b108      	cbz	r0, 800e8e4 <__cvt+0xa4>
 800e8e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e8e4:	2230      	movs	r2, #48	; 0x30
 800e8e6:	9b03      	ldr	r3, [sp, #12]
 800e8e8:	454b      	cmp	r3, r9
 800e8ea:	d307      	bcc.n	800e8fc <__cvt+0xbc>
 800e8ec:	9b03      	ldr	r3, [sp, #12]
 800e8ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8f0:	1bdb      	subs	r3, r3, r7
 800e8f2:	4638      	mov	r0, r7
 800e8f4:	6013      	str	r3, [r2, #0]
 800e8f6:	b004      	add	sp, #16
 800e8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8fc:	1c59      	adds	r1, r3, #1
 800e8fe:	9103      	str	r1, [sp, #12]
 800e900:	701a      	strb	r2, [r3, #0]
 800e902:	e7f0      	b.n	800e8e6 <__cvt+0xa6>

0800e904 <__exponent>:
 800e904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e906:	4603      	mov	r3, r0
 800e908:	2900      	cmp	r1, #0
 800e90a:	bfb8      	it	lt
 800e90c:	4249      	neglt	r1, r1
 800e90e:	f803 2b02 	strb.w	r2, [r3], #2
 800e912:	bfb4      	ite	lt
 800e914:	222d      	movlt	r2, #45	; 0x2d
 800e916:	222b      	movge	r2, #43	; 0x2b
 800e918:	2909      	cmp	r1, #9
 800e91a:	7042      	strb	r2, [r0, #1]
 800e91c:	dd2a      	ble.n	800e974 <__exponent+0x70>
 800e91e:	f10d 0407 	add.w	r4, sp, #7
 800e922:	46a4      	mov	ip, r4
 800e924:	270a      	movs	r7, #10
 800e926:	46a6      	mov	lr, r4
 800e928:	460a      	mov	r2, r1
 800e92a:	fb91 f6f7 	sdiv	r6, r1, r7
 800e92e:	fb07 1516 	mls	r5, r7, r6, r1
 800e932:	3530      	adds	r5, #48	; 0x30
 800e934:	2a63      	cmp	r2, #99	; 0x63
 800e936:	f104 34ff 	add.w	r4, r4, #4294967295
 800e93a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e93e:	4631      	mov	r1, r6
 800e940:	dcf1      	bgt.n	800e926 <__exponent+0x22>
 800e942:	3130      	adds	r1, #48	; 0x30
 800e944:	f1ae 0502 	sub.w	r5, lr, #2
 800e948:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e94c:	1c44      	adds	r4, r0, #1
 800e94e:	4629      	mov	r1, r5
 800e950:	4561      	cmp	r1, ip
 800e952:	d30a      	bcc.n	800e96a <__exponent+0x66>
 800e954:	f10d 0209 	add.w	r2, sp, #9
 800e958:	eba2 020e 	sub.w	r2, r2, lr
 800e95c:	4565      	cmp	r5, ip
 800e95e:	bf88      	it	hi
 800e960:	2200      	movhi	r2, #0
 800e962:	4413      	add	r3, r2
 800e964:	1a18      	subs	r0, r3, r0
 800e966:	b003      	add	sp, #12
 800e968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e96a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e96e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e972:	e7ed      	b.n	800e950 <__exponent+0x4c>
 800e974:	2330      	movs	r3, #48	; 0x30
 800e976:	3130      	adds	r1, #48	; 0x30
 800e978:	7083      	strb	r3, [r0, #2]
 800e97a:	70c1      	strb	r1, [r0, #3]
 800e97c:	1d03      	adds	r3, r0, #4
 800e97e:	e7f1      	b.n	800e964 <__exponent+0x60>

0800e980 <_printf_float>:
 800e980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e984:	ed2d 8b02 	vpush	{d8}
 800e988:	b08d      	sub	sp, #52	; 0x34
 800e98a:	460c      	mov	r4, r1
 800e98c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e990:	4616      	mov	r6, r2
 800e992:	461f      	mov	r7, r3
 800e994:	4605      	mov	r5, r0
 800e996:	f001 fd27 	bl	80103e8 <_localeconv_r>
 800e99a:	f8d0 a000 	ldr.w	sl, [r0]
 800e99e:	4650      	mov	r0, sl
 800e9a0:	f7f1 fc16 	bl	80001d0 <strlen>
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	930a      	str	r3, [sp, #40]	; 0x28
 800e9a8:	6823      	ldr	r3, [r4, #0]
 800e9aa:	9305      	str	r3, [sp, #20]
 800e9ac:	f8d8 3000 	ldr.w	r3, [r8]
 800e9b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e9b4:	3307      	adds	r3, #7
 800e9b6:	f023 0307 	bic.w	r3, r3, #7
 800e9ba:	f103 0208 	add.w	r2, r3, #8
 800e9be:	f8c8 2000 	str.w	r2, [r8]
 800e9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e9ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e9ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e9d2:	9307      	str	r3, [sp, #28]
 800e9d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800e9d8:	ee08 0a10 	vmov	s16, r0
 800e9dc:	4b9f      	ldr	r3, [pc, #636]	; (800ec5c <_printf_float+0x2dc>)
 800e9de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e9e6:	f7f2 f8a1 	bl	8000b2c <__aeabi_dcmpun>
 800e9ea:	bb88      	cbnz	r0, 800ea50 <_printf_float+0xd0>
 800e9ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9f0:	4b9a      	ldr	r3, [pc, #616]	; (800ec5c <_printf_float+0x2dc>)
 800e9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e9f6:	f7f2 f87b 	bl	8000af0 <__aeabi_dcmple>
 800e9fa:	bb48      	cbnz	r0, 800ea50 <_printf_float+0xd0>
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	2300      	movs	r3, #0
 800ea00:	4640      	mov	r0, r8
 800ea02:	4649      	mov	r1, r9
 800ea04:	f7f2 f86a 	bl	8000adc <__aeabi_dcmplt>
 800ea08:	b110      	cbz	r0, 800ea10 <_printf_float+0x90>
 800ea0a:	232d      	movs	r3, #45	; 0x2d
 800ea0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea10:	4b93      	ldr	r3, [pc, #588]	; (800ec60 <_printf_float+0x2e0>)
 800ea12:	4894      	ldr	r0, [pc, #592]	; (800ec64 <_printf_float+0x2e4>)
 800ea14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ea18:	bf94      	ite	ls
 800ea1a:	4698      	movls	r8, r3
 800ea1c:	4680      	movhi	r8, r0
 800ea1e:	2303      	movs	r3, #3
 800ea20:	6123      	str	r3, [r4, #16]
 800ea22:	9b05      	ldr	r3, [sp, #20]
 800ea24:	f023 0204 	bic.w	r2, r3, #4
 800ea28:	6022      	str	r2, [r4, #0]
 800ea2a:	f04f 0900 	mov.w	r9, #0
 800ea2e:	9700      	str	r7, [sp, #0]
 800ea30:	4633      	mov	r3, r6
 800ea32:	aa0b      	add	r2, sp, #44	; 0x2c
 800ea34:	4621      	mov	r1, r4
 800ea36:	4628      	mov	r0, r5
 800ea38:	f000 f9d8 	bl	800edec <_printf_common>
 800ea3c:	3001      	adds	r0, #1
 800ea3e:	f040 8090 	bne.w	800eb62 <_printf_float+0x1e2>
 800ea42:	f04f 30ff 	mov.w	r0, #4294967295
 800ea46:	b00d      	add	sp, #52	; 0x34
 800ea48:	ecbd 8b02 	vpop	{d8}
 800ea4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea50:	4642      	mov	r2, r8
 800ea52:	464b      	mov	r3, r9
 800ea54:	4640      	mov	r0, r8
 800ea56:	4649      	mov	r1, r9
 800ea58:	f7f2 f868 	bl	8000b2c <__aeabi_dcmpun>
 800ea5c:	b140      	cbz	r0, 800ea70 <_printf_float+0xf0>
 800ea5e:	464b      	mov	r3, r9
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	bfbc      	itt	lt
 800ea64:	232d      	movlt	r3, #45	; 0x2d
 800ea66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ea6a:	487f      	ldr	r0, [pc, #508]	; (800ec68 <_printf_float+0x2e8>)
 800ea6c:	4b7f      	ldr	r3, [pc, #508]	; (800ec6c <_printf_float+0x2ec>)
 800ea6e:	e7d1      	b.n	800ea14 <_printf_float+0x94>
 800ea70:	6863      	ldr	r3, [r4, #4]
 800ea72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ea76:	9206      	str	r2, [sp, #24]
 800ea78:	1c5a      	adds	r2, r3, #1
 800ea7a:	d13f      	bne.n	800eafc <_printf_float+0x17c>
 800ea7c:	2306      	movs	r3, #6
 800ea7e:	6063      	str	r3, [r4, #4]
 800ea80:	9b05      	ldr	r3, [sp, #20]
 800ea82:	6861      	ldr	r1, [r4, #4]
 800ea84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ea88:	2300      	movs	r3, #0
 800ea8a:	9303      	str	r3, [sp, #12]
 800ea8c:	ab0a      	add	r3, sp, #40	; 0x28
 800ea8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ea92:	ab09      	add	r3, sp, #36	; 0x24
 800ea94:	ec49 8b10 	vmov	d0, r8, r9
 800ea98:	9300      	str	r3, [sp, #0]
 800ea9a:	6022      	str	r2, [r4, #0]
 800ea9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	f7ff fecd 	bl	800e840 <__cvt>
 800eaa6:	9b06      	ldr	r3, [sp, #24]
 800eaa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eaaa:	2b47      	cmp	r3, #71	; 0x47
 800eaac:	4680      	mov	r8, r0
 800eaae:	d108      	bne.n	800eac2 <_printf_float+0x142>
 800eab0:	1cc8      	adds	r0, r1, #3
 800eab2:	db02      	blt.n	800eaba <_printf_float+0x13a>
 800eab4:	6863      	ldr	r3, [r4, #4]
 800eab6:	4299      	cmp	r1, r3
 800eab8:	dd41      	ble.n	800eb3e <_printf_float+0x1be>
 800eaba:	f1ab 0b02 	sub.w	fp, fp, #2
 800eabe:	fa5f fb8b 	uxtb.w	fp, fp
 800eac2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eac6:	d820      	bhi.n	800eb0a <_printf_float+0x18a>
 800eac8:	3901      	subs	r1, #1
 800eaca:	465a      	mov	r2, fp
 800eacc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ead0:	9109      	str	r1, [sp, #36]	; 0x24
 800ead2:	f7ff ff17 	bl	800e904 <__exponent>
 800ead6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ead8:	1813      	adds	r3, r2, r0
 800eada:	2a01      	cmp	r2, #1
 800eadc:	4681      	mov	r9, r0
 800eade:	6123      	str	r3, [r4, #16]
 800eae0:	dc02      	bgt.n	800eae8 <_printf_float+0x168>
 800eae2:	6822      	ldr	r2, [r4, #0]
 800eae4:	07d2      	lsls	r2, r2, #31
 800eae6:	d501      	bpl.n	800eaec <_printf_float+0x16c>
 800eae8:	3301      	adds	r3, #1
 800eaea:	6123      	str	r3, [r4, #16]
 800eaec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d09c      	beq.n	800ea2e <_printf_float+0xae>
 800eaf4:	232d      	movs	r3, #45	; 0x2d
 800eaf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eafa:	e798      	b.n	800ea2e <_printf_float+0xae>
 800eafc:	9a06      	ldr	r2, [sp, #24]
 800eafe:	2a47      	cmp	r2, #71	; 0x47
 800eb00:	d1be      	bne.n	800ea80 <_printf_float+0x100>
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1bc      	bne.n	800ea80 <_printf_float+0x100>
 800eb06:	2301      	movs	r3, #1
 800eb08:	e7b9      	b.n	800ea7e <_printf_float+0xfe>
 800eb0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800eb0e:	d118      	bne.n	800eb42 <_printf_float+0x1c2>
 800eb10:	2900      	cmp	r1, #0
 800eb12:	6863      	ldr	r3, [r4, #4]
 800eb14:	dd0b      	ble.n	800eb2e <_printf_float+0x1ae>
 800eb16:	6121      	str	r1, [r4, #16]
 800eb18:	b913      	cbnz	r3, 800eb20 <_printf_float+0x1a0>
 800eb1a:	6822      	ldr	r2, [r4, #0]
 800eb1c:	07d0      	lsls	r0, r2, #31
 800eb1e:	d502      	bpl.n	800eb26 <_printf_float+0x1a6>
 800eb20:	3301      	adds	r3, #1
 800eb22:	440b      	add	r3, r1
 800eb24:	6123      	str	r3, [r4, #16]
 800eb26:	65a1      	str	r1, [r4, #88]	; 0x58
 800eb28:	f04f 0900 	mov.w	r9, #0
 800eb2c:	e7de      	b.n	800eaec <_printf_float+0x16c>
 800eb2e:	b913      	cbnz	r3, 800eb36 <_printf_float+0x1b6>
 800eb30:	6822      	ldr	r2, [r4, #0]
 800eb32:	07d2      	lsls	r2, r2, #31
 800eb34:	d501      	bpl.n	800eb3a <_printf_float+0x1ba>
 800eb36:	3302      	adds	r3, #2
 800eb38:	e7f4      	b.n	800eb24 <_printf_float+0x1a4>
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	e7f2      	b.n	800eb24 <_printf_float+0x1a4>
 800eb3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800eb42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb44:	4299      	cmp	r1, r3
 800eb46:	db05      	blt.n	800eb54 <_printf_float+0x1d4>
 800eb48:	6823      	ldr	r3, [r4, #0]
 800eb4a:	6121      	str	r1, [r4, #16]
 800eb4c:	07d8      	lsls	r0, r3, #31
 800eb4e:	d5ea      	bpl.n	800eb26 <_printf_float+0x1a6>
 800eb50:	1c4b      	adds	r3, r1, #1
 800eb52:	e7e7      	b.n	800eb24 <_printf_float+0x1a4>
 800eb54:	2900      	cmp	r1, #0
 800eb56:	bfd4      	ite	le
 800eb58:	f1c1 0202 	rsble	r2, r1, #2
 800eb5c:	2201      	movgt	r2, #1
 800eb5e:	4413      	add	r3, r2
 800eb60:	e7e0      	b.n	800eb24 <_printf_float+0x1a4>
 800eb62:	6823      	ldr	r3, [r4, #0]
 800eb64:	055a      	lsls	r2, r3, #21
 800eb66:	d407      	bmi.n	800eb78 <_printf_float+0x1f8>
 800eb68:	6923      	ldr	r3, [r4, #16]
 800eb6a:	4642      	mov	r2, r8
 800eb6c:	4631      	mov	r1, r6
 800eb6e:	4628      	mov	r0, r5
 800eb70:	47b8      	blx	r7
 800eb72:	3001      	adds	r0, #1
 800eb74:	d12c      	bne.n	800ebd0 <_printf_float+0x250>
 800eb76:	e764      	b.n	800ea42 <_printf_float+0xc2>
 800eb78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eb7c:	f240 80e0 	bls.w	800ed40 <_printf_float+0x3c0>
 800eb80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb84:	2200      	movs	r2, #0
 800eb86:	2300      	movs	r3, #0
 800eb88:	f7f1 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	d034      	beq.n	800ebfa <_printf_float+0x27a>
 800eb90:	4a37      	ldr	r2, [pc, #220]	; (800ec70 <_printf_float+0x2f0>)
 800eb92:	2301      	movs	r3, #1
 800eb94:	4631      	mov	r1, r6
 800eb96:	4628      	mov	r0, r5
 800eb98:	47b8      	blx	r7
 800eb9a:	3001      	adds	r0, #1
 800eb9c:	f43f af51 	beq.w	800ea42 <_printf_float+0xc2>
 800eba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eba4:	429a      	cmp	r2, r3
 800eba6:	db02      	blt.n	800ebae <_printf_float+0x22e>
 800eba8:	6823      	ldr	r3, [r4, #0]
 800ebaa:	07d8      	lsls	r0, r3, #31
 800ebac:	d510      	bpl.n	800ebd0 <_printf_float+0x250>
 800ebae:	ee18 3a10 	vmov	r3, s16
 800ebb2:	4652      	mov	r2, sl
 800ebb4:	4631      	mov	r1, r6
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	47b8      	blx	r7
 800ebba:	3001      	adds	r0, #1
 800ebbc:	f43f af41 	beq.w	800ea42 <_printf_float+0xc2>
 800ebc0:	f04f 0800 	mov.w	r8, #0
 800ebc4:	f104 091a 	add.w	r9, r4, #26
 800ebc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	4543      	cmp	r3, r8
 800ebce:	dc09      	bgt.n	800ebe4 <_printf_float+0x264>
 800ebd0:	6823      	ldr	r3, [r4, #0]
 800ebd2:	079b      	lsls	r3, r3, #30
 800ebd4:	f100 8105 	bmi.w	800ede2 <_printf_float+0x462>
 800ebd8:	68e0      	ldr	r0, [r4, #12]
 800ebda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebdc:	4298      	cmp	r0, r3
 800ebde:	bfb8      	it	lt
 800ebe0:	4618      	movlt	r0, r3
 800ebe2:	e730      	b.n	800ea46 <_printf_float+0xc6>
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	464a      	mov	r2, r9
 800ebe8:	4631      	mov	r1, r6
 800ebea:	4628      	mov	r0, r5
 800ebec:	47b8      	blx	r7
 800ebee:	3001      	adds	r0, #1
 800ebf0:	f43f af27 	beq.w	800ea42 <_printf_float+0xc2>
 800ebf4:	f108 0801 	add.w	r8, r8, #1
 800ebf8:	e7e6      	b.n	800ebc8 <_printf_float+0x248>
 800ebfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	dc39      	bgt.n	800ec74 <_printf_float+0x2f4>
 800ec00:	4a1b      	ldr	r2, [pc, #108]	; (800ec70 <_printf_float+0x2f0>)
 800ec02:	2301      	movs	r3, #1
 800ec04:	4631      	mov	r1, r6
 800ec06:	4628      	mov	r0, r5
 800ec08:	47b8      	blx	r7
 800ec0a:	3001      	adds	r0, #1
 800ec0c:	f43f af19 	beq.w	800ea42 <_printf_float+0xc2>
 800ec10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec14:	4313      	orrs	r3, r2
 800ec16:	d102      	bne.n	800ec1e <_printf_float+0x29e>
 800ec18:	6823      	ldr	r3, [r4, #0]
 800ec1a:	07d9      	lsls	r1, r3, #31
 800ec1c:	d5d8      	bpl.n	800ebd0 <_printf_float+0x250>
 800ec1e:	ee18 3a10 	vmov	r3, s16
 800ec22:	4652      	mov	r2, sl
 800ec24:	4631      	mov	r1, r6
 800ec26:	4628      	mov	r0, r5
 800ec28:	47b8      	blx	r7
 800ec2a:	3001      	adds	r0, #1
 800ec2c:	f43f af09 	beq.w	800ea42 <_printf_float+0xc2>
 800ec30:	f04f 0900 	mov.w	r9, #0
 800ec34:	f104 0a1a 	add.w	sl, r4, #26
 800ec38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec3a:	425b      	negs	r3, r3
 800ec3c:	454b      	cmp	r3, r9
 800ec3e:	dc01      	bgt.n	800ec44 <_printf_float+0x2c4>
 800ec40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec42:	e792      	b.n	800eb6a <_printf_float+0x1ea>
 800ec44:	2301      	movs	r3, #1
 800ec46:	4652      	mov	r2, sl
 800ec48:	4631      	mov	r1, r6
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	47b8      	blx	r7
 800ec4e:	3001      	adds	r0, #1
 800ec50:	f43f aef7 	beq.w	800ea42 <_printf_float+0xc2>
 800ec54:	f109 0901 	add.w	r9, r9, #1
 800ec58:	e7ee      	b.n	800ec38 <_printf_float+0x2b8>
 800ec5a:	bf00      	nop
 800ec5c:	7fefffff 	.word	0x7fefffff
 800ec60:	08013524 	.word	0x08013524
 800ec64:	08013528 	.word	0x08013528
 800ec68:	08013530 	.word	0x08013530
 800ec6c:	0801352c 	.word	0x0801352c
 800ec70:	08013534 	.word	0x08013534
 800ec74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	bfa8      	it	ge
 800ec7c:	461a      	movge	r2, r3
 800ec7e:	2a00      	cmp	r2, #0
 800ec80:	4691      	mov	r9, r2
 800ec82:	dc37      	bgt.n	800ecf4 <_printf_float+0x374>
 800ec84:	f04f 0b00 	mov.w	fp, #0
 800ec88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec8c:	f104 021a 	add.w	r2, r4, #26
 800ec90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec92:	9305      	str	r3, [sp, #20]
 800ec94:	eba3 0309 	sub.w	r3, r3, r9
 800ec98:	455b      	cmp	r3, fp
 800ec9a:	dc33      	bgt.n	800ed04 <_printf_float+0x384>
 800ec9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eca0:	429a      	cmp	r2, r3
 800eca2:	db3b      	blt.n	800ed1c <_printf_float+0x39c>
 800eca4:	6823      	ldr	r3, [r4, #0]
 800eca6:	07da      	lsls	r2, r3, #31
 800eca8:	d438      	bmi.n	800ed1c <_printf_float+0x39c>
 800ecaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecac:	9a05      	ldr	r2, [sp, #20]
 800ecae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ecb0:	1a9a      	subs	r2, r3, r2
 800ecb2:	eba3 0901 	sub.w	r9, r3, r1
 800ecb6:	4591      	cmp	r9, r2
 800ecb8:	bfa8      	it	ge
 800ecba:	4691      	movge	r9, r2
 800ecbc:	f1b9 0f00 	cmp.w	r9, #0
 800ecc0:	dc35      	bgt.n	800ed2e <_printf_float+0x3ae>
 800ecc2:	f04f 0800 	mov.w	r8, #0
 800ecc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ecca:	f104 0a1a 	add.w	sl, r4, #26
 800ecce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecd2:	1a9b      	subs	r3, r3, r2
 800ecd4:	eba3 0309 	sub.w	r3, r3, r9
 800ecd8:	4543      	cmp	r3, r8
 800ecda:	f77f af79 	ble.w	800ebd0 <_printf_float+0x250>
 800ecde:	2301      	movs	r3, #1
 800ece0:	4652      	mov	r2, sl
 800ece2:	4631      	mov	r1, r6
 800ece4:	4628      	mov	r0, r5
 800ece6:	47b8      	blx	r7
 800ece8:	3001      	adds	r0, #1
 800ecea:	f43f aeaa 	beq.w	800ea42 <_printf_float+0xc2>
 800ecee:	f108 0801 	add.w	r8, r8, #1
 800ecf2:	e7ec      	b.n	800ecce <_printf_float+0x34e>
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	4631      	mov	r1, r6
 800ecf8:	4642      	mov	r2, r8
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	47b8      	blx	r7
 800ecfe:	3001      	adds	r0, #1
 800ed00:	d1c0      	bne.n	800ec84 <_printf_float+0x304>
 800ed02:	e69e      	b.n	800ea42 <_printf_float+0xc2>
 800ed04:	2301      	movs	r3, #1
 800ed06:	4631      	mov	r1, r6
 800ed08:	4628      	mov	r0, r5
 800ed0a:	9205      	str	r2, [sp, #20]
 800ed0c:	47b8      	blx	r7
 800ed0e:	3001      	adds	r0, #1
 800ed10:	f43f ae97 	beq.w	800ea42 <_printf_float+0xc2>
 800ed14:	9a05      	ldr	r2, [sp, #20]
 800ed16:	f10b 0b01 	add.w	fp, fp, #1
 800ed1a:	e7b9      	b.n	800ec90 <_printf_float+0x310>
 800ed1c:	ee18 3a10 	vmov	r3, s16
 800ed20:	4652      	mov	r2, sl
 800ed22:	4631      	mov	r1, r6
 800ed24:	4628      	mov	r0, r5
 800ed26:	47b8      	blx	r7
 800ed28:	3001      	adds	r0, #1
 800ed2a:	d1be      	bne.n	800ecaa <_printf_float+0x32a>
 800ed2c:	e689      	b.n	800ea42 <_printf_float+0xc2>
 800ed2e:	9a05      	ldr	r2, [sp, #20]
 800ed30:	464b      	mov	r3, r9
 800ed32:	4442      	add	r2, r8
 800ed34:	4631      	mov	r1, r6
 800ed36:	4628      	mov	r0, r5
 800ed38:	47b8      	blx	r7
 800ed3a:	3001      	adds	r0, #1
 800ed3c:	d1c1      	bne.n	800ecc2 <_printf_float+0x342>
 800ed3e:	e680      	b.n	800ea42 <_printf_float+0xc2>
 800ed40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed42:	2a01      	cmp	r2, #1
 800ed44:	dc01      	bgt.n	800ed4a <_printf_float+0x3ca>
 800ed46:	07db      	lsls	r3, r3, #31
 800ed48:	d538      	bpl.n	800edbc <_printf_float+0x43c>
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	4642      	mov	r2, r8
 800ed4e:	4631      	mov	r1, r6
 800ed50:	4628      	mov	r0, r5
 800ed52:	47b8      	blx	r7
 800ed54:	3001      	adds	r0, #1
 800ed56:	f43f ae74 	beq.w	800ea42 <_printf_float+0xc2>
 800ed5a:	ee18 3a10 	vmov	r3, s16
 800ed5e:	4652      	mov	r2, sl
 800ed60:	4631      	mov	r1, r6
 800ed62:	4628      	mov	r0, r5
 800ed64:	47b8      	blx	r7
 800ed66:	3001      	adds	r0, #1
 800ed68:	f43f ae6b 	beq.w	800ea42 <_printf_float+0xc2>
 800ed6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ed70:	2200      	movs	r2, #0
 800ed72:	2300      	movs	r3, #0
 800ed74:	f7f1 fea8 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed78:	b9d8      	cbnz	r0, 800edb2 <_printf_float+0x432>
 800ed7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed7c:	f108 0201 	add.w	r2, r8, #1
 800ed80:	3b01      	subs	r3, #1
 800ed82:	4631      	mov	r1, r6
 800ed84:	4628      	mov	r0, r5
 800ed86:	47b8      	blx	r7
 800ed88:	3001      	adds	r0, #1
 800ed8a:	d10e      	bne.n	800edaa <_printf_float+0x42a>
 800ed8c:	e659      	b.n	800ea42 <_printf_float+0xc2>
 800ed8e:	2301      	movs	r3, #1
 800ed90:	4652      	mov	r2, sl
 800ed92:	4631      	mov	r1, r6
 800ed94:	4628      	mov	r0, r5
 800ed96:	47b8      	blx	r7
 800ed98:	3001      	adds	r0, #1
 800ed9a:	f43f ae52 	beq.w	800ea42 <_printf_float+0xc2>
 800ed9e:	f108 0801 	add.w	r8, r8, #1
 800eda2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eda4:	3b01      	subs	r3, #1
 800eda6:	4543      	cmp	r3, r8
 800eda8:	dcf1      	bgt.n	800ed8e <_printf_float+0x40e>
 800edaa:	464b      	mov	r3, r9
 800edac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800edb0:	e6dc      	b.n	800eb6c <_printf_float+0x1ec>
 800edb2:	f04f 0800 	mov.w	r8, #0
 800edb6:	f104 0a1a 	add.w	sl, r4, #26
 800edba:	e7f2      	b.n	800eda2 <_printf_float+0x422>
 800edbc:	2301      	movs	r3, #1
 800edbe:	4642      	mov	r2, r8
 800edc0:	e7df      	b.n	800ed82 <_printf_float+0x402>
 800edc2:	2301      	movs	r3, #1
 800edc4:	464a      	mov	r2, r9
 800edc6:	4631      	mov	r1, r6
 800edc8:	4628      	mov	r0, r5
 800edca:	47b8      	blx	r7
 800edcc:	3001      	adds	r0, #1
 800edce:	f43f ae38 	beq.w	800ea42 <_printf_float+0xc2>
 800edd2:	f108 0801 	add.w	r8, r8, #1
 800edd6:	68e3      	ldr	r3, [r4, #12]
 800edd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800edda:	1a5b      	subs	r3, r3, r1
 800eddc:	4543      	cmp	r3, r8
 800edde:	dcf0      	bgt.n	800edc2 <_printf_float+0x442>
 800ede0:	e6fa      	b.n	800ebd8 <_printf_float+0x258>
 800ede2:	f04f 0800 	mov.w	r8, #0
 800ede6:	f104 0919 	add.w	r9, r4, #25
 800edea:	e7f4      	b.n	800edd6 <_printf_float+0x456>

0800edec <_printf_common>:
 800edec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edf0:	4616      	mov	r6, r2
 800edf2:	4699      	mov	r9, r3
 800edf4:	688a      	ldr	r2, [r1, #8]
 800edf6:	690b      	ldr	r3, [r1, #16]
 800edf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800edfc:	4293      	cmp	r3, r2
 800edfe:	bfb8      	it	lt
 800ee00:	4613      	movlt	r3, r2
 800ee02:	6033      	str	r3, [r6, #0]
 800ee04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee08:	4607      	mov	r7, r0
 800ee0a:	460c      	mov	r4, r1
 800ee0c:	b10a      	cbz	r2, 800ee12 <_printf_common+0x26>
 800ee0e:	3301      	adds	r3, #1
 800ee10:	6033      	str	r3, [r6, #0]
 800ee12:	6823      	ldr	r3, [r4, #0]
 800ee14:	0699      	lsls	r1, r3, #26
 800ee16:	bf42      	ittt	mi
 800ee18:	6833      	ldrmi	r3, [r6, #0]
 800ee1a:	3302      	addmi	r3, #2
 800ee1c:	6033      	strmi	r3, [r6, #0]
 800ee1e:	6825      	ldr	r5, [r4, #0]
 800ee20:	f015 0506 	ands.w	r5, r5, #6
 800ee24:	d106      	bne.n	800ee34 <_printf_common+0x48>
 800ee26:	f104 0a19 	add.w	sl, r4, #25
 800ee2a:	68e3      	ldr	r3, [r4, #12]
 800ee2c:	6832      	ldr	r2, [r6, #0]
 800ee2e:	1a9b      	subs	r3, r3, r2
 800ee30:	42ab      	cmp	r3, r5
 800ee32:	dc26      	bgt.n	800ee82 <_printf_common+0x96>
 800ee34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee38:	1e13      	subs	r3, r2, #0
 800ee3a:	6822      	ldr	r2, [r4, #0]
 800ee3c:	bf18      	it	ne
 800ee3e:	2301      	movne	r3, #1
 800ee40:	0692      	lsls	r2, r2, #26
 800ee42:	d42b      	bmi.n	800ee9c <_printf_common+0xb0>
 800ee44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee48:	4649      	mov	r1, r9
 800ee4a:	4638      	mov	r0, r7
 800ee4c:	47c0      	blx	r8
 800ee4e:	3001      	adds	r0, #1
 800ee50:	d01e      	beq.n	800ee90 <_printf_common+0xa4>
 800ee52:	6823      	ldr	r3, [r4, #0]
 800ee54:	68e5      	ldr	r5, [r4, #12]
 800ee56:	6832      	ldr	r2, [r6, #0]
 800ee58:	f003 0306 	and.w	r3, r3, #6
 800ee5c:	2b04      	cmp	r3, #4
 800ee5e:	bf08      	it	eq
 800ee60:	1aad      	subeq	r5, r5, r2
 800ee62:	68a3      	ldr	r3, [r4, #8]
 800ee64:	6922      	ldr	r2, [r4, #16]
 800ee66:	bf0c      	ite	eq
 800ee68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee6c:	2500      	movne	r5, #0
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	bfc4      	itt	gt
 800ee72:	1a9b      	subgt	r3, r3, r2
 800ee74:	18ed      	addgt	r5, r5, r3
 800ee76:	2600      	movs	r6, #0
 800ee78:	341a      	adds	r4, #26
 800ee7a:	42b5      	cmp	r5, r6
 800ee7c:	d11a      	bne.n	800eeb4 <_printf_common+0xc8>
 800ee7e:	2000      	movs	r0, #0
 800ee80:	e008      	b.n	800ee94 <_printf_common+0xa8>
 800ee82:	2301      	movs	r3, #1
 800ee84:	4652      	mov	r2, sl
 800ee86:	4649      	mov	r1, r9
 800ee88:	4638      	mov	r0, r7
 800ee8a:	47c0      	blx	r8
 800ee8c:	3001      	adds	r0, #1
 800ee8e:	d103      	bne.n	800ee98 <_printf_common+0xac>
 800ee90:	f04f 30ff 	mov.w	r0, #4294967295
 800ee94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee98:	3501      	adds	r5, #1
 800ee9a:	e7c6      	b.n	800ee2a <_printf_common+0x3e>
 800ee9c:	18e1      	adds	r1, r4, r3
 800ee9e:	1c5a      	adds	r2, r3, #1
 800eea0:	2030      	movs	r0, #48	; 0x30
 800eea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eea6:	4422      	add	r2, r4
 800eea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eeac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eeb0:	3302      	adds	r3, #2
 800eeb2:	e7c7      	b.n	800ee44 <_printf_common+0x58>
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	4622      	mov	r2, r4
 800eeb8:	4649      	mov	r1, r9
 800eeba:	4638      	mov	r0, r7
 800eebc:	47c0      	blx	r8
 800eebe:	3001      	adds	r0, #1
 800eec0:	d0e6      	beq.n	800ee90 <_printf_common+0xa4>
 800eec2:	3601      	adds	r6, #1
 800eec4:	e7d9      	b.n	800ee7a <_printf_common+0x8e>
	...

0800eec8 <_printf_i>:
 800eec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eecc:	7e0f      	ldrb	r7, [r1, #24]
 800eece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eed0:	2f78      	cmp	r7, #120	; 0x78
 800eed2:	4691      	mov	r9, r2
 800eed4:	4680      	mov	r8, r0
 800eed6:	460c      	mov	r4, r1
 800eed8:	469a      	mov	sl, r3
 800eeda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eede:	d807      	bhi.n	800eef0 <_printf_i+0x28>
 800eee0:	2f62      	cmp	r7, #98	; 0x62
 800eee2:	d80a      	bhi.n	800eefa <_printf_i+0x32>
 800eee4:	2f00      	cmp	r7, #0
 800eee6:	f000 80d8 	beq.w	800f09a <_printf_i+0x1d2>
 800eeea:	2f58      	cmp	r7, #88	; 0x58
 800eeec:	f000 80a3 	beq.w	800f036 <_printf_i+0x16e>
 800eef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eef8:	e03a      	b.n	800ef70 <_printf_i+0xa8>
 800eefa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eefe:	2b15      	cmp	r3, #21
 800ef00:	d8f6      	bhi.n	800eef0 <_printf_i+0x28>
 800ef02:	a101      	add	r1, pc, #4	; (adr r1, 800ef08 <_printf_i+0x40>)
 800ef04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef08:	0800ef61 	.word	0x0800ef61
 800ef0c:	0800ef75 	.word	0x0800ef75
 800ef10:	0800eef1 	.word	0x0800eef1
 800ef14:	0800eef1 	.word	0x0800eef1
 800ef18:	0800eef1 	.word	0x0800eef1
 800ef1c:	0800eef1 	.word	0x0800eef1
 800ef20:	0800ef75 	.word	0x0800ef75
 800ef24:	0800eef1 	.word	0x0800eef1
 800ef28:	0800eef1 	.word	0x0800eef1
 800ef2c:	0800eef1 	.word	0x0800eef1
 800ef30:	0800eef1 	.word	0x0800eef1
 800ef34:	0800f081 	.word	0x0800f081
 800ef38:	0800efa5 	.word	0x0800efa5
 800ef3c:	0800f063 	.word	0x0800f063
 800ef40:	0800eef1 	.word	0x0800eef1
 800ef44:	0800eef1 	.word	0x0800eef1
 800ef48:	0800f0a3 	.word	0x0800f0a3
 800ef4c:	0800eef1 	.word	0x0800eef1
 800ef50:	0800efa5 	.word	0x0800efa5
 800ef54:	0800eef1 	.word	0x0800eef1
 800ef58:	0800eef1 	.word	0x0800eef1
 800ef5c:	0800f06b 	.word	0x0800f06b
 800ef60:	682b      	ldr	r3, [r5, #0]
 800ef62:	1d1a      	adds	r2, r3, #4
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	602a      	str	r2, [r5, #0]
 800ef68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef70:	2301      	movs	r3, #1
 800ef72:	e0a3      	b.n	800f0bc <_printf_i+0x1f4>
 800ef74:	6820      	ldr	r0, [r4, #0]
 800ef76:	6829      	ldr	r1, [r5, #0]
 800ef78:	0606      	lsls	r6, r0, #24
 800ef7a:	f101 0304 	add.w	r3, r1, #4
 800ef7e:	d50a      	bpl.n	800ef96 <_printf_i+0xce>
 800ef80:	680e      	ldr	r6, [r1, #0]
 800ef82:	602b      	str	r3, [r5, #0]
 800ef84:	2e00      	cmp	r6, #0
 800ef86:	da03      	bge.n	800ef90 <_printf_i+0xc8>
 800ef88:	232d      	movs	r3, #45	; 0x2d
 800ef8a:	4276      	negs	r6, r6
 800ef8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef90:	485e      	ldr	r0, [pc, #376]	; (800f10c <_printf_i+0x244>)
 800ef92:	230a      	movs	r3, #10
 800ef94:	e019      	b.n	800efca <_printf_i+0x102>
 800ef96:	680e      	ldr	r6, [r1, #0]
 800ef98:	602b      	str	r3, [r5, #0]
 800ef9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ef9e:	bf18      	it	ne
 800efa0:	b236      	sxthne	r6, r6
 800efa2:	e7ef      	b.n	800ef84 <_printf_i+0xbc>
 800efa4:	682b      	ldr	r3, [r5, #0]
 800efa6:	6820      	ldr	r0, [r4, #0]
 800efa8:	1d19      	adds	r1, r3, #4
 800efaa:	6029      	str	r1, [r5, #0]
 800efac:	0601      	lsls	r1, r0, #24
 800efae:	d501      	bpl.n	800efb4 <_printf_i+0xec>
 800efb0:	681e      	ldr	r6, [r3, #0]
 800efb2:	e002      	b.n	800efba <_printf_i+0xf2>
 800efb4:	0646      	lsls	r6, r0, #25
 800efb6:	d5fb      	bpl.n	800efb0 <_printf_i+0xe8>
 800efb8:	881e      	ldrh	r6, [r3, #0]
 800efba:	4854      	ldr	r0, [pc, #336]	; (800f10c <_printf_i+0x244>)
 800efbc:	2f6f      	cmp	r7, #111	; 0x6f
 800efbe:	bf0c      	ite	eq
 800efc0:	2308      	moveq	r3, #8
 800efc2:	230a      	movne	r3, #10
 800efc4:	2100      	movs	r1, #0
 800efc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800efca:	6865      	ldr	r5, [r4, #4]
 800efcc:	60a5      	str	r5, [r4, #8]
 800efce:	2d00      	cmp	r5, #0
 800efd0:	bfa2      	ittt	ge
 800efd2:	6821      	ldrge	r1, [r4, #0]
 800efd4:	f021 0104 	bicge.w	r1, r1, #4
 800efd8:	6021      	strge	r1, [r4, #0]
 800efda:	b90e      	cbnz	r6, 800efe0 <_printf_i+0x118>
 800efdc:	2d00      	cmp	r5, #0
 800efde:	d04d      	beq.n	800f07c <_printf_i+0x1b4>
 800efe0:	4615      	mov	r5, r2
 800efe2:	fbb6 f1f3 	udiv	r1, r6, r3
 800efe6:	fb03 6711 	mls	r7, r3, r1, r6
 800efea:	5dc7      	ldrb	r7, [r0, r7]
 800efec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eff0:	4637      	mov	r7, r6
 800eff2:	42bb      	cmp	r3, r7
 800eff4:	460e      	mov	r6, r1
 800eff6:	d9f4      	bls.n	800efe2 <_printf_i+0x11a>
 800eff8:	2b08      	cmp	r3, #8
 800effa:	d10b      	bne.n	800f014 <_printf_i+0x14c>
 800effc:	6823      	ldr	r3, [r4, #0]
 800effe:	07de      	lsls	r6, r3, #31
 800f000:	d508      	bpl.n	800f014 <_printf_i+0x14c>
 800f002:	6923      	ldr	r3, [r4, #16]
 800f004:	6861      	ldr	r1, [r4, #4]
 800f006:	4299      	cmp	r1, r3
 800f008:	bfde      	ittt	le
 800f00a:	2330      	movle	r3, #48	; 0x30
 800f00c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f010:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f014:	1b52      	subs	r2, r2, r5
 800f016:	6122      	str	r2, [r4, #16]
 800f018:	f8cd a000 	str.w	sl, [sp]
 800f01c:	464b      	mov	r3, r9
 800f01e:	aa03      	add	r2, sp, #12
 800f020:	4621      	mov	r1, r4
 800f022:	4640      	mov	r0, r8
 800f024:	f7ff fee2 	bl	800edec <_printf_common>
 800f028:	3001      	adds	r0, #1
 800f02a:	d14c      	bne.n	800f0c6 <_printf_i+0x1fe>
 800f02c:	f04f 30ff 	mov.w	r0, #4294967295
 800f030:	b004      	add	sp, #16
 800f032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f036:	4835      	ldr	r0, [pc, #212]	; (800f10c <_printf_i+0x244>)
 800f038:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f03c:	6829      	ldr	r1, [r5, #0]
 800f03e:	6823      	ldr	r3, [r4, #0]
 800f040:	f851 6b04 	ldr.w	r6, [r1], #4
 800f044:	6029      	str	r1, [r5, #0]
 800f046:	061d      	lsls	r5, r3, #24
 800f048:	d514      	bpl.n	800f074 <_printf_i+0x1ac>
 800f04a:	07df      	lsls	r7, r3, #31
 800f04c:	bf44      	itt	mi
 800f04e:	f043 0320 	orrmi.w	r3, r3, #32
 800f052:	6023      	strmi	r3, [r4, #0]
 800f054:	b91e      	cbnz	r6, 800f05e <_printf_i+0x196>
 800f056:	6823      	ldr	r3, [r4, #0]
 800f058:	f023 0320 	bic.w	r3, r3, #32
 800f05c:	6023      	str	r3, [r4, #0]
 800f05e:	2310      	movs	r3, #16
 800f060:	e7b0      	b.n	800efc4 <_printf_i+0xfc>
 800f062:	6823      	ldr	r3, [r4, #0]
 800f064:	f043 0320 	orr.w	r3, r3, #32
 800f068:	6023      	str	r3, [r4, #0]
 800f06a:	2378      	movs	r3, #120	; 0x78
 800f06c:	4828      	ldr	r0, [pc, #160]	; (800f110 <_printf_i+0x248>)
 800f06e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f072:	e7e3      	b.n	800f03c <_printf_i+0x174>
 800f074:	0659      	lsls	r1, r3, #25
 800f076:	bf48      	it	mi
 800f078:	b2b6      	uxthmi	r6, r6
 800f07a:	e7e6      	b.n	800f04a <_printf_i+0x182>
 800f07c:	4615      	mov	r5, r2
 800f07e:	e7bb      	b.n	800eff8 <_printf_i+0x130>
 800f080:	682b      	ldr	r3, [r5, #0]
 800f082:	6826      	ldr	r6, [r4, #0]
 800f084:	6961      	ldr	r1, [r4, #20]
 800f086:	1d18      	adds	r0, r3, #4
 800f088:	6028      	str	r0, [r5, #0]
 800f08a:	0635      	lsls	r5, r6, #24
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	d501      	bpl.n	800f094 <_printf_i+0x1cc>
 800f090:	6019      	str	r1, [r3, #0]
 800f092:	e002      	b.n	800f09a <_printf_i+0x1d2>
 800f094:	0670      	lsls	r0, r6, #25
 800f096:	d5fb      	bpl.n	800f090 <_printf_i+0x1c8>
 800f098:	8019      	strh	r1, [r3, #0]
 800f09a:	2300      	movs	r3, #0
 800f09c:	6123      	str	r3, [r4, #16]
 800f09e:	4615      	mov	r5, r2
 800f0a0:	e7ba      	b.n	800f018 <_printf_i+0x150>
 800f0a2:	682b      	ldr	r3, [r5, #0]
 800f0a4:	1d1a      	adds	r2, r3, #4
 800f0a6:	602a      	str	r2, [r5, #0]
 800f0a8:	681d      	ldr	r5, [r3, #0]
 800f0aa:	6862      	ldr	r2, [r4, #4]
 800f0ac:	2100      	movs	r1, #0
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	f7f1 f896 	bl	80001e0 <memchr>
 800f0b4:	b108      	cbz	r0, 800f0ba <_printf_i+0x1f2>
 800f0b6:	1b40      	subs	r0, r0, r5
 800f0b8:	6060      	str	r0, [r4, #4]
 800f0ba:	6863      	ldr	r3, [r4, #4]
 800f0bc:	6123      	str	r3, [r4, #16]
 800f0be:	2300      	movs	r3, #0
 800f0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0c4:	e7a8      	b.n	800f018 <_printf_i+0x150>
 800f0c6:	6923      	ldr	r3, [r4, #16]
 800f0c8:	462a      	mov	r2, r5
 800f0ca:	4649      	mov	r1, r9
 800f0cc:	4640      	mov	r0, r8
 800f0ce:	47d0      	blx	sl
 800f0d0:	3001      	adds	r0, #1
 800f0d2:	d0ab      	beq.n	800f02c <_printf_i+0x164>
 800f0d4:	6823      	ldr	r3, [r4, #0]
 800f0d6:	079b      	lsls	r3, r3, #30
 800f0d8:	d413      	bmi.n	800f102 <_printf_i+0x23a>
 800f0da:	68e0      	ldr	r0, [r4, #12]
 800f0dc:	9b03      	ldr	r3, [sp, #12]
 800f0de:	4298      	cmp	r0, r3
 800f0e0:	bfb8      	it	lt
 800f0e2:	4618      	movlt	r0, r3
 800f0e4:	e7a4      	b.n	800f030 <_printf_i+0x168>
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	4632      	mov	r2, r6
 800f0ea:	4649      	mov	r1, r9
 800f0ec:	4640      	mov	r0, r8
 800f0ee:	47d0      	blx	sl
 800f0f0:	3001      	adds	r0, #1
 800f0f2:	d09b      	beq.n	800f02c <_printf_i+0x164>
 800f0f4:	3501      	adds	r5, #1
 800f0f6:	68e3      	ldr	r3, [r4, #12]
 800f0f8:	9903      	ldr	r1, [sp, #12]
 800f0fa:	1a5b      	subs	r3, r3, r1
 800f0fc:	42ab      	cmp	r3, r5
 800f0fe:	dcf2      	bgt.n	800f0e6 <_printf_i+0x21e>
 800f100:	e7eb      	b.n	800f0da <_printf_i+0x212>
 800f102:	2500      	movs	r5, #0
 800f104:	f104 0619 	add.w	r6, r4, #25
 800f108:	e7f5      	b.n	800f0f6 <_printf_i+0x22e>
 800f10a:	bf00      	nop
 800f10c:	08013536 	.word	0x08013536
 800f110:	08013547 	.word	0x08013547

0800f114 <iprintf>:
 800f114:	b40f      	push	{r0, r1, r2, r3}
 800f116:	4b0a      	ldr	r3, [pc, #40]	; (800f140 <iprintf+0x2c>)
 800f118:	b513      	push	{r0, r1, r4, lr}
 800f11a:	681c      	ldr	r4, [r3, #0]
 800f11c:	b124      	cbz	r4, 800f128 <iprintf+0x14>
 800f11e:	69a3      	ldr	r3, [r4, #24]
 800f120:	b913      	cbnz	r3, 800f128 <iprintf+0x14>
 800f122:	4620      	mov	r0, r4
 800f124:	f7ff f9c8 	bl	800e4b8 <__sinit>
 800f128:	ab05      	add	r3, sp, #20
 800f12a:	9a04      	ldr	r2, [sp, #16]
 800f12c:	68a1      	ldr	r1, [r4, #8]
 800f12e:	9301      	str	r3, [sp, #4]
 800f130:	4620      	mov	r0, r4
 800f132:	f001 fda5 	bl	8010c80 <_vfiprintf_r>
 800f136:	b002      	add	sp, #8
 800f138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f13c:	b004      	add	sp, #16
 800f13e:	4770      	bx	lr
 800f140:	200008c8 	.word	0x200008c8

0800f144 <_puts_r>:
 800f144:	b570      	push	{r4, r5, r6, lr}
 800f146:	460e      	mov	r6, r1
 800f148:	4605      	mov	r5, r0
 800f14a:	b118      	cbz	r0, 800f154 <_puts_r+0x10>
 800f14c:	6983      	ldr	r3, [r0, #24]
 800f14e:	b90b      	cbnz	r3, 800f154 <_puts_r+0x10>
 800f150:	f7ff f9b2 	bl	800e4b8 <__sinit>
 800f154:	69ab      	ldr	r3, [r5, #24]
 800f156:	68ac      	ldr	r4, [r5, #8]
 800f158:	b913      	cbnz	r3, 800f160 <_puts_r+0x1c>
 800f15a:	4628      	mov	r0, r5
 800f15c:	f7ff f9ac 	bl	800e4b8 <__sinit>
 800f160:	4b2c      	ldr	r3, [pc, #176]	; (800f214 <_puts_r+0xd0>)
 800f162:	429c      	cmp	r4, r3
 800f164:	d120      	bne.n	800f1a8 <_puts_r+0x64>
 800f166:	686c      	ldr	r4, [r5, #4]
 800f168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f16a:	07db      	lsls	r3, r3, #31
 800f16c:	d405      	bmi.n	800f17a <_puts_r+0x36>
 800f16e:	89a3      	ldrh	r3, [r4, #12]
 800f170:	0598      	lsls	r0, r3, #22
 800f172:	d402      	bmi.n	800f17a <_puts_r+0x36>
 800f174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f176:	f7ff fa62 	bl	800e63e <__retarget_lock_acquire_recursive>
 800f17a:	89a3      	ldrh	r3, [r4, #12]
 800f17c:	0719      	lsls	r1, r3, #28
 800f17e:	d51d      	bpl.n	800f1bc <_puts_r+0x78>
 800f180:	6923      	ldr	r3, [r4, #16]
 800f182:	b1db      	cbz	r3, 800f1bc <_puts_r+0x78>
 800f184:	3e01      	subs	r6, #1
 800f186:	68a3      	ldr	r3, [r4, #8]
 800f188:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f18c:	3b01      	subs	r3, #1
 800f18e:	60a3      	str	r3, [r4, #8]
 800f190:	bb39      	cbnz	r1, 800f1e2 <_puts_r+0x9e>
 800f192:	2b00      	cmp	r3, #0
 800f194:	da38      	bge.n	800f208 <_puts_r+0xc4>
 800f196:	4622      	mov	r2, r4
 800f198:	210a      	movs	r1, #10
 800f19a:	4628      	mov	r0, r5
 800f19c:	f000 f906 	bl	800f3ac <__swbuf_r>
 800f1a0:	3001      	adds	r0, #1
 800f1a2:	d011      	beq.n	800f1c8 <_puts_r+0x84>
 800f1a4:	250a      	movs	r5, #10
 800f1a6:	e011      	b.n	800f1cc <_puts_r+0x88>
 800f1a8:	4b1b      	ldr	r3, [pc, #108]	; (800f218 <_puts_r+0xd4>)
 800f1aa:	429c      	cmp	r4, r3
 800f1ac:	d101      	bne.n	800f1b2 <_puts_r+0x6e>
 800f1ae:	68ac      	ldr	r4, [r5, #8]
 800f1b0:	e7da      	b.n	800f168 <_puts_r+0x24>
 800f1b2:	4b1a      	ldr	r3, [pc, #104]	; (800f21c <_puts_r+0xd8>)
 800f1b4:	429c      	cmp	r4, r3
 800f1b6:	bf08      	it	eq
 800f1b8:	68ec      	ldreq	r4, [r5, #12]
 800f1ba:	e7d5      	b.n	800f168 <_puts_r+0x24>
 800f1bc:	4621      	mov	r1, r4
 800f1be:	4628      	mov	r0, r5
 800f1c0:	f000 f958 	bl	800f474 <__swsetup_r>
 800f1c4:	2800      	cmp	r0, #0
 800f1c6:	d0dd      	beq.n	800f184 <_puts_r+0x40>
 800f1c8:	f04f 35ff 	mov.w	r5, #4294967295
 800f1cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1ce:	07da      	lsls	r2, r3, #31
 800f1d0:	d405      	bmi.n	800f1de <_puts_r+0x9a>
 800f1d2:	89a3      	ldrh	r3, [r4, #12]
 800f1d4:	059b      	lsls	r3, r3, #22
 800f1d6:	d402      	bmi.n	800f1de <_puts_r+0x9a>
 800f1d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1da:	f7ff fa31 	bl	800e640 <__retarget_lock_release_recursive>
 800f1de:	4628      	mov	r0, r5
 800f1e0:	bd70      	pop	{r4, r5, r6, pc}
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	da04      	bge.n	800f1f0 <_puts_r+0xac>
 800f1e6:	69a2      	ldr	r2, [r4, #24]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	dc06      	bgt.n	800f1fa <_puts_r+0xb6>
 800f1ec:	290a      	cmp	r1, #10
 800f1ee:	d004      	beq.n	800f1fa <_puts_r+0xb6>
 800f1f0:	6823      	ldr	r3, [r4, #0]
 800f1f2:	1c5a      	adds	r2, r3, #1
 800f1f4:	6022      	str	r2, [r4, #0]
 800f1f6:	7019      	strb	r1, [r3, #0]
 800f1f8:	e7c5      	b.n	800f186 <_puts_r+0x42>
 800f1fa:	4622      	mov	r2, r4
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	f000 f8d5 	bl	800f3ac <__swbuf_r>
 800f202:	3001      	adds	r0, #1
 800f204:	d1bf      	bne.n	800f186 <_puts_r+0x42>
 800f206:	e7df      	b.n	800f1c8 <_puts_r+0x84>
 800f208:	6823      	ldr	r3, [r4, #0]
 800f20a:	250a      	movs	r5, #10
 800f20c:	1c5a      	adds	r2, r3, #1
 800f20e:	6022      	str	r2, [r4, #0]
 800f210:	701d      	strb	r5, [r3, #0]
 800f212:	e7db      	b.n	800f1cc <_puts_r+0x88>
 800f214:	080134e0 	.word	0x080134e0
 800f218:	08013500 	.word	0x08013500
 800f21c:	080134c0 	.word	0x080134c0

0800f220 <puts>:
 800f220:	4b02      	ldr	r3, [pc, #8]	; (800f22c <puts+0xc>)
 800f222:	4601      	mov	r1, r0
 800f224:	6818      	ldr	r0, [r3, #0]
 800f226:	f7ff bf8d 	b.w	800f144 <_puts_r>
 800f22a:	bf00      	nop
 800f22c:	200008c8 	.word	0x200008c8

0800f230 <cleanup_glue>:
 800f230:	b538      	push	{r3, r4, r5, lr}
 800f232:	460c      	mov	r4, r1
 800f234:	6809      	ldr	r1, [r1, #0]
 800f236:	4605      	mov	r5, r0
 800f238:	b109      	cbz	r1, 800f23e <cleanup_glue+0xe>
 800f23a:	f7ff fff9 	bl	800f230 <cleanup_glue>
 800f23e:	4621      	mov	r1, r4
 800f240:	4628      	mov	r0, r5
 800f242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f246:	f7ff ba1b 	b.w	800e680 <_free_r>
	...

0800f24c <_reclaim_reent>:
 800f24c:	4b2c      	ldr	r3, [pc, #176]	; (800f300 <_reclaim_reent+0xb4>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4283      	cmp	r3, r0
 800f252:	b570      	push	{r4, r5, r6, lr}
 800f254:	4604      	mov	r4, r0
 800f256:	d051      	beq.n	800f2fc <_reclaim_reent+0xb0>
 800f258:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f25a:	b143      	cbz	r3, 800f26e <_reclaim_reent+0x22>
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d14a      	bne.n	800f2f8 <_reclaim_reent+0xac>
 800f262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f264:	6819      	ldr	r1, [r3, #0]
 800f266:	b111      	cbz	r1, 800f26e <_reclaim_reent+0x22>
 800f268:	4620      	mov	r0, r4
 800f26a:	f7ff fa09 	bl	800e680 <_free_r>
 800f26e:	6961      	ldr	r1, [r4, #20]
 800f270:	b111      	cbz	r1, 800f278 <_reclaim_reent+0x2c>
 800f272:	4620      	mov	r0, r4
 800f274:	f7ff fa04 	bl	800e680 <_free_r>
 800f278:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f27a:	b111      	cbz	r1, 800f282 <_reclaim_reent+0x36>
 800f27c:	4620      	mov	r0, r4
 800f27e:	f7ff f9ff 	bl	800e680 <_free_r>
 800f282:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f284:	b111      	cbz	r1, 800f28c <_reclaim_reent+0x40>
 800f286:	4620      	mov	r0, r4
 800f288:	f7ff f9fa 	bl	800e680 <_free_r>
 800f28c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f28e:	b111      	cbz	r1, 800f296 <_reclaim_reent+0x4a>
 800f290:	4620      	mov	r0, r4
 800f292:	f7ff f9f5 	bl	800e680 <_free_r>
 800f296:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f298:	b111      	cbz	r1, 800f2a0 <_reclaim_reent+0x54>
 800f29a:	4620      	mov	r0, r4
 800f29c:	f7ff f9f0 	bl	800e680 <_free_r>
 800f2a0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f2a2:	b111      	cbz	r1, 800f2aa <_reclaim_reent+0x5e>
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f7ff f9eb 	bl	800e680 <_free_r>
 800f2aa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f2ac:	b111      	cbz	r1, 800f2b4 <_reclaim_reent+0x68>
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f7ff f9e6 	bl	800e680 <_free_r>
 800f2b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2b6:	b111      	cbz	r1, 800f2be <_reclaim_reent+0x72>
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	f7ff f9e1 	bl	800e680 <_free_r>
 800f2be:	69a3      	ldr	r3, [r4, #24]
 800f2c0:	b1e3      	cbz	r3, 800f2fc <_reclaim_reent+0xb0>
 800f2c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	4798      	blx	r3
 800f2c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f2ca:	b1b9      	cbz	r1, 800f2fc <_reclaim_reent+0xb0>
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2d2:	f7ff bfad 	b.w	800f230 <cleanup_glue>
 800f2d6:	5949      	ldr	r1, [r1, r5]
 800f2d8:	b941      	cbnz	r1, 800f2ec <_reclaim_reent+0xa0>
 800f2da:	3504      	adds	r5, #4
 800f2dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2de:	2d80      	cmp	r5, #128	; 0x80
 800f2e0:	68d9      	ldr	r1, [r3, #12]
 800f2e2:	d1f8      	bne.n	800f2d6 <_reclaim_reent+0x8a>
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	f7ff f9cb 	bl	800e680 <_free_r>
 800f2ea:	e7ba      	b.n	800f262 <_reclaim_reent+0x16>
 800f2ec:	680e      	ldr	r6, [r1, #0]
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	f7ff f9c6 	bl	800e680 <_free_r>
 800f2f4:	4631      	mov	r1, r6
 800f2f6:	e7ef      	b.n	800f2d8 <_reclaim_reent+0x8c>
 800f2f8:	2500      	movs	r5, #0
 800f2fa:	e7ef      	b.n	800f2dc <_reclaim_reent+0x90>
 800f2fc:	bd70      	pop	{r4, r5, r6, pc}
 800f2fe:	bf00      	nop
 800f300:	200008c8 	.word	0x200008c8

0800f304 <_sbrk_r>:
 800f304:	b538      	push	{r3, r4, r5, lr}
 800f306:	4d06      	ldr	r5, [pc, #24]	; (800f320 <_sbrk_r+0x1c>)
 800f308:	2300      	movs	r3, #0
 800f30a:	4604      	mov	r4, r0
 800f30c:	4608      	mov	r0, r1
 800f30e:	602b      	str	r3, [r5, #0]
 800f310:	f7f2 ffaa 	bl	8002268 <_sbrk>
 800f314:	1c43      	adds	r3, r0, #1
 800f316:	d102      	bne.n	800f31e <_sbrk_r+0x1a>
 800f318:	682b      	ldr	r3, [r5, #0]
 800f31a:	b103      	cbz	r3, 800f31e <_sbrk_r+0x1a>
 800f31c:	6023      	str	r3, [r4, #0]
 800f31e:	bd38      	pop	{r3, r4, r5, pc}
 800f320:	2000482c 	.word	0x2000482c

0800f324 <__sread>:
 800f324:	b510      	push	{r4, lr}
 800f326:	460c      	mov	r4, r1
 800f328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f32c:	f001 fdd8 	bl	8010ee0 <_read_r>
 800f330:	2800      	cmp	r0, #0
 800f332:	bfab      	itete	ge
 800f334:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f336:	89a3      	ldrhlt	r3, [r4, #12]
 800f338:	181b      	addge	r3, r3, r0
 800f33a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f33e:	bfac      	ite	ge
 800f340:	6563      	strge	r3, [r4, #84]	; 0x54
 800f342:	81a3      	strhlt	r3, [r4, #12]
 800f344:	bd10      	pop	{r4, pc}

0800f346 <__swrite>:
 800f346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f34a:	461f      	mov	r7, r3
 800f34c:	898b      	ldrh	r3, [r1, #12]
 800f34e:	05db      	lsls	r3, r3, #23
 800f350:	4605      	mov	r5, r0
 800f352:	460c      	mov	r4, r1
 800f354:	4616      	mov	r6, r2
 800f356:	d505      	bpl.n	800f364 <__swrite+0x1e>
 800f358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f35c:	2302      	movs	r3, #2
 800f35e:	2200      	movs	r2, #0
 800f360:	f001 f846 	bl	80103f0 <_lseek_r>
 800f364:	89a3      	ldrh	r3, [r4, #12]
 800f366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f36a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f36e:	81a3      	strh	r3, [r4, #12]
 800f370:	4632      	mov	r2, r6
 800f372:	463b      	mov	r3, r7
 800f374:	4628      	mov	r0, r5
 800f376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f37a:	f000 b869 	b.w	800f450 <_write_r>

0800f37e <__sseek>:
 800f37e:	b510      	push	{r4, lr}
 800f380:	460c      	mov	r4, r1
 800f382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f386:	f001 f833 	bl	80103f0 <_lseek_r>
 800f38a:	1c43      	adds	r3, r0, #1
 800f38c:	89a3      	ldrh	r3, [r4, #12]
 800f38e:	bf15      	itete	ne
 800f390:	6560      	strne	r0, [r4, #84]	; 0x54
 800f392:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f396:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f39a:	81a3      	strheq	r3, [r4, #12]
 800f39c:	bf18      	it	ne
 800f39e:	81a3      	strhne	r3, [r4, #12]
 800f3a0:	bd10      	pop	{r4, pc}

0800f3a2 <__sclose>:
 800f3a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3a6:	f000 b8d3 	b.w	800f550 <_close_r>
	...

0800f3ac <__swbuf_r>:
 800f3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ae:	460e      	mov	r6, r1
 800f3b0:	4614      	mov	r4, r2
 800f3b2:	4605      	mov	r5, r0
 800f3b4:	b118      	cbz	r0, 800f3be <__swbuf_r+0x12>
 800f3b6:	6983      	ldr	r3, [r0, #24]
 800f3b8:	b90b      	cbnz	r3, 800f3be <__swbuf_r+0x12>
 800f3ba:	f7ff f87d 	bl	800e4b8 <__sinit>
 800f3be:	4b21      	ldr	r3, [pc, #132]	; (800f444 <__swbuf_r+0x98>)
 800f3c0:	429c      	cmp	r4, r3
 800f3c2:	d12b      	bne.n	800f41c <__swbuf_r+0x70>
 800f3c4:	686c      	ldr	r4, [r5, #4]
 800f3c6:	69a3      	ldr	r3, [r4, #24]
 800f3c8:	60a3      	str	r3, [r4, #8]
 800f3ca:	89a3      	ldrh	r3, [r4, #12]
 800f3cc:	071a      	lsls	r2, r3, #28
 800f3ce:	d52f      	bpl.n	800f430 <__swbuf_r+0x84>
 800f3d0:	6923      	ldr	r3, [r4, #16]
 800f3d2:	b36b      	cbz	r3, 800f430 <__swbuf_r+0x84>
 800f3d4:	6923      	ldr	r3, [r4, #16]
 800f3d6:	6820      	ldr	r0, [r4, #0]
 800f3d8:	1ac0      	subs	r0, r0, r3
 800f3da:	6963      	ldr	r3, [r4, #20]
 800f3dc:	b2f6      	uxtb	r6, r6
 800f3de:	4283      	cmp	r3, r0
 800f3e0:	4637      	mov	r7, r6
 800f3e2:	dc04      	bgt.n	800f3ee <__swbuf_r+0x42>
 800f3e4:	4621      	mov	r1, r4
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	f000 ffc2 	bl	8010370 <_fflush_r>
 800f3ec:	bb30      	cbnz	r0, 800f43c <__swbuf_r+0x90>
 800f3ee:	68a3      	ldr	r3, [r4, #8]
 800f3f0:	3b01      	subs	r3, #1
 800f3f2:	60a3      	str	r3, [r4, #8]
 800f3f4:	6823      	ldr	r3, [r4, #0]
 800f3f6:	1c5a      	adds	r2, r3, #1
 800f3f8:	6022      	str	r2, [r4, #0]
 800f3fa:	701e      	strb	r6, [r3, #0]
 800f3fc:	6963      	ldr	r3, [r4, #20]
 800f3fe:	3001      	adds	r0, #1
 800f400:	4283      	cmp	r3, r0
 800f402:	d004      	beq.n	800f40e <__swbuf_r+0x62>
 800f404:	89a3      	ldrh	r3, [r4, #12]
 800f406:	07db      	lsls	r3, r3, #31
 800f408:	d506      	bpl.n	800f418 <__swbuf_r+0x6c>
 800f40a:	2e0a      	cmp	r6, #10
 800f40c:	d104      	bne.n	800f418 <__swbuf_r+0x6c>
 800f40e:	4621      	mov	r1, r4
 800f410:	4628      	mov	r0, r5
 800f412:	f000 ffad 	bl	8010370 <_fflush_r>
 800f416:	b988      	cbnz	r0, 800f43c <__swbuf_r+0x90>
 800f418:	4638      	mov	r0, r7
 800f41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f41c:	4b0a      	ldr	r3, [pc, #40]	; (800f448 <__swbuf_r+0x9c>)
 800f41e:	429c      	cmp	r4, r3
 800f420:	d101      	bne.n	800f426 <__swbuf_r+0x7a>
 800f422:	68ac      	ldr	r4, [r5, #8]
 800f424:	e7cf      	b.n	800f3c6 <__swbuf_r+0x1a>
 800f426:	4b09      	ldr	r3, [pc, #36]	; (800f44c <__swbuf_r+0xa0>)
 800f428:	429c      	cmp	r4, r3
 800f42a:	bf08      	it	eq
 800f42c:	68ec      	ldreq	r4, [r5, #12]
 800f42e:	e7ca      	b.n	800f3c6 <__swbuf_r+0x1a>
 800f430:	4621      	mov	r1, r4
 800f432:	4628      	mov	r0, r5
 800f434:	f000 f81e 	bl	800f474 <__swsetup_r>
 800f438:	2800      	cmp	r0, #0
 800f43a:	d0cb      	beq.n	800f3d4 <__swbuf_r+0x28>
 800f43c:	f04f 37ff 	mov.w	r7, #4294967295
 800f440:	e7ea      	b.n	800f418 <__swbuf_r+0x6c>
 800f442:	bf00      	nop
 800f444:	080134e0 	.word	0x080134e0
 800f448:	08013500 	.word	0x08013500
 800f44c:	080134c0 	.word	0x080134c0

0800f450 <_write_r>:
 800f450:	b538      	push	{r3, r4, r5, lr}
 800f452:	4d07      	ldr	r5, [pc, #28]	; (800f470 <_write_r+0x20>)
 800f454:	4604      	mov	r4, r0
 800f456:	4608      	mov	r0, r1
 800f458:	4611      	mov	r1, r2
 800f45a:	2200      	movs	r2, #0
 800f45c:	602a      	str	r2, [r5, #0]
 800f45e:	461a      	mov	r2, r3
 800f460:	f7f2 feb1 	bl	80021c6 <_write>
 800f464:	1c43      	adds	r3, r0, #1
 800f466:	d102      	bne.n	800f46e <_write_r+0x1e>
 800f468:	682b      	ldr	r3, [r5, #0]
 800f46a:	b103      	cbz	r3, 800f46e <_write_r+0x1e>
 800f46c:	6023      	str	r3, [r4, #0]
 800f46e:	bd38      	pop	{r3, r4, r5, pc}
 800f470:	2000482c 	.word	0x2000482c

0800f474 <__swsetup_r>:
 800f474:	4b32      	ldr	r3, [pc, #200]	; (800f540 <__swsetup_r+0xcc>)
 800f476:	b570      	push	{r4, r5, r6, lr}
 800f478:	681d      	ldr	r5, [r3, #0]
 800f47a:	4606      	mov	r6, r0
 800f47c:	460c      	mov	r4, r1
 800f47e:	b125      	cbz	r5, 800f48a <__swsetup_r+0x16>
 800f480:	69ab      	ldr	r3, [r5, #24]
 800f482:	b913      	cbnz	r3, 800f48a <__swsetup_r+0x16>
 800f484:	4628      	mov	r0, r5
 800f486:	f7ff f817 	bl	800e4b8 <__sinit>
 800f48a:	4b2e      	ldr	r3, [pc, #184]	; (800f544 <__swsetup_r+0xd0>)
 800f48c:	429c      	cmp	r4, r3
 800f48e:	d10f      	bne.n	800f4b0 <__swsetup_r+0x3c>
 800f490:	686c      	ldr	r4, [r5, #4]
 800f492:	89a3      	ldrh	r3, [r4, #12]
 800f494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f498:	0719      	lsls	r1, r3, #28
 800f49a:	d42c      	bmi.n	800f4f6 <__swsetup_r+0x82>
 800f49c:	06dd      	lsls	r5, r3, #27
 800f49e:	d411      	bmi.n	800f4c4 <__swsetup_r+0x50>
 800f4a0:	2309      	movs	r3, #9
 800f4a2:	6033      	str	r3, [r6, #0]
 800f4a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f4a8:	81a3      	strh	r3, [r4, #12]
 800f4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ae:	e03e      	b.n	800f52e <__swsetup_r+0xba>
 800f4b0:	4b25      	ldr	r3, [pc, #148]	; (800f548 <__swsetup_r+0xd4>)
 800f4b2:	429c      	cmp	r4, r3
 800f4b4:	d101      	bne.n	800f4ba <__swsetup_r+0x46>
 800f4b6:	68ac      	ldr	r4, [r5, #8]
 800f4b8:	e7eb      	b.n	800f492 <__swsetup_r+0x1e>
 800f4ba:	4b24      	ldr	r3, [pc, #144]	; (800f54c <__swsetup_r+0xd8>)
 800f4bc:	429c      	cmp	r4, r3
 800f4be:	bf08      	it	eq
 800f4c0:	68ec      	ldreq	r4, [r5, #12]
 800f4c2:	e7e6      	b.n	800f492 <__swsetup_r+0x1e>
 800f4c4:	0758      	lsls	r0, r3, #29
 800f4c6:	d512      	bpl.n	800f4ee <__swsetup_r+0x7a>
 800f4c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4ca:	b141      	cbz	r1, 800f4de <__swsetup_r+0x6a>
 800f4cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4d0:	4299      	cmp	r1, r3
 800f4d2:	d002      	beq.n	800f4da <__swsetup_r+0x66>
 800f4d4:	4630      	mov	r0, r6
 800f4d6:	f7ff f8d3 	bl	800e680 <_free_r>
 800f4da:	2300      	movs	r3, #0
 800f4dc:	6363      	str	r3, [r4, #52]	; 0x34
 800f4de:	89a3      	ldrh	r3, [r4, #12]
 800f4e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f4e4:	81a3      	strh	r3, [r4, #12]
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	6063      	str	r3, [r4, #4]
 800f4ea:	6923      	ldr	r3, [r4, #16]
 800f4ec:	6023      	str	r3, [r4, #0]
 800f4ee:	89a3      	ldrh	r3, [r4, #12]
 800f4f0:	f043 0308 	orr.w	r3, r3, #8
 800f4f4:	81a3      	strh	r3, [r4, #12]
 800f4f6:	6923      	ldr	r3, [r4, #16]
 800f4f8:	b94b      	cbnz	r3, 800f50e <__swsetup_r+0x9a>
 800f4fa:	89a3      	ldrh	r3, [r4, #12]
 800f4fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f504:	d003      	beq.n	800f50e <__swsetup_r+0x9a>
 800f506:	4621      	mov	r1, r4
 800f508:	4630      	mov	r0, r6
 800f50a:	f000 ffa9 	bl	8010460 <__smakebuf_r>
 800f50e:	89a0      	ldrh	r0, [r4, #12]
 800f510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f514:	f010 0301 	ands.w	r3, r0, #1
 800f518:	d00a      	beq.n	800f530 <__swsetup_r+0xbc>
 800f51a:	2300      	movs	r3, #0
 800f51c:	60a3      	str	r3, [r4, #8]
 800f51e:	6963      	ldr	r3, [r4, #20]
 800f520:	425b      	negs	r3, r3
 800f522:	61a3      	str	r3, [r4, #24]
 800f524:	6923      	ldr	r3, [r4, #16]
 800f526:	b943      	cbnz	r3, 800f53a <__swsetup_r+0xc6>
 800f528:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f52c:	d1ba      	bne.n	800f4a4 <__swsetup_r+0x30>
 800f52e:	bd70      	pop	{r4, r5, r6, pc}
 800f530:	0781      	lsls	r1, r0, #30
 800f532:	bf58      	it	pl
 800f534:	6963      	ldrpl	r3, [r4, #20]
 800f536:	60a3      	str	r3, [r4, #8]
 800f538:	e7f4      	b.n	800f524 <__swsetup_r+0xb0>
 800f53a:	2000      	movs	r0, #0
 800f53c:	e7f7      	b.n	800f52e <__swsetup_r+0xba>
 800f53e:	bf00      	nop
 800f540:	200008c8 	.word	0x200008c8
 800f544:	080134e0 	.word	0x080134e0
 800f548:	08013500 	.word	0x08013500
 800f54c:	080134c0 	.word	0x080134c0

0800f550 <_close_r>:
 800f550:	b538      	push	{r3, r4, r5, lr}
 800f552:	4d06      	ldr	r5, [pc, #24]	; (800f56c <_close_r+0x1c>)
 800f554:	2300      	movs	r3, #0
 800f556:	4604      	mov	r4, r0
 800f558:	4608      	mov	r0, r1
 800f55a:	602b      	str	r3, [r5, #0]
 800f55c:	f7f2 fe4f 	bl	80021fe <_close>
 800f560:	1c43      	adds	r3, r0, #1
 800f562:	d102      	bne.n	800f56a <_close_r+0x1a>
 800f564:	682b      	ldr	r3, [r5, #0]
 800f566:	b103      	cbz	r3, 800f56a <_close_r+0x1a>
 800f568:	6023      	str	r3, [r4, #0]
 800f56a:	bd38      	pop	{r3, r4, r5, pc}
 800f56c:	2000482c 	.word	0x2000482c

0800f570 <quorem>:
 800f570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f574:	6903      	ldr	r3, [r0, #16]
 800f576:	690c      	ldr	r4, [r1, #16]
 800f578:	42a3      	cmp	r3, r4
 800f57a:	4607      	mov	r7, r0
 800f57c:	f2c0 8081 	blt.w	800f682 <quorem+0x112>
 800f580:	3c01      	subs	r4, #1
 800f582:	f101 0814 	add.w	r8, r1, #20
 800f586:	f100 0514 	add.w	r5, r0, #20
 800f58a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f58e:	9301      	str	r3, [sp, #4]
 800f590:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f594:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f598:	3301      	adds	r3, #1
 800f59a:	429a      	cmp	r2, r3
 800f59c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f5a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f5a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800f5a8:	d331      	bcc.n	800f60e <quorem+0x9e>
 800f5aa:	f04f 0e00 	mov.w	lr, #0
 800f5ae:	4640      	mov	r0, r8
 800f5b0:	46ac      	mov	ip, r5
 800f5b2:	46f2      	mov	sl, lr
 800f5b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800f5b8:	b293      	uxth	r3, r2
 800f5ba:	fb06 e303 	mla	r3, r6, r3, lr
 800f5be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f5c2:	b29b      	uxth	r3, r3
 800f5c4:	ebaa 0303 	sub.w	r3, sl, r3
 800f5c8:	f8dc a000 	ldr.w	sl, [ip]
 800f5cc:	0c12      	lsrs	r2, r2, #16
 800f5ce:	fa13 f38a 	uxtah	r3, r3, sl
 800f5d2:	fb06 e202 	mla	r2, r6, r2, lr
 800f5d6:	9300      	str	r3, [sp, #0]
 800f5d8:	9b00      	ldr	r3, [sp, #0]
 800f5da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f5de:	b292      	uxth	r2, r2
 800f5e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f5e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f5e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800f5ec:	4581      	cmp	r9, r0
 800f5ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f5f2:	f84c 3b04 	str.w	r3, [ip], #4
 800f5f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f5fa:	d2db      	bcs.n	800f5b4 <quorem+0x44>
 800f5fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800f600:	b92b      	cbnz	r3, 800f60e <quorem+0x9e>
 800f602:	9b01      	ldr	r3, [sp, #4]
 800f604:	3b04      	subs	r3, #4
 800f606:	429d      	cmp	r5, r3
 800f608:	461a      	mov	r2, r3
 800f60a:	d32e      	bcc.n	800f66a <quorem+0xfa>
 800f60c:	613c      	str	r4, [r7, #16]
 800f60e:	4638      	mov	r0, r7
 800f610:	f001 f9f4 	bl	80109fc <__mcmp>
 800f614:	2800      	cmp	r0, #0
 800f616:	db24      	blt.n	800f662 <quorem+0xf2>
 800f618:	3601      	adds	r6, #1
 800f61a:	4628      	mov	r0, r5
 800f61c:	f04f 0c00 	mov.w	ip, #0
 800f620:	f858 2b04 	ldr.w	r2, [r8], #4
 800f624:	f8d0 e000 	ldr.w	lr, [r0]
 800f628:	b293      	uxth	r3, r2
 800f62a:	ebac 0303 	sub.w	r3, ip, r3
 800f62e:	0c12      	lsrs	r2, r2, #16
 800f630:	fa13 f38e 	uxtah	r3, r3, lr
 800f634:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f638:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f642:	45c1      	cmp	r9, r8
 800f644:	f840 3b04 	str.w	r3, [r0], #4
 800f648:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f64c:	d2e8      	bcs.n	800f620 <quorem+0xb0>
 800f64e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f652:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f656:	b922      	cbnz	r2, 800f662 <quorem+0xf2>
 800f658:	3b04      	subs	r3, #4
 800f65a:	429d      	cmp	r5, r3
 800f65c:	461a      	mov	r2, r3
 800f65e:	d30a      	bcc.n	800f676 <quorem+0x106>
 800f660:	613c      	str	r4, [r7, #16]
 800f662:	4630      	mov	r0, r6
 800f664:	b003      	add	sp, #12
 800f666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f66a:	6812      	ldr	r2, [r2, #0]
 800f66c:	3b04      	subs	r3, #4
 800f66e:	2a00      	cmp	r2, #0
 800f670:	d1cc      	bne.n	800f60c <quorem+0x9c>
 800f672:	3c01      	subs	r4, #1
 800f674:	e7c7      	b.n	800f606 <quorem+0x96>
 800f676:	6812      	ldr	r2, [r2, #0]
 800f678:	3b04      	subs	r3, #4
 800f67a:	2a00      	cmp	r2, #0
 800f67c:	d1f0      	bne.n	800f660 <quorem+0xf0>
 800f67e:	3c01      	subs	r4, #1
 800f680:	e7eb      	b.n	800f65a <quorem+0xea>
 800f682:	2000      	movs	r0, #0
 800f684:	e7ee      	b.n	800f664 <quorem+0xf4>
	...

0800f688 <_dtoa_r>:
 800f688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f68c:	ed2d 8b04 	vpush	{d8-d9}
 800f690:	ec57 6b10 	vmov	r6, r7, d0
 800f694:	b093      	sub	sp, #76	; 0x4c
 800f696:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f698:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f69c:	9106      	str	r1, [sp, #24]
 800f69e:	ee10 aa10 	vmov	sl, s0
 800f6a2:	4604      	mov	r4, r0
 800f6a4:	9209      	str	r2, [sp, #36]	; 0x24
 800f6a6:	930c      	str	r3, [sp, #48]	; 0x30
 800f6a8:	46bb      	mov	fp, r7
 800f6aa:	b975      	cbnz	r5, 800f6ca <_dtoa_r+0x42>
 800f6ac:	2010      	movs	r0, #16
 800f6ae:	f7fe ffc9 	bl	800e644 <malloc>
 800f6b2:	4602      	mov	r2, r0
 800f6b4:	6260      	str	r0, [r4, #36]	; 0x24
 800f6b6:	b920      	cbnz	r0, 800f6c2 <_dtoa_r+0x3a>
 800f6b8:	4ba7      	ldr	r3, [pc, #668]	; (800f958 <_dtoa_r+0x2d0>)
 800f6ba:	21ea      	movs	r1, #234	; 0xea
 800f6bc:	48a7      	ldr	r0, [pc, #668]	; (800f95c <_dtoa_r+0x2d4>)
 800f6be:	f001 fc21 	bl	8010f04 <__assert_func>
 800f6c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f6c6:	6005      	str	r5, [r0, #0]
 800f6c8:	60c5      	str	r5, [r0, #12]
 800f6ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6cc:	6819      	ldr	r1, [r3, #0]
 800f6ce:	b151      	cbz	r1, 800f6e6 <_dtoa_r+0x5e>
 800f6d0:	685a      	ldr	r2, [r3, #4]
 800f6d2:	604a      	str	r2, [r1, #4]
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	4093      	lsls	r3, r2
 800f6d8:	608b      	str	r3, [r1, #8]
 800f6da:	4620      	mov	r0, r4
 800f6dc:	f000 ff4c 	bl	8010578 <_Bfree>
 800f6e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	601a      	str	r2, [r3, #0]
 800f6e6:	1e3b      	subs	r3, r7, #0
 800f6e8:	bfaa      	itet	ge
 800f6ea:	2300      	movge	r3, #0
 800f6ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f6f0:	f8c8 3000 	strge.w	r3, [r8]
 800f6f4:	4b9a      	ldr	r3, [pc, #616]	; (800f960 <_dtoa_r+0x2d8>)
 800f6f6:	bfbc      	itt	lt
 800f6f8:	2201      	movlt	r2, #1
 800f6fa:	f8c8 2000 	strlt.w	r2, [r8]
 800f6fe:	ea33 030b 	bics.w	r3, r3, fp
 800f702:	d11b      	bne.n	800f73c <_dtoa_r+0xb4>
 800f704:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f706:	f242 730f 	movw	r3, #9999	; 0x270f
 800f70a:	6013      	str	r3, [r2, #0]
 800f70c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f710:	4333      	orrs	r3, r6
 800f712:	f000 8592 	beq.w	801023a <_dtoa_r+0xbb2>
 800f716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f718:	b963      	cbnz	r3, 800f734 <_dtoa_r+0xac>
 800f71a:	4b92      	ldr	r3, [pc, #584]	; (800f964 <_dtoa_r+0x2dc>)
 800f71c:	e022      	b.n	800f764 <_dtoa_r+0xdc>
 800f71e:	4b92      	ldr	r3, [pc, #584]	; (800f968 <_dtoa_r+0x2e0>)
 800f720:	9301      	str	r3, [sp, #4]
 800f722:	3308      	adds	r3, #8
 800f724:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f726:	6013      	str	r3, [r2, #0]
 800f728:	9801      	ldr	r0, [sp, #4]
 800f72a:	b013      	add	sp, #76	; 0x4c
 800f72c:	ecbd 8b04 	vpop	{d8-d9}
 800f730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f734:	4b8b      	ldr	r3, [pc, #556]	; (800f964 <_dtoa_r+0x2dc>)
 800f736:	9301      	str	r3, [sp, #4]
 800f738:	3303      	adds	r3, #3
 800f73a:	e7f3      	b.n	800f724 <_dtoa_r+0x9c>
 800f73c:	2200      	movs	r2, #0
 800f73e:	2300      	movs	r3, #0
 800f740:	4650      	mov	r0, sl
 800f742:	4659      	mov	r1, fp
 800f744:	f7f1 f9c0 	bl	8000ac8 <__aeabi_dcmpeq>
 800f748:	ec4b ab19 	vmov	d9, sl, fp
 800f74c:	4680      	mov	r8, r0
 800f74e:	b158      	cbz	r0, 800f768 <_dtoa_r+0xe0>
 800f750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f752:	2301      	movs	r3, #1
 800f754:	6013      	str	r3, [r2, #0]
 800f756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f758:	2b00      	cmp	r3, #0
 800f75a:	f000 856b 	beq.w	8010234 <_dtoa_r+0xbac>
 800f75e:	4883      	ldr	r0, [pc, #524]	; (800f96c <_dtoa_r+0x2e4>)
 800f760:	6018      	str	r0, [r3, #0]
 800f762:	1e43      	subs	r3, r0, #1
 800f764:	9301      	str	r3, [sp, #4]
 800f766:	e7df      	b.n	800f728 <_dtoa_r+0xa0>
 800f768:	ec4b ab10 	vmov	d0, sl, fp
 800f76c:	aa10      	add	r2, sp, #64	; 0x40
 800f76e:	a911      	add	r1, sp, #68	; 0x44
 800f770:	4620      	mov	r0, r4
 800f772:	f001 f9e9 	bl	8010b48 <__d2b>
 800f776:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f77a:	ee08 0a10 	vmov	s16, r0
 800f77e:	2d00      	cmp	r5, #0
 800f780:	f000 8084 	beq.w	800f88c <_dtoa_r+0x204>
 800f784:	ee19 3a90 	vmov	r3, s19
 800f788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f78c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f790:	4656      	mov	r6, sl
 800f792:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f796:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f79a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f79e:	4b74      	ldr	r3, [pc, #464]	; (800f970 <_dtoa_r+0x2e8>)
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	4639      	mov	r1, r7
 800f7a6:	f7f0 fd6f 	bl	8000288 <__aeabi_dsub>
 800f7aa:	a365      	add	r3, pc, #404	; (adr r3, 800f940 <_dtoa_r+0x2b8>)
 800f7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b0:	f7f0 ff22 	bl	80005f8 <__aeabi_dmul>
 800f7b4:	a364      	add	r3, pc, #400	; (adr r3, 800f948 <_dtoa_r+0x2c0>)
 800f7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ba:	f7f0 fd67 	bl	800028c <__adddf3>
 800f7be:	4606      	mov	r6, r0
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	460f      	mov	r7, r1
 800f7c4:	f7f0 feae 	bl	8000524 <__aeabi_i2d>
 800f7c8:	a361      	add	r3, pc, #388	; (adr r3, 800f950 <_dtoa_r+0x2c8>)
 800f7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ce:	f7f0 ff13 	bl	80005f8 <__aeabi_dmul>
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	4630      	mov	r0, r6
 800f7d8:	4639      	mov	r1, r7
 800f7da:	f7f0 fd57 	bl	800028c <__adddf3>
 800f7de:	4606      	mov	r6, r0
 800f7e0:	460f      	mov	r7, r1
 800f7e2:	f7f1 f9b9 	bl	8000b58 <__aeabi_d2iz>
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	9000      	str	r0, [sp, #0]
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	4630      	mov	r0, r6
 800f7ee:	4639      	mov	r1, r7
 800f7f0:	f7f1 f974 	bl	8000adc <__aeabi_dcmplt>
 800f7f4:	b150      	cbz	r0, 800f80c <_dtoa_r+0x184>
 800f7f6:	9800      	ldr	r0, [sp, #0]
 800f7f8:	f7f0 fe94 	bl	8000524 <__aeabi_i2d>
 800f7fc:	4632      	mov	r2, r6
 800f7fe:	463b      	mov	r3, r7
 800f800:	f7f1 f962 	bl	8000ac8 <__aeabi_dcmpeq>
 800f804:	b910      	cbnz	r0, 800f80c <_dtoa_r+0x184>
 800f806:	9b00      	ldr	r3, [sp, #0]
 800f808:	3b01      	subs	r3, #1
 800f80a:	9300      	str	r3, [sp, #0]
 800f80c:	9b00      	ldr	r3, [sp, #0]
 800f80e:	2b16      	cmp	r3, #22
 800f810:	d85a      	bhi.n	800f8c8 <_dtoa_r+0x240>
 800f812:	9a00      	ldr	r2, [sp, #0]
 800f814:	4b57      	ldr	r3, [pc, #348]	; (800f974 <_dtoa_r+0x2ec>)
 800f816:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f81e:	ec51 0b19 	vmov	r0, r1, d9
 800f822:	f7f1 f95b 	bl	8000adc <__aeabi_dcmplt>
 800f826:	2800      	cmp	r0, #0
 800f828:	d050      	beq.n	800f8cc <_dtoa_r+0x244>
 800f82a:	9b00      	ldr	r3, [sp, #0]
 800f82c:	3b01      	subs	r3, #1
 800f82e:	9300      	str	r3, [sp, #0]
 800f830:	2300      	movs	r3, #0
 800f832:	930b      	str	r3, [sp, #44]	; 0x2c
 800f834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f836:	1b5d      	subs	r5, r3, r5
 800f838:	1e6b      	subs	r3, r5, #1
 800f83a:	9305      	str	r3, [sp, #20]
 800f83c:	bf45      	ittet	mi
 800f83e:	f1c5 0301 	rsbmi	r3, r5, #1
 800f842:	9304      	strmi	r3, [sp, #16]
 800f844:	2300      	movpl	r3, #0
 800f846:	2300      	movmi	r3, #0
 800f848:	bf4c      	ite	mi
 800f84a:	9305      	strmi	r3, [sp, #20]
 800f84c:	9304      	strpl	r3, [sp, #16]
 800f84e:	9b00      	ldr	r3, [sp, #0]
 800f850:	2b00      	cmp	r3, #0
 800f852:	db3d      	blt.n	800f8d0 <_dtoa_r+0x248>
 800f854:	9b05      	ldr	r3, [sp, #20]
 800f856:	9a00      	ldr	r2, [sp, #0]
 800f858:	920a      	str	r2, [sp, #40]	; 0x28
 800f85a:	4413      	add	r3, r2
 800f85c:	9305      	str	r3, [sp, #20]
 800f85e:	2300      	movs	r3, #0
 800f860:	9307      	str	r3, [sp, #28]
 800f862:	9b06      	ldr	r3, [sp, #24]
 800f864:	2b09      	cmp	r3, #9
 800f866:	f200 8089 	bhi.w	800f97c <_dtoa_r+0x2f4>
 800f86a:	2b05      	cmp	r3, #5
 800f86c:	bfc4      	itt	gt
 800f86e:	3b04      	subgt	r3, #4
 800f870:	9306      	strgt	r3, [sp, #24]
 800f872:	9b06      	ldr	r3, [sp, #24]
 800f874:	f1a3 0302 	sub.w	r3, r3, #2
 800f878:	bfcc      	ite	gt
 800f87a:	2500      	movgt	r5, #0
 800f87c:	2501      	movle	r5, #1
 800f87e:	2b03      	cmp	r3, #3
 800f880:	f200 8087 	bhi.w	800f992 <_dtoa_r+0x30a>
 800f884:	e8df f003 	tbb	[pc, r3]
 800f888:	59383a2d 	.word	0x59383a2d
 800f88c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f890:	441d      	add	r5, r3
 800f892:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f896:	2b20      	cmp	r3, #32
 800f898:	bfc1      	itttt	gt
 800f89a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f89e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f8a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800f8a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f8aa:	bfda      	itte	le
 800f8ac:	f1c3 0320 	rsble	r3, r3, #32
 800f8b0:	fa06 f003 	lslle.w	r0, r6, r3
 800f8b4:	4318      	orrgt	r0, r3
 800f8b6:	f7f0 fe25 	bl	8000504 <__aeabi_ui2d>
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	4606      	mov	r6, r0
 800f8be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f8c2:	3d01      	subs	r5, #1
 800f8c4:	930e      	str	r3, [sp, #56]	; 0x38
 800f8c6:	e76a      	b.n	800f79e <_dtoa_r+0x116>
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	e7b2      	b.n	800f832 <_dtoa_r+0x1aa>
 800f8cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800f8ce:	e7b1      	b.n	800f834 <_dtoa_r+0x1ac>
 800f8d0:	9b04      	ldr	r3, [sp, #16]
 800f8d2:	9a00      	ldr	r2, [sp, #0]
 800f8d4:	1a9b      	subs	r3, r3, r2
 800f8d6:	9304      	str	r3, [sp, #16]
 800f8d8:	4253      	negs	r3, r2
 800f8da:	9307      	str	r3, [sp, #28]
 800f8dc:	2300      	movs	r3, #0
 800f8de:	930a      	str	r3, [sp, #40]	; 0x28
 800f8e0:	e7bf      	b.n	800f862 <_dtoa_r+0x1da>
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	9308      	str	r3, [sp, #32]
 800f8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	dc55      	bgt.n	800f998 <_dtoa_r+0x310>
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	9209      	str	r2, [sp, #36]	; 0x24
 800f8f6:	e00c      	b.n	800f912 <_dtoa_r+0x28a>
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	e7f3      	b.n	800f8e4 <_dtoa_r+0x25c>
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f900:	9308      	str	r3, [sp, #32]
 800f902:	9b00      	ldr	r3, [sp, #0]
 800f904:	4413      	add	r3, r2
 800f906:	9302      	str	r3, [sp, #8]
 800f908:	3301      	adds	r3, #1
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	9303      	str	r3, [sp, #12]
 800f90e:	bfb8      	it	lt
 800f910:	2301      	movlt	r3, #1
 800f912:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f914:	2200      	movs	r2, #0
 800f916:	6042      	str	r2, [r0, #4]
 800f918:	2204      	movs	r2, #4
 800f91a:	f102 0614 	add.w	r6, r2, #20
 800f91e:	429e      	cmp	r6, r3
 800f920:	6841      	ldr	r1, [r0, #4]
 800f922:	d93d      	bls.n	800f9a0 <_dtoa_r+0x318>
 800f924:	4620      	mov	r0, r4
 800f926:	f000 fde7 	bl	80104f8 <_Balloc>
 800f92a:	9001      	str	r0, [sp, #4]
 800f92c:	2800      	cmp	r0, #0
 800f92e:	d13b      	bne.n	800f9a8 <_dtoa_r+0x320>
 800f930:	4b11      	ldr	r3, [pc, #68]	; (800f978 <_dtoa_r+0x2f0>)
 800f932:	4602      	mov	r2, r0
 800f934:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f938:	e6c0      	b.n	800f6bc <_dtoa_r+0x34>
 800f93a:	2301      	movs	r3, #1
 800f93c:	e7df      	b.n	800f8fe <_dtoa_r+0x276>
 800f93e:	bf00      	nop
 800f940:	636f4361 	.word	0x636f4361
 800f944:	3fd287a7 	.word	0x3fd287a7
 800f948:	8b60c8b3 	.word	0x8b60c8b3
 800f94c:	3fc68a28 	.word	0x3fc68a28
 800f950:	509f79fb 	.word	0x509f79fb
 800f954:	3fd34413 	.word	0x3fd34413
 800f958:	08013565 	.word	0x08013565
 800f95c:	0801357c 	.word	0x0801357c
 800f960:	7ff00000 	.word	0x7ff00000
 800f964:	08013561 	.word	0x08013561
 800f968:	08013558 	.word	0x08013558
 800f96c:	08013535 	.word	0x08013535
 800f970:	3ff80000 	.word	0x3ff80000
 800f974:	08013670 	.word	0x08013670
 800f978:	080135d7 	.word	0x080135d7
 800f97c:	2501      	movs	r5, #1
 800f97e:	2300      	movs	r3, #0
 800f980:	9306      	str	r3, [sp, #24]
 800f982:	9508      	str	r5, [sp, #32]
 800f984:	f04f 33ff 	mov.w	r3, #4294967295
 800f988:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f98c:	2200      	movs	r2, #0
 800f98e:	2312      	movs	r3, #18
 800f990:	e7b0      	b.n	800f8f4 <_dtoa_r+0x26c>
 800f992:	2301      	movs	r3, #1
 800f994:	9308      	str	r3, [sp, #32]
 800f996:	e7f5      	b.n	800f984 <_dtoa_r+0x2fc>
 800f998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f99a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f99e:	e7b8      	b.n	800f912 <_dtoa_r+0x28a>
 800f9a0:	3101      	adds	r1, #1
 800f9a2:	6041      	str	r1, [r0, #4]
 800f9a4:	0052      	lsls	r2, r2, #1
 800f9a6:	e7b8      	b.n	800f91a <_dtoa_r+0x292>
 800f9a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9aa:	9a01      	ldr	r2, [sp, #4]
 800f9ac:	601a      	str	r2, [r3, #0]
 800f9ae:	9b03      	ldr	r3, [sp, #12]
 800f9b0:	2b0e      	cmp	r3, #14
 800f9b2:	f200 809d 	bhi.w	800faf0 <_dtoa_r+0x468>
 800f9b6:	2d00      	cmp	r5, #0
 800f9b8:	f000 809a 	beq.w	800faf0 <_dtoa_r+0x468>
 800f9bc:	9b00      	ldr	r3, [sp, #0]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	dd32      	ble.n	800fa28 <_dtoa_r+0x3a0>
 800f9c2:	4ab7      	ldr	r2, [pc, #732]	; (800fca0 <_dtoa_r+0x618>)
 800f9c4:	f003 030f 	and.w	r3, r3, #15
 800f9c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f9cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f9d0:	9b00      	ldr	r3, [sp, #0]
 800f9d2:	05d8      	lsls	r0, r3, #23
 800f9d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f9d8:	d516      	bpl.n	800fa08 <_dtoa_r+0x380>
 800f9da:	4bb2      	ldr	r3, [pc, #712]	; (800fca4 <_dtoa_r+0x61c>)
 800f9dc:	ec51 0b19 	vmov	r0, r1, d9
 800f9e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f9e4:	f7f0 ff32 	bl	800084c <__aeabi_ddiv>
 800f9e8:	f007 070f 	and.w	r7, r7, #15
 800f9ec:	4682      	mov	sl, r0
 800f9ee:	468b      	mov	fp, r1
 800f9f0:	2503      	movs	r5, #3
 800f9f2:	4eac      	ldr	r6, [pc, #688]	; (800fca4 <_dtoa_r+0x61c>)
 800f9f4:	b957      	cbnz	r7, 800fa0c <_dtoa_r+0x384>
 800f9f6:	4642      	mov	r2, r8
 800f9f8:	464b      	mov	r3, r9
 800f9fa:	4650      	mov	r0, sl
 800f9fc:	4659      	mov	r1, fp
 800f9fe:	f7f0 ff25 	bl	800084c <__aeabi_ddiv>
 800fa02:	4682      	mov	sl, r0
 800fa04:	468b      	mov	fp, r1
 800fa06:	e028      	b.n	800fa5a <_dtoa_r+0x3d2>
 800fa08:	2502      	movs	r5, #2
 800fa0a:	e7f2      	b.n	800f9f2 <_dtoa_r+0x36a>
 800fa0c:	07f9      	lsls	r1, r7, #31
 800fa0e:	d508      	bpl.n	800fa22 <_dtoa_r+0x39a>
 800fa10:	4640      	mov	r0, r8
 800fa12:	4649      	mov	r1, r9
 800fa14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fa18:	f7f0 fdee 	bl	80005f8 <__aeabi_dmul>
 800fa1c:	3501      	adds	r5, #1
 800fa1e:	4680      	mov	r8, r0
 800fa20:	4689      	mov	r9, r1
 800fa22:	107f      	asrs	r7, r7, #1
 800fa24:	3608      	adds	r6, #8
 800fa26:	e7e5      	b.n	800f9f4 <_dtoa_r+0x36c>
 800fa28:	f000 809b 	beq.w	800fb62 <_dtoa_r+0x4da>
 800fa2c:	9b00      	ldr	r3, [sp, #0]
 800fa2e:	4f9d      	ldr	r7, [pc, #628]	; (800fca4 <_dtoa_r+0x61c>)
 800fa30:	425e      	negs	r6, r3
 800fa32:	4b9b      	ldr	r3, [pc, #620]	; (800fca0 <_dtoa_r+0x618>)
 800fa34:	f006 020f 	and.w	r2, r6, #15
 800fa38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa40:	ec51 0b19 	vmov	r0, r1, d9
 800fa44:	f7f0 fdd8 	bl	80005f8 <__aeabi_dmul>
 800fa48:	1136      	asrs	r6, r6, #4
 800fa4a:	4682      	mov	sl, r0
 800fa4c:	468b      	mov	fp, r1
 800fa4e:	2300      	movs	r3, #0
 800fa50:	2502      	movs	r5, #2
 800fa52:	2e00      	cmp	r6, #0
 800fa54:	d17a      	bne.n	800fb4c <_dtoa_r+0x4c4>
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d1d3      	bne.n	800fa02 <_dtoa_r+0x37a>
 800fa5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	f000 8082 	beq.w	800fb66 <_dtoa_r+0x4de>
 800fa62:	4b91      	ldr	r3, [pc, #580]	; (800fca8 <_dtoa_r+0x620>)
 800fa64:	2200      	movs	r2, #0
 800fa66:	4650      	mov	r0, sl
 800fa68:	4659      	mov	r1, fp
 800fa6a:	f7f1 f837 	bl	8000adc <__aeabi_dcmplt>
 800fa6e:	2800      	cmp	r0, #0
 800fa70:	d079      	beq.n	800fb66 <_dtoa_r+0x4de>
 800fa72:	9b03      	ldr	r3, [sp, #12]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d076      	beq.n	800fb66 <_dtoa_r+0x4de>
 800fa78:	9b02      	ldr	r3, [sp, #8]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	dd36      	ble.n	800faec <_dtoa_r+0x464>
 800fa7e:	9b00      	ldr	r3, [sp, #0]
 800fa80:	4650      	mov	r0, sl
 800fa82:	4659      	mov	r1, fp
 800fa84:	1e5f      	subs	r7, r3, #1
 800fa86:	2200      	movs	r2, #0
 800fa88:	4b88      	ldr	r3, [pc, #544]	; (800fcac <_dtoa_r+0x624>)
 800fa8a:	f7f0 fdb5 	bl	80005f8 <__aeabi_dmul>
 800fa8e:	9e02      	ldr	r6, [sp, #8]
 800fa90:	4682      	mov	sl, r0
 800fa92:	468b      	mov	fp, r1
 800fa94:	3501      	adds	r5, #1
 800fa96:	4628      	mov	r0, r5
 800fa98:	f7f0 fd44 	bl	8000524 <__aeabi_i2d>
 800fa9c:	4652      	mov	r2, sl
 800fa9e:	465b      	mov	r3, fp
 800faa0:	f7f0 fdaa 	bl	80005f8 <__aeabi_dmul>
 800faa4:	4b82      	ldr	r3, [pc, #520]	; (800fcb0 <_dtoa_r+0x628>)
 800faa6:	2200      	movs	r2, #0
 800faa8:	f7f0 fbf0 	bl	800028c <__adddf3>
 800faac:	46d0      	mov	r8, sl
 800faae:	46d9      	mov	r9, fp
 800fab0:	4682      	mov	sl, r0
 800fab2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fab6:	2e00      	cmp	r6, #0
 800fab8:	d158      	bne.n	800fb6c <_dtoa_r+0x4e4>
 800faba:	4b7e      	ldr	r3, [pc, #504]	; (800fcb4 <_dtoa_r+0x62c>)
 800fabc:	2200      	movs	r2, #0
 800fabe:	4640      	mov	r0, r8
 800fac0:	4649      	mov	r1, r9
 800fac2:	f7f0 fbe1 	bl	8000288 <__aeabi_dsub>
 800fac6:	4652      	mov	r2, sl
 800fac8:	465b      	mov	r3, fp
 800faca:	4680      	mov	r8, r0
 800facc:	4689      	mov	r9, r1
 800face:	f7f1 f823 	bl	8000b18 <__aeabi_dcmpgt>
 800fad2:	2800      	cmp	r0, #0
 800fad4:	f040 8295 	bne.w	8010002 <_dtoa_r+0x97a>
 800fad8:	4652      	mov	r2, sl
 800fada:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fade:	4640      	mov	r0, r8
 800fae0:	4649      	mov	r1, r9
 800fae2:	f7f0 fffb 	bl	8000adc <__aeabi_dcmplt>
 800fae6:	2800      	cmp	r0, #0
 800fae8:	f040 8289 	bne.w	800fffe <_dtoa_r+0x976>
 800faec:	ec5b ab19 	vmov	sl, fp, d9
 800faf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	f2c0 8148 	blt.w	800fd88 <_dtoa_r+0x700>
 800faf8:	9a00      	ldr	r2, [sp, #0]
 800fafa:	2a0e      	cmp	r2, #14
 800fafc:	f300 8144 	bgt.w	800fd88 <_dtoa_r+0x700>
 800fb00:	4b67      	ldr	r3, [pc, #412]	; (800fca0 <_dtoa_r+0x618>)
 800fb02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fb0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f280 80d5 	bge.w	800fcbc <_dtoa_r+0x634>
 800fb12:	9b03      	ldr	r3, [sp, #12]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	f300 80d1 	bgt.w	800fcbc <_dtoa_r+0x634>
 800fb1a:	f040 826f 	bne.w	800fffc <_dtoa_r+0x974>
 800fb1e:	4b65      	ldr	r3, [pc, #404]	; (800fcb4 <_dtoa_r+0x62c>)
 800fb20:	2200      	movs	r2, #0
 800fb22:	4640      	mov	r0, r8
 800fb24:	4649      	mov	r1, r9
 800fb26:	f7f0 fd67 	bl	80005f8 <__aeabi_dmul>
 800fb2a:	4652      	mov	r2, sl
 800fb2c:	465b      	mov	r3, fp
 800fb2e:	f7f0 ffe9 	bl	8000b04 <__aeabi_dcmpge>
 800fb32:	9e03      	ldr	r6, [sp, #12]
 800fb34:	4637      	mov	r7, r6
 800fb36:	2800      	cmp	r0, #0
 800fb38:	f040 8245 	bne.w	800ffc6 <_dtoa_r+0x93e>
 800fb3c:	9d01      	ldr	r5, [sp, #4]
 800fb3e:	2331      	movs	r3, #49	; 0x31
 800fb40:	f805 3b01 	strb.w	r3, [r5], #1
 800fb44:	9b00      	ldr	r3, [sp, #0]
 800fb46:	3301      	adds	r3, #1
 800fb48:	9300      	str	r3, [sp, #0]
 800fb4a:	e240      	b.n	800ffce <_dtoa_r+0x946>
 800fb4c:	07f2      	lsls	r2, r6, #31
 800fb4e:	d505      	bpl.n	800fb5c <_dtoa_r+0x4d4>
 800fb50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb54:	f7f0 fd50 	bl	80005f8 <__aeabi_dmul>
 800fb58:	3501      	adds	r5, #1
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	1076      	asrs	r6, r6, #1
 800fb5e:	3708      	adds	r7, #8
 800fb60:	e777      	b.n	800fa52 <_dtoa_r+0x3ca>
 800fb62:	2502      	movs	r5, #2
 800fb64:	e779      	b.n	800fa5a <_dtoa_r+0x3d2>
 800fb66:	9f00      	ldr	r7, [sp, #0]
 800fb68:	9e03      	ldr	r6, [sp, #12]
 800fb6a:	e794      	b.n	800fa96 <_dtoa_r+0x40e>
 800fb6c:	9901      	ldr	r1, [sp, #4]
 800fb6e:	4b4c      	ldr	r3, [pc, #304]	; (800fca0 <_dtoa_r+0x618>)
 800fb70:	4431      	add	r1, r6
 800fb72:	910d      	str	r1, [sp, #52]	; 0x34
 800fb74:	9908      	ldr	r1, [sp, #32]
 800fb76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fb7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fb7e:	2900      	cmp	r1, #0
 800fb80:	d043      	beq.n	800fc0a <_dtoa_r+0x582>
 800fb82:	494d      	ldr	r1, [pc, #308]	; (800fcb8 <_dtoa_r+0x630>)
 800fb84:	2000      	movs	r0, #0
 800fb86:	f7f0 fe61 	bl	800084c <__aeabi_ddiv>
 800fb8a:	4652      	mov	r2, sl
 800fb8c:	465b      	mov	r3, fp
 800fb8e:	f7f0 fb7b 	bl	8000288 <__aeabi_dsub>
 800fb92:	9d01      	ldr	r5, [sp, #4]
 800fb94:	4682      	mov	sl, r0
 800fb96:	468b      	mov	fp, r1
 800fb98:	4649      	mov	r1, r9
 800fb9a:	4640      	mov	r0, r8
 800fb9c:	f7f0 ffdc 	bl	8000b58 <__aeabi_d2iz>
 800fba0:	4606      	mov	r6, r0
 800fba2:	f7f0 fcbf 	bl	8000524 <__aeabi_i2d>
 800fba6:	4602      	mov	r2, r0
 800fba8:	460b      	mov	r3, r1
 800fbaa:	4640      	mov	r0, r8
 800fbac:	4649      	mov	r1, r9
 800fbae:	f7f0 fb6b 	bl	8000288 <__aeabi_dsub>
 800fbb2:	3630      	adds	r6, #48	; 0x30
 800fbb4:	f805 6b01 	strb.w	r6, [r5], #1
 800fbb8:	4652      	mov	r2, sl
 800fbba:	465b      	mov	r3, fp
 800fbbc:	4680      	mov	r8, r0
 800fbbe:	4689      	mov	r9, r1
 800fbc0:	f7f0 ff8c 	bl	8000adc <__aeabi_dcmplt>
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d163      	bne.n	800fc90 <_dtoa_r+0x608>
 800fbc8:	4642      	mov	r2, r8
 800fbca:	464b      	mov	r3, r9
 800fbcc:	4936      	ldr	r1, [pc, #216]	; (800fca8 <_dtoa_r+0x620>)
 800fbce:	2000      	movs	r0, #0
 800fbd0:	f7f0 fb5a 	bl	8000288 <__aeabi_dsub>
 800fbd4:	4652      	mov	r2, sl
 800fbd6:	465b      	mov	r3, fp
 800fbd8:	f7f0 ff80 	bl	8000adc <__aeabi_dcmplt>
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	f040 80b5 	bne.w	800fd4c <_dtoa_r+0x6c4>
 800fbe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbe4:	429d      	cmp	r5, r3
 800fbe6:	d081      	beq.n	800faec <_dtoa_r+0x464>
 800fbe8:	4b30      	ldr	r3, [pc, #192]	; (800fcac <_dtoa_r+0x624>)
 800fbea:	2200      	movs	r2, #0
 800fbec:	4650      	mov	r0, sl
 800fbee:	4659      	mov	r1, fp
 800fbf0:	f7f0 fd02 	bl	80005f8 <__aeabi_dmul>
 800fbf4:	4b2d      	ldr	r3, [pc, #180]	; (800fcac <_dtoa_r+0x624>)
 800fbf6:	4682      	mov	sl, r0
 800fbf8:	468b      	mov	fp, r1
 800fbfa:	4640      	mov	r0, r8
 800fbfc:	4649      	mov	r1, r9
 800fbfe:	2200      	movs	r2, #0
 800fc00:	f7f0 fcfa 	bl	80005f8 <__aeabi_dmul>
 800fc04:	4680      	mov	r8, r0
 800fc06:	4689      	mov	r9, r1
 800fc08:	e7c6      	b.n	800fb98 <_dtoa_r+0x510>
 800fc0a:	4650      	mov	r0, sl
 800fc0c:	4659      	mov	r1, fp
 800fc0e:	f7f0 fcf3 	bl	80005f8 <__aeabi_dmul>
 800fc12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc14:	9d01      	ldr	r5, [sp, #4]
 800fc16:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc18:	4682      	mov	sl, r0
 800fc1a:	468b      	mov	fp, r1
 800fc1c:	4649      	mov	r1, r9
 800fc1e:	4640      	mov	r0, r8
 800fc20:	f7f0 ff9a 	bl	8000b58 <__aeabi_d2iz>
 800fc24:	4606      	mov	r6, r0
 800fc26:	f7f0 fc7d 	bl	8000524 <__aeabi_i2d>
 800fc2a:	3630      	adds	r6, #48	; 0x30
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	460b      	mov	r3, r1
 800fc30:	4640      	mov	r0, r8
 800fc32:	4649      	mov	r1, r9
 800fc34:	f7f0 fb28 	bl	8000288 <__aeabi_dsub>
 800fc38:	f805 6b01 	strb.w	r6, [r5], #1
 800fc3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc3e:	429d      	cmp	r5, r3
 800fc40:	4680      	mov	r8, r0
 800fc42:	4689      	mov	r9, r1
 800fc44:	f04f 0200 	mov.w	r2, #0
 800fc48:	d124      	bne.n	800fc94 <_dtoa_r+0x60c>
 800fc4a:	4b1b      	ldr	r3, [pc, #108]	; (800fcb8 <_dtoa_r+0x630>)
 800fc4c:	4650      	mov	r0, sl
 800fc4e:	4659      	mov	r1, fp
 800fc50:	f7f0 fb1c 	bl	800028c <__adddf3>
 800fc54:	4602      	mov	r2, r0
 800fc56:	460b      	mov	r3, r1
 800fc58:	4640      	mov	r0, r8
 800fc5a:	4649      	mov	r1, r9
 800fc5c:	f7f0 ff5c 	bl	8000b18 <__aeabi_dcmpgt>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	d173      	bne.n	800fd4c <_dtoa_r+0x6c4>
 800fc64:	4652      	mov	r2, sl
 800fc66:	465b      	mov	r3, fp
 800fc68:	4913      	ldr	r1, [pc, #76]	; (800fcb8 <_dtoa_r+0x630>)
 800fc6a:	2000      	movs	r0, #0
 800fc6c:	f7f0 fb0c 	bl	8000288 <__aeabi_dsub>
 800fc70:	4602      	mov	r2, r0
 800fc72:	460b      	mov	r3, r1
 800fc74:	4640      	mov	r0, r8
 800fc76:	4649      	mov	r1, r9
 800fc78:	f7f0 ff30 	bl	8000adc <__aeabi_dcmplt>
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	f43f af35 	beq.w	800faec <_dtoa_r+0x464>
 800fc82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fc84:	1e6b      	subs	r3, r5, #1
 800fc86:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fc8c:	2b30      	cmp	r3, #48	; 0x30
 800fc8e:	d0f8      	beq.n	800fc82 <_dtoa_r+0x5fa>
 800fc90:	9700      	str	r7, [sp, #0]
 800fc92:	e049      	b.n	800fd28 <_dtoa_r+0x6a0>
 800fc94:	4b05      	ldr	r3, [pc, #20]	; (800fcac <_dtoa_r+0x624>)
 800fc96:	f7f0 fcaf 	bl	80005f8 <__aeabi_dmul>
 800fc9a:	4680      	mov	r8, r0
 800fc9c:	4689      	mov	r9, r1
 800fc9e:	e7bd      	b.n	800fc1c <_dtoa_r+0x594>
 800fca0:	08013670 	.word	0x08013670
 800fca4:	08013648 	.word	0x08013648
 800fca8:	3ff00000 	.word	0x3ff00000
 800fcac:	40240000 	.word	0x40240000
 800fcb0:	401c0000 	.word	0x401c0000
 800fcb4:	40140000 	.word	0x40140000
 800fcb8:	3fe00000 	.word	0x3fe00000
 800fcbc:	9d01      	ldr	r5, [sp, #4]
 800fcbe:	4656      	mov	r6, sl
 800fcc0:	465f      	mov	r7, fp
 800fcc2:	4642      	mov	r2, r8
 800fcc4:	464b      	mov	r3, r9
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	4639      	mov	r1, r7
 800fcca:	f7f0 fdbf 	bl	800084c <__aeabi_ddiv>
 800fcce:	f7f0 ff43 	bl	8000b58 <__aeabi_d2iz>
 800fcd2:	4682      	mov	sl, r0
 800fcd4:	f7f0 fc26 	bl	8000524 <__aeabi_i2d>
 800fcd8:	4642      	mov	r2, r8
 800fcda:	464b      	mov	r3, r9
 800fcdc:	f7f0 fc8c 	bl	80005f8 <__aeabi_dmul>
 800fce0:	4602      	mov	r2, r0
 800fce2:	460b      	mov	r3, r1
 800fce4:	4630      	mov	r0, r6
 800fce6:	4639      	mov	r1, r7
 800fce8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fcec:	f7f0 facc 	bl	8000288 <__aeabi_dsub>
 800fcf0:	f805 6b01 	strb.w	r6, [r5], #1
 800fcf4:	9e01      	ldr	r6, [sp, #4]
 800fcf6:	9f03      	ldr	r7, [sp, #12]
 800fcf8:	1bae      	subs	r6, r5, r6
 800fcfa:	42b7      	cmp	r7, r6
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	460b      	mov	r3, r1
 800fd00:	d135      	bne.n	800fd6e <_dtoa_r+0x6e6>
 800fd02:	f7f0 fac3 	bl	800028c <__adddf3>
 800fd06:	4642      	mov	r2, r8
 800fd08:	464b      	mov	r3, r9
 800fd0a:	4606      	mov	r6, r0
 800fd0c:	460f      	mov	r7, r1
 800fd0e:	f7f0 ff03 	bl	8000b18 <__aeabi_dcmpgt>
 800fd12:	b9d0      	cbnz	r0, 800fd4a <_dtoa_r+0x6c2>
 800fd14:	4642      	mov	r2, r8
 800fd16:	464b      	mov	r3, r9
 800fd18:	4630      	mov	r0, r6
 800fd1a:	4639      	mov	r1, r7
 800fd1c:	f7f0 fed4 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd20:	b110      	cbz	r0, 800fd28 <_dtoa_r+0x6a0>
 800fd22:	f01a 0f01 	tst.w	sl, #1
 800fd26:	d110      	bne.n	800fd4a <_dtoa_r+0x6c2>
 800fd28:	4620      	mov	r0, r4
 800fd2a:	ee18 1a10 	vmov	r1, s16
 800fd2e:	f000 fc23 	bl	8010578 <_Bfree>
 800fd32:	2300      	movs	r3, #0
 800fd34:	9800      	ldr	r0, [sp, #0]
 800fd36:	702b      	strb	r3, [r5, #0]
 800fd38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd3a:	3001      	adds	r0, #1
 800fd3c:	6018      	str	r0, [r3, #0]
 800fd3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f43f acf1 	beq.w	800f728 <_dtoa_r+0xa0>
 800fd46:	601d      	str	r5, [r3, #0]
 800fd48:	e4ee      	b.n	800f728 <_dtoa_r+0xa0>
 800fd4a:	9f00      	ldr	r7, [sp, #0]
 800fd4c:	462b      	mov	r3, r5
 800fd4e:	461d      	mov	r5, r3
 800fd50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd54:	2a39      	cmp	r2, #57	; 0x39
 800fd56:	d106      	bne.n	800fd66 <_dtoa_r+0x6de>
 800fd58:	9a01      	ldr	r2, [sp, #4]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d1f7      	bne.n	800fd4e <_dtoa_r+0x6c6>
 800fd5e:	9901      	ldr	r1, [sp, #4]
 800fd60:	2230      	movs	r2, #48	; 0x30
 800fd62:	3701      	adds	r7, #1
 800fd64:	700a      	strb	r2, [r1, #0]
 800fd66:	781a      	ldrb	r2, [r3, #0]
 800fd68:	3201      	adds	r2, #1
 800fd6a:	701a      	strb	r2, [r3, #0]
 800fd6c:	e790      	b.n	800fc90 <_dtoa_r+0x608>
 800fd6e:	4ba6      	ldr	r3, [pc, #664]	; (8010008 <_dtoa_r+0x980>)
 800fd70:	2200      	movs	r2, #0
 800fd72:	f7f0 fc41 	bl	80005f8 <__aeabi_dmul>
 800fd76:	2200      	movs	r2, #0
 800fd78:	2300      	movs	r3, #0
 800fd7a:	4606      	mov	r6, r0
 800fd7c:	460f      	mov	r7, r1
 800fd7e:	f7f0 fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd82:	2800      	cmp	r0, #0
 800fd84:	d09d      	beq.n	800fcc2 <_dtoa_r+0x63a>
 800fd86:	e7cf      	b.n	800fd28 <_dtoa_r+0x6a0>
 800fd88:	9a08      	ldr	r2, [sp, #32]
 800fd8a:	2a00      	cmp	r2, #0
 800fd8c:	f000 80d7 	beq.w	800ff3e <_dtoa_r+0x8b6>
 800fd90:	9a06      	ldr	r2, [sp, #24]
 800fd92:	2a01      	cmp	r2, #1
 800fd94:	f300 80ba 	bgt.w	800ff0c <_dtoa_r+0x884>
 800fd98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd9a:	2a00      	cmp	r2, #0
 800fd9c:	f000 80b2 	beq.w	800ff04 <_dtoa_r+0x87c>
 800fda0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fda4:	9e07      	ldr	r6, [sp, #28]
 800fda6:	9d04      	ldr	r5, [sp, #16]
 800fda8:	9a04      	ldr	r2, [sp, #16]
 800fdaa:	441a      	add	r2, r3
 800fdac:	9204      	str	r2, [sp, #16]
 800fdae:	9a05      	ldr	r2, [sp, #20]
 800fdb0:	2101      	movs	r1, #1
 800fdb2:	441a      	add	r2, r3
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	9205      	str	r2, [sp, #20]
 800fdb8:	f000 fc96 	bl	80106e8 <__i2b>
 800fdbc:	4607      	mov	r7, r0
 800fdbe:	2d00      	cmp	r5, #0
 800fdc0:	dd0c      	ble.n	800fddc <_dtoa_r+0x754>
 800fdc2:	9b05      	ldr	r3, [sp, #20]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	dd09      	ble.n	800fddc <_dtoa_r+0x754>
 800fdc8:	42ab      	cmp	r3, r5
 800fdca:	9a04      	ldr	r2, [sp, #16]
 800fdcc:	bfa8      	it	ge
 800fdce:	462b      	movge	r3, r5
 800fdd0:	1ad2      	subs	r2, r2, r3
 800fdd2:	9204      	str	r2, [sp, #16]
 800fdd4:	9a05      	ldr	r2, [sp, #20]
 800fdd6:	1aed      	subs	r5, r5, r3
 800fdd8:	1ad3      	subs	r3, r2, r3
 800fdda:	9305      	str	r3, [sp, #20]
 800fddc:	9b07      	ldr	r3, [sp, #28]
 800fdde:	b31b      	cbz	r3, 800fe28 <_dtoa_r+0x7a0>
 800fde0:	9b08      	ldr	r3, [sp, #32]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	f000 80af 	beq.w	800ff46 <_dtoa_r+0x8be>
 800fde8:	2e00      	cmp	r6, #0
 800fdea:	dd13      	ble.n	800fe14 <_dtoa_r+0x78c>
 800fdec:	4639      	mov	r1, r7
 800fdee:	4632      	mov	r2, r6
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	f000 fd39 	bl	8010868 <__pow5mult>
 800fdf6:	ee18 2a10 	vmov	r2, s16
 800fdfa:	4601      	mov	r1, r0
 800fdfc:	4607      	mov	r7, r0
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f000 fc88 	bl	8010714 <__multiply>
 800fe04:	ee18 1a10 	vmov	r1, s16
 800fe08:	4680      	mov	r8, r0
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	f000 fbb4 	bl	8010578 <_Bfree>
 800fe10:	ee08 8a10 	vmov	s16, r8
 800fe14:	9b07      	ldr	r3, [sp, #28]
 800fe16:	1b9a      	subs	r2, r3, r6
 800fe18:	d006      	beq.n	800fe28 <_dtoa_r+0x7a0>
 800fe1a:	ee18 1a10 	vmov	r1, s16
 800fe1e:	4620      	mov	r0, r4
 800fe20:	f000 fd22 	bl	8010868 <__pow5mult>
 800fe24:	ee08 0a10 	vmov	s16, r0
 800fe28:	2101      	movs	r1, #1
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	f000 fc5c 	bl	80106e8 <__i2b>
 800fe30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	4606      	mov	r6, r0
 800fe36:	f340 8088 	ble.w	800ff4a <_dtoa_r+0x8c2>
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	4601      	mov	r1, r0
 800fe3e:	4620      	mov	r0, r4
 800fe40:	f000 fd12 	bl	8010868 <__pow5mult>
 800fe44:	9b06      	ldr	r3, [sp, #24]
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	4606      	mov	r6, r0
 800fe4a:	f340 8081 	ble.w	800ff50 <_dtoa_r+0x8c8>
 800fe4e:	f04f 0800 	mov.w	r8, #0
 800fe52:	6933      	ldr	r3, [r6, #16]
 800fe54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fe58:	6918      	ldr	r0, [r3, #16]
 800fe5a:	f000 fbf5 	bl	8010648 <__hi0bits>
 800fe5e:	f1c0 0020 	rsb	r0, r0, #32
 800fe62:	9b05      	ldr	r3, [sp, #20]
 800fe64:	4418      	add	r0, r3
 800fe66:	f010 001f 	ands.w	r0, r0, #31
 800fe6a:	f000 8092 	beq.w	800ff92 <_dtoa_r+0x90a>
 800fe6e:	f1c0 0320 	rsb	r3, r0, #32
 800fe72:	2b04      	cmp	r3, #4
 800fe74:	f340 808a 	ble.w	800ff8c <_dtoa_r+0x904>
 800fe78:	f1c0 001c 	rsb	r0, r0, #28
 800fe7c:	9b04      	ldr	r3, [sp, #16]
 800fe7e:	4403      	add	r3, r0
 800fe80:	9304      	str	r3, [sp, #16]
 800fe82:	9b05      	ldr	r3, [sp, #20]
 800fe84:	4403      	add	r3, r0
 800fe86:	4405      	add	r5, r0
 800fe88:	9305      	str	r3, [sp, #20]
 800fe8a:	9b04      	ldr	r3, [sp, #16]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	dd07      	ble.n	800fea0 <_dtoa_r+0x818>
 800fe90:	ee18 1a10 	vmov	r1, s16
 800fe94:	461a      	mov	r2, r3
 800fe96:	4620      	mov	r0, r4
 800fe98:	f000 fd40 	bl	801091c <__lshift>
 800fe9c:	ee08 0a10 	vmov	s16, r0
 800fea0:	9b05      	ldr	r3, [sp, #20]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	dd05      	ble.n	800feb2 <_dtoa_r+0x82a>
 800fea6:	4631      	mov	r1, r6
 800fea8:	461a      	mov	r2, r3
 800feaa:	4620      	mov	r0, r4
 800feac:	f000 fd36 	bl	801091c <__lshift>
 800feb0:	4606      	mov	r6, r0
 800feb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d06e      	beq.n	800ff96 <_dtoa_r+0x90e>
 800feb8:	ee18 0a10 	vmov	r0, s16
 800febc:	4631      	mov	r1, r6
 800febe:	f000 fd9d 	bl	80109fc <__mcmp>
 800fec2:	2800      	cmp	r0, #0
 800fec4:	da67      	bge.n	800ff96 <_dtoa_r+0x90e>
 800fec6:	9b00      	ldr	r3, [sp, #0]
 800fec8:	3b01      	subs	r3, #1
 800feca:	ee18 1a10 	vmov	r1, s16
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	220a      	movs	r2, #10
 800fed2:	2300      	movs	r3, #0
 800fed4:	4620      	mov	r0, r4
 800fed6:	f000 fb71 	bl	80105bc <__multadd>
 800feda:	9b08      	ldr	r3, [sp, #32]
 800fedc:	ee08 0a10 	vmov	s16, r0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	f000 81b1 	beq.w	8010248 <_dtoa_r+0xbc0>
 800fee6:	2300      	movs	r3, #0
 800fee8:	4639      	mov	r1, r7
 800feea:	220a      	movs	r2, #10
 800feec:	4620      	mov	r0, r4
 800feee:	f000 fb65 	bl	80105bc <__multadd>
 800fef2:	9b02      	ldr	r3, [sp, #8]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	4607      	mov	r7, r0
 800fef8:	f300 808e 	bgt.w	8010018 <_dtoa_r+0x990>
 800fefc:	9b06      	ldr	r3, [sp, #24]
 800fefe:	2b02      	cmp	r3, #2
 800ff00:	dc51      	bgt.n	800ffa6 <_dtoa_r+0x91e>
 800ff02:	e089      	b.n	8010018 <_dtoa_r+0x990>
 800ff04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ff0a:	e74b      	b.n	800fda4 <_dtoa_r+0x71c>
 800ff0c:	9b03      	ldr	r3, [sp, #12]
 800ff0e:	1e5e      	subs	r6, r3, #1
 800ff10:	9b07      	ldr	r3, [sp, #28]
 800ff12:	42b3      	cmp	r3, r6
 800ff14:	bfbf      	itttt	lt
 800ff16:	9b07      	ldrlt	r3, [sp, #28]
 800ff18:	9607      	strlt	r6, [sp, #28]
 800ff1a:	1af2      	sublt	r2, r6, r3
 800ff1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ff1e:	bfb6      	itet	lt
 800ff20:	189b      	addlt	r3, r3, r2
 800ff22:	1b9e      	subge	r6, r3, r6
 800ff24:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ff26:	9b03      	ldr	r3, [sp, #12]
 800ff28:	bfb8      	it	lt
 800ff2a:	2600      	movlt	r6, #0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	bfb7      	itett	lt
 800ff30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ff34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ff38:	1a9d      	sublt	r5, r3, r2
 800ff3a:	2300      	movlt	r3, #0
 800ff3c:	e734      	b.n	800fda8 <_dtoa_r+0x720>
 800ff3e:	9e07      	ldr	r6, [sp, #28]
 800ff40:	9d04      	ldr	r5, [sp, #16]
 800ff42:	9f08      	ldr	r7, [sp, #32]
 800ff44:	e73b      	b.n	800fdbe <_dtoa_r+0x736>
 800ff46:	9a07      	ldr	r2, [sp, #28]
 800ff48:	e767      	b.n	800fe1a <_dtoa_r+0x792>
 800ff4a:	9b06      	ldr	r3, [sp, #24]
 800ff4c:	2b01      	cmp	r3, #1
 800ff4e:	dc18      	bgt.n	800ff82 <_dtoa_r+0x8fa>
 800ff50:	f1ba 0f00 	cmp.w	sl, #0
 800ff54:	d115      	bne.n	800ff82 <_dtoa_r+0x8fa>
 800ff56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff5a:	b993      	cbnz	r3, 800ff82 <_dtoa_r+0x8fa>
 800ff5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ff60:	0d1b      	lsrs	r3, r3, #20
 800ff62:	051b      	lsls	r3, r3, #20
 800ff64:	b183      	cbz	r3, 800ff88 <_dtoa_r+0x900>
 800ff66:	9b04      	ldr	r3, [sp, #16]
 800ff68:	3301      	adds	r3, #1
 800ff6a:	9304      	str	r3, [sp, #16]
 800ff6c:	9b05      	ldr	r3, [sp, #20]
 800ff6e:	3301      	adds	r3, #1
 800ff70:	9305      	str	r3, [sp, #20]
 800ff72:	f04f 0801 	mov.w	r8, #1
 800ff76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	f47f af6a 	bne.w	800fe52 <_dtoa_r+0x7ca>
 800ff7e:	2001      	movs	r0, #1
 800ff80:	e76f      	b.n	800fe62 <_dtoa_r+0x7da>
 800ff82:	f04f 0800 	mov.w	r8, #0
 800ff86:	e7f6      	b.n	800ff76 <_dtoa_r+0x8ee>
 800ff88:	4698      	mov	r8, r3
 800ff8a:	e7f4      	b.n	800ff76 <_dtoa_r+0x8ee>
 800ff8c:	f43f af7d 	beq.w	800fe8a <_dtoa_r+0x802>
 800ff90:	4618      	mov	r0, r3
 800ff92:	301c      	adds	r0, #28
 800ff94:	e772      	b.n	800fe7c <_dtoa_r+0x7f4>
 800ff96:	9b03      	ldr	r3, [sp, #12]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	dc37      	bgt.n	801000c <_dtoa_r+0x984>
 800ff9c:	9b06      	ldr	r3, [sp, #24]
 800ff9e:	2b02      	cmp	r3, #2
 800ffa0:	dd34      	ble.n	801000c <_dtoa_r+0x984>
 800ffa2:	9b03      	ldr	r3, [sp, #12]
 800ffa4:	9302      	str	r3, [sp, #8]
 800ffa6:	9b02      	ldr	r3, [sp, #8]
 800ffa8:	b96b      	cbnz	r3, 800ffc6 <_dtoa_r+0x93e>
 800ffaa:	4631      	mov	r1, r6
 800ffac:	2205      	movs	r2, #5
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f000 fb04 	bl	80105bc <__multadd>
 800ffb4:	4601      	mov	r1, r0
 800ffb6:	4606      	mov	r6, r0
 800ffb8:	ee18 0a10 	vmov	r0, s16
 800ffbc:	f000 fd1e 	bl	80109fc <__mcmp>
 800ffc0:	2800      	cmp	r0, #0
 800ffc2:	f73f adbb 	bgt.w	800fb3c <_dtoa_r+0x4b4>
 800ffc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffc8:	9d01      	ldr	r5, [sp, #4]
 800ffca:	43db      	mvns	r3, r3
 800ffcc:	9300      	str	r3, [sp, #0]
 800ffce:	f04f 0800 	mov.w	r8, #0
 800ffd2:	4631      	mov	r1, r6
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	f000 facf 	bl	8010578 <_Bfree>
 800ffda:	2f00      	cmp	r7, #0
 800ffdc:	f43f aea4 	beq.w	800fd28 <_dtoa_r+0x6a0>
 800ffe0:	f1b8 0f00 	cmp.w	r8, #0
 800ffe4:	d005      	beq.n	800fff2 <_dtoa_r+0x96a>
 800ffe6:	45b8      	cmp	r8, r7
 800ffe8:	d003      	beq.n	800fff2 <_dtoa_r+0x96a>
 800ffea:	4641      	mov	r1, r8
 800ffec:	4620      	mov	r0, r4
 800ffee:	f000 fac3 	bl	8010578 <_Bfree>
 800fff2:	4639      	mov	r1, r7
 800fff4:	4620      	mov	r0, r4
 800fff6:	f000 fabf 	bl	8010578 <_Bfree>
 800fffa:	e695      	b.n	800fd28 <_dtoa_r+0x6a0>
 800fffc:	2600      	movs	r6, #0
 800fffe:	4637      	mov	r7, r6
 8010000:	e7e1      	b.n	800ffc6 <_dtoa_r+0x93e>
 8010002:	9700      	str	r7, [sp, #0]
 8010004:	4637      	mov	r7, r6
 8010006:	e599      	b.n	800fb3c <_dtoa_r+0x4b4>
 8010008:	40240000 	.word	0x40240000
 801000c:	9b08      	ldr	r3, [sp, #32]
 801000e:	2b00      	cmp	r3, #0
 8010010:	f000 80ca 	beq.w	80101a8 <_dtoa_r+0xb20>
 8010014:	9b03      	ldr	r3, [sp, #12]
 8010016:	9302      	str	r3, [sp, #8]
 8010018:	2d00      	cmp	r5, #0
 801001a:	dd05      	ble.n	8010028 <_dtoa_r+0x9a0>
 801001c:	4639      	mov	r1, r7
 801001e:	462a      	mov	r2, r5
 8010020:	4620      	mov	r0, r4
 8010022:	f000 fc7b 	bl	801091c <__lshift>
 8010026:	4607      	mov	r7, r0
 8010028:	f1b8 0f00 	cmp.w	r8, #0
 801002c:	d05b      	beq.n	80100e6 <_dtoa_r+0xa5e>
 801002e:	6879      	ldr	r1, [r7, #4]
 8010030:	4620      	mov	r0, r4
 8010032:	f000 fa61 	bl	80104f8 <_Balloc>
 8010036:	4605      	mov	r5, r0
 8010038:	b928      	cbnz	r0, 8010046 <_dtoa_r+0x9be>
 801003a:	4b87      	ldr	r3, [pc, #540]	; (8010258 <_dtoa_r+0xbd0>)
 801003c:	4602      	mov	r2, r0
 801003e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010042:	f7ff bb3b 	b.w	800f6bc <_dtoa_r+0x34>
 8010046:	693a      	ldr	r2, [r7, #16]
 8010048:	3202      	adds	r2, #2
 801004a:	0092      	lsls	r2, r2, #2
 801004c:	f107 010c 	add.w	r1, r7, #12
 8010050:	300c      	adds	r0, #12
 8010052:	f7fe faff 	bl	800e654 <memcpy>
 8010056:	2201      	movs	r2, #1
 8010058:	4629      	mov	r1, r5
 801005a:	4620      	mov	r0, r4
 801005c:	f000 fc5e 	bl	801091c <__lshift>
 8010060:	9b01      	ldr	r3, [sp, #4]
 8010062:	f103 0901 	add.w	r9, r3, #1
 8010066:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801006a:	4413      	add	r3, r2
 801006c:	9305      	str	r3, [sp, #20]
 801006e:	f00a 0301 	and.w	r3, sl, #1
 8010072:	46b8      	mov	r8, r7
 8010074:	9304      	str	r3, [sp, #16]
 8010076:	4607      	mov	r7, r0
 8010078:	4631      	mov	r1, r6
 801007a:	ee18 0a10 	vmov	r0, s16
 801007e:	f7ff fa77 	bl	800f570 <quorem>
 8010082:	4641      	mov	r1, r8
 8010084:	9002      	str	r0, [sp, #8]
 8010086:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801008a:	ee18 0a10 	vmov	r0, s16
 801008e:	f000 fcb5 	bl	80109fc <__mcmp>
 8010092:	463a      	mov	r2, r7
 8010094:	9003      	str	r0, [sp, #12]
 8010096:	4631      	mov	r1, r6
 8010098:	4620      	mov	r0, r4
 801009a:	f000 fccb 	bl	8010a34 <__mdiff>
 801009e:	68c2      	ldr	r2, [r0, #12]
 80100a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80100a4:	4605      	mov	r5, r0
 80100a6:	bb02      	cbnz	r2, 80100ea <_dtoa_r+0xa62>
 80100a8:	4601      	mov	r1, r0
 80100aa:	ee18 0a10 	vmov	r0, s16
 80100ae:	f000 fca5 	bl	80109fc <__mcmp>
 80100b2:	4602      	mov	r2, r0
 80100b4:	4629      	mov	r1, r5
 80100b6:	4620      	mov	r0, r4
 80100b8:	9207      	str	r2, [sp, #28]
 80100ba:	f000 fa5d 	bl	8010578 <_Bfree>
 80100be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80100c2:	ea43 0102 	orr.w	r1, r3, r2
 80100c6:	9b04      	ldr	r3, [sp, #16]
 80100c8:	430b      	orrs	r3, r1
 80100ca:	464d      	mov	r5, r9
 80100cc:	d10f      	bne.n	80100ee <_dtoa_r+0xa66>
 80100ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80100d2:	d02a      	beq.n	801012a <_dtoa_r+0xaa2>
 80100d4:	9b03      	ldr	r3, [sp, #12]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	dd02      	ble.n	80100e0 <_dtoa_r+0xa58>
 80100da:	9b02      	ldr	r3, [sp, #8]
 80100dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80100e0:	f88b a000 	strb.w	sl, [fp]
 80100e4:	e775      	b.n	800ffd2 <_dtoa_r+0x94a>
 80100e6:	4638      	mov	r0, r7
 80100e8:	e7ba      	b.n	8010060 <_dtoa_r+0x9d8>
 80100ea:	2201      	movs	r2, #1
 80100ec:	e7e2      	b.n	80100b4 <_dtoa_r+0xa2c>
 80100ee:	9b03      	ldr	r3, [sp, #12]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	db04      	blt.n	80100fe <_dtoa_r+0xa76>
 80100f4:	9906      	ldr	r1, [sp, #24]
 80100f6:	430b      	orrs	r3, r1
 80100f8:	9904      	ldr	r1, [sp, #16]
 80100fa:	430b      	orrs	r3, r1
 80100fc:	d122      	bne.n	8010144 <_dtoa_r+0xabc>
 80100fe:	2a00      	cmp	r2, #0
 8010100:	ddee      	ble.n	80100e0 <_dtoa_r+0xa58>
 8010102:	ee18 1a10 	vmov	r1, s16
 8010106:	2201      	movs	r2, #1
 8010108:	4620      	mov	r0, r4
 801010a:	f000 fc07 	bl	801091c <__lshift>
 801010e:	4631      	mov	r1, r6
 8010110:	ee08 0a10 	vmov	s16, r0
 8010114:	f000 fc72 	bl	80109fc <__mcmp>
 8010118:	2800      	cmp	r0, #0
 801011a:	dc03      	bgt.n	8010124 <_dtoa_r+0xa9c>
 801011c:	d1e0      	bne.n	80100e0 <_dtoa_r+0xa58>
 801011e:	f01a 0f01 	tst.w	sl, #1
 8010122:	d0dd      	beq.n	80100e0 <_dtoa_r+0xa58>
 8010124:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010128:	d1d7      	bne.n	80100da <_dtoa_r+0xa52>
 801012a:	2339      	movs	r3, #57	; 0x39
 801012c:	f88b 3000 	strb.w	r3, [fp]
 8010130:	462b      	mov	r3, r5
 8010132:	461d      	mov	r5, r3
 8010134:	3b01      	subs	r3, #1
 8010136:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801013a:	2a39      	cmp	r2, #57	; 0x39
 801013c:	d071      	beq.n	8010222 <_dtoa_r+0xb9a>
 801013e:	3201      	adds	r2, #1
 8010140:	701a      	strb	r2, [r3, #0]
 8010142:	e746      	b.n	800ffd2 <_dtoa_r+0x94a>
 8010144:	2a00      	cmp	r2, #0
 8010146:	dd07      	ble.n	8010158 <_dtoa_r+0xad0>
 8010148:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801014c:	d0ed      	beq.n	801012a <_dtoa_r+0xaa2>
 801014e:	f10a 0301 	add.w	r3, sl, #1
 8010152:	f88b 3000 	strb.w	r3, [fp]
 8010156:	e73c      	b.n	800ffd2 <_dtoa_r+0x94a>
 8010158:	9b05      	ldr	r3, [sp, #20]
 801015a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801015e:	4599      	cmp	r9, r3
 8010160:	d047      	beq.n	80101f2 <_dtoa_r+0xb6a>
 8010162:	ee18 1a10 	vmov	r1, s16
 8010166:	2300      	movs	r3, #0
 8010168:	220a      	movs	r2, #10
 801016a:	4620      	mov	r0, r4
 801016c:	f000 fa26 	bl	80105bc <__multadd>
 8010170:	45b8      	cmp	r8, r7
 8010172:	ee08 0a10 	vmov	s16, r0
 8010176:	f04f 0300 	mov.w	r3, #0
 801017a:	f04f 020a 	mov.w	r2, #10
 801017e:	4641      	mov	r1, r8
 8010180:	4620      	mov	r0, r4
 8010182:	d106      	bne.n	8010192 <_dtoa_r+0xb0a>
 8010184:	f000 fa1a 	bl	80105bc <__multadd>
 8010188:	4680      	mov	r8, r0
 801018a:	4607      	mov	r7, r0
 801018c:	f109 0901 	add.w	r9, r9, #1
 8010190:	e772      	b.n	8010078 <_dtoa_r+0x9f0>
 8010192:	f000 fa13 	bl	80105bc <__multadd>
 8010196:	4639      	mov	r1, r7
 8010198:	4680      	mov	r8, r0
 801019a:	2300      	movs	r3, #0
 801019c:	220a      	movs	r2, #10
 801019e:	4620      	mov	r0, r4
 80101a0:	f000 fa0c 	bl	80105bc <__multadd>
 80101a4:	4607      	mov	r7, r0
 80101a6:	e7f1      	b.n	801018c <_dtoa_r+0xb04>
 80101a8:	9b03      	ldr	r3, [sp, #12]
 80101aa:	9302      	str	r3, [sp, #8]
 80101ac:	9d01      	ldr	r5, [sp, #4]
 80101ae:	ee18 0a10 	vmov	r0, s16
 80101b2:	4631      	mov	r1, r6
 80101b4:	f7ff f9dc 	bl	800f570 <quorem>
 80101b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80101bc:	9b01      	ldr	r3, [sp, #4]
 80101be:	f805 ab01 	strb.w	sl, [r5], #1
 80101c2:	1aea      	subs	r2, r5, r3
 80101c4:	9b02      	ldr	r3, [sp, #8]
 80101c6:	4293      	cmp	r3, r2
 80101c8:	dd09      	ble.n	80101de <_dtoa_r+0xb56>
 80101ca:	ee18 1a10 	vmov	r1, s16
 80101ce:	2300      	movs	r3, #0
 80101d0:	220a      	movs	r2, #10
 80101d2:	4620      	mov	r0, r4
 80101d4:	f000 f9f2 	bl	80105bc <__multadd>
 80101d8:	ee08 0a10 	vmov	s16, r0
 80101dc:	e7e7      	b.n	80101ae <_dtoa_r+0xb26>
 80101de:	9b02      	ldr	r3, [sp, #8]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	bfc8      	it	gt
 80101e4:	461d      	movgt	r5, r3
 80101e6:	9b01      	ldr	r3, [sp, #4]
 80101e8:	bfd8      	it	le
 80101ea:	2501      	movle	r5, #1
 80101ec:	441d      	add	r5, r3
 80101ee:	f04f 0800 	mov.w	r8, #0
 80101f2:	ee18 1a10 	vmov	r1, s16
 80101f6:	2201      	movs	r2, #1
 80101f8:	4620      	mov	r0, r4
 80101fa:	f000 fb8f 	bl	801091c <__lshift>
 80101fe:	4631      	mov	r1, r6
 8010200:	ee08 0a10 	vmov	s16, r0
 8010204:	f000 fbfa 	bl	80109fc <__mcmp>
 8010208:	2800      	cmp	r0, #0
 801020a:	dc91      	bgt.n	8010130 <_dtoa_r+0xaa8>
 801020c:	d102      	bne.n	8010214 <_dtoa_r+0xb8c>
 801020e:	f01a 0f01 	tst.w	sl, #1
 8010212:	d18d      	bne.n	8010130 <_dtoa_r+0xaa8>
 8010214:	462b      	mov	r3, r5
 8010216:	461d      	mov	r5, r3
 8010218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801021c:	2a30      	cmp	r2, #48	; 0x30
 801021e:	d0fa      	beq.n	8010216 <_dtoa_r+0xb8e>
 8010220:	e6d7      	b.n	800ffd2 <_dtoa_r+0x94a>
 8010222:	9a01      	ldr	r2, [sp, #4]
 8010224:	429a      	cmp	r2, r3
 8010226:	d184      	bne.n	8010132 <_dtoa_r+0xaaa>
 8010228:	9b00      	ldr	r3, [sp, #0]
 801022a:	3301      	adds	r3, #1
 801022c:	9300      	str	r3, [sp, #0]
 801022e:	2331      	movs	r3, #49	; 0x31
 8010230:	7013      	strb	r3, [r2, #0]
 8010232:	e6ce      	b.n	800ffd2 <_dtoa_r+0x94a>
 8010234:	4b09      	ldr	r3, [pc, #36]	; (801025c <_dtoa_r+0xbd4>)
 8010236:	f7ff ba95 	b.w	800f764 <_dtoa_r+0xdc>
 801023a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801023c:	2b00      	cmp	r3, #0
 801023e:	f47f aa6e 	bne.w	800f71e <_dtoa_r+0x96>
 8010242:	4b07      	ldr	r3, [pc, #28]	; (8010260 <_dtoa_r+0xbd8>)
 8010244:	f7ff ba8e 	b.w	800f764 <_dtoa_r+0xdc>
 8010248:	9b02      	ldr	r3, [sp, #8]
 801024a:	2b00      	cmp	r3, #0
 801024c:	dcae      	bgt.n	80101ac <_dtoa_r+0xb24>
 801024e:	9b06      	ldr	r3, [sp, #24]
 8010250:	2b02      	cmp	r3, #2
 8010252:	f73f aea8 	bgt.w	800ffa6 <_dtoa_r+0x91e>
 8010256:	e7a9      	b.n	80101ac <_dtoa_r+0xb24>
 8010258:	080135d7 	.word	0x080135d7
 801025c:	08013534 	.word	0x08013534
 8010260:	08013558 	.word	0x08013558

08010264 <__sflush_r>:
 8010264:	898a      	ldrh	r2, [r1, #12]
 8010266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801026a:	4605      	mov	r5, r0
 801026c:	0710      	lsls	r0, r2, #28
 801026e:	460c      	mov	r4, r1
 8010270:	d458      	bmi.n	8010324 <__sflush_r+0xc0>
 8010272:	684b      	ldr	r3, [r1, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	dc05      	bgt.n	8010284 <__sflush_r+0x20>
 8010278:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801027a:	2b00      	cmp	r3, #0
 801027c:	dc02      	bgt.n	8010284 <__sflush_r+0x20>
 801027e:	2000      	movs	r0, #0
 8010280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010286:	2e00      	cmp	r6, #0
 8010288:	d0f9      	beq.n	801027e <__sflush_r+0x1a>
 801028a:	2300      	movs	r3, #0
 801028c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010290:	682f      	ldr	r7, [r5, #0]
 8010292:	602b      	str	r3, [r5, #0]
 8010294:	d032      	beq.n	80102fc <__sflush_r+0x98>
 8010296:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010298:	89a3      	ldrh	r3, [r4, #12]
 801029a:	075a      	lsls	r2, r3, #29
 801029c:	d505      	bpl.n	80102aa <__sflush_r+0x46>
 801029e:	6863      	ldr	r3, [r4, #4]
 80102a0:	1ac0      	subs	r0, r0, r3
 80102a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80102a4:	b10b      	cbz	r3, 80102aa <__sflush_r+0x46>
 80102a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80102a8:	1ac0      	subs	r0, r0, r3
 80102aa:	2300      	movs	r3, #0
 80102ac:	4602      	mov	r2, r0
 80102ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102b0:	6a21      	ldr	r1, [r4, #32]
 80102b2:	4628      	mov	r0, r5
 80102b4:	47b0      	blx	r6
 80102b6:	1c43      	adds	r3, r0, #1
 80102b8:	89a3      	ldrh	r3, [r4, #12]
 80102ba:	d106      	bne.n	80102ca <__sflush_r+0x66>
 80102bc:	6829      	ldr	r1, [r5, #0]
 80102be:	291d      	cmp	r1, #29
 80102c0:	d82c      	bhi.n	801031c <__sflush_r+0xb8>
 80102c2:	4a2a      	ldr	r2, [pc, #168]	; (801036c <__sflush_r+0x108>)
 80102c4:	40ca      	lsrs	r2, r1
 80102c6:	07d6      	lsls	r6, r2, #31
 80102c8:	d528      	bpl.n	801031c <__sflush_r+0xb8>
 80102ca:	2200      	movs	r2, #0
 80102cc:	6062      	str	r2, [r4, #4]
 80102ce:	04d9      	lsls	r1, r3, #19
 80102d0:	6922      	ldr	r2, [r4, #16]
 80102d2:	6022      	str	r2, [r4, #0]
 80102d4:	d504      	bpl.n	80102e0 <__sflush_r+0x7c>
 80102d6:	1c42      	adds	r2, r0, #1
 80102d8:	d101      	bne.n	80102de <__sflush_r+0x7a>
 80102da:	682b      	ldr	r3, [r5, #0]
 80102dc:	b903      	cbnz	r3, 80102e0 <__sflush_r+0x7c>
 80102de:	6560      	str	r0, [r4, #84]	; 0x54
 80102e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102e2:	602f      	str	r7, [r5, #0]
 80102e4:	2900      	cmp	r1, #0
 80102e6:	d0ca      	beq.n	801027e <__sflush_r+0x1a>
 80102e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102ec:	4299      	cmp	r1, r3
 80102ee:	d002      	beq.n	80102f6 <__sflush_r+0x92>
 80102f0:	4628      	mov	r0, r5
 80102f2:	f7fe f9c5 	bl	800e680 <_free_r>
 80102f6:	2000      	movs	r0, #0
 80102f8:	6360      	str	r0, [r4, #52]	; 0x34
 80102fa:	e7c1      	b.n	8010280 <__sflush_r+0x1c>
 80102fc:	6a21      	ldr	r1, [r4, #32]
 80102fe:	2301      	movs	r3, #1
 8010300:	4628      	mov	r0, r5
 8010302:	47b0      	blx	r6
 8010304:	1c41      	adds	r1, r0, #1
 8010306:	d1c7      	bne.n	8010298 <__sflush_r+0x34>
 8010308:	682b      	ldr	r3, [r5, #0]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d0c4      	beq.n	8010298 <__sflush_r+0x34>
 801030e:	2b1d      	cmp	r3, #29
 8010310:	d001      	beq.n	8010316 <__sflush_r+0xb2>
 8010312:	2b16      	cmp	r3, #22
 8010314:	d101      	bne.n	801031a <__sflush_r+0xb6>
 8010316:	602f      	str	r7, [r5, #0]
 8010318:	e7b1      	b.n	801027e <__sflush_r+0x1a>
 801031a:	89a3      	ldrh	r3, [r4, #12]
 801031c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010320:	81a3      	strh	r3, [r4, #12]
 8010322:	e7ad      	b.n	8010280 <__sflush_r+0x1c>
 8010324:	690f      	ldr	r7, [r1, #16]
 8010326:	2f00      	cmp	r7, #0
 8010328:	d0a9      	beq.n	801027e <__sflush_r+0x1a>
 801032a:	0793      	lsls	r3, r2, #30
 801032c:	680e      	ldr	r6, [r1, #0]
 801032e:	bf08      	it	eq
 8010330:	694b      	ldreq	r3, [r1, #20]
 8010332:	600f      	str	r7, [r1, #0]
 8010334:	bf18      	it	ne
 8010336:	2300      	movne	r3, #0
 8010338:	eba6 0807 	sub.w	r8, r6, r7
 801033c:	608b      	str	r3, [r1, #8]
 801033e:	f1b8 0f00 	cmp.w	r8, #0
 8010342:	dd9c      	ble.n	801027e <__sflush_r+0x1a>
 8010344:	6a21      	ldr	r1, [r4, #32]
 8010346:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010348:	4643      	mov	r3, r8
 801034a:	463a      	mov	r2, r7
 801034c:	4628      	mov	r0, r5
 801034e:	47b0      	blx	r6
 8010350:	2800      	cmp	r0, #0
 8010352:	dc06      	bgt.n	8010362 <__sflush_r+0xfe>
 8010354:	89a3      	ldrh	r3, [r4, #12]
 8010356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801035a:	81a3      	strh	r3, [r4, #12]
 801035c:	f04f 30ff 	mov.w	r0, #4294967295
 8010360:	e78e      	b.n	8010280 <__sflush_r+0x1c>
 8010362:	4407      	add	r7, r0
 8010364:	eba8 0800 	sub.w	r8, r8, r0
 8010368:	e7e9      	b.n	801033e <__sflush_r+0xda>
 801036a:	bf00      	nop
 801036c:	20400001 	.word	0x20400001

08010370 <_fflush_r>:
 8010370:	b538      	push	{r3, r4, r5, lr}
 8010372:	690b      	ldr	r3, [r1, #16]
 8010374:	4605      	mov	r5, r0
 8010376:	460c      	mov	r4, r1
 8010378:	b913      	cbnz	r3, 8010380 <_fflush_r+0x10>
 801037a:	2500      	movs	r5, #0
 801037c:	4628      	mov	r0, r5
 801037e:	bd38      	pop	{r3, r4, r5, pc}
 8010380:	b118      	cbz	r0, 801038a <_fflush_r+0x1a>
 8010382:	6983      	ldr	r3, [r0, #24]
 8010384:	b90b      	cbnz	r3, 801038a <_fflush_r+0x1a>
 8010386:	f7fe f897 	bl	800e4b8 <__sinit>
 801038a:	4b14      	ldr	r3, [pc, #80]	; (80103dc <_fflush_r+0x6c>)
 801038c:	429c      	cmp	r4, r3
 801038e:	d11b      	bne.n	80103c8 <_fflush_r+0x58>
 8010390:	686c      	ldr	r4, [r5, #4]
 8010392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d0ef      	beq.n	801037a <_fflush_r+0xa>
 801039a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801039c:	07d0      	lsls	r0, r2, #31
 801039e:	d404      	bmi.n	80103aa <_fflush_r+0x3a>
 80103a0:	0599      	lsls	r1, r3, #22
 80103a2:	d402      	bmi.n	80103aa <_fflush_r+0x3a>
 80103a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103a6:	f7fe f94a 	bl	800e63e <__retarget_lock_acquire_recursive>
 80103aa:	4628      	mov	r0, r5
 80103ac:	4621      	mov	r1, r4
 80103ae:	f7ff ff59 	bl	8010264 <__sflush_r>
 80103b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80103b4:	07da      	lsls	r2, r3, #31
 80103b6:	4605      	mov	r5, r0
 80103b8:	d4e0      	bmi.n	801037c <_fflush_r+0xc>
 80103ba:	89a3      	ldrh	r3, [r4, #12]
 80103bc:	059b      	lsls	r3, r3, #22
 80103be:	d4dd      	bmi.n	801037c <_fflush_r+0xc>
 80103c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103c2:	f7fe f93d 	bl	800e640 <__retarget_lock_release_recursive>
 80103c6:	e7d9      	b.n	801037c <_fflush_r+0xc>
 80103c8:	4b05      	ldr	r3, [pc, #20]	; (80103e0 <_fflush_r+0x70>)
 80103ca:	429c      	cmp	r4, r3
 80103cc:	d101      	bne.n	80103d2 <_fflush_r+0x62>
 80103ce:	68ac      	ldr	r4, [r5, #8]
 80103d0:	e7df      	b.n	8010392 <_fflush_r+0x22>
 80103d2:	4b04      	ldr	r3, [pc, #16]	; (80103e4 <_fflush_r+0x74>)
 80103d4:	429c      	cmp	r4, r3
 80103d6:	bf08      	it	eq
 80103d8:	68ec      	ldreq	r4, [r5, #12]
 80103da:	e7da      	b.n	8010392 <_fflush_r+0x22>
 80103dc:	080134e0 	.word	0x080134e0
 80103e0:	08013500 	.word	0x08013500
 80103e4:	080134c0 	.word	0x080134c0

080103e8 <_localeconv_r>:
 80103e8:	4800      	ldr	r0, [pc, #0]	; (80103ec <_localeconv_r+0x4>)
 80103ea:	4770      	bx	lr
 80103ec:	20000a1c 	.word	0x20000a1c

080103f0 <_lseek_r>:
 80103f0:	b538      	push	{r3, r4, r5, lr}
 80103f2:	4d07      	ldr	r5, [pc, #28]	; (8010410 <_lseek_r+0x20>)
 80103f4:	4604      	mov	r4, r0
 80103f6:	4608      	mov	r0, r1
 80103f8:	4611      	mov	r1, r2
 80103fa:	2200      	movs	r2, #0
 80103fc:	602a      	str	r2, [r5, #0]
 80103fe:	461a      	mov	r2, r3
 8010400:	f7f1 ff24 	bl	800224c <_lseek>
 8010404:	1c43      	adds	r3, r0, #1
 8010406:	d102      	bne.n	801040e <_lseek_r+0x1e>
 8010408:	682b      	ldr	r3, [r5, #0]
 801040a:	b103      	cbz	r3, 801040e <_lseek_r+0x1e>
 801040c:	6023      	str	r3, [r4, #0]
 801040e:	bd38      	pop	{r3, r4, r5, pc}
 8010410:	2000482c 	.word	0x2000482c

08010414 <__swhatbuf_r>:
 8010414:	b570      	push	{r4, r5, r6, lr}
 8010416:	460e      	mov	r6, r1
 8010418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801041c:	2900      	cmp	r1, #0
 801041e:	b096      	sub	sp, #88	; 0x58
 8010420:	4614      	mov	r4, r2
 8010422:	461d      	mov	r5, r3
 8010424:	da08      	bge.n	8010438 <__swhatbuf_r+0x24>
 8010426:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801042a:	2200      	movs	r2, #0
 801042c:	602a      	str	r2, [r5, #0]
 801042e:	061a      	lsls	r2, r3, #24
 8010430:	d410      	bmi.n	8010454 <__swhatbuf_r+0x40>
 8010432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010436:	e00e      	b.n	8010456 <__swhatbuf_r+0x42>
 8010438:	466a      	mov	r2, sp
 801043a:	f000 fd93 	bl	8010f64 <_fstat_r>
 801043e:	2800      	cmp	r0, #0
 8010440:	dbf1      	blt.n	8010426 <__swhatbuf_r+0x12>
 8010442:	9a01      	ldr	r2, [sp, #4]
 8010444:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010448:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801044c:	425a      	negs	r2, r3
 801044e:	415a      	adcs	r2, r3
 8010450:	602a      	str	r2, [r5, #0]
 8010452:	e7ee      	b.n	8010432 <__swhatbuf_r+0x1e>
 8010454:	2340      	movs	r3, #64	; 0x40
 8010456:	2000      	movs	r0, #0
 8010458:	6023      	str	r3, [r4, #0]
 801045a:	b016      	add	sp, #88	; 0x58
 801045c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010460 <__smakebuf_r>:
 8010460:	898b      	ldrh	r3, [r1, #12]
 8010462:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010464:	079d      	lsls	r5, r3, #30
 8010466:	4606      	mov	r6, r0
 8010468:	460c      	mov	r4, r1
 801046a:	d507      	bpl.n	801047c <__smakebuf_r+0x1c>
 801046c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010470:	6023      	str	r3, [r4, #0]
 8010472:	6123      	str	r3, [r4, #16]
 8010474:	2301      	movs	r3, #1
 8010476:	6163      	str	r3, [r4, #20]
 8010478:	b002      	add	sp, #8
 801047a:	bd70      	pop	{r4, r5, r6, pc}
 801047c:	ab01      	add	r3, sp, #4
 801047e:	466a      	mov	r2, sp
 8010480:	f7ff ffc8 	bl	8010414 <__swhatbuf_r>
 8010484:	9900      	ldr	r1, [sp, #0]
 8010486:	4605      	mov	r5, r0
 8010488:	4630      	mov	r0, r6
 801048a:	f7fe f965 	bl	800e758 <_malloc_r>
 801048e:	b948      	cbnz	r0, 80104a4 <__smakebuf_r+0x44>
 8010490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010494:	059a      	lsls	r2, r3, #22
 8010496:	d4ef      	bmi.n	8010478 <__smakebuf_r+0x18>
 8010498:	f023 0303 	bic.w	r3, r3, #3
 801049c:	f043 0302 	orr.w	r3, r3, #2
 80104a0:	81a3      	strh	r3, [r4, #12]
 80104a2:	e7e3      	b.n	801046c <__smakebuf_r+0xc>
 80104a4:	4b0d      	ldr	r3, [pc, #52]	; (80104dc <__smakebuf_r+0x7c>)
 80104a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80104a8:	89a3      	ldrh	r3, [r4, #12]
 80104aa:	6020      	str	r0, [r4, #0]
 80104ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104b0:	81a3      	strh	r3, [r4, #12]
 80104b2:	9b00      	ldr	r3, [sp, #0]
 80104b4:	6163      	str	r3, [r4, #20]
 80104b6:	9b01      	ldr	r3, [sp, #4]
 80104b8:	6120      	str	r0, [r4, #16]
 80104ba:	b15b      	cbz	r3, 80104d4 <__smakebuf_r+0x74>
 80104bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104c0:	4630      	mov	r0, r6
 80104c2:	f000 fd61 	bl	8010f88 <_isatty_r>
 80104c6:	b128      	cbz	r0, 80104d4 <__smakebuf_r+0x74>
 80104c8:	89a3      	ldrh	r3, [r4, #12]
 80104ca:	f023 0303 	bic.w	r3, r3, #3
 80104ce:	f043 0301 	orr.w	r3, r3, #1
 80104d2:	81a3      	strh	r3, [r4, #12]
 80104d4:	89a0      	ldrh	r0, [r4, #12]
 80104d6:	4305      	orrs	r5, r0
 80104d8:	81a5      	strh	r5, [r4, #12]
 80104da:	e7cd      	b.n	8010478 <__smakebuf_r+0x18>
 80104dc:	0800e451 	.word	0x0800e451

080104e0 <__malloc_lock>:
 80104e0:	4801      	ldr	r0, [pc, #4]	; (80104e8 <__malloc_lock+0x8>)
 80104e2:	f7fe b8ac 	b.w	800e63e <__retarget_lock_acquire_recursive>
 80104e6:	bf00      	nop
 80104e8:	20004820 	.word	0x20004820

080104ec <__malloc_unlock>:
 80104ec:	4801      	ldr	r0, [pc, #4]	; (80104f4 <__malloc_unlock+0x8>)
 80104ee:	f7fe b8a7 	b.w	800e640 <__retarget_lock_release_recursive>
 80104f2:	bf00      	nop
 80104f4:	20004820 	.word	0x20004820

080104f8 <_Balloc>:
 80104f8:	b570      	push	{r4, r5, r6, lr}
 80104fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80104fc:	4604      	mov	r4, r0
 80104fe:	460d      	mov	r5, r1
 8010500:	b976      	cbnz	r6, 8010520 <_Balloc+0x28>
 8010502:	2010      	movs	r0, #16
 8010504:	f7fe f89e 	bl	800e644 <malloc>
 8010508:	4602      	mov	r2, r0
 801050a:	6260      	str	r0, [r4, #36]	; 0x24
 801050c:	b920      	cbnz	r0, 8010518 <_Balloc+0x20>
 801050e:	4b18      	ldr	r3, [pc, #96]	; (8010570 <_Balloc+0x78>)
 8010510:	4818      	ldr	r0, [pc, #96]	; (8010574 <_Balloc+0x7c>)
 8010512:	2166      	movs	r1, #102	; 0x66
 8010514:	f000 fcf6 	bl	8010f04 <__assert_func>
 8010518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801051c:	6006      	str	r6, [r0, #0]
 801051e:	60c6      	str	r6, [r0, #12]
 8010520:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010522:	68f3      	ldr	r3, [r6, #12]
 8010524:	b183      	cbz	r3, 8010548 <_Balloc+0x50>
 8010526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010528:	68db      	ldr	r3, [r3, #12]
 801052a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801052e:	b9b8      	cbnz	r0, 8010560 <_Balloc+0x68>
 8010530:	2101      	movs	r1, #1
 8010532:	fa01 f605 	lsl.w	r6, r1, r5
 8010536:	1d72      	adds	r2, r6, #5
 8010538:	0092      	lsls	r2, r2, #2
 801053a:	4620      	mov	r0, r4
 801053c:	f000 fb60 	bl	8010c00 <_calloc_r>
 8010540:	b160      	cbz	r0, 801055c <_Balloc+0x64>
 8010542:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010546:	e00e      	b.n	8010566 <_Balloc+0x6e>
 8010548:	2221      	movs	r2, #33	; 0x21
 801054a:	2104      	movs	r1, #4
 801054c:	4620      	mov	r0, r4
 801054e:	f000 fb57 	bl	8010c00 <_calloc_r>
 8010552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010554:	60f0      	str	r0, [r6, #12]
 8010556:	68db      	ldr	r3, [r3, #12]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d1e4      	bne.n	8010526 <_Balloc+0x2e>
 801055c:	2000      	movs	r0, #0
 801055e:	bd70      	pop	{r4, r5, r6, pc}
 8010560:	6802      	ldr	r2, [r0, #0]
 8010562:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010566:	2300      	movs	r3, #0
 8010568:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801056c:	e7f7      	b.n	801055e <_Balloc+0x66>
 801056e:	bf00      	nop
 8010570:	08013565 	.word	0x08013565
 8010574:	080135e8 	.word	0x080135e8

08010578 <_Bfree>:
 8010578:	b570      	push	{r4, r5, r6, lr}
 801057a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801057c:	4605      	mov	r5, r0
 801057e:	460c      	mov	r4, r1
 8010580:	b976      	cbnz	r6, 80105a0 <_Bfree+0x28>
 8010582:	2010      	movs	r0, #16
 8010584:	f7fe f85e 	bl	800e644 <malloc>
 8010588:	4602      	mov	r2, r0
 801058a:	6268      	str	r0, [r5, #36]	; 0x24
 801058c:	b920      	cbnz	r0, 8010598 <_Bfree+0x20>
 801058e:	4b09      	ldr	r3, [pc, #36]	; (80105b4 <_Bfree+0x3c>)
 8010590:	4809      	ldr	r0, [pc, #36]	; (80105b8 <_Bfree+0x40>)
 8010592:	218a      	movs	r1, #138	; 0x8a
 8010594:	f000 fcb6 	bl	8010f04 <__assert_func>
 8010598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801059c:	6006      	str	r6, [r0, #0]
 801059e:	60c6      	str	r6, [r0, #12]
 80105a0:	b13c      	cbz	r4, 80105b2 <_Bfree+0x3a>
 80105a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80105a4:	6862      	ldr	r2, [r4, #4]
 80105a6:	68db      	ldr	r3, [r3, #12]
 80105a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80105ac:	6021      	str	r1, [r4, #0]
 80105ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80105b2:	bd70      	pop	{r4, r5, r6, pc}
 80105b4:	08013565 	.word	0x08013565
 80105b8:	080135e8 	.word	0x080135e8

080105bc <__multadd>:
 80105bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105c0:	690d      	ldr	r5, [r1, #16]
 80105c2:	4607      	mov	r7, r0
 80105c4:	460c      	mov	r4, r1
 80105c6:	461e      	mov	r6, r3
 80105c8:	f101 0c14 	add.w	ip, r1, #20
 80105cc:	2000      	movs	r0, #0
 80105ce:	f8dc 3000 	ldr.w	r3, [ip]
 80105d2:	b299      	uxth	r1, r3
 80105d4:	fb02 6101 	mla	r1, r2, r1, r6
 80105d8:	0c1e      	lsrs	r6, r3, #16
 80105da:	0c0b      	lsrs	r3, r1, #16
 80105dc:	fb02 3306 	mla	r3, r2, r6, r3
 80105e0:	b289      	uxth	r1, r1
 80105e2:	3001      	adds	r0, #1
 80105e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80105e8:	4285      	cmp	r5, r0
 80105ea:	f84c 1b04 	str.w	r1, [ip], #4
 80105ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80105f2:	dcec      	bgt.n	80105ce <__multadd+0x12>
 80105f4:	b30e      	cbz	r6, 801063a <__multadd+0x7e>
 80105f6:	68a3      	ldr	r3, [r4, #8]
 80105f8:	42ab      	cmp	r3, r5
 80105fa:	dc19      	bgt.n	8010630 <__multadd+0x74>
 80105fc:	6861      	ldr	r1, [r4, #4]
 80105fe:	4638      	mov	r0, r7
 8010600:	3101      	adds	r1, #1
 8010602:	f7ff ff79 	bl	80104f8 <_Balloc>
 8010606:	4680      	mov	r8, r0
 8010608:	b928      	cbnz	r0, 8010616 <__multadd+0x5a>
 801060a:	4602      	mov	r2, r0
 801060c:	4b0c      	ldr	r3, [pc, #48]	; (8010640 <__multadd+0x84>)
 801060e:	480d      	ldr	r0, [pc, #52]	; (8010644 <__multadd+0x88>)
 8010610:	21b5      	movs	r1, #181	; 0xb5
 8010612:	f000 fc77 	bl	8010f04 <__assert_func>
 8010616:	6922      	ldr	r2, [r4, #16]
 8010618:	3202      	adds	r2, #2
 801061a:	f104 010c 	add.w	r1, r4, #12
 801061e:	0092      	lsls	r2, r2, #2
 8010620:	300c      	adds	r0, #12
 8010622:	f7fe f817 	bl	800e654 <memcpy>
 8010626:	4621      	mov	r1, r4
 8010628:	4638      	mov	r0, r7
 801062a:	f7ff ffa5 	bl	8010578 <_Bfree>
 801062e:	4644      	mov	r4, r8
 8010630:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010634:	3501      	adds	r5, #1
 8010636:	615e      	str	r6, [r3, #20]
 8010638:	6125      	str	r5, [r4, #16]
 801063a:	4620      	mov	r0, r4
 801063c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010640:	080135d7 	.word	0x080135d7
 8010644:	080135e8 	.word	0x080135e8

08010648 <__hi0bits>:
 8010648:	0c03      	lsrs	r3, r0, #16
 801064a:	041b      	lsls	r3, r3, #16
 801064c:	b9d3      	cbnz	r3, 8010684 <__hi0bits+0x3c>
 801064e:	0400      	lsls	r0, r0, #16
 8010650:	2310      	movs	r3, #16
 8010652:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010656:	bf04      	itt	eq
 8010658:	0200      	lsleq	r0, r0, #8
 801065a:	3308      	addeq	r3, #8
 801065c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010660:	bf04      	itt	eq
 8010662:	0100      	lsleq	r0, r0, #4
 8010664:	3304      	addeq	r3, #4
 8010666:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801066a:	bf04      	itt	eq
 801066c:	0080      	lsleq	r0, r0, #2
 801066e:	3302      	addeq	r3, #2
 8010670:	2800      	cmp	r0, #0
 8010672:	db05      	blt.n	8010680 <__hi0bits+0x38>
 8010674:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010678:	f103 0301 	add.w	r3, r3, #1
 801067c:	bf08      	it	eq
 801067e:	2320      	moveq	r3, #32
 8010680:	4618      	mov	r0, r3
 8010682:	4770      	bx	lr
 8010684:	2300      	movs	r3, #0
 8010686:	e7e4      	b.n	8010652 <__hi0bits+0xa>

08010688 <__lo0bits>:
 8010688:	6803      	ldr	r3, [r0, #0]
 801068a:	f013 0207 	ands.w	r2, r3, #7
 801068e:	4601      	mov	r1, r0
 8010690:	d00b      	beq.n	80106aa <__lo0bits+0x22>
 8010692:	07da      	lsls	r2, r3, #31
 8010694:	d423      	bmi.n	80106de <__lo0bits+0x56>
 8010696:	0798      	lsls	r0, r3, #30
 8010698:	bf49      	itett	mi
 801069a:	085b      	lsrmi	r3, r3, #1
 801069c:	089b      	lsrpl	r3, r3, #2
 801069e:	2001      	movmi	r0, #1
 80106a0:	600b      	strmi	r3, [r1, #0]
 80106a2:	bf5c      	itt	pl
 80106a4:	600b      	strpl	r3, [r1, #0]
 80106a6:	2002      	movpl	r0, #2
 80106a8:	4770      	bx	lr
 80106aa:	b298      	uxth	r0, r3
 80106ac:	b9a8      	cbnz	r0, 80106da <__lo0bits+0x52>
 80106ae:	0c1b      	lsrs	r3, r3, #16
 80106b0:	2010      	movs	r0, #16
 80106b2:	b2da      	uxtb	r2, r3
 80106b4:	b90a      	cbnz	r2, 80106ba <__lo0bits+0x32>
 80106b6:	3008      	adds	r0, #8
 80106b8:	0a1b      	lsrs	r3, r3, #8
 80106ba:	071a      	lsls	r2, r3, #28
 80106bc:	bf04      	itt	eq
 80106be:	091b      	lsreq	r3, r3, #4
 80106c0:	3004      	addeq	r0, #4
 80106c2:	079a      	lsls	r2, r3, #30
 80106c4:	bf04      	itt	eq
 80106c6:	089b      	lsreq	r3, r3, #2
 80106c8:	3002      	addeq	r0, #2
 80106ca:	07da      	lsls	r2, r3, #31
 80106cc:	d403      	bmi.n	80106d6 <__lo0bits+0x4e>
 80106ce:	085b      	lsrs	r3, r3, #1
 80106d0:	f100 0001 	add.w	r0, r0, #1
 80106d4:	d005      	beq.n	80106e2 <__lo0bits+0x5a>
 80106d6:	600b      	str	r3, [r1, #0]
 80106d8:	4770      	bx	lr
 80106da:	4610      	mov	r0, r2
 80106dc:	e7e9      	b.n	80106b2 <__lo0bits+0x2a>
 80106de:	2000      	movs	r0, #0
 80106e0:	4770      	bx	lr
 80106e2:	2020      	movs	r0, #32
 80106e4:	4770      	bx	lr
	...

080106e8 <__i2b>:
 80106e8:	b510      	push	{r4, lr}
 80106ea:	460c      	mov	r4, r1
 80106ec:	2101      	movs	r1, #1
 80106ee:	f7ff ff03 	bl	80104f8 <_Balloc>
 80106f2:	4602      	mov	r2, r0
 80106f4:	b928      	cbnz	r0, 8010702 <__i2b+0x1a>
 80106f6:	4b05      	ldr	r3, [pc, #20]	; (801070c <__i2b+0x24>)
 80106f8:	4805      	ldr	r0, [pc, #20]	; (8010710 <__i2b+0x28>)
 80106fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80106fe:	f000 fc01 	bl	8010f04 <__assert_func>
 8010702:	2301      	movs	r3, #1
 8010704:	6144      	str	r4, [r0, #20]
 8010706:	6103      	str	r3, [r0, #16]
 8010708:	bd10      	pop	{r4, pc}
 801070a:	bf00      	nop
 801070c:	080135d7 	.word	0x080135d7
 8010710:	080135e8 	.word	0x080135e8

08010714 <__multiply>:
 8010714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010718:	4691      	mov	r9, r2
 801071a:	690a      	ldr	r2, [r1, #16]
 801071c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010720:	429a      	cmp	r2, r3
 8010722:	bfb8      	it	lt
 8010724:	460b      	movlt	r3, r1
 8010726:	460c      	mov	r4, r1
 8010728:	bfbc      	itt	lt
 801072a:	464c      	movlt	r4, r9
 801072c:	4699      	movlt	r9, r3
 801072e:	6927      	ldr	r7, [r4, #16]
 8010730:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010734:	68a3      	ldr	r3, [r4, #8]
 8010736:	6861      	ldr	r1, [r4, #4]
 8010738:	eb07 060a 	add.w	r6, r7, sl
 801073c:	42b3      	cmp	r3, r6
 801073e:	b085      	sub	sp, #20
 8010740:	bfb8      	it	lt
 8010742:	3101      	addlt	r1, #1
 8010744:	f7ff fed8 	bl	80104f8 <_Balloc>
 8010748:	b930      	cbnz	r0, 8010758 <__multiply+0x44>
 801074a:	4602      	mov	r2, r0
 801074c:	4b44      	ldr	r3, [pc, #272]	; (8010860 <__multiply+0x14c>)
 801074e:	4845      	ldr	r0, [pc, #276]	; (8010864 <__multiply+0x150>)
 8010750:	f240 115d 	movw	r1, #349	; 0x15d
 8010754:	f000 fbd6 	bl	8010f04 <__assert_func>
 8010758:	f100 0514 	add.w	r5, r0, #20
 801075c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010760:	462b      	mov	r3, r5
 8010762:	2200      	movs	r2, #0
 8010764:	4543      	cmp	r3, r8
 8010766:	d321      	bcc.n	80107ac <__multiply+0x98>
 8010768:	f104 0314 	add.w	r3, r4, #20
 801076c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010770:	f109 0314 	add.w	r3, r9, #20
 8010774:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010778:	9202      	str	r2, [sp, #8]
 801077a:	1b3a      	subs	r2, r7, r4
 801077c:	3a15      	subs	r2, #21
 801077e:	f022 0203 	bic.w	r2, r2, #3
 8010782:	3204      	adds	r2, #4
 8010784:	f104 0115 	add.w	r1, r4, #21
 8010788:	428f      	cmp	r7, r1
 801078a:	bf38      	it	cc
 801078c:	2204      	movcc	r2, #4
 801078e:	9201      	str	r2, [sp, #4]
 8010790:	9a02      	ldr	r2, [sp, #8]
 8010792:	9303      	str	r3, [sp, #12]
 8010794:	429a      	cmp	r2, r3
 8010796:	d80c      	bhi.n	80107b2 <__multiply+0x9e>
 8010798:	2e00      	cmp	r6, #0
 801079a:	dd03      	ble.n	80107a4 <__multiply+0x90>
 801079c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d05a      	beq.n	801085a <__multiply+0x146>
 80107a4:	6106      	str	r6, [r0, #16]
 80107a6:	b005      	add	sp, #20
 80107a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ac:	f843 2b04 	str.w	r2, [r3], #4
 80107b0:	e7d8      	b.n	8010764 <__multiply+0x50>
 80107b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80107b6:	f1ba 0f00 	cmp.w	sl, #0
 80107ba:	d024      	beq.n	8010806 <__multiply+0xf2>
 80107bc:	f104 0e14 	add.w	lr, r4, #20
 80107c0:	46a9      	mov	r9, r5
 80107c2:	f04f 0c00 	mov.w	ip, #0
 80107c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80107ca:	f8d9 1000 	ldr.w	r1, [r9]
 80107ce:	fa1f fb82 	uxth.w	fp, r2
 80107d2:	b289      	uxth	r1, r1
 80107d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80107d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80107dc:	f8d9 2000 	ldr.w	r2, [r9]
 80107e0:	4461      	add	r1, ip
 80107e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80107e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80107ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80107ee:	b289      	uxth	r1, r1
 80107f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80107f4:	4577      	cmp	r7, lr
 80107f6:	f849 1b04 	str.w	r1, [r9], #4
 80107fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80107fe:	d8e2      	bhi.n	80107c6 <__multiply+0xb2>
 8010800:	9a01      	ldr	r2, [sp, #4]
 8010802:	f845 c002 	str.w	ip, [r5, r2]
 8010806:	9a03      	ldr	r2, [sp, #12]
 8010808:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801080c:	3304      	adds	r3, #4
 801080e:	f1b9 0f00 	cmp.w	r9, #0
 8010812:	d020      	beq.n	8010856 <__multiply+0x142>
 8010814:	6829      	ldr	r1, [r5, #0]
 8010816:	f104 0c14 	add.w	ip, r4, #20
 801081a:	46ae      	mov	lr, r5
 801081c:	f04f 0a00 	mov.w	sl, #0
 8010820:	f8bc b000 	ldrh.w	fp, [ip]
 8010824:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010828:	fb09 220b 	mla	r2, r9, fp, r2
 801082c:	4492      	add	sl, r2
 801082e:	b289      	uxth	r1, r1
 8010830:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010834:	f84e 1b04 	str.w	r1, [lr], #4
 8010838:	f85c 2b04 	ldr.w	r2, [ip], #4
 801083c:	f8be 1000 	ldrh.w	r1, [lr]
 8010840:	0c12      	lsrs	r2, r2, #16
 8010842:	fb09 1102 	mla	r1, r9, r2, r1
 8010846:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801084a:	4567      	cmp	r7, ip
 801084c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010850:	d8e6      	bhi.n	8010820 <__multiply+0x10c>
 8010852:	9a01      	ldr	r2, [sp, #4]
 8010854:	50a9      	str	r1, [r5, r2]
 8010856:	3504      	adds	r5, #4
 8010858:	e79a      	b.n	8010790 <__multiply+0x7c>
 801085a:	3e01      	subs	r6, #1
 801085c:	e79c      	b.n	8010798 <__multiply+0x84>
 801085e:	bf00      	nop
 8010860:	080135d7 	.word	0x080135d7
 8010864:	080135e8 	.word	0x080135e8

08010868 <__pow5mult>:
 8010868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801086c:	4615      	mov	r5, r2
 801086e:	f012 0203 	ands.w	r2, r2, #3
 8010872:	4606      	mov	r6, r0
 8010874:	460f      	mov	r7, r1
 8010876:	d007      	beq.n	8010888 <__pow5mult+0x20>
 8010878:	4c25      	ldr	r4, [pc, #148]	; (8010910 <__pow5mult+0xa8>)
 801087a:	3a01      	subs	r2, #1
 801087c:	2300      	movs	r3, #0
 801087e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010882:	f7ff fe9b 	bl	80105bc <__multadd>
 8010886:	4607      	mov	r7, r0
 8010888:	10ad      	asrs	r5, r5, #2
 801088a:	d03d      	beq.n	8010908 <__pow5mult+0xa0>
 801088c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801088e:	b97c      	cbnz	r4, 80108b0 <__pow5mult+0x48>
 8010890:	2010      	movs	r0, #16
 8010892:	f7fd fed7 	bl	800e644 <malloc>
 8010896:	4602      	mov	r2, r0
 8010898:	6270      	str	r0, [r6, #36]	; 0x24
 801089a:	b928      	cbnz	r0, 80108a8 <__pow5mult+0x40>
 801089c:	4b1d      	ldr	r3, [pc, #116]	; (8010914 <__pow5mult+0xac>)
 801089e:	481e      	ldr	r0, [pc, #120]	; (8010918 <__pow5mult+0xb0>)
 80108a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80108a4:	f000 fb2e 	bl	8010f04 <__assert_func>
 80108a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80108ac:	6004      	str	r4, [r0, #0]
 80108ae:	60c4      	str	r4, [r0, #12]
 80108b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80108b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80108b8:	b94c      	cbnz	r4, 80108ce <__pow5mult+0x66>
 80108ba:	f240 2171 	movw	r1, #625	; 0x271
 80108be:	4630      	mov	r0, r6
 80108c0:	f7ff ff12 	bl	80106e8 <__i2b>
 80108c4:	2300      	movs	r3, #0
 80108c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80108ca:	4604      	mov	r4, r0
 80108cc:	6003      	str	r3, [r0, #0]
 80108ce:	f04f 0900 	mov.w	r9, #0
 80108d2:	07eb      	lsls	r3, r5, #31
 80108d4:	d50a      	bpl.n	80108ec <__pow5mult+0x84>
 80108d6:	4639      	mov	r1, r7
 80108d8:	4622      	mov	r2, r4
 80108da:	4630      	mov	r0, r6
 80108dc:	f7ff ff1a 	bl	8010714 <__multiply>
 80108e0:	4639      	mov	r1, r7
 80108e2:	4680      	mov	r8, r0
 80108e4:	4630      	mov	r0, r6
 80108e6:	f7ff fe47 	bl	8010578 <_Bfree>
 80108ea:	4647      	mov	r7, r8
 80108ec:	106d      	asrs	r5, r5, #1
 80108ee:	d00b      	beq.n	8010908 <__pow5mult+0xa0>
 80108f0:	6820      	ldr	r0, [r4, #0]
 80108f2:	b938      	cbnz	r0, 8010904 <__pow5mult+0x9c>
 80108f4:	4622      	mov	r2, r4
 80108f6:	4621      	mov	r1, r4
 80108f8:	4630      	mov	r0, r6
 80108fa:	f7ff ff0b 	bl	8010714 <__multiply>
 80108fe:	6020      	str	r0, [r4, #0]
 8010900:	f8c0 9000 	str.w	r9, [r0]
 8010904:	4604      	mov	r4, r0
 8010906:	e7e4      	b.n	80108d2 <__pow5mult+0x6a>
 8010908:	4638      	mov	r0, r7
 801090a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801090e:	bf00      	nop
 8010910:	08013738 	.word	0x08013738
 8010914:	08013565 	.word	0x08013565
 8010918:	080135e8 	.word	0x080135e8

0801091c <__lshift>:
 801091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010920:	460c      	mov	r4, r1
 8010922:	6849      	ldr	r1, [r1, #4]
 8010924:	6923      	ldr	r3, [r4, #16]
 8010926:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801092a:	68a3      	ldr	r3, [r4, #8]
 801092c:	4607      	mov	r7, r0
 801092e:	4691      	mov	r9, r2
 8010930:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010934:	f108 0601 	add.w	r6, r8, #1
 8010938:	42b3      	cmp	r3, r6
 801093a:	db0b      	blt.n	8010954 <__lshift+0x38>
 801093c:	4638      	mov	r0, r7
 801093e:	f7ff fddb 	bl	80104f8 <_Balloc>
 8010942:	4605      	mov	r5, r0
 8010944:	b948      	cbnz	r0, 801095a <__lshift+0x3e>
 8010946:	4602      	mov	r2, r0
 8010948:	4b2a      	ldr	r3, [pc, #168]	; (80109f4 <__lshift+0xd8>)
 801094a:	482b      	ldr	r0, [pc, #172]	; (80109f8 <__lshift+0xdc>)
 801094c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010950:	f000 fad8 	bl	8010f04 <__assert_func>
 8010954:	3101      	adds	r1, #1
 8010956:	005b      	lsls	r3, r3, #1
 8010958:	e7ee      	b.n	8010938 <__lshift+0x1c>
 801095a:	2300      	movs	r3, #0
 801095c:	f100 0114 	add.w	r1, r0, #20
 8010960:	f100 0210 	add.w	r2, r0, #16
 8010964:	4618      	mov	r0, r3
 8010966:	4553      	cmp	r3, sl
 8010968:	db37      	blt.n	80109da <__lshift+0xbe>
 801096a:	6920      	ldr	r0, [r4, #16]
 801096c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010970:	f104 0314 	add.w	r3, r4, #20
 8010974:	f019 091f 	ands.w	r9, r9, #31
 8010978:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801097c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010980:	d02f      	beq.n	80109e2 <__lshift+0xc6>
 8010982:	f1c9 0e20 	rsb	lr, r9, #32
 8010986:	468a      	mov	sl, r1
 8010988:	f04f 0c00 	mov.w	ip, #0
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	fa02 f209 	lsl.w	r2, r2, r9
 8010992:	ea42 020c 	orr.w	r2, r2, ip
 8010996:	f84a 2b04 	str.w	r2, [sl], #4
 801099a:	f853 2b04 	ldr.w	r2, [r3], #4
 801099e:	4298      	cmp	r0, r3
 80109a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80109a4:	d8f2      	bhi.n	801098c <__lshift+0x70>
 80109a6:	1b03      	subs	r3, r0, r4
 80109a8:	3b15      	subs	r3, #21
 80109aa:	f023 0303 	bic.w	r3, r3, #3
 80109ae:	3304      	adds	r3, #4
 80109b0:	f104 0215 	add.w	r2, r4, #21
 80109b4:	4290      	cmp	r0, r2
 80109b6:	bf38      	it	cc
 80109b8:	2304      	movcc	r3, #4
 80109ba:	f841 c003 	str.w	ip, [r1, r3]
 80109be:	f1bc 0f00 	cmp.w	ip, #0
 80109c2:	d001      	beq.n	80109c8 <__lshift+0xac>
 80109c4:	f108 0602 	add.w	r6, r8, #2
 80109c8:	3e01      	subs	r6, #1
 80109ca:	4638      	mov	r0, r7
 80109cc:	612e      	str	r6, [r5, #16]
 80109ce:	4621      	mov	r1, r4
 80109d0:	f7ff fdd2 	bl	8010578 <_Bfree>
 80109d4:	4628      	mov	r0, r5
 80109d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109da:	f842 0f04 	str.w	r0, [r2, #4]!
 80109de:	3301      	adds	r3, #1
 80109e0:	e7c1      	b.n	8010966 <__lshift+0x4a>
 80109e2:	3904      	subs	r1, #4
 80109e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80109e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80109ec:	4298      	cmp	r0, r3
 80109ee:	d8f9      	bhi.n	80109e4 <__lshift+0xc8>
 80109f0:	e7ea      	b.n	80109c8 <__lshift+0xac>
 80109f2:	bf00      	nop
 80109f4:	080135d7 	.word	0x080135d7
 80109f8:	080135e8 	.word	0x080135e8

080109fc <__mcmp>:
 80109fc:	b530      	push	{r4, r5, lr}
 80109fe:	6902      	ldr	r2, [r0, #16]
 8010a00:	690c      	ldr	r4, [r1, #16]
 8010a02:	1b12      	subs	r2, r2, r4
 8010a04:	d10e      	bne.n	8010a24 <__mcmp+0x28>
 8010a06:	f100 0314 	add.w	r3, r0, #20
 8010a0a:	3114      	adds	r1, #20
 8010a0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010a10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010a14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010a18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010a1c:	42a5      	cmp	r5, r4
 8010a1e:	d003      	beq.n	8010a28 <__mcmp+0x2c>
 8010a20:	d305      	bcc.n	8010a2e <__mcmp+0x32>
 8010a22:	2201      	movs	r2, #1
 8010a24:	4610      	mov	r0, r2
 8010a26:	bd30      	pop	{r4, r5, pc}
 8010a28:	4283      	cmp	r3, r0
 8010a2a:	d3f3      	bcc.n	8010a14 <__mcmp+0x18>
 8010a2c:	e7fa      	b.n	8010a24 <__mcmp+0x28>
 8010a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a32:	e7f7      	b.n	8010a24 <__mcmp+0x28>

08010a34 <__mdiff>:
 8010a34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a38:	460c      	mov	r4, r1
 8010a3a:	4606      	mov	r6, r0
 8010a3c:	4611      	mov	r1, r2
 8010a3e:	4620      	mov	r0, r4
 8010a40:	4690      	mov	r8, r2
 8010a42:	f7ff ffdb 	bl	80109fc <__mcmp>
 8010a46:	1e05      	subs	r5, r0, #0
 8010a48:	d110      	bne.n	8010a6c <__mdiff+0x38>
 8010a4a:	4629      	mov	r1, r5
 8010a4c:	4630      	mov	r0, r6
 8010a4e:	f7ff fd53 	bl	80104f8 <_Balloc>
 8010a52:	b930      	cbnz	r0, 8010a62 <__mdiff+0x2e>
 8010a54:	4b3a      	ldr	r3, [pc, #232]	; (8010b40 <__mdiff+0x10c>)
 8010a56:	4602      	mov	r2, r0
 8010a58:	f240 2132 	movw	r1, #562	; 0x232
 8010a5c:	4839      	ldr	r0, [pc, #228]	; (8010b44 <__mdiff+0x110>)
 8010a5e:	f000 fa51 	bl	8010f04 <__assert_func>
 8010a62:	2301      	movs	r3, #1
 8010a64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010a68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a6c:	bfa4      	itt	ge
 8010a6e:	4643      	movge	r3, r8
 8010a70:	46a0      	movge	r8, r4
 8010a72:	4630      	mov	r0, r6
 8010a74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010a78:	bfa6      	itte	ge
 8010a7a:	461c      	movge	r4, r3
 8010a7c:	2500      	movge	r5, #0
 8010a7e:	2501      	movlt	r5, #1
 8010a80:	f7ff fd3a 	bl	80104f8 <_Balloc>
 8010a84:	b920      	cbnz	r0, 8010a90 <__mdiff+0x5c>
 8010a86:	4b2e      	ldr	r3, [pc, #184]	; (8010b40 <__mdiff+0x10c>)
 8010a88:	4602      	mov	r2, r0
 8010a8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010a8e:	e7e5      	b.n	8010a5c <__mdiff+0x28>
 8010a90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010a94:	6926      	ldr	r6, [r4, #16]
 8010a96:	60c5      	str	r5, [r0, #12]
 8010a98:	f104 0914 	add.w	r9, r4, #20
 8010a9c:	f108 0514 	add.w	r5, r8, #20
 8010aa0:	f100 0e14 	add.w	lr, r0, #20
 8010aa4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010aa8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010aac:	f108 0210 	add.w	r2, r8, #16
 8010ab0:	46f2      	mov	sl, lr
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	f859 3b04 	ldr.w	r3, [r9], #4
 8010ab8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010abc:	fa1f f883 	uxth.w	r8, r3
 8010ac0:	fa11 f18b 	uxtah	r1, r1, fp
 8010ac4:	0c1b      	lsrs	r3, r3, #16
 8010ac6:	eba1 0808 	sub.w	r8, r1, r8
 8010aca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010ace:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010ad2:	fa1f f888 	uxth.w	r8, r8
 8010ad6:	1419      	asrs	r1, r3, #16
 8010ad8:	454e      	cmp	r6, r9
 8010ada:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010ade:	f84a 3b04 	str.w	r3, [sl], #4
 8010ae2:	d8e7      	bhi.n	8010ab4 <__mdiff+0x80>
 8010ae4:	1b33      	subs	r3, r6, r4
 8010ae6:	3b15      	subs	r3, #21
 8010ae8:	f023 0303 	bic.w	r3, r3, #3
 8010aec:	3304      	adds	r3, #4
 8010aee:	3415      	adds	r4, #21
 8010af0:	42a6      	cmp	r6, r4
 8010af2:	bf38      	it	cc
 8010af4:	2304      	movcc	r3, #4
 8010af6:	441d      	add	r5, r3
 8010af8:	4473      	add	r3, lr
 8010afa:	469e      	mov	lr, r3
 8010afc:	462e      	mov	r6, r5
 8010afe:	4566      	cmp	r6, ip
 8010b00:	d30e      	bcc.n	8010b20 <__mdiff+0xec>
 8010b02:	f10c 0203 	add.w	r2, ip, #3
 8010b06:	1b52      	subs	r2, r2, r5
 8010b08:	f022 0203 	bic.w	r2, r2, #3
 8010b0c:	3d03      	subs	r5, #3
 8010b0e:	45ac      	cmp	ip, r5
 8010b10:	bf38      	it	cc
 8010b12:	2200      	movcc	r2, #0
 8010b14:	441a      	add	r2, r3
 8010b16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010b1a:	b17b      	cbz	r3, 8010b3c <__mdiff+0x108>
 8010b1c:	6107      	str	r7, [r0, #16]
 8010b1e:	e7a3      	b.n	8010a68 <__mdiff+0x34>
 8010b20:	f856 8b04 	ldr.w	r8, [r6], #4
 8010b24:	fa11 f288 	uxtah	r2, r1, r8
 8010b28:	1414      	asrs	r4, r2, #16
 8010b2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010b2e:	b292      	uxth	r2, r2
 8010b30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010b34:	f84e 2b04 	str.w	r2, [lr], #4
 8010b38:	1421      	asrs	r1, r4, #16
 8010b3a:	e7e0      	b.n	8010afe <__mdiff+0xca>
 8010b3c:	3f01      	subs	r7, #1
 8010b3e:	e7ea      	b.n	8010b16 <__mdiff+0xe2>
 8010b40:	080135d7 	.word	0x080135d7
 8010b44:	080135e8 	.word	0x080135e8

08010b48 <__d2b>:
 8010b48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b4c:	4689      	mov	r9, r1
 8010b4e:	2101      	movs	r1, #1
 8010b50:	ec57 6b10 	vmov	r6, r7, d0
 8010b54:	4690      	mov	r8, r2
 8010b56:	f7ff fccf 	bl	80104f8 <_Balloc>
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	b930      	cbnz	r0, 8010b6c <__d2b+0x24>
 8010b5e:	4602      	mov	r2, r0
 8010b60:	4b25      	ldr	r3, [pc, #148]	; (8010bf8 <__d2b+0xb0>)
 8010b62:	4826      	ldr	r0, [pc, #152]	; (8010bfc <__d2b+0xb4>)
 8010b64:	f240 310a 	movw	r1, #778	; 0x30a
 8010b68:	f000 f9cc 	bl	8010f04 <__assert_func>
 8010b6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010b70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010b74:	bb35      	cbnz	r5, 8010bc4 <__d2b+0x7c>
 8010b76:	2e00      	cmp	r6, #0
 8010b78:	9301      	str	r3, [sp, #4]
 8010b7a:	d028      	beq.n	8010bce <__d2b+0x86>
 8010b7c:	4668      	mov	r0, sp
 8010b7e:	9600      	str	r6, [sp, #0]
 8010b80:	f7ff fd82 	bl	8010688 <__lo0bits>
 8010b84:	9900      	ldr	r1, [sp, #0]
 8010b86:	b300      	cbz	r0, 8010bca <__d2b+0x82>
 8010b88:	9a01      	ldr	r2, [sp, #4]
 8010b8a:	f1c0 0320 	rsb	r3, r0, #32
 8010b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8010b92:	430b      	orrs	r3, r1
 8010b94:	40c2      	lsrs	r2, r0
 8010b96:	6163      	str	r3, [r4, #20]
 8010b98:	9201      	str	r2, [sp, #4]
 8010b9a:	9b01      	ldr	r3, [sp, #4]
 8010b9c:	61a3      	str	r3, [r4, #24]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	bf14      	ite	ne
 8010ba2:	2202      	movne	r2, #2
 8010ba4:	2201      	moveq	r2, #1
 8010ba6:	6122      	str	r2, [r4, #16]
 8010ba8:	b1d5      	cbz	r5, 8010be0 <__d2b+0x98>
 8010baa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010bae:	4405      	add	r5, r0
 8010bb0:	f8c9 5000 	str.w	r5, [r9]
 8010bb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010bb8:	f8c8 0000 	str.w	r0, [r8]
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	b003      	add	sp, #12
 8010bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010bc8:	e7d5      	b.n	8010b76 <__d2b+0x2e>
 8010bca:	6161      	str	r1, [r4, #20]
 8010bcc:	e7e5      	b.n	8010b9a <__d2b+0x52>
 8010bce:	a801      	add	r0, sp, #4
 8010bd0:	f7ff fd5a 	bl	8010688 <__lo0bits>
 8010bd4:	9b01      	ldr	r3, [sp, #4]
 8010bd6:	6163      	str	r3, [r4, #20]
 8010bd8:	2201      	movs	r2, #1
 8010bda:	6122      	str	r2, [r4, #16]
 8010bdc:	3020      	adds	r0, #32
 8010bde:	e7e3      	b.n	8010ba8 <__d2b+0x60>
 8010be0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010be4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010be8:	f8c9 0000 	str.w	r0, [r9]
 8010bec:	6918      	ldr	r0, [r3, #16]
 8010bee:	f7ff fd2b 	bl	8010648 <__hi0bits>
 8010bf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010bf6:	e7df      	b.n	8010bb8 <__d2b+0x70>
 8010bf8:	080135d7 	.word	0x080135d7
 8010bfc:	080135e8 	.word	0x080135e8

08010c00 <_calloc_r>:
 8010c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c02:	fba1 2402 	umull	r2, r4, r1, r2
 8010c06:	b94c      	cbnz	r4, 8010c1c <_calloc_r+0x1c>
 8010c08:	4611      	mov	r1, r2
 8010c0a:	9201      	str	r2, [sp, #4]
 8010c0c:	f7fd fda4 	bl	800e758 <_malloc_r>
 8010c10:	9a01      	ldr	r2, [sp, #4]
 8010c12:	4605      	mov	r5, r0
 8010c14:	b930      	cbnz	r0, 8010c24 <_calloc_r+0x24>
 8010c16:	4628      	mov	r0, r5
 8010c18:	b003      	add	sp, #12
 8010c1a:	bd30      	pop	{r4, r5, pc}
 8010c1c:	220c      	movs	r2, #12
 8010c1e:	6002      	str	r2, [r0, #0]
 8010c20:	2500      	movs	r5, #0
 8010c22:	e7f8      	b.n	8010c16 <_calloc_r+0x16>
 8010c24:	4621      	mov	r1, r4
 8010c26:	f7fd fd23 	bl	800e670 <memset>
 8010c2a:	e7f4      	b.n	8010c16 <_calloc_r+0x16>

08010c2c <__sfputc_r>:
 8010c2c:	6893      	ldr	r3, [r2, #8]
 8010c2e:	3b01      	subs	r3, #1
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	b410      	push	{r4}
 8010c34:	6093      	str	r3, [r2, #8]
 8010c36:	da08      	bge.n	8010c4a <__sfputc_r+0x1e>
 8010c38:	6994      	ldr	r4, [r2, #24]
 8010c3a:	42a3      	cmp	r3, r4
 8010c3c:	db01      	blt.n	8010c42 <__sfputc_r+0x16>
 8010c3e:	290a      	cmp	r1, #10
 8010c40:	d103      	bne.n	8010c4a <__sfputc_r+0x1e>
 8010c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c46:	f7fe bbb1 	b.w	800f3ac <__swbuf_r>
 8010c4a:	6813      	ldr	r3, [r2, #0]
 8010c4c:	1c58      	adds	r0, r3, #1
 8010c4e:	6010      	str	r0, [r2, #0]
 8010c50:	7019      	strb	r1, [r3, #0]
 8010c52:	4608      	mov	r0, r1
 8010c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c58:	4770      	bx	lr

08010c5a <__sfputs_r>:
 8010c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c5c:	4606      	mov	r6, r0
 8010c5e:	460f      	mov	r7, r1
 8010c60:	4614      	mov	r4, r2
 8010c62:	18d5      	adds	r5, r2, r3
 8010c64:	42ac      	cmp	r4, r5
 8010c66:	d101      	bne.n	8010c6c <__sfputs_r+0x12>
 8010c68:	2000      	movs	r0, #0
 8010c6a:	e007      	b.n	8010c7c <__sfputs_r+0x22>
 8010c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c70:	463a      	mov	r2, r7
 8010c72:	4630      	mov	r0, r6
 8010c74:	f7ff ffda 	bl	8010c2c <__sfputc_r>
 8010c78:	1c43      	adds	r3, r0, #1
 8010c7a:	d1f3      	bne.n	8010c64 <__sfputs_r+0xa>
 8010c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010c80 <_vfiprintf_r>:
 8010c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c84:	460d      	mov	r5, r1
 8010c86:	b09d      	sub	sp, #116	; 0x74
 8010c88:	4614      	mov	r4, r2
 8010c8a:	4698      	mov	r8, r3
 8010c8c:	4606      	mov	r6, r0
 8010c8e:	b118      	cbz	r0, 8010c98 <_vfiprintf_r+0x18>
 8010c90:	6983      	ldr	r3, [r0, #24]
 8010c92:	b90b      	cbnz	r3, 8010c98 <_vfiprintf_r+0x18>
 8010c94:	f7fd fc10 	bl	800e4b8 <__sinit>
 8010c98:	4b89      	ldr	r3, [pc, #548]	; (8010ec0 <_vfiprintf_r+0x240>)
 8010c9a:	429d      	cmp	r5, r3
 8010c9c:	d11b      	bne.n	8010cd6 <_vfiprintf_r+0x56>
 8010c9e:	6875      	ldr	r5, [r6, #4]
 8010ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ca2:	07d9      	lsls	r1, r3, #31
 8010ca4:	d405      	bmi.n	8010cb2 <_vfiprintf_r+0x32>
 8010ca6:	89ab      	ldrh	r3, [r5, #12]
 8010ca8:	059a      	lsls	r2, r3, #22
 8010caa:	d402      	bmi.n	8010cb2 <_vfiprintf_r+0x32>
 8010cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cae:	f7fd fcc6 	bl	800e63e <__retarget_lock_acquire_recursive>
 8010cb2:	89ab      	ldrh	r3, [r5, #12]
 8010cb4:	071b      	lsls	r3, r3, #28
 8010cb6:	d501      	bpl.n	8010cbc <_vfiprintf_r+0x3c>
 8010cb8:	692b      	ldr	r3, [r5, #16]
 8010cba:	b9eb      	cbnz	r3, 8010cf8 <_vfiprintf_r+0x78>
 8010cbc:	4629      	mov	r1, r5
 8010cbe:	4630      	mov	r0, r6
 8010cc0:	f7fe fbd8 	bl	800f474 <__swsetup_r>
 8010cc4:	b1c0      	cbz	r0, 8010cf8 <_vfiprintf_r+0x78>
 8010cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cc8:	07dc      	lsls	r4, r3, #31
 8010cca:	d50e      	bpl.n	8010cea <_vfiprintf_r+0x6a>
 8010ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8010cd0:	b01d      	add	sp, #116	; 0x74
 8010cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cd6:	4b7b      	ldr	r3, [pc, #492]	; (8010ec4 <_vfiprintf_r+0x244>)
 8010cd8:	429d      	cmp	r5, r3
 8010cda:	d101      	bne.n	8010ce0 <_vfiprintf_r+0x60>
 8010cdc:	68b5      	ldr	r5, [r6, #8]
 8010cde:	e7df      	b.n	8010ca0 <_vfiprintf_r+0x20>
 8010ce0:	4b79      	ldr	r3, [pc, #484]	; (8010ec8 <_vfiprintf_r+0x248>)
 8010ce2:	429d      	cmp	r5, r3
 8010ce4:	bf08      	it	eq
 8010ce6:	68f5      	ldreq	r5, [r6, #12]
 8010ce8:	e7da      	b.n	8010ca0 <_vfiprintf_r+0x20>
 8010cea:	89ab      	ldrh	r3, [r5, #12]
 8010cec:	0598      	lsls	r0, r3, #22
 8010cee:	d4ed      	bmi.n	8010ccc <_vfiprintf_r+0x4c>
 8010cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cf2:	f7fd fca5 	bl	800e640 <__retarget_lock_release_recursive>
 8010cf6:	e7e9      	b.n	8010ccc <_vfiprintf_r+0x4c>
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8010cfc:	2320      	movs	r3, #32
 8010cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d02:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d06:	2330      	movs	r3, #48	; 0x30
 8010d08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010ecc <_vfiprintf_r+0x24c>
 8010d0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d10:	f04f 0901 	mov.w	r9, #1
 8010d14:	4623      	mov	r3, r4
 8010d16:	469a      	mov	sl, r3
 8010d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d1c:	b10a      	cbz	r2, 8010d22 <_vfiprintf_r+0xa2>
 8010d1e:	2a25      	cmp	r2, #37	; 0x25
 8010d20:	d1f9      	bne.n	8010d16 <_vfiprintf_r+0x96>
 8010d22:	ebba 0b04 	subs.w	fp, sl, r4
 8010d26:	d00b      	beq.n	8010d40 <_vfiprintf_r+0xc0>
 8010d28:	465b      	mov	r3, fp
 8010d2a:	4622      	mov	r2, r4
 8010d2c:	4629      	mov	r1, r5
 8010d2e:	4630      	mov	r0, r6
 8010d30:	f7ff ff93 	bl	8010c5a <__sfputs_r>
 8010d34:	3001      	adds	r0, #1
 8010d36:	f000 80aa 	beq.w	8010e8e <_vfiprintf_r+0x20e>
 8010d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d3c:	445a      	add	r2, fp
 8010d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8010d40:	f89a 3000 	ldrb.w	r3, [sl]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	f000 80a2 	beq.w	8010e8e <_vfiprintf_r+0x20e>
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d54:	f10a 0a01 	add.w	sl, sl, #1
 8010d58:	9304      	str	r3, [sp, #16]
 8010d5a:	9307      	str	r3, [sp, #28]
 8010d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d60:	931a      	str	r3, [sp, #104]	; 0x68
 8010d62:	4654      	mov	r4, sl
 8010d64:	2205      	movs	r2, #5
 8010d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d6a:	4858      	ldr	r0, [pc, #352]	; (8010ecc <_vfiprintf_r+0x24c>)
 8010d6c:	f7ef fa38 	bl	80001e0 <memchr>
 8010d70:	9a04      	ldr	r2, [sp, #16]
 8010d72:	b9d8      	cbnz	r0, 8010dac <_vfiprintf_r+0x12c>
 8010d74:	06d1      	lsls	r1, r2, #27
 8010d76:	bf44      	itt	mi
 8010d78:	2320      	movmi	r3, #32
 8010d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d7e:	0713      	lsls	r3, r2, #28
 8010d80:	bf44      	itt	mi
 8010d82:	232b      	movmi	r3, #43	; 0x2b
 8010d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d88:	f89a 3000 	ldrb.w	r3, [sl]
 8010d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8010d8e:	d015      	beq.n	8010dbc <_vfiprintf_r+0x13c>
 8010d90:	9a07      	ldr	r2, [sp, #28]
 8010d92:	4654      	mov	r4, sl
 8010d94:	2000      	movs	r0, #0
 8010d96:	f04f 0c0a 	mov.w	ip, #10
 8010d9a:	4621      	mov	r1, r4
 8010d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010da0:	3b30      	subs	r3, #48	; 0x30
 8010da2:	2b09      	cmp	r3, #9
 8010da4:	d94e      	bls.n	8010e44 <_vfiprintf_r+0x1c4>
 8010da6:	b1b0      	cbz	r0, 8010dd6 <_vfiprintf_r+0x156>
 8010da8:	9207      	str	r2, [sp, #28]
 8010daa:	e014      	b.n	8010dd6 <_vfiprintf_r+0x156>
 8010dac:	eba0 0308 	sub.w	r3, r0, r8
 8010db0:	fa09 f303 	lsl.w	r3, r9, r3
 8010db4:	4313      	orrs	r3, r2
 8010db6:	9304      	str	r3, [sp, #16]
 8010db8:	46a2      	mov	sl, r4
 8010dba:	e7d2      	b.n	8010d62 <_vfiprintf_r+0xe2>
 8010dbc:	9b03      	ldr	r3, [sp, #12]
 8010dbe:	1d19      	adds	r1, r3, #4
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	9103      	str	r1, [sp, #12]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	bfbb      	ittet	lt
 8010dc8:	425b      	neglt	r3, r3
 8010dca:	f042 0202 	orrlt.w	r2, r2, #2
 8010dce:	9307      	strge	r3, [sp, #28]
 8010dd0:	9307      	strlt	r3, [sp, #28]
 8010dd2:	bfb8      	it	lt
 8010dd4:	9204      	strlt	r2, [sp, #16]
 8010dd6:	7823      	ldrb	r3, [r4, #0]
 8010dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8010dda:	d10c      	bne.n	8010df6 <_vfiprintf_r+0x176>
 8010ddc:	7863      	ldrb	r3, [r4, #1]
 8010dde:	2b2a      	cmp	r3, #42	; 0x2a
 8010de0:	d135      	bne.n	8010e4e <_vfiprintf_r+0x1ce>
 8010de2:	9b03      	ldr	r3, [sp, #12]
 8010de4:	1d1a      	adds	r2, r3, #4
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	9203      	str	r2, [sp, #12]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	bfb8      	it	lt
 8010dee:	f04f 33ff 	movlt.w	r3, #4294967295
 8010df2:	3402      	adds	r4, #2
 8010df4:	9305      	str	r3, [sp, #20]
 8010df6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010edc <_vfiprintf_r+0x25c>
 8010dfa:	7821      	ldrb	r1, [r4, #0]
 8010dfc:	2203      	movs	r2, #3
 8010dfe:	4650      	mov	r0, sl
 8010e00:	f7ef f9ee 	bl	80001e0 <memchr>
 8010e04:	b140      	cbz	r0, 8010e18 <_vfiprintf_r+0x198>
 8010e06:	2340      	movs	r3, #64	; 0x40
 8010e08:	eba0 000a 	sub.w	r0, r0, sl
 8010e0c:	fa03 f000 	lsl.w	r0, r3, r0
 8010e10:	9b04      	ldr	r3, [sp, #16]
 8010e12:	4303      	orrs	r3, r0
 8010e14:	3401      	adds	r4, #1
 8010e16:	9304      	str	r3, [sp, #16]
 8010e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e1c:	482c      	ldr	r0, [pc, #176]	; (8010ed0 <_vfiprintf_r+0x250>)
 8010e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e22:	2206      	movs	r2, #6
 8010e24:	f7ef f9dc 	bl	80001e0 <memchr>
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	d03f      	beq.n	8010eac <_vfiprintf_r+0x22c>
 8010e2c:	4b29      	ldr	r3, [pc, #164]	; (8010ed4 <_vfiprintf_r+0x254>)
 8010e2e:	bb1b      	cbnz	r3, 8010e78 <_vfiprintf_r+0x1f8>
 8010e30:	9b03      	ldr	r3, [sp, #12]
 8010e32:	3307      	adds	r3, #7
 8010e34:	f023 0307 	bic.w	r3, r3, #7
 8010e38:	3308      	adds	r3, #8
 8010e3a:	9303      	str	r3, [sp, #12]
 8010e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e3e:	443b      	add	r3, r7
 8010e40:	9309      	str	r3, [sp, #36]	; 0x24
 8010e42:	e767      	b.n	8010d14 <_vfiprintf_r+0x94>
 8010e44:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e48:	460c      	mov	r4, r1
 8010e4a:	2001      	movs	r0, #1
 8010e4c:	e7a5      	b.n	8010d9a <_vfiprintf_r+0x11a>
 8010e4e:	2300      	movs	r3, #0
 8010e50:	3401      	adds	r4, #1
 8010e52:	9305      	str	r3, [sp, #20]
 8010e54:	4619      	mov	r1, r3
 8010e56:	f04f 0c0a 	mov.w	ip, #10
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e60:	3a30      	subs	r2, #48	; 0x30
 8010e62:	2a09      	cmp	r2, #9
 8010e64:	d903      	bls.n	8010e6e <_vfiprintf_r+0x1ee>
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d0c5      	beq.n	8010df6 <_vfiprintf_r+0x176>
 8010e6a:	9105      	str	r1, [sp, #20]
 8010e6c:	e7c3      	b.n	8010df6 <_vfiprintf_r+0x176>
 8010e6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e72:	4604      	mov	r4, r0
 8010e74:	2301      	movs	r3, #1
 8010e76:	e7f0      	b.n	8010e5a <_vfiprintf_r+0x1da>
 8010e78:	ab03      	add	r3, sp, #12
 8010e7a:	9300      	str	r3, [sp, #0]
 8010e7c:	462a      	mov	r2, r5
 8010e7e:	4b16      	ldr	r3, [pc, #88]	; (8010ed8 <_vfiprintf_r+0x258>)
 8010e80:	a904      	add	r1, sp, #16
 8010e82:	4630      	mov	r0, r6
 8010e84:	f7fd fd7c 	bl	800e980 <_printf_float>
 8010e88:	4607      	mov	r7, r0
 8010e8a:	1c78      	adds	r0, r7, #1
 8010e8c:	d1d6      	bne.n	8010e3c <_vfiprintf_r+0x1bc>
 8010e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e90:	07d9      	lsls	r1, r3, #31
 8010e92:	d405      	bmi.n	8010ea0 <_vfiprintf_r+0x220>
 8010e94:	89ab      	ldrh	r3, [r5, #12]
 8010e96:	059a      	lsls	r2, r3, #22
 8010e98:	d402      	bmi.n	8010ea0 <_vfiprintf_r+0x220>
 8010e9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e9c:	f7fd fbd0 	bl	800e640 <__retarget_lock_release_recursive>
 8010ea0:	89ab      	ldrh	r3, [r5, #12]
 8010ea2:	065b      	lsls	r3, r3, #25
 8010ea4:	f53f af12 	bmi.w	8010ccc <_vfiprintf_r+0x4c>
 8010ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010eaa:	e711      	b.n	8010cd0 <_vfiprintf_r+0x50>
 8010eac:	ab03      	add	r3, sp, #12
 8010eae:	9300      	str	r3, [sp, #0]
 8010eb0:	462a      	mov	r2, r5
 8010eb2:	4b09      	ldr	r3, [pc, #36]	; (8010ed8 <_vfiprintf_r+0x258>)
 8010eb4:	a904      	add	r1, sp, #16
 8010eb6:	4630      	mov	r0, r6
 8010eb8:	f7fe f806 	bl	800eec8 <_printf_i>
 8010ebc:	e7e4      	b.n	8010e88 <_vfiprintf_r+0x208>
 8010ebe:	bf00      	nop
 8010ec0:	080134e0 	.word	0x080134e0
 8010ec4:	08013500 	.word	0x08013500
 8010ec8:	080134c0 	.word	0x080134c0
 8010ecc:	08013744 	.word	0x08013744
 8010ed0:	0801374e 	.word	0x0801374e
 8010ed4:	0800e981 	.word	0x0800e981
 8010ed8:	08010c5b 	.word	0x08010c5b
 8010edc:	0801374a 	.word	0x0801374a

08010ee0 <_read_r>:
 8010ee0:	b538      	push	{r3, r4, r5, lr}
 8010ee2:	4d07      	ldr	r5, [pc, #28]	; (8010f00 <_read_r+0x20>)
 8010ee4:	4604      	mov	r4, r0
 8010ee6:	4608      	mov	r0, r1
 8010ee8:	4611      	mov	r1, r2
 8010eea:	2200      	movs	r2, #0
 8010eec:	602a      	str	r2, [r5, #0]
 8010eee:	461a      	mov	r2, r3
 8010ef0:	f7f1 f94c 	bl	800218c <_read>
 8010ef4:	1c43      	adds	r3, r0, #1
 8010ef6:	d102      	bne.n	8010efe <_read_r+0x1e>
 8010ef8:	682b      	ldr	r3, [r5, #0]
 8010efa:	b103      	cbz	r3, 8010efe <_read_r+0x1e>
 8010efc:	6023      	str	r3, [r4, #0]
 8010efe:	bd38      	pop	{r3, r4, r5, pc}
 8010f00:	2000482c 	.word	0x2000482c

08010f04 <__assert_func>:
 8010f04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f06:	4614      	mov	r4, r2
 8010f08:	461a      	mov	r2, r3
 8010f0a:	4b09      	ldr	r3, [pc, #36]	; (8010f30 <__assert_func+0x2c>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	4605      	mov	r5, r0
 8010f10:	68d8      	ldr	r0, [r3, #12]
 8010f12:	b14c      	cbz	r4, 8010f28 <__assert_func+0x24>
 8010f14:	4b07      	ldr	r3, [pc, #28]	; (8010f34 <__assert_func+0x30>)
 8010f16:	9100      	str	r1, [sp, #0]
 8010f18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010f1c:	4906      	ldr	r1, [pc, #24]	; (8010f38 <__assert_func+0x34>)
 8010f1e:	462b      	mov	r3, r5
 8010f20:	f000 f80e 	bl	8010f40 <fiprintf>
 8010f24:	f000 f85f 	bl	8010fe6 <abort>
 8010f28:	4b04      	ldr	r3, [pc, #16]	; (8010f3c <__assert_func+0x38>)
 8010f2a:	461c      	mov	r4, r3
 8010f2c:	e7f3      	b.n	8010f16 <__assert_func+0x12>
 8010f2e:	bf00      	nop
 8010f30:	200008c8 	.word	0x200008c8
 8010f34:	08013755 	.word	0x08013755
 8010f38:	08013762 	.word	0x08013762
 8010f3c:	08013790 	.word	0x08013790

08010f40 <fiprintf>:
 8010f40:	b40e      	push	{r1, r2, r3}
 8010f42:	b503      	push	{r0, r1, lr}
 8010f44:	4601      	mov	r1, r0
 8010f46:	ab03      	add	r3, sp, #12
 8010f48:	4805      	ldr	r0, [pc, #20]	; (8010f60 <fiprintf+0x20>)
 8010f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f4e:	6800      	ldr	r0, [r0, #0]
 8010f50:	9301      	str	r3, [sp, #4]
 8010f52:	f7ff fe95 	bl	8010c80 <_vfiprintf_r>
 8010f56:	b002      	add	sp, #8
 8010f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f5c:	b003      	add	sp, #12
 8010f5e:	4770      	bx	lr
 8010f60:	200008c8 	.word	0x200008c8

08010f64 <_fstat_r>:
 8010f64:	b538      	push	{r3, r4, r5, lr}
 8010f66:	4d07      	ldr	r5, [pc, #28]	; (8010f84 <_fstat_r+0x20>)
 8010f68:	2300      	movs	r3, #0
 8010f6a:	4604      	mov	r4, r0
 8010f6c:	4608      	mov	r0, r1
 8010f6e:	4611      	mov	r1, r2
 8010f70:	602b      	str	r3, [r5, #0]
 8010f72:	f7f1 f950 	bl	8002216 <_fstat>
 8010f76:	1c43      	adds	r3, r0, #1
 8010f78:	d102      	bne.n	8010f80 <_fstat_r+0x1c>
 8010f7a:	682b      	ldr	r3, [r5, #0]
 8010f7c:	b103      	cbz	r3, 8010f80 <_fstat_r+0x1c>
 8010f7e:	6023      	str	r3, [r4, #0]
 8010f80:	bd38      	pop	{r3, r4, r5, pc}
 8010f82:	bf00      	nop
 8010f84:	2000482c 	.word	0x2000482c

08010f88 <_isatty_r>:
 8010f88:	b538      	push	{r3, r4, r5, lr}
 8010f8a:	4d06      	ldr	r5, [pc, #24]	; (8010fa4 <_isatty_r+0x1c>)
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	4604      	mov	r4, r0
 8010f90:	4608      	mov	r0, r1
 8010f92:	602b      	str	r3, [r5, #0]
 8010f94:	f7f1 f94f 	bl	8002236 <_isatty>
 8010f98:	1c43      	adds	r3, r0, #1
 8010f9a:	d102      	bne.n	8010fa2 <_isatty_r+0x1a>
 8010f9c:	682b      	ldr	r3, [r5, #0]
 8010f9e:	b103      	cbz	r3, 8010fa2 <_isatty_r+0x1a>
 8010fa0:	6023      	str	r3, [r4, #0]
 8010fa2:	bd38      	pop	{r3, r4, r5, pc}
 8010fa4:	2000482c 	.word	0x2000482c

08010fa8 <__ascii_mbtowc>:
 8010fa8:	b082      	sub	sp, #8
 8010faa:	b901      	cbnz	r1, 8010fae <__ascii_mbtowc+0x6>
 8010fac:	a901      	add	r1, sp, #4
 8010fae:	b142      	cbz	r2, 8010fc2 <__ascii_mbtowc+0x1a>
 8010fb0:	b14b      	cbz	r3, 8010fc6 <__ascii_mbtowc+0x1e>
 8010fb2:	7813      	ldrb	r3, [r2, #0]
 8010fb4:	600b      	str	r3, [r1, #0]
 8010fb6:	7812      	ldrb	r2, [r2, #0]
 8010fb8:	1e10      	subs	r0, r2, #0
 8010fba:	bf18      	it	ne
 8010fbc:	2001      	movne	r0, #1
 8010fbe:	b002      	add	sp, #8
 8010fc0:	4770      	bx	lr
 8010fc2:	4610      	mov	r0, r2
 8010fc4:	e7fb      	b.n	8010fbe <__ascii_mbtowc+0x16>
 8010fc6:	f06f 0001 	mvn.w	r0, #1
 8010fca:	e7f8      	b.n	8010fbe <__ascii_mbtowc+0x16>

08010fcc <__ascii_wctomb>:
 8010fcc:	b149      	cbz	r1, 8010fe2 <__ascii_wctomb+0x16>
 8010fce:	2aff      	cmp	r2, #255	; 0xff
 8010fd0:	bf85      	ittet	hi
 8010fd2:	238a      	movhi	r3, #138	; 0x8a
 8010fd4:	6003      	strhi	r3, [r0, #0]
 8010fd6:	700a      	strbls	r2, [r1, #0]
 8010fd8:	f04f 30ff 	movhi.w	r0, #4294967295
 8010fdc:	bf98      	it	ls
 8010fde:	2001      	movls	r0, #1
 8010fe0:	4770      	bx	lr
 8010fe2:	4608      	mov	r0, r1
 8010fe4:	4770      	bx	lr

08010fe6 <abort>:
 8010fe6:	b508      	push	{r3, lr}
 8010fe8:	2006      	movs	r0, #6
 8010fea:	f000 f82b 	bl	8011044 <raise>
 8010fee:	2001      	movs	r0, #1
 8010ff0:	f7f1 f8c2 	bl	8002178 <_exit>

08010ff4 <_raise_r>:
 8010ff4:	291f      	cmp	r1, #31
 8010ff6:	b538      	push	{r3, r4, r5, lr}
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	460d      	mov	r5, r1
 8010ffc:	d904      	bls.n	8011008 <_raise_r+0x14>
 8010ffe:	2316      	movs	r3, #22
 8011000:	6003      	str	r3, [r0, #0]
 8011002:	f04f 30ff 	mov.w	r0, #4294967295
 8011006:	bd38      	pop	{r3, r4, r5, pc}
 8011008:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801100a:	b112      	cbz	r2, 8011012 <_raise_r+0x1e>
 801100c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011010:	b94b      	cbnz	r3, 8011026 <_raise_r+0x32>
 8011012:	4620      	mov	r0, r4
 8011014:	f000 f830 	bl	8011078 <_getpid_r>
 8011018:	462a      	mov	r2, r5
 801101a:	4601      	mov	r1, r0
 801101c:	4620      	mov	r0, r4
 801101e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011022:	f000 b817 	b.w	8011054 <_kill_r>
 8011026:	2b01      	cmp	r3, #1
 8011028:	d00a      	beq.n	8011040 <_raise_r+0x4c>
 801102a:	1c59      	adds	r1, r3, #1
 801102c:	d103      	bne.n	8011036 <_raise_r+0x42>
 801102e:	2316      	movs	r3, #22
 8011030:	6003      	str	r3, [r0, #0]
 8011032:	2001      	movs	r0, #1
 8011034:	e7e7      	b.n	8011006 <_raise_r+0x12>
 8011036:	2400      	movs	r4, #0
 8011038:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801103c:	4628      	mov	r0, r5
 801103e:	4798      	blx	r3
 8011040:	2000      	movs	r0, #0
 8011042:	e7e0      	b.n	8011006 <_raise_r+0x12>

08011044 <raise>:
 8011044:	4b02      	ldr	r3, [pc, #8]	; (8011050 <raise+0xc>)
 8011046:	4601      	mov	r1, r0
 8011048:	6818      	ldr	r0, [r3, #0]
 801104a:	f7ff bfd3 	b.w	8010ff4 <_raise_r>
 801104e:	bf00      	nop
 8011050:	200008c8 	.word	0x200008c8

08011054 <_kill_r>:
 8011054:	b538      	push	{r3, r4, r5, lr}
 8011056:	4d07      	ldr	r5, [pc, #28]	; (8011074 <_kill_r+0x20>)
 8011058:	2300      	movs	r3, #0
 801105a:	4604      	mov	r4, r0
 801105c:	4608      	mov	r0, r1
 801105e:	4611      	mov	r1, r2
 8011060:	602b      	str	r3, [r5, #0]
 8011062:	f7f1 f879 	bl	8002158 <_kill>
 8011066:	1c43      	adds	r3, r0, #1
 8011068:	d102      	bne.n	8011070 <_kill_r+0x1c>
 801106a:	682b      	ldr	r3, [r5, #0]
 801106c:	b103      	cbz	r3, 8011070 <_kill_r+0x1c>
 801106e:	6023      	str	r3, [r4, #0]
 8011070:	bd38      	pop	{r3, r4, r5, pc}
 8011072:	bf00      	nop
 8011074:	2000482c 	.word	0x2000482c

08011078 <_getpid_r>:
 8011078:	f7f1 b866 	b.w	8002148 <_getpid>

0801107c <expf>:
 801107c:	b508      	push	{r3, lr}
 801107e:	ed2d 8b02 	vpush	{d8}
 8011082:	eef0 8a40 	vmov.f32	s17, s0
 8011086:	f000 f82f 	bl	80110e8 <__ieee754_expf>
 801108a:	eeb0 8a40 	vmov.f32	s16, s0
 801108e:	eeb0 0a68 	vmov.f32	s0, s17
 8011092:	f000 f919 	bl	80112c8 <finitef>
 8011096:	b160      	cbz	r0, 80110b2 <expf+0x36>
 8011098:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80110d8 <expf+0x5c>
 801109c:	eef4 8ae7 	vcmpe.f32	s17, s15
 80110a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a4:	dd0a      	ble.n	80110bc <expf+0x40>
 80110a6:	f7fd f9a9 	bl	800e3fc <__errno>
 80110aa:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80110dc <expf+0x60>
 80110ae:	2322      	movs	r3, #34	; 0x22
 80110b0:	6003      	str	r3, [r0, #0]
 80110b2:	eeb0 0a48 	vmov.f32	s0, s16
 80110b6:	ecbd 8b02 	vpop	{d8}
 80110ba:	bd08      	pop	{r3, pc}
 80110bc:	eddf 7a08 	vldr	s15, [pc, #32]	; 80110e0 <expf+0x64>
 80110c0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80110c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c8:	d5f3      	bpl.n	80110b2 <expf+0x36>
 80110ca:	f7fd f997 	bl	800e3fc <__errno>
 80110ce:	2322      	movs	r3, #34	; 0x22
 80110d0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80110e4 <expf+0x68>
 80110d4:	6003      	str	r3, [r0, #0]
 80110d6:	e7ec      	b.n	80110b2 <expf+0x36>
 80110d8:	42b17180 	.word	0x42b17180
 80110dc:	7f800000 	.word	0x7f800000
 80110e0:	c2cff1b5 	.word	0xc2cff1b5
 80110e4:	00000000 	.word	0x00000000

080110e8 <__ieee754_expf>:
 80110e8:	ee10 2a10 	vmov	r2, s0
 80110ec:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80110f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80110f4:	d902      	bls.n	80110fc <__ieee754_expf+0x14>
 80110f6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80110fa:	4770      	bx	lr
 80110fc:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8011100:	d106      	bne.n	8011110 <__ieee754_expf+0x28>
 8011102:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801123c <__ieee754_expf+0x154>
 8011106:	2b00      	cmp	r3, #0
 8011108:	bf18      	it	ne
 801110a:	eeb0 0a67 	vmovne.f32	s0, s15
 801110e:	4770      	bx	lr
 8011110:	484b      	ldr	r0, [pc, #300]	; (8011240 <__ieee754_expf+0x158>)
 8011112:	4282      	cmp	r2, r0
 8011114:	dd02      	ble.n	801111c <__ieee754_expf+0x34>
 8011116:	2000      	movs	r0, #0
 8011118:	f000 b8d0 	b.w	80112bc <__math_oflowf>
 801111c:	2a00      	cmp	r2, #0
 801111e:	da05      	bge.n	801112c <__ieee754_expf+0x44>
 8011120:	4a48      	ldr	r2, [pc, #288]	; (8011244 <__ieee754_expf+0x15c>)
 8011122:	4291      	cmp	r1, r2
 8011124:	d902      	bls.n	801112c <__ieee754_expf+0x44>
 8011126:	2000      	movs	r0, #0
 8011128:	f000 b8c2 	b.w	80112b0 <__math_uflowf>
 801112c:	4a46      	ldr	r2, [pc, #280]	; (8011248 <__ieee754_expf+0x160>)
 801112e:	4291      	cmp	r1, r2
 8011130:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011134:	d952      	bls.n	80111dc <__ieee754_expf+0xf4>
 8011136:	4a45      	ldr	r2, [pc, #276]	; (801124c <__ieee754_expf+0x164>)
 8011138:	4291      	cmp	r1, r2
 801113a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801113e:	d834      	bhi.n	80111aa <__ieee754_expf+0xc2>
 8011140:	4943      	ldr	r1, [pc, #268]	; (8011250 <__ieee754_expf+0x168>)
 8011142:	4411      	add	r1, r2
 8011144:	ed91 7a00 	vldr	s14, [r1]
 8011148:	4942      	ldr	r1, [pc, #264]	; (8011254 <__ieee754_expf+0x16c>)
 801114a:	440a      	add	r2, r1
 801114c:	edd2 7a00 	vldr	s15, [r2]
 8011150:	ee30 7a47 	vsub.f32	s14, s0, s14
 8011154:	f1c3 0201 	rsb	r2, r3, #1
 8011158:	1ad2      	subs	r2, r2, r3
 801115a:	ee37 0a67 	vsub.f32	s0, s14, s15
 801115e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8011162:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8011258 <__ieee754_expf+0x170>
 8011166:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801125c <__ieee754_expf+0x174>
 801116a:	eee6 6a05 	vfma.f32	s13, s12, s10
 801116e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8011260 <__ieee754_expf+0x178>
 8011172:	eea6 5a86 	vfma.f32	s10, s13, s12
 8011176:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8011264 <__ieee754_expf+0x17c>
 801117a:	eee5 6a06 	vfma.f32	s13, s10, s12
 801117e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8011268 <__ieee754_expf+0x180>
 8011182:	eea6 5a86 	vfma.f32	s10, s13, s12
 8011186:	eef0 6a40 	vmov.f32	s13, s0
 801118a:	eee5 6a46 	vfms.f32	s13, s10, s12
 801118e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011192:	ee20 5a26 	vmul.f32	s10, s0, s13
 8011196:	bb92      	cbnz	r2, 80111fe <__ieee754_expf+0x116>
 8011198:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801119c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80111a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80111a4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80111a8:	4770      	bx	lr
 80111aa:	4b30      	ldr	r3, [pc, #192]	; (801126c <__ieee754_expf+0x184>)
 80111ac:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8011270 <__ieee754_expf+0x188>
 80111b0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8011274 <__ieee754_expf+0x18c>
 80111b4:	4413      	add	r3, r2
 80111b6:	edd3 7a00 	vldr	s15, [r3]
 80111ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80111be:	eeb0 7a40 	vmov.f32	s14, s0
 80111c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80111c6:	ee17 2a90 	vmov	r2, s15
 80111ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80111ce:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80111d2:	eddf 6a29 	vldr	s13, [pc, #164]	; 8011278 <__ieee754_expf+0x190>
 80111d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80111da:	e7be      	b.n	801115a <__ieee754_expf+0x72>
 80111dc:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 80111e0:	d20b      	bcs.n	80111fa <__ieee754_expf+0x112>
 80111e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 801127c <__ieee754_expf+0x194>
 80111e6:	ee70 6a26 	vadd.f32	s13, s0, s13
 80111ea:	eef4 6ae5 	vcmpe.f32	s13, s11
 80111ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111f2:	dd02      	ble.n	80111fa <__ieee754_expf+0x112>
 80111f4:	ee30 0a25 	vadd.f32	s0, s0, s11
 80111f8:	4770      	bx	lr
 80111fa:	2200      	movs	r2, #0
 80111fc:	e7af      	b.n	801115e <__ieee754_expf+0x76>
 80111fe:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011202:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8011206:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801120a:	bfb8      	it	lt
 801120c:	3264      	addlt	r2, #100	; 0x64
 801120e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011212:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8011216:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801121a:	ee17 3a90 	vmov	r3, s15
 801121e:	bfab      	itete	ge
 8011220:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8011224:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8011228:	ee00 3a10 	vmovge	s0, r3
 801122c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8011280 <__ieee754_expf+0x198>
 8011230:	bfbc      	itt	lt
 8011232:	ee00 3a10 	vmovlt	s0, r3
 8011236:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801123a:	4770      	bx	lr
 801123c:	00000000 	.word	0x00000000
 8011240:	42b17217 	.word	0x42b17217
 8011244:	42cff1b5 	.word	0x42cff1b5
 8011248:	3eb17218 	.word	0x3eb17218
 801124c:	3f851591 	.word	0x3f851591
 8011250:	080138a4 	.word	0x080138a4
 8011254:	080138ac 	.word	0x080138ac
 8011258:	3331bb4c 	.word	0x3331bb4c
 801125c:	b5ddea0e 	.word	0xb5ddea0e
 8011260:	388ab355 	.word	0x388ab355
 8011264:	bb360b61 	.word	0xbb360b61
 8011268:	3e2aaaab 	.word	0x3e2aaaab
 801126c:	0801389c 	.word	0x0801389c
 8011270:	3fb8aa3b 	.word	0x3fb8aa3b
 8011274:	3f317180 	.word	0x3f317180
 8011278:	3717f7d1 	.word	0x3717f7d1
 801127c:	7149f2ca 	.word	0x7149f2ca
 8011280:	0d800000 	.word	0x0d800000

08011284 <with_errnof>:
 8011284:	b513      	push	{r0, r1, r4, lr}
 8011286:	4604      	mov	r4, r0
 8011288:	ed8d 0a01 	vstr	s0, [sp, #4]
 801128c:	f7fd f8b6 	bl	800e3fc <__errno>
 8011290:	ed9d 0a01 	vldr	s0, [sp, #4]
 8011294:	6004      	str	r4, [r0, #0]
 8011296:	b002      	add	sp, #8
 8011298:	bd10      	pop	{r4, pc}

0801129a <xflowf>:
 801129a:	b130      	cbz	r0, 80112aa <xflowf+0x10>
 801129c:	eef1 7a40 	vneg.f32	s15, s0
 80112a0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80112a4:	2022      	movs	r0, #34	; 0x22
 80112a6:	f7ff bfed 	b.w	8011284 <with_errnof>
 80112aa:	eef0 7a40 	vmov.f32	s15, s0
 80112ae:	e7f7      	b.n	80112a0 <xflowf+0x6>

080112b0 <__math_uflowf>:
 80112b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80112b8 <__math_uflowf+0x8>
 80112b4:	f7ff bff1 	b.w	801129a <xflowf>
 80112b8:	10000000 	.word	0x10000000

080112bc <__math_oflowf>:
 80112bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80112c4 <__math_oflowf+0x8>
 80112c0:	f7ff bfeb 	b.w	801129a <xflowf>
 80112c4:	70000000 	.word	0x70000000

080112c8 <finitef>:
 80112c8:	b082      	sub	sp, #8
 80112ca:	ed8d 0a01 	vstr	s0, [sp, #4]
 80112ce:	9801      	ldr	r0, [sp, #4]
 80112d0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80112d4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80112d8:	bfac      	ite	ge
 80112da:	2000      	movge	r0, #0
 80112dc:	2001      	movlt	r0, #1
 80112de:	b002      	add	sp, #8
 80112e0:	4770      	bx	lr
	...

080112e4 <_init>:
 80112e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112e6:	bf00      	nop
 80112e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112ea:	bc08      	pop	{r3}
 80112ec:	469e      	mov	lr, r3
 80112ee:	4770      	bx	lr

080112f0 <_fini>:
 80112f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112f2:	bf00      	nop
 80112f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112f6:	bc08      	pop	{r3}
 80112f8:	469e      	mov	lr, r3
 80112fa:	4770      	bx	lr
