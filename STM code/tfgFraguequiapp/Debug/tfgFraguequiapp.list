
tfgFraguequiapp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d78c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024d4  0800d920  0800d920  0001d920  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdf4  0800fdf4  00020a94  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdf4  0800fdf4  0001fdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdfc  0800fdfc  00020a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdfc  0800fdfc  0001fdfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe00  0800fe00  0001fe00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a94  20000000  0800fe04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f20  20000a94  08010898  00020a94  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200019b4  08010898  000219b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a94  2**0
                  CONTENTS, READONLY
 12 .debug_info   000215c8  00000000  00000000  00020ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d47  00000000  00000000  0004208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c88  00000000  00000000  00045dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af0  00000000  00000000  00047a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc9d  00000000  00000000  00049550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021f34  00000000  00000000  000751ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a507  00000000  00000000  00097121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  001a1628  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008da8  00000000  00000000  001a16f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  001aa49c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  001aa550  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a94 	.word	0x20000a94
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d904 	.word	0x0800d904

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a98 	.word	0x20000a98
 80001cc:	0800d904 	.word	0x0800d904

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb0:	f001 f899 	bl	8001fe6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb4:	f000 f820 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb8:	f000 fa60 	bl	800137c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000ebc:	f000 f8a0 	bl	8001000 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000ec0:	f000 f8d6 	bl	8001070 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000ec4:	f000 f914 	bl	80010f0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000ec8:	f000 f938 	bl	800113c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000ecc:	f000 f9c8 	bl	8001260 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000ed0:	f000 f9f6 	bl	80012c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ed4:	f000 fa24 	bl	8001320 <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 8000ed8:	f000 f870 	bl	8000fbc <MX_CRC_Init>
  MX_TIM1_Init();
 8000edc:	f000 f96c 	bl	80011b8 <MX_TIM1_Init>
  MX_X_CUBE_AI_Init();
 8000ee0:	f005 fefc 	bl	8006cdc <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  initSensors();
 8000ee4:	f000 fbfc 	bl	80016e0 <initSensors>
  HAL_TIM_Base_Start(&htim1);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <main+0x48>)
 8000eea:	f004 fa4b 	bl	8005384 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000eee:	f005 ff07 	bl	8006d00 <MX_X_CUBE_AI_Process>
 8000ef2:	e7fc      	b.n	8000eee <main+0x42>
 8000ef4:	20000c08 	.word	0x20000c08

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b096      	sub	sp, #88	; 0x58
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	2244      	movs	r2, #68	; 0x44
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f009 fdf8 	bl	800aafc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f1e:	f002 fd49 	bl	80039b4 <HAL_PWREx_ControlVoltageScaling>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f28:	f000 fca4 	bl	8001874 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f2c:	f002 fd24 	bl	8003978 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f30:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <SystemClock_Config+0xc0>)
 8000f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f36:	4a20      	ldr	r2, [pc, #128]	; (8000fb8 <SystemClock_Config+0xc0>)
 8000f38:	f023 0318 	bic.w	r3, r3, #24
 8000f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f40:	2314      	movs	r3, #20
 8000f42:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f50:	2360      	movs	r3, #96	; 0x60
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f54:	2302      	movs	r3, #2
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f60:	2328      	movs	r3, #40	; 0x28
 8000f62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f64:	2307      	movs	r3, #7
 8000f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 fe3f 	bl	8003bf8 <HAL_RCC_OscConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000f80:	f000 fc78 	bl	8001874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f84:	230f      	movs	r3, #15
 8000f86:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f003 fa07 	bl	80043b0 <HAL_RCC_ClockConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000fa8:	f000 fc64 	bl	8001874 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000fac:	f003 ff0e 	bl	8004dcc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000fb0:	bf00      	nop
 8000fb2:	3758      	adds	r7, #88	; 0x58
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40021000 	.word	0x40021000

08000fbc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <MX_CRC_Init+0x3c>)
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <MX_CRC_Init+0x40>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_CRC_Init+0x3c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <MX_CRC_Init+0x3c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_CRC_Init+0x3c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <MX_CRC_Init+0x3c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_CRC_Init+0x3c>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <MX_CRC_Init+0x3c>)
 8000fe6:	f001 f9a9 	bl	800233c <HAL_CRC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000ff0:	f000 fc40 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000ab0 	.word	0x20000ab0
 8000ffc:	40023000 	.word	0x40023000

08001000 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_DFSDM1_Init+0x68>)
 8001006:	4a19      	ldr	r2, [pc, #100]	; (800106c <MX_DFSDM1_Init+0x6c>)
 8001008:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_DFSDM1_Init+0x68>)
 800100c:	2201      	movs	r2, #1
 800100e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_DFSDM1_Init+0x68>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_DFSDM1_Init+0x68>)
 8001018:	2202      	movs	r2, #2
 800101a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_DFSDM1_Init+0x68>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_DFSDM1_Init+0x68>)
 8001024:	2200      	movs	r2, #0
 8001026:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_DFSDM1_Init+0x68>)
 800102a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800102e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <MX_DFSDM1_Init+0x68>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_DFSDM1_Init+0x68>)
 8001038:	2204      	movs	r2, #4
 800103a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <MX_DFSDM1_Init+0x68>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_DFSDM1_Init+0x68>)
 8001044:	2201      	movs	r2, #1
 8001046:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <MX_DFSDM1_Init+0x68>)
 800104a:	2200      	movs	r2, #0
 800104c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_DFSDM1_Init+0x68>)
 8001050:	2200      	movs	r2, #0
 8001052:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_DFSDM1_Init+0x68>)
 8001056:	f001 fa5b 	bl	8002510 <HAL_DFSDM_ChannelInit>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001060:	f000 fc08 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000ad4 	.word	0x20000ad4
 800106c:	40016020 	.word	0x40016020

08001070 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <MX_I2C2_Init+0x74>)
 8001076:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <MX_I2C2_Init+0x78>)
 8001078:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00702991;
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_I2C2_Init+0x74>)
 800107c:	4a1b      	ldr	r2, [pc, #108]	; (80010ec <MX_I2C2_Init+0x7c>)
 800107e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_I2C2_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_I2C2_Init+0x74>)
 8001088:	2201      	movs	r2, #1
 800108a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_I2C2_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_I2C2_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_I2C2_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_I2C2_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_I2C2_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010aa:	480e      	ldr	r0, [pc, #56]	; (80010e4 <MX_I2C2_Init+0x74>)
 80010ac:	f001 fd21 	bl	8002af2 <HAL_I2C_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80010b6:	f000 fbdd 	bl	8001874 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ba:	2100      	movs	r1, #0
 80010bc:	4809      	ldr	r0, [pc, #36]	; (80010e4 <MX_I2C2_Init+0x74>)
 80010be:	f002 fa7b 	bl	80035b8 <HAL_I2CEx_ConfigAnalogFilter>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80010c8:	f000 fbd4 	bl	8001874 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010cc:	2100      	movs	r1, #0
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_I2C2_Init+0x74>)
 80010d0:	f002 fabd 	bl	800364e <HAL_I2CEx_ConfigDigitalFilter>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80010da:	f000 fbcb 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000b0c 	.word	0x20000b0c
 80010e8:	40005800 	.word	0x40005800
 80010ec:	00702991 	.word	0x00702991

080010f0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_QUADSPI_Init+0x44>)
 80010f6:	4a10      	ldr	r2, [pc, #64]	; (8001138 <MX_QUADSPI_Init+0x48>)
 80010f8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_QUADSPI_Init+0x44>)
 80010fc:	2202      	movs	r2, #2
 80010fe:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_QUADSPI_Init+0x44>)
 8001102:	2204      	movs	r2, #4
 8001104:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_QUADSPI_Init+0x44>)
 8001108:	2210      	movs	r2, #16
 800110a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_QUADSPI_Init+0x44>)
 800110e:	2217      	movs	r2, #23
 8001110:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_QUADSPI_Init+0x44>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_QUADSPI_Init+0x44>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_QUADSPI_Init+0x44>)
 8001120:	f002 fcae 	bl	8003a80 <HAL_QSPI_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800112a:	f000 fba3 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000b60 	.word	0x20000b60
 8001138:	a0001000 	.word	0xa0001000

0800113c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_SPI3_Init+0x74>)
 8001142:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <MX_SPI3_Init+0x78>)
 8001144:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_SPI3_Init+0x74>)
 8001148:	f44f 7282 	mov.w	r2, #260	; 0x104
 800114c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_SPI3_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_SPI3_Init+0x74>)
 8001156:	f44f 7240 	mov.w	r2, #768	; 0x300
 800115a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_SPI3_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_SPI3_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_SPI3_Init+0x74>)
 800116a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_SPI3_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_SPI3_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_SPI3_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_SPI3_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_SPI3_Init+0x74>)
 800118a:	2207      	movs	r2, #7
 800118c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_SPI3_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_SPI3_Init+0x74>)
 8001196:	2208      	movs	r2, #8
 8001198:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_SPI3_Init+0x74>)
 800119c:	f003 fff8 	bl	8005190 <HAL_SPI_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80011a6:	f000 fb65 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000ba4 	.word	0x20000ba4
 80011b4:	40003c00 	.word	0x40003c00

080011b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <MX_TIM1_Init+0xa0>)
 80011d8:	4a20      	ldr	r2, [pc, #128]	; (800125c <MX_TIM1_Init+0xa4>)
 80011da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MX_TIM1_Init+0xa0>)
 80011de:	224f      	movs	r2, #79	; 0x4f
 80011e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_TIM1_Init+0xa0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_TIM1_Init+0xa0>)
 80011ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_TIM1_Init+0xa0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_TIM1_Init+0xa0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_TIM1_Init+0xa0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001202:	4815      	ldr	r0, [pc, #84]	; (8001258 <MX_TIM1_Init+0xa0>)
 8001204:	f004 f867 	bl	80052d6 <HAL_TIM_Base_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800120e:	f000 fb31 	bl	8001874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001216:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	480e      	ldr	r0, [pc, #56]	; (8001258 <MX_TIM1_Init+0xa0>)
 8001220:	f004 f918 	bl	8005454 <HAL_TIM_ConfigClockSource>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800122a:	f000 fb23 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MX_TIM1_Init+0xa0>)
 8001240:	f004 fb06 	bl	8005850 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800124a:	f000 fb13 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000c08 	.word	0x20000c08
 800125c:	40012c00 	.word	0x40012c00

08001260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_USART1_UART_Init+0x58>)
 8001266:	4a15      	ldr	r2, [pc, #84]	; (80012bc <MX_USART1_UART_Init+0x5c>)
 8001268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_USART1_UART_Init+0x58>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_USART1_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_USART1_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_USART1_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_USART1_UART_Init+0x58>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_USART1_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_USART1_UART_Init+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_USART1_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_USART1_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_USART1_UART_Init+0x58>)
 80012a4:	f004 fb5c 	bl	8005960 <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012ae:	f000 fae1 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000c54 	.word	0x20000c54
 80012bc:	40013800 	.word	0x40013800

080012c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012c6:	4a15      	ldr	r2, [pc, #84]	; (800131c <MX_USART3_UART_Init+0x5c>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_USART3_UART_Init+0x58>)
 8001304:	f004 fb2c 	bl	8005960 <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800130e:	f000 fab1 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000cd8 	.word	0x20000cd8
 800131c:	40004800 	.word	0x40004800

08001320 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001326:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800132a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800132e:	2206      	movs	r2, #6
 8001330:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001334:	2202      	movs	r2, #2
 8001336:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800133a:	2202      	movs	r2, #2
 800133c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001364:	f002 f9bf 	bl	80036e6 <HAL_PCD_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800136e:	f000 fa81 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000d5c 	.word	0x20000d5c

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001392:	4bbd      	ldr	r3, [pc, #756]	; (8001688 <MX_GPIO_Init+0x30c>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	4abc      	ldr	r2, [pc, #752]	; (8001688 <MX_GPIO_Init+0x30c>)
 8001398:	f043 0310 	orr.w	r3, r3, #16
 800139c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139e:	4bba      	ldr	r3, [pc, #744]	; (8001688 <MX_GPIO_Init+0x30c>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	4bb7      	ldr	r3, [pc, #732]	; (8001688 <MX_GPIO_Init+0x30c>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	4ab6      	ldr	r2, [pc, #728]	; (8001688 <MX_GPIO_Init+0x30c>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b6:	4bb4      	ldr	r3, [pc, #720]	; (8001688 <MX_GPIO_Init+0x30c>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4bb1      	ldr	r3, [pc, #708]	; (8001688 <MX_GPIO_Init+0x30c>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4ab0      	ldr	r2, [pc, #704]	; (8001688 <MX_GPIO_Init+0x30c>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4bae      	ldr	r3, [pc, #696]	; (8001688 <MX_GPIO_Init+0x30c>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	4bab      	ldr	r3, [pc, #684]	; (8001688 <MX_GPIO_Init+0x30c>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	4aaa      	ldr	r2, [pc, #680]	; (8001688 <MX_GPIO_Init+0x30c>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e6:	4ba8      	ldr	r3, [pc, #672]	; (8001688 <MX_GPIO_Init+0x30c>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	4ba5      	ldr	r3, [pc, #660]	; (8001688 <MX_GPIO_Init+0x30c>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	4aa4      	ldr	r2, [pc, #656]	; (8001688 <MX_GPIO_Init+0x30c>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fe:	4ba2      	ldr	r3, [pc, #648]	; (8001688 <MX_GPIO_Init+0x30c>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001410:	489e      	ldr	r0, [pc, #632]	; (800168c <MX_GPIO_Init+0x310>)
 8001412:	f001 fb33 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f248 1104 	movw	r1, #33028	; 0x8104
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001420:	f001 fb2c 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001424:	2200      	movs	r2, #0
 8001426:	f24f 0114 	movw	r1, #61460	; 0xf014
 800142a:	4899      	ldr	r0, [pc, #612]	; (8001690 <MX_GPIO_Init+0x314>)
 800142c:	f001 fb26 	bl	8002a7c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f241 0181 	movw	r1, #4225	; 0x1081
 8001436:	4897      	ldr	r0, [pc, #604]	; (8001694 <MX_GPIO_Init+0x318>)
 8001438:	f001 fb20 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001442:	4894      	ldr	r0, [pc, #592]	; (8001694 <MX_GPIO_Init+0x318>)
 8001444:	f001 fb1a 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800144e:	4892      	ldr	r0, [pc, #584]	; (8001698 <MX_GPIO_Init+0x31c>)
 8001450:	f001 fb14 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	2120      	movs	r1, #32
 8001458:	488d      	ldr	r0, [pc, #564]	; (8001690 <MX_GPIO_Init+0x314>)
 800145a:	f001 fb0f 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	2101      	movs	r1, #1
 8001462:	488a      	ldr	r0, [pc, #552]	; (800168c <MX_GPIO_Init+0x310>)
 8001464:	f001 fb0a 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001468:	f240 1315 	movw	r3, #277	; 0x115
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4882      	ldr	r0, [pc, #520]	; (800168c <MX_GPIO_Init+0x310>)
 8001482:	f001 f951 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001486:	236a      	movs	r3, #106	; 0x6a
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800148a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	487c      	ldr	r0, [pc, #496]	; (800168c <MX_GPIO_Init+0x310>)
 800149c:	f001 f944 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80014a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	4878      	ldr	r0, [pc, #480]	; (8001698 <MX_GPIO_Init+0x31c>)
 80014b8:	f001 f936 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80014bc:	233f      	movs	r3, #63	; 0x3f
 80014be:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014c0:	230b      	movs	r3, #11
 80014c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4872      	ldr	r0, [pc, #456]	; (8001698 <MX_GPIO_Init+0x31c>)
 80014d0:	f001 f92a 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80014d4:	2303      	movs	r3, #3
 80014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014e4:	2308      	movs	r3, #8
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f2:	f001 f919 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80014f6:	f248 1304 	movw	r3, #33028	; 0x8104
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001512:	f001 f909 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001516:	2308      	movs	r3, #8
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001526:	2301      	movs	r3, #1
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001534:	f001 f8f8 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001538:	2310      	movs	r3, #16
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800153c:	230b      	movs	r3, #11
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154e:	f001 f8eb 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001552:	23e0      	movs	r3, #224	; 0xe0
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001562:	2305      	movs	r3, #5
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001570:	f001 f8da 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001574:	2301      	movs	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001578:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4841      	ldr	r0, [pc, #260]	; (8001690 <MX_GPIO_Init+0x314>)
 800158a:	f001 f8cd 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800158e:	2302      	movs	r3, #2
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001592:	230b      	movs	r3, #11
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	483b      	ldr	r0, [pc, #236]	; (8001690 <MX_GPIO_Init+0x314>)
 80015a2:	f001 f8c1 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80015a6:	f24f 0334 	movw	r3, #61492	; 0xf034
 80015aa:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4834      	ldr	r0, [pc, #208]	; (8001690 <MX_GPIO_Init+0x314>)
 80015c0:	f001 f8b2 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80015c4:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80015c8:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	482e      	ldr	r0, [pc, #184]	; (8001694 <MX_GPIO_Init+0x318>)
 80015dc:	f001 f8a4 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80015e0:	f243 0381 	movw	r3, #12417	; 0x3081
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4826      	ldr	r0, [pc, #152]	; (8001694 <MX_GPIO_Init+0x318>)
 80015fa:	f001 f895 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80015fe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	4820      	ldr	r0, [pc, #128]	; (8001698 <MX_GPIO_Init+0x31c>)
 8001618:	f001 f886 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800161c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001622:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4819      	ldr	r0, [pc, #100]	; (8001698 <MX_GPIO_Init+0x31c>)
 8001634:	f001 f878 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001638:	2302      	movs	r3, #2
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001648:	2305      	movs	r3, #5
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4810      	ldr	r0, [pc, #64]	; (8001694 <MX_GPIO_Init+0x318>)
 8001654:	f001 f868 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001658:	2378      	movs	r3, #120	; 0x78
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001668:	2307      	movs	r3, #7
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	4808      	ldr	r0, [pc, #32]	; (8001694 <MX_GPIO_Init+0x318>)
 8001674:	f001 f858 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001678:	f44f 7340 	mov.w	r3, #768	; 0x300
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167e:	2312      	movs	r3, #18
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	e00a      	b.n	800169c <MX_GPIO_Init+0x320>
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000
 800168c:	48001000 	.word	0x48001000
 8001690:	48000400 	.word	0x48000400
 8001694:	48000c00 	.word	0x48000c00
 8001698:	48000800 	.word	0x48000800
 800169c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016a2:	2304      	movs	r3, #4
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	480b      	ldr	r0, [pc, #44]	; (80016dc <MX_GPIO_Init+0x360>)
 80016ae:	f001 f83b 	bl	8002728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2017      	movs	r0, #23
 80016b8:	f000 fe09 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016bc:	2017      	movs	r0, #23
 80016be:	f000 fe22 	bl	8002306 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	2028      	movs	r0, #40	; 0x28
 80016c8:	f000 fe01 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016cc:	2028      	movs	r0, #40	; 0x28
 80016ce:	f000 fe1a 	bl	8002306 <HAL_NVIC_EnableIRQ>

}
 80016d2:	bf00      	nop
 80016d4:	3728      	adds	r7, #40	; 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	48000400 	.word	0x48000400

080016e0 <initSensors>:

/* USER CODE BEGIN 4 */
void initSensors()
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af04      	add	r7, sp, #16

	uint8_t acelConfig [1] = {0x20};
 80016e6:	2320      	movs	r3, #32
 80016e8:	713b      	strb	r3, [r7, #4]
	uint8_t girConfig [1] = {0x2C};
 80016ea:	232c      	movs	r3, #44	; 0x2c
 80016ec:	703b      	strb	r3, [r7, #0]

	HAL_I2C_Mem_Write(&hi2c2, WRITE_ADDR, GIR_CONTROL_REG, I2C_MEMADD_SIZE_8BIT, girConfig, 1, 100);
 80016ee:	2364      	movs	r3, #100	; 0x64
 80016f0:	9302      	str	r3, [sp, #8]
 80016f2:	2301      	movs	r3, #1
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	463b      	mov	r3, r7
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	2211      	movs	r2, #17
 80016fe:	21d4      	movs	r1, #212	; 0xd4
 8001700:	4815      	ldr	r0, [pc, #84]	; (8001758 <initSensors+0x78>)
 8001702:	f001 fa85 	bl	8002c10 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c2, WRITE_ADDR, ACEL_CONTROL_REG, I2C_MEMADD_SIZE_8BIT, acelConfig, 1, 100);
 8001706:	2364      	movs	r3, #100	; 0x64
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	2301      	movs	r3, #1
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	2210      	movs	r2, #16
 8001716:	21d4      	movs	r1, #212	; 0xd4
 8001718:	480f      	ldr	r0, [pc, #60]	; (8001758 <initSensors+0x78>)
 800171a:	f001 fa79 	bl	8002c10 <HAL_I2C_Mem_Write>

	printf("Acelerómetro y Giroscopio configurados en un rango de medida: +- %.2f mg,dps \r\n",MEASUREMENT_RANGE);
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <initSensors+0x7c>)
 8001724:	480e      	ldr	r0, [pc, #56]	; (8001760 <initSensors+0x80>)
 8001726:	f009 ff3b 	bl	800b5a0 <iprintf>
	printf("Sensibilidad de los sensores: %.3f ,%.6f \r\n\n",ACEL_SENSIVITY,GIR_SENSIVITY);
 800172a:	a307      	add	r3, pc, #28	; (adr r3, 8001748 <initSensors+0x68>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	e9cd 2300 	strd	r2, r3, [sp]
 8001734:	a306      	add	r3, pc, #24	; (adr r3, 8001750 <initSensors+0x70>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	480a      	ldr	r0, [pc, #40]	; (8001764 <initSensors+0x84>)
 800173c:	f009 ff30 	bl	800b5a0 <iprintf>

}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000000 	.word	0x20000000
 800174c:	3fb1eb85 	.word	0x3fb1eb85
 8001750:	60000000 	.word	0x60000000
 8001754:	3faf3b64 	.word	0x3faf3b64
 8001758:	20000b0c 	.word	0x20000b0c
 800175c:	409f4000 	.word	0x409f4000
 8001760:	0800d940 	.word	0x0800d940
 8001764:	0800d994 	.word	0x0800d994

08001768 <readSensors>:

void readSensors()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af04      	add	r7, sp, #16
	uint8_t buffData[12];
	uint8_t bitNewData[1];
	uint8_t i;


	HAL_I2C_Mem_Read(&hi2c2, READ_ADDR, REG_STATUS, I2C_MEMADD_SIZE_8BIT, bitNewData, 1, 100);
 800176e:	2364      	movs	r3, #100	; 0x64
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	2301      	movs	r3, #1
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2301      	movs	r3, #1
 800177c:	221e      	movs	r2, #30
 800177e:	21d5      	movs	r1, #213	; 0xd5
 8001780:	4837      	ldr	r0, [pc, #220]	; (8001860 <readSensors+0xf8>)
 8001782:	f001 fb59 	bl	8002e38 <HAL_I2C_Mem_Read>

	while((bitNewData[0] & 0x03) != 0x03){ //Polling al bit GDA y XLDA que indica cuando hay datos nuevos del giroscopio y acelerometro
 8001786:	e00b      	b.n	80017a0 <readSensors+0x38>

		HAL_I2C_Mem_Read(&hi2c2, READ_ADDR, REG_STATUS, I2C_MEMADD_SIZE_8BIT, bitNewData, 1, 100);
 8001788:	2364      	movs	r3, #100	; 0x64
 800178a:	9302      	str	r3, [sp, #8]
 800178c:	2301      	movs	r3, #1
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2301      	movs	r3, #1
 8001796:	221e      	movs	r2, #30
 8001798:	21d5      	movs	r1, #213	; 0xd5
 800179a:	4831      	ldr	r0, [pc, #196]	; (8001860 <readSensors+0xf8>)
 800179c:	f001 fb4c 	bl	8002e38 <HAL_I2C_Mem_Read>
	while((bitNewData[0] & 0x03) != 0x03){ //Polling al bit GDA y XLDA que indica cuando hay datos nuevos del giroscopio y acelerometro
 80017a0:	793b      	ldrb	r3, [r7, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d1ee      	bne.n	8001788 <readSensors+0x20>

	}

	//HAL_I2C_Mem_Read(&hi2c2, READ_ADDR, REG_ACEL, I2C_MEMADD_SIZE_8BIT, buffAcel, 6, 100);

	HAL_I2C_Mem_Read(&hi2c2, READ_ADDR, REG_GIR, I2C_MEMADD_SIZE_8BIT, buffData, 12, 100);
 80017aa:	2364      	movs	r3, #100	; 0x64
 80017ac:	9302      	str	r3, [sp, #8]
 80017ae:	230c      	movs	r3, #12
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2301      	movs	r3, #1
 80017ba:	2222      	movs	r2, #34	; 0x22
 80017bc:	21d5      	movs	r1, #213	; 0xd5
 80017be:	4828      	ldr	r0, [pc, #160]	; (8001860 <readSensors+0xf8>)
 80017c0:	f001 fb3a 	bl	8002e38 <HAL_I2C_Mem_Read>


	for(i = 0; i < 3; i++){
 80017c4:	2300      	movs	r3, #0
 80017c6:	75fb      	strb	r3, [r7, #23]
 80017c8:	e041      	b.n	800184e <readSensors+0xe6>

		girBuff[i] = (float) ((int16_t) (buffData[2*i+1] << 8) | buffData[2*i]) * GIR_SENSIVITY;
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	3301      	adds	r3, #1
 80017d0:	3318      	adds	r3, #24
 80017d2:	443b      	add	r3, r7
 80017d4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b21b      	sxth	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	3318      	adds	r3, #24
 80017e4:	443b      	add	r3, r7
 80017e6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001864 <readSensors+0xfc>
 80017fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017fe:	4a1a      	ldr	r2, [pc, #104]	; (8001868 <readSensors+0x100>)
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	edc3 7a00 	vstr	s15, [r3]

		acelBuff[i] = (float) ((int16_t) (buffData[(2*i+1)+6] << 8) | buffData[(2*i)+6]) * ACEL_SENSIVITY;
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	3307      	adds	r3, #7
 800180e:	3318      	adds	r3, #24
 8001810:	443b      	add	r3, r7
 8001812:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b21b      	sxth	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	3303      	adds	r3, #3
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	3318      	adds	r3, #24
 8001824:	443b      	add	r3, r7
 8001826:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800182a:	4313      	orrs	r3, r2
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800186c <readSensors+0x104>
 800183a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800183e:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <readSensors+0x108>)
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0; i < 3; i++){
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	3301      	adds	r3, #1
 800184c:	75fb      	strb	r3, [r7, #23]
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d9ba      	bls.n	80017ca <readSensors+0x62>

		//0.14  0.29  0.43  0.58
	}
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000b0c 	.word	0x20000b0c
 8001864:	3d8f5c29 	.word	0x3d8f5c29
 8001868:	20001274 	.word	0x20001274
 800186c:	3d79db23 	.word	0x3d79db23
 8001870:	20001268 	.word	0x20001268

08001874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001878:	b672      	cpsid	i
}
 800187a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800187c:	e7fe      	b.n	800187c <Error_Handler+0x8>
	...

08001880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_MspInit+0x44>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188a:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <HAL_MspInit+0x44>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6613      	str	r3, [r2, #96]	; 0x60
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_MspInit+0x44>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_MspInit+0x44>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <HAL_MspInit+0x44>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6593      	str	r3, [r2, #88]	; 0x58
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_MspInit+0x44>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000

080018c8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_CRC_MspInit+0x38>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d10b      	bne.n	80018f2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_CRC_MspInit+0x3c>)
 80018dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <HAL_CRC_MspInit+0x3c>)
 80018e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018e4:	6493      	str	r3, [r2, #72]	; 0x48
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <HAL_CRC_MspInit+0x3c>)
 80018e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80018f2:	bf00      	nop
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40023000 	.word	0x40023000
 8001904:	40021000 	.word	0x40021000

08001908 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b0ac      	sub	sp, #176	; 0xb0
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2288      	movs	r2, #136	; 0x88
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f009 f8e7 	bl	800aafc <memset>
  if(DFSDM1_Init == 0)
 800192e:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d142      	bne.n	80019bc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800193a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4618      	mov	r0, r3
 8001948:	f002 ff56 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001952:	f7ff ff8f 	bl	8001874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195a:	4a1b      	ldr	r2, [pc, #108]	; (80019c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800195c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001960:	6613      	str	r3, [r2, #96]	; 0x60
 8001962:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001966:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001974:	f043 0310 	orr.w	r3, r3, #16
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001986:	f44f 7320 	mov.w	r3, #640	; 0x280
 800198a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019a0:	2306      	movs	r3, #6
 80019a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019aa:	4619      	mov	r1, r3
 80019ac:	4807      	ldr	r0, [pc, #28]	; (80019cc <HAL_DFSDM_ChannelMspInit+0xc4>)
 80019ae:	f000 febb 	bl	8002728 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	3301      	adds	r3, #1
 80019b8:	4a02      	ldr	r2, [pc, #8]	; (80019c4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80019ba:	6013      	str	r3, [r2, #0]
  }

}
 80019bc:	bf00      	nop
 80019be:	37b0      	adds	r7, #176	; 0xb0
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20001284 	.word	0x20001284
 80019c8:	40021000 	.word	0x40021000
 80019cc:	48001000 	.word	0x48001000

080019d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b0ac      	sub	sp, #176	; 0xb0
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2288      	movs	r2, #136	; 0x88
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f009 f883 	bl	800aafc <memset>
  if(hi2c->Instance==I2C2)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <HAL_I2C_MspInit+0xb0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d13b      	bne.n	8001a78 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f002 fef3 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a18:	f7ff ff2c 	bl	8001874 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_I2C_MspInit+0xb4>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a20:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <HAL_I2C_MspInit+0xb4>)
 8001a22:	f043 0302 	orr.w	r3, r3, #2
 8001a26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <HAL_I2C_MspInit+0xb4>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001a34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a3c:	2312      	movs	r3, #18
 8001a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480b      	ldr	r0, [pc, #44]	; (8001a88 <HAL_I2C_MspInit+0xb8>)
 8001a5c:	f000 fe64 	bl	8002728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_I2C_MspInit+0xb4>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_I2C_MspInit+0xb4>)
 8001a66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_I2C_MspInit+0xb4>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a78:	bf00      	nop
 8001a7a:	37b0      	adds	r7, #176	; 0xb0
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40005800 	.word	0x40005800
 8001a84:	40021000 	.word	0x40021000
 8001a88:	48000400 	.word	0x48000400

08001a8c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <HAL_QSPI_MspInit+0x7c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d128      	bne.n	8001b00 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_QSPI_MspInit+0x80>)
 8001ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ab2:	4a16      	ldr	r2, [pc, #88]	; (8001b0c <HAL_QSPI_MspInit+0x80>)
 8001ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab8:	6513      	str	r3, [r2, #80]	; 0x50
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_QSPI_MspInit+0x80>)
 8001abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_QSPI_MspInit+0x80>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_QSPI_MspInit+0x80>)
 8001acc:	f043 0310 	orr.w	r3, r3, #16
 8001ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_QSPI_MspInit+0x80>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001ade:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001ae2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001af0:	230a      	movs	r3, #10
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_QSPI_MspInit+0x84>)
 8001afc:	f000 fe14 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	; 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	a0001000 	.word	0xa0001000
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	48001000 	.word	0x48001000

08001b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <HAL_SPI_MspInit+0x7c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d128      	bne.n	8001b88 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_SPI_MspInit+0x80>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	4a16      	ldr	r2, [pc, #88]	; (8001b94 <HAL_SPI_MspInit+0x80>)
 8001b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b40:	6593      	str	r3, [r2, #88]	; 0x58
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_SPI_MspInit+0x80>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_SPI_MspInit+0x80>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <HAL_SPI_MspInit+0x80>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_SPI_MspInit+0x80>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001b66:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b78:	2306      	movs	r3, #6
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	4619      	mov	r1, r3
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <HAL_SPI_MspInit+0x84>)
 8001b84:	f000 fdd0 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b88:	bf00      	nop
 8001b8a:	3728      	adds	r7, #40	; 0x28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40003c00 	.word	0x40003c00
 8001b94:	40021000 	.word	0x40021000
 8001b98:	48000800 	.word	0x48000800

08001b9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_TIM_Base_MspInit+0x38>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d10b      	bne.n	8001bc6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_TIM_Base_MspInit+0x3c>)
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <HAL_TIM_Base_MspInit+0x3c>)
 8001bb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <HAL_TIM_Base_MspInit+0x3c>)
 8001bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40012c00 	.word	0x40012c00
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b0ae      	sub	sp, #184	; 0xb8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	2288      	movs	r2, #136	; 0x88
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f008 ff7d 	bl	800aafc <memset>
  if(huart->Instance==USART1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a42      	ldr	r2, [pc, #264]	; (8001d10 <HAL_UART_MspInit+0x134>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d13b      	bne.n	8001c84 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c10:	2300      	movs	r3, #0
 8001c12:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 fded 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c24:	f7ff fe26 	bl	8001874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c28:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2c:	4a39      	ldr	r2, [pc, #228]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c32:	6613      	str	r3, [r2, #96]	; 0x60
 8001c34:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c40:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c44:	4a33      	ldr	r2, [pc, #204]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001c46:	f043 0302 	orr.w	r3, r3, #2
 8001c4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4c:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001c58:	23c0      	movs	r3, #192	; 0xc0
 8001c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c70:	2307      	movs	r3, #7
 8001c72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4826      	ldr	r0, [pc, #152]	; (8001d18 <HAL_UART_MspInit+0x13c>)
 8001c7e:	f000 fd53 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c82:	e040      	b.n	8001d06 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a24      	ldr	r2, [pc, #144]	; (8001d1c <HAL_UART_MspInit+0x140>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d13b      	bne.n	8001d06 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 fdac 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001ca6:	f7ff fde5 	bl	8001874 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	4a13      	ldr	r2, [pc, #76]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <HAL_UART_MspInit+0x138>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001cda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cf4:	2307      	movs	r3, #7
 8001cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4807      	ldr	r0, [pc, #28]	; (8001d20 <HAL_UART_MspInit+0x144>)
 8001d02:	f000 fd11 	bl	8002728 <HAL_GPIO_Init>
}
 8001d06:	bf00      	nop
 8001d08:	37b8      	adds	r7, #184	; 0xb8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40013800 	.word	0x40013800
 8001d14:	40021000 	.word	0x40021000
 8001d18:	48000400 	.word	0x48000400
 8001d1c:	40004800 	.word	0x40004800
 8001d20:	48000c00 	.word	0x48000c00

08001d24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b0ac      	sub	sp, #176	; 0xb0
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2288      	movs	r2, #136	; 0x88
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f008 fed9 	bl	800aafc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d52:	d17c      	bne.n	8001e4e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d58:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001d5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001d62:	2301      	movs	r3, #1
 8001d64:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001d6a:	2318      	movs	r3, #24
 8001d6c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d6e:	2307      	movs	r3, #7
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d72:	2302      	movs	r3, #2
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d76:	2302      	movs	r3, #2
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001d7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 fd37 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001d90:	f7ff fd70 	bl	8001874 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <HAL_PCD_MspInit+0x134>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	4a2f      	ldr	r2, [pc, #188]	; (8001e58 <HAL_PCD_MspInit+0x134>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da0:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <HAL_PCD_MspInit+0x134>)
 8001da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dca:	f000 fcad 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001dce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001dd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de2:	2303      	movs	r3, #3
 8001de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001de8:	230a      	movs	r3, #10
 8001dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001df2:	4619      	mov	r1, r3
 8001df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df8:	f000 fc96 	bl	8002728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001dfc:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_PCD_MspInit+0x134>)
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e00:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <HAL_PCD_MspInit+0x134>)
 8001e02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <HAL_PCD_MspInit+0x134>)
 8001e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e14:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_PCD_MspInit+0x134>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d114      	bne.n	8001e4a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_PCD_MspInit+0x134>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	4a0c      	ldr	r2, [pc, #48]	; (8001e58 <HAL_PCD_MspInit+0x134>)
 8001e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_PCD_MspInit+0x134>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001e38:	f001 fe12 	bl	8003a60 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_PCD_MspInit+0x134>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <HAL_PCD_MspInit+0x134>)
 8001e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e46:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e48:	e001      	b.n	8001e4e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001e4a:	f001 fe09 	bl	8003a60 <HAL_PWREx_EnableVddUSB>
}
 8001e4e:	bf00      	nop
 8001e50:	37b0      	adds	r7, #176	; 0xb0
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000

08001e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <NMI_Handler+0x4>

08001e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <HardFault_Handler+0x4>

08001e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <MemManage_Handler+0x4>

08001e6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <BusFault_Handler+0x4>

08001e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <UsageFault_Handler+0x4>

08001e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea8:	f000 f8f2 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001eb4:	2020      	movs	r0, #32
 8001eb6:	f000 fdf9 	bl	8002aac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001eba:	2040      	movs	r0, #64	; 0x40
 8001ebc:	f000 fdf6 	bl	8002aac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001ec0:	2080      	movs	r0, #128	; 0x80
 8001ec2:	f000 fdf3 	bl	8002aac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001ec6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001eca:	f000 fdef 	bl	8002aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001ed6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001eda:	f000 fde7 	bl	8002aac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001ede:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ee2:	f000 fde3 	bl	8002aac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001ee6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001eea:	f000 fddf 	bl	8002aac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001eee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ef2:	f000 fddb 	bl	8002aac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001ef6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001efa:	f000 fdd7 	bl	8002aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <_sbrk+0x5c>)
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <_sbrk+0x60>)
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <_sbrk+0x64>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <_sbrk+0x68>)
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d207      	bcs.n	8001f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f34:	f008 fda2 	bl	800aa7c <__errno>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	e009      	b.n	8001f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <_sbrk+0x64>)
 8001f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20018000 	.word	0x20018000
 8001f64:	00000800 	.word	0x00000800
 8001f68:	20001288 	.word	0x20001288
 8001f6c:	200019b8 	.word	0x200019b8

08001f70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <SystemInit+0x20>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <SystemInit+0x20>)
 8001f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f98:	f7ff ffea 	bl	8001f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f9e:	490d      	ldr	r1, [pc, #52]	; (8001fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <LoopForever+0xe>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fb4:	4c0a      	ldr	r4, [pc, #40]	; (8001fe0 <LoopForever+0x16>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc2:	f008 fd61 	bl	800aa88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fc6:	f7fe ff71 	bl	8000eac <main>

08001fca <LoopForever>:

LoopForever:
    b LoopForever
 8001fca:	e7fe      	b.n	8001fca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd4:	20000a94 	.word	0x20000a94
  ldr r2, =_sidata
 8001fd8:	0800fe04 	.word	0x0800fe04
  ldr r2, =_sbss
 8001fdc:	20000a94 	.word	0x20000a94
  ldr r4, =_ebss
 8001fe0:	200019b4 	.word	0x200019b4

08001fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC1_2_IRQHandler>

08001fe6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f000 f961 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f000 f80e 	bl	8002018 <HAL_InitTick>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	e001      	b.n	800200c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002008:	f7ff fc3a 	bl	8001880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800200c:	79fb      	ldrb	r3, [r7, #7]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_InitTick+0x6c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d023      	beq.n	8002074 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <HAL_InitTick+0x70>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_InitTick+0x6c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203a:	fbb3 f3f1 	udiv	r3, r3, r1
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f96d 	bl	8002322 <HAL_SYSTICK_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10f      	bne.n	800206e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b0f      	cmp	r3, #15
 8002052:	d809      	bhi.n	8002068 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002054:	2200      	movs	r2, #0
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f000 f937 	bl	80022ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_InitTick+0x74>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e007      	b.n	8002078 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e004      	b.n	8002078 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
 8002072:	e001      	b.n	8002078 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000018 	.word	0x20000018
 8002088:	20000010 	.word	0x20000010
 800208c:	20000014 	.word	0x20000014

08002090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x20>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_IncTick+0x24>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_IncTick+0x24>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000018 	.word	0x20000018
 80020b4:	2000128c 	.word	0x2000128c

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	2000128c 	.word	0x2000128c

080020d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7ff ffee 	bl	80020b8 <HAL_GetTick>
 80020dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d005      	beq.n	80020f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_Delay+0x44>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020f6:	bf00      	nop
 80020f8:	f7ff ffde 	bl	80020b8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	429a      	cmp	r2, r3
 8002106:	d8f7      	bhi.n	80020f8 <HAL_Delay+0x28>
  {
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000018 	.word	0x20000018

08002118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4907      	ldr	r1, [pc, #28]	; (80021b4 <__NVIC_EnableIRQ+0x38>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	; (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f7ff ff8e 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff29 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022e0:	f7ff ff3e 	bl	8002160 <__NVIC_GetPriorityGrouping>
 80022e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7ff ff8e 	bl	800220c <NVIC_EncodePriority>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff5d 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff31 	bl	800217c <__NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffa2 	bl	8002274 <SysTick_Config>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e054      	b.n	80023f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7f5b      	ldrb	r3, [r3, #29]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d105      	bne.n	8002364 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff fab2 	bl	80018c8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	791b      	ldrb	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10c      	bne.n	800238c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a22      	ldr	r2, [pc, #136]	; (8002400 <HAL_CRC_Init+0xc4>)
 8002378:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0218 	bic.w	r2, r2, #24
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	e00c      	b.n	80023a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6899      	ldr	r1, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	461a      	mov	r2, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f834 	bl	8002404 <HAL_CRCEx_Polynomial_Set>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e028      	b.n	80023f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	795b      	ldrb	r3, [r3, #5]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f04f 32ff 	mov.w	r2, #4294967295
 80023b6:	611a      	str	r2, [r3, #16]
 80023b8:	e004      	b.n	80023c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6912      	ldr	r2, [r2, #16]
 80023c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	04c11db7 	.word	0x04c11db7

08002404 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002414:	231f      	movs	r3, #31
 8002416:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002418:	bf00      	nop
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1e5a      	subs	r2, r3, #1
 800241e:	613a      	str	r2, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d009      	beq.n	8002438 <HAL_CRCEx_Polynomial_Set+0x34>
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b18      	cmp	r3, #24
 800243c:	d846      	bhi.n	80024cc <HAL_CRCEx_Polynomial_Set+0xc8>
 800243e:	a201      	add	r2, pc, #4	; (adr r2, 8002444 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002444:	080024d3 	.word	0x080024d3
 8002448:	080024cd 	.word	0x080024cd
 800244c:	080024cd 	.word	0x080024cd
 8002450:	080024cd 	.word	0x080024cd
 8002454:	080024cd 	.word	0x080024cd
 8002458:	080024cd 	.word	0x080024cd
 800245c:	080024cd 	.word	0x080024cd
 8002460:	080024cd 	.word	0x080024cd
 8002464:	080024c1 	.word	0x080024c1
 8002468:	080024cd 	.word	0x080024cd
 800246c:	080024cd 	.word	0x080024cd
 8002470:	080024cd 	.word	0x080024cd
 8002474:	080024cd 	.word	0x080024cd
 8002478:	080024cd 	.word	0x080024cd
 800247c:	080024cd 	.word	0x080024cd
 8002480:	080024cd 	.word	0x080024cd
 8002484:	080024b5 	.word	0x080024b5
 8002488:	080024cd 	.word	0x080024cd
 800248c:	080024cd 	.word	0x080024cd
 8002490:	080024cd 	.word	0x080024cd
 8002494:	080024cd 	.word	0x080024cd
 8002498:	080024cd 	.word	0x080024cd
 800249c:	080024cd 	.word	0x080024cd
 80024a0:	080024cd 	.word	0x080024cd
 80024a4:	080024a9 	.word	0x080024a9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d913      	bls.n	80024d6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80024b2:	e010      	b.n	80024d6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b07      	cmp	r3, #7
 80024b8:	d90f      	bls.n	80024da <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80024be:	e00c      	b.n	80024da <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2b0f      	cmp	r3, #15
 80024c4:	d90b      	bls.n	80024de <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80024ca:	e008      	b.n	80024de <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	75fb      	strb	r3, [r7, #23]
      break;
 80024d0:	e006      	b.n	80024e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024d2:	bf00      	nop
 80024d4:	e004      	b.n	80024e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024d6:	bf00      	nop
 80024d8:	e002      	b.n	80024e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024da:	bf00      	nop
 80024dc:	e000      	b.n	80024e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024de:	bf00      	nop
  }
  if (status == HAL_OK)
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10d      	bne.n	8002502 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f023 0118 	bic.w	r1, r3, #24
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	430a      	orrs	r2, r1
 8002500:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002502:	7dfb      	ldrb	r3, [r7, #23]
}
 8002504:	4618      	mov	r0, r3
 8002506:	371c      	adds	r7, #28
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0ac      	b.n	800267c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f8b2 	bl	8002690 <DFSDM_GetChannelFromInstance>
 800252c:	4603      	mov	r3, r0
 800252e:	4a55      	ldr	r2, [pc, #340]	; (8002684 <HAL_DFSDM_ChannelInit+0x174>)
 8002530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e09f      	b.n	800267c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff f9e3 	bl	8001908 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002542:	4b51      	ldr	r3, [pc, #324]	; (8002688 <HAL_DFSDM_ChannelInit+0x178>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	3301      	adds	r3, #1
 8002548:	4a4f      	ldr	r2, [pc, #316]	; (8002688 <HAL_DFSDM_ChannelInit+0x178>)
 800254a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800254c:	4b4e      	ldr	r3, [pc, #312]	; (8002688 <HAL_DFSDM_ChannelInit+0x178>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d125      	bne.n	80025a0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002554:	4b4d      	ldr	r3, [pc, #308]	; (800268c <HAL_DFSDM_ChannelInit+0x17c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a4c      	ldr	r2, [pc, #304]	; (800268c <HAL_DFSDM_ChannelInit+0x17c>)
 800255a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800255e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002560:	4b4a      	ldr	r3, [pc, #296]	; (800268c <HAL_DFSDM_ChannelInit+0x17c>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4948      	ldr	r1, [pc, #288]	; (800268c <HAL_DFSDM_ChannelInit+0x17c>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800256e:	4b47      	ldr	r3, [pc, #284]	; (800268c <HAL_DFSDM_ChannelInit+0x17c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a46      	ldr	r2, [pc, #280]	; (800268c <HAL_DFSDM_ChannelInit+0x17c>)
 8002574:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002578:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	791b      	ldrb	r3, [r3, #4]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d108      	bne.n	8002594 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002582:	4b42      	ldr	r3, [pc, #264]	; (800268c <HAL_DFSDM_ChannelInit+0x17c>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	3b01      	subs	r3, #1
 800258c:	041b      	lsls	r3, r3, #16
 800258e:	493f      	ldr	r1, [pc, #252]	; (800268c <HAL_DFSDM_ChannelInit+0x17c>)
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002594:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_DFSDM_ChannelInit+0x17c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a3c      	ldr	r2, [pc, #240]	; (800268c <HAL_DFSDM_ChannelInit+0x17c>)
 800259a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800259e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80025ae:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80025be:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80025c4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 020f 	bic.w	r2, r2, #15
 80025dc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6819      	ldr	r1, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002604:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6899      	ldr	r1, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	3b01      	subs	r3, #1
 8002616:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f002 0207 	and.w	r2, r2, #7
 8002630:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800265c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f810 	bl	8002690 <DFSDM_GetChannelFromInstance>
 8002670:	4602      	mov	r2, r0
 8002672:	4904      	ldr	r1, [pc, #16]	; (8002684 <HAL_DFSDM_ChannelInit+0x174>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20001294 	.word	0x20001294
 8002688:	20001290 	.word	0x20001290
 800268c:	40016000 	.word	0x40016000

08002690 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a1c      	ldr	r2, [pc, #112]	; (800270c <DFSDM_GetChannelFromInstance+0x7c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d102      	bne.n	80026a6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e02b      	b.n	80026fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a19      	ldr	r2, [pc, #100]	; (8002710 <DFSDM_GetChannelFromInstance+0x80>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d102      	bne.n	80026b4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80026ae:	2301      	movs	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	e024      	b.n	80026fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a17      	ldr	r2, [pc, #92]	; (8002714 <DFSDM_GetChannelFromInstance+0x84>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d102      	bne.n	80026c2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80026bc:	2302      	movs	r3, #2
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	e01d      	b.n	80026fe <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <DFSDM_GetChannelFromInstance+0x88>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d102      	bne.n	80026d0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80026ca:	2304      	movs	r3, #4
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	e016      	b.n	80026fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <DFSDM_GetChannelFromInstance+0x8c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d102      	bne.n	80026de <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80026d8:	2305      	movs	r3, #5
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e00f      	b.n	80026fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <DFSDM_GetChannelFromInstance+0x90>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d102      	bne.n	80026ec <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80026e6:	2306      	movs	r3, #6
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	e008      	b.n	80026fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <DFSDM_GetChannelFromInstance+0x94>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d102      	bne.n	80026fa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80026f4:	2307      	movs	r3, #7
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e001      	b.n	80026fe <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80026fa:	2303      	movs	r3, #3
 80026fc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40016000 	.word	0x40016000
 8002710:	40016020 	.word	0x40016020
 8002714:	40016040 	.word	0x40016040
 8002718:	40016080 	.word	0x40016080
 800271c:	400160a0 	.word	0x400160a0
 8002720:	400160c0 	.word	0x400160c0
 8002724:	400160e0 	.word	0x400160e0

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002736:	e17f      	b.n	8002a38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2101      	movs	r1, #1
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	4013      	ands	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 8171 	beq.w	8002a32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b01      	cmp	r3, #1
 800275a:	d005      	beq.n	8002768 <HAL_GPIO_Init+0x40>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d130      	bne.n	80027ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800279e:	2201      	movs	r2, #1
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4013      	ands	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	f003 0201 	and.w	r2, r3, #1
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d118      	bne.n	8002808 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80027dc:	2201      	movs	r2, #1
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	08db      	lsrs	r3, r3, #3
 80027f2:	f003 0201 	and.w	r2, r3, #1
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b03      	cmp	r3, #3
 8002812:	d017      	beq.n	8002844 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d123      	bne.n	8002898 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	08da      	lsrs	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3208      	adds	r2, #8
 8002858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	220f      	movs	r2, #15
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	08da      	lsrs	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3208      	adds	r2, #8
 8002892:	6939      	ldr	r1, [r7, #16]
 8002894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0203 	and.w	r2, r3, #3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80ac 	beq.w	8002a32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028da:	4b5f      	ldr	r3, [pc, #380]	; (8002a58 <HAL_GPIO_Init+0x330>)
 80028dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028de:	4a5e      	ldr	r2, [pc, #376]	; (8002a58 <HAL_GPIO_Init+0x330>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6613      	str	r3, [r2, #96]	; 0x60
 80028e6:	4b5c      	ldr	r3, [pc, #368]	; (8002a58 <HAL_GPIO_Init+0x330>)
 80028e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028f2:	4a5a      	ldr	r2, [pc, #360]	; (8002a5c <HAL_GPIO_Init+0x334>)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	3302      	adds	r3, #2
 80028fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800291c:	d025      	beq.n	800296a <HAL_GPIO_Init+0x242>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4f      	ldr	r2, [pc, #316]	; (8002a60 <HAL_GPIO_Init+0x338>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01f      	beq.n	8002966 <HAL_GPIO_Init+0x23e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4e      	ldr	r2, [pc, #312]	; (8002a64 <HAL_GPIO_Init+0x33c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d019      	beq.n	8002962 <HAL_GPIO_Init+0x23a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4d      	ldr	r2, [pc, #308]	; (8002a68 <HAL_GPIO_Init+0x340>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_GPIO_Init+0x236>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4c      	ldr	r2, [pc, #304]	; (8002a6c <HAL_GPIO_Init+0x344>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00d      	beq.n	800295a <HAL_GPIO_Init+0x232>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4b      	ldr	r2, [pc, #300]	; (8002a70 <HAL_GPIO_Init+0x348>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_Init+0x22e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4a      	ldr	r2, [pc, #296]	; (8002a74 <HAL_GPIO_Init+0x34c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_GPIO_Init+0x22a>
 800294e:	2306      	movs	r3, #6
 8002950:	e00c      	b.n	800296c <HAL_GPIO_Init+0x244>
 8002952:	2307      	movs	r3, #7
 8002954:	e00a      	b.n	800296c <HAL_GPIO_Init+0x244>
 8002956:	2305      	movs	r3, #5
 8002958:	e008      	b.n	800296c <HAL_GPIO_Init+0x244>
 800295a:	2304      	movs	r3, #4
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x244>
 800295e:	2303      	movs	r3, #3
 8002960:	e004      	b.n	800296c <HAL_GPIO_Init+0x244>
 8002962:	2302      	movs	r3, #2
 8002964:	e002      	b.n	800296c <HAL_GPIO_Init+0x244>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_GPIO_Init+0x244>
 800296a:	2300      	movs	r3, #0
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	f002 0203 	and.w	r2, r2, #3
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	4093      	lsls	r3, r2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800297c:	4937      	ldr	r1, [pc, #220]	; (8002a5c <HAL_GPIO_Init+0x334>)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800298a:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <HAL_GPIO_Init+0x350>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029ae:	4a32      	ldr	r2, [pc, #200]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029b4:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	43db      	mvns	r3, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029d8:	4a27      	ldr	r2, [pc, #156]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4013      	ands	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a02:	4a1d      	ldr	r2, [pc, #116]	; (8002a78 <HAL_GPIO_Init+0x350>)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_GPIO_Init+0x350>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a2c:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <HAL_GPIO_Init+0x350>)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	3301      	adds	r3, #1
 8002a36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f47f ae78 	bne.w	8002738 <HAL_GPIO_Init+0x10>
  }
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	48000400 	.word	0x48000400
 8002a64:	48000800 	.word	0x48000800
 8002a68:	48000c00 	.word	0x48000c00
 8002a6c:	48001000 	.word	0x48001000
 8002a70:	48001400 	.word	0x48001400
 8002a74:	48001800 	.word	0x48001800
 8002a78:	40010400 	.word	0x40010400

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a98:	e002      	b.n	8002aa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ac2:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f806 	bl	8002adc <HAL_GPIO_EXTI_Callback>
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40010400 	.word	0x40010400

08002adc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e081      	b.n	8002c08 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d106      	bne.n	8002b1e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7fe ff59 	bl	80019d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2224      	movs	r2, #36	; 0x24
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0201 	bic.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b42:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b52:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d107      	bne.n	8002b6c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	e006      	b.n	8002b7a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b78:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d104      	bne.n	8002b8c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b8a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b9e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69d9      	ldr	r1, [r3, #28]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1a      	ldr	r2, [r3, #32]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0201 	orr.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	4608      	mov	r0, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	817b      	strh	r3, [r7, #10]
 8002c22:	460b      	mov	r3, r1
 8002c24:	813b      	strh	r3, [r7, #8]
 8002c26:	4613      	mov	r3, r2
 8002c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	f040 80f9 	bne.w	8002e2a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_I2C_Mem_Write+0x34>
 8002c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d105      	bne.n	8002c50 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0ed      	b.n	8002e2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_I2C_Mem_Write+0x4e>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e0e6      	b.n	8002e2c <HAL_I2C_Mem_Write+0x21c>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c66:	f7ff fa27 	bl	80020b8 <HAL_GetTick>
 8002c6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	2319      	movs	r3, #25
 8002c72:	2201      	movs	r2, #1
 8002c74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 fac3 	bl	8003204 <I2C_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0d1      	b.n	8002e2c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2221      	movs	r2, #33	; 0x21
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2240      	movs	r2, #64	; 0x40
 8002c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a3a      	ldr	r2, [r7, #32]
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cb0:	88f8      	ldrh	r0, [r7, #6]
 8002cb2:	893a      	ldrh	r2, [r7, #8]
 8002cb4:	8979      	ldrh	r1, [r7, #10]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	9301      	str	r3, [sp, #4]
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f9d3 	bl	800306c <I2C_RequestMemoryWrite>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0a9      	b.n	8002e2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2bff      	cmp	r3, #255	; 0xff
 8002ce0:	d90e      	bls.n	8002d00 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	22ff      	movs	r2, #255	; 0xff
 8002ce6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	8979      	ldrh	r1, [r7, #10]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fc2b 	bl	8003554 <I2C_TransferConfig>
 8002cfe:	e00f      	b.n	8002d20 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	8979      	ldrh	r1, [r7, #10]
 8002d12:	2300      	movs	r3, #0
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fc1a 	bl	8003554 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 faad 	bl	8003284 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e07b      	b.n	8002e2c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d034      	beq.n	8002dd8 <HAL_I2C_Mem_Write+0x1c8>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d130      	bne.n	8002dd8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2180      	movs	r1, #128	; 0x80
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 fa3f 	bl	8003204 <I2C_WaitOnFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e04d      	b.n	8002e2c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2bff      	cmp	r3, #255	; 0xff
 8002d98:	d90e      	bls.n	8002db8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	22ff      	movs	r2, #255	; 0xff
 8002d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	8979      	ldrh	r1, [r7, #10]
 8002da8:	2300      	movs	r3, #0
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fbcf 	bl	8003554 <I2C_TransferConfig>
 8002db6:	e00f      	b.n	8002dd8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	8979      	ldrh	r1, [r7, #10]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fbbe 	bl	8003554 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d19e      	bne.n	8002d20 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fa8c 	bl	8003304 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e01a      	b.n	8002e2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <HAL_I2C_Mem_Write+0x224>)
 8002e0a:	400b      	ands	r3, r1
 8002e0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e000      	b.n	8002e2c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
  }
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	fe00e800 	.word	0xfe00e800

08002e38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	4608      	mov	r0, r1
 8002e42:	4611      	mov	r1, r2
 8002e44:	461a      	mov	r2, r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	817b      	strh	r3, [r7, #10]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	813b      	strh	r3, [r7, #8]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	f040 80fd 	bne.w	800305a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_I2C_Mem_Read+0x34>
 8002e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d105      	bne.n	8002e78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0f1      	b.n	800305c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_I2C_Mem_Read+0x4e>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e0ea      	b.n	800305c <HAL_I2C_Mem_Read+0x224>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e8e:	f7ff f913 	bl	80020b8 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2319      	movs	r3, #25
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f9af 	bl	8003204 <I2C_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0d5      	b.n	800305c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2222      	movs	r2, #34	; 0x22
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2240      	movs	r2, #64	; 0x40
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a3a      	ldr	r2, [r7, #32]
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ed8:	88f8      	ldrh	r0, [r7, #6]
 8002eda:	893a      	ldrh	r2, [r7, #8]
 8002edc:	8979      	ldrh	r1, [r7, #10]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f913 	bl	8003114 <I2C_RequestMemoryRead>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0ad      	b.n	800305c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2bff      	cmp	r3, #255	; 0xff
 8002f08:	d90e      	bls.n	8002f28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	22ff      	movs	r2, #255	; 0xff
 8002f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	8979      	ldrh	r1, [r7, #10]
 8002f18:	4b52      	ldr	r3, [pc, #328]	; (8003064 <HAL_I2C_Mem_Read+0x22c>)
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fb17 	bl	8003554 <I2C_TransferConfig>
 8002f26:	e00f      	b.n	8002f48 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	8979      	ldrh	r1, [r7, #10]
 8002f3a:	4b4a      	ldr	r3, [pc, #296]	; (8003064 <HAL_I2C_Mem_Read+0x22c>)
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 fb06 	bl	8003554 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2104      	movs	r1, #4
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f956 	bl	8003204 <I2C_WaitOnFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e07c      	b.n	800305c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d034      	beq.n	8003008 <HAL_I2C_Mem_Read+0x1d0>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d130      	bne.n	8003008 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	2200      	movs	r2, #0
 8002fae:	2180      	movs	r1, #128	; 0x80
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f927 	bl	8003204 <I2C_WaitOnFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e04d      	b.n	800305c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2bff      	cmp	r3, #255	; 0xff
 8002fc8:	d90e      	bls.n	8002fe8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	22ff      	movs	r2, #255	; 0xff
 8002fce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	8979      	ldrh	r1, [r7, #10]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fab7 	bl	8003554 <I2C_TransferConfig>
 8002fe6:	e00f      	b.n	8003008 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	8979      	ldrh	r1, [r7, #10]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 faa6 	bl	8003554 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d19a      	bne.n	8002f48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f974 	bl	8003304 <I2C_WaitOnSTOPFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e01a      	b.n	800305c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2220      	movs	r2, #32
 800302c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6859      	ldr	r1, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_I2C_Mem_Read+0x230>)
 800303a:	400b      	ands	r3, r1
 800303c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e000      	b.n	800305c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800305a:	2302      	movs	r3, #2
  }
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	80002400 	.word	0x80002400
 8003068:	fe00e800 	.word	0xfe00e800

0800306c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	4608      	mov	r0, r1
 8003076:	4611      	mov	r1, r2
 8003078:	461a      	mov	r2, r3
 800307a:	4603      	mov	r3, r0
 800307c:	817b      	strh	r3, [r7, #10]
 800307e:	460b      	mov	r3, r1
 8003080:	813b      	strh	r3, [r7, #8]
 8003082:	4613      	mov	r3, r2
 8003084:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	8979      	ldrh	r1, [r7, #10]
 800308c:	4b20      	ldr	r3, [pc, #128]	; (8003110 <I2C_RequestMemoryWrite+0xa4>)
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fa5d 	bl	8003554 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	69b9      	ldr	r1, [r7, #24]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f8f0 	bl	8003284 <I2C_WaitOnTXISFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e02c      	b.n	8003108 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030b4:	893b      	ldrh	r3, [r7, #8]
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28
 80030be:	e015      	b.n	80030ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030c0:	893b      	ldrh	r3, [r7, #8]
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	69b9      	ldr	r1, [r7, #24]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f8d6 	bl	8003284 <I2C_WaitOnTXISFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e012      	b.n	8003108 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030e2:	893b      	ldrh	r3, [r7, #8]
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2200      	movs	r2, #0
 80030f4:	2180      	movs	r1, #128	; 0x80
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f884 	bl	8003204 <I2C_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	80002000 	.word	0x80002000

08003114 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	4608      	mov	r0, r1
 800311e:	4611      	mov	r1, r2
 8003120:	461a      	mov	r2, r3
 8003122:	4603      	mov	r3, r0
 8003124:	817b      	strh	r3, [r7, #10]
 8003126:	460b      	mov	r3, r1
 8003128:	813b      	strh	r3, [r7, #8]
 800312a:	4613      	mov	r3, r2
 800312c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	8979      	ldrh	r1, [r7, #10]
 8003134:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <I2C_RequestMemoryRead+0xa4>)
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	2300      	movs	r3, #0
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fa0a 	bl	8003554 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	69b9      	ldr	r1, [r7, #24]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f89d 	bl	8003284 <I2C_WaitOnTXISFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e02c      	b.n	80031ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d105      	bne.n	8003166 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800315a:	893b      	ldrh	r3, [r7, #8]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
 8003164:	e015      	b.n	8003192 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003166:	893b      	ldrh	r3, [r7, #8]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	b29b      	uxth	r3, r3
 800316c:	b2da      	uxtb	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	69b9      	ldr	r1, [r7, #24]
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 f883 	bl	8003284 <I2C_WaitOnTXISFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e012      	b.n	80031ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003188:	893b      	ldrh	r3, [r7, #8]
 800318a:	b2da      	uxtb	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2200      	movs	r2, #0
 800319a:	2140      	movs	r1, #64	; 0x40
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f831 	bl	8003204 <I2C_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	80002000 	.word	0x80002000

080031bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d103      	bne.n	80031da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2200      	movs	r2, #0
 80031d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d007      	beq.n	80031f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	619a      	str	r2, [r3, #24]
  }
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	4613      	mov	r3, r2
 8003212:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003214:	e022      	b.n	800325c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d01e      	beq.n	800325c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321e:	f7fe ff4b 	bl	80020b8 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d302      	bcc.n	8003234 <I2C_WaitOnFlagUntilTimeout+0x30>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d113      	bne.n	800325c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e00f      	b.n	800327c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4013      	ands	r3, r2
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	429a      	cmp	r2, r3
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	429a      	cmp	r2, r3
 8003278:	d0cd      	beq.n	8003216 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003290:	e02c      	b.n	80032ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f870 	bl	800337c <I2C_IsErrorOccurred>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e02a      	b.n	80032fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d01e      	beq.n	80032ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ae:	f7fe ff03 	bl	80020b8 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d302      	bcc.n	80032c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d113      	bne.n	80032ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e007      	b.n	80032fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d1cb      	bne.n	8003292 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003310:	e028      	b.n	8003364 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f830 	bl	800337c <I2C_IsErrorOccurred>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e026      	b.n	8003374 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003326:	f7fe fec7 	bl	80020b8 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	429a      	cmp	r2, r3
 8003334:	d302      	bcc.n	800333c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d113      	bne.n	8003364 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e007      	b.n	8003374 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b20      	cmp	r3, #32
 8003370:	d1cf      	bne.n	8003312 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	; 0x28
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d075      	beq.n	8003494 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2210      	movs	r2, #16
 80033ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033b0:	e056      	b.n	8003460 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d052      	beq.n	8003460 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033ba:	f7fe fe7d 	bl	80020b8 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <I2C_IsErrorOccurred+0x54>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d147      	bne.n	8003460 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f2:	d12e      	bne.n	8003452 <I2C_IsErrorOccurred+0xd6>
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033fa:	d02a      	beq.n	8003452 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80033fc:	7cfb      	ldrb	r3, [r7, #19]
 80033fe:	2b20      	cmp	r3, #32
 8003400:	d027      	beq.n	8003452 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003410:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003412:	f7fe fe51 	bl	80020b8 <HAL_GetTick>
 8003416:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003418:	e01b      	b.n	8003452 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800341a:	f7fe fe4d 	bl	80020b8 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b19      	cmp	r3, #25
 8003426:	d914      	bls.n	8003452 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	f043 0220 	orr.w	r2, r3, #32
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b20      	cmp	r3, #32
 800345e:	d1dc      	bne.n	800341a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b20      	cmp	r3, #32
 800346c:	d003      	beq.n	8003476 <I2C_IsErrorOccurred+0xfa>
 800346e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003472:	2b00      	cmp	r3, #0
 8003474:	d09d      	beq.n	80033b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2220      	movs	r2, #32
 8003484:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	f043 0304 	orr.w	r3, r3, #4
 800348c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00b      	beq.n	80034be <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00b      	beq.n	80034e0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	f043 0308 	orr.w	r3, r3, #8
 80034ce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01c      	beq.n	8003544 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7ff fe56 	bl	80031bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <I2C_IsErrorOccurred+0x1d4>)
 800351c:	400b      	ands	r3, r1
 800351e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	431a      	orrs	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003548:	4618      	mov	r0, r3
 800354a:	3728      	adds	r7, #40	; 0x28
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	fe00e800 	.word	0xfe00e800

08003554 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	460b      	mov	r3, r1
 8003560:	817b      	strh	r3, [r7, #10]
 8003562:	4613      	mov	r3, r2
 8003564:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003566:	897b      	ldrh	r3, [r7, #10]
 8003568:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800356c:	7a7b      	ldrb	r3, [r7, #9]
 800356e:	041b      	lsls	r3, r3, #16
 8003570:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003574:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	4313      	orrs	r3, r2
 800357e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003582:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	0d5b      	lsrs	r3, r3, #21
 800358e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <I2C_TransferConfig+0x60>)
 8003594:	430b      	orrs	r3, r1
 8003596:	43db      	mvns	r3, r3
 8003598:	ea02 0103 	and.w	r1, r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	03ff63ff 	.word	0x03ff63ff

080035b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d138      	bne.n	8003640 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035d8:	2302      	movs	r3, #2
 80035da:	e032      	b.n	8003642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2224      	movs	r2, #36	; 0x24
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0201 	bic.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800360a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6819      	ldr	r1, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	e000      	b.n	8003642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003640:	2302      	movs	r3, #2
  }
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800364e:	b480      	push	{r7}
 8003650:	b085      	sub	sp, #20
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b20      	cmp	r3, #32
 8003662:	d139      	bne.n	80036d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800366e:	2302      	movs	r3, #2
 8003670:	e033      	b.n	80036da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2224      	movs	r2, #36	; 0x24
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e000      	b.n	80036da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036d8:	2302      	movs	r3, #2
  }
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e8:	b08f      	sub	sp, #60	; 0x3c
 80036ea:	af0a      	add	r7, sp, #40	; 0x28
 80036ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e116      	b.n	8003926 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe fb06 	bl	8001d24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2203      	movs	r2, #3
 800371c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f002 fe87 	bl	800644a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	603b      	str	r3, [r7, #0]
 8003742:	687e      	ldr	r6, [r7, #4]
 8003744:	466d      	mov	r5, sp
 8003746:	f106 0410 	add.w	r4, r6, #16
 800374a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800374c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800374e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003752:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003756:	e885 0003 	stmia.w	r5, {r0, r1}
 800375a:	1d33      	adds	r3, r6, #4
 800375c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800375e:	6838      	ldr	r0, [r7, #0]
 8003760:	f002 fe47 	bl	80063f2 <USB_CoreInit>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2202      	movs	r2, #2
 800376e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0d7      	b.n	8003926 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2100      	movs	r1, #0
 800377c:	4618      	mov	r0, r3
 800377e:	f002 fe75 	bl	800646c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
 8003786:	e04a      	b.n	800381e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003788:	7bfa      	ldrb	r2, [r7, #15]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	333d      	adds	r3, #61	; 0x3d
 8003798:	2201      	movs	r2, #1
 800379a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	333c      	adds	r3, #60	; 0x3c
 80037ac:	7bfa      	ldrb	r2, [r7, #15]
 80037ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	b298      	uxth	r0, r3
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	3344      	adds	r3, #68	; 0x44
 80037c4:	4602      	mov	r2, r0
 80037c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037c8:	7bfa      	ldrb	r2, [r7, #15]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	3340      	adds	r3, #64	; 0x40
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	3348      	adds	r3, #72	; 0x48
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	334c      	adds	r3, #76	; 0x4c
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	3354      	adds	r3, #84	; 0x54
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	3301      	adds	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d3af      	bcc.n	8003788 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003828:	2300      	movs	r3, #0
 800382a:	73fb      	strb	r3, [r7, #15]
 800382c:	e044      	b.n	80038b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003844:	7bfa      	ldrb	r2, [r7, #15]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800385a:	7bfa      	ldrb	r2, [r7, #15]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003886:	7bfa      	ldrb	r2, [r7, #15]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	3301      	adds	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3b5      	bcc.n	800382e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	687e      	ldr	r6, [r7, #4]
 80038ca:	466d      	mov	r5, sp
 80038cc:	f106 0410 	add.w	r4, r6, #16
 80038d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80038e0:	1d33      	adds	r3, r6, #4
 80038e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038e4:	6838      	ldr	r0, [r7, #0]
 80038e6:	f002 fe0d 	bl	8006504 <USB_DevInit>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e014      	b.n	8003926 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	2b01      	cmp	r3, #1
 8003912:	d102      	bne.n	800391a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f80a 	bl	800392e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f002 ffb9 	bl	8006896 <USB_DevDisconnect>

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800392e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800392e:	b480      	push	{r7}
 8003930:	b085      	sub	sp, #20
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003960:	f043 0303 	orr.w	r3, r3, #3
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a04      	ldr	r2, [pc, #16]	; (8003994 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003986:	6013      	str	r3, [r2, #0]
}
 8003988:	bf00      	nop
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40007000 	.word	0x40007000

08003998 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800399c:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40007000 	.word	0x40007000

080039b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c2:	d130      	bne.n	8003a26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039c4:	4b23      	ldr	r3, [pc, #140]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d0:	d038      	beq.n	8003a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039d2:	4b20      	ldr	r3, [pc, #128]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039da:	4a1e      	ldr	r2, [pc, #120]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039e2:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2232      	movs	r2, #50	; 0x32
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	0c9b      	lsrs	r3, r3, #18
 80039f4:	3301      	adds	r3, #1
 80039f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039f8:	e002      	b.n	8003a00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a00:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0c:	d102      	bne.n	8003a14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f2      	bne.n	80039fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a20:	d110      	bne.n	8003a44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e00f      	b.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a26:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a32:	d007      	beq.n	8003a44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a34:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a3c:	4a05      	ldr	r2, [pc, #20]	; (8003a54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40007000 	.word	0x40007000
 8003a58:	20000010 	.word	0x20000010
 8003a5c:	431bde83 	.word	0x431bde83

08003a60 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a6e:	6053      	str	r3, [r2, #4]
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40007000 	.word	0x40007000

08003a80 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003a88:	f7fe fb16 	bl	80020b8 <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e063      	b.n	8003b60 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7fd ffed 	bl	8001a8c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003ab2:	f241 3188 	movw	r1, #5000	; 0x1388
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f858 	bl	8003b6c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	021a      	lsls	r2, r3, #8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2120      	movs	r1, #32
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f850 	bl	8003b88 <QSPI_WaitFlagStateUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003aec:	7afb      	ldrb	r3, [r7, #11]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d131      	bne.n	8003b56 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003afc:	f023 0310 	bic.w	r3, r3, #16
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6852      	ldr	r2, [r2, #4]
 8003b04:	0611      	lsls	r1, r2, #24
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68d2      	ldr	r2, [r2, #12]
 8003b0a:	4311      	orrs	r1, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	430b      	orrs	r3, r1
 8003b12:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <HAL_QSPI_Init+0xe8>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6912      	ldr	r2, [r2, #16]
 8003b22:	0411      	lsls	r1, r2, #16
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6952      	ldr	r2, [r2, #20]
 8003b28:	4311      	orrs	r1, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6992      	ldr	r2, [r2, #24]
 8003b2e:	4311      	orrs	r1, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003b5e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	ffe0f8fe 	.word	0xffe0f8fe

08003b6c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	4613      	mov	r3, r2
 8003b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b98:	e01a      	b.n	8003bd0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d016      	beq.n	8003bd0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba2:	f7fe fa89 	bl	80020b8 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d302      	bcc.n	8003bb8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10b      	bne.n	8003bd0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2204      	movs	r2, #4
 8003bbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc4:	f043 0201 	orr.w	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e00e      	b.n	8003bee <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bf14      	ite	ne
 8003bde:	2301      	movne	r3, #1
 8003be0:	2300      	moveq	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	461a      	mov	r2, r3
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d1d6      	bne.n	8003b9a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e3ca      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c0a:	4b97      	ldr	r3, [pc, #604]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c14:	4b94      	ldr	r3, [pc, #592]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80e4 	beq.w	8003df4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d007      	beq.n	8003c42 <HAL_RCC_OscConfig+0x4a>
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	2b0c      	cmp	r3, #12
 8003c36:	f040 808b 	bne.w	8003d50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	f040 8087 	bne.w	8003d50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c42:	4b89      	ldr	r3, [pc, #548]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_RCC_OscConfig+0x62>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e3a2      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1a      	ldr	r2, [r3, #32]
 8003c5e:	4b82      	ldr	r3, [pc, #520]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d004      	beq.n	8003c74 <HAL_RCC_OscConfig+0x7c>
 8003c6a:	4b7f      	ldr	r3, [pc, #508]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c72:	e005      	b.n	8003c80 <HAL_RCC_OscConfig+0x88>
 8003c74:	4b7c      	ldr	r3, [pc, #496]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d223      	bcs.n	8003ccc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fd55 	bl	8004738 <RCC_SetFlashLatencyFromMSIRange>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e383      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c98:	4b73      	ldr	r3, [pc, #460]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a72      	ldr	r2, [pc, #456]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c9e:	f043 0308 	orr.w	r3, r3, #8
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	4b70      	ldr	r3, [pc, #448]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	496d      	ldr	r1, [pc, #436]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cb6:	4b6c      	ldr	r3, [pc, #432]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	4968      	ldr	r1, [pc, #416]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	604b      	str	r3, [r1, #4]
 8003cca:	e025      	b.n	8003d18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ccc:	4b66      	ldr	r3, [pc, #408]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a65      	ldr	r2, [pc, #404]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cd2:	f043 0308 	orr.w	r3, r3, #8
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	4b63      	ldr	r3, [pc, #396]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	4960      	ldr	r1, [pc, #384]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cea:	4b5f      	ldr	r3, [pc, #380]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	495b      	ldr	r1, [pc, #364]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d109      	bne.n	8003d18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fd15 	bl	8004738 <RCC_SetFlashLatencyFromMSIRange>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e343      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d18:	f000 fc4a 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	4b52      	ldr	r3, [pc, #328]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	4950      	ldr	r1, [pc, #320]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003d2a:	5ccb      	ldrb	r3, [r1, r3]
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
 8003d34:	4a4e      	ldr	r2, [pc, #312]	; (8003e70 <HAL_RCC_OscConfig+0x278>)
 8003d36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d38:	4b4e      	ldr	r3, [pc, #312]	; (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fe f96b 	bl	8002018 <HAL_InitTick>
 8003d42:	4603      	mov	r3, r0
 8003d44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d052      	beq.n	8003df2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	e327      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d032      	beq.n	8003dbe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d58:	4b43      	ldr	r3, [pc, #268]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a42      	ldr	r2, [pc, #264]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d64:	f7fe f9a8 	bl	80020b8 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d6c:	f7fe f9a4 	bl	80020b8 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e310      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d7e:	4b3a      	ldr	r3, [pc, #232]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d8a:	4b37      	ldr	r3, [pc, #220]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a36      	ldr	r2, [pc, #216]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d90:	f043 0308 	orr.w	r3, r3, #8
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b34      	ldr	r3, [pc, #208]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	4931      	ldr	r1, [pc, #196]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003da8:	4b2f      	ldr	r3, [pc, #188]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	021b      	lsls	r3, r3, #8
 8003db6:	492c      	ldr	r1, [pc, #176]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	604b      	str	r3, [r1, #4]
 8003dbc:	e01a      	b.n	8003df4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dbe:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a29      	ldr	r2, [pc, #164]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dca:	f7fe f975 	bl	80020b8 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dd2:	f7fe f971 	bl	80020b8 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e2dd      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003de4:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f0      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x1da>
 8003df0:	e000      	b.n	8003df4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003df2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d074      	beq.n	8003eea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d005      	beq.n	8003e12 <HAL_RCC_OscConfig+0x21a>
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b0c      	cmp	r3, #12
 8003e0a:	d10e      	bne.n	8003e2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d10b      	bne.n	8003e2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e12:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d064      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x2f0>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d160      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e2ba      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e32:	d106      	bne.n	8003e42 <HAL_RCC_OscConfig+0x24a>
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a0b      	ldr	r2, [pc, #44]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	e026      	b.n	8003e90 <HAL_RCC_OscConfig+0x298>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4a:	d115      	bne.n	8003e78 <HAL_RCC_OscConfig+0x280>
 8003e4c:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a05      	ldr	r2, [pc, #20]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a02      	ldr	r2, [pc, #8]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	e014      	b.n	8003e90 <HAL_RCC_OscConfig+0x298>
 8003e66:	bf00      	nop
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	0800dc0c 	.word	0x0800dc0c
 8003e70:	20000010 	.word	0x20000010
 8003e74:	20000014 	.word	0x20000014
 8003e78:	4ba0      	ldr	r3, [pc, #640]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a9f      	ldr	r2, [pc, #636]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b9d      	ldr	r3, [pc, #628]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a9c      	ldr	r2, [pc, #624]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fe f90e 	bl	80020b8 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fe f90a 	bl	80020b8 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e276      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eb2:	4b92      	ldr	r3, [pc, #584]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x2a8>
 8003ebe:	e014      	b.n	8003eea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fe f8fa 	bl	80020b8 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7fe f8f6 	bl	80020b8 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e262      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eda:	4b88      	ldr	r3, [pc, #544]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x2d0>
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d060      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_OscConfig+0x310>
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	d119      	bne.n	8003f36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d116      	bne.n	8003f36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f08:	4b7c      	ldr	r3, [pc, #496]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_OscConfig+0x328>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e23f      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f20:	4b76      	ldr	r3, [pc, #472]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	4973      	ldr	r1, [pc, #460]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f34:	e040      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d023      	beq.n	8003f86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f3e:	4b6f      	ldr	r3, [pc, #444]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a6e      	ldr	r2, [pc, #440]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fe f8b5 	bl	80020b8 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f52:	f7fe f8b1 	bl	80020b8 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e21d      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f64:	4b65      	ldr	r3, [pc, #404]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f70:	4b62      	ldr	r3, [pc, #392]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	495f      	ldr	r1, [pc, #380]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
 8003f84:	e018      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f86:	4b5d      	ldr	r3, [pc, #372]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a5c      	ldr	r2, [pc, #368]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f92:	f7fe f891 	bl	80020b8 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9a:	f7fe f88d 	bl	80020b8 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e1f9      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fac:	4b53      	ldr	r3, [pc, #332]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d03c      	beq.n	800403e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01c      	beq.n	8004006 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fcc:	4b4b      	ldr	r3, [pc, #300]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd2:	4a4a      	ldr	r2, [pc, #296]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7fe f86c 	bl	80020b8 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe4:	f7fe f868 	bl	80020b8 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e1d4      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ff6:	4b41      	ldr	r3, [pc, #260]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ef      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x3ec>
 8004004:	e01b      	b.n	800403e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004006:	4b3d      	ldr	r3, [pc, #244]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800400c:	4a3b      	ldr	r2, [pc, #236]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004016:	f7fe f84f 	bl	80020b8 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800401e:	f7fe f84b 	bl	80020b8 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e1b7      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004030:	4b32      	ldr	r3, [pc, #200]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1ef      	bne.n	800401e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80a6 	beq.w	8004198 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404c:	2300      	movs	r3, #0
 800404e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004050:	4b2a      	ldr	r3, [pc, #168]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10d      	bne.n	8004078 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405c:	4b27      	ldr	r3, [pc, #156]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	4a26      	ldr	r2, [pc, #152]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004066:	6593      	str	r3, [r2, #88]	; 0x58
 8004068:	4b24      	ldr	r3, [pc, #144]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004074:	2301      	movs	r3, #1
 8004076:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004078:	4b21      	ldr	r3, [pc, #132]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d118      	bne.n	80040b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004084:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 800408a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004090:	f7fe f812 	bl	80020b8 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004098:	f7fe f80e 	bl	80020b8 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e17a      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040aa:	4b15      	ldr	r3, [pc, #84]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d108      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4d8>
 80040be:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c4:	4a0d      	ldr	r2, [pc, #52]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040ce:	e029      	b.n	8004124 <HAL_RCC_OscConfig+0x52c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b05      	cmp	r3, #5
 80040d6:	d115      	bne.n	8004104 <HAL_RCC_OscConfig+0x50c>
 80040d8:	4b08      	ldr	r3, [pc, #32]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	4a07      	ldr	r2, [pc, #28]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	4a03      	ldr	r2, [pc, #12]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040f8:	e014      	b.n	8004124 <HAL_RCC_OscConfig+0x52c>
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000
 8004100:	40007000 	.word	0x40007000
 8004104:	4b9c      	ldr	r3, [pc, #624]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	4a9b      	ldr	r2, [pc, #620]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004114:	4b98      	ldr	r3, [pc, #608]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	4a97      	ldr	r2, [pc, #604]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d016      	beq.n	800415a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fd ffc4 	bl	80020b8 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004132:	e00a      	b.n	800414a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004134:	f7fd ffc0 	bl	80020b8 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e12a      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800414a:	4b8b      	ldr	r3, [pc, #556]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ed      	beq.n	8004134 <HAL_RCC_OscConfig+0x53c>
 8004158:	e015      	b.n	8004186 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415a:	f7fd ffad 	bl	80020b8 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004160:	e00a      	b.n	8004178 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fd ffa9 	bl	80020b8 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e113      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004178:	4b7f      	ldr	r3, [pc, #508]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ed      	bne.n	8004162 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004186:	7ffb      	ldrb	r3, [r7, #31]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418c:	4b7a      	ldr	r3, [pc, #488]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	4a79      	ldr	r2, [pc, #484]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004196:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 80fe 	beq.w	800439e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	f040 80d0 	bne.w	800434c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041ac:	4b72      	ldr	r3, [pc, #456]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f003 0203 	and.w	r2, r3, #3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	429a      	cmp	r2, r3
 80041be:	d130      	bne.n	8004222 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	3b01      	subs	r3, #1
 80041cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d127      	bne.n	8004222 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d11f      	bne.n	8004222 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041ec:	2a07      	cmp	r2, #7
 80041ee:	bf14      	ite	ne
 80041f0:	2201      	movne	r2, #1
 80041f2:	2200      	moveq	r2, #0
 80041f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d113      	bne.n	8004222 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004204:	085b      	lsrs	r3, r3, #1
 8004206:	3b01      	subs	r3, #1
 8004208:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800420a:	429a      	cmp	r2, r3
 800420c:	d109      	bne.n	8004222 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	085b      	lsrs	r3, r3, #1
 800421a:	3b01      	subs	r3, #1
 800421c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d06e      	beq.n	8004300 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b0c      	cmp	r3, #12
 8004226:	d069      	beq.n	80042fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004228:	4b53      	ldr	r3, [pc, #332]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d105      	bne.n	8004240 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004234:	4b50      	ldr	r3, [pc, #320]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0ad      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004244:	4b4c      	ldr	r3, [pc, #304]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a4b      	ldr	r2, [pc, #300]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800424a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800424e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004250:	f7fd ff32 	bl	80020b8 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004258:	f7fd ff2e 	bl	80020b8 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e09a      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426a:	4b43      	ldr	r3, [pc, #268]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004276:	4b40      	ldr	r3, [pc, #256]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	4b40      	ldr	r3, [pc, #256]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800427c:	4013      	ands	r3, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004286:	3a01      	subs	r2, #1
 8004288:	0112      	lsls	r2, r2, #4
 800428a:	4311      	orrs	r1, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004290:	0212      	lsls	r2, r2, #8
 8004292:	4311      	orrs	r1, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004298:	0852      	lsrs	r2, r2, #1
 800429a:	3a01      	subs	r2, #1
 800429c:	0552      	lsls	r2, r2, #21
 800429e:	4311      	orrs	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042a4:	0852      	lsrs	r2, r2, #1
 80042a6:	3a01      	subs	r2, #1
 80042a8:	0652      	lsls	r2, r2, #25
 80042aa:	4311      	orrs	r1, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042b0:	0912      	lsrs	r2, r2, #4
 80042b2:	0452      	lsls	r2, r2, #17
 80042b4:	430a      	orrs	r2, r1
 80042b6:	4930      	ldr	r1, [pc, #192]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042bc:	4b2e      	ldr	r3, [pc, #184]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a2d      	ldr	r2, [pc, #180]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 80042c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042c8:	4b2b      	ldr	r3, [pc, #172]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a2a      	ldr	r2, [pc, #168]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 80042ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042d4:	f7fd fef0 	bl	80020b8 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fd feec 	bl	80020b8 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e058      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ee:	4b22      	ldr	r3, [pc, #136]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042fa:	e050      	b.n	800439e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e04f      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004300:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d148      	bne.n	800439e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800430c:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a19      	ldr	r2, [pc, #100]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004316:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004318:	4b17      	ldr	r3, [pc, #92]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4a16      	ldr	r2, [pc, #88]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800431e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004322:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004324:	f7fd fec8 	bl	80020b8 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432c:	f7fd fec4 	bl	80020b8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e030      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433e:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x734>
 800434a:	e028      	b.n	800439e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d023      	beq.n	800439a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a08      	ldr	r2, [pc, #32]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004358:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800435c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435e:	f7fd feab 	bl	80020b8 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004364:	e00c      	b.n	8004380 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004366:	f7fd fea7 	bl	80020b8 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d905      	bls.n	8004380 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e013      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
 8004378:	40021000 	.word	0x40021000
 800437c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004380:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <HAL_RCC_OscConfig+0x7b0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1ec      	bne.n	8004366 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_RCC_OscConfig+0x7b0>)
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	4905      	ldr	r1, [pc, #20]	; (80043a8 <HAL_RCC_OscConfig+0x7b0>)
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_RCC_OscConfig+0x7b4>)
 8004394:	4013      	ands	r3, r2
 8004396:	60cb      	str	r3, [r1, #12]
 8004398:	e001      	b.n	800439e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40021000 	.word	0x40021000
 80043ac:	feeefffc 	.word	0xfeeefffc

080043b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0e7      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043c4:	4b75      	ldr	r3, [pc, #468]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d910      	bls.n	80043f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d2:	4b72      	ldr	r3, [pc, #456]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 0207 	bic.w	r2, r3, #7
 80043da:	4970      	ldr	r1, [pc, #448]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e2:	4b6e      	ldr	r3, [pc, #440]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0cf      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d010      	beq.n	8004422 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	4b66      	ldr	r3, [pc, #408]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800440c:	429a      	cmp	r2, r3
 800440e:	d908      	bls.n	8004422 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004410:	4b63      	ldr	r3, [pc, #396]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4960      	ldr	r1, [pc, #384]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 800441e:	4313      	orrs	r3, r2
 8004420:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d04c      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d107      	bne.n	8004446 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004436:	4b5a      	ldr	r3, [pc, #360]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d121      	bne.n	8004486 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e0a6      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d107      	bne.n	800445e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800444e:	4b54      	ldr	r3, [pc, #336]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d115      	bne.n	8004486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e09a      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d107      	bne.n	8004476 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004466:	4b4e      	ldr	r3, [pc, #312]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e08e      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004476:	4b4a      	ldr	r3, [pc, #296]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e086      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004486:	4b46      	ldr	r3, [pc, #280]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f023 0203 	bic.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4943      	ldr	r1, [pc, #268]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004494:	4313      	orrs	r3, r2
 8004496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004498:	f7fd fe0e 	bl	80020b8 <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a0:	f7fd fe0a 	bl	80020b8 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e06e      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	4b3a      	ldr	r3, [pc, #232]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 020c 	and.w	r2, r3, #12
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d1eb      	bne.n	80044a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d010      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	4b31      	ldr	r3, [pc, #196]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d208      	bcs.n	80044f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e4:	4b2e      	ldr	r3, [pc, #184]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	492b      	ldr	r1, [pc, #172]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044f6:	4b29      	ldr	r3, [pc, #164]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d210      	bcs.n	8004526 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004504:	4b25      	ldr	r3, [pc, #148]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f023 0207 	bic.w	r2, r3, #7
 800450c:	4923      	ldr	r1, [pc, #140]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	4313      	orrs	r3, r2
 8004512:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004514:	4b21      	ldr	r3, [pc, #132]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d001      	beq.n	8004526 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e036      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004532:	4b1b      	ldr	r3, [pc, #108]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	4918      	ldr	r1, [pc, #96]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004550:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4910      	ldr	r1, [pc, #64]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004560:	4313      	orrs	r3, r2
 8004562:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004564:	f000 f824 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8004568:	4602      	mov	r2, r0
 800456a:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	490b      	ldr	r1, [pc, #44]	; (80045a4 <HAL_RCC_ClockConfig+0x1f4>)
 8004576:	5ccb      	ldrb	r3, [r1, r3]
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
 8004580:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004582:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_RCC_ClockConfig+0x1fc>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f7fd fd45 	bl	8002018 <HAL_InitTick>
 800458e:	4603      	mov	r3, r0
 8004590:	72fb      	strb	r3, [r7, #11]

  return status;
 8004592:	7afb      	ldrb	r3, [r7, #11]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40022000 	.word	0x40022000
 80045a0:	40021000 	.word	0x40021000
 80045a4:	0800dc0c 	.word	0x0800dc0c
 80045a8:	20000010 	.word	0x20000010
 80045ac:	20000014 	.word	0x20000014

080045b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b089      	sub	sp, #36	; 0x24
 80045b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	2300      	movs	r3, #0
 80045bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045be:	4b3e      	ldr	r3, [pc, #248]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045c8:	4b3b      	ldr	r3, [pc, #236]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x34>
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b0c      	cmp	r3, #12
 80045dc:	d121      	bne.n	8004622 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d11e      	bne.n	8004622 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045e4:	4b34      	ldr	r3, [pc, #208]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045f0:	4b31      	ldr	r3, [pc, #196]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	e005      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004600:	4b2d      	ldr	r3, [pc, #180]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800460c:	4a2b      	ldr	r2, [pc, #172]	; (80046bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004614:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10d      	bne.n	8004638 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004620:	e00a      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d102      	bne.n	800462e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004628:	4b25      	ldr	r3, [pc, #148]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	e004      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b08      	cmp	r3, #8
 8004632:	d101      	bne.n	8004638 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004634:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004636:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b0c      	cmp	r3, #12
 800463c:	d134      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800463e:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d003      	beq.n	8004656 <HAL_RCC_GetSysClockFreq+0xa6>
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b03      	cmp	r3, #3
 8004652:	d003      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0xac>
 8004654:	e005      	b.n	8004662 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004656:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004658:	617b      	str	r3, [r7, #20]
      break;
 800465a:	e005      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800465c:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800465e:	617b      	str	r3, [r7, #20]
      break;
 8004660:	e002      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	617b      	str	r3, [r7, #20]
      break;
 8004666:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004668:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	3301      	adds	r3, #1
 8004674:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	0a1b      	lsrs	r3, r3, #8
 800467c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	fb03 f202 	mul.w	r2, r3, r2
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	fbb2 f3f3 	udiv	r3, r2, r3
 800468c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800468e:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	0e5b      	lsrs	r3, r3, #25
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	3301      	adds	r3, #1
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046a8:	69bb      	ldr	r3, [r7, #24]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3724      	adds	r7, #36	; 0x24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40021000 	.word	0x40021000
 80046bc:	0800dc24 	.word	0x0800dc24
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	007a1200 	.word	0x007a1200

080046c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000010 	.word	0x20000010

080046e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046e4:	f7ff fff0 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4904      	ldr	r1, [pc, #16]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000
 8004708:	0800dc1c 	.word	0x0800dc1c

0800470c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004710:	f7ff ffda 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	0adb      	lsrs	r3, r3, #11
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4904      	ldr	r1, [pc, #16]	; (8004734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	0800dc1c 	.word	0x0800dc1c

08004738 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004740:	2300      	movs	r3, #0
 8004742:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004744:	4b2a      	ldr	r3, [pc, #168]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004750:	f7ff f922 	bl	8003998 <HAL_PWREx_GetVoltageRange>
 8004754:	6178      	str	r0, [r7, #20]
 8004756:	e014      	b.n	8004782 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800475a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475c:	4a24      	ldr	r2, [pc, #144]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800475e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004762:	6593      	str	r3, [r2, #88]	; 0x58
 8004764:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004770:	f7ff f912 	bl	8003998 <HAL_PWREx_GetVoltageRange>
 8004774:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004776:	4b1e      	ldr	r3, [pc, #120]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477a:	4a1d      	ldr	r2, [pc, #116]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800477c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004780:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004788:	d10b      	bne.n	80047a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b80      	cmp	r3, #128	; 0x80
 800478e:	d919      	bls.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2ba0      	cmp	r3, #160	; 0xa0
 8004794:	d902      	bls.n	800479c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004796:	2302      	movs	r3, #2
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	e013      	b.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800479c:	2301      	movs	r3, #1
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	e010      	b.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b80      	cmp	r3, #128	; 0x80
 80047a6:	d902      	bls.n	80047ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047a8:	2303      	movs	r3, #3
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	e00a      	b.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b80      	cmp	r3, #128	; 0x80
 80047b2:	d102      	bne.n	80047ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047b4:	2302      	movs	r3, #2
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	e004      	b.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b70      	cmp	r3, #112	; 0x70
 80047be:	d101      	bne.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047c0:	2301      	movs	r3, #1
 80047c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f023 0207 	bic.w	r2, r3, #7
 80047cc:	4909      	ldr	r1, [pc, #36]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047d4:	4b07      	ldr	r3, [pc, #28]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d001      	beq.n	80047e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40021000 	.word	0x40021000
 80047f4:	40022000 	.word	0x40022000

080047f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004800:	2300      	movs	r3, #0
 8004802:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004804:	2300      	movs	r3, #0
 8004806:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004810:	2b00      	cmp	r3, #0
 8004812:	d041      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004818:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800481c:	d02a      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800481e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004822:	d824      	bhi.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004824:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004828:	d008      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800482a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800482e:	d81e      	bhi.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004838:	d010      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800483a:	e018      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800483c:	4b86      	ldr	r3, [pc, #536]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4a85      	ldr	r2, [pc, #532]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004846:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004848:	e015      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3304      	adds	r3, #4
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f000 facb 	bl	8004dec <RCCEx_PLLSAI1_Config>
 8004856:	4603      	mov	r3, r0
 8004858:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800485a:	e00c      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3320      	adds	r3, #32
 8004860:	2100      	movs	r1, #0
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fbb6 	bl	8004fd4 <RCCEx_PLLSAI2_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800486c:	e003      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	74fb      	strb	r3, [r7, #19]
      break;
 8004872:	e000      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004876:	7cfb      	ldrb	r3, [r7, #19]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10b      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800487c:	4b76      	ldr	r3, [pc, #472]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004882:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800488a:	4973      	ldr	r1, [pc, #460]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004892:	e001      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004894:	7cfb      	ldrb	r3, [r7, #19]
 8004896:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d041      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048ac:	d02a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80048ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048b2:	d824      	bhi.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048b8:	d008      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048be:	d81e      	bhi.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048c8:	d010      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048ca:	e018      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048cc:	4b62      	ldr	r3, [pc, #392]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4a61      	ldr	r2, [pc, #388]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048d8:	e015      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3304      	adds	r3, #4
 80048de:	2100      	movs	r1, #0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fa83 	bl	8004dec <RCCEx_PLLSAI1_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048ea:	e00c      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3320      	adds	r3, #32
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fb6e 	bl	8004fd4 <RCCEx_PLLSAI2_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048fc:	e003      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	74fb      	strb	r3, [r7, #19]
      break;
 8004902:	e000      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004906:	7cfb      	ldrb	r3, [r7, #19]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10b      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800490c:	4b52      	ldr	r3, [pc, #328]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800491a:	494f      	ldr	r1, [pc, #316]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004922:	e001      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004924:	7cfb      	ldrb	r3, [r7, #19]
 8004926:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a0 	beq.w	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004936:	2300      	movs	r3, #0
 8004938:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800493a:	4b47      	ldr	r3, [pc, #284]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800494a:	2300      	movs	r3, #0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00d      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004950:	4b41      	ldr	r3, [pc, #260]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004954:	4a40      	ldr	r2, [pc, #256]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495a:	6593      	str	r3, [r2, #88]	; 0x58
 800495c:	4b3e      	ldr	r3, [pc, #248]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800495e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004968:	2301      	movs	r3, #1
 800496a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800496c:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a3a      	ldr	r2, [pc, #232]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004976:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004978:	f7fd fb9e 	bl	80020b8 <HAL_GetTick>
 800497c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800497e:	e009      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004980:	f7fd fb9a 	bl	80020b8 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d902      	bls.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	74fb      	strb	r3, [r7, #19]
        break;
 8004992:	e005      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004994:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0ef      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d15c      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049a6:	4b2c      	ldr	r3, [pc, #176]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01f      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d019      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049c4:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049d0:	4b21      	ldr	r3, [pc, #132]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049e0:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	4a1c      	ldr	r2, [pc, #112]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049f0:	4a19      	ldr	r2, [pc, #100]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d016      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fd fb59 	bl	80020b8 <HAL_GetTick>
 8004a06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a08:	e00b      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0a:	f7fd fb55 	bl	80020b8 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d902      	bls.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	74fb      	strb	r3, [r7, #19]
            break;
 8004a20:	e006      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a22:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0ec      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a30:	7cfb      	ldrb	r3, [r7, #19]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a36:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a46:	4904      	ldr	r1, [pc, #16]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a4e:	e009      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a50:	7cfb      	ldrb	r3, [r7, #19]
 8004a52:	74bb      	strb	r3, [r7, #18]
 8004a54:	e006      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a56:	bf00      	nop
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a64:	7c7b      	ldrb	r3, [r7, #17]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d105      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a6a:	4b9e      	ldr	r3, [pc, #632]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6e:	4a9d      	ldr	r2, [pc, #628]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a82:	4b98      	ldr	r3, [pc, #608]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a88:	f023 0203 	bic.w	r2, r3, #3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	4994      	ldr	r1, [pc, #592]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aa4:	4b8f      	ldr	r3, [pc, #572]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f023 020c 	bic.w	r2, r3, #12
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	498c      	ldr	r1, [pc, #560]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ac6:	4b87      	ldr	r3, [pc, #540]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	4983      	ldr	r1, [pc, #524]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ae8:	4b7e      	ldr	r3, [pc, #504]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	497b      	ldr	r1, [pc, #492]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b0a:	4b76      	ldr	r3, [pc, #472]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b18:	4972      	ldr	r1, [pc, #456]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b2c:	4b6d      	ldr	r3, [pc, #436]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3a:	496a      	ldr	r1, [pc, #424]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b4e:	4b65      	ldr	r3, [pc, #404]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5c:	4961      	ldr	r1, [pc, #388]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b70:	4b5c      	ldr	r3, [pc, #368]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b7e:	4959      	ldr	r1, [pc, #356]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b92:	4b54      	ldr	r3, [pc, #336]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba0:	4950      	ldr	r1, [pc, #320]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bb4:	4b4b      	ldr	r3, [pc, #300]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc2:	4948      	ldr	r1, [pc, #288]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bd6:	4b43      	ldr	r3, [pc, #268]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be4:	493f      	ldr	r1, [pc, #252]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d028      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bf8:	4b3a      	ldr	r3, [pc, #232]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c06:	4937      	ldr	r1, [pc, #220]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c16:	d106      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c18:	4b32      	ldr	r3, [pc, #200]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4a31      	ldr	r2, [pc, #196]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c22:	60d3      	str	r3, [r2, #12]
 8004c24:	e011      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c2e:	d10c      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3304      	adds	r3, #4
 8004c34:	2101      	movs	r1, #1
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f8d8 	bl	8004dec <RCCEx_PLLSAI1_Config>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c40:	7cfb      	ldrb	r3, [r7, #19]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d028      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c56:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	491f      	ldr	r1, [pc, #124]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c74:	d106      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c76:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c80:	60d3      	str	r3, [r2, #12]
 8004c82:	e011      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3304      	adds	r3, #4
 8004c92:	2101      	movs	r1, #1
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 f8a9 	bl	8004dec <RCCEx_PLLSAI1_Config>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ca4:	7cfb      	ldrb	r3, [r7, #19]
 8004ca6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d02b      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc2:	4908      	ldr	r1, [pc, #32]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd2:	d109      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd4:	4b03      	ldr	r3, [pc, #12]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	4a02      	ldr	r2, [pc, #8]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cde:	60d3      	str	r3, [r2, #12]
 8004ce0:	e014      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004ce2:	bf00      	nop
 8004ce4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cf0:	d10c      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 f877 	bl	8004dec <RCCEx_PLLSAI1_Config>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d02:	7cfb      	ldrb	r3, [r7, #19]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d08:	7cfb      	ldrb	r3, [r7, #19]
 8004d0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d02f      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d18:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d26:	4928      	ldr	r1, [pc, #160]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d36:	d10d      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f854 	bl	8004dec <RCCEx_PLLSAI1_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d014      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	74bb      	strb	r3, [r7, #18]
 8004d52:	e011      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3320      	adds	r3, #32
 8004d62:	2102      	movs	r1, #2
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 f935 	bl	8004fd4 <RCCEx_PLLSAI2_Config>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d6e:	7cfb      	ldrb	r3, [r7, #19]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d74:	7cfb      	ldrb	r3, [r7, #19]
 8004d76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d84:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d92:	490d      	ldr	r1, [pc, #52]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00b      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004da6:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004db6:	4904      	ldr	r1, [pc, #16]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dbe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40021000 	.word	0x40021000

08004dcc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004dd0:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a04      	ldr	r2, [pc, #16]	; (8004de8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004dd6:	f043 0304 	orr.w	r3, r3, #4
 8004dda:	6013      	str	r3, [r2, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40021000 	.word	0x40021000

08004dec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dfa:	4b75      	ldr	r3, [pc, #468]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d018      	beq.n	8004e38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e06:	4b72      	ldr	r3, [pc, #456]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f003 0203 	and.w	r2, r3, #3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d10d      	bne.n	8004e32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
       ||
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e1e:	4b6c      	ldr	r3, [pc, #432]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	091b      	lsrs	r3, r3, #4
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d047      	beq.n	8004ec2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	73fb      	strb	r3, [r7, #15]
 8004e36:	e044      	b.n	8004ec2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d018      	beq.n	8004e72 <RCCEx_PLLSAI1_Config+0x86>
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d825      	bhi.n	8004e90 <RCCEx_PLLSAI1_Config+0xa4>
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d002      	beq.n	8004e4e <RCCEx_PLLSAI1_Config+0x62>
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d009      	beq.n	8004e60 <RCCEx_PLLSAI1_Config+0x74>
 8004e4c:	e020      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e4e:	4b60      	ldr	r3, [pc, #384]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d11d      	bne.n	8004e96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e5e:	e01a      	b.n	8004e96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e60:	4b5b      	ldr	r3, [pc, #364]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d116      	bne.n	8004e9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e70:	e013      	b.n	8004e9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e72:	4b57      	ldr	r3, [pc, #348]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10f      	bne.n	8004e9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e7e:	4b54      	ldr	r3, [pc, #336]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e8e:	e006      	b.n	8004e9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
      break;
 8004e94:	e004      	b.n	8004ea0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e96:	bf00      	nop
 8004e98:	e002      	b.n	8004ea0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e9a:	bf00      	nop
 8004e9c:	e000      	b.n	8004ea0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10d      	bne.n	8004ec2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ea6:	4b4a      	ldr	r3, [pc, #296]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6819      	ldr	r1, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	4944      	ldr	r1, [pc, #272]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d17d      	bne.n	8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ec8:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a40      	ldr	r2, [pc, #256]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ece:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed4:	f7fd f8f0 	bl	80020b8 <HAL_GetTick>
 8004ed8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eda:	e009      	b.n	8004ef0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004edc:	f7fd f8ec 	bl	80020b8 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d902      	bls.n	8004ef0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	73fb      	strb	r3, [r7, #15]
        break;
 8004eee:	e005      	b.n	8004efc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ef0:	4b37      	ldr	r3, [pc, #220]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1ef      	bne.n	8004edc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d160      	bne.n	8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d111      	bne.n	8004f2c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f08:	4b31      	ldr	r3, [pc, #196]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6892      	ldr	r2, [r2, #8]
 8004f18:	0211      	lsls	r1, r2, #8
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	68d2      	ldr	r2, [r2, #12]
 8004f1e:	0912      	lsrs	r2, r2, #4
 8004f20:	0452      	lsls	r2, r2, #17
 8004f22:	430a      	orrs	r2, r1
 8004f24:	492a      	ldr	r1, [pc, #168]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	610b      	str	r3, [r1, #16]
 8004f2a:	e027      	b.n	8004f7c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d112      	bne.n	8004f58 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f32:	4b27      	ldr	r3, [pc, #156]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6892      	ldr	r2, [r2, #8]
 8004f42:	0211      	lsls	r1, r2, #8
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6912      	ldr	r2, [r2, #16]
 8004f48:	0852      	lsrs	r2, r2, #1
 8004f4a:	3a01      	subs	r2, #1
 8004f4c:	0552      	lsls	r2, r2, #21
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	491f      	ldr	r1, [pc, #124]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	610b      	str	r3, [r1, #16]
 8004f56:	e011      	b.n	8004f7c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f58:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6892      	ldr	r2, [r2, #8]
 8004f68:	0211      	lsls	r1, r2, #8
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6952      	ldr	r2, [r2, #20]
 8004f6e:	0852      	lsrs	r2, r2, #1
 8004f70:	3a01      	subs	r2, #1
 8004f72:	0652      	lsls	r2, r2, #25
 8004f74:	430a      	orrs	r2, r1
 8004f76:	4916      	ldr	r1, [pc, #88]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f7c:	4b14      	ldr	r3, [pc, #80]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a13      	ldr	r2, [pc, #76]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fd f896 	bl	80020b8 <HAL_GetTick>
 8004f8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f8e:	e009      	b.n	8004fa4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f90:	f7fd f892 	bl	80020b8 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d902      	bls.n	8004fa4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	73fb      	strb	r3, [r7, #15]
          break;
 8004fa2:	e005      	b.n	8004fb0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fa4:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0ef      	beq.n	8004f90 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	4904      	ldr	r1, [pc, #16]	; (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000

08004fd4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fe2:	4b6a      	ldr	r3, [pc, #424]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d018      	beq.n	8005020 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fee:	4b67      	ldr	r3, [pc, #412]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f003 0203 	and.w	r2, r3, #3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d10d      	bne.n	800501a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
       ||
 8005002:	2b00      	cmp	r3, #0
 8005004:	d009      	beq.n	800501a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005006:	4b61      	ldr	r3, [pc, #388]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	091b      	lsrs	r3, r3, #4
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
       ||
 8005016:	429a      	cmp	r2, r3
 8005018:	d047      	beq.n	80050aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	73fb      	strb	r3, [r7, #15]
 800501e:	e044      	b.n	80050aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b03      	cmp	r3, #3
 8005026:	d018      	beq.n	800505a <RCCEx_PLLSAI2_Config+0x86>
 8005028:	2b03      	cmp	r3, #3
 800502a:	d825      	bhi.n	8005078 <RCCEx_PLLSAI2_Config+0xa4>
 800502c:	2b01      	cmp	r3, #1
 800502e:	d002      	beq.n	8005036 <RCCEx_PLLSAI2_Config+0x62>
 8005030:	2b02      	cmp	r3, #2
 8005032:	d009      	beq.n	8005048 <RCCEx_PLLSAI2_Config+0x74>
 8005034:	e020      	b.n	8005078 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005036:	4b55      	ldr	r3, [pc, #340]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d11d      	bne.n	800507e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005046:	e01a      	b.n	800507e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005048:	4b50      	ldr	r3, [pc, #320]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005050:	2b00      	cmp	r3, #0
 8005052:	d116      	bne.n	8005082 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005058:	e013      	b.n	8005082 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800505a:	4b4c      	ldr	r3, [pc, #304]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10f      	bne.n	8005086 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005066:	4b49      	ldr	r3, [pc, #292]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005076:	e006      	b.n	8005086 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
      break;
 800507c:	e004      	b.n	8005088 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800507e:	bf00      	nop
 8005080:	e002      	b.n	8005088 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005086:	bf00      	nop
    }

    if(status == HAL_OK)
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10d      	bne.n	80050aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800508e:	4b3f      	ldr	r3, [pc, #252]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6819      	ldr	r1, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	3b01      	subs	r3, #1
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	430b      	orrs	r3, r1
 80050a4:	4939      	ldr	r1, [pc, #228]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d167      	bne.n	8005180 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80050b0:	4b36      	ldr	r3, [pc, #216]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a35      	ldr	r2, [pc, #212]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050bc:	f7fc fffc 	bl	80020b8 <HAL_GetTick>
 80050c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050c2:	e009      	b.n	80050d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050c4:	f7fc fff8 	bl	80020b8 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d902      	bls.n	80050d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	73fb      	strb	r3, [r7, #15]
        break;
 80050d6:	e005      	b.n	80050e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050d8:	4b2c      	ldr	r3, [pc, #176]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ef      	bne.n	80050c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d14a      	bne.n	8005180 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d111      	bne.n	8005114 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050f0:	4b26      	ldr	r3, [pc, #152]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6892      	ldr	r2, [r2, #8]
 8005100:	0211      	lsls	r1, r2, #8
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	68d2      	ldr	r2, [r2, #12]
 8005106:	0912      	lsrs	r2, r2, #4
 8005108:	0452      	lsls	r2, r2, #17
 800510a:	430a      	orrs	r2, r1
 800510c:	491f      	ldr	r1, [pc, #124]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 800510e:	4313      	orrs	r3, r2
 8005110:	614b      	str	r3, [r1, #20]
 8005112:	e011      	b.n	8005138 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005114:	4b1d      	ldr	r3, [pc, #116]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800511c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6892      	ldr	r2, [r2, #8]
 8005124:	0211      	lsls	r1, r2, #8
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6912      	ldr	r2, [r2, #16]
 800512a:	0852      	lsrs	r2, r2, #1
 800512c:	3a01      	subs	r2, #1
 800512e:	0652      	lsls	r2, r2, #25
 8005130:	430a      	orrs	r2, r1
 8005132:	4916      	ldr	r1, [pc, #88]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005134:	4313      	orrs	r3, r2
 8005136:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005138:	4b14      	ldr	r3, [pc, #80]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a13      	ldr	r2, [pc, #76]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 800513e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005142:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005144:	f7fc ffb8 	bl	80020b8 <HAL_GetTick>
 8005148:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800514a:	e009      	b.n	8005160 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800514c:	f7fc ffb4 	bl	80020b8 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d902      	bls.n	8005160 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	73fb      	strb	r3, [r7, #15]
          break;
 800515e:	e005      	b.n	800516c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005160:	4b0a      	ldr	r3, [pc, #40]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0ef      	beq.n	800514c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005172:	4b06      	ldr	r3, [pc, #24]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005174:	695a      	ldr	r2, [r3, #20]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	4904      	ldr	r1, [pc, #16]	; (800518c <RCCEx_PLLSAI2_Config+0x1b8>)
 800517c:	4313      	orrs	r3, r2
 800517e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005180:	7bfb      	ldrb	r3, [r7, #15]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40021000 	.word	0x40021000

08005190 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e095      	b.n	80052ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d108      	bne.n	80051bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b2:	d009      	beq.n	80051c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	61da      	str	r2, [r3, #28]
 80051ba:	e005      	b.n	80051c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fc fc96 	bl	8001b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005208:	d902      	bls.n	8005210 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	e002      	b.n	8005216 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005214:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800521e:	d007      	beq.n	8005230 <HAL_SPI_Init+0xa0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005228:	d002      	beq.n	8005230 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005272:	ea42 0103 	orr.w	r1, r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	0c1b      	lsrs	r3, r3, #16
 800528c:	f003 0204 	and.w	r2, r3, #4
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80052ac:	ea42 0103 	orr.w	r1, r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e049      	b.n	800537c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d106      	bne.n	8005302 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7fc fc4d 	bl	8001b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2202      	movs	r2, #2
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3304      	adds	r3, #4
 8005312:	4619      	mov	r1, r3
 8005314:	4610      	mov	r0, r2
 8005316:	f000 f967 	bl	80055e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	d001      	beq.n	800539c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e047      	b.n	800542c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a23      	ldr	r2, [pc, #140]	; (8005438 <HAL_TIM_Base_Start+0xb4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01d      	beq.n	80053ea <HAL_TIM_Base_Start+0x66>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b6:	d018      	beq.n	80053ea <HAL_TIM_Base_Start+0x66>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1f      	ldr	r2, [pc, #124]	; (800543c <HAL_TIM_Base_Start+0xb8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <HAL_TIM_Base_Start+0x66>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1e      	ldr	r2, [pc, #120]	; (8005440 <HAL_TIM_Base_Start+0xbc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00e      	beq.n	80053ea <HAL_TIM_Base_Start+0x66>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1c      	ldr	r2, [pc, #112]	; (8005444 <HAL_TIM_Base_Start+0xc0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d009      	beq.n	80053ea <HAL_TIM_Base_Start+0x66>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1b      	ldr	r2, [pc, #108]	; (8005448 <HAL_TIM_Base_Start+0xc4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d004      	beq.n	80053ea <HAL_TIM_Base_Start+0x66>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a19      	ldr	r2, [pc, #100]	; (800544c <HAL_TIM_Base_Start+0xc8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d115      	bne.n	8005416 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	4b17      	ldr	r3, [pc, #92]	; (8005450 <HAL_TIM_Base_Start+0xcc>)
 80053f2:	4013      	ands	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b06      	cmp	r3, #6
 80053fa:	d015      	beq.n	8005428 <HAL_TIM_Base_Start+0xa4>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005402:	d011      	beq.n	8005428 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005414:	e008      	b.n	8005428 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0201 	orr.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e000      	b.n	800542a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005428:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	40012c00 	.word	0x40012c00
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40013400 	.word	0x40013400
 800544c:	40014000 	.word	0x40014000
 8005450:	00010007 	.word	0x00010007

08005454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_TIM_ConfigClockSource+0x1c>
 800546c:	2302      	movs	r3, #2
 800546e:	e0b6      	b.n	80055de <HAL_TIM_ConfigClockSource+0x18a>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800548e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800549a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ac:	d03e      	beq.n	800552c <HAL_TIM_ConfigClockSource+0xd8>
 80054ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b2:	f200 8087 	bhi.w	80055c4 <HAL_TIM_ConfigClockSource+0x170>
 80054b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ba:	f000 8086 	beq.w	80055ca <HAL_TIM_ConfigClockSource+0x176>
 80054be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c2:	d87f      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x170>
 80054c4:	2b70      	cmp	r3, #112	; 0x70
 80054c6:	d01a      	beq.n	80054fe <HAL_TIM_ConfigClockSource+0xaa>
 80054c8:	2b70      	cmp	r3, #112	; 0x70
 80054ca:	d87b      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x170>
 80054cc:	2b60      	cmp	r3, #96	; 0x60
 80054ce:	d050      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0x11e>
 80054d0:	2b60      	cmp	r3, #96	; 0x60
 80054d2:	d877      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x170>
 80054d4:	2b50      	cmp	r3, #80	; 0x50
 80054d6:	d03c      	beq.n	8005552 <HAL_TIM_ConfigClockSource+0xfe>
 80054d8:	2b50      	cmp	r3, #80	; 0x50
 80054da:	d873      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x170>
 80054dc:	2b40      	cmp	r3, #64	; 0x40
 80054de:	d058      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x13e>
 80054e0:	2b40      	cmp	r3, #64	; 0x40
 80054e2:	d86f      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x170>
 80054e4:	2b30      	cmp	r3, #48	; 0x30
 80054e6:	d064      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x15e>
 80054e8:	2b30      	cmp	r3, #48	; 0x30
 80054ea:	d86b      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x170>
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	d060      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x15e>
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d867      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x170>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d05c      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x15e>
 80054f8:	2b10      	cmp	r3, #16
 80054fa:	d05a      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x15e>
 80054fc:	e062      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6899      	ldr	r1, [r3, #8]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f000 f97f 	bl	8005810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005520:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	609a      	str	r2, [r3, #8]
      break;
 800552a:	e04f      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	6899      	ldr	r1, [r3, #8]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f000 f968 	bl	8005810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800554e:	609a      	str	r2, [r3, #8]
      break;
 8005550:	e03c      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6859      	ldr	r1, [r3, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	461a      	mov	r2, r3
 8005560:	f000 f8dc 	bl	800571c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2150      	movs	r1, #80	; 0x50
 800556a:	4618      	mov	r0, r3
 800556c:	f000 f935 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 8005570:	e02c      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6859      	ldr	r1, [r3, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	461a      	mov	r2, r3
 8005580:	f000 f8fb 	bl	800577a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2160      	movs	r1, #96	; 0x60
 800558a:	4618      	mov	r0, r3
 800558c:	f000 f925 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 8005590:	e01c      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6859      	ldr	r1, [r3, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	461a      	mov	r2, r3
 80055a0:	f000 f8bc 	bl	800571c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2140      	movs	r1, #64	; 0x40
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f915 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 80055b0:	e00c      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4619      	mov	r1, r3
 80055bc:	4610      	mov	r0, r2
 80055be:	f000 f90c 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 80055c2:	e003      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	73fb      	strb	r3, [r7, #15]
      break;
 80055c8:	e000      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80055ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a40      	ldr	r2, [pc, #256]	; (80056fc <TIM_Base_SetConfig+0x114>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d013      	beq.n	8005628 <TIM_Base_SetConfig+0x40>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005606:	d00f      	beq.n	8005628 <TIM_Base_SetConfig+0x40>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a3d      	ldr	r2, [pc, #244]	; (8005700 <TIM_Base_SetConfig+0x118>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00b      	beq.n	8005628 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a3c      	ldr	r2, [pc, #240]	; (8005704 <TIM_Base_SetConfig+0x11c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d007      	beq.n	8005628 <TIM_Base_SetConfig+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a3b      	ldr	r2, [pc, #236]	; (8005708 <TIM_Base_SetConfig+0x120>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d003      	beq.n	8005628 <TIM_Base_SetConfig+0x40>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a3a      	ldr	r2, [pc, #232]	; (800570c <TIM_Base_SetConfig+0x124>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d108      	bne.n	800563a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a2f      	ldr	r2, [pc, #188]	; (80056fc <TIM_Base_SetConfig+0x114>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d01f      	beq.n	8005682 <TIM_Base_SetConfig+0x9a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005648:	d01b      	beq.n	8005682 <TIM_Base_SetConfig+0x9a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a2c      	ldr	r2, [pc, #176]	; (8005700 <TIM_Base_SetConfig+0x118>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d017      	beq.n	8005682 <TIM_Base_SetConfig+0x9a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a2b      	ldr	r2, [pc, #172]	; (8005704 <TIM_Base_SetConfig+0x11c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d013      	beq.n	8005682 <TIM_Base_SetConfig+0x9a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a2a      	ldr	r2, [pc, #168]	; (8005708 <TIM_Base_SetConfig+0x120>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00f      	beq.n	8005682 <TIM_Base_SetConfig+0x9a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a29      	ldr	r2, [pc, #164]	; (800570c <TIM_Base_SetConfig+0x124>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00b      	beq.n	8005682 <TIM_Base_SetConfig+0x9a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a28      	ldr	r2, [pc, #160]	; (8005710 <TIM_Base_SetConfig+0x128>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d007      	beq.n	8005682 <TIM_Base_SetConfig+0x9a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a27      	ldr	r2, [pc, #156]	; (8005714 <TIM_Base_SetConfig+0x12c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d003      	beq.n	8005682 <TIM_Base_SetConfig+0x9a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a26      	ldr	r2, [pc, #152]	; (8005718 <TIM_Base_SetConfig+0x130>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d108      	bne.n	8005694 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a10      	ldr	r2, [pc, #64]	; (80056fc <TIM_Base_SetConfig+0x114>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00f      	beq.n	80056e0 <TIM_Base_SetConfig+0xf8>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a12      	ldr	r2, [pc, #72]	; (800570c <TIM_Base_SetConfig+0x124>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00b      	beq.n	80056e0 <TIM_Base_SetConfig+0xf8>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a11      	ldr	r2, [pc, #68]	; (8005710 <TIM_Base_SetConfig+0x128>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d007      	beq.n	80056e0 <TIM_Base_SetConfig+0xf8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a10      	ldr	r2, [pc, #64]	; (8005714 <TIM_Base_SetConfig+0x12c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_Base_SetConfig+0xf8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a0f      	ldr	r2, [pc, #60]	; (8005718 <TIM_Base_SetConfig+0x130>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d103      	bne.n	80056e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	615a      	str	r2, [r3, #20]
}
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40012c00 	.word	0x40012c00
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00
 800570c:	40013400 	.word	0x40013400
 8005710:	40014000 	.word	0x40014000
 8005714:	40014400 	.word	0x40014400
 8005718:	40014800 	.word	0x40014800

0800571c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f023 0201 	bic.w	r2, r3, #1
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f023 030a 	bic.w	r3, r3, #10
 8005758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800577a:	b480      	push	{r7}
 800577c:	b087      	sub	sp, #28
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f023 0210 	bic.w	r2, r3, #16
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	031b      	lsls	r3, r3, #12
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f043 0307 	orr.w	r3, r3, #7
 80057fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	609a      	str	r2, [r3, #8]
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800582a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	021a      	lsls	r2, r3, #8
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	431a      	orrs	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4313      	orrs	r3, r2
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	609a      	str	r2, [r3, #8]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005864:	2302      	movs	r3, #2
 8005866:	e068      	b.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a2e      	ldr	r2, [pc, #184]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d004      	beq.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a2d      	ldr	r2, [pc, #180]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d108      	bne.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a1e      	ldr	r2, [pc, #120]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01d      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058da:	d018      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1b      	ldr	r2, [pc, #108]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d013      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1a      	ldr	r2, [pc, #104]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00e      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a18      	ldr	r2, [pc, #96]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d009      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a13      	ldr	r2, [pc, #76]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a14      	ldr	r2, [pc, #80]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d10c      	bne.n	8005928 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	4313      	orrs	r3, r2
 800591e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40012c00 	.word	0x40012c00
 800594c:	40013400 	.word	0x40013400
 8005950:	40000400 	.word	0x40000400
 8005954:	40000800 	.word	0x40000800
 8005958:	40000c00 	.word	0x40000c00
 800595c:	40014000 	.word	0x40014000

08005960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e040      	b.n	80059f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7fc f92a 	bl	8001bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2224      	movs	r2, #36	; 0x24
 800598c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0201 	bic.w	r2, r2, #1
 800599c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f8c0 	bl	8005b24 <UART_SetConfig>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e022      	b.n	80059f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fb6c 	bl	8006094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fbf3 	bl	80061d8 <UART_CheckIdleState>
 80059f2:	4603      	mov	r3, r0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	; 0x28
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	603b      	str	r3, [r7, #0]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	f040 8082 	bne.w	8005b1a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_UART_Transmit+0x26>
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e07a      	b.n	8005b1c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_UART_Transmit+0x38>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e073      	b.n	8005b1c <HAL_UART_Transmit+0x120>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2221      	movs	r2, #33	; 0x21
 8005a48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a4a:	f7fc fb35 	bl	80020b8 <HAL_GetTick>
 8005a4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	88fa      	ldrh	r2, [r7, #6]
 8005a54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a68:	d108      	bne.n	8005a7c <HAL_UART_Transmit+0x80>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d104      	bne.n	8005a7c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	e003      	b.n	8005a84 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005a8c:	e02d      	b.n	8005aea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2200      	movs	r2, #0
 8005a96:	2180      	movs	r1, #128	; 0x80
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 fbe6 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e039      	b.n	8005b1c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10b      	bne.n	8005ac6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	881a      	ldrh	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aba:	b292      	uxth	r2, r2
 8005abc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	3302      	adds	r3, #2
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	e008      	b.n	8005ad8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	781a      	ldrb	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	b292      	uxth	r2, r2
 8005ad0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1cb      	bne.n	8005a8e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2200      	movs	r2, #0
 8005afe:	2140      	movs	r1, #64	; 0x40
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fbb2 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e005      	b.n	8005b1c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2220      	movs	r2, #32
 8005b14:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	e000      	b.n	8005b1c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005b1a:	2302      	movs	r3, #2
  }
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3720      	adds	r7, #32
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b28:	b08a      	sub	sp, #40	; 0x28
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	4ba4      	ldr	r3, [pc, #656]	; (8005de4 <UART_SetConfig+0x2c0>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	6812      	ldr	r2, [r2, #0]
 8005b5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a99      	ldr	r2, [pc, #612]	; (8005de8 <UART_SetConfig+0x2c4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d004      	beq.n	8005b90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a90      	ldr	r2, [pc, #576]	; (8005dec <UART_SetConfig+0x2c8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d126      	bne.n	8005bfc <UART_SetConfig+0xd8>
 8005bae:	4b90      	ldr	r3, [pc, #576]	; (8005df0 <UART_SetConfig+0x2cc>)
 8005bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb4:	f003 0303 	and.w	r3, r3, #3
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d81b      	bhi.n	8005bf4 <UART_SetConfig+0xd0>
 8005bbc:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0xa0>)
 8005bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc2:	bf00      	nop
 8005bc4:	08005bd5 	.word	0x08005bd5
 8005bc8:	08005be5 	.word	0x08005be5
 8005bcc:	08005bdd 	.word	0x08005bdd
 8005bd0:	08005bed 	.word	0x08005bed
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bda:	e116      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be2:	e112      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005be4:	2304      	movs	r3, #4
 8005be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bea:	e10e      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005bec:	2308      	movs	r3, #8
 8005bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bf2:	e10a      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bfa:	e106      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a7c      	ldr	r2, [pc, #496]	; (8005df4 <UART_SetConfig+0x2d0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d138      	bne.n	8005c78 <UART_SetConfig+0x154>
 8005c06:	4b7a      	ldr	r3, [pc, #488]	; (8005df0 <UART_SetConfig+0x2cc>)
 8005c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0c:	f003 030c 	and.w	r3, r3, #12
 8005c10:	2b0c      	cmp	r3, #12
 8005c12:	d82d      	bhi.n	8005c70 <UART_SetConfig+0x14c>
 8005c14:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <UART_SetConfig+0xf8>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c51 	.word	0x08005c51
 8005c20:	08005c71 	.word	0x08005c71
 8005c24:	08005c71 	.word	0x08005c71
 8005c28:	08005c71 	.word	0x08005c71
 8005c2c:	08005c61 	.word	0x08005c61
 8005c30:	08005c71 	.word	0x08005c71
 8005c34:	08005c71 	.word	0x08005c71
 8005c38:	08005c71 	.word	0x08005c71
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	08005c71 	.word	0x08005c71
 8005c44:	08005c71 	.word	0x08005c71
 8005c48:	08005c71 	.word	0x08005c71
 8005c4c:	08005c69 	.word	0x08005c69
 8005c50:	2300      	movs	r3, #0
 8005c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c56:	e0d8      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c5e:	e0d4      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005c60:	2304      	movs	r3, #4
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c66:	e0d0      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005c68:	2308      	movs	r3, #8
 8005c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c6e:	e0cc      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005c70:	2310      	movs	r3, #16
 8005c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c76:	e0c8      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a5e      	ldr	r2, [pc, #376]	; (8005df8 <UART_SetConfig+0x2d4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d125      	bne.n	8005cce <UART_SetConfig+0x1aa>
 8005c82:	4b5b      	ldr	r3, [pc, #364]	; (8005df0 <UART_SetConfig+0x2cc>)
 8005c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c8c:	2b30      	cmp	r3, #48	; 0x30
 8005c8e:	d016      	beq.n	8005cbe <UART_SetConfig+0x19a>
 8005c90:	2b30      	cmp	r3, #48	; 0x30
 8005c92:	d818      	bhi.n	8005cc6 <UART_SetConfig+0x1a2>
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d00a      	beq.n	8005cae <UART_SetConfig+0x18a>
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d814      	bhi.n	8005cc6 <UART_SetConfig+0x1a2>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <UART_SetConfig+0x182>
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d008      	beq.n	8005cb6 <UART_SetConfig+0x192>
 8005ca4:	e00f      	b.n	8005cc6 <UART_SetConfig+0x1a2>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cac:	e0ad      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cb4:	e0a9      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005cb6:	2304      	movs	r3, #4
 8005cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cbc:	e0a5      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cc4:	e0a1      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005cc6:	2310      	movs	r3, #16
 8005cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ccc:	e09d      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a4a      	ldr	r2, [pc, #296]	; (8005dfc <UART_SetConfig+0x2d8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d125      	bne.n	8005d24 <UART_SetConfig+0x200>
 8005cd8:	4b45      	ldr	r3, [pc, #276]	; (8005df0 <UART_SetConfig+0x2cc>)
 8005cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ce2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ce4:	d016      	beq.n	8005d14 <UART_SetConfig+0x1f0>
 8005ce6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ce8:	d818      	bhi.n	8005d1c <UART_SetConfig+0x1f8>
 8005cea:	2b80      	cmp	r3, #128	; 0x80
 8005cec:	d00a      	beq.n	8005d04 <UART_SetConfig+0x1e0>
 8005cee:	2b80      	cmp	r3, #128	; 0x80
 8005cf0:	d814      	bhi.n	8005d1c <UART_SetConfig+0x1f8>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <UART_SetConfig+0x1d8>
 8005cf6:	2b40      	cmp	r3, #64	; 0x40
 8005cf8:	d008      	beq.n	8005d0c <UART_SetConfig+0x1e8>
 8005cfa:	e00f      	b.n	8005d1c <UART_SetConfig+0x1f8>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d02:	e082      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d04:	2302      	movs	r3, #2
 8005d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d0a:	e07e      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d0c:	2304      	movs	r3, #4
 8005d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d12:	e07a      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d14:	2308      	movs	r3, #8
 8005d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d1a:	e076      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d1c:	2310      	movs	r3, #16
 8005d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d22:	e072      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a35      	ldr	r2, [pc, #212]	; (8005e00 <UART_SetConfig+0x2dc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d12a      	bne.n	8005d84 <UART_SetConfig+0x260>
 8005d2e:	4b30      	ldr	r3, [pc, #192]	; (8005df0 <UART_SetConfig+0x2cc>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d3c:	d01a      	beq.n	8005d74 <UART_SetConfig+0x250>
 8005d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d42:	d81b      	bhi.n	8005d7c <UART_SetConfig+0x258>
 8005d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d48:	d00c      	beq.n	8005d64 <UART_SetConfig+0x240>
 8005d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4e:	d815      	bhi.n	8005d7c <UART_SetConfig+0x258>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <UART_SetConfig+0x238>
 8005d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d58:	d008      	beq.n	8005d6c <UART_SetConfig+0x248>
 8005d5a:	e00f      	b.n	8005d7c <UART_SetConfig+0x258>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d62:	e052      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d64:	2302      	movs	r3, #2
 8005d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6a:	e04e      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d72:	e04a      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d74:	2308      	movs	r3, #8
 8005d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d7a:	e046      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d7c:	2310      	movs	r3, #16
 8005d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d82:	e042      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <UART_SetConfig+0x2c4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d13a      	bne.n	8005e04 <UART_SetConfig+0x2e0>
 8005d8e:	4b18      	ldr	r3, [pc, #96]	; (8005df0 <UART_SetConfig+0x2cc>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d9c:	d01a      	beq.n	8005dd4 <UART_SetConfig+0x2b0>
 8005d9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005da2:	d81b      	bhi.n	8005ddc <UART_SetConfig+0x2b8>
 8005da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005da8:	d00c      	beq.n	8005dc4 <UART_SetConfig+0x2a0>
 8005daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dae:	d815      	bhi.n	8005ddc <UART_SetConfig+0x2b8>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <UART_SetConfig+0x298>
 8005db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db8:	d008      	beq.n	8005dcc <UART_SetConfig+0x2a8>
 8005dba:	e00f      	b.n	8005ddc <UART_SetConfig+0x2b8>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc2:	e022      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dca:	e01e      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd2:	e01a      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dda:	e016      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de2:	e012      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005de4:	efff69f3 	.word	0xefff69f3
 8005de8:	40008000 	.word	0x40008000
 8005dec:	40013800 	.word	0x40013800
 8005df0:	40021000 	.word	0x40021000
 8005df4:	40004400 	.word	0x40004400
 8005df8:	40004800 	.word	0x40004800
 8005dfc:	40004c00 	.word	0x40004c00
 8005e00:	40005000 	.word	0x40005000
 8005e04:	2310      	movs	r3, #16
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a9f      	ldr	r2, [pc, #636]	; (800608c <UART_SetConfig+0x568>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d17a      	bne.n	8005f0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d824      	bhi.n	8005e66 <UART_SetConfig+0x342>
 8005e1c:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <UART_SetConfig+0x300>)
 8005e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e22:	bf00      	nop
 8005e24:	08005e49 	.word	0x08005e49
 8005e28:	08005e67 	.word	0x08005e67
 8005e2c:	08005e51 	.word	0x08005e51
 8005e30:	08005e67 	.word	0x08005e67
 8005e34:	08005e57 	.word	0x08005e57
 8005e38:	08005e67 	.word	0x08005e67
 8005e3c:	08005e67 	.word	0x08005e67
 8005e40:	08005e67 	.word	0x08005e67
 8005e44:	08005e5f 	.word	0x08005e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e48:	f7fe fc4a 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8005e4c:	61f8      	str	r0, [r7, #28]
        break;
 8005e4e:	e010      	b.n	8005e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e50:	4b8f      	ldr	r3, [pc, #572]	; (8006090 <UART_SetConfig+0x56c>)
 8005e52:	61fb      	str	r3, [r7, #28]
        break;
 8005e54:	e00d      	b.n	8005e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e56:	f7fe fbab 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8005e5a:	61f8      	str	r0, [r7, #28]
        break;
 8005e5c:	e009      	b.n	8005e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e62:	61fb      	str	r3, [r7, #28]
        break;
 8005e64:	e005      	b.n	8005e72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80fb 	beq.w	8006070 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	4413      	add	r3, r2
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d305      	bcc.n	8005e96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d903      	bls.n	8005e9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e9c:	e0e8      	b.n	8006070 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	461c      	mov	r4, r3
 8005ea4:	4615      	mov	r5, r2
 8005ea6:	f04f 0200 	mov.w	r2, #0
 8005eaa:	f04f 0300 	mov.w	r3, #0
 8005eae:	022b      	lsls	r3, r5, #8
 8005eb0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005eb4:	0222      	lsls	r2, r4, #8
 8005eb6:	68f9      	ldr	r1, [r7, #12]
 8005eb8:	6849      	ldr	r1, [r1, #4]
 8005eba:	0849      	lsrs	r1, r1, #1
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	4688      	mov	r8, r1
 8005ec0:	4681      	mov	r9, r0
 8005ec2:	eb12 0a08 	adds.w	sl, r2, r8
 8005ec6:	eb43 0b09 	adc.w	fp, r3, r9
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	603b      	str	r3, [r7, #0]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ed8:	4650      	mov	r0, sl
 8005eda:	4659      	mov	r1, fp
 8005edc:	f7fa fe64 	bl	8000ba8 <__aeabi_uldivmod>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eee:	d308      	bcc.n	8005f02 <UART_SetConfig+0x3de>
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef6:	d204      	bcs.n	8005f02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	60da      	str	r2, [r3, #12]
 8005f00:	e0b6      	b.n	8006070 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f08:	e0b2      	b.n	8006070 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f12:	d15e      	bne.n	8005fd2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d828      	bhi.n	8005f6e <UART_SetConfig+0x44a>
 8005f1c:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <UART_SetConfig+0x400>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08005f49 	.word	0x08005f49
 8005f28:	08005f51 	.word	0x08005f51
 8005f2c:	08005f59 	.word	0x08005f59
 8005f30:	08005f6f 	.word	0x08005f6f
 8005f34:	08005f5f 	.word	0x08005f5f
 8005f38:	08005f6f 	.word	0x08005f6f
 8005f3c:	08005f6f 	.word	0x08005f6f
 8005f40:	08005f6f 	.word	0x08005f6f
 8005f44:	08005f67 	.word	0x08005f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f48:	f7fe fbca 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8005f4c:	61f8      	str	r0, [r7, #28]
        break;
 8005f4e:	e014      	b.n	8005f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f50:	f7fe fbdc 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 8005f54:	61f8      	str	r0, [r7, #28]
        break;
 8005f56:	e010      	b.n	8005f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f58:	4b4d      	ldr	r3, [pc, #308]	; (8006090 <UART_SetConfig+0x56c>)
 8005f5a:	61fb      	str	r3, [r7, #28]
        break;
 8005f5c:	e00d      	b.n	8005f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5e:	f7fe fb27 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8005f62:	61f8      	str	r0, [r7, #28]
        break;
 8005f64:	e009      	b.n	8005f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f6a:	61fb      	str	r3, [r7, #28]
        break;
 8005f6c:	e005      	b.n	8005f7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d077      	beq.n	8006070 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	005a      	lsls	r2, r3, #1
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	085b      	lsrs	r3, r3, #1
 8005f8a:	441a      	add	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	2b0f      	cmp	r3, #15
 8005f9a:	d916      	bls.n	8005fca <UART_SetConfig+0x4a6>
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa2:	d212      	bcs.n	8005fca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f023 030f 	bic.w	r3, r3, #15
 8005fac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	085b      	lsrs	r3, r3, #1
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	8afb      	ldrh	r3, [r7, #22]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	8afa      	ldrh	r2, [r7, #22]
 8005fc6:	60da      	str	r2, [r3, #12]
 8005fc8:	e052      	b.n	8006070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fd0:	e04e      	b.n	8006070 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d827      	bhi.n	800602a <UART_SetConfig+0x506>
 8005fda:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <UART_SetConfig+0x4bc>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	0800600d 	.word	0x0800600d
 8005fe8:	08006015 	.word	0x08006015
 8005fec:	0800602b 	.word	0x0800602b
 8005ff0:	0800601b 	.word	0x0800601b
 8005ff4:	0800602b 	.word	0x0800602b
 8005ff8:	0800602b 	.word	0x0800602b
 8005ffc:	0800602b 	.word	0x0800602b
 8006000:	08006023 	.word	0x08006023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006004:	f7fe fb6c 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8006008:	61f8      	str	r0, [r7, #28]
        break;
 800600a:	e014      	b.n	8006036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800600c:	f7fe fb7e 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 8006010:	61f8      	str	r0, [r7, #28]
        break;
 8006012:	e010      	b.n	8006036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006014:	4b1e      	ldr	r3, [pc, #120]	; (8006090 <UART_SetConfig+0x56c>)
 8006016:	61fb      	str	r3, [r7, #28]
        break;
 8006018:	e00d      	b.n	8006036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800601a:	f7fe fac9 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 800601e:	61f8      	str	r0, [r7, #28]
        break;
 8006020:	e009      	b.n	8006036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006026:	61fb      	str	r3, [r7, #28]
        break;
 8006028:	e005      	b.n	8006036 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006034:	bf00      	nop
    }

    if (pclk != 0U)
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d019      	beq.n	8006070 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	085a      	lsrs	r2, r3, #1
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	441a      	add	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	fbb2 f3f3 	udiv	r3, r2, r3
 800604e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b0f      	cmp	r3, #15
 8006054:	d909      	bls.n	800606a <UART_SetConfig+0x546>
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605c:	d205      	bcs.n	800606a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	b29a      	uxth	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60da      	str	r2, [r3, #12]
 8006068:	e002      	b.n	8006070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800607c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006080:	4618      	mov	r0, r3
 8006082:	3728      	adds	r7, #40	; 0x28
 8006084:	46bd      	mov	sp, r7
 8006086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800608a:	bf00      	nop
 800608c:	40008000 	.word	0x40008000
 8006090:	00f42400 	.word	0x00f42400

08006094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01a      	beq.n	80061aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006192:	d10a      	bne.n	80061aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	605a      	str	r2, [r3, #4]
  }
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af02      	add	r7, sp, #8
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061e8:	f7fb ff66 	bl	80020b8 <HAL_GetTick>
 80061ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d10e      	bne.n	800621a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f82d 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e023      	b.n	8006262 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b04      	cmp	r3, #4
 8006226:	d10e      	bne.n	8006246 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f817 	bl	800626a <UART_WaitOnFlagUntilTimeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e00d      	b.n	8006262 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2220      	movs	r2, #32
 800624a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b09c      	sub	sp, #112	; 0x70
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	4613      	mov	r3, r2
 8006278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800627a:	e0a5      	b.n	80063c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800627c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006282:	f000 80a1 	beq.w	80063c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006286:	f7fb ff17 	bl	80020b8 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006292:	429a      	cmp	r2, r3
 8006294:	d302      	bcc.n	800629c <UART_WaitOnFlagUntilTimeout+0x32>
 8006296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006298:	2b00      	cmp	r3, #0
 800629a:	d13e      	bne.n	800631a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062b0:	667b      	str	r3, [r7, #100]	; 0x64
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e6      	bne.n	800629c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3308      	adds	r3, #8
 80062d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e0:	f023 0301 	bic.w	r3, r3, #1
 80062e4:	663b      	str	r3, [r7, #96]	; 0x60
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80062f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e5      	bne.n	80062ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2220      	movs	r2, #32
 8006306:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e067      	b.n	80063ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	d04f      	beq.n	80063c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006336:	d147      	bne.n	80063c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006340:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006356:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	461a      	mov	r2, r3
 800635e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006360:	637b      	str	r3, [r7, #52]	; 0x34
 8006362:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e6      	bne.n	8006342 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3308      	adds	r3, #8
 800637a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	613b      	str	r3, [r7, #16]
   return(result);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f023 0301 	bic.w	r3, r3, #1
 800638a:	66bb      	str	r3, [r7, #104]	; 0x68
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3308      	adds	r3, #8
 8006392:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006394:	623a      	str	r2, [r7, #32]
 8006396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	69f9      	ldr	r1, [r7, #28]
 800639a:	6a3a      	ldr	r2, [r7, #32]
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e5      	bne.n	8006374 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e010      	b.n	80063ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69da      	ldr	r2, [r3, #28]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4013      	ands	r3, r2
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	bf0c      	ite	eq
 80063d8:	2301      	moveq	r3, #1
 80063da:	2300      	movne	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	461a      	mov	r2, r3
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	f43f af4a 	beq.w	800627c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3770      	adds	r7, #112	; 0x70
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063f2:	b084      	sub	sp, #16
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	f107 001c 	add.w	r0, r7, #28
 8006400:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fa6f 	bl	80068f4 <USB_CoreReset>
 8006416:	4603      	mov	r3, r0
 8006418:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800641a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800641c:	2b00      	cmp	r3, #0
 800641e:	d106      	bne.n	800642e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	639a      	str	r2, [r3, #56]	; 0x38
 800642c:	e005      	b.n	800643a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006446:	b004      	add	sp, #16
 8006448:	4770      	bx	lr

0800644a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f023 0201 	bic.w	r2, r3, #1
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d115      	bne.n	80064ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800649a:	2001      	movs	r0, #1
 800649c:	f7fb fe18 	bl	80020d0 <HAL_Delay>
      ms++;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3301      	adds	r3, #1
 80064a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fa16 	bl	80068d8 <USB_GetMode>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d01e      	beq.n	80064f0 <USB_SetCurrentMode+0x84>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b31      	cmp	r3, #49	; 0x31
 80064b6:	d9f0      	bls.n	800649a <USB_SetCurrentMode+0x2e>
 80064b8:	e01a      	b.n	80064f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d115      	bne.n	80064ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064cc:	2001      	movs	r0, #1
 80064ce:	f7fb fdff 	bl	80020d0 <HAL_Delay>
      ms++;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3301      	adds	r3, #1
 80064d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f9fd 	bl	80068d8 <USB_GetMode>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d005      	beq.n	80064f0 <USB_SetCurrentMode+0x84>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b31      	cmp	r3, #49	; 0x31
 80064e8:	d9f0      	bls.n	80064cc <USB_SetCurrentMode+0x60>
 80064ea:	e001      	b.n	80064f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e005      	b.n	80064fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b32      	cmp	r3, #50	; 0x32
 80064f4:	d101      	bne.n	80064fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006504:	b084      	sub	sp, #16
 8006506:	b580      	push	{r7, lr}
 8006508:	b086      	sub	sp, #24
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800651e:	2300      	movs	r3, #0
 8006520:	613b      	str	r3, [r7, #16]
 8006522:	e009      	b.n	8006538 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	3340      	adds	r3, #64	; 0x40
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	2200      	movs	r2, #0
 8006530:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	3301      	adds	r3, #1
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b0e      	cmp	r3, #14
 800653c:	d9f2      	bls.n	8006524 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800653e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006540:	2b00      	cmp	r3, #0
 8006542:	d11c      	bne.n	800657e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006552:	f043 0302 	orr.w	r3, r3, #2
 8006556:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	e005      	b.n	800658a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006590:	461a      	mov	r2, r3
 8006592:	2300      	movs	r3, #0
 8006594:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659c:	4619      	mov	r1, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a4:	461a      	mov	r2, r3
 80065a6:	680b      	ldr	r3, [r1, #0]
 80065a8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065aa:	2103      	movs	r1, #3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f959 	bl	8006864 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065b2:	2110      	movs	r1, #16
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f8f1 	bl	800679c <USB_FlushTxFifo>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f91d 	bl	8006804 <USB_FlushRxFifo>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065da:	461a      	mov	r2, r3
 80065dc:	2300      	movs	r3, #0
 80065de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e6:	461a      	mov	r2, r3
 80065e8:	2300      	movs	r3, #0
 80065ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f2:	461a      	mov	r2, r3
 80065f4:	2300      	movs	r3, #0
 80065f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065f8:	2300      	movs	r3, #0
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	e043      	b.n	8006686 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006614:	d118      	bne.n	8006648 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006628:	461a      	mov	r2, r3
 800662a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	e013      	b.n	800665a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663e:	461a      	mov	r2, r3
 8006640:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	e008      	b.n	800665a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006654:	461a      	mov	r2, r3
 8006656:	2300      	movs	r3, #0
 8006658:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006666:	461a      	mov	r2, r3
 8006668:	2300      	movs	r3, #0
 800666a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006678:	461a      	mov	r2, r3
 800667a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800667e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	3301      	adds	r3, #1
 8006684:	613b      	str	r3, [r7, #16]
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	429a      	cmp	r2, r3
 800668c:	d3b7      	bcc.n	80065fe <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800668e:	2300      	movs	r3, #0
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	e043      	b.n	800671c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066aa:	d118      	bne.n	80066de <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10a      	bne.n	80066c8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066be:	461a      	mov	r2, r3
 80066c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	e013      	b.n	80066f0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d4:	461a      	mov	r2, r3
 80066d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	e008      	b.n	80066f0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ea:	461a      	mov	r2, r3
 80066ec:	2300      	movs	r3, #0
 80066ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fc:	461a      	mov	r2, r3
 80066fe:	2300      	movs	r3, #0
 8006700:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670e:	461a      	mov	r2, r3
 8006710:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006714:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	3301      	adds	r3, #1
 800671a:	613b      	str	r3, [r7, #16]
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	429a      	cmp	r2, r3
 8006722:	d3b7      	bcc.n	8006694 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006732:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006736:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006744:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	f043 0210 	orr.w	r2, r3, #16
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	4b10      	ldr	r3, [pc, #64]	; (8006798 <USB_DevInit+0x294>)
 8006758:	4313      	orrs	r3, r2
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800675e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f043 0208 	orr.w	r2, r3, #8
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006772:	2b01      	cmp	r3, #1
 8006774:	d107      	bne.n	8006786 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800677e:	f043 0304 	orr.w	r3, r3, #4
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006786:	7dfb      	ldrb	r3, [r7, #23]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006792:	b004      	add	sp, #16
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	803c3800 	.word	0x803c3800

0800679c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4a13      	ldr	r2, [pc, #76]	; (8006800 <USB_FlushTxFifo+0x64>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e01b      	b.n	80067f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	daf2      	bge.n	80067aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	019b      	lsls	r3, r3, #6
 80067cc:	f043 0220 	orr.w	r2, r3, #32
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3301      	adds	r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4a08      	ldr	r2, [pc, #32]	; (8006800 <USB_FlushTxFifo+0x64>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d901      	bls.n	80067e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e006      	b.n	80067f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	d0f0      	beq.n	80067d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	00030d40 	.word	0x00030d40

08006804 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3301      	adds	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4a11      	ldr	r2, [pc, #68]	; (8006860 <USB_FlushRxFifo+0x5c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d901      	bls.n	8006822 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e018      	b.n	8006854 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	daf2      	bge.n	8006810 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2210      	movs	r2, #16
 8006832:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4a08      	ldr	r2, [pc, #32]	; (8006860 <USB_FlushRxFifo+0x5c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d901      	bls.n	8006846 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e006      	b.n	8006854 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f003 0310 	and.w	r3, r3, #16
 800684e:	2b10      	cmp	r3, #16
 8006850:	d0f0      	beq.n	8006834 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	00030d40 	.word	0x00030d40

08006864 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	68f9      	ldr	r1, [r7, #12]
 8006880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006884:	4313      	orrs	r3, r2
 8006886:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068b0:	f023 0303 	bic.w	r3, r3, #3
 80068b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068c4:	f043 0302 	orr.w	r3, r3, #2
 80068c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	f003 0301 	and.w	r3, r3, #1
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3301      	adds	r3, #1
 8006904:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4a13      	ldr	r2, [pc, #76]	; (8006958 <USB_CoreReset+0x64>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d901      	bls.n	8006912 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e01b      	b.n	800694a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	daf2      	bge.n	8006900 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f043 0201 	orr.w	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3301      	adds	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4a09      	ldr	r2, [pc, #36]	; (8006958 <USB_CoreReset+0x64>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d901      	bls.n	800693c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e006      	b.n	800694a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b01      	cmp	r3, #1
 8006946:	d0f0      	beq.n	800692a <USB_CoreReset+0x36>

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	00030d40 	.word	0x00030d40

0800695c <_write>:
#include "ai_datatypes_defines.h"

/* USER CODE BEGIN includes */
extern void readSensors();
extern UART_HandleTypeDef huart1;
int _write(int fd, char* ptr, int len) {
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
        HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	b29a      	uxth	r2, r3
 800696c:	f04f 33ff 	mov.w	r3, #4294967295
 8006970:	68b9      	ldr	r1, [r7, #8]
 8006972:	4804      	ldr	r0, [pc, #16]	; (8006984 <_write+0x28>)
 8006974:	f7ff f842 	bl	80059fc <HAL_UART_Transmit>
        return len;
 8006978:	687b      	ldr	r3, [r7, #4]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000c54 	.word	0x20000c54

08006988 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d009      	beq.n	80069ac <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8006998:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800699a:	461a      	mov	r2, r3
        err.type, err.code);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	4806      	ldr	r0, [pc, #24]	; (80069c0 <ai_log_err+0x38>)
 80069a6:	f004 fdfb 	bl	800b5a0 <iprintf>
 80069aa:	e008      	b.n	80069be <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80069ac:	793b      	ldrb	r3, [r7, #4]
 80069ae:	4619      	mov	r1, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80069b6:	461a      	mov	r2, r3
 80069b8:	4802      	ldr	r0, [pc, #8]	; (80069c4 <ai_log_err+0x3c>)
 80069ba:	f004 fdf1 	bl	800b5a0 <iprintf>

  do {} while (1);
 80069be:	e7fe      	b.n	80069be <ai_log_err+0x36>
 80069c0:	0800d9c4 	.word	0x0800d9c4
 80069c4:	0800d9f8 	.word	0x0800d9f8

080069c8 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b090      	sub	sp, #64	; 0x40
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80069d2:	2100      	movs	r1, #0
 80069d4:	4838      	ldr	r0, [pc, #224]	; (8006ab8 <ai_boostrap+0xf0>)
 80069d6:	f000 fb8d 	bl	80070f4 <ai_network_create>
 80069da:	4603      	mov	r3, r0
 80069dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 80069de:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d006      	beq.n	80069f4 <ai_boostrap+0x2c>
    ai_log_err(err, "ai_network_create");
 80069e6:	4935      	ldr	r1, [pc, #212]	; (8006abc <ai_boostrap+0xf4>)
 80069e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80069ea:	f7ff ffcd 	bl	8006988 <ai_log_err>
    return -1;
 80069ee:	f04f 33ff 	mov.w	r3, #4294967295
 80069f2:	e05c      	b.n	8006aae <ai_boostrap+0xe6>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 80069f4:	4b32      	ldr	r3, [pc, #200]	; (8006ac0 <ai_boostrap+0xf8>)
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	2301      	movs	r3, #1
 80069fa:	823b      	strh	r3, [r7, #16]
 80069fc:	2301      	movs	r3, #1
 80069fe:	827b      	strh	r3, [r7, #18]
 8006a00:	2301      	movs	r3, #1
 8006a02:	82bb      	strh	r3, [r7, #20]
 8006a04:	f641 5344 	movw	r3, #7492	; 0x1d44
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	61fb      	str	r3, [r7, #28]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	623b      	str	r3, [r7, #32]
 8006a12:	4b2c      	ldr	r3, [pc, #176]	; (8006ac4 <ai_boostrap+0xfc>)
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
 8006a16:	2301      	movs	r3, #1
 8006a18:	853b      	strh	r3, [r7, #40]	; 0x28
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006a1e:	2301      	movs	r3, #1
 8006a20:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006a22:	f44f 7350 	mov.w	r3, #832	; 0x340
 8006a26:	633b      	str	r3, [r7, #48]	; 0x30
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) );

  if (!ai_network_init(network, &params)) {
 8006a30:	4b21      	ldr	r3, [pc, #132]	; (8006ab8 <ai_boostrap+0xf0>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f107 020c 	add.w	r2, r7, #12
 8006a38:	4611      	mov	r1, r2
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fb7c 	bl	8007138 <ai_network_init>
 8006a40:	4603      	mov	r3, r0
 8006a42:	f083 0301 	eor.w	r3, r3, #1
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00d      	beq.n	8006a68 <ai_boostrap+0xa0>
      err = ai_network_get_error(network);
 8006a4c:	4b1a      	ldr	r3, [pc, #104]	; (8006ab8 <ai_boostrap+0xf0>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 fb43 	bl	80070dc <ai_network_get_error>
 8006a56:	4603      	mov	r3, r0
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_network_init");
 8006a5a:	491b      	ldr	r1, [pc, #108]	; (8006ac8 <ai_boostrap+0x100>)
 8006a5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a5e:	f7ff ff93 	bl	8006988 <ai_log_err>
      return -1;
 8006a62:	f04f 33ff 	mov.w	r3, #4294967295
 8006a66:	e022      	b.n	8006aae <ai_boostrap+0xe6>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 8006a68:	4b13      	ldr	r3, [pc, #76]	; (8006ab8 <ai_boostrap+0xf0>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4917      	ldr	r1, [pc, #92]	; (8006acc <ai_boostrap+0x104>)
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fad6 	bl	8007020 <ai_network_get_info>
 8006a74:	4603      	mov	r3, r0
 8006a76:	f083 0301 	eor.w	r3, r3, #1
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d015      	beq.n	8006aac <ai_boostrap+0xe4>
    err = ai_network_get_error(network);
 8006a80:	4b0d      	ldr	r3, [pc, #52]	; (8006ab8 <ai_boostrap+0xf0>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 fb29 	bl	80070dc <ai_network_get_error>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_network_get_error");
 8006a8e:	4910      	ldr	r1, [pc, #64]	; (8006ad0 <ai_boostrap+0x108>)
 8006a90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a92:	f7ff ff79 	bl	8006988 <ai_log_err>
    ai_network_destroy(network);
 8006a96:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <ai_boostrap+0xf0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fb40 	bl	8007120 <ai_network_destroy>
    network = AI_HANDLE_NULL;
 8006aa0:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <ai_boostrap+0xf0>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]
    return -3;
 8006aa6:	f06f 0302 	mvn.w	r3, #2
 8006aaa:	e000      	b.n	8006aae <ai_boostrap+0xe6>
  }

  return 0;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3740      	adds	r7, #64	; 0x40
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	200012b4 	.word	0x200012b4
 8006abc:	0800da28 	.word	0x0800da28
 8006ac0:	40040440 	.word	0x40040440
 8006ac4:	00040440 	.word	0x00040440
 8006ac8:	0800da3c 	.word	0x0800da3c
 8006acc:	200012b8 	.word	0x200012b8
 8006ad0:	0800da4c 	.word	0x0800da4c

08006ad4 <ai_run>:

static int ai_run(void *data_in, void *data_out)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  ai_i32 batch;

  ai_buffer *ai_input = network_info.inputs;
 8006ade:	4b14      	ldr	r3, [pc, #80]	; (8006b30 <ai_run+0x5c>)
 8006ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae2:	617b      	str	r3, [r7, #20]
  ai_buffer *ai_output = network_info.outputs;
 8006ae4:	4b12      	ldr	r3, [pc, #72]	; (8006b30 <ai_run+0x5c>)
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae8:	613b      	str	r3, [r7, #16]

  ai_input[0].data = AI_HANDLE_PTR(data_in);
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	611a      	str	r2, [r3, #16]
  ai_output[0].data = AI_HANDLE_PTR(data_out);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	611a      	str	r2, [r3, #16]

  batch = ai_network_run(network, ai_input, ai_output);
 8006af6:	4b0f      	ldr	r3, [pc, #60]	; (8006b34 <ai_run+0x60>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	6979      	ldr	r1, [r7, #20]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fb56 	bl	80071b0 <ai_network_run>
 8006b04:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d00c      	beq.n	8006b26 <ai_run+0x52>
    ai_log_err(ai_network_get_error(network),
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <ai_run+0x60>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 fae3 	bl	80070dc <ai_network_get_error>
 8006b16:	4603      	mov	r3, r0
 8006b18:	4907      	ldr	r1, [pc, #28]	; (8006b38 <ai_run+0x64>)
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff ff34 	bl	8006988 <ai_log_err>
        "ai_network_run");
    return -1;
 8006b20:	f04f 33ff 	mov.w	r3, #4294967295
 8006b24:	e000      	b.n	8006b28 <ai_run+0x54>
  }

  return 0;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	200012b8 	.word	0x200012b8
 8006b34:	200012b4 	.word	0x200012b4
 8006b38:	0800da64 	.word	0x0800da64

08006b3c <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(void * data)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; i < AI_NETWORK_IN_1_SIZE; i+= AI_NETWORK_IN_1_CHANNEL){
 8006b44:	2300      	movs	r3, #0
 8006b46:	73fb      	strb	r3, [r7, #15]
 8006b48:	e057      	b.n	8006bfa <acquire_and_process_data+0xbe>
		readSensors();
 8006b4a:	f7fa fe0d 	bl	8001768 <readSensors>
		((ai_float *)data)[i] = (ai_float)(acelBuff[0]/2000.0f);
 8006b4e:	4b2f      	ldr	r3, [pc, #188]	; (8006c0c <acquire_and_process_data+0xd0>)
 8006b50:	ed93 7a00 	vldr	s14, [r3]
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8006c10 <acquire_and_process_data+0xd4>
 8006b60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b64:	edc3 7a00 	vstr	s15, [r3]
		((ai_float *)data)[i+1] = (ai_float)(acelBuff[1]/2000.0f);
 8006b68:	4b28      	ldr	r3, [pc, #160]	; (8006c0c <acquire_and_process_data+0xd0>)
 8006b6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	3301      	adds	r3, #1
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	4413      	add	r3, r2
 8006b78:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006c10 <acquire_and_process_data+0xd4>
 8006b7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b80:	edc3 7a00 	vstr	s15, [r3]
		((ai_float *)data)[i+2] = (ai_float)(acelBuff[2]/2000.0f);
 8006b84:	4b21      	ldr	r3, [pc, #132]	; (8006c0c <acquire_and_process_data+0xd0>)
 8006b86:	ed93 7a02 	vldr	s14, [r3, #8]
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	3302      	adds	r3, #2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	4413      	add	r3, r2
 8006b94:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8006c10 <acquire_and_process_data+0xd4>
 8006b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b9c:	edc3 7a00 	vstr	s15, [r3]
		((ai_float *)data)[i+3] = (ai_float)(girBuff[0]/2000.0f);
 8006ba0:	4b1c      	ldr	r3, [pc, #112]	; (8006c14 <acquire_and_process_data+0xd8>)
 8006ba2:	ed93 7a00 	vldr	s14, [r3]
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	3303      	adds	r3, #3
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	4413      	add	r3, r2
 8006bb0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8006c10 <acquire_and_process_data+0xd4>
 8006bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bb8:	edc3 7a00 	vstr	s15, [r3]
		((ai_float *)data)[i+4] = (ai_float)(girBuff[1]/2000.0f);
 8006bbc:	4b15      	ldr	r3, [pc, #84]	; (8006c14 <acquire_and_process_data+0xd8>)
 8006bbe:	ed93 7a01 	vldr	s14, [r3, #4]
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	4413      	add	r3, r2
 8006bcc:	eddf 6a10 	vldr	s13, [pc, #64]	; 8006c10 <acquire_and_process_data+0xd4>
 8006bd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bd4:	edc3 7a00 	vstr	s15, [r3]
		((ai_float *)data)[i+5] = (ai_float)(girBuff[2]/2000.0f);
 8006bd8:	4b0e      	ldr	r3, [pc, #56]	; (8006c14 <acquire_and_process_data+0xd8>)
 8006bda:	ed93 7a02 	vldr	s14, [r3, #8]
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	3305      	adds	r3, #5
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4413      	add	r3, r2
 8006be8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8006c10 <acquire_and_process_data+0xd4>
 8006bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bf0:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < AI_NETWORK_IN_1_SIZE; i+= AI_NETWORK_IN_1_CHANNEL){
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	3306      	adds	r3, #6
 8006bf8:	73fb      	strb	r3, [r7, #15]
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	2b9b      	cmp	r3, #155	; 0x9b
 8006bfe:	d9a4      	bls.n	8006b4a <acquire_and_process_data+0xe>
		//printf("X: %.6f, Y: %.6f, Z: %.6f \r\n",acelBuff[0],acelBuff[1],acelBuff[2]);

	}

	return 0;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20001268 	.word	0x20001268
 8006c10:	44fa0000 	.word	0x44fa0000
 8006c14:	20001274 	.word	0x20001274

08006c18 <post_process>:

int post_process(void * data)
{
 8006c18:	b590      	push	{r4, r7, lr}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
	uint8_t maxIndex = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	for(i = 1; i < AI_NETWORK_OUT_1_SIZE; i++){
 8006c24:	2301      	movs	r3, #1
 8006c26:	73bb      	strb	r3, [r7, #14]
 8006c28:	e015      	b.n	8006c56 <post_process+0x3e>
		if(((float*)data)[i] > ((float*)data)[maxIndex]){
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	4413      	add	r3, r2
 8006c32:	ed93 7a00 	vldr	s14, [r3]
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	edd3 7a00 	vldr	s15, [r3]
 8006c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4a:	dd01      	ble.n	8006c50 <post_process+0x38>
			maxIndex = i;
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
 8006c4e:	73fb      	strb	r3, [r7, #15]
	for(i = 1; i < AI_NETWORK_OUT_1_SIZE; i++){
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	3301      	adds	r3, #1
 8006c54:	73bb      	strb	r3, [r7, #14]
 8006c56:	7bbb      	ldrb	r3, [r7, #14]
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d9e6      	bls.n	8006c2a <post_process+0x12>
		}

	}

	float salida = ((float*)data)[maxIndex];
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	4413      	add	r3, r2
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60bb      	str	r3, [r7, #8]
	printf("Precisión: %f \r\n",salida);
 8006c68:	68b8      	ldr	r0, [r7, #8]
 8006c6a:	f7f9 fc6d 	bl	8000548 <__aeabi_f2d>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4813      	ldr	r0, [pc, #76]	; (8006cc0 <post_process+0xa8>)
 8006c74:	f004 fc94 	bl	800b5a0 <iprintf>
	printf("Movimiento: %s \r\n",movements[maxIndex]);
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	4a12      	ldr	r2, [pc, #72]	; (8006cc4 <post_process+0xac>)
 8006c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c80:	4619      	mov	r1, r3
 8006c82:	4811      	ldr	r0, [pc, #68]	; (8006cc8 <post_process+0xb0>)
 8006c84:	f004 fc8c 	bl	800b5a0 <iprintf>
	printf("Tiempo de inferencia: Timer: %u --> %lf (ms) \r\n",timerValue,timerValue/1000.0);
 8006c88:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <post_process+0xb4>)
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	461c      	mov	r4, r3
 8006c8e:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <post_process+0xb4>)
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7f9 fc46 	bl	8000524 <__aeabi_i2d>
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	4b0c      	ldr	r3, [pc, #48]	; (8006cd0 <post_process+0xb8>)
 8006c9e:	f7f9 fdd5 	bl	800084c <__aeabi_ddiv>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	480a      	ldr	r0, [pc, #40]	; (8006cd4 <post_process+0xbc>)
 8006caa:	f004 fc79 	bl	800b5a0 <iprintf>
	printf("======================== \r\n");
 8006cae:	480a      	ldr	r0, [pc, #40]	; (8006cd8 <post_process+0xc0>)
 8006cb0:	f004 fcfc 	bl	800b6ac <puts>

	return 0;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd90      	pop	{r4, r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	0800da74 	.word	0x0800da74
 8006cc4:	20000000 	.word	0x20000000
 8006cc8:	0800da88 	.word	0x0800da88
 8006ccc:	20001280 	.word	0x20001280
 8006cd0:	408f4000 	.word	0x408f4000
 8006cd4:	0800da9c 	.word	0x0800da9c
 8006cd8:	0800dacc 	.word	0x0800dacc

08006cdc <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8006ce0:	4805      	ldr	r0, [pc, #20]	; (8006cf8 <MX_X_CUBE_AI_Init+0x1c>)
 8006ce2:	f004 fce3 	bl	800b6ac <puts>

  ai_boostrap(ai_network_data_weights_get(), activations);
 8006ce6:	f000 fa73 	bl	80071d0 <ai_network_data_weights_get>
 8006cea:	4603      	mov	r3, r0
 8006cec:	4903      	ldr	r1, [pc, #12]	; (8006cfc <MX_X_CUBE_AI_Init+0x20>)
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff fe6a 	bl	80069c8 <ai_boostrap>
    /* USER CODE END 5 */
}
 8006cf4:	bf00      	nop
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	0800dae8 	.word	0x0800dae8
 8006cfc:	2000132c 	.word	0x2000132c

08006d00 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8006d06:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0a:	617b      	str	r3, [r7, #20]
  uint8_t *in_data = NULL;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	613b      	str	r3, [r7, #16]
  uint8_t *out_data = NULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	60fb      	str	r3, [r7, #12]

  printf("TEMPLATE - run - main loop\r\n");
 8006d14:	482f      	ldr	r0, [pc, #188]	; (8006dd4 <MX_X_CUBE_AI_Process+0xd4>)
 8006d16:	f004 fcc9 	bl	800b6ac <puts>

  if (network) {
 8006d1a:	4b2f      	ldr	r3, [pc, #188]	; (8006dd8 <MX_X_CUBE_AI_Process+0xd8>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d047      	beq.n	8006db2 <MX_X_CUBE_AI_Process+0xb2>

    if ((network_info.n_inputs != 1) || (network_info.n_outputs != 1)) {
 8006d22:	4b2e      	ldr	r3, [pc, #184]	; (8006ddc <MX_X_CUBE_AI_Process+0xdc>)
 8006d24:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d103      	bne.n	8006d32 <MX_X_CUBE_AI_Process+0x32>
 8006d2a:	4b2c      	ldr	r3, [pc, #176]	; (8006ddc <MX_X_CUBE_AI_Process+0xdc>)
 8006d2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d00b      	beq.n	8006d4a <MX_X_CUBE_AI_Process+0x4a>
      ai_error err = {AI_ERROR_INVALID_PARAM, AI_ERROR_CODE_OUT_OF_RANGE};
 8006d32:	2314      	movs	r3, #20
 8006d34:	723b      	strb	r3, [r7, #8]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f362 231f 	bfi	r3, r2, #8, #24
 8006d3e:	60bb      	str	r3, [r7, #8]
      ai_log_err(err, "template code should be updated\r\n to support a model with multiple IO");
 8006d40:	4927      	ldr	r1, [pc, #156]	; (8006de0 <MX_X_CUBE_AI_Process+0xe0>)
 8006d42:	68b8      	ldr	r0, [r7, #8]
 8006d44:	f7ff fe20 	bl	8006988 <ai_log_err>
 8006d48:	e041      	b.n	8006dce <MX_X_CUBE_AI_Process+0xce>
    /* 1 - Set the I/O data buffer */

#if AI_NETWORK_INPUTS_IN_ACTIVATIONS
    in_data = network_info.inputs[0].data;
#else
    in_data = in_data_s;
 8006d4a:	4b26      	ldr	r3, [pc, #152]	; (8006de4 <MX_X_CUBE_AI_Process+0xe4>)
 8006d4c:	613b      	str	r3, [r7, #16]
#endif

#if AI_NETWORK_OUTPUTS_IN_ACTIVATIONS
    out_data = network_info.outputs[0].data;
#else
    out_data = out_data_s;
 8006d4e:	4b26      	ldr	r3, [pc, #152]	; (8006de8 <MX_X_CUBE_AI_Process+0xe8>)
 8006d50:	60fb      	str	r3, [r7, #12]
#endif

    if ((!in_data) || (!out_data)) {
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <MX_X_CUBE_AI_Process+0x5e>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d103      	bne.n	8006d66 <MX_X_CUBE_AI_Process+0x66>
      printf("TEMPLATE - I/O buffers are invalid\r\n");
 8006d5e:	4823      	ldr	r0, [pc, #140]	; (8006dec <MX_X_CUBE_AI_Process+0xec>)
 8006d60:	f004 fca4 	bl	800b6ac <puts>
      return;
 8006d64:	e033      	b.n	8006dce <MX_X_CUBE_AI_Process+0xce>
    }

    /* 2 - main loop */
    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(in_data);
 8006d66:	6938      	ldr	r0, [r7, #16]
 8006d68:	f7ff fee8 	bl	8006b3c <acquire_and_process_data>
 8006d6c:	6178      	str	r0, [r7, #20]
      /* 2 - process the data - call inference engine */
      if (res == 0){
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d114      	bne.n	8006d9e <MX_X_CUBE_AI_Process+0x9e>
    	timerValue = __HAL_TIM_GET_COUNTER(&htim1);
 8006d74:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <MX_X_CUBE_AI_Process+0xf0>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	4b1d      	ldr	r3, [pc, #116]	; (8006df4 <MX_X_CUBE_AI_Process+0xf4>)
 8006d7e:	801a      	strh	r2, [r3, #0]
    	res = ai_run(in_data, out_data);
 8006d80:	68f9      	ldr	r1, [r7, #12]
 8006d82:	6938      	ldr	r0, [r7, #16]
 8006d84:	f7ff fea6 	bl	8006ad4 <ai_run>
 8006d88:	6178      	str	r0, [r7, #20]
    	timerValue = __HAL_TIM_GET_COUNTER(&htim1) - timerValue;
 8006d8a:	4b19      	ldr	r3, [pc, #100]	; (8006df0 <MX_X_CUBE_AI_Process+0xf0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	4b18      	ldr	r3, [pc, #96]	; (8006df4 <MX_X_CUBE_AI_Process+0xf4>)
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	4b16      	ldr	r3, [pc, #88]	; (8006df4 <MX_X_CUBE_AI_Process+0xf4>)
 8006d9c:	801a      	strh	r2, [r3, #0]
      }
      /* 3- post-process the predictions */
      if (res == 0)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d103      	bne.n	8006dac <MX_X_CUBE_AI_Process+0xac>
        res = post_process(out_data);
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7ff ff37 	bl	8006c18 <post_process>
 8006daa:	6178      	str	r0, [r7, #20]
    } while (res==0);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0d9      	beq.n	8006d66 <MX_X_CUBE_AI_Process+0x66>
  }

  if (res) {
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00a      	beq.n	8006dce <MX_X_CUBE_AI_Process+0xce>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8006db8:	2311      	movs	r3, #17
 8006dba:	713b      	strb	r3, [r7, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2210      	movs	r2, #16
 8006dc0:	f362 231f 	bfi	r3, r2, #8, #24
 8006dc4:	607b      	str	r3, [r7, #4]
    ai_log_err(err, "Process has FAILED");
 8006dc6:	490c      	ldr	r1, [pc, #48]	; (8006df8 <MX_X_CUBE_AI_Process+0xf8>)
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7ff fddd 	bl	8006988 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	0800db08 	.word	0x0800db08
 8006dd8:	200012b4 	.word	0x200012b4
 8006ddc:	200012b8 	.word	0x200012b8
 8006de0:	0800db24 	.word	0x0800db24
 8006de4:	2000166c 	.word	0x2000166c
 8006de8:	200018dc 	.word	0x200018dc
 8006dec:	0800db6c 	.word	0x0800db6c
 8006df0:	20000c08 	.word	0x20000c08
 8006df4:	20001280 	.word	0x20001280
 8006df8:	0800db90 	.word	0x0800db90

08006dfc <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8006e0a:	f107 030c 	add.w	r3, r7, #12
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	2101      	movs	r1, #1
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fa1e 	bl	8007254 <ai_platform_get_activations_map>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d03f      	beq.n	8006e9e <network_configure_activations+0xa2>
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 8006e1e:	4b22      	ldr	r3, [pc, #136]	; (8006ea8 <network_configure_activations+0xac>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8006e24:	4b20      	ldr	r3, [pc, #128]	; (8006ea8 <network_configure_activations+0xac>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	60da      	str	r2, [r3, #12]
    conv1d_output_array.data = AI_PTR(activations_map[0] + 128);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3380      	adds	r3, #128	; 0x80
 8006e2e:	4a1f      	ldr	r2, [pc, #124]	; (8006eac <network_configure_activations+0xb0>)
 8006e30:	6093      	str	r3, [r2, #8]
    conv1d_output_array.data_start = AI_PTR(activations_map[0] + 128);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3380      	adds	r3, #128	; 0x80
 8006e36:	4a1d      	ldr	r2, [pc, #116]	; (8006eac <network_configure_activations+0xb0>)
 8006e38:	60d3      	str	r3, [r2, #12]
    conv1d_1_output_array.data = AI_PTR(activations_map[0] + 64);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3340      	adds	r3, #64	; 0x40
 8006e3e:	4a1c      	ldr	r2, [pc, #112]	; (8006eb0 <network_configure_activations+0xb4>)
 8006e40:	6093      	str	r3, [r2, #8]
    conv1d_1_output_array.data_start = AI_PTR(activations_map[0] + 64);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3340      	adds	r3, #64	; 0x40
 8006e46:	4a1a      	ldr	r2, [pc, #104]	; (8006eb0 <network_configure_activations+0xb4>)
 8006e48:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(activations_map[0] + 160);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	33a0      	adds	r3, #160	; 0xa0
 8006e4e:	4a19      	ldr	r2, [pc, #100]	; (8006eb4 <network_configure_activations+0xb8>)
 8006e50:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations_map[0] + 160);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	33a0      	adds	r3, #160	; 0xa0
 8006e56:	4a17      	ldr	r2, [pc, #92]	; (8006eb4 <network_configure_activations+0xb8>)
 8006e58:	60d3      	str	r3, [r2, #12]
    dense_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4a16      	ldr	r2, [pc, #88]	; (8006eb8 <network_configure_activations+0xbc>)
 8006e5e:	6093      	str	r3, [r2, #8]
    dense_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4a15      	ldr	r2, [pc, #84]	; (8006eb8 <network_configure_activations+0xbc>)
 8006e64:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations_map[0] + 100);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3364      	adds	r3, #100	; 0x64
 8006e6a:	4a14      	ldr	r2, [pc, #80]	; (8006ebc <network_configure_activations+0xc0>)
 8006e6c:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations_map[0] + 100);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3364      	adds	r3, #100	; 0x64
 8006e72:	4a12      	ldr	r2, [pc, #72]	; (8006ebc <network_configure_activations+0xc0>)
 8006e74:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(NULL);
 8006e76:	4b12      	ldr	r3, [pc, #72]	; (8006ec0 <network_configure_activations+0xc4>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	609a      	str	r2, [r3, #8]
    dense_1_nl_output_array.data_start = AI_PTR(NULL);
 8006e7c:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <network_configure_activations+0xc4>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	60da      	str	r2, [r3, #12]
    conv1d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	4a0f      	ldr	r2, [pc, #60]	; (8006ec4 <network_configure_activations+0xc8>)
 8006e86:	6093      	str	r3, [r2, #8]
    conv1d_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4a0e      	ldr	r2, [pc, #56]	; (8006ec4 <network_configure_activations+0xc8>)
 8006e8c:	60d3      	str	r3, [r2, #12]
    conv1d_1_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4a0d      	ldr	r2, [pc, #52]	; (8006ec8 <network_configure_activations+0xcc>)
 8006e92:	6093      	str	r3, [r2, #8]
    conv1d_1_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4a0c      	ldr	r2, [pc, #48]	; (8006ec8 <network_configure_activations+0xcc>)
 8006e98:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e000      	b.n	8006ea0 <network_configure_activations+0xa4>
  }
  return false;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	2000001c 	.word	0x2000001c
 8006eac:	2000002c 	.word	0x2000002c
 8006eb0:	2000003c 	.word	0x2000003c
 8006eb4:	2000004c 	.word	0x2000004c
 8006eb8:	2000005c 	.word	0x2000005c
 8006ebc:	2000006c 	.word	0x2000006c
 8006ec0:	2000007c 	.word	0x2000007c
 8006ec4:	2000010c 	.word	0x2000010c
 8006ec8:	2000011c 	.word	0x2000011c

08006ecc <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8006eda:	f107 030c 	add.w	r3, r7, #12
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 f982 	bl	80071ec <ai_platform_get_weights_map>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 8082 	beq.w	8006ff4 <network_configure_weights+0x128>
    /* Updating weights with array addresses */
    
    conv1d_weights_array.format |= AI_FMT_FLAG_CONST;
 8006ef0:	4b43      	ldr	r3, [pc, #268]	; (8007000 <network_configure_weights+0x134>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ef8:	4a41      	ldr	r2, [pc, #260]	; (8007000 <network_configure_weights+0x134>)
 8006efa:	6013      	str	r3, [r2, #0]
    conv1d_weights_array.data = AI_PTR(weights_map[0] + 0);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4a40      	ldr	r2, [pc, #256]	; (8007000 <network_configure_weights+0x134>)
 8006f00:	6093      	str	r3, [r2, #8]
    conv1d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4a3e      	ldr	r2, [pc, #248]	; (8007000 <network_configure_weights+0x134>)
 8006f06:	60d3      	str	r3, [r2, #12]
    conv1d_bias_array.format |= AI_FMT_FLAG_CONST;
 8006f08:	4b3e      	ldr	r3, [pc, #248]	; (8007004 <network_configure_weights+0x138>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f10:	4a3c      	ldr	r2, [pc, #240]	; (8007004 <network_configure_weights+0x138>)
 8006f12:	6013      	str	r3, [r2, #0]
    conv1d_bias_array.data = AI_PTR(weights_map[0] + 1920);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 8006f1a:	4a3a      	ldr	r2, [pc, #232]	; (8007004 <network_configure_weights+0x138>)
 8006f1c:	6093      	str	r3, [r2, #8]
    conv1d_bias_array.data_start = AI_PTR(weights_map[0] + 1920);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 8006f24:	4a37      	ldr	r2, [pc, #220]	; (8007004 <network_configure_weights+0x138>)
 8006f26:	60d3      	str	r3, [r2, #12]
    conv1d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8006f28:	4b37      	ldr	r3, [pc, #220]	; (8007008 <network_configure_weights+0x13c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f30:	4a35      	ldr	r2, [pc, #212]	; (8007008 <network_configure_weights+0x13c>)
 8006f32:	6013      	str	r3, [r2, #0]
    conv1d_1_weights_array.data = AI_PTR(weights_map[0] + 1984);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8006f3a:	4a33      	ldr	r2, [pc, #204]	; (8007008 <network_configure_weights+0x13c>)
 8006f3c:	6093      	str	r3, [r2, #8]
    conv1d_1_weights_array.data_start = AI_PTR(weights_map[0] + 1984);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8006f44:	4a30      	ldr	r2, [pc, #192]	; (8007008 <network_configure_weights+0x13c>)
 8006f46:	60d3      	str	r3, [r2, #12]
    conv1d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8006f48:	4b30      	ldr	r3, [pc, #192]	; (800700c <network_configure_weights+0x140>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f50:	4a2e      	ldr	r2, [pc, #184]	; (800700c <network_configure_weights+0x140>)
 8006f52:	6013      	str	r3, [r2, #0]
    conv1d_1_bias_array.data = AI_PTR(weights_map[0] + 4544);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 8006f5a:	4a2c      	ldr	r2, [pc, #176]	; (800700c <network_configure_weights+0x140>)
 8006f5c:	6093      	str	r3, [r2, #8]
    conv1d_1_bias_array.data_start = AI_PTR(weights_map[0] + 4544);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 8006f64:	4a29      	ldr	r2, [pc, #164]	; (800700c <network_configure_weights+0x140>)
 8006f66:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006f68:	4b29      	ldr	r3, [pc, #164]	; (8007010 <network_configure_weights+0x144>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f70:	4a27      	ldr	r2, [pc, #156]	; (8007010 <network_configure_weights+0x144>)
 8006f72:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights_map[0] + 4576);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8006f7a:	4a25      	ldr	r2, [pc, #148]	; (8007010 <network_configure_weights+0x144>)
 8006f7c:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights_map[0] + 4576);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8006f84:	4a22      	ldr	r2, [pc, #136]	; (8007010 <network_configure_weights+0x144>)
 8006f86:	60d3      	str	r3, [r2, #12]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006f88:	4b22      	ldr	r3, [pc, #136]	; (8007014 <network_configure_weights+0x148>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f90:	4a20      	ldr	r2, [pc, #128]	; (8007014 <network_configure_weights+0x148>)
 8006f92:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights_map[0] + 6976);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 8006f9a:	4a1e      	ldr	r2, [pc, #120]	; (8007014 <network_configure_weights+0x148>)
 8006f9c:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights_map[0] + 6976);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 8006fa4:	4a1b      	ldr	r2, [pc, #108]	; (8007014 <network_configure_weights+0x148>)
 8006fa6:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8006fa8:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <network_configure_weights+0x14c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fb0:	4a19      	ldr	r2, [pc, #100]	; (8007018 <network_configure_weights+0x14c>)
 8006fb2:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights_map[0] + 7076);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 8006fba:	3304      	adds	r3, #4
 8006fbc:	4a16      	ldr	r2, [pc, #88]	; (8007018 <network_configure_weights+0x14c>)
 8006fbe:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights_map[0] + 7076);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4a13      	ldr	r2, [pc, #76]	; (8007018 <network_configure_weights+0x14c>)
 8006fca:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8006fcc:	4b13      	ldr	r3, [pc, #76]	; (800701c <network_configure_weights+0x150>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fd4:	4a11      	ldr	r2, [pc, #68]	; (800701c <network_configure_weights+0x150>)
 8006fd6:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 7476);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8006fde:	3314      	adds	r3, #20
 8006fe0:	4a0e      	ldr	r2, [pc, #56]	; (800701c <network_configure_weights+0x150>)
 8006fe2:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights_map[0] + 7476);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 8006fea:	3314      	adds	r3, #20
 8006fec:	4a0b      	ldr	r2, [pc, #44]	; (800701c <network_configure_weights+0x150>)
 8006fee:	60d3      	str	r3, [r2, #12]
    return true;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e000      	b.n	8006ff6 <network_configure_weights+0x12a>
  }
  return false;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	2000008c 	.word	0x2000008c
 8007004:	2000009c 	.word	0x2000009c
 8007008:	200000ac 	.word	0x200000ac
 800700c:	200000bc 	.word	0x200000bc
 8007010:	200000cc 	.word	0x200000cc
 8007014:	200000dc 	.word	0x200000dc
 8007018:	200000ec 	.word	0x200000ec
 800701c:	200000fc 	.word	0x200000fc

08007020 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/
AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b0a0      	sub	sp, #128	; 0x80
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fa72 	bl	8007514 <ai_platform_context_acquire>
 8007030:	67f8      	str	r0, [r7, #124]	; 0x7c

  if (report && net_ctx)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d041      	beq.n	80070bc <ai_network_get_info+0x9c>
 8007038:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d03e      	beq.n	80070bc <ai_network_get_info+0x9c>
  {
    ai_network_report r = {
 800703e:	f107 0308 	add.w	r3, r7, #8
 8007042:	2274      	movs	r2, #116	; 0x74
 8007044:	2100      	movs	r1, #0
 8007046:	4618      	mov	r0, r3
 8007048:	f003 fd58 	bl	800aafc <memset>
 800704c:	4b1e      	ldr	r3, [pc, #120]	; (80070c8 <ai_network_get_info+0xa8>)
 800704e:	60bb      	str	r3, [r7, #8]
 8007050:	4b1e      	ldr	r3, [pc, #120]	; (80070cc <ai_network_get_info+0xac>)
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	4b1e      	ldr	r3, [pc, #120]	; (80070d0 <ai_network_get_info+0xb0>)
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	4b1e      	ldr	r3, [pc, #120]	; (80070d4 <ai_network_get_info+0xb4>)
 800705a:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800705c:	f000 f92e 	bl	80072bc <ai_platform_runtime_get_revision>
 8007060:	4603      	mov	r3, r0
    ai_network_report r = {
 8007062:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 8007064:	f000 f96c 	bl	8007340 <ai_platform_runtime_get_version>
 8007068:	4603      	mov	r3, r0
 800706a:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 800706c:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <ai_network_get_info+0xb8>)
 800706e:	623b      	str	r3, [r7, #32]
 8007070:	2307      	movs	r3, #7
 8007072:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8007076:	f000 f9a5 	bl	80073c4 <ai_platform_api_get_version>
 800707a:	4603      	mov	r3, r0
 800707c:	62fb      	str	r3, [r7, #44]	; 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800707e:	f000 f9f5 	bl	800746c <ai_platform_interface_api_get_version>
 8007082:	4603      	mov	r3, r0
 8007084:	633b      	str	r3, [r7, #48]	; 0x30
    ai_network_report r = {
 8007086:	f244 132e 	movw	r3, #16686	; 0x412e
 800708a:	637b      	str	r3, [r7, #52]	; 0x34
      .activations       = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800708c:	f107 0308 	add.w	r3, r7, #8
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fb00 	bl	8007698 <ai_platform_api_get_network_report>
 8007098:	4603      	mov	r3, r0
 800709a:	f083 0301 	eor.w	r3, r3, #1
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <ai_network_get_info+0x88>
 80070a4:	2300      	movs	r3, #0
 80070a6:	e00a      	b.n	80070be <ai_network_get_info+0x9e>

    *report = r;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f107 0308 	add.w	r3, r7, #8
 80070b0:	2274      	movs	r2, #116	; 0x74
 80070b2:	4619      	mov	r1, r3
 80070b4:	f003 fd14 	bl	800aae0 <memcpy>
    return true;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e000      	b.n	80070be <ai_network_get_info+0x9e>
  }
  return false;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3780      	adds	r7, #128	; 0x80
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	0800dba4 	.word	0x0800dba4
 80070cc:	0800dbac 	.word	0x0800dbac
 80070d0:	0800dbd0 	.word	0x0800dbd0
 80070d4:	0800dbec 	.word	0x0800dbec
 80070d8:	0800dc04 	.word	0x0800dc04

080070dc <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fa5d 	bl	80075a4 <ai_platform_network_get_error>
 80070ea:	4603      	mov	r3, r0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80070fe:	2300      	movs	r3, #0
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	2304      	movs	r3, #4
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	2301      	movs	r3, #1
 8007108:	4a04      	ldr	r2, [pc, #16]	; (800711c <ai_network_create+0x28>)
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fd65 	bl	8007bdc <ai_platform_network_create>
 8007112:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8007114:	4618      	mov	r0, r3
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	2000087c 	.word	0x2000087c

08007120 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fe2d 	bl	8007d88 <ai_platform_network_destroy>
 800712e:	4603      	mov	r3, r0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fe97 	bl	8007e78 <ai_platform_network_init>
 800714a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <ai_network_init+0x1e>
 8007152:	2300      	movs	r3, #0
 8007154:	e028      	b.n	80071a8 <ai_network_init+0x70>

  ai_bool ok = true;
 8007156:	2301      	movs	r3, #1
 8007158:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7ff feb5 	bl	8006ecc <network_configure_weights>
 8007162:	4603      	mov	r3, r0
 8007164:	461a      	mov	r2, r3
 8007166:	7afb      	ldrb	r3, [r7, #11]
 8007168:	4013      	ands	r3, r2
 800716a:	2b00      	cmp	r3, #0
 800716c:	bf14      	ite	ne
 800716e:	2301      	movne	r3, #1
 8007170:	2300      	moveq	r3, #0
 8007172:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f7ff fe40 	bl	8006dfc <network_configure_activations>
 800717c:	4603      	mov	r3, r0
 800717e:	461a      	mov	r2, r3
 8007180:	7afb      	ldrb	r3, [r7, #11]
 8007182:	4013      	ands	r3, r2
 8007184:	2b00      	cmp	r3, #0
 8007186:	bf14      	ite	ne
 8007188:	2301      	movne	r3, #1
 800718a:	2300      	moveq	r3, #0
 800718c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 ff84 	bl	800809c <ai_platform_network_post_init>
 8007194:	4603      	mov	r3, r0
 8007196:	461a      	mov	r2, r3
 8007198:	7afb      	ldrb	r3, [r7, #11]
 800719a:	4013      	ands	r3, r2
 800719c:	2b00      	cmp	r3, #0
 800719e:	bf14      	ite	ne
 80071a0:	2301      	movne	r3, #1
 80071a2:	2300      	moveq	r3, #0
 80071a4:	72fb      	strb	r3, [r7, #11]

  return ok;
 80071a6:	7afb      	ldrb	r3, [r7, #11]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 ffff 	bl	80081c4 <ai_platform_network_process>
 80071c6:	4603      	mov	r3, r0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 80071d0:	b480      	push	{r7}
 80071d2:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_network_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_map);
 80071d4:	4b02      	ldr	r3, [pc, #8]	; (80071e0 <ai_network_data_weights_get+0x10>)

}
 80071d6:	4618      	mov	r0, r3
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	0800f9e8 	.word	0x0800f9e8

080071e4 <_ai_platform_acquire_crc>:
 80071e4:	2001      	movs	r0, #1
 80071e6:	4770      	bx	lr

080071e8 <_ai_platform_release_crc>:
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop

080071ec <ai_platform_get_weights_map>:
 80071ec:	b132      	cbz	r2, 80071fc <ai_platform_get_weights_map+0x10>
 80071ee:	6912      	ldr	r2, [r2, #16]
 80071f0:	b122      	cbz	r2, 80071fc <ai_platform_get_weights_map+0x10>
 80071f2:	b110      	cbz	r0, 80071fa <ai_platform_get_weights_map+0xe>
 80071f4:	b921      	cbnz	r1, 8007200 <ai_platform_get_weights_map+0x14>
 80071f6:	4608      	mov	r0, r1
 80071f8:	4770      	bx	lr
 80071fa:	4770      	bx	lr
 80071fc:	4610      	mov	r0, r2
 80071fe:	4770      	bx	lr
 8007200:	b470      	push	{r4, r5, r6}
 8007202:	4b13      	ldr	r3, [pc, #76]	; (8007250 <ai_platform_get_weights_map+0x64>)
 8007204:	6815      	ldr	r5, [r2, #0]
 8007206:	429d      	cmp	r5, r3
 8007208:	d007      	beq.n	800721a <ai_platform_get_weights_map+0x2e>
 800720a:	6002      	str	r2, [r0, #0]
 800720c:	f1a1 0001 	sub.w	r0, r1, #1
 8007210:	fab0 f080 	clz	r0, r0
 8007214:	0940      	lsrs	r0, r0, #5
 8007216:	bc70      	pop	{r4, r5, r6}
 8007218:	4770      	bx	lr
 800721a:	6854      	ldr	r4, [r2, #4]
 800721c:	42ac      	cmp	r4, r5
 800721e:	f102 0204 	add.w	r2, r2, #4
 8007222:	d011      	beq.n	8007248 <ai_platform_get_weights_map+0x5c>
 8007224:	1f03      	subs	r3, r0, #4
 8007226:	4616      	mov	r6, r2
 8007228:	2000      	movs	r0, #0
 800722a:	e003      	b.n	8007234 <ai_platform_get_weights_map+0x48>
 800722c:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8007230:	42ac      	cmp	r4, r5
 8007232:	d009      	beq.n	8007248 <ai_platform_get_weights_map+0x5c>
 8007234:	3001      	adds	r0, #1
 8007236:	4281      	cmp	r1, r0
 8007238:	f843 4f04 	str.w	r4, [r3, #4]!
 800723c:	d1f6      	bne.n	800722c <ai_platform_get_weights_map+0x40>
 800723e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007242:	4b03      	ldr	r3, [pc, #12]	; (8007250 <ai_platform_get_weights_map+0x64>)
 8007244:	429a      	cmp	r2, r3
 8007246:	d001      	beq.n	800724c <ai_platform_get_weights_map+0x60>
 8007248:	2000      	movs	r0, #0
 800724a:	e7e4      	b.n	8007216 <ai_platform_get_weights_map+0x2a>
 800724c:	2001      	movs	r0, #1
 800724e:	e7e2      	b.n	8007216 <ai_platform_get_weights_map+0x2a>
 8007250:	a1facade 	.word	0xa1facade

08007254 <ai_platform_get_activations_map>:
 8007254:	b132      	cbz	r2, 8007264 <ai_platform_get_activations_map+0x10>
 8007256:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007258:	b122      	cbz	r2, 8007264 <ai_platform_get_activations_map+0x10>
 800725a:	b110      	cbz	r0, 8007262 <ai_platform_get_activations_map+0xe>
 800725c:	b921      	cbnz	r1, 8007268 <ai_platform_get_activations_map+0x14>
 800725e:	4608      	mov	r0, r1
 8007260:	4770      	bx	lr
 8007262:	4770      	bx	lr
 8007264:	4610      	mov	r0, r2
 8007266:	4770      	bx	lr
 8007268:	b470      	push	{r4, r5, r6}
 800726a:	4b13      	ldr	r3, [pc, #76]	; (80072b8 <ai_platform_get_activations_map+0x64>)
 800726c:	6815      	ldr	r5, [r2, #0]
 800726e:	429d      	cmp	r5, r3
 8007270:	d007      	beq.n	8007282 <ai_platform_get_activations_map+0x2e>
 8007272:	6002      	str	r2, [r0, #0]
 8007274:	f1a1 0001 	sub.w	r0, r1, #1
 8007278:	fab0 f080 	clz	r0, r0
 800727c:	0940      	lsrs	r0, r0, #5
 800727e:	bc70      	pop	{r4, r5, r6}
 8007280:	4770      	bx	lr
 8007282:	6854      	ldr	r4, [r2, #4]
 8007284:	42ac      	cmp	r4, r5
 8007286:	f102 0204 	add.w	r2, r2, #4
 800728a:	d011      	beq.n	80072b0 <ai_platform_get_activations_map+0x5c>
 800728c:	1f03      	subs	r3, r0, #4
 800728e:	4616      	mov	r6, r2
 8007290:	2000      	movs	r0, #0
 8007292:	e003      	b.n	800729c <ai_platform_get_activations_map+0x48>
 8007294:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8007298:	42ac      	cmp	r4, r5
 800729a:	d009      	beq.n	80072b0 <ai_platform_get_activations_map+0x5c>
 800729c:	3001      	adds	r0, #1
 800729e:	4281      	cmp	r1, r0
 80072a0:	f843 4f04 	str.w	r4, [r3, #4]!
 80072a4:	d1f6      	bne.n	8007294 <ai_platform_get_activations_map+0x40>
 80072a6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80072aa:	4b03      	ldr	r3, [pc, #12]	; (80072b8 <ai_platform_get_activations_map+0x64>)
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d001      	beq.n	80072b4 <ai_platform_get_activations_map+0x60>
 80072b0:	2000      	movs	r0, #0
 80072b2:	e7e4      	b.n	800727e <ai_platform_get_activations_map+0x2a>
 80072b4:	2001      	movs	r0, #1
 80072b6:	e7e2      	b.n	800727e <ai_platform_get_activations_map+0x2a>
 80072b8:	a1facade 	.word	0xa1facade

080072bc <ai_platform_runtime_get_revision>:
 80072bc:	b508      	push	{r3, lr}
 80072be:	4a17      	ldr	r2, [pc, #92]	; (800731c <ai_platform_runtime_get_revision+0x60>)
 80072c0:	6813      	ldr	r3, [r2, #0]
 80072c2:	f023 0301 	bic.w	r3, r3, #1
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	f7ff ff8c 	bl	80071e4 <_ai_platform_acquire_crc>
 80072cc:	4b14      	ldr	r3, [pc, #80]	; (8007320 <ai_platform_runtime_get_revision+0x64>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072d8:	d00d      	beq.n	80072f6 <ai_platform_runtime_get_revision+0x3a>
 80072da:	4b12      	ldr	r3, [pc, #72]	; (8007324 <ai_platform_runtime_get_revision+0x68>)
 80072dc:	2201      	movs	r2, #1
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	2a00      	cmp	r2, #0
 80072e4:	d1fc      	bne.n	80072e0 <ai_platform_runtime_get_revision+0x24>
 80072e6:	4b10      	ldr	r3, [pc, #64]	; (8007328 <ai_platform_runtime_get_revision+0x6c>)
 80072e8:	4a10      	ldr	r2, [pc, #64]	; (800732c <ai_platform_runtime_get_revision+0x70>)
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	4b10      	ldr	r3, [pc, #64]	; (8007330 <ai_platform_runtime_get_revision+0x74>)
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d00e      	beq.n	8007312 <ai_platform_runtime_get_revision+0x56>
 80072f4:	e7fe      	b.n	80072f4 <ai_platform_runtime_get_revision+0x38>
 80072f6:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <ai_platform_runtime_get_revision+0x78>)
 80072f8:	2201      	movs	r2, #1
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	2a00      	cmp	r2, #0
 8007300:	d1fc      	bne.n	80072fc <ai_platform_runtime_get_revision+0x40>
 8007302:	4b0d      	ldr	r3, [pc, #52]	; (8007338 <ai_platform_runtime_get_revision+0x7c>)
 8007304:	4a09      	ldr	r2, [pc, #36]	; (800732c <ai_platform_runtime_get_revision+0x70>)
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b09      	ldr	r3, [pc, #36]	; (8007330 <ai_platform_runtime_get_revision+0x74>)
 800730c:	429a      	cmp	r2, r3
 800730e:	d000      	beq.n	8007312 <ai_platform_runtime_get_revision+0x56>
 8007310:	e7fe      	b.n	8007310 <ai_platform_runtime_get_revision+0x54>
 8007312:	f7ff ff69 	bl	80071e8 <_ai_platform_release_crc>
 8007316:	4809      	ldr	r0, [pc, #36]	; (800733c <ai_platform_runtime_get_revision+0x80>)
 8007318:	bd08      	pop	{r3, pc}
 800731a:	bf00      	nop
 800731c:	e0002000 	.word	0xe0002000
 8007320:	e0042000 	.word	0xe0042000
 8007324:	58024c08 	.word	0x58024c08
 8007328:	58024c00 	.word	0x58024c00
 800732c:	f407a5c2 	.word	0xf407a5c2
 8007330:	b5e8b5cd 	.word	0xb5e8b5cd
 8007334:	40023008 	.word	0x40023008
 8007338:	40023000 	.word	0x40023000
 800733c:	0800f9f4 	.word	0x0800f9f4

08007340 <ai_platform_runtime_get_version>:
 8007340:	b500      	push	{lr}
 8007342:	4a18      	ldr	r2, [pc, #96]	; (80073a4 <ai_platform_runtime_get_version+0x64>)
 8007344:	6813      	ldr	r3, [r2, #0]
 8007346:	f023 0301 	bic.w	r3, r3, #1
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	b083      	sub	sp, #12
 800734e:	f7ff ff49 	bl	80071e4 <_ai_platform_acquire_crc>
 8007352:	4b15      	ldr	r3, [pc, #84]	; (80073a8 <ai_platform_runtime_get_version+0x68>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800735a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800735e:	d00d      	beq.n	800737c <ai_platform_runtime_get_version+0x3c>
 8007360:	4b12      	ldr	r3, [pc, #72]	; (80073ac <ai_platform_runtime_get_version+0x6c>)
 8007362:	2201      	movs	r2, #1
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	2a00      	cmp	r2, #0
 800736a:	d1fc      	bne.n	8007366 <ai_platform_runtime_get_version+0x26>
 800736c:	4b10      	ldr	r3, [pc, #64]	; (80073b0 <ai_platform_runtime_get_version+0x70>)
 800736e:	4a11      	ldr	r2, [pc, #68]	; (80073b4 <ai_platform_runtime_get_version+0x74>)
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	4b10      	ldr	r3, [pc, #64]	; (80073b8 <ai_platform_runtime_get_version+0x78>)
 8007376:	429a      	cmp	r2, r3
 8007378:	d00e      	beq.n	8007398 <ai_platform_runtime_get_version+0x58>
 800737a:	e7fe      	b.n	800737a <ai_platform_runtime_get_version+0x3a>
 800737c:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <ai_platform_runtime_get_version+0x7c>)
 800737e:	2201      	movs	r2, #1
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	2a00      	cmp	r2, #0
 8007386:	d1fc      	bne.n	8007382 <ai_platform_runtime_get_version+0x42>
 8007388:	4b0d      	ldr	r3, [pc, #52]	; (80073c0 <ai_platform_runtime_get_version+0x80>)
 800738a:	4a0a      	ldr	r2, [pc, #40]	; (80073b4 <ai_platform_runtime_get_version+0x74>)
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <ai_platform_runtime_get_version+0x78>)
 8007392:	429a      	cmp	r2, r3
 8007394:	d000      	beq.n	8007398 <ai_platform_runtime_get_version+0x58>
 8007396:	e7fe      	b.n	8007396 <ai_platform_runtime_get_version+0x56>
 8007398:	f7ff ff26 	bl	80071e8 <_ai_platform_release_crc>
 800739c:	2007      	movs	r0, #7
 800739e:	b003      	add	sp, #12
 80073a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80073a4:	e0002000 	.word	0xe0002000
 80073a8:	e0042000 	.word	0xe0042000
 80073ac:	58024c08 	.word	0x58024c08
 80073b0:	58024c00 	.word	0x58024c00
 80073b4:	f407a5c2 	.word	0xf407a5c2
 80073b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80073bc:	40023008 	.word	0x40023008
 80073c0:	40023000 	.word	0x40023000

080073c4 <ai_platform_api_get_version>:
 80073c4:	b500      	push	{lr}
 80073c6:	4a20      	ldr	r2, [pc, #128]	; (8007448 <ai_platform_api_get_version+0x84>)
 80073c8:	6813      	ldr	r3, [r2, #0]
 80073ca:	f023 0301 	bic.w	r3, r3, #1
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	b083      	sub	sp, #12
 80073d2:	f7ff ff07 	bl	80071e4 <_ai_platform_acquire_crc>
 80073d6:	4b1d      	ldr	r3, [pc, #116]	; (800744c <ai_platform_api_get_version+0x88>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e2:	d00d      	beq.n	8007400 <ai_platform_api_get_version+0x3c>
 80073e4:	4b1a      	ldr	r3, [pc, #104]	; (8007450 <ai_platform_api_get_version+0x8c>)
 80073e6:	2201      	movs	r2, #1
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	2a00      	cmp	r2, #0
 80073ee:	d1fc      	bne.n	80073ea <ai_platform_api_get_version+0x26>
 80073f0:	4b18      	ldr	r3, [pc, #96]	; (8007454 <ai_platform_api_get_version+0x90>)
 80073f2:	4a19      	ldr	r2, [pc, #100]	; (8007458 <ai_platform_api_get_version+0x94>)
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	4b18      	ldr	r3, [pc, #96]	; (800745c <ai_platform_api_get_version+0x98>)
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d00e      	beq.n	800741c <ai_platform_api_get_version+0x58>
 80073fe:	e7fe      	b.n	80073fe <ai_platform_api_get_version+0x3a>
 8007400:	4b17      	ldr	r3, [pc, #92]	; (8007460 <ai_platform_api_get_version+0x9c>)
 8007402:	2201      	movs	r2, #1
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	2a00      	cmp	r2, #0
 800740a:	d1fc      	bne.n	8007406 <ai_platform_api_get_version+0x42>
 800740c:	4b15      	ldr	r3, [pc, #84]	; (8007464 <ai_platform_api_get_version+0xa0>)
 800740e:	4a12      	ldr	r2, [pc, #72]	; (8007458 <ai_platform_api_get_version+0x94>)
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	4b11      	ldr	r3, [pc, #68]	; (800745c <ai_platform_api_get_version+0x98>)
 8007416:	429a      	cmp	r2, r3
 8007418:	d000      	beq.n	800741c <ai_platform_api_get_version+0x58>
 800741a:	e7fe      	b.n	800741a <ai_platform_api_get_version+0x56>
 800741c:	f7ff fee4 	bl	80071e8 <_ai_platform_release_crc>
 8007420:	4b11      	ldr	r3, [pc, #68]	; (8007468 <ai_platform_api_get_version+0xa4>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2000      	movs	r0, #0
 8007426:	b2da      	uxtb	r2, r3
 8007428:	f362 0007 	bfi	r0, r2, #0, #8
 800742c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007430:	f362 200f 	bfi	r0, r2, #8, #8
 8007434:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007438:	f362 4017 	bfi	r0, r2, #16, #8
 800743c:	0e1b      	lsrs	r3, r3, #24
 800743e:	f363 601f 	bfi	r0, r3, #24, #8
 8007442:	b003      	add	sp, #12
 8007444:	f85d fb04 	ldr.w	pc, [sp], #4
 8007448:	e0002000 	.word	0xe0002000
 800744c:	e0042000 	.word	0xe0042000
 8007450:	58024c08 	.word	0x58024c08
 8007454:	58024c00 	.word	0x58024c00
 8007458:	f407a5c2 	.word	0xf407a5c2
 800745c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007460:	40023008 	.word	0x40023008
 8007464:	40023000 	.word	0x40023000
 8007468:	0800f9f8 	.word	0x0800f9f8

0800746c <ai_platform_interface_api_get_version>:
 800746c:	b500      	push	{lr}
 800746e:	4a20      	ldr	r2, [pc, #128]	; (80074f0 <ai_platform_interface_api_get_version+0x84>)
 8007470:	6813      	ldr	r3, [r2, #0]
 8007472:	f023 0301 	bic.w	r3, r3, #1
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	b083      	sub	sp, #12
 800747a:	f7ff feb3 	bl	80071e4 <_ai_platform_acquire_crc>
 800747e:	4b1d      	ldr	r3, [pc, #116]	; (80074f4 <ai_platform_interface_api_get_version+0x88>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800748a:	d00d      	beq.n	80074a8 <ai_platform_interface_api_get_version+0x3c>
 800748c:	4b1a      	ldr	r3, [pc, #104]	; (80074f8 <ai_platform_interface_api_get_version+0x8c>)
 800748e:	2201      	movs	r2, #1
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	2a00      	cmp	r2, #0
 8007496:	d1fc      	bne.n	8007492 <ai_platform_interface_api_get_version+0x26>
 8007498:	4b18      	ldr	r3, [pc, #96]	; (80074fc <ai_platform_interface_api_get_version+0x90>)
 800749a:	4a19      	ldr	r2, [pc, #100]	; (8007500 <ai_platform_interface_api_get_version+0x94>)
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	4b18      	ldr	r3, [pc, #96]	; (8007504 <ai_platform_interface_api_get_version+0x98>)
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d00e      	beq.n	80074c4 <ai_platform_interface_api_get_version+0x58>
 80074a6:	e7fe      	b.n	80074a6 <ai_platform_interface_api_get_version+0x3a>
 80074a8:	4b17      	ldr	r3, [pc, #92]	; (8007508 <ai_platform_interface_api_get_version+0x9c>)
 80074aa:	2201      	movs	r2, #1
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	2a00      	cmp	r2, #0
 80074b2:	d1fc      	bne.n	80074ae <ai_platform_interface_api_get_version+0x42>
 80074b4:	4b15      	ldr	r3, [pc, #84]	; (800750c <ai_platform_interface_api_get_version+0xa0>)
 80074b6:	4a12      	ldr	r2, [pc, #72]	; (8007500 <ai_platform_interface_api_get_version+0x94>)
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	4b11      	ldr	r3, [pc, #68]	; (8007504 <ai_platform_interface_api_get_version+0x98>)
 80074be:	429a      	cmp	r2, r3
 80074c0:	d000      	beq.n	80074c4 <ai_platform_interface_api_get_version+0x58>
 80074c2:	e7fe      	b.n	80074c2 <ai_platform_interface_api_get_version+0x56>
 80074c4:	f7ff fe90 	bl	80071e8 <_ai_platform_release_crc>
 80074c8:	4b11      	ldr	r3, [pc, #68]	; (8007510 <ai_platform_interface_api_get_version+0xa4>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2000      	movs	r0, #0
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	f362 0007 	bfi	r0, r2, #0, #8
 80074d4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80074d8:	f362 200f 	bfi	r0, r2, #8, #8
 80074dc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80074e0:	f362 4017 	bfi	r0, r2, #16, #8
 80074e4:	0e1b      	lsrs	r3, r3, #24
 80074e6:	f363 601f 	bfi	r0, r3, #24, #8
 80074ea:	b003      	add	sp, #12
 80074ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80074f0:	e0002000 	.word	0xe0002000
 80074f4:	e0042000 	.word	0xe0042000
 80074f8:	58024c08 	.word	0x58024c08
 80074fc:	58024c00 	.word	0x58024c00
 8007500:	f407a5c2 	.word	0xf407a5c2
 8007504:	b5e8b5cd 	.word	0xb5e8b5cd
 8007508:	40023008 	.word	0x40023008
 800750c:	40023000 	.word	0x40023000
 8007510:	0800f9fc 	.word	0x0800f9fc

08007514 <ai_platform_context_acquire>:
 8007514:	b510      	push	{r4, lr}
 8007516:	4604      	mov	r4, r0
 8007518:	b120      	cbz	r0, 8007524 <ai_platform_context_acquire+0x10>
 800751a:	4b19      	ldr	r3, [pc, #100]	; (8007580 <ai_platform_context_acquire+0x6c>)
 800751c:	6802      	ldr	r2, [r0, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	bf18      	it	ne
 8007522:	2400      	movne	r4, #0
 8007524:	4a17      	ldr	r2, [pc, #92]	; (8007584 <ai_platform_context_acquire+0x70>)
 8007526:	6813      	ldr	r3, [r2, #0]
 8007528:	f023 0301 	bic.w	r3, r3, #1
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	f7ff fe59 	bl	80071e4 <_ai_platform_acquire_crc>
 8007532:	4b15      	ldr	r3, [pc, #84]	; (8007588 <ai_platform_context_acquire+0x74>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800753a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800753e:	d00d      	beq.n	800755c <ai_platform_context_acquire+0x48>
 8007540:	4b12      	ldr	r3, [pc, #72]	; (800758c <ai_platform_context_acquire+0x78>)
 8007542:	2201      	movs	r2, #1
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	2a00      	cmp	r2, #0
 800754a:	d1fc      	bne.n	8007546 <ai_platform_context_acquire+0x32>
 800754c:	4b10      	ldr	r3, [pc, #64]	; (8007590 <ai_platform_context_acquire+0x7c>)
 800754e:	4a11      	ldr	r2, [pc, #68]	; (8007594 <ai_platform_context_acquire+0x80>)
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	4b10      	ldr	r3, [pc, #64]	; (8007598 <ai_platform_context_acquire+0x84>)
 8007556:	429a      	cmp	r2, r3
 8007558:	d00e      	beq.n	8007578 <ai_platform_context_acquire+0x64>
 800755a:	e7fe      	b.n	800755a <ai_platform_context_acquire+0x46>
 800755c:	4b0f      	ldr	r3, [pc, #60]	; (800759c <ai_platform_context_acquire+0x88>)
 800755e:	2201      	movs	r2, #1
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	2a00      	cmp	r2, #0
 8007566:	d1fc      	bne.n	8007562 <ai_platform_context_acquire+0x4e>
 8007568:	4b0d      	ldr	r3, [pc, #52]	; (80075a0 <ai_platform_context_acquire+0x8c>)
 800756a:	4a0a      	ldr	r2, [pc, #40]	; (8007594 <ai_platform_context_acquire+0x80>)
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	4b09      	ldr	r3, [pc, #36]	; (8007598 <ai_platform_context_acquire+0x84>)
 8007572:	429a      	cmp	r2, r3
 8007574:	d000      	beq.n	8007578 <ai_platform_context_acquire+0x64>
 8007576:	e7fe      	b.n	8007576 <ai_platform_context_acquire+0x62>
 8007578:	f7ff fe36 	bl	80071e8 <_ai_platform_release_crc>
 800757c:	4620      	mov	r0, r4
 800757e:	bd10      	pop	{r4, pc}
 8007580:	a1c00100 	.word	0xa1c00100
 8007584:	e0002000 	.word	0xe0002000
 8007588:	e0042000 	.word	0xe0042000
 800758c:	58024c08 	.word	0x58024c08
 8007590:	58024c00 	.word	0x58024c00
 8007594:	f407a5c2 	.word	0xf407a5c2
 8007598:	b5e8b5cd 	.word	0xb5e8b5cd
 800759c:	40023008 	.word	0x40023008
 80075a0:	40023000 	.word	0x40023000

080075a4 <ai_platform_network_get_error>:
 80075a4:	b510      	push	{r4, lr}
 80075a6:	b120      	cbz	r0, 80075b2 <ai_platform_network_get_error+0xe>
 80075a8:	4b32      	ldr	r3, [pc, #200]	; (8007674 <ai_platform_network_get_error+0xd0>)
 80075aa:	6802      	ldr	r2, [r0, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	4604      	mov	r4, r0
 80075b0:	d02e      	beq.n	8007610 <ai_platform_network_get_error+0x6c>
 80075b2:	4a31      	ldr	r2, [pc, #196]	; (8007678 <ai_platform_network_get_error+0xd4>)
 80075b4:	6813      	ldr	r3, [r2, #0]
 80075b6:	f023 0301 	bic.w	r3, r3, #1
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	f7ff fe12 	bl	80071e4 <_ai_platform_acquire_crc>
 80075c0:	4b2e      	ldr	r3, [pc, #184]	; (800767c <ai_platform_network_get_error+0xd8>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075cc:	d00d      	beq.n	80075ea <ai_platform_network_get_error+0x46>
 80075ce:	4b2c      	ldr	r3, [pc, #176]	; (8007680 <ai_platform_network_get_error+0xdc>)
 80075d0:	2201      	movs	r2, #1
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	d1fc      	bne.n	80075d4 <ai_platform_network_get_error+0x30>
 80075da:	4b2a      	ldr	r3, [pc, #168]	; (8007684 <ai_platform_network_get_error+0xe0>)
 80075dc:	4a2a      	ldr	r2, [pc, #168]	; (8007688 <ai_platform_network_get_error+0xe4>)
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	4b2a      	ldr	r3, [pc, #168]	; (800768c <ai_platform_network_get_error+0xe8>)
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d00d      	beq.n	8007604 <ai_platform_network_get_error+0x60>
 80075e8:	e7fe      	b.n	80075e8 <ai_platform_network_get_error+0x44>
 80075ea:	4b29      	ldr	r3, [pc, #164]	; (8007690 <ai_platform_network_get_error+0xec>)
 80075ec:	2201      	movs	r2, #1
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	2a00      	cmp	r2, #0
 80075f4:	d1fc      	bne.n	80075f0 <ai_platform_network_get_error+0x4c>
 80075f6:	4b27      	ldr	r3, [pc, #156]	; (8007694 <ai_platform_network_get_error+0xf0>)
 80075f8:	4a23      	ldr	r2, [pc, #140]	; (8007688 <ai_platform_network_get_error+0xe4>)
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	4b23      	ldr	r3, [pc, #140]	; (800768c <ai_platform_network_get_error+0xe8>)
 8007600:	429a      	cmp	r2, r3
 8007602:	d104      	bne.n	800760e <ai_platform_network_get_error+0x6a>
 8007604:	f7ff fdf0 	bl	80071e8 <_ai_platform_release_crc>
 8007608:	f241 0010 	movw	r0, #4112	; 0x1010
 800760c:	bd10      	pop	{r4, pc}
 800760e:	e7fe      	b.n	800760e <ai_platform_network_get_error+0x6a>
 8007610:	4a19      	ldr	r2, [pc, #100]	; (8007678 <ai_platform_network_get_error+0xd4>)
 8007612:	6813      	ldr	r3, [r2, #0]
 8007614:	f023 0301 	bic.w	r3, r3, #1
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	f7ff fde3 	bl	80071e4 <_ai_platform_acquire_crc>
 800761e:	4b17      	ldr	r3, [pc, #92]	; (800767c <ai_platform_network_get_error+0xd8>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800762a:	d00d      	beq.n	8007648 <ai_platform_network_get_error+0xa4>
 800762c:	4b14      	ldr	r3, [pc, #80]	; (8007680 <ai_platform_network_get_error+0xdc>)
 800762e:	2201      	movs	r2, #1
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	2a00      	cmp	r2, #0
 8007636:	d1fc      	bne.n	8007632 <ai_platform_network_get_error+0x8e>
 8007638:	4b12      	ldr	r3, [pc, #72]	; (8007684 <ai_platform_network_get_error+0xe0>)
 800763a:	4a13      	ldr	r2, [pc, #76]	; (8007688 <ai_platform_network_get_error+0xe4>)
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	4b12      	ldr	r3, [pc, #72]	; (800768c <ai_platform_network_get_error+0xe8>)
 8007642:	429a      	cmp	r2, r3
 8007644:	d00e      	beq.n	8007664 <ai_platform_network_get_error+0xc0>
 8007646:	e7fe      	b.n	8007646 <ai_platform_network_get_error+0xa2>
 8007648:	4b11      	ldr	r3, [pc, #68]	; (8007690 <ai_platform_network_get_error+0xec>)
 800764a:	2201      	movs	r2, #1
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	2a00      	cmp	r2, #0
 8007652:	d1fc      	bne.n	800764e <ai_platform_network_get_error+0xaa>
 8007654:	4b0f      	ldr	r3, [pc, #60]	; (8007694 <ai_platform_network_get_error+0xf0>)
 8007656:	4a0c      	ldr	r2, [pc, #48]	; (8007688 <ai_platform_network_get_error+0xe4>)
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	4b0b      	ldr	r3, [pc, #44]	; (800768c <ai_platform_network_get_error+0xe8>)
 800765e:	429a      	cmp	r2, r3
 8007660:	d000      	beq.n	8007664 <ai_platform_network_get_error+0xc0>
 8007662:	e7fe      	b.n	8007662 <ai_platform_network_get_error+0xbe>
 8007664:	f7ff fdc0 	bl	80071e8 <_ai_platform_release_crc>
 8007668:	f104 0010 	add.w	r0, r4, #16
 800766c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007670:	f001 b828 	b.w	80086c4 <core_get_error>
 8007674:	a1c00100 	.word	0xa1c00100
 8007678:	e0002000 	.word	0xe0002000
 800767c:	e0042000 	.word	0xe0042000
 8007680:	58024c08 	.word	0x58024c08
 8007684:	58024c00 	.word	0x58024c00
 8007688:	f407a5c2 	.word	0xf407a5c2
 800768c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007690:	40023008 	.word	0x40023008
 8007694:	40023000 	.word	0x40023000

08007698 <ai_platform_api_get_network_report>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	b083      	sub	sp, #12
 800769e:	b120      	cbz	r0, 80076aa <ai_platform_api_get_network_report+0x12>
 80076a0:	4ba1      	ldr	r3, [pc, #644]	; (8007928 <ai_platform_api_get_network_report+0x290>)
 80076a2:	6802      	ldr	r2, [r0, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	4605      	mov	r5, r0
 80076a8:	d030      	beq.n	800770c <ai_platform_api_get_network_report+0x74>
 80076aa:	4aa0      	ldr	r2, [pc, #640]	; (800792c <ai_platform_api_get_network_report+0x294>)
 80076ac:	6813      	ldr	r3, [r2, #0]
 80076ae:	f023 0301 	bic.w	r3, r3, #1
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	f7ff fd96 	bl	80071e4 <_ai_platform_acquire_crc>
 80076b8:	4b9d      	ldr	r3, [pc, #628]	; (8007930 <ai_platform_api_get_network_report+0x298>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c4:	d00d      	beq.n	80076e2 <ai_platform_api_get_network_report+0x4a>
 80076c6:	4b9b      	ldr	r3, [pc, #620]	; (8007934 <ai_platform_api_get_network_report+0x29c>)
 80076c8:	2201      	movs	r2, #1
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	2a00      	cmp	r2, #0
 80076d0:	d1fc      	bne.n	80076cc <ai_platform_api_get_network_report+0x34>
 80076d2:	4b99      	ldr	r3, [pc, #612]	; (8007938 <ai_platform_api_get_network_report+0x2a0>)
 80076d4:	4a99      	ldr	r2, [pc, #612]	; (800793c <ai_platform_api_get_network_report+0x2a4>)
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	4b99      	ldr	r3, [pc, #612]	; (8007940 <ai_platform_api_get_network_report+0x2a8>)
 80076dc:	429a      	cmp	r2, r3
 80076de:	d00d      	beq.n	80076fc <ai_platform_api_get_network_report+0x64>
 80076e0:	e7fe      	b.n	80076e0 <ai_platform_api_get_network_report+0x48>
 80076e2:	4b98      	ldr	r3, [pc, #608]	; (8007944 <ai_platform_api_get_network_report+0x2ac>)
 80076e4:	2201      	movs	r2, #1
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	2a00      	cmp	r2, #0
 80076ec:	d1fc      	bne.n	80076e8 <ai_platform_api_get_network_report+0x50>
 80076ee:	4b96      	ldr	r3, [pc, #600]	; (8007948 <ai_platform_api_get_network_report+0x2b0>)
 80076f0:	4a92      	ldr	r2, [pc, #584]	; (800793c <ai_platform_api_get_network_report+0x2a4>)
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	4b92      	ldr	r3, [pc, #584]	; (8007940 <ai_platform_api_get_network_report+0x2a8>)
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d106      	bne.n	800770a <ai_platform_api_get_network_report+0x72>
 80076fc:	f7ff fd74 	bl	80071e8 <_ai_platform_release_crc>
 8007700:	2600      	movs	r6, #0
 8007702:	4630      	mov	r0, r6
 8007704:	b003      	add	sp, #12
 8007706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770a:	e7fe      	b.n	800770a <ai_platform_api_get_network_report+0x72>
 800770c:	4a87      	ldr	r2, [pc, #540]	; (800792c <ai_platform_api_get_network_report+0x294>)
 800770e:	6813      	ldr	r3, [r2, #0]
 8007710:	f023 0301 	bic.w	r3, r3, #1
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	460c      	mov	r4, r1
 8007718:	f7ff fd64 	bl	80071e4 <_ai_platform_acquire_crc>
 800771c:	4b84      	ldr	r3, [pc, #528]	; (8007930 <ai_platform_api_get_network_report+0x298>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007728:	d00d      	beq.n	8007746 <ai_platform_api_get_network_report+0xae>
 800772a:	4b82      	ldr	r3, [pc, #520]	; (8007934 <ai_platform_api_get_network_report+0x29c>)
 800772c:	2201      	movs	r2, #1
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	2a00      	cmp	r2, #0
 8007734:	d1fc      	bne.n	8007730 <ai_platform_api_get_network_report+0x98>
 8007736:	4b80      	ldr	r3, [pc, #512]	; (8007938 <ai_platform_api_get_network_report+0x2a0>)
 8007738:	4a80      	ldr	r2, [pc, #512]	; (800793c <ai_platform_api_get_network_report+0x2a4>)
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	4b80      	ldr	r3, [pc, #512]	; (8007940 <ai_platform_api_get_network_report+0x2a8>)
 8007740:	429a      	cmp	r2, r3
 8007742:	d00e      	beq.n	8007762 <ai_platform_api_get_network_report+0xca>
 8007744:	e7fe      	b.n	8007744 <ai_platform_api_get_network_report+0xac>
 8007746:	4b7f      	ldr	r3, [pc, #508]	; (8007944 <ai_platform_api_get_network_report+0x2ac>)
 8007748:	2201      	movs	r2, #1
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	2a00      	cmp	r2, #0
 8007750:	d1fc      	bne.n	800774c <ai_platform_api_get_network_report+0xb4>
 8007752:	4b7d      	ldr	r3, [pc, #500]	; (8007948 <ai_platform_api_get_network_report+0x2b0>)
 8007754:	4a79      	ldr	r2, [pc, #484]	; (800793c <ai_platform_api_get_network_report+0x2a4>)
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	4b79      	ldr	r3, [pc, #484]	; (8007940 <ai_platform_api_get_network_report+0x2a8>)
 800775c:	429a      	cmp	r2, r3
 800775e:	d000      	beq.n	8007762 <ai_platform_api_get_network_report+0xca>
 8007760:	e7fe      	b.n	8007760 <ai_platform_api_get_network_report+0xc8>
 8007762:	f7ff fd41 	bl	80071e8 <_ai_platform_release_crc>
 8007766:	2c00      	cmp	r4, #0
 8007768:	d07c      	beq.n	8007864 <ai_platform_api_get_network_report+0x1cc>
 800776a:	2300      	movs	r3, #0
 800776c:	66e3      	str	r3, [r4, #108]	; 0x6c
 800776e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8007770:	2a00      	cmp	r2, #0
 8007772:	d079      	beq.n	8007868 <ai_platform_api_get_network_report+0x1d0>
 8007774:	2301      	movs	r3, #1
 8007776:	66e3      	str	r3, [r4, #108]	; 0x6c
 8007778:	6913      	ldr	r3, [r2, #16]
 800777a:	429a      	cmp	r2, r3
 800777c:	d00c      	beq.n	8007798 <ai_platform_api_get_network_report+0x100>
 800777e:	b15b      	cbz	r3, 8007798 <ai_platform_api_get_network_report+0x100>
 8007780:	2202      	movs	r2, #2
 8007782:	e003      	b.n	800778c <ai_platform_api_get_network_report+0xf4>
 8007784:	1c50      	adds	r0, r2, #1
 8007786:	460b      	mov	r3, r1
 8007788:	b121      	cbz	r1, 8007794 <ai_platform_api_get_network_report+0xfc>
 800778a:	4602      	mov	r2, r0
 800778c:	66e2      	str	r2, [r4, #108]	; 0x6c
 800778e:	6919      	ldr	r1, [r3, #16]
 8007790:	4299      	cmp	r1, r3
 8007792:	d1f7      	bne.n	8007784 <ai_platform_api_get_network_report+0xec>
 8007794:	2a00      	cmp	r2, #0
 8007796:	d067      	beq.n	8007868 <ai_platform_api_get_network_report+0x1d0>
 8007798:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 80d6 	beq.w	800794c <ai_platform_api_get_network_report+0x2b4>
 80077a0:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 80077a2:	2f00      	cmp	r7, #0
 80077a4:	f000 80d2 	beq.w	800794c <ai_platform_api_get_network_report+0x2b4>
 80077a8:	883b      	ldrh	r3, [r7, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 80ce 	beq.w	800794c <ai_platform_api_get_network_report+0x2b4>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80ca 	beq.w	800794c <ai_platform_api_get_network_report+0x2b4>
 80077b8:	681e      	ldr	r6, [r3, #0]
 80077ba:	2e00      	cmp	r6, #0
 80077bc:	f000 80c6 	beq.w	800794c <ai_platform_api_get_network_report+0x2b4>
 80077c0:	f04f 0800 	mov.w	r8, #0
 80077c4:	4641      	mov	r1, r8
 80077c6:	f04f 0b18 	mov.w	fp, #24
 80077ca:	f04f 0a01 	mov.w	sl, #1
 80077ce:	e019      	b.n	8007804 <ai_platform_api_get_network_report+0x16c>
 80077d0:	f849 1038 	str.w	r1, [r9, r8, lsl #3]
 80077d4:	6830      	ldr	r0, [r6, #0]
 80077d6:	6050      	str	r0, [r2, #4]
 80077d8:	2800      	cmp	r0, #0
 80077da:	d039      	beq.n	8007850 <ai_platform_api_get_network_report+0x1b8>
 80077dc:	8840      	ldrh	r0, [r0, #2]
 80077de:	2800      	cmp	r0, #0
 80077e0:	d036      	beq.n	8007850 <ai_platform_api_get_network_report+0x1b8>
 80077e2:	f849 a00c 	str.w	sl, [r9, ip]
 80077e6:	615a      	str	r2, [r3, #20]
 80077e8:	8838      	ldrh	r0, [r7, #0]
 80077ea:	f108 0301 	add.w	r3, r8, #1
 80077ee:	4283      	cmp	r3, r0
 80077f0:	4698      	mov	r8, r3
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	d240      	bcs.n	8007878 <ai_platform_api_get_network_report+0x1e0>
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d03d      	beq.n	8007878 <ai_platform_api_get_network_report+0x1e0>
 80077fc:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
 8007800:	2e00      	cmp	r6, #0
 8007802:	d039      	beq.n	8007878 <ai_platform_api_get_network_report+0x1e0>
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	69b2      	ldr	r2, [r6, #24]
 8007808:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800780c:	6810      	ldr	r0, [r2, #0]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	9101      	str	r1, [sp, #4]
 8007812:	9200      	str	r2, [sp, #0]
 8007814:	f003 f8b8 	bl	800a988 <ai_array_to_buffer_fmt>
 8007818:	9a00      	ldr	r2, [sp, #0]
 800781a:	9901      	ldr	r1, [sp, #4]
 800781c:	fb0b fc08 	mul.w	ip, fp, r8
 8007820:	eb02 030c 	add.w	r3, r2, ip
 8007824:	f842 000c 	str.w	r0, [r2, ip]
 8007828:	f8a3 a004 	strh.w	sl, [r3, #4]
 800782c:	68f2      	ldr	r2, [r6, #12]
 800782e:	68d2      	ldr	r2, [r2, #12]
 8007830:	80da      	strh	r2, [r3, #6]
 8007832:	68f2      	ldr	r2, [r6, #12]
 8007834:	6892      	ldr	r2, [r2, #8]
 8007836:	811a      	strh	r2, [r3, #8]
 8007838:	68f2      	ldr	r2, [r6, #12]
 800783a:	6852      	ldr	r2, [r2, #4]
 800783c:	60da      	str	r2, [r3, #12]
 800783e:	69b2      	ldr	r2, [r6, #24]
 8007840:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 8007844:	6892      	ldr	r2, [r2, #8]
 8007846:	611a      	str	r2, [r3, #16]
 8007848:	eb09 020c 	add.w	r2, r9, ip
 800784c:	2a00      	cmp	r2, #0
 800784e:	d1bf      	bne.n	80077d0 <ai_platform_api_get_network_report+0x138>
 8007850:	2200      	movs	r2, #0
 8007852:	e7c8      	b.n	80077e6 <ai_platform_api_get_network_report+0x14e>
 8007854:	2300      	movs	r3, #0
 8007856:	8663      	strh	r3, [r4, #50]	; 0x32
 8007858:	f105 0010 	add.w	r0, r5, #16
 800785c:	2218      	movs	r2, #24
 800785e:	2113      	movs	r1, #19
 8007860:	f000 ff36 	bl	80086d0 <core_set_error>
 8007864:	2600      	movs	r6, #0
 8007866:	e74c      	b.n	8007702 <ai_platform_api_get_network_report+0x6a>
 8007868:	f105 0010 	add.w	r0, r5, #16
 800786c:	2218      	movs	r2, #24
 800786e:	2111      	movs	r1, #17
 8007870:	f000 ff2e 	bl	80086d0 <core_set_error>
 8007874:	2600      	movs	r6, #0
 8007876:	e744      	b.n	8007702 <ai_platform_api_get_network_report+0x6a>
 8007878:	2a00      	cmp	r2, #0
 800787a:	d067      	beq.n	800794c <ai_platform_api_get_network_report+0x2b4>
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	6363      	str	r3, [r4, #52]	; 0x34
 8007882:	8622      	strh	r2, [r4, #48]	; 0x30
 8007884:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8007886:	2b01      	cmp	r3, #1
 8007888:	d9e4      	bls.n	8007854 <ai_platform_api_get_network_report+0x1bc>
 800788a:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800788e:	2600      	movs	r6, #0
 8007890:	f108 0a0c 	add.w	sl, r8, #12
 8007894:	4631      	mov	r1, r6
 8007896:	f04f 0b01 	mov.w	fp, #1
 800789a:	b2b3      	uxth	r3, r6
 800789c:	f1ba 0f00 	cmp.w	sl, #0
 80078a0:	d05f      	beq.n	8007962 <ai_platform_api_get_network_report+0x2ca>
 80078a2:	f8b8 000c 	ldrh.w	r0, [r8, #12]
 80078a6:	4286      	cmp	r6, r0
 80078a8:	d25b      	bcs.n	8007962 <ai_platform_api_get_network_report+0x2ca>
 80078aa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d057      	beq.n	8007962 <ai_platform_api_get_network_report+0x2ca>
 80078b2:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80078b6:	2f00      	cmp	r7, #0
 80078b8:	d053      	beq.n	8007962 <ai_platform_api_get_network_report+0x2ca>
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	6853      	ldr	r3, [r2, #4]
 80078c4:	9101      	str	r1, [sp, #4]
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80078cc:	f003 f85c 	bl	800a988 <ai_array_to_buffer_fmt>
 80078d0:	2318      	movs	r3, #24
 80078d2:	fb03 fe06 	mul.w	lr, r3, r6
 80078d6:	9b00      	ldr	r3, [sp, #0]
 80078d8:	9901      	ldr	r1, [sp, #4]
 80078da:	f843 000e 	str.w	r0, [r3, lr]
 80078de:	eb03 0c0e 	add.w	ip, r3, lr
 80078e2:	00f0      	lsls	r0, r6, #3
 80078e4:	f8ac b004 	strh.w	fp, [ip, #4]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f8ac 3006 	strh.w	r3, [ip, #6]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f8ac 3008 	strh.w	r3, [ip, #8]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f8cc 300c 	str.w	r3, [ip, #12]
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f8cc 3010 	str.w	r3, [ip, #16]
 8007908:	eb09 0300 	add.w	r3, r9, r0
 800790c:	b33b      	cbz	r3, 800795e <ai_platform_api_get_network_report+0x2c6>
 800790e:	f849 1036 	str.w	r1, [r9, r6, lsl #3]
 8007912:	683f      	ldr	r7, [r7, #0]
 8007914:	605f      	str	r7, [r3, #4]
 8007916:	b317      	cbz	r7, 800795e <ai_platform_api_get_network_report+0x2c6>
 8007918:	887f      	ldrh	r7, [r7, #2]
 800791a:	b307      	cbz	r7, 800795e <ai_platform_api_get_network_report+0x2c6>
 800791c:	f849 b000 	str.w	fp, [r9, r0]
 8007920:	f8cc 3014 	str.w	r3, [ip, #20]
 8007924:	3601      	adds	r6, #1
 8007926:	e7b8      	b.n	800789a <ai_platform_api_get_network_report+0x202>
 8007928:	a1c00100 	.word	0xa1c00100
 800792c:	e0002000 	.word	0xe0002000
 8007930:	e0042000 	.word	0xe0042000
 8007934:	58024c08 	.word	0x58024c08
 8007938:	58024c00 	.word	0x58024c00
 800793c:	f407a5c2 	.word	0xf407a5c2
 8007940:	b5e8b5cd 	.word	0xb5e8b5cd
 8007944:	40023008 	.word	0x40023008
 8007948:	40023000 	.word	0x40023000
 800794c:	2600      	movs	r6, #0
 800794e:	f105 0010 	add.w	r0, r5, #16
 8007952:	8626      	strh	r6, [r4, #48]	; 0x30
 8007954:	2218      	movs	r2, #24
 8007956:	2112      	movs	r1, #18
 8007958:	f000 feba 	bl	80086d0 <core_set_error>
 800795c:	e6d1      	b.n	8007702 <ai_platform_api_get_network_report+0x6a>
 800795e:	2300      	movs	r3, #0
 8007960:	e7de      	b.n	8007920 <ai_platform_api_get_network_report+0x288>
 8007962:	2b00      	cmp	r3, #0
 8007964:	f43f af77 	beq.w	8007856 <ai_platform_api_get_network_report+0x1be>
 8007968:	f8da 2008 	ldr.w	r2, [sl, #8]
 800796c:	6852      	ldr	r2, [r2, #4]
 800796e:	63a2      	str	r2, [r4, #56]	; 0x38
 8007970:	8663      	strh	r3, [r4, #50]	; 0x32
 8007972:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007974:	b16b      	cbz	r3, 8007992 <ai_platform_api_get_network_report+0x2fa>
 8007976:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8007978:	b15b      	cbz	r3, 8007992 <ai_platform_api_get_network_report+0x2fa>
 800797a:	6a2b      	ldr	r3, [r5, #32]
 800797c:	b10b      	cbz	r3, 8007982 <ai_platform_api_get_network_report+0x2ea>
 800797e:	8beb      	ldrh	r3, [r5, #30]
 8007980:	b97b      	cbnz	r3, 80079a2 <ai_platform_api_get_network_report+0x30a>
 8007982:	f105 0010 	add.w	r0, r5, #16
 8007986:	2212      	movs	r2, #18
 8007988:	2111      	movs	r1, #17
 800798a:	f000 fea1 	bl	80086d0 <core_set_error>
 800798e:	2600      	movs	r6, #0
 8007990:	e6b7      	b.n	8007702 <ai_platform_api_get_network_report+0x6a>
 8007992:	f105 0010 	add.w	r0, r5, #16
 8007996:	2213      	movs	r2, #19
 8007998:	2111      	movs	r1, #17
 800799a:	f000 fe99 	bl	80086d0 <core_set_error>
 800799e:	2600      	movs	r6, #0
 80079a0:	e6af      	b.n	8007702 <ai_platform_api_get_network_report+0x6a>
 80079a2:	686b      	ldr	r3, [r5, #4]
 80079a4:	4a83      	ldr	r2, [pc, #524]	; (8007bb4 <ai_platform_api_get_network_report+0x51c>)
 80079a6:	6723      	str	r3, [r4, #112]	; 0x70
 80079a8:	6813      	ldr	r3, [r2, #0]
 80079aa:	f023 0301 	bic.w	r3, r3, #1
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	f7ff fc18 	bl	80071e4 <_ai_platform_acquire_crc>
 80079b4:	4b80      	ldr	r3, [pc, #512]	; (8007bb8 <ai_platform_api_get_network_report+0x520>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c0:	d00d      	beq.n	80079de <ai_platform_api_get_network_report+0x346>
 80079c2:	4b7e      	ldr	r3, [pc, #504]	; (8007bbc <ai_platform_api_get_network_report+0x524>)
 80079c4:	2201      	movs	r2, #1
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	2a00      	cmp	r2, #0
 80079cc:	d1fc      	bne.n	80079c8 <ai_platform_api_get_network_report+0x330>
 80079ce:	4b7c      	ldr	r3, [pc, #496]	; (8007bc0 <ai_platform_api_get_network_report+0x528>)
 80079d0:	4a7c      	ldr	r2, [pc, #496]	; (8007bc4 <ai_platform_api_get_network_report+0x52c>)
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	4b7c      	ldr	r3, [pc, #496]	; (8007bc8 <ai_platform_api_get_network_report+0x530>)
 80079d8:	429a      	cmp	r2, r3
 80079da:	d00e      	beq.n	80079fa <ai_platform_api_get_network_report+0x362>
 80079dc:	e7fe      	b.n	80079dc <ai_platform_api_get_network_report+0x344>
 80079de:	4b7b      	ldr	r3, [pc, #492]	; (8007bcc <ai_platform_api_get_network_report+0x534>)
 80079e0:	2201      	movs	r2, #1
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	2a00      	cmp	r2, #0
 80079e8:	d1fc      	bne.n	80079e4 <ai_platform_api_get_network_report+0x34c>
 80079ea:	4b79      	ldr	r3, [pc, #484]	; (8007bd0 <ai_platform_api_get_network_report+0x538>)
 80079ec:	4a75      	ldr	r2, [pc, #468]	; (8007bc4 <ai_platform_api_get_network_report+0x52c>)
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	4b75      	ldr	r3, [pc, #468]	; (8007bc8 <ai_platform_api_get_network_report+0x530>)
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d000      	beq.n	80079fa <ai_platform_api_get_network_report+0x362>
 80079f8:	e7fe      	b.n	80079f8 <ai_platform_api_get_network_report+0x360>
 80079fa:	f7ff fbf5 	bl	80071e8 <_ai_platform_release_crc>
 80079fe:	4a6d      	ldr	r2, [pc, #436]	; (8007bb4 <ai_platform_api_get_network_report+0x51c>)
 8007a00:	4b74      	ldr	r3, [pc, #464]	; (8007bd4 <ai_platform_api_get_network_report+0x53c>)
 8007a02:	6123      	str	r3, [r4, #16]
 8007a04:	6813      	ldr	r3, [r2, #0]
 8007a06:	f023 0301 	bic.w	r3, r3, #1
 8007a0a:	6013      	str	r3, [r2, #0]
 8007a0c:	f7ff fbea 	bl	80071e4 <_ai_platform_acquire_crc>
 8007a10:	4b69      	ldr	r3, [pc, #420]	; (8007bb8 <ai_platform_api_get_network_report+0x520>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a1c:	d00d      	beq.n	8007a3a <ai_platform_api_get_network_report+0x3a2>
 8007a1e:	4b67      	ldr	r3, [pc, #412]	; (8007bbc <ai_platform_api_get_network_report+0x524>)
 8007a20:	2201      	movs	r2, #1
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	2a00      	cmp	r2, #0
 8007a28:	d1fc      	bne.n	8007a24 <ai_platform_api_get_network_report+0x38c>
 8007a2a:	4b65      	ldr	r3, [pc, #404]	; (8007bc0 <ai_platform_api_get_network_report+0x528>)
 8007a2c:	4a65      	ldr	r2, [pc, #404]	; (8007bc4 <ai_platform_api_get_network_report+0x52c>)
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	4b65      	ldr	r3, [pc, #404]	; (8007bc8 <ai_platform_api_get_network_report+0x530>)
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d00e      	beq.n	8007a56 <ai_platform_api_get_network_report+0x3be>
 8007a38:	e7fe      	b.n	8007a38 <ai_platform_api_get_network_report+0x3a0>
 8007a3a:	4b64      	ldr	r3, [pc, #400]	; (8007bcc <ai_platform_api_get_network_report+0x534>)
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	d1fc      	bne.n	8007a40 <ai_platform_api_get_network_report+0x3a8>
 8007a46:	4b62      	ldr	r3, [pc, #392]	; (8007bd0 <ai_platform_api_get_network_report+0x538>)
 8007a48:	4a5e      	ldr	r2, [pc, #376]	; (8007bc4 <ai_platform_api_get_network_report+0x52c>)
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4b5e      	ldr	r3, [pc, #376]	; (8007bc8 <ai_platform_api_get_network_report+0x530>)
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d000      	beq.n	8007a56 <ai_platform_api_get_network_report+0x3be>
 8007a54:	e7fe      	b.n	8007a54 <ai_platform_api_get_network_report+0x3bc>
 8007a56:	f7ff fbc7 	bl	80071e8 <_ai_platform_release_crc>
 8007a5a:	4a56      	ldr	r2, [pc, #344]	; (8007bb4 <ai_platform_api_get_network_report+0x51c>)
 8007a5c:	2307      	movs	r3, #7
 8007a5e:	6163      	str	r3, [r4, #20]
 8007a60:	6813      	ldr	r3, [r2, #0]
 8007a62:	f023 0301 	bic.w	r3, r3, #1
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	f7ff fbbc 	bl	80071e4 <_ai_platform_acquire_crc>
 8007a6c:	4b52      	ldr	r3, [pc, #328]	; (8007bb8 <ai_platform_api_get_network_report+0x520>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a78:	d00d      	beq.n	8007a96 <ai_platform_api_get_network_report+0x3fe>
 8007a7a:	4b50      	ldr	r3, [pc, #320]	; (8007bbc <ai_platform_api_get_network_report+0x524>)
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	2a00      	cmp	r2, #0
 8007a84:	d1fc      	bne.n	8007a80 <ai_platform_api_get_network_report+0x3e8>
 8007a86:	4b4e      	ldr	r3, [pc, #312]	; (8007bc0 <ai_platform_api_get_network_report+0x528>)
 8007a88:	4a4e      	ldr	r2, [pc, #312]	; (8007bc4 <ai_platform_api_get_network_report+0x52c>)
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	4b4e      	ldr	r3, [pc, #312]	; (8007bc8 <ai_platform_api_get_network_report+0x530>)
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d00e      	beq.n	8007ab2 <ai_platform_api_get_network_report+0x41a>
 8007a94:	e7fe      	b.n	8007a94 <ai_platform_api_get_network_report+0x3fc>
 8007a96:	4b4d      	ldr	r3, [pc, #308]	; (8007bcc <ai_platform_api_get_network_report+0x534>)
 8007a98:	2201      	movs	r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	d1fc      	bne.n	8007a9c <ai_platform_api_get_network_report+0x404>
 8007aa2:	4b4b      	ldr	r3, [pc, #300]	; (8007bd0 <ai_platform_api_get_network_report+0x538>)
 8007aa4:	4a47      	ldr	r2, [pc, #284]	; (8007bc4 <ai_platform_api_get_network_report+0x52c>)
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	4b47      	ldr	r3, [pc, #284]	; (8007bc8 <ai_platform_api_get_network_report+0x530>)
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d000      	beq.n	8007ab2 <ai_platform_api_get_network_report+0x41a>
 8007ab0:	e7fe      	b.n	8007ab0 <ai_platform_api_get_network_report+0x418>
 8007ab2:	f7ff fb99 	bl	80071e8 <_ai_platform_release_crc>
 8007ab6:	4a3f      	ldr	r2, [pc, #252]	; (8007bb4 <ai_platform_api_get_network_report+0x51c>)
 8007ab8:	f240 1301 	movw	r3, #257	; 0x101
 8007abc:	6263      	str	r3, [r4, #36]	; 0x24
 8007abe:	6813      	ldr	r3, [r2, #0]
 8007ac0:	f023 0301 	bic.w	r3, r3, #1
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	f7ff fb8d 	bl	80071e4 <_ai_platform_acquire_crc>
 8007aca:	4b3b      	ldr	r3, [pc, #236]	; (8007bb8 <ai_platform_api_get_network_report+0x520>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad6:	d00d      	beq.n	8007af4 <ai_platform_api_get_network_report+0x45c>
 8007ad8:	4b38      	ldr	r3, [pc, #224]	; (8007bbc <ai_platform_api_get_network_report+0x524>)
 8007ada:	2201      	movs	r2, #1
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	2a00      	cmp	r2, #0
 8007ae2:	d1fc      	bne.n	8007ade <ai_platform_api_get_network_report+0x446>
 8007ae4:	4b36      	ldr	r3, [pc, #216]	; (8007bc0 <ai_platform_api_get_network_report+0x528>)
 8007ae6:	4a37      	ldr	r2, [pc, #220]	; (8007bc4 <ai_platform_api_get_network_report+0x52c>)
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	4b36      	ldr	r3, [pc, #216]	; (8007bc8 <ai_platform_api_get_network_report+0x530>)
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d00e      	beq.n	8007b10 <ai_platform_api_get_network_report+0x478>
 8007af2:	e7fe      	b.n	8007af2 <ai_platform_api_get_network_report+0x45a>
 8007af4:	4b35      	ldr	r3, [pc, #212]	; (8007bcc <ai_platform_api_get_network_report+0x534>)
 8007af6:	2201      	movs	r2, #1
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	2a00      	cmp	r2, #0
 8007afe:	d1fc      	bne.n	8007afa <ai_platform_api_get_network_report+0x462>
 8007b00:	4b33      	ldr	r3, [pc, #204]	; (8007bd0 <ai_platform_api_get_network_report+0x538>)
 8007b02:	4a30      	ldr	r2, [pc, #192]	; (8007bc4 <ai_platform_api_get_network_report+0x52c>)
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	4b2f      	ldr	r3, [pc, #188]	; (8007bc8 <ai_platform_api_get_network_report+0x530>)
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d000      	beq.n	8007b10 <ai_platform_api_get_network_report+0x478>
 8007b0e:	e7fe      	b.n	8007b0e <ai_platform_api_get_network_report+0x476>
 8007b10:	f7ff fb6a 	bl	80071e8 <_ai_platform_release_crc>
 8007b14:	f240 4301 	movw	r3, #1025	; 0x401
 8007b18:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b1a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007b1c:	4a2e      	ldr	r2, [pc, #184]	; (8007bd8 <ai_platform_api_get_network_report+0x540>)
 8007b1e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007b20:	0e18      	lsrs	r0, r3, #24
 8007b22:	f884 0020 	strb.w	r0, [r4, #32]
 8007b26:	0c18      	lsrs	r0, r3, #16
 8007b28:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
 8007b2c:	0a1b      	lsrs	r3, r3, #8
 8007b2e:	2000      	movs	r0, #0
 8007b30:	4291      	cmp	r1, r2
 8007b32:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8007b36:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 8007b3a:	d019      	beq.n	8007b70 <ai_platform_api_get_network_report+0x4d8>
 8007b3c:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8007b3e:	b386      	cbz	r6, 8007ba2 <ai_platform_api_get_network_report+0x50a>
 8007b40:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8007b42:	b373      	cbz	r3, 8007ba2 <ai_platform_api_get_network_report+0x50a>
 8007b44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007b46:	f104 0754 	add.w	r7, r4, #84	; 0x54
 8007b4a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8007b4c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007b50:	e887 0003 	stmia.w	r7, {r0, r1}
 8007b54:	6a2b      	ldr	r3, [r5, #32]
 8007b56:	b1db      	cbz	r3, 8007b90 <ai_platform_api_get_network_report+0x4f8>
 8007b58:	8bea      	ldrh	r2, [r5, #30]
 8007b5a:	b1ca      	cbz	r2, 8007b90 <ai_platform_api_get_network_report+0x4f8>
 8007b5c:	461d      	mov	r5, r3
 8007b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b60:	343c      	adds	r4, #60	; 0x3c
 8007b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007b68:	2601      	movs	r6, #1
 8007b6a:	e884 0003 	stmia.w	r4, {r0, r1}
 8007b6e:	e5c8      	b.n	8007702 <ai_platform_api_get_network_report+0x6a>
 8007b70:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8007b74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007b78:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8007b7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b80:	351c      	adds	r5, #28
 8007b82:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007b86:	3440      	adds	r4, #64	; 0x40
 8007b88:	e884 0003 	stmia.w	r4, {r0, r1}
 8007b8c:	2601      	movs	r6, #1
 8007b8e:	e5b8      	b.n	8007702 <ai_platform_api_get_network_report+0x6a>
 8007b90:	2500      	movs	r5, #0
 8007b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b94:	343c      	adds	r4, #60	; 0x3c
 8007b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007b9c:	e884 0003 	stmia.w	r4, {r0, r1}
 8007ba0:	deff      	udf	#255	; 0xff
 8007ba2:	2500      	movs	r5, #0
 8007ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ba6:	3454      	adds	r4, #84	; 0x54
 8007ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007baa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007bae:	e884 0003 	stmia.w	r4, {r0, r1}
 8007bb2:	deff      	udf	#255	; 0xff
 8007bb4:	e0002000 	.word	0xe0002000
 8007bb8:	e0042000 	.word	0xe0042000
 8007bbc:	58024c08 	.word	0x58024c08
 8007bc0:	58024c00 	.word	0x58024c00
 8007bc4:	f407a5c2 	.word	0xf407a5c2
 8007bc8:	b5e8b5cd 	.word	0xb5e8b5cd
 8007bcc:	40023008 	.word	0x40023008
 8007bd0:	40023000 	.word	0x40023000
 8007bd4:	0800f9f4 	.word	0x0800f9f4
 8007bd8:	a1facade 	.word	0xa1facade

08007bdc <ai_platform_network_create>:
 8007bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be0:	b082      	sub	sp, #8
 8007be2:	4607      	mov	r7, r0
 8007be4:	4616      	mov	r6, r2
 8007be6:	461d      	mov	r5, r3
 8007be8:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8007bec:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8007bf0:	f7ff faf8 	bl	80071e4 <_ai_platform_acquire_crc>
 8007bf4:	b178      	cbz	r0, 8007c16 <ai_platform_network_create+0x3a>
 8007bf6:	4b5a      	ldr	r3, [pc, #360]	; (8007d60 <ai_platform_network_create+0x184>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c02:	4602      	mov	r2, r0
 8007c04:	d00c      	beq.n	8007c20 <ai_platform_network_create+0x44>
 8007c06:	4b57      	ldr	r3, [pc, #348]	; (8007d64 <ai_platform_network_create+0x188>)
 8007c08:	2118      	movs	r1, #24
 8007c0a:	6019      	str	r1, [r3, #0]
 8007c0c:	6819      	ldr	r1, [r3, #0]
 8007c0e:	2918      	cmp	r1, #24
 8007c10:	d034      	beq.n	8007c7c <ai_platform_network_create+0xa0>
 8007c12:	f7ff fae9 	bl	80071e8 <_ai_platform_release_crc>
 8007c16:	f241 0033 	movw	r0, #4147	; 0x1033
 8007c1a:	b002      	add	sp, #8
 8007c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c20:	4b51      	ldr	r3, [pc, #324]	; (8007d68 <ai_platform_network_create+0x18c>)
 8007c22:	2101      	movs	r1, #1
 8007c24:	6019      	str	r1, [r3, #0]
 8007c26:	2114      	movs	r1, #20
 8007c28:	e001      	b.n	8007c2e <ai_platform_network_create+0x52>
 8007c2a:	3901      	subs	r1, #1
 8007c2c:	d002      	beq.n	8007c34 <ai_platform_network_create+0x58>
 8007c2e:	6818      	ldr	r0, [r3, #0]
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d1fa      	bne.n	8007c2a <ai_platform_network_create+0x4e>
 8007c34:	4b4c      	ldr	r3, [pc, #304]	; (8007d68 <ai_platform_network_create+0x18c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	b9f3      	cbnz	r3, 8007c78 <ai_platform_network_create+0x9c>
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	f7ff fad4 	bl	80071e8 <_ai_platform_release_crc>
 8007c40:	4a4a      	ldr	r2, [pc, #296]	; (8007d6c <ai_platform_network_create+0x190>)
 8007c42:	6813      	ldr	r3, [r2, #0]
 8007c44:	f023 0301 	bic.w	r3, r3, #1
 8007c48:	6013      	str	r3, [r2, #0]
 8007c4a:	f7ff facb 	bl	80071e4 <_ai_platform_acquire_crc>
 8007c4e:	4b44      	ldr	r3, [pc, #272]	; (8007d60 <ai_platform_network_create+0x184>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c5a:	d015      	beq.n	8007c88 <ai_platform_network_create+0xac>
 8007c5c:	4b41      	ldr	r3, [pc, #260]	; (8007d64 <ai_platform_network_create+0x188>)
 8007c5e:	2201      	movs	r2, #1
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	2a00      	cmp	r2, #0
 8007c66:	d1fc      	bne.n	8007c62 <ai_platform_network_create+0x86>
 8007c68:	4b41      	ldr	r3, [pc, #260]	; (8007d70 <ai_platform_network_create+0x194>)
 8007c6a:	4a42      	ldr	r2, [pc, #264]	; (8007d74 <ai_platform_network_create+0x198>)
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	4b41      	ldr	r3, [pc, #260]	; (8007d78 <ai_platform_network_create+0x19c>)
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d016      	beq.n	8007ca4 <ai_platform_network_create+0xc8>
 8007c76:	e7fe      	b.n	8007c76 <ai_platform_network_create+0x9a>
 8007c78:	4610      	mov	r0, r2
 8007c7a:	e7ca      	b.n	8007c12 <ai_platform_network_create+0x36>
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	6019      	str	r1, [r3, #0]
 8007c80:	6819      	ldr	r1, [r3, #0]
 8007c82:	2900      	cmp	r1, #0
 8007c84:	d1fc      	bne.n	8007c80 <ai_platform_network_create+0xa4>
 8007c86:	e7d8      	b.n	8007c3a <ai_platform_network_create+0x5e>
 8007c88:	4b37      	ldr	r3, [pc, #220]	; (8007d68 <ai_platform_network_create+0x18c>)
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	d1fc      	bne.n	8007c8e <ai_platform_network_create+0xb2>
 8007c94:	4b39      	ldr	r3, [pc, #228]	; (8007d7c <ai_platform_network_create+0x1a0>)
 8007c96:	4a37      	ldr	r2, [pc, #220]	; (8007d74 <ai_platform_network_create+0x198>)
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	4b36      	ldr	r3, [pc, #216]	; (8007d78 <ai_platform_network_create+0x19c>)
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d000      	beq.n	8007ca4 <ai_platform_network_create+0xc8>
 8007ca2:	e7fe      	b.n	8007ca2 <ai_platform_network_create+0xc6>
 8007ca4:	f7ff faa0 	bl	80071e8 <_ai_platform_release_crc>
 8007ca8:	b1af      	cbz	r7, 8007cd6 <ai_platform_network_create+0xfa>
 8007caa:	4b35      	ldr	r3, [pc, #212]	; (8007d80 <ai_platform_network_create+0x1a4>)
 8007cac:	6033      	str	r3, [r6, #0]
 8007cae:	603e      	str	r6, [r7, #0]
 8007cb0:	f000 fd06 	bl	80086c0 <core_init>
 8007cb4:	b990      	cbnz	r0, 8007cdc <ai_platform_network_create+0x100>
 8007cb6:	062d      	lsls	r5, r5, #24
 8007cb8:	0424      	lsls	r4, r4, #16
 8007cba:	2230      	movs	r2, #48	; 0x30
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	603b      	str	r3, [r7, #0]
 8007cc0:	2110      	movs	r1, #16
 8007cc2:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	432b      	orrs	r3, r5
 8007cca:	f362 0007 	bfi	r0, r2, #0, #8
 8007cce:	6473      	str	r3, [r6, #68]	; 0x44
 8007cd0:	f361 201f 	bfi	r0, r1, #8, #24
 8007cd4:	e7a1      	b.n	8007c1a <ai_platform_network_create+0x3e>
 8007cd6:	f241 0010 	movw	r0, #4112	; 0x1010
 8007cda:	e79e      	b.n	8007c1a <ai_platform_network_create+0x3e>
 8007cdc:	4a23      	ldr	r2, [pc, #140]	; (8007d6c <ai_platform_network_create+0x190>)
 8007cde:	6813      	ldr	r3, [r2, #0]
 8007ce0:	f023 0301 	bic.w	r3, r3, #1
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	f7ff fa7d 	bl	80071e4 <_ai_platform_acquire_crc>
 8007cea:	4b1d      	ldr	r3, [pc, #116]	; (8007d60 <ai_platform_network_create+0x184>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cf6:	d00d      	beq.n	8007d14 <ai_platform_network_create+0x138>
 8007cf8:	4b1a      	ldr	r3, [pc, #104]	; (8007d64 <ai_platform_network_create+0x188>)
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	2a00      	cmp	r2, #0
 8007d02:	d1fc      	bne.n	8007cfe <ai_platform_network_create+0x122>
 8007d04:	4b1a      	ldr	r3, [pc, #104]	; (8007d70 <ai_platform_network_create+0x194>)
 8007d06:	4a1b      	ldr	r2, [pc, #108]	; (8007d74 <ai_platform_network_create+0x198>)
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	4b1a      	ldr	r3, [pc, #104]	; (8007d78 <ai_platform_network_create+0x19c>)
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d00e      	beq.n	8007d30 <ai_platform_network_create+0x154>
 8007d12:	e7fe      	b.n	8007d12 <ai_platform_network_create+0x136>
 8007d14:	4b14      	ldr	r3, [pc, #80]	; (8007d68 <ai_platform_network_create+0x18c>)
 8007d16:	2201      	movs	r2, #1
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	2a00      	cmp	r2, #0
 8007d1e:	d1fc      	bne.n	8007d1a <ai_platform_network_create+0x13e>
 8007d20:	4b16      	ldr	r3, [pc, #88]	; (8007d7c <ai_platform_network_create+0x1a0>)
 8007d22:	4a14      	ldr	r2, [pc, #80]	; (8007d74 <ai_platform_network_create+0x198>)
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	4b13      	ldr	r3, [pc, #76]	; (8007d78 <ai_platform_network_create+0x19c>)
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d000      	beq.n	8007d30 <ai_platform_network_create+0x154>
 8007d2e:	e7fe      	b.n	8007d2e <ai_platform_network_create+0x152>
 8007d30:	062d      	lsls	r5, r5, #24
 8007d32:	0424      	lsls	r4, r4, #16
 8007d34:	f7ff fa58 	bl	80071e8 <_ai_platform_release_crc>
 8007d38:	ea45 0304 	orr.w	r3, r5, r4
 8007d3c:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8007d40:	d001      	beq.n	8007d46 <ai_platform_network_create+0x16a>
 8007d42:	2201      	movs	r2, #1
 8007d44:	e7ba      	b.n	8007cbc <ai_platform_network_create+0xe0>
 8007d46:	a802      	add	r0, sp, #8
 8007d48:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <ai_platform_network_create+0x1a8>)
 8007d4a:	f840 3d04 	str.w	r3, [r0, #-4]!
 8007d4e:	f002 fd5f 	bl	800a810 <ai_check_custom_types>
 8007d52:	b110      	cbz	r0, 8007d5a <ai_platform_network_create+0x17e>
 8007d54:	2100      	movs	r1, #0
 8007d56:	460a      	mov	r2, r1
 8007d58:	e7b3      	b.n	8007cc2 <ai_platform_network_create+0xe6>
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	e7ae      	b.n	8007cbc <ai_platform_network_create+0xe0>
 8007d5e:	bf00      	nop
 8007d60:	e0042000 	.word	0xe0042000
 8007d64:	58024c08 	.word	0x58024c08
 8007d68:	40023008 	.word	0x40023008
 8007d6c:	e0002000 	.word	0xe0002000
 8007d70:	58024c00 	.word	0x58024c00
 8007d74:	f407a5c2 	.word	0xf407a5c2
 8007d78:	b5e8b5cd 	.word	0xb5e8b5cd
 8007d7c:	40023000 	.word	0x40023000
 8007d80:	a1c00100 	.word	0xa1c00100
 8007d84:	84048403 	.word	0x84048403

08007d88 <ai_platform_network_destroy>:
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	b118      	cbz	r0, 8007d96 <ai_platform_network_destroy+0xe>
 8007d8e:	4b31      	ldr	r3, [pc, #196]	; (8007e54 <ai_platform_network_destroy+0xcc>)
 8007d90:	6802      	ldr	r2, [r0, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d02d      	beq.n	8007df2 <ai_platform_network_destroy+0x6a>
 8007d96:	4a30      	ldr	r2, [pc, #192]	; (8007e58 <ai_platform_network_destroy+0xd0>)
 8007d98:	6813      	ldr	r3, [r2, #0]
 8007d9a:	f023 0301 	bic.w	r3, r3, #1
 8007d9e:	6013      	str	r3, [r2, #0]
 8007da0:	f7ff fa20 	bl	80071e4 <_ai_platform_acquire_crc>
 8007da4:	4b2d      	ldr	r3, [pc, #180]	; (8007e5c <ai_platform_network_destroy+0xd4>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db0:	d00d      	beq.n	8007dce <ai_platform_network_destroy+0x46>
 8007db2:	4b2b      	ldr	r3, [pc, #172]	; (8007e60 <ai_platform_network_destroy+0xd8>)
 8007db4:	2201      	movs	r2, #1
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	2a00      	cmp	r2, #0
 8007dbc:	d1fc      	bne.n	8007db8 <ai_platform_network_destroy+0x30>
 8007dbe:	4b29      	ldr	r3, [pc, #164]	; (8007e64 <ai_platform_network_destroy+0xdc>)
 8007dc0:	4a29      	ldr	r2, [pc, #164]	; (8007e68 <ai_platform_network_destroy+0xe0>)
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	4b29      	ldr	r3, [pc, #164]	; (8007e6c <ai_platform_network_destroy+0xe4>)
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d00e      	beq.n	8007dea <ai_platform_network_destroy+0x62>
 8007dcc:	e7fe      	b.n	8007dcc <ai_platform_network_destroy+0x44>
 8007dce:	4b28      	ldr	r3, [pc, #160]	; (8007e70 <ai_platform_network_destroy+0xe8>)
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	2a00      	cmp	r2, #0
 8007dd8:	d1fc      	bne.n	8007dd4 <ai_platform_network_destroy+0x4c>
 8007dda:	4b26      	ldr	r3, [pc, #152]	; (8007e74 <ai_platform_network_destroy+0xec>)
 8007ddc:	4a22      	ldr	r2, [pc, #136]	; (8007e68 <ai_platform_network_destroy+0xe0>)
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	4b22      	ldr	r3, [pc, #136]	; (8007e6c <ai_platform_network_destroy+0xe4>)
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d000      	beq.n	8007dea <ai_platform_network_destroy+0x62>
 8007de8:	e7fe      	b.n	8007de8 <ai_platform_network_destroy+0x60>
 8007dea:	f7ff f9fd 	bl	80071e8 <_ai_platform_release_crc>
 8007dee:	4620      	mov	r0, r4
 8007df0:	bd10      	pop	{r4, pc}
 8007df2:	4a19      	ldr	r2, [pc, #100]	; (8007e58 <ai_platform_network_destroy+0xd0>)
 8007df4:	6813      	ldr	r3, [r2, #0]
 8007df6:	f023 0301 	bic.w	r3, r3, #1
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	f7ff f9f2 	bl	80071e4 <_ai_platform_acquire_crc>
 8007e00:	4b16      	ldr	r3, [pc, #88]	; (8007e5c <ai_platform_network_destroy+0xd4>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e0c:	d00d      	beq.n	8007e2a <ai_platform_network_destroy+0xa2>
 8007e0e:	4b14      	ldr	r3, [pc, #80]	; (8007e60 <ai_platform_network_destroy+0xd8>)
 8007e10:	2201      	movs	r2, #1
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	2a00      	cmp	r2, #0
 8007e18:	d1fc      	bne.n	8007e14 <ai_platform_network_destroy+0x8c>
 8007e1a:	4b12      	ldr	r3, [pc, #72]	; (8007e64 <ai_platform_network_destroy+0xdc>)
 8007e1c:	4a12      	ldr	r2, [pc, #72]	; (8007e68 <ai_platform_network_destroy+0xe0>)
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	4b12      	ldr	r3, [pc, #72]	; (8007e6c <ai_platform_network_destroy+0xe4>)
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d00e      	beq.n	8007e46 <ai_platform_network_destroy+0xbe>
 8007e28:	e7fe      	b.n	8007e28 <ai_platform_network_destroy+0xa0>
 8007e2a:	4b11      	ldr	r3, [pc, #68]	; (8007e70 <ai_platform_network_destroy+0xe8>)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	2a00      	cmp	r2, #0
 8007e34:	d1fc      	bne.n	8007e30 <ai_platform_network_destroy+0xa8>
 8007e36:	4b0f      	ldr	r3, [pc, #60]	; (8007e74 <ai_platform_network_destroy+0xec>)
 8007e38:	4a0b      	ldr	r2, [pc, #44]	; (8007e68 <ai_platform_network_destroy+0xe0>)
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	4b0b      	ldr	r3, [pc, #44]	; (8007e6c <ai_platform_network_destroy+0xe4>)
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d000      	beq.n	8007e46 <ai_platform_network_destroy+0xbe>
 8007e44:	e7fe      	b.n	8007e44 <ai_platform_network_destroy+0xbc>
 8007e46:	f7ff f9cf 	bl	80071e8 <_ai_platform_release_crc>
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f002 fd84 	bl	800a958 <ai_layers_destroy_all>
 8007e50:	2400      	movs	r4, #0
 8007e52:	e7cc      	b.n	8007dee <ai_platform_network_destroy+0x66>
 8007e54:	a1c00100 	.word	0xa1c00100
 8007e58:	e0002000 	.word	0xe0002000
 8007e5c:	e0042000 	.word	0xe0042000
 8007e60:	58024c08 	.word	0x58024c08
 8007e64:	58024c00 	.word	0x58024c00
 8007e68:	f407a5c2 	.word	0xf407a5c2
 8007e6c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007e70:	40023008 	.word	0x40023008
 8007e74:	40023000 	.word	0x40023000

08007e78 <ai_platform_network_init>:
 8007e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d04d      	beq.n	8007f1c <ai_platform_network_init+0xa4>
 8007e80:	4b7c      	ldr	r3, [pc, #496]	; (8008074 <ai_platform_network_init+0x1fc>)
 8007e82:	6802      	ldr	r2, [r0, #0]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	4604      	mov	r4, r0
 8007e88:	d148      	bne.n	8007f1c <ai_platform_network_init+0xa4>
 8007e8a:	4a7b      	ldr	r2, [pc, #492]	; (8008078 <ai_platform_network_init+0x200>)
 8007e8c:	6813      	ldr	r3, [r2, #0]
 8007e8e:	f023 0301 	bic.w	r3, r3, #1
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	460d      	mov	r5, r1
 8007e96:	f7ff f9a5 	bl	80071e4 <_ai_platform_acquire_crc>
 8007e9a:	4b78      	ldr	r3, [pc, #480]	; (800807c <ai_platform_network_init+0x204>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ea6:	d00d      	beq.n	8007ec4 <ai_platform_network_init+0x4c>
 8007ea8:	4b75      	ldr	r3, [pc, #468]	; (8008080 <ai_platform_network_init+0x208>)
 8007eaa:	2201      	movs	r2, #1
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	2a00      	cmp	r2, #0
 8007eb2:	d1fc      	bne.n	8007eae <ai_platform_network_init+0x36>
 8007eb4:	4b73      	ldr	r3, [pc, #460]	; (8008084 <ai_platform_network_init+0x20c>)
 8007eb6:	4a74      	ldr	r2, [pc, #464]	; (8008088 <ai_platform_network_init+0x210>)
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	4b73      	ldr	r3, [pc, #460]	; (800808c <ai_platform_network_init+0x214>)
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d00d      	beq.n	8007ede <ai_platform_network_init+0x66>
 8007ec2:	e7fe      	b.n	8007ec2 <ai_platform_network_init+0x4a>
 8007ec4:	4b72      	ldr	r3, [pc, #456]	; (8008090 <ai_platform_network_init+0x218>)
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	2a00      	cmp	r2, #0
 8007ece:	d1fc      	bne.n	8007eca <ai_platform_network_init+0x52>
 8007ed0:	4b70      	ldr	r3, [pc, #448]	; (8008094 <ai_platform_network_init+0x21c>)
 8007ed2:	4a6d      	ldr	r2, [pc, #436]	; (8008088 <ai_platform_network_init+0x210>)
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	4b6c      	ldr	r3, [pc, #432]	; (800808c <ai_platform_network_init+0x214>)
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d11d      	bne.n	8007f1a <ai_platform_network_init+0xa2>
 8007ede:	f7ff f983 	bl	80071e8 <_ai_platform_release_crc>
 8007ee2:	2d00      	cmp	r5, #0
 8007ee4:	d076      	beq.n	8007fd4 <ai_platform_network_init+0x15c>
 8007ee6:	4b6c      	ldr	r3, [pc, #432]	; (8008098 <ai_platform_network_init+0x220>)
 8007ee8:	682a      	ldr	r2, [r5, #0]
 8007eea:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d030      	beq.n	8007f54 <ai_platform_network_init+0xdc>
 8007ef2:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8007ef4:	46a9      	mov	r9, r5
 8007ef6:	f105 0118 	add.w	r1, r5, #24
 8007efa:	2e00      	cmp	r6, #0
 8007efc:	f000 8095 	beq.w	800802a <ai_platform_network_init+0x1b2>
 8007f00:	f1bc 0f00 	cmp.w	ip, #0
 8007f04:	f000 80a4 	beq.w	8008050 <ai_platform_network_init+0x1d8>
 8007f08:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 8007f0c:	f1b8 0f01 	cmp.w	r8, #1
 8007f10:	d16a      	bne.n	8007fe8 <ai_platform_network_init+0x170>
 8007f12:	2700      	movs	r7, #0
 8007f14:	468c      	mov	ip, r1
 8007f16:	83a7      	strh	r7, [r4, #28]
 8007f18:	e028      	b.n	8007f6c <ai_platform_network_init+0xf4>
 8007f1a:	e7fe      	b.n	8007f1a <ai_platform_network_init+0xa2>
 8007f1c:	4a56      	ldr	r2, [pc, #344]	; (8008078 <ai_platform_network_init+0x200>)
 8007f1e:	6813      	ldr	r3, [r2, #0]
 8007f20:	f023 0301 	bic.w	r3, r3, #1
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	f7ff f95d 	bl	80071e4 <_ai_platform_acquire_crc>
 8007f2a:	4b54      	ldr	r3, [pc, #336]	; (800807c <ai_platform_network_init+0x204>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f36:	d067      	beq.n	8008008 <ai_platform_network_init+0x190>
 8007f38:	4b51      	ldr	r3, [pc, #324]	; (8008080 <ai_platform_network_init+0x208>)
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	2a00      	cmp	r2, #0
 8007f42:	d1fc      	bne.n	8007f3e <ai_platform_network_init+0xc6>
 8007f44:	4b4f      	ldr	r3, [pc, #316]	; (8008084 <ai_platform_network_init+0x20c>)
 8007f46:	4a50      	ldr	r2, [pc, #320]	; (8008088 <ai_platform_network_init+0x210>)
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	4b4f      	ldr	r3, [pc, #316]	; (800808c <ai_platform_network_init+0x214>)
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d067      	beq.n	8008022 <ai_platform_network_init+0x1aa>
 8007f52:	e7fe      	b.n	8007f52 <ai_platform_network_init+0xda>
 8007f54:	8be1      	ldrh	r1, [r4, #30]
 8007f56:	88eb      	ldrh	r3, [r5, #6]
 8007f58:	89af      	ldrh	r7, [r5, #12]
 8007f5a:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 8007f5e:	88aa      	ldrh	r2, [r5, #4]
 8007f60:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8007f64:	428b      	cmp	r3, r1
 8007f66:	d13f      	bne.n	8007fe8 <ai_platform_network_init+0x170>
 8007f68:	83a2      	strh	r2, [r4, #28]
 8007f6a:	b19b      	cbz	r3, 8007f94 <ai_platform_network_init+0x11c>
 8007f6c:	f04f 0e00 	mov.w	lr, #0
 8007f70:	46f2      	mov	sl, lr
 8007f72:	eb09 060e 	add.w	r6, r9, lr
 8007f76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007f78:	6a25      	ldr	r5, [r4, #32]
 8007f7a:	4475      	add	r5, lr
 8007f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f7e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007f82:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f86:	8be3      	ldrh	r3, [r4, #30]
 8007f88:	f10a 0a01 	add.w	sl, sl, #1
 8007f8c:	459a      	cmp	sl, r3
 8007f8e:	f10e 0e18 	add.w	lr, lr, #24
 8007f92:	d3ee      	bcc.n	8007f72 <ai_platform_network_init+0xfa>
 8007f94:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007f96:	4598      	cmp	r8, r3
 8007f98:	d12e      	bne.n	8007ff8 <ai_platform_network_init+0x180>
 8007f9a:	84a7      	strh	r7, [r4, #36]	; 0x24
 8007f9c:	f1b8 0f00 	cmp.w	r8, #0
 8007fa0:	d012      	beq.n	8007fc8 <ai_platform_network_init+0x150>
 8007fa2:	2700      	movs	r7, #0
 8007fa4:	46be      	mov	lr, r7
 8007fa6:	eb0c 0607 	add.w	r6, ip, r7
 8007faa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007fac:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007fae:	443d      	add	r5, r7
 8007fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007fb2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007fb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8007fba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007fbc:	f10e 0e01 	add.w	lr, lr, #1
 8007fc0:	459e      	cmp	lr, r3
 8007fc2:	f107 0718 	add.w	r7, r7, #24
 8007fc6:	d3ee      	bcc.n	8007fa6 <ai_platform_network_init+0x12e>
 8007fc8:	2303      	movs	r3, #3
 8007fca:	60e3      	str	r3, [r4, #12]
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f002 fc49 	bl	800a864 <ai_layers_init_all>
 8007fd2:	e006      	b.n	8007fe2 <ai_platform_network_init+0x16a>
 8007fd4:	f104 0010 	add.w	r0, r4, #16
 8007fd8:	2211      	movs	r2, #17
 8007fda:	2110      	movs	r1, #16
 8007fdc:	462c      	mov	r4, r5
 8007fde:	f000 fb77 	bl	80086d0 <core_set_error>
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe8:	f104 0010 	add.w	r0, r4, #16
 8007fec:	2212      	movs	r2, #18
 8007fee:	2116      	movs	r1, #22
 8007ff0:	f000 fb6e 	bl	80086d0 <core_set_error>
 8007ff4:	2400      	movs	r4, #0
 8007ff6:	e7f4      	b.n	8007fe2 <ai_platform_network_init+0x16a>
 8007ff8:	f104 0010 	add.w	r0, r4, #16
 8007ffc:	2213      	movs	r2, #19
 8007ffe:	2116      	movs	r1, #22
 8008000:	f000 fb66 	bl	80086d0 <core_set_error>
 8008004:	2400      	movs	r4, #0
 8008006:	e7ec      	b.n	8007fe2 <ai_platform_network_init+0x16a>
 8008008:	4b21      	ldr	r3, [pc, #132]	; (8008090 <ai_platform_network_init+0x218>)
 800800a:	2201      	movs	r2, #1
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	2a00      	cmp	r2, #0
 8008012:	d1fc      	bne.n	800800e <ai_platform_network_init+0x196>
 8008014:	4b1f      	ldr	r3, [pc, #124]	; (8008094 <ai_platform_network_init+0x21c>)
 8008016:	4a1c      	ldr	r2, [pc, #112]	; (8008088 <ai_platform_network_init+0x210>)
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	4b1b      	ldr	r3, [pc, #108]	; (800808c <ai_platform_network_init+0x214>)
 800801e:	429a      	cmp	r2, r3
 8008020:	d115      	bne.n	800804e <ai_platform_network_init+0x1d6>
 8008022:	f7ff f8e1 	bl	80071e8 <_ai_platform_release_crc>
 8008026:	2400      	movs	r4, #0
 8008028:	e7db      	b.n	8007fe2 <ai_platform_network_init+0x16a>
 800802a:	8c28      	ldrh	r0, [r5, #32]
 800802c:	8bea      	ldrh	r2, [r5, #30]
 800802e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008030:	fb02 f200 	mul.w	r2, r2, r0
 8008034:	fb03 f302 	mul.w	r3, r3, r2
 8008038:	2b00      	cmp	r3, #0
 800803a:	f43f af61 	beq.w	8007f00 <ai_platform_network_init+0x88>
 800803e:	f104 0010 	add.w	r0, r4, #16
 8008042:	2213      	movs	r2, #19
 8008044:	2110      	movs	r1, #16
 8008046:	4634      	mov	r4, r6
 8008048:	f000 fb42 	bl	80086d0 <core_set_error>
 800804c:	e7c9      	b.n	8007fe2 <ai_platform_network_init+0x16a>
 800804e:	e7fe      	b.n	800804e <ai_platform_network_init+0x1d6>
 8008050:	8928      	ldrh	r0, [r5, #8]
 8008052:	88ea      	ldrh	r2, [r5, #6]
 8008054:	68eb      	ldr	r3, [r5, #12]
 8008056:	fb02 f200 	mul.w	r2, r2, r0
 800805a:	fb03 f302 	mul.w	r3, r3, r2
 800805e:	2b00      	cmp	r3, #0
 8008060:	f43f af52 	beq.w	8007f08 <ai_platform_network_init+0x90>
 8008064:	f104 0010 	add.w	r0, r4, #16
 8008068:	2212      	movs	r2, #18
 800806a:	2110      	movs	r1, #16
 800806c:	4664      	mov	r4, ip
 800806e:	f000 fb2f 	bl	80086d0 <core_set_error>
 8008072:	e7b6      	b.n	8007fe2 <ai_platform_network_init+0x16a>
 8008074:	a1c00100 	.word	0xa1c00100
 8008078:	e0002000 	.word	0xe0002000
 800807c:	e0042000 	.word	0xe0042000
 8008080:	58024c08 	.word	0x58024c08
 8008084:	58024c00 	.word	0x58024c00
 8008088:	f407a5c2 	.word	0xf407a5c2
 800808c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008090:	40023008 	.word	0x40023008
 8008094:	40023000 	.word	0x40023000
 8008098:	a1facade 	.word	0xa1facade

0800809c <ai_platform_network_post_init>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	b120      	cbz	r0, 80080aa <ai_platform_network_post_init+0xe>
 80080a0:	4b3f      	ldr	r3, [pc, #252]	; (80081a0 <ai_platform_network_post_init+0x104>)
 80080a2:	6802      	ldr	r2, [r0, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	4604      	mov	r4, r0
 80080a8:	d02d      	beq.n	8008106 <ai_platform_network_post_init+0x6a>
 80080aa:	4a3e      	ldr	r2, [pc, #248]	; (80081a4 <ai_platform_network_post_init+0x108>)
 80080ac:	6813      	ldr	r3, [r2, #0]
 80080ae:	f023 0301 	bic.w	r3, r3, #1
 80080b2:	6013      	str	r3, [r2, #0]
 80080b4:	f7ff f896 	bl	80071e4 <_ai_platform_acquire_crc>
 80080b8:	4b3b      	ldr	r3, [pc, #236]	; (80081a8 <ai_platform_network_post_init+0x10c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080c4:	d00d      	beq.n	80080e2 <ai_platform_network_post_init+0x46>
 80080c6:	4b39      	ldr	r3, [pc, #228]	; (80081ac <ai_platform_network_post_init+0x110>)
 80080c8:	2201      	movs	r2, #1
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	2a00      	cmp	r2, #0
 80080d0:	d1fc      	bne.n	80080cc <ai_platform_network_post_init+0x30>
 80080d2:	4b37      	ldr	r3, [pc, #220]	; (80081b0 <ai_platform_network_post_init+0x114>)
 80080d4:	4a37      	ldr	r2, [pc, #220]	; (80081b4 <ai_platform_network_post_init+0x118>)
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	4b37      	ldr	r3, [pc, #220]	; (80081b8 <ai_platform_network_post_init+0x11c>)
 80080dc:	429a      	cmp	r2, r3
 80080de:	d00d      	beq.n	80080fc <ai_platform_network_post_init+0x60>
 80080e0:	e7fe      	b.n	80080e0 <ai_platform_network_post_init+0x44>
 80080e2:	4b36      	ldr	r3, [pc, #216]	; (80081bc <ai_platform_network_post_init+0x120>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	2a00      	cmp	r2, #0
 80080ec:	d1fc      	bne.n	80080e8 <ai_platform_network_post_init+0x4c>
 80080ee:	4b34      	ldr	r3, [pc, #208]	; (80081c0 <ai_platform_network_post_init+0x124>)
 80080f0:	4a30      	ldr	r2, [pc, #192]	; (80081b4 <ai_platform_network_post_init+0x118>)
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	4b30      	ldr	r3, [pc, #192]	; (80081b8 <ai_platform_network_post_init+0x11c>)
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d103      	bne.n	8008104 <ai_platform_network_post_init+0x68>
 80080fc:	f7ff f874 	bl	80071e8 <_ai_platform_release_crc>
 8008100:	2000      	movs	r0, #0
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	e7fe      	b.n	8008104 <ai_platform_network_post_init+0x68>
 8008106:	4a27      	ldr	r2, [pc, #156]	; (80081a4 <ai_platform_network_post_init+0x108>)
 8008108:	6813      	ldr	r3, [r2, #0]
 800810a:	f023 0301 	bic.w	r3, r3, #1
 800810e:	6013      	str	r3, [r2, #0]
 8008110:	f7ff f868 	bl	80071e4 <_ai_platform_acquire_crc>
 8008114:	4b24      	ldr	r3, [pc, #144]	; (80081a8 <ai_platform_network_post_init+0x10c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800811c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008120:	d00d      	beq.n	800813e <ai_platform_network_post_init+0xa2>
 8008122:	4b22      	ldr	r3, [pc, #136]	; (80081ac <ai_platform_network_post_init+0x110>)
 8008124:	2201      	movs	r2, #1
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	2a00      	cmp	r2, #0
 800812c:	d1fc      	bne.n	8008128 <ai_platform_network_post_init+0x8c>
 800812e:	4b20      	ldr	r3, [pc, #128]	; (80081b0 <ai_platform_network_post_init+0x114>)
 8008130:	4a20      	ldr	r2, [pc, #128]	; (80081b4 <ai_platform_network_post_init+0x118>)
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	4b20      	ldr	r3, [pc, #128]	; (80081b8 <ai_platform_network_post_init+0x11c>)
 8008138:	429a      	cmp	r2, r3
 800813a:	d00e      	beq.n	800815a <ai_platform_network_post_init+0xbe>
 800813c:	e7fe      	b.n	800813c <ai_platform_network_post_init+0xa0>
 800813e:	4b1f      	ldr	r3, [pc, #124]	; (80081bc <ai_platform_network_post_init+0x120>)
 8008140:	2201      	movs	r2, #1
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	2a00      	cmp	r2, #0
 8008148:	d1fc      	bne.n	8008144 <ai_platform_network_post_init+0xa8>
 800814a:	4b1d      	ldr	r3, [pc, #116]	; (80081c0 <ai_platform_network_post_init+0x124>)
 800814c:	4a19      	ldr	r2, [pc, #100]	; (80081b4 <ai_platform_network_post_init+0x118>)
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	4b19      	ldr	r3, [pc, #100]	; (80081b8 <ai_platform_network_post_init+0x11c>)
 8008154:	429a      	cmp	r2, r3
 8008156:	d000      	beq.n	800815a <ai_platform_network_post_init+0xbe>
 8008158:	e7fe      	b.n	8008158 <ai_platform_network_post_init+0xbc>
 800815a:	f7ff f845 	bl	80071e8 <_ai_platform_release_crc>
 800815e:	68e3      	ldr	r3, [r4, #12]
 8008160:	f013 0502 	ands.w	r5, r3, #2
 8008164:	d011      	beq.n	800818a <ai_platform_network_post_init+0xee>
 8008166:	4620      	mov	r0, r4
 8008168:	f002 fb90 	bl	800a88c <ai_layers_post_init_all>
 800816c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800816e:	b1a3      	cbz	r3, 800819a <ai_platform_network_post_init+0xfe>
 8008170:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8008172:	b195      	cbz	r5, 800819a <ai_platform_network_post_init+0xfe>
 8008174:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008176:	4629      	mov	r1, r5
 8008178:	2000      	movs	r0, #0
 800817a:	4798      	blx	r3
 800817c:	692b      	ldr	r3, [r5, #16]
 800817e:	42ab      	cmp	r3, r5
 8008180:	d00b      	beq.n	800819a <ai_platform_network_post_init+0xfe>
 8008182:	461d      	mov	r5, r3
 8008184:	b14b      	cbz	r3, 800819a <ai_platform_network_post_init+0xfe>
 8008186:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008188:	e7f4      	b.n	8008174 <ai_platform_network_post_init+0xd8>
 800818a:	f104 0010 	add.w	r0, r4, #16
 800818e:	2210      	movs	r2, #16
 8008190:	2111      	movs	r1, #17
 8008192:	f000 fa9d 	bl	80086d0 <core_set_error>
 8008196:	4628      	mov	r0, r5
 8008198:	bd38      	pop	{r3, r4, r5, pc}
 800819a:	2001      	movs	r0, #1
 800819c:	bd38      	pop	{r3, r4, r5, pc}
 800819e:	bf00      	nop
 80081a0:	a1c00100 	.word	0xa1c00100
 80081a4:	e0002000 	.word	0xe0002000
 80081a8:	e0042000 	.word	0xe0042000
 80081ac:	58024c08 	.word	0x58024c08
 80081b0:	58024c00 	.word	0x58024c00
 80081b4:	f407a5c2 	.word	0xf407a5c2
 80081b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80081bc:	40023008 	.word	0x40023008
 80081c0:	40023000 	.word	0x40023000

080081c4 <ai_platform_network_process>:
 80081c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c8:	b085      	sub	sp, #20
 80081ca:	460d      	mov	r5, r1
 80081cc:	9202      	str	r2, [sp, #8]
 80081ce:	4604      	mov	r4, r0
 80081d0:	b120      	cbz	r0, 80081dc <ai_platform_network_process+0x18>
 80081d2:	4b7b      	ldr	r3, [pc, #492]	; (80083c0 <ai_platform_network_process+0x1fc>)
 80081d4:	6802      	ldr	r2, [r0, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	bf18      	it	ne
 80081da:	2400      	movne	r4, #0
 80081dc:	4a79      	ldr	r2, [pc, #484]	; (80083c4 <ai_platform_network_process+0x200>)
 80081de:	6813      	ldr	r3, [r2, #0]
 80081e0:	f023 0301 	bic.w	r3, r3, #1
 80081e4:	6013      	str	r3, [r2, #0]
 80081e6:	f7fe fffd 	bl	80071e4 <_ai_platform_acquire_crc>
 80081ea:	4b77      	ldr	r3, [pc, #476]	; (80083c8 <ai_platform_network_process+0x204>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081f6:	d00d      	beq.n	8008214 <ai_platform_network_process+0x50>
 80081f8:	4b74      	ldr	r3, [pc, #464]	; (80083cc <ai_platform_network_process+0x208>)
 80081fa:	2201      	movs	r2, #1
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	2a00      	cmp	r2, #0
 8008202:	d1fc      	bne.n	80081fe <ai_platform_network_process+0x3a>
 8008204:	4b72      	ldr	r3, [pc, #456]	; (80083d0 <ai_platform_network_process+0x20c>)
 8008206:	4a73      	ldr	r2, [pc, #460]	; (80083d4 <ai_platform_network_process+0x210>)
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	4b72      	ldr	r3, [pc, #456]	; (80083d8 <ai_platform_network_process+0x214>)
 800820e:	429a      	cmp	r2, r3
 8008210:	d00e      	beq.n	8008230 <ai_platform_network_process+0x6c>
 8008212:	e7fe      	b.n	8008212 <ai_platform_network_process+0x4e>
 8008214:	4b71      	ldr	r3, [pc, #452]	; (80083dc <ai_platform_network_process+0x218>)
 8008216:	2201      	movs	r2, #1
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	2a00      	cmp	r2, #0
 800821e:	d1fc      	bne.n	800821a <ai_platform_network_process+0x56>
 8008220:	4b6f      	ldr	r3, [pc, #444]	; (80083e0 <ai_platform_network_process+0x21c>)
 8008222:	4a6c      	ldr	r2, [pc, #432]	; (80083d4 <ai_platform_network_process+0x210>)
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	4b6b      	ldr	r3, [pc, #428]	; (80083d8 <ai_platform_network_process+0x214>)
 800822a:	429a      	cmp	r2, r3
 800822c:	d000      	beq.n	8008230 <ai_platform_network_process+0x6c>
 800822e:	e7fe      	b.n	800822e <ai_platform_network_process+0x6a>
 8008230:	f7fe ffda 	bl	80071e8 <_ai_platform_release_crc>
 8008234:	2c00      	cmp	r4, #0
 8008236:	f000 808e 	beq.w	8008356 <ai_platform_network_process+0x192>
 800823a:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800823c:	2f00      	cmp	r7, #0
 800823e:	f040 823c 	bne.w	80086ba <ai_platform_network_process+0x4f6>
 8008242:	68e3      	ldr	r3, [r4, #12]
 8008244:	f003 0303 	and.w	r3, r3, #3
 8008248:	f04f 0b00 	mov.w	fp, #0
 800824c:	2b03      	cmp	r3, #3
 800824e:	f8c4 b014 	str.w	fp, [r4, #20]
 8008252:	f040 822b 	bne.w	80086ac <ai_platform_network_process+0x4e8>
 8008256:	2d00      	cmp	r5, #0
 8008258:	f000 80a8 	beq.w	80083ac <ai_platform_network_process+0x1e8>
 800825c:	2f00      	cmp	r7, #0
 800825e:	f000 80a5 	beq.w	80083ac <ai_platform_network_process+0x1e8>
 8008262:	883b      	ldrh	r3, [r7, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 80a1 	beq.w	80083ac <ai_platform_network_process+0x1e8>
 800826a:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 800826e:	9401      	str	r4, [sp, #4]
 8008270:	46d8      	mov	r8, fp
 8008272:	4598      	cmp	r8, r3
 8008274:	f080 80b6 	bcs.w	80083e4 <ai_platform_network_process+0x220>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 80b2 	beq.w	80083e4 <ai_platform_network_process+0x220>
 8008280:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8008284:	2e00      	cmp	r6, #0
 8008286:	f000 80ad 	beq.w	80083e4 <ai_platform_network_process+0x220>
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	9303      	str	r3, [sp, #12]
 8008290:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8008294:	eb13 0a04 	adds.w	sl, r3, r4
 8008298:	f000 8087 	beq.w	80083aa <ai_platform_network_process+0x1e6>
 800829c:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 80082a0:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 80082a4:	69b0      	ldr	r0, [r6, #24]
 80082a6:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80082aa:	6841      	ldr	r1, [r0, #4]
 80082ac:	fb0b f30e 	mul.w	r3, fp, lr
 80082b0:	fb0c f303 	mul.w	r3, ip, r3
 80082b4:	4299      	cmp	r1, r3
 80082b6:	d36e      	bcc.n	8008396 <ai_platform_network_process+0x1d2>
 80082b8:	68f3      	ldr	r3, [r6, #12]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	455a      	cmp	r2, fp
 80082be:	d16a      	bne.n	8008396 <ai_platform_network_process+0x1d2>
 80082c0:	689a      	ldr	r2, [r3, #8]
 80082c2:	4572      	cmp	r2, lr
 80082c4:	d167      	bne.n	8008396 <ai_platform_network_process+0x1d2>
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	459c      	cmp	ip, r3
 80082ca:	d164      	bne.n	8008396 <ai_platform_network_process+0x1d2>
 80082cc:	6800      	ldr	r0, [r0, #0]
 80082ce:	f002 fbb3 	bl	800aa38 <ai_array_get_byte_size>
 80082d2:	68f2      	ldr	r2, [r6, #12]
 80082d4:	6973      	ldr	r3, [r6, #20]
 80082d6:	68d2      	ldr	r2, [r2, #12]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	fb03 f302 	mul.w	r3, r3, r2
 80082de:	4298      	cmp	r0, r3
 80082e0:	d359      	bcc.n	8008396 <ai_platform_network_process+0x1d2>
 80082e2:	69b3      	ldr	r3, [r6, #24]
 80082e4:	6818      	ldr	r0, [r3, #0]
 80082e6:	f002 fb4f 	bl	800a988 <ai_array_to_buffer_fmt>
 80082ea:	682b      	ldr	r3, [r5, #0]
 80082ec:	4043      	eors	r3, r0
 80082ee:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80082f2:	d146      	bne.n	8008382 <ai_platform_network_process+0x1be>
 80082f4:	692b      	ldr	r3, [r5, #16]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d03a      	beq.n	8008370 <ai_platform_network_process+0x1ac>
 80082fa:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 80082fe:	f1bb 0f00 	cmp.w	fp, #0
 8008302:	d02d      	beq.n	8008360 <ai_platform_network_process+0x19c>
 8008304:	68f2      	ldr	r2, [r6, #12]
 8008306:	6973      	ldr	r3, [r6, #20]
 8008308:	68d1      	ldr	r1, [r2, #12]
 800830a:	68da      	ldr	r2, [r3, #12]
 800830c:	fb02 f201 	mul.w	r2, r2, r1
 8008310:	f8ca 2008 	str.w	r2, [sl, #8]
 8008314:	88ab      	ldrh	r3, [r5, #4]
 8008316:	fb02 f203 	mul.w	r2, r2, r3
 800831a:	f8ca 200c 	str.w	r2, [sl, #12]
 800831e:	6929      	ldr	r1, [r5, #16]
 8008320:	f8ca 1004 	str.w	r1, [sl, #4]
 8008324:	692b      	ldr	r3, [r5, #16]
 8008326:	4413      	add	r3, r2
 8008328:	9a03      	ldr	r2, [sp, #12]
 800832a:	5113      	str	r3, [r2, r4]
 800832c:	69b0      	ldr	r0, [r6, #24]
 800832e:	6803      	ldr	r3, [r0, #0]
 8008330:	45d9      	cmp	r9, fp
 8008332:	bf38      	it	cc
 8008334:	46d9      	movcc	r9, fp
 8008336:	009a      	lsls	r2, r3, #2
 8008338:	d408      	bmi.n	800834c <ai_platform_network_process+0x188>
 800833a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800833e:	1a9b      	subs	r3, r3, r2
 8008340:	4419      	add	r1, r3
 8008342:	6081      	str	r1, [r0, #8]
 8008344:	69b3      	ldr	r3, [r6, #24]
 8008346:	f8da 2004 	ldr.w	r2, [sl, #4]
 800834a:	60da      	str	r2, [r3, #12]
 800834c:	883b      	ldrh	r3, [r7, #0]
 800834e:	f108 0801 	add.w	r8, r8, #1
 8008352:	3518      	adds	r5, #24
 8008354:	e78d      	b.n	8008272 <ai_platform_network_process+0xae>
 8008356:	46a3      	mov	fp, r4
 8008358:	4658      	mov	r0, fp
 800835a:	b005      	add	sp, #20
 800835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008360:	9c01      	ldr	r4, [sp, #4]
 8008362:	2221      	movs	r2, #33	; 0x21
 8008364:	f104 0010 	add.w	r0, r4, #16
 8008368:	2112      	movs	r1, #18
 800836a:	f000 f9b1 	bl	80086d0 <core_set_error>
 800836e:	e7f3      	b.n	8008358 <ai_platform_network_process+0x194>
 8008370:	9c01      	ldr	r4, [sp, #4]
 8008372:	2217      	movs	r2, #23
 8008374:	f104 0010 	add.w	r0, r4, #16
 8008378:	2112      	movs	r1, #18
 800837a:	469b      	mov	fp, r3
 800837c:	f000 f9a8 	bl	80086d0 <core_set_error>
 8008380:	e7ea      	b.n	8008358 <ai_platform_network_process+0x194>
 8008382:	9c01      	ldr	r4, [sp, #4]
 8008384:	2219      	movs	r2, #25
 8008386:	f104 0010 	add.w	r0, r4, #16
 800838a:	2112      	movs	r1, #18
 800838c:	f000 f9a0 	bl	80086d0 <core_set_error>
 8008390:	f04f 0b00 	mov.w	fp, #0
 8008394:	e7e0      	b.n	8008358 <ai_platform_network_process+0x194>
 8008396:	9c01      	ldr	r4, [sp, #4]
 8008398:	2218      	movs	r2, #24
 800839a:	f104 0010 	add.w	r0, r4, #16
 800839e:	2112      	movs	r1, #18
 80083a0:	f000 f996 	bl	80086d0 <core_set_error>
 80083a4:	f04f 0b00 	mov.w	fp, #0
 80083a8:	e7d6      	b.n	8008358 <ai_platform_network_process+0x194>
 80083aa:	9c01      	ldr	r4, [sp, #4]
 80083ac:	f104 0010 	add.w	r0, r4, #16
 80083b0:	2217      	movs	r2, #23
 80083b2:	2112      	movs	r1, #18
 80083b4:	f000 f98c 	bl	80086d0 <core_set_error>
 80083b8:	f04f 0b00 	mov.w	fp, #0
 80083bc:	e7cc      	b.n	8008358 <ai_platform_network_process+0x194>
 80083be:	bf00      	nop
 80083c0:	a1c00100 	.word	0xa1c00100
 80083c4:	e0002000 	.word	0xe0002000
 80083c8:	e0042000 	.word	0xe0042000
 80083cc:	58024c08 	.word	0x58024c08
 80083d0:	58024c00 	.word	0x58024c00
 80083d4:	f407a5c2 	.word	0xf407a5c2
 80083d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80083dc:	40023008 	.word	0x40023008
 80083e0:	40023000 	.word	0x40023000
 80083e4:	9c01      	ldr	r4, [sp, #4]
 80083e6:	9a02      	ldr	r2, [sp, #8]
 80083e8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80083ea:	2a00      	cmp	r2, #0
 80083ec:	f000 80a9 	beq.w	8008542 <ai_platform_network_process+0x37e>
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	f240 809b 	bls.w	800852c <ai_platform_network_process+0x368>
 80083f6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80083fa:	f11a 0f0c 	cmn.w	sl, #12
 80083fe:	f000 8095 	beq.w	800852c <ai_platform_network_process+0x368>
 8008402:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 8090 	beq.w	800852c <ai_platform_network_process+0x368>
 800840c:	9d02      	ldr	r5, [sp, #8]
 800840e:	9401      	str	r4, [sp, #4]
 8008410:	f04f 0800 	mov.w	r8, #0
 8008414:	4598      	cmp	r8, r3
 8008416:	f080 8092 	bcs.w	800853e <ai_platform_network_process+0x37a>
 800841a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 808d 	beq.w	800853e <ai_platform_network_process+0x37a>
 8008424:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8008428:	2e00      	cmp	r6, #0
 800842a:	f000 8088 	beq.w	800853e <ai_platform_network_process+0x37a>
 800842e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	9302      	str	r3, [sp, #8]
 8008436:	ea4f 1408 	mov.w	r4, r8, lsl #4
 800843a:	191f      	adds	r7, r3, r4
 800843c:	f000 812d 	beq.w	800869a <ai_platform_network_process+0x4d6>
 8008440:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8008444:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8008448:	69b0      	ldr	r0, [r6, #24]
 800844a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800844e:	6841      	ldr	r1, [r0, #4]
 8008450:	fb0b f30e 	mul.w	r3, fp, lr
 8008454:	fb0c f303 	mul.w	r3, ip, r3
 8008458:	4299      	cmp	r1, r3
 800845a:	d366      	bcc.n	800852a <ai_platform_network_process+0x366>
 800845c:	68f3      	ldr	r3, [r6, #12]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	455a      	cmp	r2, fp
 8008462:	d162      	bne.n	800852a <ai_platform_network_process+0x366>
 8008464:	689a      	ldr	r2, [r3, #8]
 8008466:	4572      	cmp	r2, lr
 8008468:	d15f      	bne.n	800852a <ai_platform_network_process+0x366>
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	459c      	cmp	ip, r3
 800846e:	d15c      	bne.n	800852a <ai_platform_network_process+0x366>
 8008470:	6800      	ldr	r0, [r0, #0]
 8008472:	f002 fae1 	bl	800aa38 <ai_array_get_byte_size>
 8008476:	68f2      	ldr	r2, [r6, #12]
 8008478:	6973      	ldr	r3, [r6, #20]
 800847a:	68d2      	ldr	r2, [r2, #12]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	fb03 f302 	mul.w	r3, r3, r2
 8008482:	4298      	cmp	r0, r3
 8008484:	d351      	bcc.n	800852a <ai_platform_network_process+0x366>
 8008486:	69b3      	ldr	r3, [r6, #24]
 8008488:	6818      	ldr	r0, [r3, #0]
 800848a:	f002 fa7d 	bl	800a988 <ai_array_to_buffer_fmt>
 800848e:	682b      	ldr	r3, [r5, #0]
 8008490:	4043      	eors	r3, r0
 8008492:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8008496:	d13e      	bne.n	8008516 <ai_platform_network_process+0x352>
 8008498:	692b      	ldr	r3, [r5, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d032      	beq.n	8008504 <ai_platform_network_process+0x340>
 800849e:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 80084a2:	f1bb 0f00 	cmp.w	fp, #0
 80084a6:	d025      	beq.n	80084f4 <ai_platform_network_process+0x330>
 80084a8:	68f2      	ldr	r2, [r6, #12]
 80084aa:	6973      	ldr	r3, [r6, #20]
 80084ac:	68d1      	ldr	r1, [r2, #12]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	fb02 f201 	mul.w	r2, r2, r1
 80084b4:	60ba      	str	r2, [r7, #8]
 80084b6:	88ab      	ldrh	r3, [r5, #4]
 80084b8:	fb02 f203 	mul.w	r2, r2, r3
 80084bc:	60fa      	str	r2, [r7, #12]
 80084be:	6929      	ldr	r1, [r5, #16]
 80084c0:	6079      	str	r1, [r7, #4]
 80084c2:	692b      	ldr	r3, [r5, #16]
 80084c4:	4413      	add	r3, r2
 80084c6:	9a02      	ldr	r2, [sp, #8]
 80084c8:	5113      	str	r3, [r2, r4]
 80084ca:	69b0      	ldr	r0, [r6, #24]
 80084cc:	6803      	ldr	r3, [r0, #0]
 80084ce:	45d9      	cmp	r9, fp
 80084d0:	bf38      	it	cc
 80084d2:	46d9      	movcc	r9, fp
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	d407      	bmi.n	80084e8 <ai_platform_network_process+0x324>
 80084d8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80084dc:	1a9b      	subs	r3, r3, r2
 80084de:	4419      	add	r1, r3
 80084e0:	6081      	str	r1, [r0, #8]
 80084e2:	69b3      	ldr	r3, [r6, #24]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	60da      	str	r2, [r3, #12]
 80084e8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80084ec:	f108 0801 	add.w	r8, r8, #1
 80084f0:	3518      	adds	r5, #24
 80084f2:	e78f      	b.n	8008414 <ai_platform_network_process+0x250>
 80084f4:	9c01      	ldr	r4, [sp, #4]
 80084f6:	2221      	movs	r2, #33	; 0x21
 80084f8:	f104 0010 	add.w	r0, r4, #16
 80084fc:	2113      	movs	r1, #19
 80084fe:	f000 f8e7 	bl	80086d0 <core_set_error>
 8008502:	e729      	b.n	8008358 <ai_platform_network_process+0x194>
 8008504:	9c01      	ldr	r4, [sp, #4]
 8008506:	2217      	movs	r2, #23
 8008508:	f104 0010 	add.w	r0, r4, #16
 800850c:	2113      	movs	r1, #19
 800850e:	469b      	mov	fp, r3
 8008510:	f000 f8de 	bl	80086d0 <core_set_error>
 8008514:	e720      	b.n	8008358 <ai_platform_network_process+0x194>
 8008516:	9c01      	ldr	r4, [sp, #4]
 8008518:	2219      	movs	r2, #25
 800851a:	f104 0010 	add.w	r0, r4, #16
 800851e:	2113      	movs	r1, #19
 8008520:	f000 f8d6 	bl	80086d0 <core_set_error>
 8008524:	f04f 0b00 	mov.w	fp, #0
 8008528:	e716      	b.n	8008358 <ai_platform_network_process+0x194>
 800852a:	9c01      	ldr	r4, [sp, #4]
 800852c:	f104 0010 	add.w	r0, r4, #16
 8008530:	2218      	movs	r2, #24
 8008532:	2113      	movs	r1, #19
 8008534:	f000 f8cc 	bl	80086d0 <core_set_error>
 8008538:	f04f 0b00 	mov.w	fp, #0
 800853c:	e70c      	b.n	8008358 <ai_platform_network_process+0x194>
 800853e:	9c01      	ldr	r4, [sp, #4]
 8008540:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8008542:	f8a4 9014 	strh.w	r9, [r4, #20]
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 80a4 	beq.w	8008694 <ai_platform_network_process+0x4d0>
 800854c:	2b01      	cmp	r3, #1
 800854e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8008550:	f240 809e 	bls.w	8008690 <ai_platform_network_process+0x4cc>
 8008554:	f105 070c 	add.w	r7, r5, #12
 8008558:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 800855c:	8aa3      	ldrh	r3, [r4, #20]
 800855e:	455b      	cmp	r3, fp
 8008560:	f67f aefa 	bls.w	8008358 <ai_platform_network_process+0x194>
 8008564:	9401      	str	r4, [sp, #4]
 8008566:	2d00      	cmp	r5, #0
 8008568:	d036      	beq.n	80085d8 <ai_platform_network_process+0x414>
 800856a:	882b      	ldrh	r3, [r5, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d033      	beq.n	80085d8 <ai_platform_network_process+0x414>
 8008570:	686b      	ldr	r3, [r5, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d030      	beq.n	80085d8 <ai_platform_network_process+0x414>
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f04f 0800 	mov.w	r8, #0
 800857c:	b9db      	cbnz	r3, 80085b6 <ai_platform_network_process+0x3f2>
 800857e:	e02b      	b.n	80085d8 <ai_platform_network_process+0x414>
 8008580:	68d4      	ldr	r4, [r2, #12]
 8008582:	1b00      	subs	r0, r0, r4
 8008584:	4401      	add	r1, r0
 8008586:	6091      	str	r1, [r2, #8]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	6872      	ldr	r2, [r6, #4]
 800858c:	60da      	str	r2, [r3, #12]
 800858e:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8008592:	f85a 2009 	ldr.w	r2, [sl, r9]
 8008596:	440b      	add	r3, r1
 8008598:	4293      	cmp	r3, r2
 800859a:	bf24      	itt	cs
 800859c:	68f3      	ldrcs	r3, [r6, #12]
 800859e:	1ad3      	subcs	r3, r2, r3
 80085a0:	6073      	str	r3, [r6, #4]
 80085a2:	882b      	ldrh	r3, [r5, #0]
 80085a4:	f108 0801 	add.w	r8, r8, #1
 80085a8:	4598      	cmp	r8, r3
 80085aa:	d215      	bcs.n	80085d8 <ai_platform_network_process+0x414>
 80085ac:	686b      	ldr	r3, [r5, #4]
 80085ae:	b19b      	cbz	r3, 80085d8 <ai_platform_network_process+0x414>
 80085b0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80085b4:	b183      	cbz	r3, 80085d8 <ai_platform_network_process+0x414>
 80085b6:	68a9      	ldr	r1, [r5, #8]
 80085b8:	699a      	ldr	r2, [r3, #24]
 80085ba:	f8d1 a000 	ldr.w	sl, [r1]
 80085be:	6814      	ldr	r4, [r2, #0]
 80085c0:	6890      	ldr	r0, [r2, #8]
 80085c2:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80085c6:	eb0a 0609 	add.w	r6, sl, r9
 80085ca:	00a4      	lsls	r4, r4, #2
 80085cc:	6871      	ldr	r1, [r6, #4]
 80085ce:	d5d7      	bpl.n	8008580 <ai_platform_network_process+0x3bc>
 80085d0:	68b2      	ldr	r2, [r6, #8]
 80085d2:	f002 fa85 	bl	800aae0 <memcpy>
 80085d6:	e7da      	b.n	800858e <ai_platform_network_process+0x3ca>
 80085d8:	9801      	ldr	r0, [sp, #4]
 80085da:	f002 f96f 	bl	800a8bc <ai_layers_forward_all>
 80085de:	2f00      	cmp	r7, #0
 80085e0:	d047      	beq.n	8008672 <ai_platform_network_process+0x4ae>
 80085e2:	883b      	ldrh	r3, [r7, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d044      	beq.n	8008672 <ai_platform_network_process+0x4ae>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d041      	beq.n	8008672 <ai_platform_network_process+0x4ae>
 80085ee:	6818      	ldr	r0, [r3, #0]
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d03e      	beq.n	8008672 <ai_platform_network_process+0x4ae>
 80085f4:	f04f 0800 	mov.w	r8, #0
 80085f8:	e019      	b.n	800862e <ai_platform_network_process+0x46a>
 80085fa:	f85a 2009 	ldr.w	r2, [sl, r9]
 80085fe:	4293      	cmp	r3, r2
 8008600:	bf24      	itt	cs
 8008602:	68f3      	ldrcs	r3, [r6, #12]
 8008604:	1ad3      	subcs	r3, r2, r3
 8008606:	6073      	str	r3, [r6, #4]
 8008608:	6981      	ldr	r1, [r0, #24]
 800860a:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800860e:	1b12      	subs	r2, r2, r4
 8008610:	4413      	add	r3, r2
 8008612:	608b      	str	r3, [r1, #8]
 8008614:	6983      	ldr	r3, [r0, #24]
 8008616:	6872      	ldr	r2, [r6, #4]
 8008618:	60da      	str	r2, [r3, #12]
 800861a:	883b      	ldrh	r3, [r7, #0]
 800861c:	f108 0801 	add.w	r8, r8, #1
 8008620:	4598      	cmp	r8, r3
 8008622:	d226      	bcs.n	8008672 <ai_platform_network_process+0x4ae>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	b323      	cbz	r3, 8008672 <ai_platform_network_process+0x4ae>
 8008628:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800862c:	b308      	cbz	r0, 8008672 <ai_platform_network_process+0x4ae>
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	6981      	ldr	r1, [r0, #24]
 8008632:	f8d3 a000 	ldr.w	sl, [r3]
 8008636:	680c      	ldr	r4, [r1, #0]
 8008638:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800863c:	eb0a 0609 	add.w	r6, sl, r9
 8008640:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8008644:	00a4      	lsls	r4, r4, #2
 8008646:	eb0c 0302 	add.w	r3, ip, r2
 800864a:	d5d6      	bpl.n	80085fa <ai_platform_network_process+0x436>
 800864c:	6889      	ldr	r1, [r1, #8]
 800864e:	4660      	mov	r0, ip
 8008650:	f002 fa46 	bl	800aae0 <memcpy>
 8008654:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8008658:	f85a 2009 	ldr.w	r2, [sl, r9]
 800865c:	440b      	add	r3, r1
 800865e:	4293      	cmp	r3, r2
 8008660:	bf24      	itt	cs
 8008662:	68f3      	ldrcs	r3, [r6, #12]
 8008664:	1ad3      	subcs	r3, r2, r3
 8008666:	6073      	str	r3, [r6, #4]
 8008668:	883b      	ldrh	r3, [r7, #0]
 800866a:	f108 0801 	add.w	r8, r8, #1
 800866e:	4598      	cmp	r8, r3
 8008670:	d3d8      	bcc.n	8008624 <ai_platform_network_process+0x460>
 8008672:	9b01      	ldr	r3, [sp, #4]
 8008674:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8008678:	461a      	mov	r2, r3
 800867a:	f10b 0b01 	add.w	fp, fp, #1
 800867e:	8a9b      	ldrh	r3, [r3, #20]
 8008680:	fa1f fb8b 	uxth.w	fp, fp
 8008684:	455b      	cmp	r3, fp
 8008686:	f8a2 b016 	strh.w	fp, [r2, #22]
 800868a:	f63f af6c 	bhi.w	8008566 <ai_platform_network_process+0x3a2>
 800868e:	e663      	b.n	8008358 <ai_platform_network_process+0x194>
 8008690:	2700      	movs	r7, #0
 8008692:	e761      	b.n	8008558 <ai_platform_network_process+0x394>
 8008694:	461d      	mov	r5, r3
 8008696:	461f      	mov	r7, r3
 8008698:	e75e      	b.n	8008558 <ai_platform_network_process+0x394>
 800869a:	9c01      	ldr	r4, [sp, #4]
 800869c:	2217      	movs	r2, #23
 800869e:	f104 0010 	add.w	r0, r4, #16
 80086a2:	2113      	movs	r1, #19
 80086a4:	f000 f814 	bl	80086d0 <core_set_error>
 80086a8:	46bb      	mov	fp, r7
 80086aa:	e655      	b.n	8008358 <ai_platform_network_process+0x194>
 80086ac:	f104 0010 	add.w	r0, r4, #16
 80086b0:	2230      	movs	r2, #48	; 0x30
 80086b2:	2111      	movs	r1, #17
 80086b4:	f000 f80c 	bl	80086d0 <core_set_error>
 80086b8:	e64e      	b.n	8008358 <ai_platform_network_process+0x194>
 80086ba:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80086bc:	e5c1      	b.n	8008242 <ai_platform_network_process+0x7e>
 80086be:	bf00      	nop

080086c0 <core_init>:
 80086c0:	2001      	movs	r0, #1
 80086c2:	4770      	bx	lr

080086c4 <core_get_error>:
 80086c4:	4603      	mov	r3, r0
 80086c6:	2200      	movs	r2, #0
 80086c8:	6800      	ldr	r0, [r0, #0]
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop

080086d0 <core_set_error>:
 80086d0:	7803      	ldrb	r3, [r0, #0]
 80086d2:	b933      	cbnz	r3, 80086e2 <core_set_error+0x12>
 80086d4:	7001      	strb	r1, [r0, #0]
 80086d6:	6803      	ldr	r3, [r0, #0]
 80086d8:	f362 231f 	bfi	r3, r2, #8, #24
 80086dc:	6003      	str	r3, [r0, #0]
 80086de:	2001      	movs	r0, #1
 80086e0:	4770      	bx	lr
 80086e2:	2000      	movs	r0, #0
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop

080086e8 <func_dummy>:
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop

080086ec <ai_dict8_dot_array_f32>:
 80086ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f0:	f8dd c020 	ldr.w	ip, [sp, #32]
 80086f4:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 80086f8:	f000 80c0 	beq.w	800887c <ai_dict8_dot_array_f32+0x190>
 80086fc:	f101 0408 	add.w	r4, r1, #8
 8008700:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8008704:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8008884 <ai_dict8_dot_array_f32+0x198>
 8008708:	eb04 0e09 	add.w	lr, r4, r9
 800870c:	f103 0520 	add.w	r5, r3, #32
 8008710:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8008714:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8008718:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 800871c:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8008720:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8008724:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8008728:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800872c:	ed55 3a04 	vldr	s7, [r5, #-16]
 8008730:	ed55 4a03 	vldr	s9, [r5, #-12]
 8008734:	ed55 5a02 	vldr	s11, [r5, #-8]
 8008738:	ed55 6a01 	vldr	s13, [r5, #-4]
 800873c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008740:	edd6 7a00 	vldr	s15, [r6]
 8008744:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8008748:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800874c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008750:	ed9a 3a00 	vldr	s6, [sl]
 8008754:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8008758:	eee3 7a05 	vfma.f32	s15, s6, s10
 800875c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008760:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008764:	ed97 3a00 	vldr	s6, [r7]
 8008768:	ed96 5a00 	vldr	s10, [r6]
 800876c:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8008770:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8008774:	eee3 7a04 	vfma.f32	s15, s6, s8
 8008778:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800877c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008780:	ed9a 3a00 	vldr	s6, [sl]
 8008784:	ed96 4a00 	vldr	s8, [r6]
 8008788:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800878c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8008790:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008794:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008798:	ed97 5a00 	vldr	s10, [r7]
 800879c:	ed96 6a00 	vldr	s12, [r6]
 80087a0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80087a4:	3408      	adds	r4, #8
 80087a6:	45a6      	cmp	lr, r4
 80087a8:	f105 0520 	add.w	r5, r5, #32
 80087ac:	eee4 7a24 	vfma.f32	s15, s8, s9
 80087b0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80087b4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80087b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087bc:	d1a8      	bne.n	8008710 <ai_dict8_dot_array_f32+0x24>
 80087be:	4449      	add	r1, r9
 80087c0:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80087c4:	f01c 0c07 	ands.w	ip, ip, #7
 80087c8:	d050      	beq.n	800886c <ai_dict8_dot_array_f32+0x180>
 80087ca:	780c      	ldrb	r4, [r1, #0]
 80087cc:	edd3 6a00 	vldr	s13, [r3]
 80087d0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80087d4:	edd4 7a00 	vldr	s15, [r4]
 80087d8:	f1bc 0f01 	cmp.w	ip, #1
 80087dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087e0:	d044      	beq.n	800886c <ai_dict8_dot_array_f32+0x180>
 80087e2:	784c      	ldrb	r4, [r1, #1]
 80087e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80087e8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80087ec:	edd4 7a00 	vldr	s15, [r4]
 80087f0:	f1bc 0f02 	cmp.w	ip, #2
 80087f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087f8:	d038      	beq.n	800886c <ai_dict8_dot_array_f32+0x180>
 80087fa:	788c      	ldrb	r4, [r1, #2]
 80087fc:	edd3 6a02 	vldr	s13, [r3, #8]
 8008800:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008804:	edd4 7a00 	vldr	s15, [r4]
 8008808:	f1bc 0f03 	cmp.w	ip, #3
 800880c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008810:	d02c      	beq.n	800886c <ai_dict8_dot_array_f32+0x180>
 8008812:	78cc      	ldrb	r4, [r1, #3]
 8008814:	edd3 6a03 	vldr	s13, [r3, #12]
 8008818:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800881c:	edd4 7a00 	vldr	s15, [r4]
 8008820:	f1bc 0f04 	cmp.w	ip, #4
 8008824:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008828:	d020      	beq.n	800886c <ai_dict8_dot_array_f32+0x180>
 800882a:	790c      	ldrb	r4, [r1, #4]
 800882c:	edd3 6a04 	vldr	s13, [r3, #16]
 8008830:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008834:	edd4 7a00 	vldr	s15, [r4]
 8008838:	f1bc 0f05 	cmp.w	ip, #5
 800883c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008840:	d014      	beq.n	800886c <ai_dict8_dot_array_f32+0x180>
 8008842:	794c      	ldrb	r4, [r1, #5]
 8008844:	edd3 6a05 	vldr	s13, [r3, #20]
 8008848:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800884c:	edd4 7a00 	vldr	s15, [r4]
 8008850:	f1bc 0f06 	cmp.w	ip, #6
 8008854:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008858:	d008      	beq.n	800886c <ai_dict8_dot_array_f32+0x180>
 800885a:	7989      	ldrb	r1, [r1, #6]
 800885c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008860:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008864:	edd2 6a00 	vldr	s13, [r2]
 8008868:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800886c:	edd0 7a00 	vldr	s15, [r0]
 8008870:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008874:	ed80 7a00 	vstr	s14, [r0]
 8008878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887c:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8008884 <ai_dict8_dot_array_f32+0x198>
 8008880:	e7a0      	b.n	80087c4 <ai_dict8_dot_array_f32+0xd8>
 8008882:	bf00      	nop
 8008884:	00000000 	.word	0x00000000

08008888 <ai_dict4_dot_array_f32>:
 8008888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800888e:	f027 0c01 	bic.w	ip, r7, #1
 8008892:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8008896:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800889a:	f000 80ae 	beq.w	80089fa <ai_dict4_dot_array_f32+0x172>
 800889e:	1d0d      	adds	r5, r1, #4
 80088a0:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80088a4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8008a00 <ai_dict4_dot_array_f32+0x178>
 80088a8:	eb05 0e09 	add.w	lr, r5, r9
 80088ac:	f103 0420 	add.w	r4, r3, #32
 80088b0:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 80088b4:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 80088b8:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 80088bc:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 80088c0:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 80088c4:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 80088c8:	ed14 5a04 	vldr	s10, [r4, #-16]
 80088cc:	ed54 5a03 	vldr	s11, [r4, #-12]
 80088d0:	ed14 6a02 	vldr	s12, [r4, #-8]
 80088d4:	ed54 6a01 	vldr	s13, [r4, #-4]
 80088d8:	f006 0a0f 	and.w	sl, r6, #15
 80088dc:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80088e0:	edda 7a00 	vldr	s15, [sl]
 80088e4:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 80088e8:	0936      	lsrs	r6, r6, #4
 80088ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80088ee:	ee67 7a83 	vmul.f32	s15, s15, s6
 80088f2:	ed96 3a00 	vldr	s6, [r6]
 80088f6:	ea4f 161b 	mov.w	r6, fp, lsr #4
 80088fa:	eee3 7a23 	vfma.f32	s15, s6, s7
 80088fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008902:	f00b 0b0f 	and.w	fp, fp, #15
 8008906:	edd6 3a00 	vldr	s7, [r6]
 800890a:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800890e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008912:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8008916:	3504      	adds	r5, #4
 8008918:	ed9b 4a00 	vldr	s8, [fp]
 800891c:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8008920:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008924:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8008928:	f00a 0a0f 	and.w	sl, sl, #15
 800892c:	eddb 4a00 	vldr	s9, [fp]
 8008930:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008934:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8008938:	45ae      	cmp	lr, r5
 800893a:	ed9a 5a00 	vldr	s10, [sl]
 800893e:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8008942:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008946:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800894a:	f006 060f 	and.w	r6, r6, #15
 800894e:	edda 5a00 	vldr	s11, [sl]
 8008952:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008956:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800895a:	f104 0420 	add.w	r4, r4, #32
 800895e:	ed96 6a00 	vldr	s12, [r6]
 8008962:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008966:	ee37 7a27 	vadd.f32	s14, s14, s15
 800896a:	d1a1      	bne.n	80088b0 <ai_dict4_dot_array_f32+0x28>
 800896c:	4449      	add	r1, r9
 800896e:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8008972:	459c      	cmp	ip, r3
 8008974:	d92d      	bls.n	80089d2 <ai_dict4_dot_array_f32+0x14a>
 8008976:	f10c 0c07 	add.w	ip, ip, #7
 800897a:	f103 0508 	add.w	r5, r3, #8
 800897e:	ebac 0c05 	sub.w	ip, ip, r5
 8008982:	f02c 0407 	bic.w	r4, ip, #7
 8008986:	f103 0810 	add.w	r8, r3, #16
 800898a:	44a0      	add	r8, r4
 800898c:	f101 3eff 	add.w	lr, r1, #4294967295
 8008990:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8008994:	ed15 6a01 	vldr	s12, [r5, #-4]
 8008998:	ed55 6a02 	vldr	s13, [r5, #-8]
 800899c:	f004 060f 	and.w	r6, r4, #15
 80089a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089a4:	0924      	lsrs	r4, r4, #4
 80089a6:	edd6 7a00 	vldr	s15, [r6]
 80089aa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80089ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80089b2:	ed94 6a00 	vldr	s12, [r4]
 80089b6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80089ba:	3508      	adds	r5, #8
 80089bc:	45a8      	cmp	r8, r5
 80089be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089c2:	d1e5      	bne.n	8008990 <ai_dict4_dot_array_f32+0x108>
 80089c4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80089c8:	f10c 0c01 	add.w	ip, ip, #1
 80089cc:	4461      	add	r1, ip
 80089ce:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80089d2:	07fc      	lsls	r4, r7, #31
 80089d4:	d509      	bpl.n	80089ea <ai_dict4_dot_array_f32+0x162>
 80089d6:	7809      	ldrb	r1, [r1, #0]
 80089d8:	edd3 7a00 	vldr	s15, [r3]
 80089dc:	090b      	lsrs	r3, r1, #4
 80089de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80089e2:	edd2 6a00 	vldr	s13, [r2]
 80089e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089ea:	edd0 7a00 	vldr	s15, [r0]
 80089ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089f2:	ed80 7a00 	vstr	s14, [r0]
 80089f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fa:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8008a00 <ai_dict4_dot_array_f32+0x178>
 80089fe:	e7b8      	b.n	8008972 <ai_dict4_dot_array_f32+0xea>
 8008a00:	00000000 	.word	0x00000000

08008a04 <ai_dict_decompress_f32>:
 8008a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a08:	9f08      	ldr	r7, [sp, #32]
 8008a0a:	2b04      	cmp	r3, #4
 8008a0c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8008a10:	d00e      	beq.n	8008a30 <ai_dict_decompress_f32+0x2c>
 8008a12:	2b08      	cmp	r3, #8
 8008a14:	d10a      	bne.n	8008a2c <ai_dict_decompress_f32+0x28>
 8008a16:	42b8      	cmp	r0, r7
 8008a18:	d208      	bcs.n	8008a2c <ai_dict_decompress_f32+0x28>
 8008a1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f840 3b04 	str.w	r3, [r0], #4
 8008a28:	4287      	cmp	r7, r0
 8008a2a:	d8f6      	bhi.n	8008a1a <ai_dict_decompress_f32+0x16>
 8008a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a30:	9b07      	ldr	r3, [sp, #28]
 8008a32:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8008a36:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8008a3a:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008a3e:	f003 0e01 	and.w	lr, r3, #1
 8008a42:	42b8      	cmp	r0, r7
 8008a44:	d2f2      	bcs.n	8008a2c <ai_dict_decompress_f32+0x28>
 8008a46:	f1bc 0f00 	cmp.w	ip, #0
 8008a4a:	d01a      	beq.n	8008a82 <ai_dict_decompress_f32+0x7e>
 8008a4c:	f100 0508 	add.w	r5, r0, #8
 8008a50:	1e4c      	subs	r4, r1, #1
 8008a52:	eb01 0608 	add.w	r6, r1, r8
 8008a56:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008a5a:	091b      	lsrs	r3, r3, #4
 8008a5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a60:	42a6      	cmp	r6, r4
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f845 3c08 	str.w	r3, [r5, #-8]
 8008a68:	7823      	ldrb	r3, [r4, #0]
 8008a6a:	f003 030f 	and.w	r3, r3, #15
 8008a6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a72:	f105 0508 	add.w	r5, r5, #8
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f845 3c0c 	str.w	r3, [r5, #-12]
 8008a7c:	d1eb      	bne.n	8008a56 <ai_dict_decompress_f32+0x52>
 8008a7e:	4461      	add	r1, ip
 8008a80:	4448      	add	r0, r9
 8008a82:	f1be 0f00 	cmp.w	lr, #0
 8008a86:	d103      	bne.n	8008a90 <ai_dict_decompress_f32+0x8c>
 8008a88:	4287      	cmp	r7, r0
 8008a8a:	d8dc      	bhi.n	8008a46 <ai_dict_decompress_f32+0x42>
 8008a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a90:	780b      	ldrb	r3, [r1, #0]
 8008a92:	091b      	lsrs	r3, r3, #4
 8008a94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a98:	3101      	adds	r1, #1
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6003      	str	r3, [r0, #0]
 8008a9e:	3004      	adds	r0, #4
 8008aa0:	e7cf      	b.n	8008a42 <ai_dict_decompress_f32+0x3e>
 8008aa2:	bf00      	nop

08008aa4 <forward_conv2d_nl_pool>:
 8008aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa8:	ed2d 8b10 	vpush	{d8-d15}
 8008aac:	b0e1      	sub	sp, #388	; 0x184
 8008aae:	6983      	ldr	r3, [r0, #24]
 8008ab0:	881e      	ldrh	r6, [r3, #0]
 8008ab2:	af0a      	add	r7, sp, #40	; 0x28
 8008ab4:	2e00      	cmp	r6, #0
 8008ab6:	f000 859b 	beq.w	80095f0 <forward_conv2d_nl_pool+0xb4c>
 8008aba:	6859      	ldr	r1, [r3, #4]
 8008abc:	684a      	ldr	r2, [r1, #4]
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	f000 8593 	beq.w	80095ea <forward_conv2d_nl_pool+0xb46>
 8008ac4:	f8d2 c000 	ldr.w	ip, [r2]
 8008ac8:	2e01      	cmp	r6, #1
 8008aca:	f240 858b 	bls.w	80095e4 <forward_conv2d_nl_pool+0xb40>
 8008ace:	690a      	ldr	r2, [r1, #16]
 8008ad0:	2a00      	cmp	r2, #0
 8008ad2:	f000 8582 	beq.w	80095da <forward_conv2d_nl_pool+0xb36>
 8008ad6:	f8d2 9000 	ldr.w	r9, [r2]
 8008ada:	2e02      	cmp	r6, #2
 8008adc:	f000 8582 	beq.w	80095e4 <forward_conv2d_nl_pool+0xb40>
 8008ae0:	69cd      	ldr	r5, [r1, #28]
 8008ae2:	2d00      	cmp	r5, #0
 8008ae4:	f000 8571 	beq.w	80095ca <forward_conv2d_nl_pool+0xb26>
 8008ae8:	682a      	ldr	r2, [r5, #0]
 8008aea:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008aee:	f111 0218 	adds.w	r2, r1, #24
 8008af2:	d004      	beq.n	8008afe <forward_conv2d_nl_pool+0x5a>
 8008af4:	8b0a      	ldrh	r2, [r1, #24]
 8008af6:	2a01      	cmp	r2, #1
 8008af8:	f240 857c 	bls.w	80095f4 <forward_conv2d_nl_pool+0xb50>
 8008afc:	686a      	ldr	r2, [r5, #4]
 8008afe:	68a9      	ldr	r1, [r5, #8]
 8008b00:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008b02:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8008b06:	f8dc b018 	ldr.w	fp, [ip, #24]
 8008b0a:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 8008b0e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8008b12:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8008b16:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8008b1a:	f8db 4008 	ldr.w	r4, [fp, #8]
 8008b1e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8008b22:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008b26:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8008b2a:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 8008b2e:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8008b32:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008b36:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b3a:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 8008b3e:	f8de 4004 	ldr.w	r4, [lr, #4]
 8008b42:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8008b46:	f8de 400c 	ldr.w	r4, [lr, #12]
 8008b4a:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8008b4e:	f8de 4008 	ldr.w	r4, [lr, #8]
 8008b52:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 8008b56:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8008b5a:	6824      	ldr	r4, [r4, #0]
 8008b5c:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 8008b60:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8008b64:	6864      	ldr	r4, [r4, #4]
 8008b66:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8008b6a:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8008b6e:	68a5      	ldr	r5, [r4, #8]
 8008b70:	f8da 4004 	ldr.w	r4, [sl, #4]
 8008b74:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8008b78:	f8da 4008 	ldr.w	r4, [sl, #8]
 8008b7c:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8008b80:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8008b82:	6824      	ldr	r4, [r4, #0]
 8008b84:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 8008b88:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8008b8a:	6864      	ldr	r4, [r4, #4]
 8008b8c:	643c      	str	r4, [r7, #64]	; 0x40
 8008b8e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8008b92:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8008b96:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008b98:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8008b9c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008b9e:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8008ba2:	69c4      	ldr	r4, [r0, #28]
 8008ba4:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 8008ba8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008baa:	64bc      	str	r4, [r7, #72]	; 0x48
 8008bac:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8008bae:	647c      	str	r4, [r7, #68]	; 0x44
 8008bb0:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8008bb2:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8008bb6:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 8008bba:	2a00      	cmp	r2, #0
 8008bbc:	f000 84f8 	beq.w	80095b0 <forward_conv2d_nl_pool+0xb0c>
 8008bc0:	6992      	ldr	r2, [r2, #24]
 8008bc2:	6892      	ldr	r2, [r2, #8]
 8008bc4:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8008bc8:	4680      	mov	r8, r0
 8008bca:	6a00      	ldr	r0, [r0, #32]
 8008bcc:	2900      	cmp	r1, #0
 8008bce:	f000 84e4 	beq.w	800959a <forward_conv2d_nl_pool+0xaf6>
 8008bd2:	698a      	ldr	r2, [r1, #24]
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f000 8533 	beq.w	8009640 <forward_conv2d_nl_pool+0xb9c>
 8008bda:	694b      	ldr	r3, [r1, #20]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008be2:	e9d2 0100 	ldrd	r0, r1, [r2]
 8008be6:	6893      	ldr	r3, [r2, #8]
 8008be8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008bec:	f001 ff24 	bl	800aa38 <ai_array_get_byte_size>
 8008bf0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008bf4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008bf8:	881e      	ldrh	r6, [r3, #0]
 8008bfa:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8008bfe:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8008c02:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 8008c06:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008c08:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8008c0c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8008c10:	fa11 f585 	uxtah	r5, r1, r5
 8008c14:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008c18:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008c1c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8008c20:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8008c24:	3901      	subs	r1, #1
 8008c26:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8008c2a:	eb05 0e00 	add.w	lr, r5, r0
 8008c2e:	fa1f f28a 	uxth.w	r2, sl
 8008c32:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 8008c36:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8008c3a:	f8dc 4000 	ldr.w	r4, [ip]
 8008c3e:	f8dc 1000 	ldr.w	r1, [ip]
 8008c42:	3a01      	subs	r2, #1
 8008c44:	fb00 5002 	mla	r0, r0, r2, r5
 8008c48:	fa1f f28b 	uxth.w	r2, fp
 8008c4c:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 8008c50:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8008c54:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8008c58:	1e50      	subs	r0, r2, #1
 8008c5a:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8008c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8008c62:	fa44 f101 	asr.w	r1, r4, r1
 8008c66:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8008c6a:	f8dc 4000 	ldr.w	r4, [ip]
 8008c6e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8008c72:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008c76:	f3c4 4543 	ubfx	r5, r4, #17, #4
 8008c7a:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8008c7e:	ebae 0202 	sub.w	r2, lr, r2
 8008c82:	fa1f fe81 	uxth.w	lr, r1
 8008c86:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8008c8a:	fbb2 f2f1 	udiv	r2, r2, r1
 8008c8e:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8008c92:	3c01      	subs	r4, #1
 8008c94:	fb04 1100 	mla	r1, r4, r0, r1
 8008c98:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008c9c:	1c51      	adds	r1, r2, #1
 8008c9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008ca2:	487c      	ldr	r0, [pc, #496]	; (8008e94 <forward_conv2d_nl_pool+0x3f0>)
 8008ca4:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8008ca8:	4611      	mov	r1, r2
 8008caa:	2a00      	cmp	r2, #0
 8008cac:	bf08      	it	eq
 8008cae:	4601      	moveq	r1, r0
 8008cb0:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8008cb4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8008cb8:	2d04      	cmp	r5, #4
 8008cba:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8008cbe:	f000 849e 	beq.w	80095fe <forward_conv2d_nl_pool+0xb5a>
 8008cc2:	2d08      	cmp	r5, #8
 8008cc4:	f000 849b 	beq.w	80095fe <forward_conv2d_nl_pool+0xb5a>
 8008cc8:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8008ccc:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8008cd0:	2e03      	cmp	r6, #3
 8008cd2:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 8008cd6:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8008cda:	f240 8483 	bls.w	80095e4 <forward_conv2d_nl_pool+0xb40>
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f000 8489 	beq.w	80095fa <forward_conv2d_nl_pool+0xb56>
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008cee:	68da      	ldr	r2, [r3, #12]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8008cf6:	6899      	ldr	r1, [r3, #8]
 8008cf8:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8008cfc:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008d00:	6896      	ldr	r6, [r2, #8]
 8008d02:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 8008d06:	4249      	negs	r1, r1
 8008d08:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	f000 82dd 	beq.w	80092cc <forward_conv2d_nl_pool+0x828>
 8008d12:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008d16:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008d1a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008d1e:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 8008d22:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8008e98 <forward_conv2d_nl_pool+0x3f4>
 8008d26:	fb03 f200 	mul.w	r2, r3, r0
 8008d2a:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008d2e:	008c      	lsls	r4, r1, #2
 8008d30:	fb04 f000 	mul.w	r0, r4, r0
 8008d34:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8008d38:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8008d3c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8008d40:	fb01 fc02 	mul.w	ip, r1, r2
 8008d44:	00a2      	lsls	r2, r4, #2
 8008d46:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8008d4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d4e:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 8008d52:	00ab      	lsls	r3, r5, #2
 8008d54:	4694      	mov	ip, r2
 8008d56:	fb0c f204 	mul.w	r2, ip, r4
 8008d5a:	fb04 f303 	mul.w	r3, r4, r3
 8008d5e:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8008d62:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8008d66:	00a4      	lsls	r4, r4, #2
 8008d68:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008d6c:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8008d70:	f04f 0c00 	mov.w	ip, #0
 8008d74:	fa0f f58b 	sxth.w	r5, fp
 8008d78:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 8008d7c:	46a4      	mov	ip, r4
 8008d7e:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 8008d82:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 8008d86:	fa0f f58a 	sxth.w	r5, sl
 8008d8a:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 8008d8e:	fb0c fc04 	mul.w	ip, ip, r4
 8008d92:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 8008d96:	fb06 fc03 	mul.w	ip, r6, r3
 8008d9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008d9e:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 8008da2:	4240      	negs	r0, r0
 8008da4:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8008da8:	469c      	mov	ip, r3
 8008daa:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8008dae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008db2:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8008db6:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 8008dba:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 8008dbe:	fb00 f303 	mul.w	r3, r0, r3
 8008dc2:	460d      	mov	r5, r1
 8008dc4:	fb0c fc04 	mul.w	ip, ip, r4
 8008dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8008dca:	fb04 f305 	mul.w	r3, r4, r5
 8008dce:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 8008dd2:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 8008dd6:	623b      	str	r3, [r7, #32]
 8008dd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ddc:	46a6      	mov	lr, r4
 8008dde:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8008de2:	fb05 f503 	mul.w	r5, r5, r3
 8008de6:	667d      	str	r5, [r7, #100]	; 0x64
 8008de8:	4625      	mov	r5, r4
 8008dea:	fb05 f503 	mul.w	r5, r5, r3
 8008dee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008df2:	66bd      	str	r5, [r7, #104]	; 0x68
 8008df4:	fb00 f101 	mul.w	r1, r0, r1
 8008df8:	fb03 f306 	mul.w	r3, r3, r6
 8008dfc:	657b      	str	r3, [r7, #84]	; 0x54
 8008dfe:	008b      	lsls	r3, r1, #2
 8008e00:	633b      	str	r3, [r7, #48]	; 0x30
 8008e02:	0093      	lsls	r3, r2, #2
 8008e04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e06:	0083      	lsls	r3, r0, #2
 8008e08:	61bb      	str	r3, [r7, #24]
 8008e0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e0e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008e12:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8008e16:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8008e1a:	2400      	movs	r4, #0
 8008e1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e1e:	4603      	mov	r3, r0
 8008e20:	fb03 f301 	mul.w	r3, r3, r1
 8008e24:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8008e28:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8008e2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e30:	00d1      	lsls	r1, r2, #3
 8008e32:	0113      	lsls	r3, r2, #4
 8008e34:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8008e38:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008e3c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008e40:	fb00 f004 	mul.w	r0, r0, r4
 8008e44:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8008e48:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008e4a:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8008e4e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8008e52:	469a      	mov	sl, r3
 8008e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f340 81d0 	ble.w	80091fe <forward_conv2d_nl_pool+0x75a>
 8008e5e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008e62:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008e66:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008e6a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8008e6e:	2900      	cmp	r1, #0
 8008e70:	441a      	add	r2, r3
 8008e72:	bfb4      	ite	lt
 8008e74:	2100      	movlt	r1, #0
 8008e76:	2300      	movge	r3, #0
 8008e78:	4282      	cmp	r2, r0
 8008e7a:	bf28      	it	cs
 8008e7c:	4602      	movcs	r2, r0
 8008e7e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8008e82:	2801      	cmp	r0, #1
 8008e84:	f000 83f6 	beq.w	8009674 <forward_conv2d_nl_pool+0xbd0>
 8008e88:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008e8c:	4281      	cmp	r1, r0
 8008e8e:	f000 822a 	beq.w	80092e6 <forward_conv2d_nl_pool+0x842>
 8008e92:	e003      	b.n	8008e9c <forward_conv2d_nl_pool+0x3f8>
 8008e94:	080086e9 	.word	0x080086e9
 8008e98:	00000000 	.word	0x00000000
 8008e9c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8008ea0:	2900      	cmp	r1, #0
 8008ea2:	f000 819f 	beq.w	80091e4 <forward_conv2d_nl_pool+0x740>
 8008ea6:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8008eaa:	fb93 f1f0 	sdiv	r1, r3, r0
 8008eae:	fb00 3111 	mls	r1, r0, r1, r3
 8008eb2:	1a41      	subs	r1, r0, r1
 8008eb4:	1ad2      	subs	r2, r2, r3
 8008eb6:	fb91 f5f0 	sdiv	r5, r1, r0
 8008eba:	fb00 1515 	mls	r5, r0, r5, r1
 8008ebe:	1b52      	subs	r2, r2, r5
 8008ec0:	4601      	mov	r1, r0
 8008ec2:	4402      	add	r2, r0
 8008ec4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8008ec8:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 8008ecc:	4604      	mov	r4, r0
 8008ece:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8008ed2:	fbb4 f4f0 	udiv	r4, r4, r0
 8008ed6:	6a38      	ldr	r0, [r7, #32]
 8008ed8:	3a01      	subs	r2, #1
 8008eda:	fb92 f8f1 	sdiv	r8, r2, r1
 8008ede:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008ee2:	eba0 0c04 	sub.w	ip, r0, r4
 8008ee6:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008eea:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8008eee:	4614      	mov	r4, r2
 8008ef0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8008ef4:	fbb4 f2f2 	udiv	r2, r4, r2
 8008ef8:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8008efc:	663a      	str	r2, [r7, #96]	; 0x60
 8008efe:	441d      	add	r5, r3
 8008f00:	fb0e f000 	mul.w	r0, lr, r0
 8008f04:	440b      	add	r3, r1
 8008f06:	eba6 0608 	sub.w	r6, r6, r8
 8008f0a:	fb04 f505 	mul.w	r5, r4, r5
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8008f14:	fb93 f3f4 	sdiv	r3, r3, r4
 8008f18:	fb00 f406 	mul.w	r4, r0, r6
 8008f1c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008f20:	677d      	str	r5, [r7, #116]	; 0x74
 8008f22:	0091      	lsls	r1, r2, #2
 8008f24:	fb00 f003 	mul.w	r0, r0, r3
 8008f28:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8008f2c:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008f2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f32:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8008f36:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8008f3a:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8008f3e:	1ac3      	subs	r3, r0, r3
 8008f40:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8008f44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f48:	008b      	lsls	r3, r1, #2
 8008f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f4c:	00d3      	lsls	r3, r2, #3
 8008f4e:	61fb      	str	r3, [r7, #28]
 8008f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008f60:	2300      	movs	r3, #0
 8008f62:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8008f66:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8008f6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f6c:	46c2      	mov	sl, r8
 8008f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f72:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008f76:	eb03 0c02 	add.w	ip, r3, r2
 8008f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f2c0 811c 	blt.w	80091bc <forward_conv2d_nl_pool+0x718>
 8008f84:	2000      	movs	r0, #0
 8008f86:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8008f88:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 8008f8c:	4605      	mov	r5, r0
 8008f8e:	4606      	mov	r6, r0
 8008f90:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f94:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008f98:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008fa2:	440a      	add	r2, r1
 8008fa4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008fa8:	428b      	cmp	r3, r1
 8008faa:	bf94      	ite	ls
 8008fac:	ebc6 0303 	rsbls	r3, r6, r3
 8008fb0:	ebc6 0301 	rsbhi	r3, r6, r1
 8008fb4:	4415      	add	r5, r2
 8008fb6:	1a1b      	subs	r3, r3, r0
 8008fb8:	00a4      	lsls	r4, r4, #2
 8008fba:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8008fbe:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8008fc2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8008fc6:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8008fc8:	4602      	mov	r2, r0
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	bf08      	it	eq
 8008fce:	4662      	moveq	r2, ip
 8008fd0:	f108 31ff 	add.w	r1, r8, #4294967295
 8008fd4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8008fd8:	fb91 f1f0 	sdiv	r1, r1, r0
 8008fdc:	4429      	add	r1, r5
 8008fde:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 8008fe2:	fb0e 5501 	mla	r5, lr, r1, r5
 8008fe6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008fea:	4403      	add	r3, r0
 8008fec:	fb01 6104 	mla	r1, r1, r4, r6
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	fb93 f6f0 	sdiv	r6, r3, r0
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8008ffc:	fb06 3110 	mls	r1, r6, r0, r3
 8009000:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009004:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8009008:	4562      	cmp	r2, ip
 800900a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800900e:	bf08      	it	eq
 8009010:	eeb0 6a48 	vmoveq.f32	s12, s16
 8009014:	1b9b      	subs	r3, r3, r6
 8009016:	2800      	cmp	r0, #0
 8009018:	d070      	beq.n	80090fc <forward_conv2d_nl_pool+0x658>
 800901a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800901e:	fb0e f803 	mul.w	r8, lr, r3
 8009022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009024:	fb00 fb01 	mul.w	fp, r0, r1
 8009028:	2b00      	cmp	r3, #0
 800902a:	d067      	beq.n	80090fc <forward_conv2d_nl_pool+0x658>
 800902c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009030:	18d3      	adds	r3, r2, r3
 8009032:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009036:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800903a:	1a9b      	subs	r3, r3, r2
 800903c:	62bb      	str	r3, [r7, #40]	; 0x28
 800903e:	2300      	movs	r3, #0
 8009040:	673b      	str	r3, [r7, #112]	; 0x70
 8009042:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	4413      	add	r3, r2
 800904a:	65bb      	str	r3, [r7, #88]	; 0x58
 800904c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	4413      	add	r3, r2
 8009054:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8009058:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800905c:	ecf3 7a01 	vldmia	r3!, {s15}
 8009060:	f1ba 0f00 	cmp.w	sl, #0
 8009064:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009068:	ee67 7a86 	vmul.f32	s15, s15, s12
 800906c:	f340 80a4 	ble.w	80091b8 <forward_conv2d_nl_pool+0x714>
 8009070:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8009074:	f04f 0c00 	mov.w	ip, #0
 8009078:	2e00      	cmp	r6, #0
 800907a:	dd19      	ble.n	80090b0 <forward_conv2d_nl_pool+0x60c>
 800907c:	2100      	movs	r1, #0
 800907e:	eb00 040e 	add.w	r4, r0, lr
 8009082:	4284      	cmp	r4, r0
 8009084:	d910      	bls.n	80090a8 <forward_conv2d_nl_pool+0x604>
 8009086:	4603      	mov	r3, r0
 8009088:	462a      	mov	r2, r5
 800908a:	ecb3 7a01 	vldmia	r3!, {s14}
 800908e:	ecf2 6a01 	vldmia	r2!, {s13}
 8009092:	429c      	cmp	r4, r3
 8009094:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009098:	d8f7      	bhi.n	800908a <forward_conv2d_nl_pool+0x5e6>
 800909a:	43c3      	mvns	r3, r0
 800909c:	441c      	add	r4, r3
 800909e:	f024 0403 	bic.w	r4, r4, #3
 80090a2:	3404      	adds	r4, #4
 80090a4:	4425      	add	r5, r4
 80090a6:	4420      	add	r0, r4
 80090a8:	3101      	adds	r1, #1
 80090aa:	428e      	cmp	r6, r1
 80090ac:	4448      	add	r0, r9
 80090ae:	d1e6      	bne.n	800907e <forward_conv2d_nl_pool+0x5da>
 80090b0:	f10c 0c01 	add.w	ip, ip, #1
 80090b4:	45e2      	cmp	sl, ip
 80090b6:	4458      	add	r0, fp
 80090b8:	4445      	add	r5, r8
 80090ba:	d1dd      	bne.n	8009078 <forward_conv2d_nl_pool+0x5d4>
 80090bc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80090c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090c4:	441d      	add	r5, r3
 80090c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090ca:	ece3 7a01 	vstmia	r3!, {s15}
 80090ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80090d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d1be      	bne.n	8009058 <forward_conv2d_nl_pool+0x5b4>
 80090da:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80090de:	69f9      	ldr	r1, [r7, #28]
 80090e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090e2:	4472      	add	r2, lr
 80090e4:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80090e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090ea:	1a52      	subs	r2, r2, r1
 80090ec:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80090f0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80090f4:	3301      	adds	r3, #1
 80090f6:	429a      	cmp	r2, r3
 80090f8:	673b      	str	r3, [r7, #112]	; 0x70
 80090fa:	d1a2      	bne.n	8009042 <forward_conv2d_nl_pool+0x59e>
 80090fc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009100:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009106:	4608      	mov	r0, r1
 8009108:	4410      	add	r0, r2
 800910a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800910e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8009112:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009116:	4401      	add	r1, r0
 8009118:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800911c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009120:	1a8a      	subs	r2, r1, r2
 8009122:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8009126:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800912a:	3301      	adds	r3, #1
 800912c:	429a      	cmp	r2, r3
 800912e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009130:	f47f af1d 	bne.w	8008f6e <forward_conv2d_nl_pool+0x4ca>
 8009134:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009138:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800913c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	2a00      	cmp	r2, #0
 8009144:	f000 8210 	beq.w	8009568 <forward_conv2d_nl_pool+0xac4>
 8009148:	2400      	movs	r4, #0
 800914a:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 800914e:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 8009152:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 8009156:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 800915a:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800915e:	609e      	str	r6, [r3, #8]
 8009160:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009164:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8009168:	462b      	mov	r3, r5
 800916a:	4641      	mov	r1, r8
 800916c:	4640      	mov	r0, r8
 800916e:	47a0      	blx	r4
 8009170:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009174:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8009178:	6859      	ldr	r1, [r3, #4]
 800917a:	68da      	ldr	r2, [r3, #12]
 800917c:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8009180:	4405      	add	r5, r0
 8009182:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009186:	0089      	lsls	r1, r1, #2
 8009188:	4406      	add	r6, r0
 800918a:	eba5 0c09 	sub.w	ip, r5, r9
 800918e:	1850      	adds	r0, r2, r1
 8009190:	45a4      	cmp	ip, r4
 8009192:	bfa8      	it	ge
 8009194:	464d      	movge	r5, r9
 8009196:	4286      	cmp	r6, r0
 8009198:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800919c:	bf28      	it	cs
 800919e:	1a76      	subcs	r6, r6, r1
 80091a0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80091a4:	3001      	adds	r0, #1
 80091a6:	4281      	cmp	r1, r0
 80091a8:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 80091ac:	d1d7      	bne.n	800915e <forward_conv2d_nl_pool+0x6ba>
 80091ae:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 80091b2:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 80091b6:	e019      	b.n	80091ec <forward_conv2d_nl_pool+0x748>
 80091b8:	461a      	mov	r2, r3
 80091ba:	e781      	b.n	80090c0 <forward_conv2d_nl_pool+0x61c>
 80091bc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80091c0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80091c4:	fb90 f3f2 	sdiv	r3, r0, r2
 80091c8:	fb02 0313 	mls	r3, r2, r3, r0
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	4605      	mov	r5, r0
 80091d0:	fb93 f0f2 	sdiv	r0, r3, r2
 80091d4:	fb02 3010 	mls	r0, r2, r0, r3
 80091d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091da:	462e      	mov	r6, r5
 80091dc:	18c4      	adds	r4, r0, r3
 80091de:	eb02 0805 	add.w	r8, r2, r5
 80091e2:	e6d5      	b.n	8008f90 <forward_conv2d_nl_pool+0x4ec>
 80091e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80091e8:	699b      	ldr	r3, [r3, #24]
 80091ea:	68da      	ldr	r2, [r3, #12]
 80091ec:	609a      	str	r2, [r3, #8]
 80091ee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80091f2:	3301      	adds	r3, #1
 80091f4:	b21b      	sxth	r3, r3
 80091f6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80091fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091fe:	3b01      	subs	r3, #1
 8009200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009204:	f100 83bf 	bmi.w	8009986 <forward_conv2d_nl_pool+0xee2>
 8009208:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800920c:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8009210:	42a3      	cmp	r3, r4
 8009212:	f200 839d 	bhi.w	8009950 <forward_conv2d_nl_pool+0xeac>
 8009216:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800921a:	b29b      	uxth	r3, r3
 800921c:	6990      	ldr	r0, [r2, #24]
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009224:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 8009228:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 800922c:	1a9b      	subs	r3, r3, r2
 800922e:	fa1f f188 	uxth.w	r1, r8
 8009232:	b29a      	uxth	r2, r3
 8009234:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009238:	9308      	str	r3, [sp, #32]
 800923a:	9105      	str	r1, [sp, #20]
 800923c:	2601      	movs	r6, #1
 800923e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009242:	9607      	str	r6, [sp, #28]
 8009244:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8009248:	9506      	str	r5, [sp, #24]
 800924a:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 800924e:	9304      	str	r3, [sp, #16]
 8009250:	1a64      	subs	r4, r4, r1
 8009252:	b2b1      	uxth	r1, r6
 8009254:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	e9cd 5102 	strd	r5, r1, [sp, #8]
 800925e:	b224      	sxth	r4, r4
 8009260:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8009264:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8009268:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800926c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800926e:	47a0      	blx	r4
 8009270:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8009274:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8009278:	688a      	ldr	r2, [r1, #8]
 800927a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800927c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8009280:	fa0f f388 	sxth.w	r3, r8
 8009284:	1af3      	subs	r3, r6, r3
 8009286:	4422      	add	r2, r4
 8009288:	462e      	mov	r6, r5
 800928a:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800928e:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 8009292:	608a      	str	r2, [r1, #8]
 8009294:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009298:	4426      	add	r6, r4
 800929a:	b21b      	sxth	r3, r3
 800929c:	1b2c      	subs	r4, r5, r4
 800929e:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 80092a2:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 80092a4:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80092a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80092ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80092b0:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 80092b4:	3001      	adds	r0, #1
 80092b6:	442c      	add	r4, r5
 80092b8:	4283      	cmp	r3, r0
 80092ba:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 80092be:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 80092c2:	f63f adc7 	bhi.w	8008e54 <forward_conv2d_nl_pool+0x3b0>
 80092c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	68da      	ldr	r2, [r3, #12]
 80092ce:	609a      	str	r2, [r3, #8]
 80092d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80092d4:	68d3      	ldr	r3, [r2, #12]
 80092d6:	6093      	str	r3, [r2, #8]
 80092d8:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80092dc:	46bd      	mov	sp, r7
 80092de:	ecbd 8b10 	vpop	{d8-d15}
 80092e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80092e8:	2901      	cmp	r1, #1
 80092ea:	f47f add7 	bne.w	8008e9c <forward_conv2d_nl_pool+0x3f8>
 80092ee:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80092f2:	2900      	cmp	r1, #0
 80092f4:	f43f af76 	beq.w	80091e4 <forward_conv2d_nl_pool+0x740>
 80092f8:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80092fc:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 8009300:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8009304:	1ad2      	subs	r2, r2, r3
 8009306:	1a8c      	subs	r4, r1, r2
 8009308:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800930c:	00b2      	lsls	r2, r6, #2
 800930e:	fb02 f204 	mul.w	r2, r2, r4
 8009312:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8009316:	fbb1 f1f0 	udiv	r1, r1, r0
 800931a:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 800931e:	460d      	mov	r5, r1
 8009320:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009322:	62ba      	str	r2, [r7, #40]	; 0x28
 8009324:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8009328:	0082      	lsls	r2, r0, #2
 800932a:	65ba      	str	r2, [r7, #88]	; 0x58
 800932c:	00ca      	lsls	r2, r1, #3
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	00aa      	lsls	r2, r5, #2
 8009332:	60ba      	str	r2, [r7, #8]
 8009334:	fb03 f206 	mul.w	r2, r3, r6
 8009338:	67ba      	str	r2, [r7, #120]	; 0x78
 800933a:	69ba      	ldr	r2, [r7, #24]
 800933c:	fb02 f303 	mul.w	r3, r2, r3
 8009340:	617b      	str	r3, [r7, #20]
 8009342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009346:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800934a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800934e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009352:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009356:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800935a:	2300      	movs	r3, #0
 800935c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009364:	2b00      	cmp	r3, #0
 8009366:	f2c0 8112 	blt.w	800958e <forward_conv2d_nl_pool+0xaea>
 800936a:	2100      	movs	r1, #0
 800936c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800936e:	460a      	mov	r2, r1
 8009370:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8009374:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8009378:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800937c:	4420      	add	r0, r4
 800937e:	4408      	add	r0, r1
 8009380:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8009384:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8009388:	190c      	adds	r4, r1, r4
 800938a:	42ac      	cmp	r4, r5
 800938c:	bf28      	it	cs
 800938e:	462c      	movcs	r4, r5
 8009390:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 8009394:	0080      	lsls	r0, r0, #2
 8009396:	1aa4      	subs	r4, r4, r2
 8009398:	2d00      	cmp	r5, #0
 800939a:	f000 80e9 	beq.w	8009570 <forward_conv2d_nl_pool+0xacc>
 800939e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80093a2:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 80093a6:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80093aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80093ae:	42b5      	cmp	r5, r6
 80093b0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80093b4:	eba3 0204 	sub.w	r2, r3, r4
 80093b8:	eba1 0104 	sub.w	r1, r1, r4
 80093bc:	bf08      	it	eq
 80093be:	eef0 3a48 	vmoveq.f32	s7, s16
 80093c2:	462b      	mov	r3, r5
 80093c4:	697d      	ldr	r5, [r7, #20]
 80093c6:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 80093ca:	4428      	add	r0, r5
 80093cc:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 80093d0:	fb05 6e00 	mla	lr, r5, r0, r6
 80093d4:	eb0e 000b 	add.w	r0, lr, fp
 80093d8:	4586      	cmp	lr, r0
 80093da:	61f8      	str	r0, [r7, #28]
 80093dc:	f080 80a5 	bcs.w	800952a <forward_conv2d_nl_pool+0xa86>
 80093e0:	0092      	lsls	r2, r2, #2
 80093e2:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80093e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093e8:	fb01 f10b 	mul.w	r1, r1, fp
 80093ec:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80093f0:	f024 0803 	bic.w	r8, r4, #3
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	f000 8098 	beq.w	800952a <forward_conv2d_nl_pool+0xa86>
 80093fa:	f108 32ff 	add.w	r2, r8, #4294967295
 80093fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009400:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8009404:	0892      	lsrs	r2, r2, #2
 8009406:	3201      	adds	r2, #1
 8009408:	4401      	add	r1, r0
 800940a:	fb02 f00a 	mul.w	r0, r2, sl
 800940e:	6638      	str	r0, [r7, #96]	; 0x60
 8009410:	0110      	lsls	r0, r2, #4
 8009412:	0092      	lsls	r2, r2, #2
 8009414:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009416:	1aca      	subs	r2, r1, r3
 8009418:	613a      	str	r2, [r7, #16]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	6738      	str	r0, [r7, #112]	; 0x70
 800941e:	4413      	add	r3, r2
 8009420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009424:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800942a:	4413      	add	r3, r2
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	4413      	add	r3, r2
 8009436:	677b      	str	r3, [r7, #116]	; 0x74
 8009438:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800943c:	ecf3 6a01 	vldmia	r3!, {s13}
 8009440:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009444:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009448:	2b00      	cmp	r3, #0
 800944a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800944e:	dd57      	ble.n	8009500 <forward_conv2d_nl_pool+0xa5c>
 8009450:	4676      	mov	r6, lr
 8009452:	f04f 0c00 	mov.w	ip, #0
 8009456:	f1b8 0f00 	cmp.w	r8, #0
 800945a:	f340 8087 	ble.w	800956c <forward_conv2d_nl_pool+0xac8>
 800945e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009462:	f109 0310 	add.w	r3, r9, #16
 8009466:	18b1      	adds	r1, r6, r2
 8009468:	2000      	movs	r0, #0
 800946a:	4632      	mov	r2, r6
 800946c:	eb02 050b 	add.w	r5, r2, fp
 8009470:	ed95 7a00 	vldr	s14, [r5]
 8009474:	ed53 7a03 	vldr	s15, [r3, #-12]
 8009478:	ed92 4a00 	vldr	s8, [r2]
 800947c:	ed53 4a04 	vldr	s9, [r3, #-16]
 8009480:	ed91 5a00 	vldr	s10, [r1]
 8009484:	ed53 5a02 	vldr	s11, [r3, #-8]
 8009488:	ed13 6a01 	vldr	s12, [r3, #-4]
 800948c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009490:	eb01 050b 	add.w	r5, r1, fp
 8009494:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009498:	3004      	adds	r0, #4
 800949a:	4540      	cmp	r0, r8
 800949c:	ed95 7a00 	vldr	s14, [r5]
 80094a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80094a4:	4452      	add	r2, sl
 80094a6:	4451      	add	r1, sl
 80094a8:	f103 0310 	add.w	r3, r3, #16
 80094ac:	eee7 7a06 	vfma.f32	s15, s14, s12
 80094b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80094b4:	dbda      	blt.n	800946c <forward_conv2d_nl_pool+0x9c8>
 80094b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094b8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80094ba:	441e      	add	r6, r3
 80094bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094be:	4499      	add	r9, r3
 80094c0:	42a0      	cmp	r0, r4
 80094c2:	da11      	bge.n	80094e8 <forward_conv2d_nl_pool+0xa44>
 80094c4:	4602      	mov	r2, r0
 80094c6:	4633      	mov	r3, r6
 80094c8:	4649      	mov	r1, r9
 80094ca:	edd3 7a00 	vldr	s15, [r3]
 80094ce:	ecb1 7a01 	vldmia	r1!, {s14}
 80094d2:	3201      	adds	r2, #1
 80094d4:	42a2      	cmp	r2, r4
 80094d6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80094da:	445b      	add	r3, fp
 80094dc:	d1f5      	bne.n	80094ca <forward_conv2d_nl_pool+0xa26>
 80094de:	1a20      	subs	r0, r4, r0
 80094e0:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 80094e4:	fb00 660b 	mla	r6, r0, fp, r6
 80094e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094ec:	441e      	add	r6, r3
 80094ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094f2:	4499      	add	r9, r3
 80094f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80094f8:	f10c 0c01 	add.w	ip, ip, #1
 80094fc:	4563      	cmp	r3, ip
 80094fe:	d1aa      	bne.n	8009456 <forward_conv2d_nl_pool+0x9b2>
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	4499      	add	r9, r3
 8009504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009506:	ece3 6a01 	vstmia	r3!, {s13}
 800950a:	677b      	str	r3, [r7, #116]	; 0x74
 800950c:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 8009510:	4293      	cmp	r3, r2
 8009512:	d191      	bne.n	8009438 <forward_conv2d_nl_pool+0x994>
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	1a9b      	subs	r3, r3, r2
 800951a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	f10e 0e04 	add.w	lr, lr, #4
 8009524:	459e      	cmp	lr, r3
 8009526:	f4ff af7d 	bcc.w	8009424 <forward_conv2d_nl_pool+0x980>
 800952a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800952e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8009532:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009536:	440a      	add	r2, r1
 8009538:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800953c:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8009540:	4608      	mov	r0, r1
 8009542:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009546:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800954a:	4410      	add	r0, r2
 800954c:	1a8a      	subs	r2, r1, r2
 800954e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8009552:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8009556:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800955a:	3301      	adds	r3, #1
 800955c:	429a      	cmp	r2, r3
 800955e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009562:	f47f aefd 	bne.w	8009360 <forward_conv2d_nl_pool+0x8bc>
 8009566:	e5e7      	b.n	8009138 <forward_conv2d_nl_pool+0x694>
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	e63f      	b.n	80091ec <forward_conv2d_nl_pool+0x748>
 800956c:	2000      	movs	r0, #0
 800956e:	e7a7      	b.n	80094c0 <forward_conv2d_nl_pool+0xa1c>
 8009570:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009574:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8009578:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800957c:	1b19      	subs	r1, r3, r4
 800957e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009582:	eef0 3a48 	vmov.f32	s7, s16
 8009586:	1b1a      	subs	r2, r3, r4
 8009588:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800958c:	e71a      	b.n	80093c4 <forward_conv2d_nl_pool+0x920>
 800958e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8009592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009594:	460a      	mov	r2, r1
 8009596:	440b      	add	r3, r1
 8009598:	e6ea      	b.n	8009370 <forward_conv2d_nl_pool+0x8cc>
 800959a:	b168      	cbz	r0, 80095b8 <forward_conv2d_nl_pool+0xb14>
 800959c:	6882      	ldr	r2, [r0, #8]
 800959e:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 80095a2:	2201      	movs	r2, #1
 80095a4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80095a8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80095ac:	f7ff bb29 	b.w	8008c02 <forward_conv2d_nl_pool+0x15e>
 80095b0:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80095b4:	f7ff bb08 	b.w	8008bc8 <forward_conv2d_nl_pool+0x124>
 80095b8:	2201      	movs	r2, #1
 80095ba:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80095be:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80095c2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80095c6:	f7ff bb1c 	b.w	8008c02 <forward_conv2d_nl_pool+0x15e>
 80095ca:	3118      	adds	r1, #24
 80095cc:	d008      	beq.n	80095e0 <forward_conv2d_nl_pool+0xb3c>
 80095ce:	462a      	mov	r2, r5
 80095d0:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 80095d4:	4629      	mov	r1, r5
 80095d6:	f7ff ba93 	b.w	8008b00 <forward_conv2d_nl_pool+0x5c>
 80095da:	4691      	mov	r9, r2
 80095dc:	f7ff ba7d 	b.w	8008ada <forward_conv2d_nl_pool+0x36>
 80095e0:	68cb      	ldr	r3, [r1, #12]
 80095e2:	deff      	udf	#255	; 0xff
 80095e4:	2300      	movs	r3, #0
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	deff      	udf	#255	; 0xff
 80095ea:	4694      	mov	ip, r2
 80095ec:	f7ff ba6c 	b.w	8008ac8 <forward_conv2d_nl_pool+0x24>
 80095f0:	6873      	ldr	r3, [r6, #4]
 80095f2:	deff      	udf	#255	; 0xff
 80095f4:	2200      	movs	r2, #0
 80095f6:	f7ff ba82 	b.w	8008afe <forward_conv2d_nl_pool+0x5a>
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	deff      	udf	#255	; 0xff
 80095fe:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8009602:	2a00      	cmp	r2, #0
 8009604:	f43f ab60 	beq.w	8008cc8 <forward_conv2d_nl_pool+0x224>
 8009608:	2e03      	cmp	r6, #3
 800960a:	d9eb      	bls.n	80095e4 <forward_conv2d_nl_pool+0xb40>
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009610:	b323      	cbz	r3, 800965c <forward_conv2d_nl_pool+0xbb8>
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	b313      	cbz	r3, 800965c <forward_conv2d_nl_pool+0xbb8>
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800961c:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8009620:	9301      	str	r3, [sp, #4]
 8009622:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8009626:	9000      	str	r0, [sp, #0]
 8009628:	4673      	mov	r3, lr
 800962a:	4620      	mov	r0, r4
 800962c:	f7ff f9ea 	bl	8008a04 <ai_dict_decompress_f32>
 8009630:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009634:	b17c      	cbz	r4, 8009656 <forward_conv2d_nl_pool+0xbb2>
 8009636:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800963a:	881e      	ldrh	r6, [r3, #0]
 800963c:	f7ff bb44 	b.w	8008cc8 <forward_conv2d_nl_pool+0x224>
 8009640:	b178      	cbz	r0, 8009662 <forward_conv2d_nl_pool+0xbbe>
 8009642:	6881      	ldr	r1, [r0, #8]
 8009644:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8009648:	2201      	movs	r2, #1
 800964a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800964e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009652:	f7ff bad6 	b.w	8008c02 <forward_conv2d_nl_pool+0x15e>
 8009656:	881e      	ldrh	r6, [r3, #0]
 8009658:	f7ff bb36 	b.w	8008cc8 <forward_conv2d_nl_pool+0x224>
 800965c:	2300      	movs	r3, #0
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	deff      	udf	#255	; 0xff
 8009662:	2201      	movs	r2, #1
 8009664:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8009668:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800966c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009670:	f7ff bac7 	b.w	8008c02 <forward_conv2d_nl_pool+0x15e>
 8009674:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8009676:	2801      	cmp	r0, #1
 8009678:	f47f ac10 	bne.w	8008e9c <forward_conv2d_nl_pool+0x3f8>
 800967c:	1ad2      	subs	r2, r2, r3
 800967e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009680:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8009684:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8009688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800968a:	fb00 4101 	mla	r1, r0, r1, r4
 800968e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8009692:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8009696:	f080 81c4 	bcs.w	8009a22 <forward_conv2d_nl_pool+0xf7e>
 800969a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800969e:	2a00      	cmp	r2, #0
 80096a0:	f43f ad4a 	beq.w	8009138 <forward_conv2d_nl_pool+0x694>
 80096a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80096a8:	fb02 f303 	mul.w	r3, r2, r3
 80096ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096ae:	677b      	str	r3, [r7, #116]	; 0x74
 80096b0:	1a9b      	subs	r3, r3, r2
 80096b2:	663b      	str	r3, [r7, #96]	; 0x60
 80096b4:	188b      	adds	r3, r1, r2
 80096b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80096c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80096c8:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 80096cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096d4:	2300      	movs	r3, #0
 80096d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f000 8133 	beq.w	800994a <forward_conv2d_nl_pool+0xea6>
 80096e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096e8:	ed93 6a00 	vldr	s12, [r3]
 80096ec:	3304      	adds	r3, #4
 80096ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 8101 	beq.w	80098fe <forward_conv2d_nl_pool+0xe5a>
 80096fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009700:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009704:	eb03 0802 	add.w	r8, r3, r2
 8009708:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800970a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800970e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009718:	67bb      	str	r3, [r7, #120]	; 0x78
 800971a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800971e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009722:	f04f 0b00 	mov.w	fp, #0
 8009726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800972a:	2b00      	cmp	r3, #0
 800972c:	f2c0 8104 	blt.w	8009938 <forward_conv2d_nl_pool+0xe94>
 8009730:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009734:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009736:	2300      	movs	r3, #0
 8009738:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800973c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8009740:	eb02 0c04 	add.w	ip, r2, r4
 8009744:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009748:	4540      	cmp	r0, r8
 800974a:	bf94      	ite	ls
 800974c:	ebc3 0300 	rsbls	r3, r3, r0
 8009750:	ebc3 0308 	rsbhi	r3, r3, r8
 8009754:	eba2 0903 	sub.w	r9, r2, r3
 8009758:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800975c:	1ac4      	subs	r4, r0, r3
 800975e:	fb03 f302 	mul.w	r3, r3, r2
 8009762:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8009766:	2a00      	cmp	r2, #0
 8009768:	f340 80e3 	ble.w	8009932 <forward_conv2d_nl_pool+0xe8e>
 800976c:	f023 050f 	bic.w	r5, r3, #15
 8009770:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8009774:	1e68      	subs	r0, r5, #1
 8009776:	0900      	lsrs	r0, r0, #4
 8009778:	3001      	adds	r0, #1
 800977a:	fb06 f204 	mul.w	r2, r6, r4
 800977e:	673a      	str	r2, [r7, #112]	; 0x70
 8009780:	0102      	lsls	r2, r0, #4
 8009782:	65ba      	str	r2, [r7, #88]	; 0x58
 8009784:	fb06 f909 	mul.w	r9, r6, r9
 8009788:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800978c:	eef0 6a46 	vmov.f32	s13, s12
 8009790:	f04f 0e00 	mov.w	lr, #0
 8009794:	4662      	mov	r2, ip
 8009796:	2d00      	cmp	r5, #0
 8009798:	f340 80c9 	ble.w	800992e <forward_conv2d_nl_pool+0xe8a>
 800979c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80097a0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80097a4:	2600      	movs	r6, #0
 80097a6:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 80097aa:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80097ae:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 80097b2:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 80097b6:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 80097ba:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 80097be:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80097c2:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 80097c6:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 80097ca:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 80097ce:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 80097d2:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 80097d6:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 80097da:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 80097de:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 80097e2:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 80097e6:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 80097ea:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 80097ee:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 80097f2:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 80097f6:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80097fa:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80097fe:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8009802:	ed50 3a04 	vldr	s7, [r0, #-16]
 8009806:	ed14 4a04 	vldr	s8, [r4, #-16]
 800980a:	ed50 4a03 	vldr	s9, [r0, #-12]
 800980e:	ed14 5a03 	vldr	s10, [r4, #-12]
 8009812:	ed50 5a02 	vldr	s11, [r0, #-8]
 8009816:	ed14 7a02 	vldr	s14, [r4, #-8]
 800981a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800981e:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8009822:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009826:	3610      	adds	r6, #16
 8009828:	42ae      	cmp	r6, r5
 800982a:	ed14 fa01 	vldr	s30, [r4, #-4]
 800982e:	ed50 ea01 	vldr	s29, [r0, #-4]
 8009832:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8009836:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800983a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800983e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8009842:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8009846:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800984a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800984e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009852:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009856:	eee0 7a81 	vfma.f32	s15, s1, s2
 800985a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800985e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009862:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009866:	eee4 7a85 	vfma.f32	s15, s9, s10
 800986a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800986e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009872:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009876:	db96      	blt.n	80097a6 <forward_conv2d_nl_pool+0xd02>
 8009878:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800987a:	4451      	add	r1, sl
 800987c:	4452      	add	r2, sl
 800987e:	4283      	cmp	r3, r0
 8009880:	dd0f      	ble.n	80098a2 <forward_conv2d_nl_pool+0xdfe>
 8009882:	4604      	mov	r4, r0
 8009884:	468c      	mov	ip, r1
 8009886:	4616      	mov	r6, r2
 8009888:	ecb6 7a01 	vldmia	r6!, {s14}
 800988c:	ecfc 7a01 	vldmia	ip!, {s15}
 8009890:	3401      	adds	r4, #1
 8009892:	42a3      	cmp	r3, r4
 8009894:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009898:	d1f6      	bne.n	8009888 <forward_conv2d_nl_pool+0xde4>
 800989a:	1a18      	subs	r0, r3, r0
 800989c:	0080      	lsls	r0, r0, #2
 800989e:	4402      	add	r2, r0
 80098a0:	4401      	add	r1, r0
 80098a2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80098a4:	4402      	add	r2, r0
 80098a6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80098aa:	f10e 0e01 	add.w	lr, lr, #1
 80098ae:	4570      	cmp	r0, lr
 80098b0:	4449      	add	r1, r9
 80098b2:	f47f af70 	bne.w	8009796 <forward_conv2d_nl_pool+0xcf2>
 80098b6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80098ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098bc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80098c0:	edc3 6a00 	vstr	s13, [r3]
 80098c4:	4608      	mov	r0, r1
 80098c6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80098ca:	440b      	add	r3, r1
 80098cc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80098d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80098d2:	4410      	add	r0, r2
 80098d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098d6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80098da:	4608      	mov	r0, r1
 80098dc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80098e0:	4418      	add	r0, r3
 80098e2:	1acb      	subs	r3, r1, r3
 80098e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80098e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80098ec:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80098f0:	f10b 0b01 	add.w	fp, fp, #1
 80098f4:	455b      	cmp	r3, fp
 80098f6:	eba8 0802 	sub.w	r8, r8, r2
 80098fa:	f47f af14 	bne.w	8009726 <forward_conv2d_nl_pool+0xc82>
 80098fe:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009902:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009908:	440a      	add	r2, r1
 800990a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800990e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009912:	3204      	adds	r2, #4
 8009914:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8009918:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800991c:	3301      	adds	r3, #1
 800991e:	429a      	cmp	r2, r3
 8009920:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009924:	f47f aed9 	bne.w	80096da <forward_conv2d_nl_pool+0xc36>
 8009928:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800992c:	e404      	b.n	8009138 <forward_conv2d_nl_pool+0x694>
 800992e:	2000      	movs	r0, #0
 8009930:	e7a5      	b.n	800987e <forward_conv2d_nl_pool+0xdda>
 8009932:	eef0 6a46 	vmov.f32	s13, s12
 8009936:	e7be      	b.n	80098b6 <forward_conv2d_nl_pool+0xe12>
 8009938:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800993c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009940:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8009944:	eba8 0303 	sub.w	r3, r8, r3
 8009948:	e6f6      	b.n	8009738 <forward_conv2d_nl_pool+0xc94>
 800994a:	eeb0 6a48 	vmov.f32	s12, s16
 800994e:	e6d0      	b.n	80096f2 <forward_conv2d_nl_pool+0xc4e>
 8009950:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009958:	4611      	mov	r1, r2
 800995a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800995e:	4419      	add	r1, r3
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009966:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800996c:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8009970:	4413      	add	r3, r2
 8009972:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009976:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800997a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800997e:	4293      	cmp	r3, r2
 8009980:	f63f aa68 	bhi.w	8008e54 <forward_conv2d_nl_pool+0x3b0>
 8009984:	e49f      	b.n	80092c6 <forward_conv2d_nl_pool+0x822>
 8009986:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800998a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800998e:	699a      	ldr	r2, [r3, #24]
 8009990:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8009994:	68d1      	ldr	r1, [r2, #12]
 8009996:	6853      	ldr	r3, [r2, #4]
 8009998:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800999a:	fb00 4012 	mls	r0, r0, r2, r4
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4281      	cmp	r1, r0
 80099a2:	bf88      	it	hi
 80099a4:	18c0      	addhi	r0, r0, r3
 80099a6:	4281      	cmp	r1, r0
 80099a8:	eb01 0203 	add.w	r2, r1, r3
 80099ac:	d216      	bcs.n	80099dc <forward_conv2d_nl_pool+0xf38>
 80099ae:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 80099b2:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 80099b6:	42a1      	cmp	r1, r4
 80099b8:	d010      	beq.n	80099dc <forward_conv2d_nl_pool+0xf38>
 80099ba:	4290      	cmp	r0, r2
 80099bc:	d20e      	bcs.n	80099dc <forward_conv2d_nl_pool+0xf38>
 80099be:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80099c2:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 80099c6:	f850 3b04 	ldr.w	r3, [r0], #4
 80099ca:	f841 3b04 	str.w	r3, [r1], #4
 80099ce:	69a2      	ldr	r2, [r4, #24]
 80099d0:	6853      	ldr	r3, [r2, #4]
 80099d2:	68d2      	ldr	r2, [r2, #12]
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	441a      	add	r2, r3
 80099d8:	4282      	cmp	r2, r0
 80099da:	d8f4      	bhi.n	80099c6 <forward_conv2d_nl_pool+0xf22>
 80099dc:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80099e0:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80099e4:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 80099e8:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80099ea:	4420      	add	r0, r4
 80099ec:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80099f0:	1a40      	subs	r0, r0, r1
 80099f2:	4421      	add	r1, r4
 80099f4:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 80099f8:	442c      	add	r4, r5
 80099fa:	b209      	sxth	r1, r1
 80099fc:	b200      	sxth	r0, r0
 80099fe:	4294      	cmp	r4, r2
 8009a00:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8009a04:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8009a08:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	f4ff abfb 	bcc.w	8009208 <forward_conv2d_nl_pool+0x764>
 8009a12:	425b      	negs	r3, r3
 8009a14:	4419      	add	r1, r3
 8009a16:	4291      	cmp	r1, r2
 8009a18:	d2fc      	bcs.n	8009a14 <forward_conv2d_nl_pool+0xf70>
 8009a1a:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8009a1e:	f7ff bbf3 	b.w	8009208 <forward_conv2d_nl_pool+0x764>
 8009a22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009a26:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 8009a2a:	320a      	adds	r2, #10
 8009a2c:	f022 0207 	bic.w	r2, r2, #7
 8009a30:	ebad 0d02 	sub.w	sp, sp, r2
 8009a34:	aa0a      	add	r2, sp, #40	; 0x28
 8009a36:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8009a3a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009a3e:	2a00      	cmp	r2, #0
 8009a40:	f000 8153 	beq.w	8009cea <forward_conv2d_nl_pool+0x1246>
 8009a44:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009a48:	f8c7 b01c 	str.w	fp, [r7, #28]
 8009a4c:	fb02 f303 	mul.w	r3, r2, r3
 8009a50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a52:	663b      	str	r3, [r7, #96]	; 0x60
 8009a54:	1a9b      	subs	r3, r3, r2
 8009a56:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a5c:	f8c7 a014 	str.w	sl, [r7, #20]
 8009a60:	4413      	add	r3, r2
 8009a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a70:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a84:	b13b      	cbz	r3, 8009a96 <forward_conv2d_nl_pool+0xff2>
 8009a86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009a8a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8009a8e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8009a92:	f001 f825 	bl	800aae0 <memcpy>
 8009a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 8137 	beq.w	8009d0e <forward_conv2d_nl_pool+0x126a>
 8009aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aa2:	ed93 6a00 	vldr	s12, [r3]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009aaa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f000 8101 	beq.w	8009cb6 <forward_conv2d_nl_pool+0x1212>
 8009ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ab8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009abc:	eb03 0802 	add.w	r8, r3, r2
 8009ac0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ad0:	677b      	str	r3, [r7, #116]	; 0x74
 8009ad2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ada:	f04f 0b00 	mov.w	fp, #0
 8009ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f2c0 810a 	blt.w	8009cfc <forward_conv2d_nl_pool+0x1258>
 8009ae8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009aec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009aee:	2300      	movs	r3, #0
 8009af0:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 8009af4:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8009af8:	eb02 0c04 	add.w	ip, r2, r4
 8009afc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009b00:	4540      	cmp	r0, r8
 8009b02:	bf94      	ite	ls
 8009b04:	ebc3 0300 	rsbls	r3, r3, r0
 8009b08:	ebc3 0308 	rsbhi	r3, r3, r8
 8009b0c:	eba2 0903 	sub.w	r9, r2, r3
 8009b10:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8009b14:	1ac4      	subs	r4, r0, r3
 8009b16:	fb03 f302 	mul.w	r3, r3, r2
 8009b1a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8009b1e:	2a00      	cmp	r2, #0
 8009b20:	f340 80e9 	ble.w	8009cf6 <forward_conv2d_nl_pool+0x1252>
 8009b24:	f023 050f 	bic.w	r5, r3, #15
 8009b28:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8009b2c:	1e68      	subs	r0, r5, #1
 8009b2e:	0900      	lsrs	r0, r0, #4
 8009b30:	3001      	adds	r0, #1
 8009b32:	fb06 f204 	mul.w	r2, r6, r4
 8009b36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009b38:	0102      	lsls	r2, r0, #4
 8009b3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8009b3c:	fb06 f909 	mul.w	r9, r6, r9
 8009b40:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8009b44:	eef0 6a46 	vmov.f32	s13, s12
 8009b48:	f04f 0e00 	mov.w	lr, #0
 8009b4c:	4662      	mov	r2, ip
 8009b4e:	2d00      	cmp	r5, #0
 8009b50:	f340 80cf 	ble.w	8009cf2 <forward_conv2d_nl_pool+0x124e>
 8009b54:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8009b58:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8009b5c:	2600      	movs	r6, #0
 8009b5e:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8009b62:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8009b66:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8009b6a:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 8009b6e:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8009b72:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8009b76:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8009b7a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8009b7e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8009b82:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8009b86:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8009b8a:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8009b8e:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 8009b92:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8009b96:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8009b9a:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 8009b9e:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8009ba2:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8009ba6:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8009baa:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8009bae:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8009bb2:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 8009bb6:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8009bba:	ed50 3a04 	vldr	s7, [r0, #-16]
 8009bbe:	ed14 4a04 	vldr	s8, [r4, #-16]
 8009bc2:	ed54 4a03 	vldr	s9, [r4, #-12]
 8009bc6:	ed10 5a03 	vldr	s10, [r0, #-12]
 8009bca:	ed50 5a02 	vldr	s11, [r0, #-8]
 8009bce:	ed14 7a02 	vldr	s14, [r4, #-8]
 8009bd2:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8009bd6:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8009bda:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009bde:	3610      	adds	r6, #16
 8009be0:	42ae      	cmp	r6, r5
 8009be2:	ed14 fa01 	vldr	s30, [r4, #-4]
 8009be6:	ed50 ea01 	vldr	s29, [r0, #-4]
 8009bea:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8009bee:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009bf2:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8009bf6:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8009bfa:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8009bfe:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009c02:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009c06:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009c0a:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009c0e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8009c12:	eee1 7a82 	vfma.f32	s15, s3, s4
 8009c16:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009c1a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009c1e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009c22:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009c26:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009c2a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009c2e:	db96      	blt.n	8009b5e <forward_conv2d_nl_pool+0x10ba>
 8009c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c32:	4451      	add	r1, sl
 8009c34:	4452      	add	r2, sl
 8009c36:	4283      	cmp	r3, r0
 8009c38:	dd0f      	ble.n	8009c5a <forward_conv2d_nl_pool+0x11b6>
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	468c      	mov	ip, r1
 8009c3e:	4616      	mov	r6, r2
 8009c40:	ecb6 7a01 	vldmia	r6!, {s14}
 8009c44:	ecfc 7a01 	vldmia	ip!, {s15}
 8009c48:	3401      	adds	r4, #1
 8009c4a:	42a3      	cmp	r3, r4
 8009c4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009c50:	d1f6      	bne.n	8009c40 <forward_conv2d_nl_pool+0x119c>
 8009c52:	1a18      	subs	r0, r3, r0
 8009c54:	0080      	lsls	r0, r0, #2
 8009c56:	4402      	add	r2, r0
 8009c58:	4401      	add	r1, r0
 8009c5a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009c5c:	4402      	add	r2, r0
 8009c5e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8009c62:	f10e 0e01 	add.w	lr, lr, #1
 8009c66:	4570      	cmp	r0, lr
 8009c68:	4449      	add	r1, r9
 8009c6a:	f47f af70 	bne.w	8009b4e <forward_conv2d_nl_pool+0x10aa>
 8009c6e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c74:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009c78:	edc3 6a00 	vstr	s13, [r3]
 8009c7c:	4608      	mov	r0, r1
 8009c7e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8009c82:	440b      	add	r3, r1
 8009c84:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009c88:	677b      	str	r3, [r7, #116]	; 0x74
 8009c8a:	4410      	add	r0, r2
 8009c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c8e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8009c92:	4608      	mov	r0, r1
 8009c94:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8009c98:	4418      	add	r0, r3
 8009c9a:	1acb      	subs	r3, r1, r3
 8009c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ca0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009ca4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8009ca8:	f10b 0b01 	add.w	fp, fp, #1
 8009cac:	455b      	cmp	r3, fp
 8009cae:	eba8 0802 	sub.w	r8, r8, r2
 8009cb2:	f47f af14 	bne.w	8009ade <forward_conv2d_nl_pool+0x103a>
 8009cb6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009cba:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8009cbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cc2:	440a      	add	r2, r1
 8009cc4:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8009cc8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009ccc:	3204      	adds	r2, #4
 8009cce:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8009cd2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009cde:	f47f aecf 	bne.w	8009a80 <forward_conv2d_nl_pool+0xfdc>
 8009ce2:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8009ce6:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8009cea:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8009cee:	f7ff ba23 	b.w	8009138 <forward_conv2d_nl_pool+0x694>
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	e79f      	b.n	8009c36 <forward_conv2d_nl_pool+0x1192>
 8009cf6:	eef0 6a46 	vmov.f32	s13, s12
 8009cfa:	e7b8      	b.n	8009c6e <forward_conv2d_nl_pool+0x11ca>
 8009cfc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009d00:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009d04:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8009d08:	eba8 0303 	sub.w	r3, r8, r3
 8009d0c:	e6f0      	b.n	8009af0 <forward_conv2d_nl_pool+0x104c>
 8009d0e:	eeb0 6a48 	vmov.f32	s12, s16
 8009d12:	e6ca      	b.n	8009aaa <forward_conv2d_nl_pool+0x1006>

08009d14 <forward_dense>:
 8009d14:	6983      	ldr	r3, [r0, #24]
 8009d16:	881a      	ldrh	r2, [r3, #0]
 8009d18:	2a00      	cmp	r2, #0
 8009d1a:	f000 80b5 	beq.w	8009e88 <forward_dense+0x174>
 8009d1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d22:	ed2d 8b10 	vpush	{d8-d15}
 8009d26:	685f      	ldr	r7, [r3, #4]
 8009d28:	687e      	ldr	r6, [r7, #4]
 8009d2a:	b091      	sub	sp, #68	; 0x44
 8009d2c:	b106      	cbz	r6, 8009d30 <forward_dense+0x1c>
 8009d2e:	6836      	ldr	r6, [r6, #0]
 8009d30:	2a01      	cmp	r2, #1
 8009d32:	f240 80a6 	bls.w	8009e82 <forward_dense+0x16e>
 8009d36:	693d      	ldr	r5, [r7, #16]
 8009d38:	b105      	cbz	r5, 8009d3c <forward_dense+0x28>
 8009d3a:	682d      	ldr	r5, [r5, #0]
 8009d3c:	2a02      	cmp	r2, #2
 8009d3e:	f000 80a5 	beq.w	8009e8c <forward_dense+0x178>
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 821b 	beq.w	800a180 <forward_dense+0x46c>
 8009d4a:	6819      	ldr	r1, [r3, #0]
 8009d4c:	9106      	str	r1, [sp, #24]
 8009d4e:	f117 0118 	adds.w	r1, r7, #24
 8009d52:	f000 80c9 	beq.w	8009ee8 <forward_dense+0x1d4>
 8009d56:	8b39      	ldrh	r1, [r7, #24]
 8009d58:	2901      	cmp	r1, #1
 8009d5a:	f240 820e 	bls.w	800a17a <forward_dense+0x466>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 80c4 	beq.w	8009eec <forward_dense+0x1d8>
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	9307      	str	r3, [sp, #28]
 8009d68:	9b06      	ldr	r3, [sp, #24]
 8009d6a:	68ec      	ldr	r4, [r5, #12]
 8009d6c:	6998      	ldr	r0, [r3, #24]
 8009d6e:	68f1      	ldr	r1, [r6, #12]
 8009d70:	6803      	ldr	r3, [r0, #0]
 8009d72:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8009d76:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 8009d7a:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8009d7e:	f3c3 5141 	ubfx	r1, r3, #21, #2
 8009d82:	fa49 f101 	asr.w	r1, r9, r1
 8009d86:	910b      	str	r1, [sp, #44]	; 0x2c
 8009d88:	2a03      	cmp	r2, #3
 8009d8a:	fb0e f10c 	mul.w	r1, lr, ip
 8009d8e:	6864      	ldr	r4, [r4, #4]
 8009d90:	9108      	str	r1, [sp, #32]
 8009d92:	f000 81de 	beq.w	800a152 <forward_dense+0x43e>
 8009d96:	6abf      	ldr	r7, [r7, #40]	; 0x28
 8009d98:	b117      	cbz	r7, 8009da0 <forward_dense+0x8c>
 8009d9a:	683f      	ldr	r7, [r7, #0]
 8009d9c:	b107      	cbz	r7, 8009da0 <forward_dense+0x8c>
 8009d9e:	69bf      	ldr	r7, [r7, #24]
 8009da0:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8009da4:	2b04      	cmp	r3, #4
 8009da6:	f000 81d7 	beq.w	800a158 <forward_dense+0x444>
 8009daa:	2b08      	cmp	r3, #8
 8009dac:	f000 81d4 	beq.w	800a158 <forward_dense+0x444>
 8009db0:	f04f 0a00 	mov.w	sl, #0
 8009db4:	69ab      	ldr	r3, [r5, #24]
 8009db6:	69b2      	ldr	r2, [r6, #24]
 8009db8:	6899      	ldr	r1, [r3, #8]
 8009dba:	9b06      	ldr	r3, [sp, #24]
 8009dbc:	9104      	str	r1, [sp, #16]
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	6897      	ldr	r7, [r2, #8]
 8009dc2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8009dc6:	00a3      	lsls	r3, r4, #2
 8009dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009dca:	18ce      	adds	r6, r1, r3
 8009dcc:	9b08      	ldr	r3, [sp, #32]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d052      	beq.n	8009e78 <forward_dense+0x164>
 8009dd2:	f1a8 0310 	sub.w	r3, r8, #16
 8009dd6:	091b      	lsrs	r3, r3, #4
 8009dd8:	3301      	adds	r3, #1
 8009dda:	019b      	lsls	r3, r3, #6
 8009ddc:	930c      	str	r3, [sp, #48]	; 0x30
 8009dde:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8009de2:	930a      	str	r3, [sp, #40]	; 0x28
 8009de4:	2300      	movs	r3, #0
 8009de6:	9305      	str	r3, [sp, #20]
 8009de8:	eddf aace 	vldr	s21, [pc, #824]	; 800a124 <forward_dense+0x410>
 8009dec:	f008 030f 	and.w	r3, r8, #15
 8009df0:	930d      	str	r3, [sp, #52]	; 0x34
 8009df2:	9b06      	ldr	r3, [sp, #24]
 8009df4:	699b      	ldr	r3, [r3, #24]
 8009df6:	689d      	ldr	r5, [r3, #8]
 8009df8:	9b07      	ldr	r3, [sp, #28]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f000 818f 	beq.w	800a11e <forward_dense+0x40a>
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	689c      	ldr	r4, [r3, #8]
 8009e04:	9b04      	ldr	r3, [sp, #16]
 8009e06:	f1ba 0f00 	cmp.w	sl, #0
 8009e0a:	d071      	beq.n	8009ef0 <forward_dense+0x1dc>
 8009e0c:	42b3      	cmp	r3, r6
 8009e0e:	d229      	bcs.n	8009e64 <forward_dense+0x150>
 8009e10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e12:	469b      	mov	fp, r3
 8009e14:	ab0f      	add	r3, sp, #60	; 0x3c
 8009e16:	9303      	str	r3, [sp, #12]
 8009e18:	2a04      	cmp	r2, #4
 8009e1a:	4633      	mov	r3, r6
 8009e1c:	4646      	mov	r6, r8
 8009e1e:	4698      	mov	r8, r3
 8009e20:	d037      	beq.n	8009e92 <forward_dense+0x17e>
 8009e22:	2c00      	cmp	r4, #0
 8009e24:	f000 8180 	beq.w	800a128 <forward_dense+0x414>
 8009e28:	f8d4 c000 	ldr.w	ip, [r4]
 8009e2c:	9803      	ldr	r0, [sp, #12]
 8009e2e:	9600      	str	r6, [sp, #0]
 8009e30:	463b      	mov	r3, r7
 8009e32:	4629      	mov	r1, r5
 8009e34:	4652      	mov	r2, sl
 8009e36:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8009e3a:	f7fe fc57 	bl	80086ec <ai_dict8_dot_array_f32>
 8009e3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e40:	f84b 3b04 	str.w	r3, [fp], #4
 8009e44:	45c3      	cmp	fp, r8
 8009e46:	f104 0404 	add.w	r4, r4, #4
 8009e4a:	444d      	add	r5, r9
 8009e4c:	d3e9      	bcc.n	8009e22 <forward_dense+0x10e>
 8009e4e:	4643      	mov	r3, r8
 8009e50:	46b0      	mov	r8, r6
 8009e52:	461e      	mov	r6, r3
 8009e54:	9a04      	ldr	r2, [sp, #16]
 8009e56:	43d3      	mvns	r3, r2
 8009e58:	4433      	add	r3, r6
 8009e5a:	f023 0303 	bic.w	r3, r3, #3
 8009e5e:	3304      	adds	r3, #4
 8009e60:	18d3      	adds	r3, r2, r3
 8009e62:	9304      	str	r3, [sp, #16]
 8009e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e66:	9b05      	ldr	r3, [sp, #20]
 8009e68:	4417      	add	r7, r2
 8009e6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e6c:	4416      	add	r6, r2
 8009e6e:	9a08      	ldr	r2, [sp, #32]
 8009e70:	3301      	adds	r3, #1
 8009e72:	4293      	cmp	r3, r2
 8009e74:	9305      	str	r3, [sp, #20]
 8009e76:	d1bc      	bne.n	8009df2 <forward_dense+0xde>
 8009e78:	b011      	add	sp, #68	; 0x44
 8009e7a:	ecbd 8b10 	vpop	{d8-d15}
 8009e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e82:	2300      	movs	r3, #0
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	deff      	udf	#255	; 0xff
 8009e88:	6853      	ldr	r3, [r2, #4]
 8009e8a:	deff      	udf	#255	; 0xff
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	deff      	udf	#255	; 0xff
 8009e92:	b1a4      	cbz	r4, 8009ebe <forward_dense+0x1aa>
 8009e94:	f8d4 c000 	ldr.w	ip, [r4]
 8009e98:	9803      	ldr	r0, [sp, #12]
 8009e9a:	9600      	str	r6, [sp, #0]
 8009e9c:	463b      	mov	r3, r7
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	4652      	mov	r2, sl
 8009ea2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8009ea6:	f7fe fcef 	bl	8008888 <ai_dict4_dot_array_f32>
 8009eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eac:	f84b 3b04 	str.w	r3, [fp], #4
 8009eb0:	45c3      	cmp	fp, r8
 8009eb2:	f104 0404 	add.w	r4, r4, #4
 8009eb6:	444d      	add	r5, r9
 8009eb8:	d2c9      	bcs.n	8009e4e <forward_dense+0x13a>
 8009eba:	2c00      	cmp	r4, #0
 8009ebc:	d1ea      	bne.n	8009e94 <forward_dense+0x180>
 8009ebe:	4634      	mov	r4, r6
 8009ec0:	4646      	mov	r6, r8
 8009ec2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009ec6:	9400      	str	r4, [sp, #0]
 8009ec8:	463b      	mov	r3, r7
 8009eca:	4629      	mov	r1, r5
 8009ecc:	4652      	mov	r2, sl
 8009ece:	4640      	mov	r0, r8
 8009ed0:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8009ed4:	f7fe fcd8 	bl	8008888 <ai_dict4_dot_array_f32>
 8009ed8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eda:	f84b 3b04 	str.w	r3, [fp], #4
 8009ede:	45b3      	cmp	fp, r6
 8009ee0:	444d      	add	r5, r9
 8009ee2:	d3f0      	bcc.n	8009ec6 <forward_dense+0x1b2>
 8009ee4:	46a0      	mov	r8, r4
 8009ee6:	e7b5      	b.n	8009e54 <forward_dense+0x140>
 8009ee8:	9107      	str	r1, [sp, #28]
 8009eea:	e73d      	b.n	8009d68 <forward_dense+0x54>
 8009eec:	9307      	str	r3, [sp, #28]
 8009eee:	e73b      	b.n	8009d68 <forward_dense+0x54>
 8009ef0:	42b3      	cmp	r3, r6
 8009ef2:	d2b7      	bcs.n	8009e64 <forward_dense+0x150>
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ef8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8009efc:	eb07 0c03 	add.w	ip, r7, r3
 8009f00:	469e      	mov	lr, r3
 8009f02:	2c00      	cmp	r4, #0
 8009f04:	f000 80ff 	beq.w	800a106 <forward_dense+0x3f2>
 8009f08:	f1b8 0f0f 	cmp.w	r8, #15
 8009f0c:	edd4 fa00 	vldr	s31, [r4]
 8009f10:	eddf 6a84 	vldr	s13, [pc, #528]	; 800a124 <forward_dense+0x410>
 8009f14:	f104 0404 	add.w	r4, r4, #4
 8009f18:	f240 80fd 	bls.w	800a116 <forward_dense+0x402>
 8009f1c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009f20:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8009f24:	4641      	mov	r1, r8
 8009f26:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8009f2a:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8009f2e:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8009f32:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8009f36:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8009f3a:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8009f3e:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8009f42:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8009f46:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8009f4a:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8009f4e:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8009f52:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8009f56:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8009f5a:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8009f5e:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8009f62:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8009f66:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8009f6a:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8009f6e:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8009f72:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8009f76:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8009f7a:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8009f7e:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8009f82:	ed12 4a04 	vldr	s8, [r2, #-16]
 8009f86:	ed53 4a04 	vldr	s9, [r3, #-16]
 8009f8a:	ed13 5a03 	vldr	s10, [r3, #-12]
 8009f8e:	ed52 5a03 	vldr	s11, [r2, #-12]
 8009f92:	ed13 6a02 	vldr	s12, [r3, #-8]
 8009f96:	ed12 7a02 	vldr	s14, [r2, #-8]
 8009f9a:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8009f9e:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8009fa2:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8009fa6:	3910      	subs	r1, #16
 8009fa8:	290f      	cmp	r1, #15
 8009faa:	ed52 ea01 	vldr	s29, [r2, #-4]
 8009fae:	ed13 ea01 	vldr	s28, [r3, #-4]
 8009fb2:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8009fb6:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8009fba:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009fbe:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8009fc2:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8009fc6:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8009fca:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009fce:	eee8 7a88 	vfma.f32	s15, s17, s16
 8009fd2:	eee0 7a20 	vfma.f32	s15, s0, s1
 8009fd6:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009fda:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009fde:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009fe2:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009fe6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009fea:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009fee:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8009ff2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009ff6:	d896      	bhi.n	8009f26 <forward_dense+0x212>
 8009ff8:	eb05 010e 	add.w	r1, r5, lr
 8009ffc:	465b      	mov	r3, fp
 8009ffe:	4662      	mov	r2, ip
 800a000:	2b00      	cmp	r3, #0
 800a002:	d075      	beq.n	800a0f0 <forward_dense+0x3dc>
 800a004:	ed91 7a00 	vldr	s14, [r1]
 800a008:	edd2 7a00 	vldr	s15, [r2]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a012:	d06d      	beq.n	800a0f0 <forward_dense+0x3dc>
 800a014:	ed91 7a01 	vldr	s14, [r1, #4]
 800a018:	edd2 7a01 	vldr	s15, [r2, #4]
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a022:	d065      	beq.n	800a0f0 <forward_dense+0x3dc>
 800a024:	ed91 7a02 	vldr	s14, [r1, #8]
 800a028:	edd2 7a02 	vldr	s15, [r2, #8]
 800a02c:	2b03      	cmp	r3, #3
 800a02e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a032:	d05d      	beq.n	800a0f0 <forward_dense+0x3dc>
 800a034:	ed91 7a03 	vldr	s14, [r1, #12]
 800a038:	edd2 7a03 	vldr	s15, [r2, #12]
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a042:	d055      	beq.n	800a0f0 <forward_dense+0x3dc>
 800a044:	ed91 7a04 	vldr	s14, [r1, #16]
 800a048:	edd2 7a04 	vldr	s15, [r2, #16]
 800a04c:	2b05      	cmp	r3, #5
 800a04e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a052:	d04d      	beq.n	800a0f0 <forward_dense+0x3dc>
 800a054:	ed91 7a05 	vldr	s14, [r1, #20]
 800a058:	edd2 7a05 	vldr	s15, [r2, #20]
 800a05c:	2b06      	cmp	r3, #6
 800a05e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a062:	d045      	beq.n	800a0f0 <forward_dense+0x3dc>
 800a064:	ed91 7a06 	vldr	s14, [r1, #24]
 800a068:	edd2 7a06 	vldr	s15, [r2, #24]
 800a06c:	2b07      	cmp	r3, #7
 800a06e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a072:	d03d      	beq.n	800a0f0 <forward_dense+0x3dc>
 800a074:	ed91 7a07 	vldr	s14, [r1, #28]
 800a078:	edd2 7a07 	vldr	s15, [r2, #28]
 800a07c:	2b08      	cmp	r3, #8
 800a07e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a082:	d035      	beq.n	800a0f0 <forward_dense+0x3dc>
 800a084:	ed91 7a08 	vldr	s14, [r1, #32]
 800a088:	edd2 7a08 	vldr	s15, [r2, #32]
 800a08c:	2b09      	cmp	r3, #9
 800a08e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a092:	d02d      	beq.n	800a0f0 <forward_dense+0x3dc>
 800a094:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800a098:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800a09c:	2b0a      	cmp	r3, #10
 800a09e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0a2:	d025      	beq.n	800a0f0 <forward_dense+0x3dc>
 800a0a4:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800a0a8:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800a0ac:	2b0b      	cmp	r3, #11
 800a0ae:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0b2:	d01d      	beq.n	800a0f0 <forward_dense+0x3dc>
 800a0b4:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800a0b8:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800a0bc:	2b0c      	cmp	r3, #12
 800a0be:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0c2:	d015      	beq.n	800a0f0 <forward_dense+0x3dc>
 800a0c4:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800a0c8:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800a0cc:	2b0d      	cmp	r3, #13
 800a0ce:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0d2:	d00d      	beq.n	800a0f0 <forward_dense+0x3dc>
 800a0d4:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800a0d8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800a0dc:	2b0e      	cmp	r3, #14
 800a0de:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0e2:	d005      	beq.n	800a0f0 <forward_dense+0x3dc>
 800a0e4:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800a0e8:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a0ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a0f0:	444d      	add	r5, r9
 800a0f2:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800a0f6:	ece0 6a01 	vstmia	r0!, {s13}
 800a0fa:	42b0      	cmp	r0, r6
 800a0fc:	f4bf aeaa 	bcs.w	8009e54 <forward_dense+0x140>
 800a100:	2c00      	cmp	r4, #0
 800a102:	f47f af01 	bne.w	8009f08 <forward_dense+0x1f4>
 800a106:	f1b8 0f0f 	cmp.w	r8, #15
 800a10a:	eef0 fa6a 	vmov.f32	s31, s21
 800a10e:	eddf 6a05 	vldr	s13, [pc, #20]	; 800a124 <forward_dense+0x410>
 800a112:	f63f af03 	bhi.w	8009f1c <forward_dense+0x208>
 800a116:	4643      	mov	r3, r8
 800a118:	4629      	mov	r1, r5
 800a11a:	463a      	mov	r2, r7
 800a11c:	e770      	b.n	800a000 <forward_dense+0x2ec>
 800a11e:	461c      	mov	r4, r3
 800a120:	e670      	b.n	8009e04 <forward_dense+0xf0>
 800a122:	bf00      	nop
 800a124:	00000000 	.word	0x00000000
 800a128:	4634      	mov	r4, r6
 800a12a:	4646      	mov	r6, r8
 800a12c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a130:	9400      	str	r4, [sp, #0]
 800a132:	463b      	mov	r3, r7
 800a134:	4629      	mov	r1, r5
 800a136:	4652      	mov	r2, sl
 800a138:	4640      	mov	r0, r8
 800a13a:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800a13e:	f7fe fad5 	bl	80086ec <ai_dict8_dot_array_f32>
 800a142:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a144:	f84b 3b04 	str.w	r3, [fp], #4
 800a148:	455e      	cmp	r6, fp
 800a14a:	444d      	add	r5, r9
 800a14c:	d8f0      	bhi.n	800a130 <forward_dense+0x41c>
 800a14e:	46a0      	mov	r8, r4
 800a150:	e680      	b.n	8009e54 <forward_dense+0x140>
 800a152:	2300      	movs	r3, #0
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	deff      	udf	#255	; 0xff
 800a158:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800a15c:	2f00      	cmp	r7, #0
 800a15e:	f43f ae29 	beq.w	8009db4 <forward_dense+0xa0>
 800a162:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a166:	f000 fc67 	bl	800aa38 <ai_array_get_byte_size>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	4602      	mov	r2, r0
 800a16e:	4651      	mov	r1, sl
 800a170:	4618      	mov	r0, r3
 800a172:	f000 fcb5 	bl	800aae0 <memcpy>
 800a176:	4682      	mov	sl, r0
 800a178:	e61c      	b.n	8009db4 <forward_dense+0xa0>
 800a17a:	2300      	movs	r3, #0
 800a17c:	9307      	str	r3, [sp, #28]
 800a17e:	e5f3      	b.n	8009d68 <forward_dense+0x54>
 800a180:	9306      	str	r3, [sp, #24]
 800a182:	e5e4      	b.n	8009d4e <forward_dense+0x3a>

0800a184 <nl_func_relu_array_f32>:
 800a184:	b410      	push	{r4}
 800a186:	698c      	ldr	r4, [r1, #24]
 800a188:	6981      	ldr	r1, [r0, #24]
 800a18a:	68a3      	ldr	r3, [r4, #8]
 800a18c:	6889      	ldr	r1, [r1, #8]
 800a18e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a192:	3a01      	subs	r2, #1
 800a194:	0092      	lsls	r2, r2, #2
 800a196:	189b      	adds	r3, r3, r2
 800a198:	d216      	bcs.n	800a1c8 <nl_func_relu_array_f32+0x44>
 800a19a:	3204      	adds	r2, #4
 800a19c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a1d0 <nl_func_relu_array_f32+0x4c>
 800a1a0:	4411      	add	r1, r2
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a1a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b0:	bfb8      	it	lt
 800a1b2:	eef0 7a47 	vmovlt.f32	s15, s14
 800a1b6:	ed61 7a01 	vstmdb	r1!, {s15}
 800a1ba:	68a0      	ldr	r0, [r4, #8]
 800a1bc:	f1a3 0208 	sub.w	r2, r3, #8
 800a1c0:	4290      	cmp	r0, r2
 800a1c2:	f1a3 0304 	sub.w	r3, r3, #4
 800a1c6:	d9ed      	bls.n	800a1a4 <nl_func_relu_array_f32+0x20>
 800a1c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	00000000 	.word	0x00000000

0800a1d4 <nl_func_sm_array_f32>:
 800a1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d8:	ed2d 8b04 	vpush	{d8-d9}
 800a1dc:	b089      	sub	sp, #36	; 0x24
 800a1de:	698f      	ldr	r7, [r1, #24]
 800a1e0:	6984      	ldr	r4, [r0, #24]
 800a1e2:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800a1e6:	68bd      	ldr	r5, [r7, #8]
 800a1e8:	9402      	str	r4, [sp, #8]
 800a1ea:	4626      	mov	r6, r4
 800a1ec:	4696      	mov	lr, r2
 800a1ee:	eba2 020c 	sub.w	r2, r2, ip
 800a1f2:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800a1f6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	68b6      	ldr	r6, [r6, #8]
 800a1fc:	ebae 0e04 	sub.w	lr, lr, r4
 800a200:	4295      	cmp	r5, r2
 800a202:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800a206:	d354      	bcc.n	800a2b2 <nl_func_sm_array_f32+0xde>
 800a208:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800a20c:	f1cc 0200 	rsb	r2, ip, #0
 800a210:	00a4      	lsls	r4, r4, #2
 800a212:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800a216:	9303      	str	r3, [sp, #12]
 800a218:	9204      	str	r2, [sp, #16]
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4262      	negs	r2, r4
 800a21e:	9205      	str	r2, [sp, #20]
 800a220:	9301      	str	r3, [sp, #4]
 800a222:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800a226:	9b02      	ldr	r3, [sp, #8]
 800a228:	9a07      	ldr	r2, [sp, #28]
 800a22a:	60bd      	str	r5, [r7, #8]
 800a22c:	609e      	str	r6, [r3, #8]
 800a22e:	9b06      	ldr	r3, [sp, #24]
 800a230:	6992      	ldr	r2, [r2, #24]
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	6894      	ldr	r4, [r2, #8]
 800a236:	9a03      	ldr	r2, [sp, #12]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	2a01      	cmp	r2, #1
 800a23c:	ed93 8a00 	vldr	s16, [r3]
 800a240:	d940      	bls.n	800a2c4 <nl_func_sm_array_f32+0xf0>
 800a242:	9901      	ldr	r1, [sp, #4]
 800a244:	1d1a      	adds	r2, r3, #4
 800a246:	eb03 0b01 	add.w	fp, r3, r1
 800a24a:	ecf2 7a01 	vldmia	r2!, {s15}
 800a24e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a256:	bfb8      	it	lt
 800a258:	eeb0 8a67 	vmovlt.f32	s16, s15
 800a25c:	4593      	cmp	fp, r2
 800a25e:	d1f4      	bne.n	800a24a <nl_func_sm_array_f32+0x76>
 800a260:	eddf 8a1b 	vldr	s17, [pc, #108]	; 800a2d0 <nl_func_sm_array_f32+0xfc>
 800a264:	469a      	mov	sl, r3
 800a266:	46a1      	mov	r9, r4
 800a268:	46a0      	mov	r8, r4
 800a26a:	ecba 0a01 	vldmia	sl!, {s0}
 800a26e:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a272:	f003 f9d9 	bl	800d628 <expf>
 800a276:	45d3      	cmp	fp, sl
 800a278:	eca8 0a01 	vstmia	r8!, {s0}
 800a27c:	ee78 8a80 	vadd.f32	s17, s17, s0
 800a280:	d1f3      	bne.n	800a26a <nl_func_sm_array_f32+0x96>
 800a282:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a28a:	d00b      	beq.n	800a2a4 <nl_func_sm_array_f32+0xd0>
 800a28c:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800a290:	9b01      	ldr	r3, [sp, #4]
 800a292:	441c      	add	r4, r3
 800a294:	edd9 7a00 	vldr	s15, [r9]
 800a298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a29c:	ece9 7a01 	vstmia	r9!, {s15}
 800a2a0:	454c      	cmp	r4, r9
 800a2a2:	d1f7      	bne.n	800a294 <nl_func_sm_array_f32+0xc0>
 800a2a4:	9b04      	ldr	r3, [sp, #16]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	441d      	add	r5, r3
 800a2aa:	9b05      	ldr	r3, [sp, #20]
 800a2ac:	42aa      	cmp	r2, r5
 800a2ae:	441e      	add	r6, r3
 800a2b0:	d9b9      	bls.n	800a226 <nl_func_sm_array_f32+0x52>
 800a2b2:	60ba      	str	r2, [r7, #8]
 800a2b4:	9a02      	ldr	r2, [sp, #8]
 800a2b6:	68d3      	ldr	r3, [r2, #12]
 800a2b8:	6093      	str	r3, [r2, #8]
 800a2ba:	b009      	add	sp, #36	; 0x24
 800a2bc:	ecbd 8b04 	vpop	{d8-d9}
 800a2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c4:	2a00      	cmp	r2, #0
 800a2c6:	d0ed      	beq.n	800a2a4 <nl_func_sm_array_f32+0xd0>
 800a2c8:	9a01      	ldr	r2, [sp, #4]
 800a2ca:	eb03 0b02 	add.w	fp, r3, r2
 800a2ce:	e7c7      	b.n	800a260 <nl_func_sm_array_f32+0x8c>
 800a2d0:	00000000 	.word	0x00000000

0800a2d4 <nl_func_relu_generic_array_f32>:
 800a2d4:	b430      	push	{r4, r5}
 800a2d6:	6989      	ldr	r1, [r1, #24]
 800a2d8:	6980      	ldr	r0, [r0, #24]
 800a2da:	edd3 6a02 	vldr	s13, [r3, #8]
 800a2de:	688c      	ldr	r4, [r1, #8]
 800a2e0:	6880      	ldr	r0, [r0, #8]
 800a2e2:	ed93 7a00 	vldr	s14, [r3]
 800a2e6:	ed93 6a01 	vldr	s12, [r3, #4]
 800a2ea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a2ee:	3a01      	subs	r2, #1
 800a2f0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a2f4:	0092      	lsls	r2, r2, #2
 800a2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2fa:	4410      	add	r0, r2
 800a2fc:	4422      	add	r2, r4
 800a2fe:	d421      	bmi.n	800a344 <nl_func_relu_generic_array_f32+0x70>
 800a300:	4294      	cmp	r4, r2
 800a302:	d83d      	bhi.n	800a380 <nl_func_relu_generic_array_f32+0xac>
 800a304:	1d13      	adds	r3, r2, #4
 800a306:	1d02      	adds	r2, r0, #4
 800a308:	e010      	b.n	800a32c <nl_func_relu_generic_array_f32+0x58>
 800a30a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a312:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800a316:	d501      	bpl.n	800a31c <nl_func_relu_generic_array_f32+0x48>
 800a318:	ee65 7a86 	vmul.f32	s15, s11, s12
 800a31c:	ed62 7a01 	vstmdb	r2!, {s15}
 800a320:	6888      	ldr	r0, [r1, #8]
 800a322:	f1a3 0408 	sub.w	r4, r3, #8
 800a326:	4284      	cmp	r4, r0
 800a328:	462b      	mov	r3, r5
 800a32a:	d329      	bcc.n	800a380 <nl_func_relu_generic_array_f32+0xac>
 800a32c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a330:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a338:	f1a3 0504 	sub.w	r5, r3, #4
 800a33c:	d4e5      	bmi.n	800a30a <nl_func_relu_generic_array_f32+0x36>
 800a33e:	eef0 7a66 	vmov.f32	s15, s13
 800a342:	e7eb      	b.n	800a31c <nl_func_relu_generic_array_f32+0x48>
 800a344:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800a348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a34c:	d01a      	beq.n	800a384 <nl_func_relu_generic_array_f32+0xb0>
 800a34e:	4294      	cmp	r4, r2
 800a350:	d816      	bhi.n	800a380 <nl_func_relu_generic_array_f32+0xac>
 800a352:	1d13      	adds	r3, r2, #4
 800a354:	1d02      	adds	r2, r0, #4
 800a356:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a35a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a35e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a362:	f1a3 0408 	sub.w	r4, r3, #8
 800a366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a36a:	f1a3 0004 	sub.w	r0, r3, #4
 800a36e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a372:	4623      	mov	r3, r4
 800a374:	d51e      	bpl.n	800a3b4 <nl_func_relu_generic_array_f32+0xe0>
 800a376:	ed62 6a01 	vstmdb	r2!, {s13}
 800a37a:	688b      	ldr	r3, [r1, #8]
 800a37c:	42a3      	cmp	r3, r4
 800a37e:	d91e      	bls.n	800a3be <nl_func_relu_generic_array_f32+0xea>
 800a380:	bc30      	pop	{r4, r5}
 800a382:	4770      	bx	lr
 800a384:	4294      	cmp	r4, r2
 800a386:	d8fb      	bhi.n	800a380 <nl_func_relu_generic_array_f32+0xac>
 800a388:	1d13      	adds	r3, r2, #4
 800a38a:	2500      	movs	r5, #0
 800a38c:	1d02      	adds	r2, r0, #4
 800a38e:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a392:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a396:	f1a3 0408 	sub.w	r4, r3, #8
 800a39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a39e:	f1a3 0004 	sub.w	r0, r3, #4
 800a3a2:	4623      	mov	r3, r4
 800a3a4:	db0d      	blt.n	800a3c2 <nl_func_relu_generic_array_f32+0xee>
 800a3a6:	ed62 7a01 	vstmdb	r2!, {s15}
 800a3aa:	688b      	ldr	r3, [r1, #8]
 800a3ac:	42a3      	cmp	r3, r4
 800a3ae:	d8e7      	bhi.n	800a380 <nl_func_relu_generic_array_f32+0xac>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	e7ec      	b.n	800a38e <nl_func_relu_generic_array_f32+0xba>
 800a3b4:	ed62 7a01 	vstmdb	r2!, {s15}
 800a3b8:	688c      	ldr	r4, [r1, #8]
 800a3ba:	429c      	cmp	r4, r3
 800a3bc:	d8e0      	bhi.n	800a380 <nl_func_relu_generic_array_f32+0xac>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	e7c9      	b.n	800a356 <nl_func_relu_generic_array_f32+0x82>
 800a3c2:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a3c6:	688c      	ldr	r4, [r1, #8]
 800a3c8:	429c      	cmp	r4, r3
 800a3ca:	d8d9      	bhi.n	800a380 <nl_func_relu_generic_array_f32+0xac>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	e7de      	b.n	800a38e <nl_func_relu_generic_array_f32+0xba>

0800a3d0 <forward_relu>:
 800a3d0:	6982      	ldr	r2, [r0, #24]
 800a3d2:	8813      	ldrh	r3, [r2, #0]
 800a3d4:	b333      	cbz	r3, 800a424 <forward_relu+0x54>
 800a3d6:	6852      	ldr	r2, [r2, #4]
 800a3d8:	6851      	ldr	r1, [r2, #4]
 800a3da:	b101      	cbz	r1, 800a3de <forward_relu+0xe>
 800a3dc:	6809      	ldr	r1, [r1, #0]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d91d      	bls.n	800a41e <forward_relu+0x4e>
 800a3e2:	b4f0      	push	{r4, r5, r6, r7}
 800a3e4:	6917      	ldr	r7, [r2, #16]
 800a3e6:	b107      	cbz	r7, 800a3ea <forward_relu+0x1a>
 800a3e8:	683f      	ldr	r7, [r7, #0]
 800a3ea:	688c      	ldr	r4, [r1, #8]
 800a3ec:	69c3      	ldr	r3, [r0, #28]
 800a3ee:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d044      	beq.n	800a480 <forward_relu+0xb0>
 800a3f6:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800a3fa:	2d01      	cmp	r5, #1
 800a3fc:	d014      	beq.n	800a428 <forward_relu+0x58>
 800a3fe:	2c00      	cmp	r4, #0
 800a400:	d074      	beq.n	800a4ec <forward_relu+0x11c>
 800a402:	68ce      	ldr	r6, [r1, #12]
 800a404:	2201      	movs	r2, #1
 800a406:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800a40a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a40e:	42a6      	cmp	r6, r4
 800a410:	fb05 f202 	mul.w	r2, r5, r2
 800a414:	d1f9      	bne.n	800a40a <forward_relu+0x3a>
 800a416:	4638      	mov	r0, r7
 800a418:	bcf0      	pop	{r4, r5, r6, r7}
 800a41a:	f7ff bf5b 	b.w	800a2d4 <nl_func_relu_generic_array_f32>
 800a41e:	2300      	movs	r3, #0
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	deff      	udf	#255	; 0xff
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	deff      	udf	#255	; 0xff
 800a428:	69ba      	ldr	r2, [r7, #24]
 800a42a:	6988      	ldr	r0, [r1, #24]
 800a42c:	6896      	ldr	r6, [r2, #8]
 800a42e:	ed93 7a00 	vldr	s14, [r3]
 800a432:	6882      	ldr	r2, [r0, #8]
 800a434:	b184      	cbz	r4, 800a458 <forward_relu+0x88>
 800a436:	68cf      	ldr	r7, [r1, #12]
 800a438:	462b      	mov	r3, r5
 800a43a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800a43e:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800a442:	42a7      	cmp	r7, r4
 800a444:	fb01 f303 	mul.w	r3, r1, r3
 800a448:	d1f9      	bne.n	800a43e <forward_relu+0x6e>
 800a44a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a44e:	3b01      	subs	r3, #1
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	18d2      	adds	r2, r2, r3
 800a454:	441e      	add	r6, r3
 800a456:	d23f      	bcs.n	800a4d8 <forward_relu+0x108>
 800a458:	1d13      	adds	r3, r2, #4
 800a45a:	2500      	movs	r5, #0
 800a45c:	1d32      	adds	r2, r6, #4
 800a45e:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a46a:	f1a3 0104 	sub.w	r1, r3, #4
 800a46e:	d835      	bhi.n	800a4dc <forward_relu+0x10c>
 800a470:	ed62 7a01 	vstmdb	r2!, {s15}
 800a474:	6884      	ldr	r4, [r0, #8]
 800a476:	3b08      	subs	r3, #8
 800a478:	429c      	cmp	r4, r3
 800a47a:	d82d      	bhi.n	800a4d8 <forward_relu+0x108>
 800a47c:	460b      	mov	r3, r1
 800a47e:	e7ee      	b.n	800a45e <forward_relu+0x8e>
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	698d      	ldr	r5, [r1, #24]
 800a484:	6898      	ldr	r0, [r3, #8]
 800a486:	68ab      	ldr	r3, [r5, #8]
 800a488:	b184      	cbz	r4, 800a4ac <forward_relu+0xdc>
 800a48a:	68ce      	ldr	r6, [r1, #12]
 800a48c:	2201      	movs	r2, #1
 800a48e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800a492:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800a496:	42a6      	cmp	r6, r4
 800a498:	fb01 f202 	mul.w	r2, r1, r2
 800a49c:	d1f9      	bne.n	800a492 <forward_relu+0xc2>
 800a49e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a4a2:	3a01      	subs	r2, #1
 800a4a4:	0092      	lsls	r2, r2, #2
 800a4a6:	189b      	adds	r3, r3, r2
 800a4a8:	4410      	add	r0, r2
 800a4aa:	d215      	bcs.n	800a4d8 <forward_relu+0x108>
 800a4ac:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800a4f0 <forward_relu+0x120>
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	1d01      	adds	r1, r0, #4
 800a4b4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a4b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4c0:	bfb8      	it	lt
 800a4c2:	eef0 7a47 	vmovlt.f32	s15, s14
 800a4c6:	ed61 7a01 	vstmdb	r1!, {s15}
 800a4ca:	68a8      	ldr	r0, [r5, #8]
 800a4cc:	f1a3 0208 	sub.w	r2, r3, #8
 800a4d0:	4290      	cmp	r0, r2
 800a4d2:	f1a3 0304 	sub.w	r3, r3, #4
 800a4d6:	d9ed      	bls.n	800a4b4 <forward_relu+0xe4>
 800a4d8:	bcf0      	pop	{r4, r5, r6, r7}
 800a4da:	4770      	bx	lr
 800a4dc:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a4e0:	6884      	ldr	r4, [r0, #8]
 800a4e2:	3b08      	subs	r3, #8
 800a4e4:	429c      	cmp	r4, r3
 800a4e6:	d8f7      	bhi.n	800a4d8 <forward_relu+0x108>
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	e7b8      	b.n	800a45e <forward_relu+0x8e>
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	e792      	b.n	800a416 <forward_relu+0x46>
 800a4f0:	00000000 	.word	0x00000000

0800a4f4 <forward_sm>:
 800a4f4:	6982      	ldr	r2, [r0, #24]
 800a4f6:	8813      	ldrh	r3, [r2, #0]
 800a4f8:	b32b      	cbz	r3, 800a546 <forward_sm+0x52>
 800a4fa:	6852      	ldr	r2, [r2, #4]
 800a4fc:	6851      	ldr	r1, [r2, #4]
 800a4fe:	b101      	cbz	r1, 800a502 <forward_sm+0xe>
 800a500:	6809      	ldr	r1, [r1, #0]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d91c      	bls.n	800a540 <forward_sm+0x4c>
 800a506:	6913      	ldr	r3, [r2, #16]
 800a508:	b1c3      	cbz	r3, 800a53c <forward_sm+0x48>
 800a50a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a50c:	6818      	ldr	r0, [r3, #0]
 800a50e:	688c      	ldr	r4, [r1, #8]
 800a510:	68c3      	ldr	r3, [r0, #12]
 800a512:	68ce      	ldr	r6, [r1, #12]
 800a514:	685f      	ldr	r7, [r3, #4]
 800a516:	6873      	ldr	r3, [r6, #4]
 800a518:	0a24      	lsrs	r4, r4, #8
 800a51a:	b083      	sub	sp, #12
 800a51c:	d015      	beq.n	800a54a <forward_sm+0x56>
 800a51e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800a522:	2201      	movs	r2, #1
 800a524:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a528:	42a6      	cmp	r6, r4
 800a52a:	fb05 f202 	mul.w	r2, r5, r2
 800a52e:	d1f9      	bne.n	800a524 <forward_sm+0x30>
 800a530:	e9cd 3700 	strd	r3, r7, [sp]
 800a534:	f7ff fe4e 	bl	800a1d4 <nl_func_sm_array_f32>
 800a538:	b003      	add	sp, #12
 800a53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	deff      	udf	#255	; 0xff
 800a540:	2300      	movs	r3, #0
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	deff      	udf	#255	; 0xff
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	deff      	udf	#255	; 0xff
 800a54a:	2201      	movs	r2, #1
 800a54c:	e9cd 3700 	strd	r3, r7, [sp]
 800a550:	f7ff fe40 	bl	800a1d4 <nl_func_sm_array_f32>
 800a554:	b003      	add	sp, #12
 800a556:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a558 <pool_func_mp_array_f32>:
 800a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	b093      	sub	sp, #76	; 0x4c
 800a55e:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800a562:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800a564:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 800a568:	68a8      	ldr	r0, [r5, #8]
 800a56a:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 800a56e:	9508      	str	r5, [sp, #32]
 800a570:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 800a574:	9002      	str	r0, [sp, #8]
 800a576:	950d      	str	r5, [sp, #52]	; 0x34
 800a578:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 800a57c:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 800a580:	9004      	str	r0, [sp, #16]
 800a582:	9506      	str	r5, [sp, #24]
 800a584:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 800a588:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800a58c:	9009      	str	r0, [sp, #36]	; 0x24
 800a58e:	950b      	str	r5, [sp, #44]	; 0x2c
 800a590:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 800a594:	9200      	str	r2, [sp, #0]
 800a596:	468a      	mov	sl, r1
 800a598:	4699      	mov	r9, r3
 800a59a:	b95c      	cbnz	r4, 800a5b4 <pool_func_mp_array_f32+0x5c>
 800a59c:	b950      	cbnz	r0, 800a5b4 <pool_func_mp_array_f32+0x5c>
 800a59e:	9b04      	ldr	r3, [sp, #16]
 800a5a0:	1a5a      	subs	r2, r3, r1
 800a5a2:	9b06      	ldr	r3, [sp, #24]
 800a5a4:	9908      	ldr	r1, [sp, #32]
 800a5a6:	3a01      	subs	r2, #1
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	fb13 2301 	smlabb	r3, r3, r1, r2
 800a5ae:	041a      	lsls	r2, r3, #16
 800a5b0:	f100 809b 	bmi.w	800a6ea <pool_func_mp_array_f32+0x192>
 800a5b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 808b 	beq.w	800a6d2 <pool_func_mp_array_f32+0x17a>
 800a5bc:	9b06      	ldr	r3, [sp, #24]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f000 8087 	beq.w	800a6d2 <pool_func_mp_array_f32+0x17a>
 800a5c4:	f1b9 0f00 	cmp.w	r9, #0
 800a5c8:	f000 8083 	beq.w	800a6d2 <pool_func_mp_array_f32+0x17a>
 800a5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ce:	1b1c      	subs	r4, r3, r4
 800a5d0:	9b04      	ldr	r3, [sp, #16]
 800a5d2:	1a1b      	subs	r3, r3, r0
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	4240      	negs	r0, r0
 800a5d8:	2200      	movs	r2, #0
 800a5da:	b2a1      	uxth	r1, r4
 800a5dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5de:	b283      	uxth	r3, r0
 800a5e0:	920e      	str	r2, [sp, #56]	; 0x38
 800a5e2:	910c      	str	r1, [sp, #48]	; 0x30
 800a5e4:	9310      	str	r3, [sp, #64]	; 0x40
 800a5e6:	9c06      	ldr	r4, [sp, #24]
 800a5e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ec:	fb02 f204 	mul.w	r2, r2, r4
 800a5f0:	1acb      	subs	r3, r1, r3
 800a5f2:	920a      	str	r2, [sp, #40]	; 0x28
 800a5f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5f6:	9205      	str	r2, [sp, #20]
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	b21b      	sxth	r3, r3
 800a5fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a5fe:	9303      	str	r3, [sp, #12]
 800a600:	9007      	str	r0, [sp, #28]
 800a602:	4603      	mov	r3, r0
 800a604:	fa0f f881 	sxth.w	r8, r1
 800a608:	9204      	str	r2, [sp, #16]
 800a60a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a60c:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 800a610:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800a614:	4413      	add	r3, r2
 800a616:	f04f 0e00 	mov.w	lr, #0
 800a61a:	fb09 f303 	mul.w	r3, r9, r3
 800a61e:	9301      	str	r3, [sp, #4]
 800a620:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800a624:	4675      	mov	r5, lr
 800a626:	9903      	ldr	r1, [sp, #12]
 800a628:	eddf 7a78 	vldr	s15, [pc, #480]	; 800a80c <pool_func_mp_array_f32+0x2b4>
 800a62c:	4588      	cmp	r8, r1
 800a62e:	dd24      	ble.n	800a67a <pool_func_mp_array_f32+0x122>
 800a630:	4564      	cmp	r4, ip
 800a632:	dd1e      	ble.n	800a672 <pool_func_mp_array_f32+0x11a>
 800a634:	2900      	cmp	r1, #0
 800a636:	fb0a f601 	mul.w	r6, sl, r1
 800a63a:	db1a      	blt.n	800a672 <pool_func_mp_array_f32+0x11a>
 800a63c:	9b00      	ldr	r3, [sp, #0]
 800a63e:	4299      	cmp	r1, r3
 800a640:	da17      	bge.n	800a672 <pool_func_mp_array_f32+0x11a>
 800a642:	f1bc 0f00 	cmp.w	ip, #0
 800a646:	4663      	mov	r3, ip
 800a648:	db46      	blt.n	800a6d8 <pool_func_mp_array_f32+0x180>
 800a64a:	18f2      	adds	r2, r6, r3
 800a64c:	fb09 5202 	mla	r2, r9, r2, r5
 800a650:	1c58      	adds	r0, r3, #1
 800a652:	459a      	cmp	sl, r3
 800a654:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 800a658:	b203      	sxth	r3, r0
 800a65a:	dd08      	ble.n	800a66e <pool_func_mp_array_f32+0x116>
 800a65c:	ed92 7a00 	vldr	s14, [r2]
 800a660:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a668:	bfb8      	it	lt
 800a66a:	eef0 7a47 	vmovlt.f32	s15, s14
 800a66e:	429c      	cmp	r4, r3
 800a670:	dceb      	bgt.n	800a64a <pool_func_mp_array_f32+0xf2>
 800a672:	3101      	adds	r1, #1
 800a674:	b209      	sxth	r1, r1
 800a676:	4588      	cmp	r8, r1
 800a678:	dcda      	bgt.n	800a630 <pool_func_mp_array_f32+0xd8>
 800a67a:	9b01      	ldr	r3, [sp, #4]
 800a67c:	f10e 0e01 	add.w	lr, lr, #1
 800a680:	441d      	add	r5, r3
 800a682:	9b02      	ldr	r3, [sp, #8]
 800a684:	fa0f fe8e 	sxth.w	lr, lr
 800a688:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a68c:	45ce      	cmp	lr, r9
 800a68e:	edc5 7a00 	vstr	s15, [r5]
 800a692:	4675      	mov	r5, lr
 800a694:	dbc7      	blt.n	800a626 <pool_func_mp_array_f32+0xce>
 800a696:	9b07      	ldr	r3, [sp, #28]
 800a698:	9808      	ldr	r0, [sp, #32]
 800a69a:	3301      	adds	r3, #1
 800a69c:	b219      	sxth	r1, r3
 800a69e:	9b05      	ldr	r3, [sp, #20]
 800a6a0:	9107      	str	r1, [sp, #28]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	4402      	add	r2, r0
 800a6a6:	9b04      	ldr	r3, [sp, #16]
 800a6a8:	b292      	uxth	r2, r2
 800a6aa:	9205      	str	r2, [sp, #20]
 800a6ac:	9a06      	ldr	r2, [sp, #24]
 800a6ae:	4403      	add	r3, r0
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	428a      	cmp	r2, r1
 800a6b4:	9304      	str	r3, [sp, #16]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	dca7      	bgt.n	800a60a <pool_func_mp_array_f32+0xb2>
 800a6ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6bc:	3301      	adds	r3, #1
 800a6be:	b21a      	sxth	r2, r3
 800a6c0:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 800a6c4:	440b      	add	r3, r1
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	930c      	str	r3, [sp, #48]	; 0x30
 800a6ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6cc:	920e      	str	r2, [sp, #56]	; 0x38
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	dc89      	bgt.n	800a5e6 <pool_func_mp_array_f32+0x8e>
 800a6d2:	b013      	add	sp, #76	; 0x4c
 800a6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d8:	3301      	adds	r3, #1
 800a6da:	b21b      	sxth	r3, r3
 800a6dc:	42bb      	cmp	r3, r7
 800a6de:	dac6      	bge.n	800a66e <pool_func_mp_array_f32+0x116>
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	b21b      	sxth	r3, r3
 800a6e4:	42bb      	cmp	r3, r7
 800a6e6:	dbf7      	blt.n	800a6d8 <pool_func_mp_array_f32+0x180>
 800a6e8:	e7c1      	b.n	800a66e <pool_func_mp_array_f32+0x116>
 800a6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ec:	9a00      	ldr	r2, [sp, #0]
 800a6ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a6f0:	1a9a      	subs	r2, r3, r2
 800a6f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6f4:	3a01      	subs	r2, #1
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	fb13 2301 	smlabb	r3, r3, r1, r2
 800a6fc:	041b      	lsls	r3, r3, #16
 800a6fe:	f57f af59 	bpl.w	800a5b4 <pool_func_mp_array_f32+0x5c>
 800a702:	fb0a f309 	mul.w	r3, sl, r9
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 800a70c:	930e      	str	r3, [sp, #56]	; 0x38
 800a70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a710:	9001      	str	r0, [sp, #4]
 800a712:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800a71c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a71e:	429a      	cmp	r2, r3
 800a720:	ddd7      	ble.n	800a6d2 <pool_func_mp_array_f32+0x17a>
 800a722:	9a00      	ldr	r2, [sp, #0]
 800a724:	9906      	ldr	r1, [sp, #24]
 800a726:	fa0f f882 	sxth.w	r8, r2
 800a72a:	2900      	cmp	r1, #0
 800a72c:	d062      	beq.n	800a7f4 <pool_func_mp_array_f32+0x29c>
 800a72e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a730:	fb01 f303 	mul.w	r3, r1, r3
 800a734:	1a12      	subs	r2, r2, r0
 800a736:	9305      	str	r3, [sp, #20]
 800a738:	b213      	sxth	r3, r2
 800a73a:	9307      	str	r3, [sp, #28]
 800a73c:	f1b9 0f00 	cmp.w	r9, #0
 800a740:	d058      	beq.n	800a7f4 <pool_func_mp_array_f32+0x29c>
 800a742:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a744:	fb02 f303 	mul.w	r3, r2, r3
 800a748:	2600      	movs	r6, #0
 800a74a:	930c      	str	r3, [sp, #48]	; 0x30
 800a74c:	9b04      	ldr	r3, [sp, #16]
 800a74e:	9303      	str	r3, [sp, #12]
 800a750:	4637      	mov	r7, r6
 800a752:	46b2      	mov	sl, r6
 800a754:	9b05      	ldr	r3, [sp, #20]
 800a756:	9611      	str	r6, [sp, #68]	; 0x44
 800a758:	eb0a 0b03 	add.w	fp, sl, r3
 800a75c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a75e:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800a762:	b235      	sxth	r5, r6
 800a764:	18eb      	adds	r3, r5, r3
 800a766:	f04f 0a00 	mov.w	sl, #0
 800a76a:	fb09 f303 	mul.w	r3, r9, r3
 800a76e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a770:	930a      	str	r3, [sp, #40]	; 0x28
 800a772:	fb09 fb0b 	mul.w	fp, r9, fp
 800a776:	46d6      	mov	lr, sl
 800a778:	9807      	ldr	r0, [sp, #28]
 800a77a:	4580      	cmp	r8, r0
 800a77c:	dd43      	ble.n	800a806 <pool_func_mp_array_f32+0x2ae>
 800a77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a780:	eddf 7a22 	vldr	s15, [pc, #136]	; 800a80c <pool_func_mp_array_f32+0x2b4>
 800a784:	eb0e 0403 	add.w	r4, lr, r3
 800a788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a78a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a78e:	42a9      	cmp	r1, r5
 800a790:	dd0f      	ble.n	800a7b2 <pool_func_mp_array_f32+0x25a>
 800a792:	4622      	mov	r2, r4
 800a794:	462b      	mov	r3, r5
 800a796:	ed92 7a00 	vldr	s14, [r2]
 800a79a:	3301      	adds	r3, #1
 800a79c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a4:	b21b      	sxth	r3, r3
 800a7a6:	bfb8      	it	lt
 800a7a8:	eef0 7a47 	vmovlt.f32	s15, s14
 800a7ac:	4299      	cmp	r1, r3
 800a7ae:	4462      	add	r2, ip
 800a7b0:	d1f1      	bne.n	800a796 <pool_func_mp_array_f32+0x23e>
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	b200      	sxth	r0, r0
 800a7b6:	4580      	cmp	r8, r0
 800a7b8:	4434      	add	r4, r6
 800a7ba:	d1e8      	bne.n	800a78e <pool_func_mp_array_f32+0x236>
 800a7bc:	f10a 0a01 	add.w	sl, sl, #1
 800a7c0:	9a02      	ldr	r2, [sp, #8]
 800a7c2:	eb0b 030e 	add.w	r3, fp, lr
 800a7c6:	fa0f fa8a 	sxth.w	sl, sl
 800a7ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7ce:	45ca      	cmp	sl, r9
 800a7d0:	edc3 7a00 	vstr	s15, [r3]
 800a7d4:	46d6      	mov	lr, sl
 800a7d6:	dbcf      	blt.n	800a778 <pool_func_mp_array_f32+0x220>
 800a7d8:	9b03      	ldr	r3, [sp, #12]
 800a7da:	9a08      	ldr	r2, [sp, #32]
 800a7dc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a7de:	4413      	add	r3, r2
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	3701      	adds	r7, #1
 800a7e4:	9303      	str	r3, [sp, #12]
 800a7e6:	9b06      	ldr	r3, [sp, #24]
 800a7e8:	b23f      	sxth	r7, r7
 800a7ea:	4416      	add	r6, r2
 800a7ec:	42bb      	cmp	r3, r7
 800a7ee:	b2b6      	uxth	r6, r6
 800a7f0:	46ba      	mov	sl, r7
 800a7f2:	dcaf      	bgt.n	800a754 <pool_func_mp_array_f32+0x1fc>
 800a7f4:	9b00      	ldr	r3, [sp, #0]
 800a7f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7f8:	4413      	add	r3, r2
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	9b01      	ldr	r3, [sp, #4]
 800a800:	3301      	adds	r3, #1
 800a802:	9301      	str	r3, [sp, #4]
 800a804:	e788      	b.n	800a718 <pool_func_mp_array_f32+0x1c0>
 800a806:	eddf 7a01 	vldr	s15, [pc, #4]	; 800a80c <pool_func_mp_array_f32+0x2b4>
 800a80a:	e7d7      	b.n	800a7bc <pool_func_mp_array_f32+0x264>
 800a80c:	cf000000 	.word	0xcf000000

0800a810 <ai_check_custom_types>:
 800a810:	4b13      	ldr	r3, [pc, #76]	; (800a860 <ai_check_custom_types+0x50>)
 800a812:	b082      	sub	sp, #8
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	9301      	str	r3, [sp, #4]
 800a818:	b118      	cbz	r0, 800a822 <ai_check_custom_types+0x12>
 800a81a:	7803      	ldrb	r3, [r0, #0]
 800a81c:	2b03      	cmp	r3, #3
 800a81e:	d002      	beq.n	800a826 <ai_check_custom_types+0x16>
 800a820:	2000      	movs	r0, #0
 800a822:	b002      	add	sp, #8
 800a824:	4770      	bx	lr
 800a826:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d004      	beq.n	800a838 <ai_check_custom_types+0x28>
 800a82e:	2001      	movs	r0, #1
 800a830:	f080 0001 	eor.w	r0, r0, #1
 800a834:	b002      	add	sp, #8
 800a836:	4770      	bx	lr
 800a838:	7842      	ldrb	r2, [r0, #1]
 800a83a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a83e:	429a      	cmp	r2, r3
 800a840:	f100 0001 	add.w	r0, r0, #1
 800a844:	d1f3      	bne.n	800a82e <ai_check_custom_types+0x1e>
 800a846:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800a84a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d1ed      	bne.n	800a82e <ai_check_custom_types+0x1e>
 800a852:	7842      	ldrb	r2, [r0, #1]
 800a854:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d1e8      	bne.n	800a82e <ai_check_custom_types+0x1e>
 800a85c:	2000      	movs	r0, #0
 800a85e:	e7e7      	b.n	800a830 <ai_check_custom_types+0x20>
 800a860:	0800dc08 	.word	0x0800dc08

0800a864 <ai_layers_init_all>:
 800a864:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a866:	b17a      	cbz	r2, 800a888 <ai_layers_init_all+0x24>
 800a868:	6913      	ldr	r3, [r2, #16]
 800a86a:	60d0      	str	r0, [r2, #12]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	f04f 0201 	mov.w	r2, #1
 800a872:	d009      	beq.n	800a888 <ai_layers_init_all+0x24>
 800a874:	b143      	cbz	r3, 800a888 <ai_layers_init_all+0x24>
 800a876:	6919      	ldr	r1, [r3, #16]
 800a878:	60d8      	str	r0, [r3, #12]
 800a87a:	4299      	cmp	r1, r3
 800a87c:	f102 0201 	add.w	r2, r2, #1
 800a880:	d002      	beq.n	800a888 <ai_layers_init_all+0x24>
 800a882:	460b      	mov	r3, r1
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1f6      	bne.n	800a876 <ai_layers_init_all+0x12>
 800a888:	4610      	mov	r0, r2
 800a88a:	4770      	bx	lr

0800a88c <ai_layers_post_init_all>:
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a890:	b18c      	cbz	r4, 800a8b6 <ai_layers_post_init_all+0x2a>
 800a892:	2500      	movs	r5, #0
 800a894:	6863      	ldr	r3, [r4, #4]
 800a896:	f013 0f01 	tst.w	r3, #1
 800a89a:	4620      	mov	r0, r4
 800a89c:	d003      	beq.n	800a8a6 <ai_layers_post_init_all+0x1a>
 800a89e:	6a23      	ldr	r3, [r4, #32]
 800a8a0:	b10b      	cbz	r3, 800a8a6 <ai_layers_post_init_all+0x1a>
 800a8a2:	4798      	blx	r3
 800a8a4:	3501      	adds	r5, #1
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	42a3      	cmp	r3, r4
 800a8aa:	d002      	beq.n	800a8b2 <ai_layers_post_init_all+0x26>
 800a8ac:	461c      	mov	r4, r3
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1f0      	bne.n	800a894 <ai_layers_post_init_all+0x8>
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	bd38      	pop	{r3, r4, r5, pc}
 800a8b6:	4625      	mov	r5, r4
 800a8b8:	e7fb      	b.n	800a8b2 <ai_layers_post_init_all+0x26>
 800a8ba:	bf00      	nop

0800a8bc <ai_layers_forward_all>:
 800a8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c0:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800a8c2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	2f00      	cmp	r7, #0
 800a8c8:	d02c      	beq.n	800a924 <ai_layers_forward_all+0x68>
 800a8ca:	2d00      	cmp	r5, #0
 800a8cc:	d03f      	beq.n	800a94e <ai_layers_forward_all+0x92>
 800a8ce:	6385      	str	r5, [r0, #56]	; 0x38
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a8d4:	2001      	movs	r0, #1
 800a8d6:	47b8      	blx	r7
 800a8d8:	2600      	movs	r6, #0
 800a8da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a8dc:	46b0      	mov	r8, r6
 800a8de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a8e0:	2002      	movs	r0, #2
 800a8e2:	47b8      	blx	r7
 800a8e4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a8e6:	696b      	ldr	r3, [r5, #20]
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	4798      	blx	r3
 800a8ec:	692b      	ldr	r3, [r5, #16]
 800a8ee:	429d      	cmp	r5, r3
 800a8f0:	f04f 0003 	mov.w	r0, #3
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	d009      	beq.n	800a90c <ai_layers_forward_all+0x50>
 800a8f8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a8fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a8fc:	47b8      	blx	r7
 800a8fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a900:	3601      	adds	r6, #1
 800a902:	2900      	cmp	r1, #0
 800a904:	d1eb      	bne.n	800a8de <ai_layers_forward_all+0x22>
 800a906:	4630      	mov	r0, r6
 800a908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a90c:	2100      	movs	r1, #0
 800a90e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800a912:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a914:	47b8      	blx	r7
 800a916:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a918:	3601      	adds	r6, #1
 800a91a:	2900      	cmp	r1, #0
 800a91c:	d1df      	bne.n	800a8de <ai_layers_forward_all+0x22>
 800a91e:	4630      	mov	r0, r6
 800a920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a924:	b19d      	cbz	r5, 800a94e <ai_layers_forward_all+0x92>
 800a926:	6385      	str	r5, [r0, #56]	; 0x38
 800a928:	463e      	mov	r6, r7
 800a92a:	696b      	ldr	r3, [r5, #20]
 800a92c:	4628      	mov	r0, r5
 800a92e:	4798      	blx	r3
 800a930:	692b      	ldr	r3, [r5, #16]
 800a932:	42ab      	cmp	r3, r5
 800a934:	f106 0601 	add.w	r6, r6, #1
 800a938:	d004      	beq.n	800a944 <ai_layers_forward_all+0x88>
 800a93a:	63a3      	str	r3, [r4, #56]	; 0x38
 800a93c:	461d      	mov	r5, r3
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1f3      	bne.n	800a92a <ai_layers_forward_all+0x6e>
 800a942:	e7e0      	b.n	800a906 <ai_layers_forward_all+0x4a>
 800a944:	2300      	movs	r3, #0
 800a946:	63a3      	str	r3, [r4, #56]	; 0x38
 800a948:	4630      	mov	r0, r6
 800a94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a94e:	462e      	mov	r6, r5
 800a950:	4630      	mov	r0, r6
 800a952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a956:	bf00      	nop

0800a958 <ai_layers_destroy_all>:
 800a958:	b538      	push	{r3, r4, r5, lr}
 800a95a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a95c:	b18c      	cbz	r4, 800a982 <ai_layers_destroy_all+0x2a>
 800a95e:	2500      	movs	r5, #0
 800a960:	6863      	ldr	r3, [r4, #4]
 800a962:	f013 0f04 	tst.w	r3, #4
 800a966:	4620      	mov	r0, r4
 800a968:	d003      	beq.n	800a972 <ai_layers_destroy_all+0x1a>
 800a96a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a96c:	b10b      	cbz	r3, 800a972 <ai_layers_destroy_all+0x1a>
 800a96e:	4798      	blx	r3
 800a970:	3501      	adds	r5, #1
 800a972:	6923      	ldr	r3, [r4, #16]
 800a974:	42a3      	cmp	r3, r4
 800a976:	d002      	beq.n	800a97e <ai_layers_destroy_all+0x26>
 800a978:	461c      	mov	r4, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1f0      	bne.n	800a960 <ai_layers_destroy_all+0x8>
 800a97e:	4628      	mov	r0, r5
 800a980:	bd38      	pop	{r3, r4, r5, pc}
 800a982:	4625      	mov	r5, r4
 800a984:	e7fb      	b.n	800a97e <ai_layers_destroy_all+0x26>
 800a986:	bf00      	nop

0800a988 <ai_array_to_buffer_fmt>:
 800a988:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d029      	beq.n	800a9e4 <ai_array_to_buffer_fmt+0x5c>
 800a990:	4a22      	ldr	r2, [pc, #136]	; (800aa1c <ai_array_to_buffer_fmt+0x94>)
 800a992:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800a996:	4293      	cmp	r3, r2
 800a998:	d010      	beq.n	800a9bc <ai_array_to_buffer_fmt+0x34>
 800a99a:	dd13      	ble.n	800a9c4 <ai_array_to_buffer_fmt+0x3c>
 800a99c:	4a20      	ldr	r2, [pc, #128]	; (800aa20 <ai_array_to_buffer_fmt+0x98>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d00c      	beq.n	800a9bc <ai_array_to_buffer_fmt+0x34>
 800a9a2:	dc27      	bgt.n	800a9f4 <ai_array_to_buffer_fmt+0x6c>
 800a9a4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d007      	beq.n	800a9bc <ai_array_to_buffer_fmt+0x34>
 800a9ac:	3207      	adds	r2, #7
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d004      	beq.n	800a9bc <ai_array_to_buffer_fmt+0x34>
 800a9b2:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d000      	beq.n	800a9bc <ai_array_to_buffer_fmt+0x34>
 800a9ba:	2340      	movs	r3, #64	; 0x40
 800a9bc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a9c0:	4318      	orrs	r0, r3
 800a9c2:	4770      	bx	lr
 800a9c4:	4a17      	ldr	r2, [pc, #92]	; (800aa24 <ai_array_to_buffer_fmt+0x9c>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d0f8      	beq.n	800a9bc <ai_array_to_buffer_fmt+0x34>
 800a9ca:	dd1e      	ble.n	800aa0a <ai_array_to_buffer_fmt+0x82>
 800a9cc:	4a16      	ldr	r2, [pc, #88]	; (800aa28 <ai_array_to_buffer_fmt+0xa0>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d0f4      	beq.n	800a9bc <ai_array_to_buffer_fmt+0x34>
 800a9d2:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d0f0      	beq.n	800a9bc <ai_array_to_buffer_fmt+0x34>
 800a9da:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d1eb      	bne.n	800a9ba <ai_array_to_buffer_fmt+0x32>
 800a9e2:	e7eb      	b.n	800a9bc <ai_array_to_buffer_fmt+0x34>
 800a9e4:	4b11      	ldr	r3, [pc, #68]	; (800aa2c <ai_array_to_buffer_fmt+0xa4>)
 800a9e6:	4003      	ands	r3, r0
 800a9e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a9ec:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a9f0:	4318      	orrs	r0, r3
 800a9f2:	4770      	bx	lr
 800a9f4:	4a0e      	ldr	r2, [pc, #56]	; (800aa30 <ai_array_to_buffer_fmt+0xa8>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d0e0      	beq.n	800a9bc <ai_array_to_buffer_fmt+0x34>
 800a9fa:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d0dc      	beq.n	800a9bc <ai_array_to_buffer_fmt+0x34>
 800aa02:	4a0c      	ldr	r2, [pc, #48]	; (800aa34 <ai_array_to_buffer_fmt+0xac>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d1d8      	bne.n	800a9ba <ai_array_to_buffer_fmt+0x32>
 800aa08:	e7d8      	b.n	800a9bc <ai_array_to_buffer_fmt+0x34>
 800aa0a:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d0d4      	beq.n	800a9bc <ai_array_to_buffer_fmt+0x34>
 800aa12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d0d0      	beq.n	800a9bc <ai_array_to_buffer_fmt+0x34>
 800aa1a:	e7ce      	b.n	800a9ba <ai_array_to_buffer_fmt+0x32>
 800aa1c:	00060440 	.word	0x00060440
 800aa20:	00840840 	.word	0x00840840
 800aa24:	00040447 	.word	0x00040447
 800aa28:	0004084f 	.word	0x0004084f
 800aa2c:	00803fff 	.word	0x00803fff
 800aa30:	00841040 	.word	0x00841040
 800aa34:	0084084f 	.word	0x0084084f

0800aa38 <ai_array_get_byte_size>:
 800aa38:	b1c1      	cbz	r1, 800aa6c <ai_array_get_byte_size+0x34>
 800aa3a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800aa3e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800aa42:	4413      	add	r3, r2
 800aa44:	fb01 f103 	mul.w	r1, r1, r3
 800aa48:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800aa4c:	3107      	adds	r1, #7
 800aa4e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800aa52:	f021 0107 	bic.w	r1, r1, #7
 800aa56:	2804      	cmp	r0, #4
 800aa58:	fa21 f102 	lsr.w	r1, r1, r2
 800aa5c:	d008      	beq.n	800aa70 <ai_array_get_byte_size+0x38>
 800aa5e:	2808      	cmp	r0, #8
 800aa60:	d101      	bne.n	800aa66 <ai_array_get_byte_size+0x2e>
 800aa62:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800aa66:	3107      	adds	r1, #7
 800aa68:	08c8      	lsrs	r0, r1, #3
 800aa6a:	4770      	bx	lr
 800aa6c:	4608      	mov	r0, r1
 800aa6e:	4770      	bx	lr
 800aa70:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800aa74:	3107      	adds	r1, #7
 800aa76:	08c8      	lsrs	r0, r1, #3
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop

0800aa7c <__errno>:
 800aa7c:	4b01      	ldr	r3, [pc, #4]	; (800aa84 <__errno+0x8>)
 800aa7e:	6818      	ldr	r0, [r3, #0]
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	200008c4 	.word	0x200008c4

0800aa88 <__libc_init_array>:
 800aa88:	b570      	push	{r4, r5, r6, lr}
 800aa8a:	4d0d      	ldr	r5, [pc, #52]	; (800aac0 <__libc_init_array+0x38>)
 800aa8c:	4c0d      	ldr	r4, [pc, #52]	; (800aac4 <__libc_init_array+0x3c>)
 800aa8e:	1b64      	subs	r4, r4, r5
 800aa90:	10a4      	asrs	r4, r4, #2
 800aa92:	2600      	movs	r6, #0
 800aa94:	42a6      	cmp	r6, r4
 800aa96:	d109      	bne.n	800aaac <__libc_init_array+0x24>
 800aa98:	4d0b      	ldr	r5, [pc, #44]	; (800aac8 <__libc_init_array+0x40>)
 800aa9a:	4c0c      	ldr	r4, [pc, #48]	; (800aacc <__libc_init_array+0x44>)
 800aa9c:	f002 ff32 	bl	800d904 <_init>
 800aaa0:	1b64      	subs	r4, r4, r5
 800aaa2:	10a4      	asrs	r4, r4, #2
 800aaa4:	2600      	movs	r6, #0
 800aaa6:	42a6      	cmp	r6, r4
 800aaa8:	d105      	bne.n	800aab6 <__libc_init_array+0x2e>
 800aaaa:	bd70      	pop	{r4, r5, r6, pc}
 800aaac:	f855 3b04 	ldr.w	r3, [r5], #4
 800aab0:	4798      	blx	r3
 800aab2:	3601      	adds	r6, #1
 800aab4:	e7ee      	b.n	800aa94 <__libc_init_array+0xc>
 800aab6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaba:	4798      	blx	r3
 800aabc:	3601      	adds	r6, #1
 800aabe:	e7f2      	b.n	800aaa6 <__libc_init_array+0x1e>
 800aac0:	0800fdfc 	.word	0x0800fdfc
 800aac4:	0800fdfc 	.word	0x0800fdfc
 800aac8:	0800fdfc 	.word	0x0800fdfc
 800aacc:	0800fe00 	.word	0x0800fe00

0800aad0 <malloc>:
 800aad0:	4b02      	ldr	r3, [pc, #8]	; (800aadc <malloc+0xc>)
 800aad2:	4601      	mov	r1, r0
 800aad4:	6818      	ldr	r0, [r3, #0]
 800aad6:	f000 b885 	b.w	800abe4 <_malloc_r>
 800aada:	bf00      	nop
 800aadc:	200008c4 	.word	0x200008c4

0800aae0 <memcpy>:
 800aae0:	440a      	add	r2, r1
 800aae2:	4291      	cmp	r1, r2
 800aae4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aae8:	d100      	bne.n	800aaec <memcpy+0xc>
 800aaea:	4770      	bx	lr
 800aaec:	b510      	push	{r4, lr}
 800aaee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aaf6:	4291      	cmp	r1, r2
 800aaf8:	d1f9      	bne.n	800aaee <memcpy+0xe>
 800aafa:	bd10      	pop	{r4, pc}

0800aafc <memset>:
 800aafc:	4402      	add	r2, r0
 800aafe:	4603      	mov	r3, r0
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d100      	bne.n	800ab06 <memset+0xa>
 800ab04:	4770      	bx	lr
 800ab06:	f803 1b01 	strb.w	r1, [r3], #1
 800ab0a:	e7f9      	b.n	800ab00 <memset+0x4>

0800ab0c <_free_r>:
 800ab0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab0e:	2900      	cmp	r1, #0
 800ab10:	d044      	beq.n	800ab9c <_free_r+0x90>
 800ab12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab16:	9001      	str	r0, [sp, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ab1e:	bfb8      	it	lt
 800ab20:	18e4      	addlt	r4, r4, r3
 800ab22:	f001 ff3b 	bl	800c99c <__malloc_lock>
 800ab26:	4a1e      	ldr	r2, [pc, #120]	; (800aba0 <_free_r+0x94>)
 800ab28:	9801      	ldr	r0, [sp, #4]
 800ab2a:	6813      	ldr	r3, [r2, #0]
 800ab2c:	b933      	cbnz	r3, 800ab3c <_free_r+0x30>
 800ab2e:	6063      	str	r3, [r4, #4]
 800ab30:	6014      	str	r4, [r2, #0]
 800ab32:	b003      	add	sp, #12
 800ab34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab38:	f001 bf36 	b.w	800c9a8 <__malloc_unlock>
 800ab3c:	42a3      	cmp	r3, r4
 800ab3e:	d908      	bls.n	800ab52 <_free_r+0x46>
 800ab40:	6825      	ldr	r5, [r4, #0]
 800ab42:	1961      	adds	r1, r4, r5
 800ab44:	428b      	cmp	r3, r1
 800ab46:	bf01      	itttt	eq
 800ab48:	6819      	ldreq	r1, [r3, #0]
 800ab4a:	685b      	ldreq	r3, [r3, #4]
 800ab4c:	1949      	addeq	r1, r1, r5
 800ab4e:	6021      	streq	r1, [r4, #0]
 800ab50:	e7ed      	b.n	800ab2e <_free_r+0x22>
 800ab52:	461a      	mov	r2, r3
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	b10b      	cbz	r3, 800ab5c <_free_r+0x50>
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	d9fa      	bls.n	800ab52 <_free_r+0x46>
 800ab5c:	6811      	ldr	r1, [r2, #0]
 800ab5e:	1855      	adds	r5, r2, r1
 800ab60:	42a5      	cmp	r5, r4
 800ab62:	d10b      	bne.n	800ab7c <_free_r+0x70>
 800ab64:	6824      	ldr	r4, [r4, #0]
 800ab66:	4421      	add	r1, r4
 800ab68:	1854      	adds	r4, r2, r1
 800ab6a:	42a3      	cmp	r3, r4
 800ab6c:	6011      	str	r1, [r2, #0]
 800ab6e:	d1e0      	bne.n	800ab32 <_free_r+0x26>
 800ab70:	681c      	ldr	r4, [r3, #0]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	6053      	str	r3, [r2, #4]
 800ab76:	4421      	add	r1, r4
 800ab78:	6011      	str	r1, [r2, #0]
 800ab7a:	e7da      	b.n	800ab32 <_free_r+0x26>
 800ab7c:	d902      	bls.n	800ab84 <_free_r+0x78>
 800ab7e:	230c      	movs	r3, #12
 800ab80:	6003      	str	r3, [r0, #0]
 800ab82:	e7d6      	b.n	800ab32 <_free_r+0x26>
 800ab84:	6825      	ldr	r5, [r4, #0]
 800ab86:	1961      	adds	r1, r4, r5
 800ab88:	428b      	cmp	r3, r1
 800ab8a:	bf04      	itt	eq
 800ab8c:	6819      	ldreq	r1, [r3, #0]
 800ab8e:	685b      	ldreq	r3, [r3, #4]
 800ab90:	6063      	str	r3, [r4, #4]
 800ab92:	bf04      	itt	eq
 800ab94:	1949      	addeq	r1, r1, r5
 800ab96:	6021      	streq	r1, [r4, #0]
 800ab98:	6054      	str	r4, [r2, #4]
 800ab9a:	e7ca      	b.n	800ab32 <_free_r+0x26>
 800ab9c:	b003      	add	sp, #12
 800ab9e:	bd30      	pop	{r4, r5, pc}
 800aba0:	200019a4 	.word	0x200019a4

0800aba4 <sbrk_aligned>:
 800aba4:	b570      	push	{r4, r5, r6, lr}
 800aba6:	4e0e      	ldr	r6, [pc, #56]	; (800abe0 <sbrk_aligned+0x3c>)
 800aba8:	460c      	mov	r4, r1
 800abaa:	6831      	ldr	r1, [r6, #0]
 800abac:	4605      	mov	r5, r0
 800abae:	b911      	cbnz	r1, 800abb6 <sbrk_aligned+0x12>
 800abb0:	f000 fd84 	bl	800b6bc <_sbrk_r>
 800abb4:	6030      	str	r0, [r6, #0]
 800abb6:	4621      	mov	r1, r4
 800abb8:	4628      	mov	r0, r5
 800abba:	f000 fd7f 	bl	800b6bc <_sbrk_r>
 800abbe:	1c43      	adds	r3, r0, #1
 800abc0:	d00a      	beq.n	800abd8 <sbrk_aligned+0x34>
 800abc2:	1cc4      	adds	r4, r0, #3
 800abc4:	f024 0403 	bic.w	r4, r4, #3
 800abc8:	42a0      	cmp	r0, r4
 800abca:	d007      	beq.n	800abdc <sbrk_aligned+0x38>
 800abcc:	1a21      	subs	r1, r4, r0
 800abce:	4628      	mov	r0, r5
 800abd0:	f000 fd74 	bl	800b6bc <_sbrk_r>
 800abd4:	3001      	adds	r0, #1
 800abd6:	d101      	bne.n	800abdc <sbrk_aligned+0x38>
 800abd8:	f04f 34ff 	mov.w	r4, #4294967295
 800abdc:	4620      	mov	r0, r4
 800abde:	bd70      	pop	{r4, r5, r6, pc}
 800abe0:	200019a8 	.word	0x200019a8

0800abe4 <_malloc_r>:
 800abe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe8:	1ccd      	adds	r5, r1, #3
 800abea:	f025 0503 	bic.w	r5, r5, #3
 800abee:	3508      	adds	r5, #8
 800abf0:	2d0c      	cmp	r5, #12
 800abf2:	bf38      	it	cc
 800abf4:	250c      	movcc	r5, #12
 800abf6:	2d00      	cmp	r5, #0
 800abf8:	4607      	mov	r7, r0
 800abfa:	db01      	blt.n	800ac00 <_malloc_r+0x1c>
 800abfc:	42a9      	cmp	r1, r5
 800abfe:	d905      	bls.n	800ac0c <_malloc_r+0x28>
 800ac00:	230c      	movs	r3, #12
 800ac02:	603b      	str	r3, [r7, #0]
 800ac04:	2600      	movs	r6, #0
 800ac06:	4630      	mov	r0, r6
 800ac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac0c:	4e2e      	ldr	r6, [pc, #184]	; (800acc8 <_malloc_r+0xe4>)
 800ac0e:	f001 fec5 	bl	800c99c <__malloc_lock>
 800ac12:	6833      	ldr	r3, [r6, #0]
 800ac14:	461c      	mov	r4, r3
 800ac16:	bb34      	cbnz	r4, 800ac66 <_malloc_r+0x82>
 800ac18:	4629      	mov	r1, r5
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	f7ff ffc2 	bl	800aba4 <sbrk_aligned>
 800ac20:	1c43      	adds	r3, r0, #1
 800ac22:	4604      	mov	r4, r0
 800ac24:	d14d      	bne.n	800acc2 <_malloc_r+0xde>
 800ac26:	6834      	ldr	r4, [r6, #0]
 800ac28:	4626      	mov	r6, r4
 800ac2a:	2e00      	cmp	r6, #0
 800ac2c:	d140      	bne.n	800acb0 <_malloc_r+0xcc>
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	4631      	mov	r1, r6
 800ac32:	4638      	mov	r0, r7
 800ac34:	eb04 0803 	add.w	r8, r4, r3
 800ac38:	f000 fd40 	bl	800b6bc <_sbrk_r>
 800ac3c:	4580      	cmp	r8, r0
 800ac3e:	d13a      	bne.n	800acb6 <_malloc_r+0xd2>
 800ac40:	6821      	ldr	r1, [r4, #0]
 800ac42:	3503      	adds	r5, #3
 800ac44:	1a6d      	subs	r5, r5, r1
 800ac46:	f025 0503 	bic.w	r5, r5, #3
 800ac4a:	3508      	adds	r5, #8
 800ac4c:	2d0c      	cmp	r5, #12
 800ac4e:	bf38      	it	cc
 800ac50:	250c      	movcc	r5, #12
 800ac52:	4629      	mov	r1, r5
 800ac54:	4638      	mov	r0, r7
 800ac56:	f7ff ffa5 	bl	800aba4 <sbrk_aligned>
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	d02b      	beq.n	800acb6 <_malloc_r+0xd2>
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	442b      	add	r3, r5
 800ac62:	6023      	str	r3, [r4, #0]
 800ac64:	e00e      	b.n	800ac84 <_malloc_r+0xa0>
 800ac66:	6822      	ldr	r2, [r4, #0]
 800ac68:	1b52      	subs	r2, r2, r5
 800ac6a:	d41e      	bmi.n	800acaa <_malloc_r+0xc6>
 800ac6c:	2a0b      	cmp	r2, #11
 800ac6e:	d916      	bls.n	800ac9e <_malloc_r+0xba>
 800ac70:	1961      	adds	r1, r4, r5
 800ac72:	42a3      	cmp	r3, r4
 800ac74:	6025      	str	r5, [r4, #0]
 800ac76:	bf18      	it	ne
 800ac78:	6059      	strne	r1, [r3, #4]
 800ac7a:	6863      	ldr	r3, [r4, #4]
 800ac7c:	bf08      	it	eq
 800ac7e:	6031      	streq	r1, [r6, #0]
 800ac80:	5162      	str	r2, [r4, r5]
 800ac82:	604b      	str	r3, [r1, #4]
 800ac84:	4638      	mov	r0, r7
 800ac86:	f104 060b 	add.w	r6, r4, #11
 800ac8a:	f001 fe8d 	bl	800c9a8 <__malloc_unlock>
 800ac8e:	f026 0607 	bic.w	r6, r6, #7
 800ac92:	1d23      	adds	r3, r4, #4
 800ac94:	1af2      	subs	r2, r6, r3
 800ac96:	d0b6      	beq.n	800ac06 <_malloc_r+0x22>
 800ac98:	1b9b      	subs	r3, r3, r6
 800ac9a:	50a3      	str	r3, [r4, r2]
 800ac9c:	e7b3      	b.n	800ac06 <_malloc_r+0x22>
 800ac9e:	6862      	ldr	r2, [r4, #4]
 800aca0:	42a3      	cmp	r3, r4
 800aca2:	bf0c      	ite	eq
 800aca4:	6032      	streq	r2, [r6, #0]
 800aca6:	605a      	strne	r2, [r3, #4]
 800aca8:	e7ec      	b.n	800ac84 <_malloc_r+0xa0>
 800acaa:	4623      	mov	r3, r4
 800acac:	6864      	ldr	r4, [r4, #4]
 800acae:	e7b2      	b.n	800ac16 <_malloc_r+0x32>
 800acb0:	4634      	mov	r4, r6
 800acb2:	6876      	ldr	r6, [r6, #4]
 800acb4:	e7b9      	b.n	800ac2a <_malloc_r+0x46>
 800acb6:	230c      	movs	r3, #12
 800acb8:	603b      	str	r3, [r7, #0]
 800acba:	4638      	mov	r0, r7
 800acbc:	f001 fe74 	bl	800c9a8 <__malloc_unlock>
 800acc0:	e7a1      	b.n	800ac06 <_malloc_r+0x22>
 800acc2:	6025      	str	r5, [r4, #0]
 800acc4:	e7de      	b.n	800ac84 <_malloc_r+0xa0>
 800acc6:	bf00      	nop
 800acc8:	200019a4 	.word	0x200019a4

0800accc <__cvt>:
 800accc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acd0:	ec55 4b10 	vmov	r4, r5, d0
 800acd4:	2d00      	cmp	r5, #0
 800acd6:	460e      	mov	r6, r1
 800acd8:	4619      	mov	r1, r3
 800acda:	462b      	mov	r3, r5
 800acdc:	bfbb      	ittet	lt
 800acde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ace2:	461d      	movlt	r5, r3
 800ace4:	2300      	movge	r3, #0
 800ace6:	232d      	movlt	r3, #45	; 0x2d
 800ace8:	700b      	strb	r3, [r1, #0]
 800acea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800acf0:	4691      	mov	r9, r2
 800acf2:	f023 0820 	bic.w	r8, r3, #32
 800acf6:	bfbc      	itt	lt
 800acf8:	4622      	movlt	r2, r4
 800acfa:	4614      	movlt	r4, r2
 800acfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad00:	d005      	beq.n	800ad0e <__cvt+0x42>
 800ad02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ad06:	d100      	bne.n	800ad0a <__cvt+0x3e>
 800ad08:	3601      	adds	r6, #1
 800ad0a:	2102      	movs	r1, #2
 800ad0c:	e000      	b.n	800ad10 <__cvt+0x44>
 800ad0e:	2103      	movs	r1, #3
 800ad10:	ab03      	add	r3, sp, #12
 800ad12:	9301      	str	r3, [sp, #4]
 800ad14:	ab02      	add	r3, sp, #8
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	ec45 4b10 	vmov	d0, r4, r5
 800ad1c:	4653      	mov	r3, sl
 800ad1e:	4632      	mov	r2, r6
 800ad20:	f000 fe2a 	bl	800b978 <_dtoa_r>
 800ad24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ad28:	4607      	mov	r7, r0
 800ad2a:	d102      	bne.n	800ad32 <__cvt+0x66>
 800ad2c:	f019 0f01 	tst.w	r9, #1
 800ad30:	d022      	beq.n	800ad78 <__cvt+0xac>
 800ad32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad36:	eb07 0906 	add.w	r9, r7, r6
 800ad3a:	d110      	bne.n	800ad5e <__cvt+0x92>
 800ad3c:	783b      	ldrb	r3, [r7, #0]
 800ad3e:	2b30      	cmp	r3, #48	; 0x30
 800ad40:	d10a      	bne.n	800ad58 <__cvt+0x8c>
 800ad42:	2200      	movs	r2, #0
 800ad44:	2300      	movs	r3, #0
 800ad46:	4620      	mov	r0, r4
 800ad48:	4629      	mov	r1, r5
 800ad4a:	f7f5 febd 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad4e:	b918      	cbnz	r0, 800ad58 <__cvt+0x8c>
 800ad50:	f1c6 0601 	rsb	r6, r6, #1
 800ad54:	f8ca 6000 	str.w	r6, [sl]
 800ad58:	f8da 3000 	ldr.w	r3, [sl]
 800ad5c:	4499      	add	r9, r3
 800ad5e:	2200      	movs	r2, #0
 800ad60:	2300      	movs	r3, #0
 800ad62:	4620      	mov	r0, r4
 800ad64:	4629      	mov	r1, r5
 800ad66:	f7f5 feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad6a:	b108      	cbz	r0, 800ad70 <__cvt+0xa4>
 800ad6c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad70:	2230      	movs	r2, #48	; 0x30
 800ad72:	9b03      	ldr	r3, [sp, #12]
 800ad74:	454b      	cmp	r3, r9
 800ad76:	d307      	bcc.n	800ad88 <__cvt+0xbc>
 800ad78:	9b03      	ldr	r3, [sp, #12]
 800ad7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad7c:	1bdb      	subs	r3, r3, r7
 800ad7e:	4638      	mov	r0, r7
 800ad80:	6013      	str	r3, [r2, #0]
 800ad82:	b004      	add	sp, #16
 800ad84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad88:	1c59      	adds	r1, r3, #1
 800ad8a:	9103      	str	r1, [sp, #12]
 800ad8c:	701a      	strb	r2, [r3, #0]
 800ad8e:	e7f0      	b.n	800ad72 <__cvt+0xa6>

0800ad90 <__exponent>:
 800ad90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad92:	4603      	mov	r3, r0
 800ad94:	2900      	cmp	r1, #0
 800ad96:	bfb8      	it	lt
 800ad98:	4249      	neglt	r1, r1
 800ad9a:	f803 2b02 	strb.w	r2, [r3], #2
 800ad9e:	bfb4      	ite	lt
 800ada0:	222d      	movlt	r2, #45	; 0x2d
 800ada2:	222b      	movge	r2, #43	; 0x2b
 800ada4:	2909      	cmp	r1, #9
 800ada6:	7042      	strb	r2, [r0, #1]
 800ada8:	dd2a      	ble.n	800ae00 <__exponent+0x70>
 800adaa:	f10d 0407 	add.w	r4, sp, #7
 800adae:	46a4      	mov	ip, r4
 800adb0:	270a      	movs	r7, #10
 800adb2:	46a6      	mov	lr, r4
 800adb4:	460a      	mov	r2, r1
 800adb6:	fb91 f6f7 	sdiv	r6, r1, r7
 800adba:	fb07 1516 	mls	r5, r7, r6, r1
 800adbe:	3530      	adds	r5, #48	; 0x30
 800adc0:	2a63      	cmp	r2, #99	; 0x63
 800adc2:	f104 34ff 	add.w	r4, r4, #4294967295
 800adc6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800adca:	4631      	mov	r1, r6
 800adcc:	dcf1      	bgt.n	800adb2 <__exponent+0x22>
 800adce:	3130      	adds	r1, #48	; 0x30
 800add0:	f1ae 0502 	sub.w	r5, lr, #2
 800add4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800add8:	1c44      	adds	r4, r0, #1
 800adda:	4629      	mov	r1, r5
 800addc:	4561      	cmp	r1, ip
 800adde:	d30a      	bcc.n	800adf6 <__exponent+0x66>
 800ade0:	f10d 0209 	add.w	r2, sp, #9
 800ade4:	eba2 020e 	sub.w	r2, r2, lr
 800ade8:	4565      	cmp	r5, ip
 800adea:	bf88      	it	hi
 800adec:	2200      	movhi	r2, #0
 800adee:	4413      	add	r3, r2
 800adf0:	1a18      	subs	r0, r3, r0
 800adf2:	b003      	add	sp, #12
 800adf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adfa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800adfe:	e7ed      	b.n	800addc <__exponent+0x4c>
 800ae00:	2330      	movs	r3, #48	; 0x30
 800ae02:	3130      	adds	r1, #48	; 0x30
 800ae04:	7083      	strb	r3, [r0, #2]
 800ae06:	70c1      	strb	r1, [r0, #3]
 800ae08:	1d03      	adds	r3, r0, #4
 800ae0a:	e7f1      	b.n	800adf0 <__exponent+0x60>

0800ae0c <_printf_float>:
 800ae0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae10:	ed2d 8b02 	vpush	{d8}
 800ae14:	b08d      	sub	sp, #52	; 0x34
 800ae16:	460c      	mov	r4, r1
 800ae18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ae1c:	4616      	mov	r6, r2
 800ae1e:	461f      	mov	r7, r3
 800ae20:	4605      	mov	r5, r0
 800ae22:	f001 fd4f 	bl	800c8c4 <_localeconv_r>
 800ae26:	f8d0 a000 	ldr.w	sl, [r0]
 800ae2a:	4650      	mov	r0, sl
 800ae2c:	f7f5 f9d0 	bl	80001d0 <strlen>
 800ae30:	2300      	movs	r3, #0
 800ae32:	930a      	str	r3, [sp, #40]	; 0x28
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	9305      	str	r3, [sp, #20]
 800ae38:	f8d8 3000 	ldr.w	r3, [r8]
 800ae3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ae40:	3307      	adds	r3, #7
 800ae42:	f023 0307 	bic.w	r3, r3, #7
 800ae46:	f103 0208 	add.w	r2, r3, #8
 800ae4a:	f8c8 2000 	str.w	r2, [r8]
 800ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ae5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae5e:	9307      	str	r3, [sp, #28]
 800ae60:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae64:	ee08 0a10 	vmov	s16, r0
 800ae68:	4b9f      	ldr	r3, [pc, #636]	; (800b0e8 <_printf_float+0x2dc>)
 800ae6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae72:	f7f5 fe5b 	bl	8000b2c <__aeabi_dcmpun>
 800ae76:	bb88      	cbnz	r0, 800aedc <_printf_float+0xd0>
 800ae78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae7c:	4b9a      	ldr	r3, [pc, #616]	; (800b0e8 <_printf_float+0x2dc>)
 800ae7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae82:	f7f5 fe35 	bl	8000af0 <__aeabi_dcmple>
 800ae86:	bb48      	cbnz	r0, 800aedc <_printf_float+0xd0>
 800ae88:	2200      	movs	r2, #0
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	4640      	mov	r0, r8
 800ae8e:	4649      	mov	r1, r9
 800ae90:	f7f5 fe24 	bl	8000adc <__aeabi_dcmplt>
 800ae94:	b110      	cbz	r0, 800ae9c <_printf_float+0x90>
 800ae96:	232d      	movs	r3, #45	; 0x2d
 800ae98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae9c:	4b93      	ldr	r3, [pc, #588]	; (800b0ec <_printf_float+0x2e0>)
 800ae9e:	4894      	ldr	r0, [pc, #592]	; (800b0f0 <_printf_float+0x2e4>)
 800aea0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aea4:	bf94      	ite	ls
 800aea6:	4698      	movls	r8, r3
 800aea8:	4680      	movhi	r8, r0
 800aeaa:	2303      	movs	r3, #3
 800aeac:	6123      	str	r3, [r4, #16]
 800aeae:	9b05      	ldr	r3, [sp, #20]
 800aeb0:	f023 0204 	bic.w	r2, r3, #4
 800aeb4:	6022      	str	r2, [r4, #0]
 800aeb6:	f04f 0900 	mov.w	r9, #0
 800aeba:	9700      	str	r7, [sp, #0]
 800aebc:	4633      	mov	r3, r6
 800aebe:	aa0b      	add	r2, sp, #44	; 0x2c
 800aec0:	4621      	mov	r1, r4
 800aec2:	4628      	mov	r0, r5
 800aec4:	f000 f9d8 	bl	800b278 <_printf_common>
 800aec8:	3001      	adds	r0, #1
 800aeca:	f040 8090 	bne.w	800afee <_printf_float+0x1e2>
 800aece:	f04f 30ff 	mov.w	r0, #4294967295
 800aed2:	b00d      	add	sp, #52	; 0x34
 800aed4:	ecbd 8b02 	vpop	{d8}
 800aed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aedc:	4642      	mov	r2, r8
 800aede:	464b      	mov	r3, r9
 800aee0:	4640      	mov	r0, r8
 800aee2:	4649      	mov	r1, r9
 800aee4:	f7f5 fe22 	bl	8000b2c <__aeabi_dcmpun>
 800aee8:	b140      	cbz	r0, 800aefc <_printf_float+0xf0>
 800aeea:	464b      	mov	r3, r9
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	bfbc      	itt	lt
 800aef0:	232d      	movlt	r3, #45	; 0x2d
 800aef2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aef6:	487f      	ldr	r0, [pc, #508]	; (800b0f4 <_printf_float+0x2e8>)
 800aef8:	4b7f      	ldr	r3, [pc, #508]	; (800b0f8 <_printf_float+0x2ec>)
 800aefa:	e7d1      	b.n	800aea0 <_printf_float+0x94>
 800aefc:	6863      	ldr	r3, [r4, #4]
 800aefe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800af02:	9206      	str	r2, [sp, #24]
 800af04:	1c5a      	adds	r2, r3, #1
 800af06:	d13f      	bne.n	800af88 <_printf_float+0x17c>
 800af08:	2306      	movs	r3, #6
 800af0a:	6063      	str	r3, [r4, #4]
 800af0c:	9b05      	ldr	r3, [sp, #20]
 800af0e:	6861      	ldr	r1, [r4, #4]
 800af10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800af14:	2300      	movs	r3, #0
 800af16:	9303      	str	r3, [sp, #12]
 800af18:	ab0a      	add	r3, sp, #40	; 0x28
 800af1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800af1e:	ab09      	add	r3, sp, #36	; 0x24
 800af20:	ec49 8b10 	vmov	d0, r8, r9
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	6022      	str	r2, [r4, #0]
 800af28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af2c:	4628      	mov	r0, r5
 800af2e:	f7ff fecd 	bl	800accc <__cvt>
 800af32:	9b06      	ldr	r3, [sp, #24]
 800af34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af36:	2b47      	cmp	r3, #71	; 0x47
 800af38:	4680      	mov	r8, r0
 800af3a:	d108      	bne.n	800af4e <_printf_float+0x142>
 800af3c:	1cc8      	adds	r0, r1, #3
 800af3e:	db02      	blt.n	800af46 <_printf_float+0x13a>
 800af40:	6863      	ldr	r3, [r4, #4]
 800af42:	4299      	cmp	r1, r3
 800af44:	dd41      	ble.n	800afca <_printf_float+0x1be>
 800af46:	f1ab 0b02 	sub.w	fp, fp, #2
 800af4a:	fa5f fb8b 	uxtb.w	fp, fp
 800af4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800af52:	d820      	bhi.n	800af96 <_printf_float+0x18a>
 800af54:	3901      	subs	r1, #1
 800af56:	465a      	mov	r2, fp
 800af58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af5c:	9109      	str	r1, [sp, #36]	; 0x24
 800af5e:	f7ff ff17 	bl	800ad90 <__exponent>
 800af62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af64:	1813      	adds	r3, r2, r0
 800af66:	2a01      	cmp	r2, #1
 800af68:	4681      	mov	r9, r0
 800af6a:	6123      	str	r3, [r4, #16]
 800af6c:	dc02      	bgt.n	800af74 <_printf_float+0x168>
 800af6e:	6822      	ldr	r2, [r4, #0]
 800af70:	07d2      	lsls	r2, r2, #31
 800af72:	d501      	bpl.n	800af78 <_printf_float+0x16c>
 800af74:	3301      	adds	r3, #1
 800af76:	6123      	str	r3, [r4, #16]
 800af78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d09c      	beq.n	800aeba <_printf_float+0xae>
 800af80:	232d      	movs	r3, #45	; 0x2d
 800af82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af86:	e798      	b.n	800aeba <_printf_float+0xae>
 800af88:	9a06      	ldr	r2, [sp, #24]
 800af8a:	2a47      	cmp	r2, #71	; 0x47
 800af8c:	d1be      	bne.n	800af0c <_printf_float+0x100>
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1bc      	bne.n	800af0c <_printf_float+0x100>
 800af92:	2301      	movs	r3, #1
 800af94:	e7b9      	b.n	800af0a <_printf_float+0xfe>
 800af96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800af9a:	d118      	bne.n	800afce <_printf_float+0x1c2>
 800af9c:	2900      	cmp	r1, #0
 800af9e:	6863      	ldr	r3, [r4, #4]
 800afa0:	dd0b      	ble.n	800afba <_printf_float+0x1ae>
 800afa2:	6121      	str	r1, [r4, #16]
 800afa4:	b913      	cbnz	r3, 800afac <_printf_float+0x1a0>
 800afa6:	6822      	ldr	r2, [r4, #0]
 800afa8:	07d0      	lsls	r0, r2, #31
 800afaa:	d502      	bpl.n	800afb2 <_printf_float+0x1a6>
 800afac:	3301      	adds	r3, #1
 800afae:	440b      	add	r3, r1
 800afb0:	6123      	str	r3, [r4, #16]
 800afb2:	65a1      	str	r1, [r4, #88]	; 0x58
 800afb4:	f04f 0900 	mov.w	r9, #0
 800afb8:	e7de      	b.n	800af78 <_printf_float+0x16c>
 800afba:	b913      	cbnz	r3, 800afc2 <_printf_float+0x1b6>
 800afbc:	6822      	ldr	r2, [r4, #0]
 800afbe:	07d2      	lsls	r2, r2, #31
 800afc0:	d501      	bpl.n	800afc6 <_printf_float+0x1ba>
 800afc2:	3302      	adds	r3, #2
 800afc4:	e7f4      	b.n	800afb0 <_printf_float+0x1a4>
 800afc6:	2301      	movs	r3, #1
 800afc8:	e7f2      	b.n	800afb0 <_printf_float+0x1a4>
 800afca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800afce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afd0:	4299      	cmp	r1, r3
 800afd2:	db05      	blt.n	800afe0 <_printf_float+0x1d4>
 800afd4:	6823      	ldr	r3, [r4, #0]
 800afd6:	6121      	str	r1, [r4, #16]
 800afd8:	07d8      	lsls	r0, r3, #31
 800afda:	d5ea      	bpl.n	800afb2 <_printf_float+0x1a6>
 800afdc:	1c4b      	adds	r3, r1, #1
 800afde:	e7e7      	b.n	800afb0 <_printf_float+0x1a4>
 800afe0:	2900      	cmp	r1, #0
 800afe2:	bfd4      	ite	le
 800afe4:	f1c1 0202 	rsble	r2, r1, #2
 800afe8:	2201      	movgt	r2, #1
 800afea:	4413      	add	r3, r2
 800afec:	e7e0      	b.n	800afb0 <_printf_float+0x1a4>
 800afee:	6823      	ldr	r3, [r4, #0]
 800aff0:	055a      	lsls	r2, r3, #21
 800aff2:	d407      	bmi.n	800b004 <_printf_float+0x1f8>
 800aff4:	6923      	ldr	r3, [r4, #16]
 800aff6:	4642      	mov	r2, r8
 800aff8:	4631      	mov	r1, r6
 800affa:	4628      	mov	r0, r5
 800affc:	47b8      	blx	r7
 800affe:	3001      	adds	r0, #1
 800b000:	d12c      	bne.n	800b05c <_printf_float+0x250>
 800b002:	e764      	b.n	800aece <_printf_float+0xc2>
 800b004:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b008:	f240 80e0 	bls.w	800b1cc <_printf_float+0x3c0>
 800b00c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b010:	2200      	movs	r2, #0
 800b012:	2300      	movs	r3, #0
 800b014:	f7f5 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 800b018:	2800      	cmp	r0, #0
 800b01a:	d034      	beq.n	800b086 <_printf_float+0x27a>
 800b01c:	4a37      	ldr	r2, [pc, #220]	; (800b0fc <_printf_float+0x2f0>)
 800b01e:	2301      	movs	r3, #1
 800b020:	4631      	mov	r1, r6
 800b022:	4628      	mov	r0, r5
 800b024:	47b8      	blx	r7
 800b026:	3001      	adds	r0, #1
 800b028:	f43f af51 	beq.w	800aece <_printf_float+0xc2>
 800b02c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b030:	429a      	cmp	r2, r3
 800b032:	db02      	blt.n	800b03a <_printf_float+0x22e>
 800b034:	6823      	ldr	r3, [r4, #0]
 800b036:	07d8      	lsls	r0, r3, #31
 800b038:	d510      	bpl.n	800b05c <_printf_float+0x250>
 800b03a:	ee18 3a10 	vmov	r3, s16
 800b03e:	4652      	mov	r2, sl
 800b040:	4631      	mov	r1, r6
 800b042:	4628      	mov	r0, r5
 800b044:	47b8      	blx	r7
 800b046:	3001      	adds	r0, #1
 800b048:	f43f af41 	beq.w	800aece <_printf_float+0xc2>
 800b04c:	f04f 0800 	mov.w	r8, #0
 800b050:	f104 091a 	add.w	r9, r4, #26
 800b054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b056:	3b01      	subs	r3, #1
 800b058:	4543      	cmp	r3, r8
 800b05a:	dc09      	bgt.n	800b070 <_printf_float+0x264>
 800b05c:	6823      	ldr	r3, [r4, #0]
 800b05e:	079b      	lsls	r3, r3, #30
 800b060:	f100 8105 	bmi.w	800b26e <_printf_float+0x462>
 800b064:	68e0      	ldr	r0, [r4, #12]
 800b066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b068:	4298      	cmp	r0, r3
 800b06a:	bfb8      	it	lt
 800b06c:	4618      	movlt	r0, r3
 800b06e:	e730      	b.n	800aed2 <_printf_float+0xc6>
 800b070:	2301      	movs	r3, #1
 800b072:	464a      	mov	r2, r9
 800b074:	4631      	mov	r1, r6
 800b076:	4628      	mov	r0, r5
 800b078:	47b8      	blx	r7
 800b07a:	3001      	adds	r0, #1
 800b07c:	f43f af27 	beq.w	800aece <_printf_float+0xc2>
 800b080:	f108 0801 	add.w	r8, r8, #1
 800b084:	e7e6      	b.n	800b054 <_printf_float+0x248>
 800b086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b088:	2b00      	cmp	r3, #0
 800b08a:	dc39      	bgt.n	800b100 <_printf_float+0x2f4>
 800b08c:	4a1b      	ldr	r2, [pc, #108]	; (800b0fc <_printf_float+0x2f0>)
 800b08e:	2301      	movs	r3, #1
 800b090:	4631      	mov	r1, r6
 800b092:	4628      	mov	r0, r5
 800b094:	47b8      	blx	r7
 800b096:	3001      	adds	r0, #1
 800b098:	f43f af19 	beq.w	800aece <_printf_float+0xc2>
 800b09c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	d102      	bne.n	800b0aa <_printf_float+0x29e>
 800b0a4:	6823      	ldr	r3, [r4, #0]
 800b0a6:	07d9      	lsls	r1, r3, #31
 800b0a8:	d5d8      	bpl.n	800b05c <_printf_float+0x250>
 800b0aa:	ee18 3a10 	vmov	r3, s16
 800b0ae:	4652      	mov	r2, sl
 800b0b0:	4631      	mov	r1, r6
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	47b8      	blx	r7
 800b0b6:	3001      	adds	r0, #1
 800b0b8:	f43f af09 	beq.w	800aece <_printf_float+0xc2>
 800b0bc:	f04f 0900 	mov.w	r9, #0
 800b0c0:	f104 0a1a 	add.w	sl, r4, #26
 800b0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0c6:	425b      	negs	r3, r3
 800b0c8:	454b      	cmp	r3, r9
 800b0ca:	dc01      	bgt.n	800b0d0 <_printf_float+0x2c4>
 800b0cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0ce:	e792      	b.n	800aff6 <_printf_float+0x1ea>
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	4652      	mov	r2, sl
 800b0d4:	4631      	mov	r1, r6
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	47b8      	blx	r7
 800b0da:	3001      	adds	r0, #1
 800b0dc:	f43f aef7 	beq.w	800aece <_printf_float+0xc2>
 800b0e0:	f109 0901 	add.w	r9, r9, #1
 800b0e4:	e7ee      	b.n	800b0c4 <_printf_float+0x2b8>
 800b0e6:	bf00      	nop
 800b0e8:	7fefffff 	.word	0x7fefffff
 800b0ec:	0800fa04 	.word	0x0800fa04
 800b0f0:	0800fa08 	.word	0x0800fa08
 800b0f4:	0800fa10 	.word	0x0800fa10
 800b0f8:	0800fa0c 	.word	0x0800fa0c
 800b0fc:	0800fa14 	.word	0x0800fa14
 800b100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b102:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b104:	429a      	cmp	r2, r3
 800b106:	bfa8      	it	ge
 800b108:	461a      	movge	r2, r3
 800b10a:	2a00      	cmp	r2, #0
 800b10c:	4691      	mov	r9, r2
 800b10e:	dc37      	bgt.n	800b180 <_printf_float+0x374>
 800b110:	f04f 0b00 	mov.w	fp, #0
 800b114:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b118:	f104 021a 	add.w	r2, r4, #26
 800b11c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b11e:	9305      	str	r3, [sp, #20]
 800b120:	eba3 0309 	sub.w	r3, r3, r9
 800b124:	455b      	cmp	r3, fp
 800b126:	dc33      	bgt.n	800b190 <_printf_float+0x384>
 800b128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b12c:	429a      	cmp	r2, r3
 800b12e:	db3b      	blt.n	800b1a8 <_printf_float+0x39c>
 800b130:	6823      	ldr	r3, [r4, #0]
 800b132:	07da      	lsls	r2, r3, #31
 800b134:	d438      	bmi.n	800b1a8 <_printf_float+0x39c>
 800b136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b138:	9a05      	ldr	r2, [sp, #20]
 800b13a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b13c:	1a9a      	subs	r2, r3, r2
 800b13e:	eba3 0901 	sub.w	r9, r3, r1
 800b142:	4591      	cmp	r9, r2
 800b144:	bfa8      	it	ge
 800b146:	4691      	movge	r9, r2
 800b148:	f1b9 0f00 	cmp.w	r9, #0
 800b14c:	dc35      	bgt.n	800b1ba <_printf_float+0x3ae>
 800b14e:	f04f 0800 	mov.w	r8, #0
 800b152:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b156:	f104 0a1a 	add.w	sl, r4, #26
 800b15a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b15e:	1a9b      	subs	r3, r3, r2
 800b160:	eba3 0309 	sub.w	r3, r3, r9
 800b164:	4543      	cmp	r3, r8
 800b166:	f77f af79 	ble.w	800b05c <_printf_float+0x250>
 800b16a:	2301      	movs	r3, #1
 800b16c:	4652      	mov	r2, sl
 800b16e:	4631      	mov	r1, r6
 800b170:	4628      	mov	r0, r5
 800b172:	47b8      	blx	r7
 800b174:	3001      	adds	r0, #1
 800b176:	f43f aeaa 	beq.w	800aece <_printf_float+0xc2>
 800b17a:	f108 0801 	add.w	r8, r8, #1
 800b17e:	e7ec      	b.n	800b15a <_printf_float+0x34e>
 800b180:	4613      	mov	r3, r2
 800b182:	4631      	mov	r1, r6
 800b184:	4642      	mov	r2, r8
 800b186:	4628      	mov	r0, r5
 800b188:	47b8      	blx	r7
 800b18a:	3001      	adds	r0, #1
 800b18c:	d1c0      	bne.n	800b110 <_printf_float+0x304>
 800b18e:	e69e      	b.n	800aece <_printf_float+0xc2>
 800b190:	2301      	movs	r3, #1
 800b192:	4631      	mov	r1, r6
 800b194:	4628      	mov	r0, r5
 800b196:	9205      	str	r2, [sp, #20]
 800b198:	47b8      	blx	r7
 800b19a:	3001      	adds	r0, #1
 800b19c:	f43f ae97 	beq.w	800aece <_printf_float+0xc2>
 800b1a0:	9a05      	ldr	r2, [sp, #20]
 800b1a2:	f10b 0b01 	add.w	fp, fp, #1
 800b1a6:	e7b9      	b.n	800b11c <_printf_float+0x310>
 800b1a8:	ee18 3a10 	vmov	r3, s16
 800b1ac:	4652      	mov	r2, sl
 800b1ae:	4631      	mov	r1, r6
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	47b8      	blx	r7
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	d1be      	bne.n	800b136 <_printf_float+0x32a>
 800b1b8:	e689      	b.n	800aece <_printf_float+0xc2>
 800b1ba:	9a05      	ldr	r2, [sp, #20]
 800b1bc:	464b      	mov	r3, r9
 800b1be:	4442      	add	r2, r8
 800b1c0:	4631      	mov	r1, r6
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	47b8      	blx	r7
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	d1c1      	bne.n	800b14e <_printf_float+0x342>
 800b1ca:	e680      	b.n	800aece <_printf_float+0xc2>
 800b1cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1ce:	2a01      	cmp	r2, #1
 800b1d0:	dc01      	bgt.n	800b1d6 <_printf_float+0x3ca>
 800b1d2:	07db      	lsls	r3, r3, #31
 800b1d4:	d538      	bpl.n	800b248 <_printf_float+0x43c>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	4642      	mov	r2, r8
 800b1da:	4631      	mov	r1, r6
 800b1dc:	4628      	mov	r0, r5
 800b1de:	47b8      	blx	r7
 800b1e0:	3001      	adds	r0, #1
 800b1e2:	f43f ae74 	beq.w	800aece <_printf_float+0xc2>
 800b1e6:	ee18 3a10 	vmov	r3, s16
 800b1ea:	4652      	mov	r2, sl
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	47b8      	blx	r7
 800b1f2:	3001      	adds	r0, #1
 800b1f4:	f43f ae6b 	beq.w	800aece <_printf_float+0xc2>
 800b1f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	2300      	movs	r3, #0
 800b200:	f7f5 fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 800b204:	b9d8      	cbnz	r0, 800b23e <_printf_float+0x432>
 800b206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b208:	f108 0201 	add.w	r2, r8, #1
 800b20c:	3b01      	subs	r3, #1
 800b20e:	4631      	mov	r1, r6
 800b210:	4628      	mov	r0, r5
 800b212:	47b8      	blx	r7
 800b214:	3001      	adds	r0, #1
 800b216:	d10e      	bne.n	800b236 <_printf_float+0x42a>
 800b218:	e659      	b.n	800aece <_printf_float+0xc2>
 800b21a:	2301      	movs	r3, #1
 800b21c:	4652      	mov	r2, sl
 800b21e:	4631      	mov	r1, r6
 800b220:	4628      	mov	r0, r5
 800b222:	47b8      	blx	r7
 800b224:	3001      	adds	r0, #1
 800b226:	f43f ae52 	beq.w	800aece <_printf_float+0xc2>
 800b22a:	f108 0801 	add.w	r8, r8, #1
 800b22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b230:	3b01      	subs	r3, #1
 800b232:	4543      	cmp	r3, r8
 800b234:	dcf1      	bgt.n	800b21a <_printf_float+0x40e>
 800b236:	464b      	mov	r3, r9
 800b238:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b23c:	e6dc      	b.n	800aff8 <_printf_float+0x1ec>
 800b23e:	f04f 0800 	mov.w	r8, #0
 800b242:	f104 0a1a 	add.w	sl, r4, #26
 800b246:	e7f2      	b.n	800b22e <_printf_float+0x422>
 800b248:	2301      	movs	r3, #1
 800b24a:	4642      	mov	r2, r8
 800b24c:	e7df      	b.n	800b20e <_printf_float+0x402>
 800b24e:	2301      	movs	r3, #1
 800b250:	464a      	mov	r2, r9
 800b252:	4631      	mov	r1, r6
 800b254:	4628      	mov	r0, r5
 800b256:	47b8      	blx	r7
 800b258:	3001      	adds	r0, #1
 800b25a:	f43f ae38 	beq.w	800aece <_printf_float+0xc2>
 800b25e:	f108 0801 	add.w	r8, r8, #1
 800b262:	68e3      	ldr	r3, [r4, #12]
 800b264:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b266:	1a5b      	subs	r3, r3, r1
 800b268:	4543      	cmp	r3, r8
 800b26a:	dcf0      	bgt.n	800b24e <_printf_float+0x442>
 800b26c:	e6fa      	b.n	800b064 <_printf_float+0x258>
 800b26e:	f04f 0800 	mov.w	r8, #0
 800b272:	f104 0919 	add.w	r9, r4, #25
 800b276:	e7f4      	b.n	800b262 <_printf_float+0x456>

0800b278 <_printf_common>:
 800b278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b27c:	4616      	mov	r6, r2
 800b27e:	4699      	mov	r9, r3
 800b280:	688a      	ldr	r2, [r1, #8]
 800b282:	690b      	ldr	r3, [r1, #16]
 800b284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b288:	4293      	cmp	r3, r2
 800b28a:	bfb8      	it	lt
 800b28c:	4613      	movlt	r3, r2
 800b28e:	6033      	str	r3, [r6, #0]
 800b290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b294:	4607      	mov	r7, r0
 800b296:	460c      	mov	r4, r1
 800b298:	b10a      	cbz	r2, 800b29e <_printf_common+0x26>
 800b29a:	3301      	adds	r3, #1
 800b29c:	6033      	str	r3, [r6, #0]
 800b29e:	6823      	ldr	r3, [r4, #0]
 800b2a0:	0699      	lsls	r1, r3, #26
 800b2a2:	bf42      	ittt	mi
 800b2a4:	6833      	ldrmi	r3, [r6, #0]
 800b2a6:	3302      	addmi	r3, #2
 800b2a8:	6033      	strmi	r3, [r6, #0]
 800b2aa:	6825      	ldr	r5, [r4, #0]
 800b2ac:	f015 0506 	ands.w	r5, r5, #6
 800b2b0:	d106      	bne.n	800b2c0 <_printf_common+0x48>
 800b2b2:	f104 0a19 	add.w	sl, r4, #25
 800b2b6:	68e3      	ldr	r3, [r4, #12]
 800b2b8:	6832      	ldr	r2, [r6, #0]
 800b2ba:	1a9b      	subs	r3, r3, r2
 800b2bc:	42ab      	cmp	r3, r5
 800b2be:	dc26      	bgt.n	800b30e <_printf_common+0x96>
 800b2c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2c4:	1e13      	subs	r3, r2, #0
 800b2c6:	6822      	ldr	r2, [r4, #0]
 800b2c8:	bf18      	it	ne
 800b2ca:	2301      	movne	r3, #1
 800b2cc:	0692      	lsls	r2, r2, #26
 800b2ce:	d42b      	bmi.n	800b328 <_printf_common+0xb0>
 800b2d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2d4:	4649      	mov	r1, r9
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	47c0      	blx	r8
 800b2da:	3001      	adds	r0, #1
 800b2dc:	d01e      	beq.n	800b31c <_printf_common+0xa4>
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	68e5      	ldr	r5, [r4, #12]
 800b2e2:	6832      	ldr	r2, [r6, #0]
 800b2e4:	f003 0306 	and.w	r3, r3, #6
 800b2e8:	2b04      	cmp	r3, #4
 800b2ea:	bf08      	it	eq
 800b2ec:	1aad      	subeq	r5, r5, r2
 800b2ee:	68a3      	ldr	r3, [r4, #8]
 800b2f0:	6922      	ldr	r2, [r4, #16]
 800b2f2:	bf0c      	ite	eq
 800b2f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2f8:	2500      	movne	r5, #0
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	bfc4      	itt	gt
 800b2fe:	1a9b      	subgt	r3, r3, r2
 800b300:	18ed      	addgt	r5, r5, r3
 800b302:	2600      	movs	r6, #0
 800b304:	341a      	adds	r4, #26
 800b306:	42b5      	cmp	r5, r6
 800b308:	d11a      	bne.n	800b340 <_printf_common+0xc8>
 800b30a:	2000      	movs	r0, #0
 800b30c:	e008      	b.n	800b320 <_printf_common+0xa8>
 800b30e:	2301      	movs	r3, #1
 800b310:	4652      	mov	r2, sl
 800b312:	4649      	mov	r1, r9
 800b314:	4638      	mov	r0, r7
 800b316:	47c0      	blx	r8
 800b318:	3001      	adds	r0, #1
 800b31a:	d103      	bne.n	800b324 <_printf_common+0xac>
 800b31c:	f04f 30ff 	mov.w	r0, #4294967295
 800b320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b324:	3501      	adds	r5, #1
 800b326:	e7c6      	b.n	800b2b6 <_printf_common+0x3e>
 800b328:	18e1      	adds	r1, r4, r3
 800b32a:	1c5a      	adds	r2, r3, #1
 800b32c:	2030      	movs	r0, #48	; 0x30
 800b32e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b332:	4422      	add	r2, r4
 800b334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b33c:	3302      	adds	r3, #2
 800b33e:	e7c7      	b.n	800b2d0 <_printf_common+0x58>
 800b340:	2301      	movs	r3, #1
 800b342:	4622      	mov	r2, r4
 800b344:	4649      	mov	r1, r9
 800b346:	4638      	mov	r0, r7
 800b348:	47c0      	blx	r8
 800b34a:	3001      	adds	r0, #1
 800b34c:	d0e6      	beq.n	800b31c <_printf_common+0xa4>
 800b34e:	3601      	adds	r6, #1
 800b350:	e7d9      	b.n	800b306 <_printf_common+0x8e>
	...

0800b354 <_printf_i>:
 800b354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b358:	7e0f      	ldrb	r7, [r1, #24]
 800b35a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b35c:	2f78      	cmp	r7, #120	; 0x78
 800b35e:	4691      	mov	r9, r2
 800b360:	4680      	mov	r8, r0
 800b362:	460c      	mov	r4, r1
 800b364:	469a      	mov	sl, r3
 800b366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b36a:	d807      	bhi.n	800b37c <_printf_i+0x28>
 800b36c:	2f62      	cmp	r7, #98	; 0x62
 800b36e:	d80a      	bhi.n	800b386 <_printf_i+0x32>
 800b370:	2f00      	cmp	r7, #0
 800b372:	f000 80d8 	beq.w	800b526 <_printf_i+0x1d2>
 800b376:	2f58      	cmp	r7, #88	; 0x58
 800b378:	f000 80a3 	beq.w	800b4c2 <_printf_i+0x16e>
 800b37c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b384:	e03a      	b.n	800b3fc <_printf_i+0xa8>
 800b386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b38a:	2b15      	cmp	r3, #21
 800b38c:	d8f6      	bhi.n	800b37c <_printf_i+0x28>
 800b38e:	a101      	add	r1, pc, #4	; (adr r1, 800b394 <_printf_i+0x40>)
 800b390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b394:	0800b3ed 	.word	0x0800b3ed
 800b398:	0800b401 	.word	0x0800b401
 800b39c:	0800b37d 	.word	0x0800b37d
 800b3a0:	0800b37d 	.word	0x0800b37d
 800b3a4:	0800b37d 	.word	0x0800b37d
 800b3a8:	0800b37d 	.word	0x0800b37d
 800b3ac:	0800b401 	.word	0x0800b401
 800b3b0:	0800b37d 	.word	0x0800b37d
 800b3b4:	0800b37d 	.word	0x0800b37d
 800b3b8:	0800b37d 	.word	0x0800b37d
 800b3bc:	0800b37d 	.word	0x0800b37d
 800b3c0:	0800b50d 	.word	0x0800b50d
 800b3c4:	0800b431 	.word	0x0800b431
 800b3c8:	0800b4ef 	.word	0x0800b4ef
 800b3cc:	0800b37d 	.word	0x0800b37d
 800b3d0:	0800b37d 	.word	0x0800b37d
 800b3d4:	0800b52f 	.word	0x0800b52f
 800b3d8:	0800b37d 	.word	0x0800b37d
 800b3dc:	0800b431 	.word	0x0800b431
 800b3e0:	0800b37d 	.word	0x0800b37d
 800b3e4:	0800b37d 	.word	0x0800b37d
 800b3e8:	0800b4f7 	.word	0x0800b4f7
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	1d1a      	adds	r2, r3, #4
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	602a      	str	r2, [r5, #0]
 800b3f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e0a3      	b.n	800b548 <_printf_i+0x1f4>
 800b400:	6820      	ldr	r0, [r4, #0]
 800b402:	6829      	ldr	r1, [r5, #0]
 800b404:	0606      	lsls	r6, r0, #24
 800b406:	f101 0304 	add.w	r3, r1, #4
 800b40a:	d50a      	bpl.n	800b422 <_printf_i+0xce>
 800b40c:	680e      	ldr	r6, [r1, #0]
 800b40e:	602b      	str	r3, [r5, #0]
 800b410:	2e00      	cmp	r6, #0
 800b412:	da03      	bge.n	800b41c <_printf_i+0xc8>
 800b414:	232d      	movs	r3, #45	; 0x2d
 800b416:	4276      	negs	r6, r6
 800b418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b41c:	485e      	ldr	r0, [pc, #376]	; (800b598 <_printf_i+0x244>)
 800b41e:	230a      	movs	r3, #10
 800b420:	e019      	b.n	800b456 <_printf_i+0x102>
 800b422:	680e      	ldr	r6, [r1, #0]
 800b424:	602b      	str	r3, [r5, #0]
 800b426:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b42a:	bf18      	it	ne
 800b42c:	b236      	sxthne	r6, r6
 800b42e:	e7ef      	b.n	800b410 <_printf_i+0xbc>
 800b430:	682b      	ldr	r3, [r5, #0]
 800b432:	6820      	ldr	r0, [r4, #0]
 800b434:	1d19      	adds	r1, r3, #4
 800b436:	6029      	str	r1, [r5, #0]
 800b438:	0601      	lsls	r1, r0, #24
 800b43a:	d501      	bpl.n	800b440 <_printf_i+0xec>
 800b43c:	681e      	ldr	r6, [r3, #0]
 800b43e:	e002      	b.n	800b446 <_printf_i+0xf2>
 800b440:	0646      	lsls	r6, r0, #25
 800b442:	d5fb      	bpl.n	800b43c <_printf_i+0xe8>
 800b444:	881e      	ldrh	r6, [r3, #0]
 800b446:	4854      	ldr	r0, [pc, #336]	; (800b598 <_printf_i+0x244>)
 800b448:	2f6f      	cmp	r7, #111	; 0x6f
 800b44a:	bf0c      	ite	eq
 800b44c:	2308      	moveq	r3, #8
 800b44e:	230a      	movne	r3, #10
 800b450:	2100      	movs	r1, #0
 800b452:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b456:	6865      	ldr	r5, [r4, #4]
 800b458:	60a5      	str	r5, [r4, #8]
 800b45a:	2d00      	cmp	r5, #0
 800b45c:	bfa2      	ittt	ge
 800b45e:	6821      	ldrge	r1, [r4, #0]
 800b460:	f021 0104 	bicge.w	r1, r1, #4
 800b464:	6021      	strge	r1, [r4, #0]
 800b466:	b90e      	cbnz	r6, 800b46c <_printf_i+0x118>
 800b468:	2d00      	cmp	r5, #0
 800b46a:	d04d      	beq.n	800b508 <_printf_i+0x1b4>
 800b46c:	4615      	mov	r5, r2
 800b46e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b472:	fb03 6711 	mls	r7, r3, r1, r6
 800b476:	5dc7      	ldrb	r7, [r0, r7]
 800b478:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b47c:	4637      	mov	r7, r6
 800b47e:	42bb      	cmp	r3, r7
 800b480:	460e      	mov	r6, r1
 800b482:	d9f4      	bls.n	800b46e <_printf_i+0x11a>
 800b484:	2b08      	cmp	r3, #8
 800b486:	d10b      	bne.n	800b4a0 <_printf_i+0x14c>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	07de      	lsls	r6, r3, #31
 800b48c:	d508      	bpl.n	800b4a0 <_printf_i+0x14c>
 800b48e:	6923      	ldr	r3, [r4, #16]
 800b490:	6861      	ldr	r1, [r4, #4]
 800b492:	4299      	cmp	r1, r3
 800b494:	bfde      	ittt	le
 800b496:	2330      	movle	r3, #48	; 0x30
 800b498:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b49c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b4a0:	1b52      	subs	r2, r2, r5
 800b4a2:	6122      	str	r2, [r4, #16]
 800b4a4:	f8cd a000 	str.w	sl, [sp]
 800b4a8:	464b      	mov	r3, r9
 800b4aa:	aa03      	add	r2, sp, #12
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	4640      	mov	r0, r8
 800b4b0:	f7ff fee2 	bl	800b278 <_printf_common>
 800b4b4:	3001      	adds	r0, #1
 800b4b6:	d14c      	bne.n	800b552 <_printf_i+0x1fe>
 800b4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4bc:	b004      	add	sp, #16
 800b4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c2:	4835      	ldr	r0, [pc, #212]	; (800b598 <_printf_i+0x244>)
 800b4c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b4c8:	6829      	ldr	r1, [r5, #0]
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b4d0:	6029      	str	r1, [r5, #0]
 800b4d2:	061d      	lsls	r5, r3, #24
 800b4d4:	d514      	bpl.n	800b500 <_printf_i+0x1ac>
 800b4d6:	07df      	lsls	r7, r3, #31
 800b4d8:	bf44      	itt	mi
 800b4da:	f043 0320 	orrmi.w	r3, r3, #32
 800b4de:	6023      	strmi	r3, [r4, #0]
 800b4e0:	b91e      	cbnz	r6, 800b4ea <_printf_i+0x196>
 800b4e2:	6823      	ldr	r3, [r4, #0]
 800b4e4:	f023 0320 	bic.w	r3, r3, #32
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	2310      	movs	r3, #16
 800b4ec:	e7b0      	b.n	800b450 <_printf_i+0xfc>
 800b4ee:	6823      	ldr	r3, [r4, #0]
 800b4f0:	f043 0320 	orr.w	r3, r3, #32
 800b4f4:	6023      	str	r3, [r4, #0]
 800b4f6:	2378      	movs	r3, #120	; 0x78
 800b4f8:	4828      	ldr	r0, [pc, #160]	; (800b59c <_printf_i+0x248>)
 800b4fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4fe:	e7e3      	b.n	800b4c8 <_printf_i+0x174>
 800b500:	0659      	lsls	r1, r3, #25
 800b502:	bf48      	it	mi
 800b504:	b2b6      	uxthmi	r6, r6
 800b506:	e7e6      	b.n	800b4d6 <_printf_i+0x182>
 800b508:	4615      	mov	r5, r2
 800b50a:	e7bb      	b.n	800b484 <_printf_i+0x130>
 800b50c:	682b      	ldr	r3, [r5, #0]
 800b50e:	6826      	ldr	r6, [r4, #0]
 800b510:	6961      	ldr	r1, [r4, #20]
 800b512:	1d18      	adds	r0, r3, #4
 800b514:	6028      	str	r0, [r5, #0]
 800b516:	0635      	lsls	r5, r6, #24
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	d501      	bpl.n	800b520 <_printf_i+0x1cc>
 800b51c:	6019      	str	r1, [r3, #0]
 800b51e:	e002      	b.n	800b526 <_printf_i+0x1d2>
 800b520:	0670      	lsls	r0, r6, #25
 800b522:	d5fb      	bpl.n	800b51c <_printf_i+0x1c8>
 800b524:	8019      	strh	r1, [r3, #0]
 800b526:	2300      	movs	r3, #0
 800b528:	6123      	str	r3, [r4, #16]
 800b52a:	4615      	mov	r5, r2
 800b52c:	e7ba      	b.n	800b4a4 <_printf_i+0x150>
 800b52e:	682b      	ldr	r3, [r5, #0]
 800b530:	1d1a      	adds	r2, r3, #4
 800b532:	602a      	str	r2, [r5, #0]
 800b534:	681d      	ldr	r5, [r3, #0]
 800b536:	6862      	ldr	r2, [r4, #4]
 800b538:	2100      	movs	r1, #0
 800b53a:	4628      	mov	r0, r5
 800b53c:	f7f4 fe50 	bl	80001e0 <memchr>
 800b540:	b108      	cbz	r0, 800b546 <_printf_i+0x1f2>
 800b542:	1b40      	subs	r0, r0, r5
 800b544:	6060      	str	r0, [r4, #4]
 800b546:	6863      	ldr	r3, [r4, #4]
 800b548:	6123      	str	r3, [r4, #16]
 800b54a:	2300      	movs	r3, #0
 800b54c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b550:	e7a8      	b.n	800b4a4 <_printf_i+0x150>
 800b552:	6923      	ldr	r3, [r4, #16]
 800b554:	462a      	mov	r2, r5
 800b556:	4649      	mov	r1, r9
 800b558:	4640      	mov	r0, r8
 800b55a:	47d0      	blx	sl
 800b55c:	3001      	adds	r0, #1
 800b55e:	d0ab      	beq.n	800b4b8 <_printf_i+0x164>
 800b560:	6823      	ldr	r3, [r4, #0]
 800b562:	079b      	lsls	r3, r3, #30
 800b564:	d413      	bmi.n	800b58e <_printf_i+0x23a>
 800b566:	68e0      	ldr	r0, [r4, #12]
 800b568:	9b03      	ldr	r3, [sp, #12]
 800b56a:	4298      	cmp	r0, r3
 800b56c:	bfb8      	it	lt
 800b56e:	4618      	movlt	r0, r3
 800b570:	e7a4      	b.n	800b4bc <_printf_i+0x168>
 800b572:	2301      	movs	r3, #1
 800b574:	4632      	mov	r2, r6
 800b576:	4649      	mov	r1, r9
 800b578:	4640      	mov	r0, r8
 800b57a:	47d0      	blx	sl
 800b57c:	3001      	adds	r0, #1
 800b57e:	d09b      	beq.n	800b4b8 <_printf_i+0x164>
 800b580:	3501      	adds	r5, #1
 800b582:	68e3      	ldr	r3, [r4, #12]
 800b584:	9903      	ldr	r1, [sp, #12]
 800b586:	1a5b      	subs	r3, r3, r1
 800b588:	42ab      	cmp	r3, r5
 800b58a:	dcf2      	bgt.n	800b572 <_printf_i+0x21e>
 800b58c:	e7eb      	b.n	800b566 <_printf_i+0x212>
 800b58e:	2500      	movs	r5, #0
 800b590:	f104 0619 	add.w	r6, r4, #25
 800b594:	e7f5      	b.n	800b582 <_printf_i+0x22e>
 800b596:	bf00      	nop
 800b598:	0800fa16 	.word	0x0800fa16
 800b59c:	0800fa27 	.word	0x0800fa27

0800b5a0 <iprintf>:
 800b5a0:	b40f      	push	{r0, r1, r2, r3}
 800b5a2:	4b0a      	ldr	r3, [pc, #40]	; (800b5cc <iprintf+0x2c>)
 800b5a4:	b513      	push	{r0, r1, r4, lr}
 800b5a6:	681c      	ldr	r4, [r3, #0]
 800b5a8:	b124      	cbz	r4, 800b5b4 <iprintf+0x14>
 800b5aa:	69a3      	ldr	r3, [r4, #24]
 800b5ac:	b913      	cbnz	r3, 800b5b4 <iprintf+0x14>
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f001 f8ea 	bl	800c788 <__sinit>
 800b5b4:	ab05      	add	r3, sp, #20
 800b5b6:	9a04      	ldr	r2, [sp, #16]
 800b5b8:	68a1      	ldr	r1, [r4, #8]
 800b5ba:	9301      	str	r3, [sp, #4]
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f001 fdbd 	bl	800d13c <_vfiprintf_r>
 800b5c2:	b002      	add	sp, #8
 800b5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5c8:	b004      	add	sp, #16
 800b5ca:	4770      	bx	lr
 800b5cc:	200008c4 	.word	0x200008c4

0800b5d0 <_puts_r>:
 800b5d0:	b570      	push	{r4, r5, r6, lr}
 800b5d2:	460e      	mov	r6, r1
 800b5d4:	4605      	mov	r5, r0
 800b5d6:	b118      	cbz	r0, 800b5e0 <_puts_r+0x10>
 800b5d8:	6983      	ldr	r3, [r0, #24]
 800b5da:	b90b      	cbnz	r3, 800b5e0 <_puts_r+0x10>
 800b5dc:	f001 f8d4 	bl	800c788 <__sinit>
 800b5e0:	69ab      	ldr	r3, [r5, #24]
 800b5e2:	68ac      	ldr	r4, [r5, #8]
 800b5e4:	b913      	cbnz	r3, 800b5ec <_puts_r+0x1c>
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	f001 f8ce 	bl	800c788 <__sinit>
 800b5ec:	4b2c      	ldr	r3, [pc, #176]	; (800b6a0 <_puts_r+0xd0>)
 800b5ee:	429c      	cmp	r4, r3
 800b5f0:	d120      	bne.n	800b634 <_puts_r+0x64>
 800b5f2:	686c      	ldr	r4, [r5, #4]
 800b5f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5f6:	07db      	lsls	r3, r3, #31
 800b5f8:	d405      	bmi.n	800b606 <_puts_r+0x36>
 800b5fa:	89a3      	ldrh	r3, [r4, #12]
 800b5fc:	0598      	lsls	r0, r3, #22
 800b5fe:	d402      	bmi.n	800b606 <_puts_r+0x36>
 800b600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b602:	f001 f964 	bl	800c8ce <__retarget_lock_acquire_recursive>
 800b606:	89a3      	ldrh	r3, [r4, #12]
 800b608:	0719      	lsls	r1, r3, #28
 800b60a:	d51d      	bpl.n	800b648 <_puts_r+0x78>
 800b60c:	6923      	ldr	r3, [r4, #16]
 800b60e:	b1db      	cbz	r3, 800b648 <_puts_r+0x78>
 800b610:	3e01      	subs	r6, #1
 800b612:	68a3      	ldr	r3, [r4, #8]
 800b614:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b618:	3b01      	subs	r3, #1
 800b61a:	60a3      	str	r3, [r4, #8]
 800b61c:	bb39      	cbnz	r1, 800b66e <_puts_r+0x9e>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	da38      	bge.n	800b694 <_puts_r+0xc4>
 800b622:	4622      	mov	r2, r4
 800b624:	210a      	movs	r1, #10
 800b626:	4628      	mov	r0, r5
 800b628:	f000 f858 	bl	800b6dc <__swbuf_r>
 800b62c:	3001      	adds	r0, #1
 800b62e:	d011      	beq.n	800b654 <_puts_r+0x84>
 800b630:	250a      	movs	r5, #10
 800b632:	e011      	b.n	800b658 <_puts_r+0x88>
 800b634:	4b1b      	ldr	r3, [pc, #108]	; (800b6a4 <_puts_r+0xd4>)
 800b636:	429c      	cmp	r4, r3
 800b638:	d101      	bne.n	800b63e <_puts_r+0x6e>
 800b63a:	68ac      	ldr	r4, [r5, #8]
 800b63c:	e7da      	b.n	800b5f4 <_puts_r+0x24>
 800b63e:	4b1a      	ldr	r3, [pc, #104]	; (800b6a8 <_puts_r+0xd8>)
 800b640:	429c      	cmp	r4, r3
 800b642:	bf08      	it	eq
 800b644:	68ec      	ldreq	r4, [r5, #12]
 800b646:	e7d5      	b.n	800b5f4 <_puts_r+0x24>
 800b648:	4621      	mov	r1, r4
 800b64a:	4628      	mov	r0, r5
 800b64c:	f000 f898 	bl	800b780 <__swsetup_r>
 800b650:	2800      	cmp	r0, #0
 800b652:	d0dd      	beq.n	800b610 <_puts_r+0x40>
 800b654:	f04f 35ff 	mov.w	r5, #4294967295
 800b658:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b65a:	07da      	lsls	r2, r3, #31
 800b65c:	d405      	bmi.n	800b66a <_puts_r+0x9a>
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	059b      	lsls	r3, r3, #22
 800b662:	d402      	bmi.n	800b66a <_puts_r+0x9a>
 800b664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b666:	f001 f933 	bl	800c8d0 <__retarget_lock_release_recursive>
 800b66a:	4628      	mov	r0, r5
 800b66c:	bd70      	pop	{r4, r5, r6, pc}
 800b66e:	2b00      	cmp	r3, #0
 800b670:	da04      	bge.n	800b67c <_puts_r+0xac>
 800b672:	69a2      	ldr	r2, [r4, #24]
 800b674:	429a      	cmp	r2, r3
 800b676:	dc06      	bgt.n	800b686 <_puts_r+0xb6>
 800b678:	290a      	cmp	r1, #10
 800b67a:	d004      	beq.n	800b686 <_puts_r+0xb6>
 800b67c:	6823      	ldr	r3, [r4, #0]
 800b67e:	1c5a      	adds	r2, r3, #1
 800b680:	6022      	str	r2, [r4, #0]
 800b682:	7019      	strb	r1, [r3, #0]
 800b684:	e7c5      	b.n	800b612 <_puts_r+0x42>
 800b686:	4622      	mov	r2, r4
 800b688:	4628      	mov	r0, r5
 800b68a:	f000 f827 	bl	800b6dc <__swbuf_r>
 800b68e:	3001      	adds	r0, #1
 800b690:	d1bf      	bne.n	800b612 <_puts_r+0x42>
 800b692:	e7df      	b.n	800b654 <_puts_r+0x84>
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	250a      	movs	r5, #10
 800b698:	1c5a      	adds	r2, r3, #1
 800b69a:	6022      	str	r2, [r4, #0]
 800b69c:	701d      	strb	r5, [r3, #0]
 800b69e:	e7db      	b.n	800b658 <_puts_r+0x88>
 800b6a0:	0800fae8 	.word	0x0800fae8
 800b6a4:	0800fb08 	.word	0x0800fb08
 800b6a8:	0800fac8 	.word	0x0800fac8

0800b6ac <puts>:
 800b6ac:	4b02      	ldr	r3, [pc, #8]	; (800b6b8 <puts+0xc>)
 800b6ae:	4601      	mov	r1, r0
 800b6b0:	6818      	ldr	r0, [r3, #0]
 800b6b2:	f7ff bf8d 	b.w	800b5d0 <_puts_r>
 800b6b6:	bf00      	nop
 800b6b8:	200008c4 	.word	0x200008c4

0800b6bc <_sbrk_r>:
 800b6bc:	b538      	push	{r3, r4, r5, lr}
 800b6be:	4d06      	ldr	r5, [pc, #24]	; (800b6d8 <_sbrk_r+0x1c>)
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	4608      	mov	r0, r1
 800b6c6:	602b      	str	r3, [r5, #0]
 800b6c8:	f7f6 fc1c 	bl	8001f04 <_sbrk>
 800b6cc:	1c43      	adds	r3, r0, #1
 800b6ce:	d102      	bne.n	800b6d6 <_sbrk_r+0x1a>
 800b6d0:	682b      	ldr	r3, [r5, #0]
 800b6d2:	b103      	cbz	r3, 800b6d6 <_sbrk_r+0x1a>
 800b6d4:	6023      	str	r3, [r4, #0]
 800b6d6:	bd38      	pop	{r3, r4, r5, pc}
 800b6d8:	200019b0 	.word	0x200019b0

0800b6dc <__swbuf_r>:
 800b6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6de:	460e      	mov	r6, r1
 800b6e0:	4614      	mov	r4, r2
 800b6e2:	4605      	mov	r5, r0
 800b6e4:	b118      	cbz	r0, 800b6ee <__swbuf_r+0x12>
 800b6e6:	6983      	ldr	r3, [r0, #24]
 800b6e8:	b90b      	cbnz	r3, 800b6ee <__swbuf_r+0x12>
 800b6ea:	f001 f84d 	bl	800c788 <__sinit>
 800b6ee:	4b21      	ldr	r3, [pc, #132]	; (800b774 <__swbuf_r+0x98>)
 800b6f0:	429c      	cmp	r4, r3
 800b6f2:	d12b      	bne.n	800b74c <__swbuf_r+0x70>
 800b6f4:	686c      	ldr	r4, [r5, #4]
 800b6f6:	69a3      	ldr	r3, [r4, #24]
 800b6f8:	60a3      	str	r3, [r4, #8]
 800b6fa:	89a3      	ldrh	r3, [r4, #12]
 800b6fc:	071a      	lsls	r2, r3, #28
 800b6fe:	d52f      	bpl.n	800b760 <__swbuf_r+0x84>
 800b700:	6923      	ldr	r3, [r4, #16]
 800b702:	b36b      	cbz	r3, 800b760 <__swbuf_r+0x84>
 800b704:	6923      	ldr	r3, [r4, #16]
 800b706:	6820      	ldr	r0, [r4, #0]
 800b708:	1ac0      	subs	r0, r0, r3
 800b70a:	6963      	ldr	r3, [r4, #20]
 800b70c:	b2f6      	uxtb	r6, r6
 800b70e:	4283      	cmp	r3, r0
 800b710:	4637      	mov	r7, r6
 800b712:	dc04      	bgt.n	800b71e <__swbuf_r+0x42>
 800b714:	4621      	mov	r1, r4
 800b716:	4628      	mov	r0, r5
 800b718:	f000 ffa2 	bl	800c660 <_fflush_r>
 800b71c:	bb30      	cbnz	r0, 800b76c <__swbuf_r+0x90>
 800b71e:	68a3      	ldr	r3, [r4, #8]
 800b720:	3b01      	subs	r3, #1
 800b722:	60a3      	str	r3, [r4, #8]
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	1c5a      	adds	r2, r3, #1
 800b728:	6022      	str	r2, [r4, #0]
 800b72a:	701e      	strb	r6, [r3, #0]
 800b72c:	6963      	ldr	r3, [r4, #20]
 800b72e:	3001      	adds	r0, #1
 800b730:	4283      	cmp	r3, r0
 800b732:	d004      	beq.n	800b73e <__swbuf_r+0x62>
 800b734:	89a3      	ldrh	r3, [r4, #12]
 800b736:	07db      	lsls	r3, r3, #31
 800b738:	d506      	bpl.n	800b748 <__swbuf_r+0x6c>
 800b73a:	2e0a      	cmp	r6, #10
 800b73c:	d104      	bne.n	800b748 <__swbuf_r+0x6c>
 800b73e:	4621      	mov	r1, r4
 800b740:	4628      	mov	r0, r5
 800b742:	f000 ff8d 	bl	800c660 <_fflush_r>
 800b746:	b988      	cbnz	r0, 800b76c <__swbuf_r+0x90>
 800b748:	4638      	mov	r0, r7
 800b74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b74c:	4b0a      	ldr	r3, [pc, #40]	; (800b778 <__swbuf_r+0x9c>)
 800b74e:	429c      	cmp	r4, r3
 800b750:	d101      	bne.n	800b756 <__swbuf_r+0x7a>
 800b752:	68ac      	ldr	r4, [r5, #8]
 800b754:	e7cf      	b.n	800b6f6 <__swbuf_r+0x1a>
 800b756:	4b09      	ldr	r3, [pc, #36]	; (800b77c <__swbuf_r+0xa0>)
 800b758:	429c      	cmp	r4, r3
 800b75a:	bf08      	it	eq
 800b75c:	68ec      	ldreq	r4, [r5, #12]
 800b75e:	e7ca      	b.n	800b6f6 <__swbuf_r+0x1a>
 800b760:	4621      	mov	r1, r4
 800b762:	4628      	mov	r0, r5
 800b764:	f000 f80c 	bl	800b780 <__swsetup_r>
 800b768:	2800      	cmp	r0, #0
 800b76a:	d0cb      	beq.n	800b704 <__swbuf_r+0x28>
 800b76c:	f04f 37ff 	mov.w	r7, #4294967295
 800b770:	e7ea      	b.n	800b748 <__swbuf_r+0x6c>
 800b772:	bf00      	nop
 800b774:	0800fae8 	.word	0x0800fae8
 800b778:	0800fb08 	.word	0x0800fb08
 800b77c:	0800fac8 	.word	0x0800fac8

0800b780 <__swsetup_r>:
 800b780:	4b32      	ldr	r3, [pc, #200]	; (800b84c <__swsetup_r+0xcc>)
 800b782:	b570      	push	{r4, r5, r6, lr}
 800b784:	681d      	ldr	r5, [r3, #0]
 800b786:	4606      	mov	r6, r0
 800b788:	460c      	mov	r4, r1
 800b78a:	b125      	cbz	r5, 800b796 <__swsetup_r+0x16>
 800b78c:	69ab      	ldr	r3, [r5, #24]
 800b78e:	b913      	cbnz	r3, 800b796 <__swsetup_r+0x16>
 800b790:	4628      	mov	r0, r5
 800b792:	f000 fff9 	bl	800c788 <__sinit>
 800b796:	4b2e      	ldr	r3, [pc, #184]	; (800b850 <__swsetup_r+0xd0>)
 800b798:	429c      	cmp	r4, r3
 800b79a:	d10f      	bne.n	800b7bc <__swsetup_r+0x3c>
 800b79c:	686c      	ldr	r4, [r5, #4]
 800b79e:	89a3      	ldrh	r3, [r4, #12]
 800b7a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7a4:	0719      	lsls	r1, r3, #28
 800b7a6:	d42c      	bmi.n	800b802 <__swsetup_r+0x82>
 800b7a8:	06dd      	lsls	r5, r3, #27
 800b7aa:	d411      	bmi.n	800b7d0 <__swsetup_r+0x50>
 800b7ac:	2309      	movs	r3, #9
 800b7ae:	6033      	str	r3, [r6, #0]
 800b7b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7b4:	81a3      	strh	r3, [r4, #12]
 800b7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ba:	e03e      	b.n	800b83a <__swsetup_r+0xba>
 800b7bc:	4b25      	ldr	r3, [pc, #148]	; (800b854 <__swsetup_r+0xd4>)
 800b7be:	429c      	cmp	r4, r3
 800b7c0:	d101      	bne.n	800b7c6 <__swsetup_r+0x46>
 800b7c2:	68ac      	ldr	r4, [r5, #8]
 800b7c4:	e7eb      	b.n	800b79e <__swsetup_r+0x1e>
 800b7c6:	4b24      	ldr	r3, [pc, #144]	; (800b858 <__swsetup_r+0xd8>)
 800b7c8:	429c      	cmp	r4, r3
 800b7ca:	bf08      	it	eq
 800b7cc:	68ec      	ldreq	r4, [r5, #12]
 800b7ce:	e7e6      	b.n	800b79e <__swsetup_r+0x1e>
 800b7d0:	0758      	lsls	r0, r3, #29
 800b7d2:	d512      	bpl.n	800b7fa <__swsetup_r+0x7a>
 800b7d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7d6:	b141      	cbz	r1, 800b7ea <__swsetup_r+0x6a>
 800b7d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7dc:	4299      	cmp	r1, r3
 800b7de:	d002      	beq.n	800b7e6 <__swsetup_r+0x66>
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f7ff f993 	bl	800ab0c <_free_r>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	6363      	str	r3, [r4, #52]	; 0x34
 800b7ea:	89a3      	ldrh	r3, [r4, #12]
 800b7ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7f0:	81a3      	strh	r3, [r4, #12]
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	6063      	str	r3, [r4, #4]
 800b7f6:	6923      	ldr	r3, [r4, #16]
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	89a3      	ldrh	r3, [r4, #12]
 800b7fc:	f043 0308 	orr.w	r3, r3, #8
 800b800:	81a3      	strh	r3, [r4, #12]
 800b802:	6923      	ldr	r3, [r4, #16]
 800b804:	b94b      	cbnz	r3, 800b81a <__swsetup_r+0x9a>
 800b806:	89a3      	ldrh	r3, [r4, #12]
 800b808:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b80c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b810:	d003      	beq.n	800b81a <__swsetup_r+0x9a>
 800b812:	4621      	mov	r1, r4
 800b814:	4630      	mov	r0, r6
 800b816:	f001 f881 	bl	800c91c <__smakebuf_r>
 800b81a:	89a0      	ldrh	r0, [r4, #12]
 800b81c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b820:	f010 0301 	ands.w	r3, r0, #1
 800b824:	d00a      	beq.n	800b83c <__swsetup_r+0xbc>
 800b826:	2300      	movs	r3, #0
 800b828:	60a3      	str	r3, [r4, #8]
 800b82a:	6963      	ldr	r3, [r4, #20]
 800b82c:	425b      	negs	r3, r3
 800b82e:	61a3      	str	r3, [r4, #24]
 800b830:	6923      	ldr	r3, [r4, #16]
 800b832:	b943      	cbnz	r3, 800b846 <__swsetup_r+0xc6>
 800b834:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b838:	d1ba      	bne.n	800b7b0 <__swsetup_r+0x30>
 800b83a:	bd70      	pop	{r4, r5, r6, pc}
 800b83c:	0781      	lsls	r1, r0, #30
 800b83e:	bf58      	it	pl
 800b840:	6963      	ldrpl	r3, [r4, #20]
 800b842:	60a3      	str	r3, [r4, #8]
 800b844:	e7f4      	b.n	800b830 <__swsetup_r+0xb0>
 800b846:	2000      	movs	r0, #0
 800b848:	e7f7      	b.n	800b83a <__swsetup_r+0xba>
 800b84a:	bf00      	nop
 800b84c:	200008c4 	.word	0x200008c4
 800b850:	0800fae8 	.word	0x0800fae8
 800b854:	0800fb08 	.word	0x0800fb08
 800b858:	0800fac8 	.word	0x0800fac8

0800b85c <quorem>:
 800b85c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b860:	6903      	ldr	r3, [r0, #16]
 800b862:	690c      	ldr	r4, [r1, #16]
 800b864:	42a3      	cmp	r3, r4
 800b866:	4607      	mov	r7, r0
 800b868:	f2c0 8081 	blt.w	800b96e <quorem+0x112>
 800b86c:	3c01      	subs	r4, #1
 800b86e:	f101 0814 	add.w	r8, r1, #20
 800b872:	f100 0514 	add.w	r5, r0, #20
 800b876:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b87a:	9301      	str	r3, [sp, #4]
 800b87c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b880:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b884:	3301      	adds	r3, #1
 800b886:	429a      	cmp	r2, r3
 800b888:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b88c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b890:	fbb2 f6f3 	udiv	r6, r2, r3
 800b894:	d331      	bcc.n	800b8fa <quorem+0x9e>
 800b896:	f04f 0e00 	mov.w	lr, #0
 800b89a:	4640      	mov	r0, r8
 800b89c:	46ac      	mov	ip, r5
 800b89e:	46f2      	mov	sl, lr
 800b8a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800b8a4:	b293      	uxth	r3, r2
 800b8a6:	fb06 e303 	mla	r3, r6, r3, lr
 800b8aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	ebaa 0303 	sub.w	r3, sl, r3
 800b8b4:	f8dc a000 	ldr.w	sl, [ip]
 800b8b8:	0c12      	lsrs	r2, r2, #16
 800b8ba:	fa13 f38a 	uxtah	r3, r3, sl
 800b8be:	fb06 e202 	mla	r2, r6, r2, lr
 800b8c2:	9300      	str	r3, [sp, #0]
 800b8c4:	9b00      	ldr	r3, [sp, #0]
 800b8c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b8ca:	b292      	uxth	r2, r2
 800b8cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b8d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8d4:	f8bd 3000 	ldrh.w	r3, [sp]
 800b8d8:	4581      	cmp	r9, r0
 800b8da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8de:	f84c 3b04 	str.w	r3, [ip], #4
 800b8e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b8e6:	d2db      	bcs.n	800b8a0 <quorem+0x44>
 800b8e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800b8ec:	b92b      	cbnz	r3, 800b8fa <quorem+0x9e>
 800b8ee:	9b01      	ldr	r3, [sp, #4]
 800b8f0:	3b04      	subs	r3, #4
 800b8f2:	429d      	cmp	r5, r3
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	d32e      	bcc.n	800b956 <quorem+0xfa>
 800b8f8:	613c      	str	r4, [r7, #16]
 800b8fa:	4638      	mov	r0, r7
 800b8fc:	f001 fadc 	bl	800ceb8 <__mcmp>
 800b900:	2800      	cmp	r0, #0
 800b902:	db24      	blt.n	800b94e <quorem+0xf2>
 800b904:	3601      	adds	r6, #1
 800b906:	4628      	mov	r0, r5
 800b908:	f04f 0c00 	mov.w	ip, #0
 800b90c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b910:	f8d0 e000 	ldr.w	lr, [r0]
 800b914:	b293      	uxth	r3, r2
 800b916:	ebac 0303 	sub.w	r3, ip, r3
 800b91a:	0c12      	lsrs	r2, r2, #16
 800b91c:	fa13 f38e 	uxtah	r3, r3, lr
 800b920:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b924:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b928:	b29b      	uxth	r3, r3
 800b92a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b92e:	45c1      	cmp	r9, r8
 800b930:	f840 3b04 	str.w	r3, [r0], #4
 800b934:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b938:	d2e8      	bcs.n	800b90c <quorem+0xb0>
 800b93a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b93e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b942:	b922      	cbnz	r2, 800b94e <quorem+0xf2>
 800b944:	3b04      	subs	r3, #4
 800b946:	429d      	cmp	r5, r3
 800b948:	461a      	mov	r2, r3
 800b94a:	d30a      	bcc.n	800b962 <quorem+0x106>
 800b94c:	613c      	str	r4, [r7, #16]
 800b94e:	4630      	mov	r0, r6
 800b950:	b003      	add	sp, #12
 800b952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b956:	6812      	ldr	r2, [r2, #0]
 800b958:	3b04      	subs	r3, #4
 800b95a:	2a00      	cmp	r2, #0
 800b95c:	d1cc      	bne.n	800b8f8 <quorem+0x9c>
 800b95e:	3c01      	subs	r4, #1
 800b960:	e7c7      	b.n	800b8f2 <quorem+0x96>
 800b962:	6812      	ldr	r2, [r2, #0]
 800b964:	3b04      	subs	r3, #4
 800b966:	2a00      	cmp	r2, #0
 800b968:	d1f0      	bne.n	800b94c <quorem+0xf0>
 800b96a:	3c01      	subs	r4, #1
 800b96c:	e7eb      	b.n	800b946 <quorem+0xea>
 800b96e:	2000      	movs	r0, #0
 800b970:	e7ee      	b.n	800b950 <quorem+0xf4>
 800b972:	0000      	movs	r0, r0
 800b974:	0000      	movs	r0, r0
	...

0800b978 <_dtoa_r>:
 800b978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97c:	ed2d 8b04 	vpush	{d8-d9}
 800b980:	ec57 6b10 	vmov	r6, r7, d0
 800b984:	b093      	sub	sp, #76	; 0x4c
 800b986:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b988:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b98c:	9106      	str	r1, [sp, #24]
 800b98e:	ee10 aa10 	vmov	sl, s0
 800b992:	4604      	mov	r4, r0
 800b994:	9209      	str	r2, [sp, #36]	; 0x24
 800b996:	930c      	str	r3, [sp, #48]	; 0x30
 800b998:	46bb      	mov	fp, r7
 800b99a:	b975      	cbnz	r5, 800b9ba <_dtoa_r+0x42>
 800b99c:	2010      	movs	r0, #16
 800b99e:	f7ff f897 	bl	800aad0 <malloc>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	6260      	str	r0, [r4, #36]	; 0x24
 800b9a6:	b920      	cbnz	r0, 800b9b2 <_dtoa_r+0x3a>
 800b9a8:	4ba7      	ldr	r3, [pc, #668]	; (800bc48 <_dtoa_r+0x2d0>)
 800b9aa:	21ea      	movs	r1, #234	; 0xea
 800b9ac:	48a7      	ldr	r0, [pc, #668]	; (800bc4c <_dtoa_r+0x2d4>)
 800b9ae:	f001 fd4b 	bl	800d448 <__assert_func>
 800b9b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b9b6:	6005      	str	r5, [r0, #0]
 800b9b8:	60c5      	str	r5, [r0, #12]
 800b9ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9bc:	6819      	ldr	r1, [r3, #0]
 800b9be:	b151      	cbz	r1, 800b9d6 <_dtoa_r+0x5e>
 800b9c0:	685a      	ldr	r2, [r3, #4]
 800b9c2:	604a      	str	r2, [r1, #4]
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	4093      	lsls	r3, r2
 800b9c8:	608b      	str	r3, [r1, #8]
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f001 f832 	bl	800ca34 <_Bfree>
 800b9d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]
 800b9d6:	1e3b      	subs	r3, r7, #0
 800b9d8:	bfaa      	itet	ge
 800b9da:	2300      	movge	r3, #0
 800b9dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b9e0:	f8c8 3000 	strge.w	r3, [r8]
 800b9e4:	4b9a      	ldr	r3, [pc, #616]	; (800bc50 <_dtoa_r+0x2d8>)
 800b9e6:	bfbc      	itt	lt
 800b9e8:	2201      	movlt	r2, #1
 800b9ea:	f8c8 2000 	strlt.w	r2, [r8]
 800b9ee:	ea33 030b 	bics.w	r3, r3, fp
 800b9f2:	d11b      	bne.n	800ba2c <_dtoa_r+0xb4>
 800b9f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b9fa:	6013      	str	r3, [r2, #0]
 800b9fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba00:	4333      	orrs	r3, r6
 800ba02:	f000 8592 	beq.w	800c52a <_dtoa_r+0xbb2>
 800ba06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba08:	b963      	cbnz	r3, 800ba24 <_dtoa_r+0xac>
 800ba0a:	4b92      	ldr	r3, [pc, #584]	; (800bc54 <_dtoa_r+0x2dc>)
 800ba0c:	e022      	b.n	800ba54 <_dtoa_r+0xdc>
 800ba0e:	4b92      	ldr	r3, [pc, #584]	; (800bc58 <_dtoa_r+0x2e0>)
 800ba10:	9301      	str	r3, [sp, #4]
 800ba12:	3308      	adds	r3, #8
 800ba14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ba16:	6013      	str	r3, [r2, #0]
 800ba18:	9801      	ldr	r0, [sp, #4]
 800ba1a:	b013      	add	sp, #76	; 0x4c
 800ba1c:	ecbd 8b04 	vpop	{d8-d9}
 800ba20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba24:	4b8b      	ldr	r3, [pc, #556]	; (800bc54 <_dtoa_r+0x2dc>)
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	3303      	adds	r3, #3
 800ba2a:	e7f3      	b.n	800ba14 <_dtoa_r+0x9c>
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2300      	movs	r3, #0
 800ba30:	4650      	mov	r0, sl
 800ba32:	4659      	mov	r1, fp
 800ba34:	f7f5 f848 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba38:	ec4b ab19 	vmov	d9, sl, fp
 800ba3c:	4680      	mov	r8, r0
 800ba3e:	b158      	cbz	r0, 800ba58 <_dtoa_r+0xe0>
 800ba40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba42:	2301      	movs	r3, #1
 800ba44:	6013      	str	r3, [r2, #0]
 800ba46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f000 856b 	beq.w	800c524 <_dtoa_r+0xbac>
 800ba4e:	4883      	ldr	r0, [pc, #524]	; (800bc5c <_dtoa_r+0x2e4>)
 800ba50:	6018      	str	r0, [r3, #0]
 800ba52:	1e43      	subs	r3, r0, #1
 800ba54:	9301      	str	r3, [sp, #4]
 800ba56:	e7df      	b.n	800ba18 <_dtoa_r+0xa0>
 800ba58:	ec4b ab10 	vmov	d0, sl, fp
 800ba5c:	aa10      	add	r2, sp, #64	; 0x40
 800ba5e:	a911      	add	r1, sp, #68	; 0x44
 800ba60:	4620      	mov	r0, r4
 800ba62:	f001 facf 	bl	800d004 <__d2b>
 800ba66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ba6a:	ee08 0a10 	vmov	s16, r0
 800ba6e:	2d00      	cmp	r5, #0
 800ba70:	f000 8084 	beq.w	800bb7c <_dtoa_r+0x204>
 800ba74:	ee19 3a90 	vmov	r3, s19
 800ba78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ba80:	4656      	mov	r6, sl
 800ba82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ba86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ba8e:	4b74      	ldr	r3, [pc, #464]	; (800bc60 <_dtoa_r+0x2e8>)
 800ba90:	2200      	movs	r2, #0
 800ba92:	4630      	mov	r0, r6
 800ba94:	4639      	mov	r1, r7
 800ba96:	f7f4 fbf7 	bl	8000288 <__aeabi_dsub>
 800ba9a:	a365      	add	r3, pc, #404	; (adr r3, 800bc30 <_dtoa_r+0x2b8>)
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	f7f4 fdaa 	bl	80005f8 <__aeabi_dmul>
 800baa4:	a364      	add	r3, pc, #400	; (adr r3, 800bc38 <_dtoa_r+0x2c0>)
 800baa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baaa:	f7f4 fbef 	bl	800028c <__adddf3>
 800baae:	4606      	mov	r6, r0
 800bab0:	4628      	mov	r0, r5
 800bab2:	460f      	mov	r7, r1
 800bab4:	f7f4 fd36 	bl	8000524 <__aeabi_i2d>
 800bab8:	a361      	add	r3, pc, #388	; (adr r3, 800bc40 <_dtoa_r+0x2c8>)
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	f7f4 fd9b 	bl	80005f8 <__aeabi_dmul>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	4630      	mov	r0, r6
 800bac8:	4639      	mov	r1, r7
 800baca:	f7f4 fbdf 	bl	800028c <__adddf3>
 800bace:	4606      	mov	r6, r0
 800bad0:	460f      	mov	r7, r1
 800bad2:	f7f5 f841 	bl	8000b58 <__aeabi_d2iz>
 800bad6:	2200      	movs	r2, #0
 800bad8:	9000      	str	r0, [sp, #0]
 800bada:	2300      	movs	r3, #0
 800badc:	4630      	mov	r0, r6
 800bade:	4639      	mov	r1, r7
 800bae0:	f7f4 fffc 	bl	8000adc <__aeabi_dcmplt>
 800bae4:	b150      	cbz	r0, 800bafc <_dtoa_r+0x184>
 800bae6:	9800      	ldr	r0, [sp, #0]
 800bae8:	f7f4 fd1c 	bl	8000524 <__aeabi_i2d>
 800baec:	4632      	mov	r2, r6
 800baee:	463b      	mov	r3, r7
 800baf0:	f7f4 ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 800baf4:	b910      	cbnz	r0, 800bafc <_dtoa_r+0x184>
 800baf6:	9b00      	ldr	r3, [sp, #0]
 800baf8:	3b01      	subs	r3, #1
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	9b00      	ldr	r3, [sp, #0]
 800bafe:	2b16      	cmp	r3, #22
 800bb00:	d85a      	bhi.n	800bbb8 <_dtoa_r+0x240>
 800bb02:	9a00      	ldr	r2, [sp, #0]
 800bb04:	4b57      	ldr	r3, [pc, #348]	; (800bc64 <_dtoa_r+0x2ec>)
 800bb06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0e:	ec51 0b19 	vmov	r0, r1, d9
 800bb12:	f7f4 ffe3 	bl	8000adc <__aeabi_dcmplt>
 800bb16:	2800      	cmp	r0, #0
 800bb18:	d050      	beq.n	800bbbc <_dtoa_r+0x244>
 800bb1a:	9b00      	ldr	r3, [sp, #0]
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	2300      	movs	r3, #0
 800bb22:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb26:	1b5d      	subs	r5, r3, r5
 800bb28:	1e6b      	subs	r3, r5, #1
 800bb2a:	9305      	str	r3, [sp, #20]
 800bb2c:	bf45      	ittet	mi
 800bb2e:	f1c5 0301 	rsbmi	r3, r5, #1
 800bb32:	9304      	strmi	r3, [sp, #16]
 800bb34:	2300      	movpl	r3, #0
 800bb36:	2300      	movmi	r3, #0
 800bb38:	bf4c      	ite	mi
 800bb3a:	9305      	strmi	r3, [sp, #20]
 800bb3c:	9304      	strpl	r3, [sp, #16]
 800bb3e:	9b00      	ldr	r3, [sp, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	db3d      	blt.n	800bbc0 <_dtoa_r+0x248>
 800bb44:	9b05      	ldr	r3, [sp, #20]
 800bb46:	9a00      	ldr	r2, [sp, #0]
 800bb48:	920a      	str	r2, [sp, #40]	; 0x28
 800bb4a:	4413      	add	r3, r2
 800bb4c:	9305      	str	r3, [sp, #20]
 800bb4e:	2300      	movs	r3, #0
 800bb50:	9307      	str	r3, [sp, #28]
 800bb52:	9b06      	ldr	r3, [sp, #24]
 800bb54:	2b09      	cmp	r3, #9
 800bb56:	f200 8089 	bhi.w	800bc6c <_dtoa_r+0x2f4>
 800bb5a:	2b05      	cmp	r3, #5
 800bb5c:	bfc4      	itt	gt
 800bb5e:	3b04      	subgt	r3, #4
 800bb60:	9306      	strgt	r3, [sp, #24]
 800bb62:	9b06      	ldr	r3, [sp, #24]
 800bb64:	f1a3 0302 	sub.w	r3, r3, #2
 800bb68:	bfcc      	ite	gt
 800bb6a:	2500      	movgt	r5, #0
 800bb6c:	2501      	movle	r5, #1
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	f200 8087 	bhi.w	800bc82 <_dtoa_r+0x30a>
 800bb74:	e8df f003 	tbb	[pc, r3]
 800bb78:	59383a2d 	.word	0x59383a2d
 800bb7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bb80:	441d      	add	r5, r3
 800bb82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb86:	2b20      	cmp	r3, #32
 800bb88:	bfc1      	itttt	gt
 800bb8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bb92:	fa0b f303 	lslgt.w	r3, fp, r3
 800bb96:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bb9a:	bfda      	itte	le
 800bb9c:	f1c3 0320 	rsble	r3, r3, #32
 800bba0:	fa06 f003 	lslle.w	r0, r6, r3
 800bba4:	4318      	orrgt	r0, r3
 800bba6:	f7f4 fcad 	bl	8000504 <__aeabi_ui2d>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	4606      	mov	r6, r0
 800bbae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bbb2:	3d01      	subs	r5, #1
 800bbb4:	930e      	str	r3, [sp, #56]	; 0x38
 800bbb6:	e76a      	b.n	800ba8e <_dtoa_r+0x116>
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e7b2      	b.n	800bb22 <_dtoa_r+0x1aa>
 800bbbc:	900b      	str	r0, [sp, #44]	; 0x2c
 800bbbe:	e7b1      	b.n	800bb24 <_dtoa_r+0x1ac>
 800bbc0:	9b04      	ldr	r3, [sp, #16]
 800bbc2:	9a00      	ldr	r2, [sp, #0]
 800bbc4:	1a9b      	subs	r3, r3, r2
 800bbc6:	9304      	str	r3, [sp, #16]
 800bbc8:	4253      	negs	r3, r2
 800bbca:	9307      	str	r3, [sp, #28]
 800bbcc:	2300      	movs	r3, #0
 800bbce:	930a      	str	r3, [sp, #40]	; 0x28
 800bbd0:	e7bf      	b.n	800bb52 <_dtoa_r+0x1da>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	9308      	str	r3, [sp, #32]
 800bbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	dc55      	bgt.n	800bc88 <_dtoa_r+0x310>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	9209      	str	r2, [sp, #36]	; 0x24
 800bbe6:	e00c      	b.n	800bc02 <_dtoa_r+0x28a>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e7f3      	b.n	800bbd4 <_dtoa_r+0x25c>
 800bbec:	2300      	movs	r3, #0
 800bbee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbf0:	9308      	str	r3, [sp, #32]
 800bbf2:	9b00      	ldr	r3, [sp, #0]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	9302      	str	r3, [sp, #8]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	9303      	str	r3, [sp, #12]
 800bbfe:	bfb8      	it	lt
 800bc00:	2301      	movlt	r3, #1
 800bc02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bc04:	2200      	movs	r2, #0
 800bc06:	6042      	str	r2, [r0, #4]
 800bc08:	2204      	movs	r2, #4
 800bc0a:	f102 0614 	add.w	r6, r2, #20
 800bc0e:	429e      	cmp	r6, r3
 800bc10:	6841      	ldr	r1, [r0, #4]
 800bc12:	d93d      	bls.n	800bc90 <_dtoa_r+0x318>
 800bc14:	4620      	mov	r0, r4
 800bc16:	f000 fecd 	bl	800c9b4 <_Balloc>
 800bc1a:	9001      	str	r0, [sp, #4]
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	d13b      	bne.n	800bc98 <_dtoa_r+0x320>
 800bc20:	4b11      	ldr	r3, [pc, #68]	; (800bc68 <_dtoa_r+0x2f0>)
 800bc22:	4602      	mov	r2, r0
 800bc24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bc28:	e6c0      	b.n	800b9ac <_dtoa_r+0x34>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e7df      	b.n	800bbee <_dtoa_r+0x276>
 800bc2e:	bf00      	nop
 800bc30:	636f4361 	.word	0x636f4361
 800bc34:	3fd287a7 	.word	0x3fd287a7
 800bc38:	8b60c8b3 	.word	0x8b60c8b3
 800bc3c:	3fc68a28 	.word	0x3fc68a28
 800bc40:	509f79fb 	.word	0x509f79fb
 800bc44:	3fd34413 	.word	0x3fd34413
 800bc48:	0800fa45 	.word	0x0800fa45
 800bc4c:	0800fa5c 	.word	0x0800fa5c
 800bc50:	7ff00000 	.word	0x7ff00000
 800bc54:	0800fa41 	.word	0x0800fa41
 800bc58:	0800fa38 	.word	0x0800fa38
 800bc5c:	0800fa15 	.word	0x0800fa15
 800bc60:	3ff80000 	.word	0x3ff80000
 800bc64:	0800fbb0 	.word	0x0800fbb0
 800bc68:	0800fab7 	.word	0x0800fab7
 800bc6c:	2501      	movs	r5, #1
 800bc6e:	2300      	movs	r3, #0
 800bc70:	9306      	str	r3, [sp, #24]
 800bc72:	9508      	str	r5, [sp, #32]
 800bc74:	f04f 33ff 	mov.w	r3, #4294967295
 800bc78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	2312      	movs	r3, #18
 800bc80:	e7b0      	b.n	800bbe4 <_dtoa_r+0x26c>
 800bc82:	2301      	movs	r3, #1
 800bc84:	9308      	str	r3, [sp, #32]
 800bc86:	e7f5      	b.n	800bc74 <_dtoa_r+0x2fc>
 800bc88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc8e:	e7b8      	b.n	800bc02 <_dtoa_r+0x28a>
 800bc90:	3101      	adds	r1, #1
 800bc92:	6041      	str	r1, [r0, #4]
 800bc94:	0052      	lsls	r2, r2, #1
 800bc96:	e7b8      	b.n	800bc0a <_dtoa_r+0x292>
 800bc98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc9a:	9a01      	ldr	r2, [sp, #4]
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	9b03      	ldr	r3, [sp, #12]
 800bca0:	2b0e      	cmp	r3, #14
 800bca2:	f200 809d 	bhi.w	800bde0 <_dtoa_r+0x468>
 800bca6:	2d00      	cmp	r5, #0
 800bca8:	f000 809a 	beq.w	800bde0 <_dtoa_r+0x468>
 800bcac:	9b00      	ldr	r3, [sp, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	dd32      	ble.n	800bd18 <_dtoa_r+0x3a0>
 800bcb2:	4ab7      	ldr	r2, [pc, #732]	; (800bf90 <_dtoa_r+0x618>)
 800bcb4:	f003 030f 	and.w	r3, r3, #15
 800bcb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bcbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcc0:	9b00      	ldr	r3, [sp, #0]
 800bcc2:	05d8      	lsls	r0, r3, #23
 800bcc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bcc8:	d516      	bpl.n	800bcf8 <_dtoa_r+0x380>
 800bcca:	4bb2      	ldr	r3, [pc, #712]	; (800bf94 <_dtoa_r+0x61c>)
 800bccc:	ec51 0b19 	vmov	r0, r1, d9
 800bcd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bcd4:	f7f4 fdba 	bl	800084c <__aeabi_ddiv>
 800bcd8:	f007 070f 	and.w	r7, r7, #15
 800bcdc:	4682      	mov	sl, r0
 800bcde:	468b      	mov	fp, r1
 800bce0:	2503      	movs	r5, #3
 800bce2:	4eac      	ldr	r6, [pc, #688]	; (800bf94 <_dtoa_r+0x61c>)
 800bce4:	b957      	cbnz	r7, 800bcfc <_dtoa_r+0x384>
 800bce6:	4642      	mov	r2, r8
 800bce8:	464b      	mov	r3, r9
 800bcea:	4650      	mov	r0, sl
 800bcec:	4659      	mov	r1, fp
 800bcee:	f7f4 fdad 	bl	800084c <__aeabi_ddiv>
 800bcf2:	4682      	mov	sl, r0
 800bcf4:	468b      	mov	fp, r1
 800bcf6:	e028      	b.n	800bd4a <_dtoa_r+0x3d2>
 800bcf8:	2502      	movs	r5, #2
 800bcfa:	e7f2      	b.n	800bce2 <_dtoa_r+0x36a>
 800bcfc:	07f9      	lsls	r1, r7, #31
 800bcfe:	d508      	bpl.n	800bd12 <_dtoa_r+0x39a>
 800bd00:	4640      	mov	r0, r8
 800bd02:	4649      	mov	r1, r9
 800bd04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd08:	f7f4 fc76 	bl	80005f8 <__aeabi_dmul>
 800bd0c:	3501      	adds	r5, #1
 800bd0e:	4680      	mov	r8, r0
 800bd10:	4689      	mov	r9, r1
 800bd12:	107f      	asrs	r7, r7, #1
 800bd14:	3608      	adds	r6, #8
 800bd16:	e7e5      	b.n	800bce4 <_dtoa_r+0x36c>
 800bd18:	f000 809b 	beq.w	800be52 <_dtoa_r+0x4da>
 800bd1c:	9b00      	ldr	r3, [sp, #0]
 800bd1e:	4f9d      	ldr	r7, [pc, #628]	; (800bf94 <_dtoa_r+0x61c>)
 800bd20:	425e      	negs	r6, r3
 800bd22:	4b9b      	ldr	r3, [pc, #620]	; (800bf90 <_dtoa_r+0x618>)
 800bd24:	f006 020f 	and.w	r2, r6, #15
 800bd28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd30:	ec51 0b19 	vmov	r0, r1, d9
 800bd34:	f7f4 fc60 	bl	80005f8 <__aeabi_dmul>
 800bd38:	1136      	asrs	r6, r6, #4
 800bd3a:	4682      	mov	sl, r0
 800bd3c:	468b      	mov	fp, r1
 800bd3e:	2300      	movs	r3, #0
 800bd40:	2502      	movs	r5, #2
 800bd42:	2e00      	cmp	r6, #0
 800bd44:	d17a      	bne.n	800be3c <_dtoa_r+0x4c4>
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d1d3      	bne.n	800bcf2 <_dtoa_r+0x37a>
 800bd4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f000 8082 	beq.w	800be56 <_dtoa_r+0x4de>
 800bd52:	4b91      	ldr	r3, [pc, #580]	; (800bf98 <_dtoa_r+0x620>)
 800bd54:	2200      	movs	r2, #0
 800bd56:	4650      	mov	r0, sl
 800bd58:	4659      	mov	r1, fp
 800bd5a:	f7f4 febf 	bl	8000adc <__aeabi_dcmplt>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	d079      	beq.n	800be56 <_dtoa_r+0x4de>
 800bd62:	9b03      	ldr	r3, [sp, #12]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d076      	beq.n	800be56 <_dtoa_r+0x4de>
 800bd68:	9b02      	ldr	r3, [sp, #8]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	dd36      	ble.n	800bddc <_dtoa_r+0x464>
 800bd6e:	9b00      	ldr	r3, [sp, #0]
 800bd70:	4650      	mov	r0, sl
 800bd72:	4659      	mov	r1, fp
 800bd74:	1e5f      	subs	r7, r3, #1
 800bd76:	2200      	movs	r2, #0
 800bd78:	4b88      	ldr	r3, [pc, #544]	; (800bf9c <_dtoa_r+0x624>)
 800bd7a:	f7f4 fc3d 	bl	80005f8 <__aeabi_dmul>
 800bd7e:	9e02      	ldr	r6, [sp, #8]
 800bd80:	4682      	mov	sl, r0
 800bd82:	468b      	mov	fp, r1
 800bd84:	3501      	adds	r5, #1
 800bd86:	4628      	mov	r0, r5
 800bd88:	f7f4 fbcc 	bl	8000524 <__aeabi_i2d>
 800bd8c:	4652      	mov	r2, sl
 800bd8e:	465b      	mov	r3, fp
 800bd90:	f7f4 fc32 	bl	80005f8 <__aeabi_dmul>
 800bd94:	4b82      	ldr	r3, [pc, #520]	; (800bfa0 <_dtoa_r+0x628>)
 800bd96:	2200      	movs	r2, #0
 800bd98:	f7f4 fa78 	bl	800028c <__adddf3>
 800bd9c:	46d0      	mov	r8, sl
 800bd9e:	46d9      	mov	r9, fp
 800bda0:	4682      	mov	sl, r0
 800bda2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bda6:	2e00      	cmp	r6, #0
 800bda8:	d158      	bne.n	800be5c <_dtoa_r+0x4e4>
 800bdaa:	4b7e      	ldr	r3, [pc, #504]	; (800bfa4 <_dtoa_r+0x62c>)
 800bdac:	2200      	movs	r2, #0
 800bdae:	4640      	mov	r0, r8
 800bdb0:	4649      	mov	r1, r9
 800bdb2:	f7f4 fa69 	bl	8000288 <__aeabi_dsub>
 800bdb6:	4652      	mov	r2, sl
 800bdb8:	465b      	mov	r3, fp
 800bdba:	4680      	mov	r8, r0
 800bdbc:	4689      	mov	r9, r1
 800bdbe:	f7f4 feab 	bl	8000b18 <__aeabi_dcmpgt>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	f040 8295 	bne.w	800c2f2 <_dtoa_r+0x97a>
 800bdc8:	4652      	mov	r2, sl
 800bdca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bdce:	4640      	mov	r0, r8
 800bdd0:	4649      	mov	r1, r9
 800bdd2:	f7f4 fe83 	bl	8000adc <__aeabi_dcmplt>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	f040 8289 	bne.w	800c2ee <_dtoa_r+0x976>
 800bddc:	ec5b ab19 	vmov	sl, fp, d9
 800bde0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	f2c0 8148 	blt.w	800c078 <_dtoa_r+0x700>
 800bde8:	9a00      	ldr	r2, [sp, #0]
 800bdea:	2a0e      	cmp	r2, #14
 800bdec:	f300 8144 	bgt.w	800c078 <_dtoa_r+0x700>
 800bdf0:	4b67      	ldr	r3, [pc, #412]	; (800bf90 <_dtoa_r+0x618>)
 800bdf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f280 80d5 	bge.w	800bfac <_dtoa_r+0x634>
 800be02:	9b03      	ldr	r3, [sp, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	f300 80d1 	bgt.w	800bfac <_dtoa_r+0x634>
 800be0a:	f040 826f 	bne.w	800c2ec <_dtoa_r+0x974>
 800be0e:	4b65      	ldr	r3, [pc, #404]	; (800bfa4 <_dtoa_r+0x62c>)
 800be10:	2200      	movs	r2, #0
 800be12:	4640      	mov	r0, r8
 800be14:	4649      	mov	r1, r9
 800be16:	f7f4 fbef 	bl	80005f8 <__aeabi_dmul>
 800be1a:	4652      	mov	r2, sl
 800be1c:	465b      	mov	r3, fp
 800be1e:	f7f4 fe71 	bl	8000b04 <__aeabi_dcmpge>
 800be22:	9e03      	ldr	r6, [sp, #12]
 800be24:	4637      	mov	r7, r6
 800be26:	2800      	cmp	r0, #0
 800be28:	f040 8245 	bne.w	800c2b6 <_dtoa_r+0x93e>
 800be2c:	9d01      	ldr	r5, [sp, #4]
 800be2e:	2331      	movs	r3, #49	; 0x31
 800be30:	f805 3b01 	strb.w	r3, [r5], #1
 800be34:	9b00      	ldr	r3, [sp, #0]
 800be36:	3301      	adds	r3, #1
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	e240      	b.n	800c2be <_dtoa_r+0x946>
 800be3c:	07f2      	lsls	r2, r6, #31
 800be3e:	d505      	bpl.n	800be4c <_dtoa_r+0x4d4>
 800be40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be44:	f7f4 fbd8 	bl	80005f8 <__aeabi_dmul>
 800be48:	3501      	adds	r5, #1
 800be4a:	2301      	movs	r3, #1
 800be4c:	1076      	asrs	r6, r6, #1
 800be4e:	3708      	adds	r7, #8
 800be50:	e777      	b.n	800bd42 <_dtoa_r+0x3ca>
 800be52:	2502      	movs	r5, #2
 800be54:	e779      	b.n	800bd4a <_dtoa_r+0x3d2>
 800be56:	9f00      	ldr	r7, [sp, #0]
 800be58:	9e03      	ldr	r6, [sp, #12]
 800be5a:	e794      	b.n	800bd86 <_dtoa_r+0x40e>
 800be5c:	9901      	ldr	r1, [sp, #4]
 800be5e:	4b4c      	ldr	r3, [pc, #304]	; (800bf90 <_dtoa_r+0x618>)
 800be60:	4431      	add	r1, r6
 800be62:	910d      	str	r1, [sp, #52]	; 0x34
 800be64:	9908      	ldr	r1, [sp, #32]
 800be66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be6e:	2900      	cmp	r1, #0
 800be70:	d043      	beq.n	800befa <_dtoa_r+0x582>
 800be72:	494d      	ldr	r1, [pc, #308]	; (800bfa8 <_dtoa_r+0x630>)
 800be74:	2000      	movs	r0, #0
 800be76:	f7f4 fce9 	bl	800084c <__aeabi_ddiv>
 800be7a:	4652      	mov	r2, sl
 800be7c:	465b      	mov	r3, fp
 800be7e:	f7f4 fa03 	bl	8000288 <__aeabi_dsub>
 800be82:	9d01      	ldr	r5, [sp, #4]
 800be84:	4682      	mov	sl, r0
 800be86:	468b      	mov	fp, r1
 800be88:	4649      	mov	r1, r9
 800be8a:	4640      	mov	r0, r8
 800be8c:	f7f4 fe64 	bl	8000b58 <__aeabi_d2iz>
 800be90:	4606      	mov	r6, r0
 800be92:	f7f4 fb47 	bl	8000524 <__aeabi_i2d>
 800be96:	4602      	mov	r2, r0
 800be98:	460b      	mov	r3, r1
 800be9a:	4640      	mov	r0, r8
 800be9c:	4649      	mov	r1, r9
 800be9e:	f7f4 f9f3 	bl	8000288 <__aeabi_dsub>
 800bea2:	3630      	adds	r6, #48	; 0x30
 800bea4:	f805 6b01 	strb.w	r6, [r5], #1
 800bea8:	4652      	mov	r2, sl
 800beaa:	465b      	mov	r3, fp
 800beac:	4680      	mov	r8, r0
 800beae:	4689      	mov	r9, r1
 800beb0:	f7f4 fe14 	bl	8000adc <__aeabi_dcmplt>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d163      	bne.n	800bf80 <_dtoa_r+0x608>
 800beb8:	4642      	mov	r2, r8
 800beba:	464b      	mov	r3, r9
 800bebc:	4936      	ldr	r1, [pc, #216]	; (800bf98 <_dtoa_r+0x620>)
 800bebe:	2000      	movs	r0, #0
 800bec0:	f7f4 f9e2 	bl	8000288 <__aeabi_dsub>
 800bec4:	4652      	mov	r2, sl
 800bec6:	465b      	mov	r3, fp
 800bec8:	f7f4 fe08 	bl	8000adc <__aeabi_dcmplt>
 800becc:	2800      	cmp	r0, #0
 800bece:	f040 80b5 	bne.w	800c03c <_dtoa_r+0x6c4>
 800bed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bed4:	429d      	cmp	r5, r3
 800bed6:	d081      	beq.n	800bddc <_dtoa_r+0x464>
 800bed8:	4b30      	ldr	r3, [pc, #192]	; (800bf9c <_dtoa_r+0x624>)
 800beda:	2200      	movs	r2, #0
 800bedc:	4650      	mov	r0, sl
 800bede:	4659      	mov	r1, fp
 800bee0:	f7f4 fb8a 	bl	80005f8 <__aeabi_dmul>
 800bee4:	4b2d      	ldr	r3, [pc, #180]	; (800bf9c <_dtoa_r+0x624>)
 800bee6:	4682      	mov	sl, r0
 800bee8:	468b      	mov	fp, r1
 800beea:	4640      	mov	r0, r8
 800beec:	4649      	mov	r1, r9
 800beee:	2200      	movs	r2, #0
 800bef0:	f7f4 fb82 	bl	80005f8 <__aeabi_dmul>
 800bef4:	4680      	mov	r8, r0
 800bef6:	4689      	mov	r9, r1
 800bef8:	e7c6      	b.n	800be88 <_dtoa_r+0x510>
 800befa:	4650      	mov	r0, sl
 800befc:	4659      	mov	r1, fp
 800befe:	f7f4 fb7b 	bl	80005f8 <__aeabi_dmul>
 800bf02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf04:	9d01      	ldr	r5, [sp, #4]
 800bf06:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf08:	4682      	mov	sl, r0
 800bf0a:	468b      	mov	fp, r1
 800bf0c:	4649      	mov	r1, r9
 800bf0e:	4640      	mov	r0, r8
 800bf10:	f7f4 fe22 	bl	8000b58 <__aeabi_d2iz>
 800bf14:	4606      	mov	r6, r0
 800bf16:	f7f4 fb05 	bl	8000524 <__aeabi_i2d>
 800bf1a:	3630      	adds	r6, #48	; 0x30
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4640      	mov	r0, r8
 800bf22:	4649      	mov	r1, r9
 800bf24:	f7f4 f9b0 	bl	8000288 <__aeabi_dsub>
 800bf28:	f805 6b01 	strb.w	r6, [r5], #1
 800bf2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf2e:	429d      	cmp	r5, r3
 800bf30:	4680      	mov	r8, r0
 800bf32:	4689      	mov	r9, r1
 800bf34:	f04f 0200 	mov.w	r2, #0
 800bf38:	d124      	bne.n	800bf84 <_dtoa_r+0x60c>
 800bf3a:	4b1b      	ldr	r3, [pc, #108]	; (800bfa8 <_dtoa_r+0x630>)
 800bf3c:	4650      	mov	r0, sl
 800bf3e:	4659      	mov	r1, fp
 800bf40:	f7f4 f9a4 	bl	800028c <__adddf3>
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	4640      	mov	r0, r8
 800bf4a:	4649      	mov	r1, r9
 800bf4c:	f7f4 fde4 	bl	8000b18 <__aeabi_dcmpgt>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d173      	bne.n	800c03c <_dtoa_r+0x6c4>
 800bf54:	4652      	mov	r2, sl
 800bf56:	465b      	mov	r3, fp
 800bf58:	4913      	ldr	r1, [pc, #76]	; (800bfa8 <_dtoa_r+0x630>)
 800bf5a:	2000      	movs	r0, #0
 800bf5c:	f7f4 f994 	bl	8000288 <__aeabi_dsub>
 800bf60:	4602      	mov	r2, r0
 800bf62:	460b      	mov	r3, r1
 800bf64:	4640      	mov	r0, r8
 800bf66:	4649      	mov	r1, r9
 800bf68:	f7f4 fdb8 	bl	8000adc <__aeabi_dcmplt>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	f43f af35 	beq.w	800bddc <_dtoa_r+0x464>
 800bf72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf74:	1e6b      	subs	r3, r5, #1
 800bf76:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf7c:	2b30      	cmp	r3, #48	; 0x30
 800bf7e:	d0f8      	beq.n	800bf72 <_dtoa_r+0x5fa>
 800bf80:	9700      	str	r7, [sp, #0]
 800bf82:	e049      	b.n	800c018 <_dtoa_r+0x6a0>
 800bf84:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <_dtoa_r+0x624>)
 800bf86:	f7f4 fb37 	bl	80005f8 <__aeabi_dmul>
 800bf8a:	4680      	mov	r8, r0
 800bf8c:	4689      	mov	r9, r1
 800bf8e:	e7bd      	b.n	800bf0c <_dtoa_r+0x594>
 800bf90:	0800fbb0 	.word	0x0800fbb0
 800bf94:	0800fb88 	.word	0x0800fb88
 800bf98:	3ff00000 	.word	0x3ff00000
 800bf9c:	40240000 	.word	0x40240000
 800bfa0:	401c0000 	.word	0x401c0000
 800bfa4:	40140000 	.word	0x40140000
 800bfa8:	3fe00000 	.word	0x3fe00000
 800bfac:	9d01      	ldr	r5, [sp, #4]
 800bfae:	4656      	mov	r6, sl
 800bfb0:	465f      	mov	r7, fp
 800bfb2:	4642      	mov	r2, r8
 800bfb4:	464b      	mov	r3, r9
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	4639      	mov	r1, r7
 800bfba:	f7f4 fc47 	bl	800084c <__aeabi_ddiv>
 800bfbe:	f7f4 fdcb 	bl	8000b58 <__aeabi_d2iz>
 800bfc2:	4682      	mov	sl, r0
 800bfc4:	f7f4 faae 	bl	8000524 <__aeabi_i2d>
 800bfc8:	4642      	mov	r2, r8
 800bfca:	464b      	mov	r3, r9
 800bfcc:	f7f4 fb14 	bl	80005f8 <__aeabi_dmul>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	4639      	mov	r1, r7
 800bfd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bfdc:	f7f4 f954 	bl	8000288 <__aeabi_dsub>
 800bfe0:	f805 6b01 	strb.w	r6, [r5], #1
 800bfe4:	9e01      	ldr	r6, [sp, #4]
 800bfe6:	9f03      	ldr	r7, [sp, #12]
 800bfe8:	1bae      	subs	r6, r5, r6
 800bfea:	42b7      	cmp	r7, r6
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	d135      	bne.n	800c05e <_dtoa_r+0x6e6>
 800bff2:	f7f4 f94b 	bl	800028c <__adddf3>
 800bff6:	4642      	mov	r2, r8
 800bff8:	464b      	mov	r3, r9
 800bffa:	4606      	mov	r6, r0
 800bffc:	460f      	mov	r7, r1
 800bffe:	f7f4 fd8b 	bl	8000b18 <__aeabi_dcmpgt>
 800c002:	b9d0      	cbnz	r0, 800c03a <_dtoa_r+0x6c2>
 800c004:	4642      	mov	r2, r8
 800c006:	464b      	mov	r3, r9
 800c008:	4630      	mov	r0, r6
 800c00a:	4639      	mov	r1, r7
 800c00c:	f7f4 fd5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c010:	b110      	cbz	r0, 800c018 <_dtoa_r+0x6a0>
 800c012:	f01a 0f01 	tst.w	sl, #1
 800c016:	d110      	bne.n	800c03a <_dtoa_r+0x6c2>
 800c018:	4620      	mov	r0, r4
 800c01a:	ee18 1a10 	vmov	r1, s16
 800c01e:	f000 fd09 	bl	800ca34 <_Bfree>
 800c022:	2300      	movs	r3, #0
 800c024:	9800      	ldr	r0, [sp, #0]
 800c026:	702b      	strb	r3, [r5, #0]
 800c028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c02a:	3001      	adds	r0, #1
 800c02c:	6018      	str	r0, [r3, #0]
 800c02e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c030:	2b00      	cmp	r3, #0
 800c032:	f43f acf1 	beq.w	800ba18 <_dtoa_r+0xa0>
 800c036:	601d      	str	r5, [r3, #0]
 800c038:	e4ee      	b.n	800ba18 <_dtoa_r+0xa0>
 800c03a:	9f00      	ldr	r7, [sp, #0]
 800c03c:	462b      	mov	r3, r5
 800c03e:	461d      	mov	r5, r3
 800c040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c044:	2a39      	cmp	r2, #57	; 0x39
 800c046:	d106      	bne.n	800c056 <_dtoa_r+0x6de>
 800c048:	9a01      	ldr	r2, [sp, #4]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d1f7      	bne.n	800c03e <_dtoa_r+0x6c6>
 800c04e:	9901      	ldr	r1, [sp, #4]
 800c050:	2230      	movs	r2, #48	; 0x30
 800c052:	3701      	adds	r7, #1
 800c054:	700a      	strb	r2, [r1, #0]
 800c056:	781a      	ldrb	r2, [r3, #0]
 800c058:	3201      	adds	r2, #1
 800c05a:	701a      	strb	r2, [r3, #0]
 800c05c:	e790      	b.n	800bf80 <_dtoa_r+0x608>
 800c05e:	4ba6      	ldr	r3, [pc, #664]	; (800c2f8 <_dtoa_r+0x980>)
 800c060:	2200      	movs	r2, #0
 800c062:	f7f4 fac9 	bl	80005f8 <__aeabi_dmul>
 800c066:	2200      	movs	r2, #0
 800c068:	2300      	movs	r3, #0
 800c06a:	4606      	mov	r6, r0
 800c06c:	460f      	mov	r7, r1
 800c06e:	f7f4 fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c072:	2800      	cmp	r0, #0
 800c074:	d09d      	beq.n	800bfb2 <_dtoa_r+0x63a>
 800c076:	e7cf      	b.n	800c018 <_dtoa_r+0x6a0>
 800c078:	9a08      	ldr	r2, [sp, #32]
 800c07a:	2a00      	cmp	r2, #0
 800c07c:	f000 80d7 	beq.w	800c22e <_dtoa_r+0x8b6>
 800c080:	9a06      	ldr	r2, [sp, #24]
 800c082:	2a01      	cmp	r2, #1
 800c084:	f300 80ba 	bgt.w	800c1fc <_dtoa_r+0x884>
 800c088:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c08a:	2a00      	cmp	r2, #0
 800c08c:	f000 80b2 	beq.w	800c1f4 <_dtoa_r+0x87c>
 800c090:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c094:	9e07      	ldr	r6, [sp, #28]
 800c096:	9d04      	ldr	r5, [sp, #16]
 800c098:	9a04      	ldr	r2, [sp, #16]
 800c09a:	441a      	add	r2, r3
 800c09c:	9204      	str	r2, [sp, #16]
 800c09e:	9a05      	ldr	r2, [sp, #20]
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	441a      	add	r2, r3
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	9205      	str	r2, [sp, #20]
 800c0a8:	f000 fd7c 	bl	800cba4 <__i2b>
 800c0ac:	4607      	mov	r7, r0
 800c0ae:	2d00      	cmp	r5, #0
 800c0b0:	dd0c      	ble.n	800c0cc <_dtoa_r+0x754>
 800c0b2:	9b05      	ldr	r3, [sp, #20]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	dd09      	ble.n	800c0cc <_dtoa_r+0x754>
 800c0b8:	42ab      	cmp	r3, r5
 800c0ba:	9a04      	ldr	r2, [sp, #16]
 800c0bc:	bfa8      	it	ge
 800c0be:	462b      	movge	r3, r5
 800c0c0:	1ad2      	subs	r2, r2, r3
 800c0c2:	9204      	str	r2, [sp, #16]
 800c0c4:	9a05      	ldr	r2, [sp, #20]
 800c0c6:	1aed      	subs	r5, r5, r3
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	9305      	str	r3, [sp, #20]
 800c0cc:	9b07      	ldr	r3, [sp, #28]
 800c0ce:	b31b      	cbz	r3, 800c118 <_dtoa_r+0x7a0>
 800c0d0:	9b08      	ldr	r3, [sp, #32]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	f000 80af 	beq.w	800c236 <_dtoa_r+0x8be>
 800c0d8:	2e00      	cmp	r6, #0
 800c0da:	dd13      	ble.n	800c104 <_dtoa_r+0x78c>
 800c0dc:	4639      	mov	r1, r7
 800c0de:	4632      	mov	r2, r6
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f000 fe1f 	bl	800cd24 <__pow5mult>
 800c0e6:	ee18 2a10 	vmov	r2, s16
 800c0ea:	4601      	mov	r1, r0
 800c0ec:	4607      	mov	r7, r0
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f000 fd6e 	bl	800cbd0 <__multiply>
 800c0f4:	ee18 1a10 	vmov	r1, s16
 800c0f8:	4680      	mov	r8, r0
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f000 fc9a 	bl	800ca34 <_Bfree>
 800c100:	ee08 8a10 	vmov	s16, r8
 800c104:	9b07      	ldr	r3, [sp, #28]
 800c106:	1b9a      	subs	r2, r3, r6
 800c108:	d006      	beq.n	800c118 <_dtoa_r+0x7a0>
 800c10a:	ee18 1a10 	vmov	r1, s16
 800c10e:	4620      	mov	r0, r4
 800c110:	f000 fe08 	bl	800cd24 <__pow5mult>
 800c114:	ee08 0a10 	vmov	s16, r0
 800c118:	2101      	movs	r1, #1
 800c11a:	4620      	mov	r0, r4
 800c11c:	f000 fd42 	bl	800cba4 <__i2b>
 800c120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c122:	2b00      	cmp	r3, #0
 800c124:	4606      	mov	r6, r0
 800c126:	f340 8088 	ble.w	800c23a <_dtoa_r+0x8c2>
 800c12a:	461a      	mov	r2, r3
 800c12c:	4601      	mov	r1, r0
 800c12e:	4620      	mov	r0, r4
 800c130:	f000 fdf8 	bl	800cd24 <__pow5mult>
 800c134:	9b06      	ldr	r3, [sp, #24]
 800c136:	2b01      	cmp	r3, #1
 800c138:	4606      	mov	r6, r0
 800c13a:	f340 8081 	ble.w	800c240 <_dtoa_r+0x8c8>
 800c13e:	f04f 0800 	mov.w	r8, #0
 800c142:	6933      	ldr	r3, [r6, #16]
 800c144:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c148:	6918      	ldr	r0, [r3, #16]
 800c14a:	f000 fcdb 	bl	800cb04 <__hi0bits>
 800c14e:	f1c0 0020 	rsb	r0, r0, #32
 800c152:	9b05      	ldr	r3, [sp, #20]
 800c154:	4418      	add	r0, r3
 800c156:	f010 001f 	ands.w	r0, r0, #31
 800c15a:	f000 8092 	beq.w	800c282 <_dtoa_r+0x90a>
 800c15e:	f1c0 0320 	rsb	r3, r0, #32
 800c162:	2b04      	cmp	r3, #4
 800c164:	f340 808a 	ble.w	800c27c <_dtoa_r+0x904>
 800c168:	f1c0 001c 	rsb	r0, r0, #28
 800c16c:	9b04      	ldr	r3, [sp, #16]
 800c16e:	4403      	add	r3, r0
 800c170:	9304      	str	r3, [sp, #16]
 800c172:	9b05      	ldr	r3, [sp, #20]
 800c174:	4403      	add	r3, r0
 800c176:	4405      	add	r5, r0
 800c178:	9305      	str	r3, [sp, #20]
 800c17a:	9b04      	ldr	r3, [sp, #16]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	dd07      	ble.n	800c190 <_dtoa_r+0x818>
 800c180:	ee18 1a10 	vmov	r1, s16
 800c184:	461a      	mov	r2, r3
 800c186:	4620      	mov	r0, r4
 800c188:	f000 fe26 	bl	800cdd8 <__lshift>
 800c18c:	ee08 0a10 	vmov	s16, r0
 800c190:	9b05      	ldr	r3, [sp, #20]
 800c192:	2b00      	cmp	r3, #0
 800c194:	dd05      	ble.n	800c1a2 <_dtoa_r+0x82a>
 800c196:	4631      	mov	r1, r6
 800c198:	461a      	mov	r2, r3
 800c19a:	4620      	mov	r0, r4
 800c19c:	f000 fe1c 	bl	800cdd8 <__lshift>
 800c1a0:	4606      	mov	r6, r0
 800c1a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d06e      	beq.n	800c286 <_dtoa_r+0x90e>
 800c1a8:	ee18 0a10 	vmov	r0, s16
 800c1ac:	4631      	mov	r1, r6
 800c1ae:	f000 fe83 	bl	800ceb8 <__mcmp>
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	da67      	bge.n	800c286 <_dtoa_r+0x90e>
 800c1b6:	9b00      	ldr	r3, [sp, #0]
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	ee18 1a10 	vmov	r1, s16
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	220a      	movs	r2, #10
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f000 fc57 	bl	800ca78 <__multadd>
 800c1ca:	9b08      	ldr	r3, [sp, #32]
 800c1cc:	ee08 0a10 	vmov	s16, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f000 81b1 	beq.w	800c538 <_dtoa_r+0xbc0>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	4639      	mov	r1, r7
 800c1da:	220a      	movs	r2, #10
 800c1dc:	4620      	mov	r0, r4
 800c1de:	f000 fc4b 	bl	800ca78 <__multadd>
 800c1e2:	9b02      	ldr	r3, [sp, #8]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	4607      	mov	r7, r0
 800c1e8:	f300 808e 	bgt.w	800c308 <_dtoa_r+0x990>
 800c1ec:	9b06      	ldr	r3, [sp, #24]
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	dc51      	bgt.n	800c296 <_dtoa_r+0x91e>
 800c1f2:	e089      	b.n	800c308 <_dtoa_r+0x990>
 800c1f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c1fa:	e74b      	b.n	800c094 <_dtoa_r+0x71c>
 800c1fc:	9b03      	ldr	r3, [sp, #12]
 800c1fe:	1e5e      	subs	r6, r3, #1
 800c200:	9b07      	ldr	r3, [sp, #28]
 800c202:	42b3      	cmp	r3, r6
 800c204:	bfbf      	itttt	lt
 800c206:	9b07      	ldrlt	r3, [sp, #28]
 800c208:	9607      	strlt	r6, [sp, #28]
 800c20a:	1af2      	sublt	r2, r6, r3
 800c20c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c20e:	bfb6      	itet	lt
 800c210:	189b      	addlt	r3, r3, r2
 800c212:	1b9e      	subge	r6, r3, r6
 800c214:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c216:	9b03      	ldr	r3, [sp, #12]
 800c218:	bfb8      	it	lt
 800c21a:	2600      	movlt	r6, #0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	bfb7      	itett	lt
 800c220:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c224:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c228:	1a9d      	sublt	r5, r3, r2
 800c22a:	2300      	movlt	r3, #0
 800c22c:	e734      	b.n	800c098 <_dtoa_r+0x720>
 800c22e:	9e07      	ldr	r6, [sp, #28]
 800c230:	9d04      	ldr	r5, [sp, #16]
 800c232:	9f08      	ldr	r7, [sp, #32]
 800c234:	e73b      	b.n	800c0ae <_dtoa_r+0x736>
 800c236:	9a07      	ldr	r2, [sp, #28]
 800c238:	e767      	b.n	800c10a <_dtoa_r+0x792>
 800c23a:	9b06      	ldr	r3, [sp, #24]
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	dc18      	bgt.n	800c272 <_dtoa_r+0x8fa>
 800c240:	f1ba 0f00 	cmp.w	sl, #0
 800c244:	d115      	bne.n	800c272 <_dtoa_r+0x8fa>
 800c246:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c24a:	b993      	cbnz	r3, 800c272 <_dtoa_r+0x8fa>
 800c24c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c250:	0d1b      	lsrs	r3, r3, #20
 800c252:	051b      	lsls	r3, r3, #20
 800c254:	b183      	cbz	r3, 800c278 <_dtoa_r+0x900>
 800c256:	9b04      	ldr	r3, [sp, #16]
 800c258:	3301      	adds	r3, #1
 800c25a:	9304      	str	r3, [sp, #16]
 800c25c:	9b05      	ldr	r3, [sp, #20]
 800c25e:	3301      	adds	r3, #1
 800c260:	9305      	str	r3, [sp, #20]
 800c262:	f04f 0801 	mov.w	r8, #1
 800c266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f47f af6a 	bne.w	800c142 <_dtoa_r+0x7ca>
 800c26e:	2001      	movs	r0, #1
 800c270:	e76f      	b.n	800c152 <_dtoa_r+0x7da>
 800c272:	f04f 0800 	mov.w	r8, #0
 800c276:	e7f6      	b.n	800c266 <_dtoa_r+0x8ee>
 800c278:	4698      	mov	r8, r3
 800c27a:	e7f4      	b.n	800c266 <_dtoa_r+0x8ee>
 800c27c:	f43f af7d 	beq.w	800c17a <_dtoa_r+0x802>
 800c280:	4618      	mov	r0, r3
 800c282:	301c      	adds	r0, #28
 800c284:	e772      	b.n	800c16c <_dtoa_r+0x7f4>
 800c286:	9b03      	ldr	r3, [sp, #12]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	dc37      	bgt.n	800c2fc <_dtoa_r+0x984>
 800c28c:	9b06      	ldr	r3, [sp, #24]
 800c28e:	2b02      	cmp	r3, #2
 800c290:	dd34      	ble.n	800c2fc <_dtoa_r+0x984>
 800c292:	9b03      	ldr	r3, [sp, #12]
 800c294:	9302      	str	r3, [sp, #8]
 800c296:	9b02      	ldr	r3, [sp, #8]
 800c298:	b96b      	cbnz	r3, 800c2b6 <_dtoa_r+0x93e>
 800c29a:	4631      	mov	r1, r6
 800c29c:	2205      	movs	r2, #5
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f000 fbea 	bl	800ca78 <__multadd>
 800c2a4:	4601      	mov	r1, r0
 800c2a6:	4606      	mov	r6, r0
 800c2a8:	ee18 0a10 	vmov	r0, s16
 800c2ac:	f000 fe04 	bl	800ceb8 <__mcmp>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	f73f adbb 	bgt.w	800be2c <_dtoa_r+0x4b4>
 800c2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2b8:	9d01      	ldr	r5, [sp, #4]
 800c2ba:	43db      	mvns	r3, r3
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	f04f 0800 	mov.w	r8, #0
 800c2c2:	4631      	mov	r1, r6
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	f000 fbb5 	bl	800ca34 <_Bfree>
 800c2ca:	2f00      	cmp	r7, #0
 800c2cc:	f43f aea4 	beq.w	800c018 <_dtoa_r+0x6a0>
 800c2d0:	f1b8 0f00 	cmp.w	r8, #0
 800c2d4:	d005      	beq.n	800c2e2 <_dtoa_r+0x96a>
 800c2d6:	45b8      	cmp	r8, r7
 800c2d8:	d003      	beq.n	800c2e2 <_dtoa_r+0x96a>
 800c2da:	4641      	mov	r1, r8
 800c2dc:	4620      	mov	r0, r4
 800c2de:	f000 fba9 	bl	800ca34 <_Bfree>
 800c2e2:	4639      	mov	r1, r7
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f000 fba5 	bl	800ca34 <_Bfree>
 800c2ea:	e695      	b.n	800c018 <_dtoa_r+0x6a0>
 800c2ec:	2600      	movs	r6, #0
 800c2ee:	4637      	mov	r7, r6
 800c2f0:	e7e1      	b.n	800c2b6 <_dtoa_r+0x93e>
 800c2f2:	9700      	str	r7, [sp, #0]
 800c2f4:	4637      	mov	r7, r6
 800c2f6:	e599      	b.n	800be2c <_dtoa_r+0x4b4>
 800c2f8:	40240000 	.word	0x40240000
 800c2fc:	9b08      	ldr	r3, [sp, #32]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	f000 80ca 	beq.w	800c498 <_dtoa_r+0xb20>
 800c304:	9b03      	ldr	r3, [sp, #12]
 800c306:	9302      	str	r3, [sp, #8]
 800c308:	2d00      	cmp	r5, #0
 800c30a:	dd05      	ble.n	800c318 <_dtoa_r+0x9a0>
 800c30c:	4639      	mov	r1, r7
 800c30e:	462a      	mov	r2, r5
 800c310:	4620      	mov	r0, r4
 800c312:	f000 fd61 	bl	800cdd8 <__lshift>
 800c316:	4607      	mov	r7, r0
 800c318:	f1b8 0f00 	cmp.w	r8, #0
 800c31c:	d05b      	beq.n	800c3d6 <_dtoa_r+0xa5e>
 800c31e:	6879      	ldr	r1, [r7, #4]
 800c320:	4620      	mov	r0, r4
 800c322:	f000 fb47 	bl	800c9b4 <_Balloc>
 800c326:	4605      	mov	r5, r0
 800c328:	b928      	cbnz	r0, 800c336 <_dtoa_r+0x9be>
 800c32a:	4b87      	ldr	r3, [pc, #540]	; (800c548 <_dtoa_r+0xbd0>)
 800c32c:	4602      	mov	r2, r0
 800c32e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c332:	f7ff bb3b 	b.w	800b9ac <_dtoa_r+0x34>
 800c336:	693a      	ldr	r2, [r7, #16]
 800c338:	3202      	adds	r2, #2
 800c33a:	0092      	lsls	r2, r2, #2
 800c33c:	f107 010c 	add.w	r1, r7, #12
 800c340:	300c      	adds	r0, #12
 800c342:	f7fe fbcd 	bl	800aae0 <memcpy>
 800c346:	2201      	movs	r2, #1
 800c348:	4629      	mov	r1, r5
 800c34a:	4620      	mov	r0, r4
 800c34c:	f000 fd44 	bl	800cdd8 <__lshift>
 800c350:	9b01      	ldr	r3, [sp, #4]
 800c352:	f103 0901 	add.w	r9, r3, #1
 800c356:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c35a:	4413      	add	r3, r2
 800c35c:	9305      	str	r3, [sp, #20]
 800c35e:	f00a 0301 	and.w	r3, sl, #1
 800c362:	46b8      	mov	r8, r7
 800c364:	9304      	str	r3, [sp, #16]
 800c366:	4607      	mov	r7, r0
 800c368:	4631      	mov	r1, r6
 800c36a:	ee18 0a10 	vmov	r0, s16
 800c36e:	f7ff fa75 	bl	800b85c <quorem>
 800c372:	4641      	mov	r1, r8
 800c374:	9002      	str	r0, [sp, #8]
 800c376:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c37a:	ee18 0a10 	vmov	r0, s16
 800c37e:	f000 fd9b 	bl	800ceb8 <__mcmp>
 800c382:	463a      	mov	r2, r7
 800c384:	9003      	str	r0, [sp, #12]
 800c386:	4631      	mov	r1, r6
 800c388:	4620      	mov	r0, r4
 800c38a:	f000 fdb1 	bl	800cef0 <__mdiff>
 800c38e:	68c2      	ldr	r2, [r0, #12]
 800c390:	f109 3bff 	add.w	fp, r9, #4294967295
 800c394:	4605      	mov	r5, r0
 800c396:	bb02      	cbnz	r2, 800c3da <_dtoa_r+0xa62>
 800c398:	4601      	mov	r1, r0
 800c39a:	ee18 0a10 	vmov	r0, s16
 800c39e:	f000 fd8b 	bl	800ceb8 <__mcmp>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	9207      	str	r2, [sp, #28]
 800c3aa:	f000 fb43 	bl	800ca34 <_Bfree>
 800c3ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c3b2:	ea43 0102 	orr.w	r1, r3, r2
 800c3b6:	9b04      	ldr	r3, [sp, #16]
 800c3b8:	430b      	orrs	r3, r1
 800c3ba:	464d      	mov	r5, r9
 800c3bc:	d10f      	bne.n	800c3de <_dtoa_r+0xa66>
 800c3be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3c2:	d02a      	beq.n	800c41a <_dtoa_r+0xaa2>
 800c3c4:	9b03      	ldr	r3, [sp, #12]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	dd02      	ble.n	800c3d0 <_dtoa_r+0xa58>
 800c3ca:	9b02      	ldr	r3, [sp, #8]
 800c3cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c3d0:	f88b a000 	strb.w	sl, [fp]
 800c3d4:	e775      	b.n	800c2c2 <_dtoa_r+0x94a>
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	e7ba      	b.n	800c350 <_dtoa_r+0x9d8>
 800c3da:	2201      	movs	r2, #1
 800c3dc:	e7e2      	b.n	800c3a4 <_dtoa_r+0xa2c>
 800c3de:	9b03      	ldr	r3, [sp, #12]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	db04      	blt.n	800c3ee <_dtoa_r+0xa76>
 800c3e4:	9906      	ldr	r1, [sp, #24]
 800c3e6:	430b      	orrs	r3, r1
 800c3e8:	9904      	ldr	r1, [sp, #16]
 800c3ea:	430b      	orrs	r3, r1
 800c3ec:	d122      	bne.n	800c434 <_dtoa_r+0xabc>
 800c3ee:	2a00      	cmp	r2, #0
 800c3f0:	ddee      	ble.n	800c3d0 <_dtoa_r+0xa58>
 800c3f2:	ee18 1a10 	vmov	r1, s16
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f000 fced 	bl	800cdd8 <__lshift>
 800c3fe:	4631      	mov	r1, r6
 800c400:	ee08 0a10 	vmov	s16, r0
 800c404:	f000 fd58 	bl	800ceb8 <__mcmp>
 800c408:	2800      	cmp	r0, #0
 800c40a:	dc03      	bgt.n	800c414 <_dtoa_r+0xa9c>
 800c40c:	d1e0      	bne.n	800c3d0 <_dtoa_r+0xa58>
 800c40e:	f01a 0f01 	tst.w	sl, #1
 800c412:	d0dd      	beq.n	800c3d0 <_dtoa_r+0xa58>
 800c414:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c418:	d1d7      	bne.n	800c3ca <_dtoa_r+0xa52>
 800c41a:	2339      	movs	r3, #57	; 0x39
 800c41c:	f88b 3000 	strb.w	r3, [fp]
 800c420:	462b      	mov	r3, r5
 800c422:	461d      	mov	r5, r3
 800c424:	3b01      	subs	r3, #1
 800c426:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c42a:	2a39      	cmp	r2, #57	; 0x39
 800c42c:	d071      	beq.n	800c512 <_dtoa_r+0xb9a>
 800c42e:	3201      	adds	r2, #1
 800c430:	701a      	strb	r2, [r3, #0]
 800c432:	e746      	b.n	800c2c2 <_dtoa_r+0x94a>
 800c434:	2a00      	cmp	r2, #0
 800c436:	dd07      	ble.n	800c448 <_dtoa_r+0xad0>
 800c438:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c43c:	d0ed      	beq.n	800c41a <_dtoa_r+0xaa2>
 800c43e:	f10a 0301 	add.w	r3, sl, #1
 800c442:	f88b 3000 	strb.w	r3, [fp]
 800c446:	e73c      	b.n	800c2c2 <_dtoa_r+0x94a>
 800c448:	9b05      	ldr	r3, [sp, #20]
 800c44a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c44e:	4599      	cmp	r9, r3
 800c450:	d047      	beq.n	800c4e2 <_dtoa_r+0xb6a>
 800c452:	ee18 1a10 	vmov	r1, s16
 800c456:	2300      	movs	r3, #0
 800c458:	220a      	movs	r2, #10
 800c45a:	4620      	mov	r0, r4
 800c45c:	f000 fb0c 	bl	800ca78 <__multadd>
 800c460:	45b8      	cmp	r8, r7
 800c462:	ee08 0a10 	vmov	s16, r0
 800c466:	f04f 0300 	mov.w	r3, #0
 800c46a:	f04f 020a 	mov.w	r2, #10
 800c46e:	4641      	mov	r1, r8
 800c470:	4620      	mov	r0, r4
 800c472:	d106      	bne.n	800c482 <_dtoa_r+0xb0a>
 800c474:	f000 fb00 	bl	800ca78 <__multadd>
 800c478:	4680      	mov	r8, r0
 800c47a:	4607      	mov	r7, r0
 800c47c:	f109 0901 	add.w	r9, r9, #1
 800c480:	e772      	b.n	800c368 <_dtoa_r+0x9f0>
 800c482:	f000 faf9 	bl	800ca78 <__multadd>
 800c486:	4639      	mov	r1, r7
 800c488:	4680      	mov	r8, r0
 800c48a:	2300      	movs	r3, #0
 800c48c:	220a      	movs	r2, #10
 800c48e:	4620      	mov	r0, r4
 800c490:	f000 faf2 	bl	800ca78 <__multadd>
 800c494:	4607      	mov	r7, r0
 800c496:	e7f1      	b.n	800c47c <_dtoa_r+0xb04>
 800c498:	9b03      	ldr	r3, [sp, #12]
 800c49a:	9302      	str	r3, [sp, #8]
 800c49c:	9d01      	ldr	r5, [sp, #4]
 800c49e:	ee18 0a10 	vmov	r0, s16
 800c4a2:	4631      	mov	r1, r6
 800c4a4:	f7ff f9da 	bl	800b85c <quorem>
 800c4a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c4ac:	9b01      	ldr	r3, [sp, #4]
 800c4ae:	f805 ab01 	strb.w	sl, [r5], #1
 800c4b2:	1aea      	subs	r2, r5, r3
 800c4b4:	9b02      	ldr	r3, [sp, #8]
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	dd09      	ble.n	800c4ce <_dtoa_r+0xb56>
 800c4ba:	ee18 1a10 	vmov	r1, s16
 800c4be:	2300      	movs	r3, #0
 800c4c0:	220a      	movs	r2, #10
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f000 fad8 	bl	800ca78 <__multadd>
 800c4c8:	ee08 0a10 	vmov	s16, r0
 800c4cc:	e7e7      	b.n	800c49e <_dtoa_r+0xb26>
 800c4ce:	9b02      	ldr	r3, [sp, #8]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	bfc8      	it	gt
 800c4d4:	461d      	movgt	r5, r3
 800c4d6:	9b01      	ldr	r3, [sp, #4]
 800c4d8:	bfd8      	it	le
 800c4da:	2501      	movle	r5, #1
 800c4dc:	441d      	add	r5, r3
 800c4de:	f04f 0800 	mov.w	r8, #0
 800c4e2:	ee18 1a10 	vmov	r1, s16
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f000 fc75 	bl	800cdd8 <__lshift>
 800c4ee:	4631      	mov	r1, r6
 800c4f0:	ee08 0a10 	vmov	s16, r0
 800c4f4:	f000 fce0 	bl	800ceb8 <__mcmp>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	dc91      	bgt.n	800c420 <_dtoa_r+0xaa8>
 800c4fc:	d102      	bne.n	800c504 <_dtoa_r+0xb8c>
 800c4fe:	f01a 0f01 	tst.w	sl, #1
 800c502:	d18d      	bne.n	800c420 <_dtoa_r+0xaa8>
 800c504:	462b      	mov	r3, r5
 800c506:	461d      	mov	r5, r3
 800c508:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c50c:	2a30      	cmp	r2, #48	; 0x30
 800c50e:	d0fa      	beq.n	800c506 <_dtoa_r+0xb8e>
 800c510:	e6d7      	b.n	800c2c2 <_dtoa_r+0x94a>
 800c512:	9a01      	ldr	r2, [sp, #4]
 800c514:	429a      	cmp	r2, r3
 800c516:	d184      	bne.n	800c422 <_dtoa_r+0xaaa>
 800c518:	9b00      	ldr	r3, [sp, #0]
 800c51a:	3301      	adds	r3, #1
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	2331      	movs	r3, #49	; 0x31
 800c520:	7013      	strb	r3, [r2, #0]
 800c522:	e6ce      	b.n	800c2c2 <_dtoa_r+0x94a>
 800c524:	4b09      	ldr	r3, [pc, #36]	; (800c54c <_dtoa_r+0xbd4>)
 800c526:	f7ff ba95 	b.w	800ba54 <_dtoa_r+0xdc>
 800c52a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f47f aa6e 	bne.w	800ba0e <_dtoa_r+0x96>
 800c532:	4b07      	ldr	r3, [pc, #28]	; (800c550 <_dtoa_r+0xbd8>)
 800c534:	f7ff ba8e 	b.w	800ba54 <_dtoa_r+0xdc>
 800c538:	9b02      	ldr	r3, [sp, #8]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	dcae      	bgt.n	800c49c <_dtoa_r+0xb24>
 800c53e:	9b06      	ldr	r3, [sp, #24]
 800c540:	2b02      	cmp	r3, #2
 800c542:	f73f aea8 	bgt.w	800c296 <_dtoa_r+0x91e>
 800c546:	e7a9      	b.n	800c49c <_dtoa_r+0xb24>
 800c548:	0800fab7 	.word	0x0800fab7
 800c54c:	0800fa14 	.word	0x0800fa14
 800c550:	0800fa38 	.word	0x0800fa38

0800c554 <__sflush_r>:
 800c554:	898a      	ldrh	r2, [r1, #12]
 800c556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c55a:	4605      	mov	r5, r0
 800c55c:	0710      	lsls	r0, r2, #28
 800c55e:	460c      	mov	r4, r1
 800c560:	d458      	bmi.n	800c614 <__sflush_r+0xc0>
 800c562:	684b      	ldr	r3, [r1, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	dc05      	bgt.n	800c574 <__sflush_r+0x20>
 800c568:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	dc02      	bgt.n	800c574 <__sflush_r+0x20>
 800c56e:	2000      	movs	r0, #0
 800c570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c576:	2e00      	cmp	r6, #0
 800c578:	d0f9      	beq.n	800c56e <__sflush_r+0x1a>
 800c57a:	2300      	movs	r3, #0
 800c57c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c580:	682f      	ldr	r7, [r5, #0]
 800c582:	602b      	str	r3, [r5, #0]
 800c584:	d032      	beq.n	800c5ec <__sflush_r+0x98>
 800c586:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c588:	89a3      	ldrh	r3, [r4, #12]
 800c58a:	075a      	lsls	r2, r3, #29
 800c58c:	d505      	bpl.n	800c59a <__sflush_r+0x46>
 800c58e:	6863      	ldr	r3, [r4, #4]
 800c590:	1ac0      	subs	r0, r0, r3
 800c592:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c594:	b10b      	cbz	r3, 800c59a <__sflush_r+0x46>
 800c596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c598:	1ac0      	subs	r0, r0, r3
 800c59a:	2300      	movs	r3, #0
 800c59c:	4602      	mov	r2, r0
 800c59e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5a0:	6a21      	ldr	r1, [r4, #32]
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	47b0      	blx	r6
 800c5a6:	1c43      	adds	r3, r0, #1
 800c5a8:	89a3      	ldrh	r3, [r4, #12]
 800c5aa:	d106      	bne.n	800c5ba <__sflush_r+0x66>
 800c5ac:	6829      	ldr	r1, [r5, #0]
 800c5ae:	291d      	cmp	r1, #29
 800c5b0:	d82c      	bhi.n	800c60c <__sflush_r+0xb8>
 800c5b2:	4a2a      	ldr	r2, [pc, #168]	; (800c65c <__sflush_r+0x108>)
 800c5b4:	40ca      	lsrs	r2, r1
 800c5b6:	07d6      	lsls	r6, r2, #31
 800c5b8:	d528      	bpl.n	800c60c <__sflush_r+0xb8>
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	6062      	str	r2, [r4, #4]
 800c5be:	04d9      	lsls	r1, r3, #19
 800c5c0:	6922      	ldr	r2, [r4, #16]
 800c5c2:	6022      	str	r2, [r4, #0]
 800c5c4:	d504      	bpl.n	800c5d0 <__sflush_r+0x7c>
 800c5c6:	1c42      	adds	r2, r0, #1
 800c5c8:	d101      	bne.n	800c5ce <__sflush_r+0x7a>
 800c5ca:	682b      	ldr	r3, [r5, #0]
 800c5cc:	b903      	cbnz	r3, 800c5d0 <__sflush_r+0x7c>
 800c5ce:	6560      	str	r0, [r4, #84]	; 0x54
 800c5d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5d2:	602f      	str	r7, [r5, #0]
 800c5d4:	2900      	cmp	r1, #0
 800c5d6:	d0ca      	beq.n	800c56e <__sflush_r+0x1a>
 800c5d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5dc:	4299      	cmp	r1, r3
 800c5de:	d002      	beq.n	800c5e6 <__sflush_r+0x92>
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	f7fe fa93 	bl	800ab0c <_free_r>
 800c5e6:	2000      	movs	r0, #0
 800c5e8:	6360      	str	r0, [r4, #52]	; 0x34
 800c5ea:	e7c1      	b.n	800c570 <__sflush_r+0x1c>
 800c5ec:	6a21      	ldr	r1, [r4, #32]
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	47b0      	blx	r6
 800c5f4:	1c41      	adds	r1, r0, #1
 800c5f6:	d1c7      	bne.n	800c588 <__sflush_r+0x34>
 800c5f8:	682b      	ldr	r3, [r5, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d0c4      	beq.n	800c588 <__sflush_r+0x34>
 800c5fe:	2b1d      	cmp	r3, #29
 800c600:	d001      	beq.n	800c606 <__sflush_r+0xb2>
 800c602:	2b16      	cmp	r3, #22
 800c604:	d101      	bne.n	800c60a <__sflush_r+0xb6>
 800c606:	602f      	str	r7, [r5, #0]
 800c608:	e7b1      	b.n	800c56e <__sflush_r+0x1a>
 800c60a:	89a3      	ldrh	r3, [r4, #12]
 800c60c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c610:	81a3      	strh	r3, [r4, #12]
 800c612:	e7ad      	b.n	800c570 <__sflush_r+0x1c>
 800c614:	690f      	ldr	r7, [r1, #16]
 800c616:	2f00      	cmp	r7, #0
 800c618:	d0a9      	beq.n	800c56e <__sflush_r+0x1a>
 800c61a:	0793      	lsls	r3, r2, #30
 800c61c:	680e      	ldr	r6, [r1, #0]
 800c61e:	bf08      	it	eq
 800c620:	694b      	ldreq	r3, [r1, #20]
 800c622:	600f      	str	r7, [r1, #0]
 800c624:	bf18      	it	ne
 800c626:	2300      	movne	r3, #0
 800c628:	eba6 0807 	sub.w	r8, r6, r7
 800c62c:	608b      	str	r3, [r1, #8]
 800c62e:	f1b8 0f00 	cmp.w	r8, #0
 800c632:	dd9c      	ble.n	800c56e <__sflush_r+0x1a>
 800c634:	6a21      	ldr	r1, [r4, #32]
 800c636:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c638:	4643      	mov	r3, r8
 800c63a:	463a      	mov	r2, r7
 800c63c:	4628      	mov	r0, r5
 800c63e:	47b0      	blx	r6
 800c640:	2800      	cmp	r0, #0
 800c642:	dc06      	bgt.n	800c652 <__sflush_r+0xfe>
 800c644:	89a3      	ldrh	r3, [r4, #12]
 800c646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c64a:	81a3      	strh	r3, [r4, #12]
 800c64c:	f04f 30ff 	mov.w	r0, #4294967295
 800c650:	e78e      	b.n	800c570 <__sflush_r+0x1c>
 800c652:	4407      	add	r7, r0
 800c654:	eba8 0800 	sub.w	r8, r8, r0
 800c658:	e7e9      	b.n	800c62e <__sflush_r+0xda>
 800c65a:	bf00      	nop
 800c65c:	20400001 	.word	0x20400001

0800c660 <_fflush_r>:
 800c660:	b538      	push	{r3, r4, r5, lr}
 800c662:	690b      	ldr	r3, [r1, #16]
 800c664:	4605      	mov	r5, r0
 800c666:	460c      	mov	r4, r1
 800c668:	b913      	cbnz	r3, 800c670 <_fflush_r+0x10>
 800c66a:	2500      	movs	r5, #0
 800c66c:	4628      	mov	r0, r5
 800c66e:	bd38      	pop	{r3, r4, r5, pc}
 800c670:	b118      	cbz	r0, 800c67a <_fflush_r+0x1a>
 800c672:	6983      	ldr	r3, [r0, #24]
 800c674:	b90b      	cbnz	r3, 800c67a <_fflush_r+0x1a>
 800c676:	f000 f887 	bl	800c788 <__sinit>
 800c67a:	4b14      	ldr	r3, [pc, #80]	; (800c6cc <_fflush_r+0x6c>)
 800c67c:	429c      	cmp	r4, r3
 800c67e:	d11b      	bne.n	800c6b8 <_fflush_r+0x58>
 800c680:	686c      	ldr	r4, [r5, #4]
 800c682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d0ef      	beq.n	800c66a <_fflush_r+0xa>
 800c68a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c68c:	07d0      	lsls	r0, r2, #31
 800c68e:	d404      	bmi.n	800c69a <_fflush_r+0x3a>
 800c690:	0599      	lsls	r1, r3, #22
 800c692:	d402      	bmi.n	800c69a <_fflush_r+0x3a>
 800c694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c696:	f000 f91a 	bl	800c8ce <__retarget_lock_acquire_recursive>
 800c69a:	4628      	mov	r0, r5
 800c69c:	4621      	mov	r1, r4
 800c69e:	f7ff ff59 	bl	800c554 <__sflush_r>
 800c6a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6a4:	07da      	lsls	r2, r3, #31
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	d4e0      	bmi.n	800c66c <_fflush_r+0xc>
 800c6aa:	89a3      	ldrh	r3, [r4, #12]
 800c6ac:	059b      	lsls	r3, r3, #22
 800c6ae:	d4dd      	bmi.n	800c66c <_fflush_r+0xc>
 800c6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6b2:	f000 f90d 	bl	800c8d0 <__retarget_lock_release_recursive>
 800c6b6:	e7d9      	b.n	800c66c <_fflush_r+0xc>
 800c6b8:	4b05      	ldr	r3, [pc, #20]	; (800c6d0 <_fflush_r+0x70>)
 800c6ba:	429c      	cmp	r4, r3
 800c6bc:	d101      	bne.n	800c6c2 <_fflush_r+0x62>
 800c6be:	68ac      	ldr	r4, [r5, #8]
 800c6c0:	e7df      	b.n	800c682 <_fflush_r+0x22>
 800c6c2:	4b04      	ldr	r3, [pc, #16]	; (800c6d4 <_fflush_r+0x74>)
 800c6c4:	429c      	cmp	r4, r3
 800c6c6:	bf08      	it	eq
 800c6c8:	68ec      	ldreq	r4, [r5, #12]
 800c6ca:	e7da      	b.n	800c682 <_fflush_r+0x22>
 800c6cc:	0800fae8 	.word	0x0800fae8
 800c6d0:	0800fb08 	.word	0x0800fb08
 800c6d4:	0800fac8 	.word	0x0800fac8

0800c6d8 <std>:
 800c6d8:	2300      	movs	r3, #0
 800c6da:	b510      	push	{r4, lr}
 800c6dc:	4604      	mov	r4, r0
 800c6de:	e9c0 3300 	strd	r3, r3, [r0]
 800c6e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6e6:	6083      	str	r3, [r0, #8]
 800c6e8:	8181      	strh	r1, [r0, #12]
 800c6ea:	6643      	str	r3, [r0, #100]	; 0x64
 800c6ec:	81c2      	strh	r2, [r0, #14]
 800c6ee:	6183      	str	r3, [r0, #24]
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	2208      	movs	r2, #8
 800c6f4:	305c      	adds	r0, #92	; 0x5c
 800c6f6:	f7fe fa01 	bl	800aafc <memset>
 800c6fa:	4b05      	ldr	r3, [pc, #20]	; (800c710 <std+0x38>)
 800c6fc:	6263      	str	r3, [r4, #36]	; 0x24
 800c6fe:	4b05      	ldr	r3, [pc, #20]	; (800c714 <std+0x3c>)
 800c700:	62a3      	str	r3, [r4, #40]	; 0x28
 800c702:	4b05      	ldr	r3, [pc, #20]	; (800c718 <std+0x40>)
 800c704:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c706:	4b05      	ldr	r3, [pc, #20]	; (800c71c <std+0x44>)
 800c708:	6224      	str	r4, [r4, #32]
 800c70a:	6323      	str	r3, [r4, #48]	; 0x30
 800c70c:	bd10      	pop	{r4, pc}
 800c70e:	bf00      	nop
 800c710:	0800d39d 	.word	0x0800d39d
 800c714:	0800d3bf 	.word	0x0800d3bf
 800c718:	0800d3f7 	.word	0x0800d3f7
 800c71c:	0800d41b 	.word	0x0800d41b

0800c720 <_cleanup_r>:
 800c720:	4901      	ldr	r1, [pc, #4]	; (800c728 <_cleanup_r+0x8>)
 800c722:	f000 b8af 	b.w	800c884 <_fwalk_reent>
 800c726:	bf00      	nop
 800c728:	0800c661 	.word	0x0800c661

0800c72c <__sfmoreglue>:
 800c72c:	b570      	push	{r4, r5, r6, lr}
 800c72e:	2268      	movs	r2, #104	; 0x68
 800c730:	1e4d      	subs	r5, r1, #1
 800c732:	4355      	muls	r5, r2
 800c734:	460e      	mov	r6, r1
 800c736:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c73a:	f7fe fa53 	bl	800abe4 <_malloc_r>
 800c73e:	4604      	mov	r4, r0
 800c740:	b140      	cbz	r0, 800c754 <__sfmoreglue+0x28>
 800c742:	2100      	movs	r1, #0
 800c744:	e9c0 1600 	strd	r1, r6, [r0]
 800c748:	300c      	adds	r0, #12
 800c74a:	60a0      	str	r0, [r4, #8]
 800c74c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c750:	f7fe f9d4 	bl	800aafc <memset>
 800c754:	4620      	mov	r0, r4
 800c756:	bd70      	pop	{r4, r5, r6, pc}

0800c758 <__sfp_lock_acquire>:
 800c758:	4801      	ldr	r0, [pc, #4]	; (800c760 <__sfp_lock_acquire+0x8>)
 800c75a:	f000 b8b8 	b.w	800c8ce <__retarget_lock_acquire_recursive>
 800c75e:	bf00      	nop
 800c760:	200019ad 	.word	0x200019ad

0800c764 <__sfp_lock_release>:
 800c764:	4801      	ldr	r0, [pc, #4]	; (800c76c <__sfp_lock_release+0x8>)
 800c766:	f000 b8b3 	b.w	800c8d0 <__retarget_lock_release_recursive>
 800c76a:	bf00      	nop
 800c76c:	200019ad 	.word	0x200019ad

0800c770 <__sinit_lock_acquire>:
 800c770:	4801      	ldr	r0, [pc, #4]	; (800c778 <__sinit_lock_acquire+0x8>)
 800c772:	f000 b8ac 	b.w	800c8ce <__retarget_lock_acquire_recursive>
 800c776:	bf00      	nop
 800c778:	200019ae 	.word	0x200019ae

0800c77c <__sinit_lock_release>:
 800c77c:	4801      	ldr	r0, [pc, #4]	; (800c784 <__sinit_lock_release+0x8>)
 800c77e:	f000 b8a7 	b.w	800c8d0 <__retarget_lock_release_recursive>
 800c782:	bf00      	nop
 800c784:	200019ae 	.word	0x200019ae

0800c788 <__sinit>:
 800c788:	b510      	push	{r4, lr}
 800c78a:	4604      	mov	r4, r0
 800c78c:	f7ff fff0 	bl	800c770 <__sinit_lock_acquire>
 800c790:	69a3      	ldr	r3, [r4, #24]
 800c792:	b11b      	cbz	r3, 800c79c <__sinit+0x14>
 800c794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c798:	f7ff bff0 	b.w	800c77c <__sinit_lock_release>
 800c79c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c7a0:	6523      	str	r3, [r4, #80]	; 0x50
 800c7a2:	4b13      	ldr	r3, [pc, #76]	; (800c7f0 <__sinit+0x68>)
 800c7a4:	4a13      	ldr	r2, [pc, #76]	; (800c7f4 <__sinit+0x6c>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c7aa:	42a3      	cmp	r3, r4
 800c7ac:	bf04      	itt	eq
 800c7ae:	2301      	moveq	r3, #1
 800c7b0:	61a3      	streq	r3, [r4, #24]
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f000 f820 	bl	800c7f8 <__sfp>
 800c7b8:	6060      	str	r0, [r4, #4]
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	f000 f81c 	bl	800c7f8 <__sfp>
 800c7c0:	60a0      	str	r0, [r4, #8]
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f000 f818 	bl	800c7f8 <__sfp>
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	60e0      	str	r0, [r4, #12]
 800c7cc:	2104      	movs	r1, #4
 800c7ce:	6860      	ldr	r0, [r4, #4]
 800c7d0:	f7ff ff82 	bl	800c6d8 <std>
 800c7d4:	68a0      	ldr	r0, [r4, #8]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	2109      	movs	r1, #9
 800c7da:	f7ff ff7d 	bl	800c6d8 <std>
 800c7de:	68e0      	ldr	r0, [r4, #12]
 800c7e0:	2202      	movs	r2, #2
 800c7e2:	2112      	movs	r1, #18
 800c7e4:	f7ff ff78 	bl	800c6d8 <std>
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	61a3      	str	r3, [r4, #24]
 800c7ec:	e7d2      	b.n	800c794 <__sinit+0xc>
 800c7ee:	bf00      	nop
 800c7f0:	0800fa00 	.word	0x0800fa00
 800c7f4:	0800c721 	.word	0x0800c721

0800c7f8 <__sfp>:
 800c7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7fa:	4607      	mov	r7, r0
 800c7fc:	f7ff ffac 	bl	800c758 <__sfp_lock_acquire>
 800c800:	4b1e      	ldr	r3, [pc, #120]	; (800c87c <__sfp+0x84>)
 800c802:	681e      	ldr	r6, [r3, #0]
 800c804:	69b3      	ldr	r3, [r6, #24]
 800c806:	b913      	cbnz	r3, 800c80e <__sfp+0x16>
 800c808:	4630      	mov	r0, r6
 800c80a:	f7ff ffbd 	bl	800c788 <__sinit>
 800c80e:	3648      	adds	r6, #72	; 0x48
 800c810:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c814:	3b01      	subs	r3, #1
 800c816:	d503      	bpl.n	800c820 <__sfp+0x28>
 800c818:	6833      	ldr	r3, [r6, #0]
 800c81a:	b30b      	cbz	r3, 800c860 <__sfp+0x68>
 800c81c:	6836      	ldr	r6, [r6, #0]
 800c81e:	e7f7      	b.n	800c810 <__sfp+0x18>
 800c820:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c824:	b9d5      	cbnz	r5, 800c85c <__sfp+0x64>
 800c826:	4b16      	ldr	r3, [pc, #88]	; (800c880 <__sfp+0x88>)
 800c828:	60e3      	str	r3, [r4, #12]
 800c82a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c82e:	6665      	str	r5, [r4, #100]	; 0x64
 800c830:	f000 f84c 	bl	800c8cc <__retarget_lock_init_recursive>
 800c834:	f7ff ff96 	bl	800c764 <__sfp_lock_release>
 800c838:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c83c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c840:	6025      	str	r5, [r4, #0]
 800c842:	61a5      	str	r5, [r4, #24]
 800c844:	2208      	movs	r2, #8
 800c846:	4629      	mov	r1, r5
 800c848:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c84c:	f7fe f956 	bl	800aafc <memset>
 800c850:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c854:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c858:	4620      	mov	r0, r4
 800c85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c85c:	3468      	adds	r4, #104	; 0x68
 800c85e:	e7d9      	b.n	800c814 <__sfp+0x1c>
 800c860:	2104      	movs	r1, #4
 800c862:	4638      	mov	r0, r7
 800c864:	f7ff ff62 	bl	800c72c <__sfmoreglue>
 800c868:	4604      	mov	r4, r0
 800c86a:	6030      	str	r0, [r6, #0]
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d1d5      	bne.n	800c81c <__sfp+0x24>
 800c870:	f7ff ff78 	bl	800c764 <__sfp_lock_release>
 800c874:	230c      	movs	r3, #12
 800c876:	603b      	str	r3, [r7, #0]
 800c878:	e7ee      	b.n	800c858 <__sfp+0x60>
 800c87a:	bf00      	nop
 800c87c:	0800fa00 	.word	0x0800fa00
 800c880:	ffff0001 	.word	0xffff0001

0800c884 <_fwalk_reent>:
 800c884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c888:	4606      	mov	r6, r0
 800c88a:	4688      	mov	r8, r1
 800c88c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c890:	2700      	movs	r7, #0
 800c892:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c896:	f1b9 0901 	subs.w	r9, r9, #1
 800c89a:	d505      	bpl.n	800c8a8 <_fwalk_reent+0x24>
 800c89c:	6824      	ldr	r4, [r4, #0]
 800c89e:	2c00      	cmp	r4, #0
 800c8a0:	d1f7      	bne.n	800c892 <_fwalk_reent+0xe>
 800c8a2:	4638      	mov	r0, r7
 800c8a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8a8:	89ab      	ldrh	r3, [r5, #12]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d907      	bls.n	800c8be <_fwalk_reent+0x3a>
 800c8ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	d003      	beq.n	800c8be <_fwalk_reent+0x3a>
 800c8b6:	4629      	mov	r1, r5
 800c8b8:	4630      	mov	r0, r6
 800c8ba:	47c0      	blx	r8
 800c8bc:	4307      	orrs	r7, r0
 800c8be:	3568      	adds	r5, #104	; 0x68
 800c8c0:	e7e9      	b.n	800c896 <_fwalk_reent+0x12>
	...

0800c8c4 <_localeconv_r>:
 800c8c4:	4800      	ldr	r0, [pc, #0]	; (800c8c8 <_localeconv_r+0x4>)
 800c8c6:	4770      	bx	lr
 800c8c8:	20000a18 	.word	0x20000a18

0800c8cc <__retarget_lock_init_recursive>:
 800c8cc:	4770      	bx	lr

0800c8ce <__retarget_lock_acquire_recursive>:
 800c8ce:	4770      	bx	lr

0800c8d0 <__retarget_lock_release_recursive>:
 800c8d0:	4770      	bx	lr

0800c8d2 <__swhatbuf_r>:
 800c8d2:	b570      	push	{r4, r5, r6, lr}
 800c8d4:	460e      	mov	r6, r1
 800c8d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8da:	2900      	cmp	r1, #0
 800c8dc:	b096      	sub	sp, #88	; 0x58
 800c8de:	4614      	mov	r4, r2
 800c8e0:	461d      	mov	r5, r3
 800c8e2:	da08      	bge.n	800c8f6 <__swhatbuf_r+0x24>
 800c8e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	602a      	str	r2, [r5, #0]
 800c8ec:	061a      	lsls	r2, r3, #24
 800c8ee:	d410      	bmi.n	800c912 <__swhatbuf_r+0x40>
 800c8f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8f4:	e00e      	b.n	800c914 <__swhatbuf_r+0x42>
 800c8f6:	466a      	mov	r2, sp
 800c8f8:	f000 fde6 	bl	800d4c8 <_fstat_r>
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	dbf1      	blt.n	800c8e4 <__swhatbuf_r+0x12>
 800c900:	9a01      	ldr	r2, [sp, #4]
 800c902:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c906:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c90a:	425a      	negs	r2, r3
 800c90c:	415a      	adcs	r2, r3
 800c90e:	602a      	str	r2, [r5, #0]
 800c910:	e7ee      	b.n	800c8f0 <__swhatbuf_r+0x1e>
 800c912:	2340      	movs	r3, #64	; 0x40
 800c914:	2000      	movs	r0, #0
 800c916:	6023      	str	r3, [r4, #0]
 800c918:	b016      	add	sp, #88	; 0x58
 800c91a:	bd70      	pop	{r4, r5, r6, pc}

0800c91c <__smakebuf_r>:
 800c91c:	898b      	ldrh	r3, [r1, #12]
 800c91e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c920:	079d      	lsls	r5, r3, #30
 800c922:	4606      	mov	r6, r0
 800c924:	460c      	mov	r4, r1
 800c926:	d507      	bpl.n	800c938 <__smakebuf_r+0x1c>
 800c928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c92c:	6023      	str	r3, [r4, #0]
 800c92e:	6123      	str	r3, [r4, #16]
 800c930:	2301      	movs	r3, #1
 800c932:	6163      	str	r3, [r4, #20]
 800c934:	b002      	add	sp, #8
 800c936:	bd70      	pop	{r4, r5, r6, pc}
 800c938:	ab01      	add	r3, sp, #4
 800c93a:	466a      	mov	r2, sp
 800c93c:	f7ff ffc9 	bl	800c8d2 <__swhatbuf_r>
 800c940:	9900      	ldr	r1, [sp, #0]
 800c942:	4605      	mov	r5, r0
 800c944:	4630      	mov	r0, r6
 800c946:	f7fe f94d 	bl	800abe4 <_malloc_r>
 800c94a:	b948      	cbnz	r0, 800c960 <__smakebuf_r+0x44>
 800c94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c950:	059a      	lsls	r2, r3, #22
 800c952:	d4ef      	bmi.n	800c934 <__smakebuf_r+0x18>
 800c954:	f023 0303 	bic.w	r3, r3, #3
 800c958:	f043 0302 	orr.w	r3, r3, #2
 800c95c:	81a3      	strh	r3, [r4, #12]
 800c95e:	e7e3      	b.n	800c928 <__smakebuf_r+0xc>
 800c960:	4b0d      	ldr	r3, [pc, #52]	; (800c998 <__smakebuf_r+0x7c>)
 800c962:	62b3      	str	r3, [r6, #40]	; 0x28
 800c964:	89a3      	ldrh	r3, [r4, #12]
 800c966:	6020      	str	r0, [r4, #0]
 800c968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c96c:	81a3      	strh	r3, [r4, #12]
 800c96e:	9b00      	ldr	r3, [sp, #0]
 800c970:	6163      	str	r3, [r4, #20]
 800c972:	9b01      	ldr	r3, [sp, #4]
 800c974:	6120      	str	r0, [r4, #16]
 800c976:	b15b      	cbz	r3, 800c990 <__smakebuf_r+0x74>
 800c978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c97c:	4630      	mov	r0, r6
 800c97e:	f000 fdb5 	bl	800d4ec <_isatty_r>
 800c982:	b128      	cbz	r0, 800c990 <__smakebuf_r+0x74>
 800c984:	89a3      	ldrh	r3, [r4, #12]
 800c986:	f023 0303 	bic.w	r3, r3, #3
 800c98a:	f043 0301 	orr.w	r3, r3, #1
 800c98e:	81a3      	strh	r3, [r4, #12]
 800c990:	89a0      	ldrh	r0, [r4, #12]
 800c992:	4305      	orrs	r5, r0
 800c994:	81a5      	strh	r5, [r4, #12]
 800c996:	e7cd      	b.n	800c934 <__smakebuf_r+0x18>
 800c998:	0800c721 	.word	0x0800c721

0800c99c <__malloc_lock>:
 800c99c:	4801      	ldr	r0, [pc, #4]	; (800c9a4 <__malloc_lock+0x8>)
 800c99e:	f7ff bf96 	b.w	800c8ce <__retarget_lock_acquire_recursive>
 800c9a2:	bf00      	nop
 800c9a4:	200019ac 	.word	0x200019ac

0800c9a8 <__malloc_unlock>:
 800c9a8:	4801      	ldr	r0, [pc, #4]	; (800c9b0 <__malloc_unlock+0x8>)
 800c9aa:	f7ff bf91 	b.w	800c8d0 <__retarget_lock_release_recursive>
 800c9ae:	bf00      	nop
 800c9b0:	200019ac 	.word	0x200019ac

0800c9b4 <_Balloc>:
 800c9b4:	b570      	push	{r4, r5, r6, lr}
 800c9b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c9b8:	4604      	mov	r4, r0
 800c9ba:	460d      	mov	r5, r1
 800c9bc:	b976      	cbnz	r6, 800c9dc <_Balloc+0x28>
 800c9be:	2010      	movs	r0, #16
 800c9c0:	f7fe f886 	bl	800aad0 <malloc>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	6260      	str	r0, [r4, #36]	; 0x24
 800c9c8:	b920      	cbnz	r0, 800c9d4 <_Balloc+0x20>
 800c9ca:	4b18      	ldr	r3, [pc, #96]	; (800ca2c <_Balloc+0x78>)
 800c9cc:	4818      	ldr	r0, [pc, #96]	; (800ca30 <_Balloc+0x7c>)
 800c9ce:	2166      	movs	r1, #102	; 0x66
 800c9d0:	f000 fd3a 	bl	800d448 <__assert_func>
 800c9d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9d8:	6006      	str	r6, [r0, #0]
 800c9da:	60c6      	str	r6, [r0, #12]
 800c9dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9de:	68f3      	ldr	r3, [r6, #12]
 800c9e0:	b183      	cbz	r3, 800ca04 <_Balloc+0x50>
 800c9e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9ea:	b9b8      	cbnz	r0, 800ca1c <_Balloc+0x68>
 800c9ec:	2101      	movs	r1, #1
 800c9ee:	fa01 f605 	lsl.w	r6, r1, r5
 800c9f2:	1d72      	adds	r2, r6, #5
 800c9f4:	0092      	lsls	r2, r2, #2
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	f000 fb60 	bl	800d0bc <_calloc_r>
 800c9fc:	b160      	cbz	r0, 800ca18 <_Balloc+0x64>
 800c9fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca02:	e00e      	b.n	800ca22 <_Balloc+0x6e>
 800ca04:	2221      	movs	r2, #33	; 0x21
 800ca06:	2104      	movs	r1, #4
 800ca08:	4620      	mov	r0, r4
 800ca0a:	f000 fb57 	bl	800d0bc <_calloc_r>
 800ca0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca10:	60f0      	str	r0, [r6, #12]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d1e4      	bne.n	800c9e2 <_Balloc+0x2e>
 800ca18:	2000      	movs	r0, #0
 800ca1a:	bd70      	pop	{r4, r5, r6, pc}
 800ca1c:	6802      	ldr	r2, [r0, #0]
 800ca1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca22:	2300      	movs	r3, #0
 800ca24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca28:	e7f7      	b.n	800ca1a <_Balloc+0x66>
 800ca2a:	bf00      	nop
 800ca2c:	0800fa45 	.word	0x0800fa45
 800ca30:	0800fb28 	.word	0x0800fb28

0800ca34 <_Bfree>:
 800ca34:	b570      	push	{r4, r5, r6, lr}
 800ca36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca38:	4605      	mov	r5, r0
 800ca3a:	460c      	mov	r4, r1
 800ca3c:	b976      	cbnz	r6, 800ca5c <_Bfree+0x28>
 800ca3e:	2010      	movs	r0, #16
 800ca40:	f7fe f846 	bl	800aad0 <malloc>
 800ca44:	4602      	mov	r2, r0
 800ca46:	6268      	str	r0, [r5, #36]	; 0x24
 800ca48:	b920      	cbnz	r0, 800ca54 <_Bfree+0x20>
 800ca4a:	4b09      	ldr	r3, [pc, #36]	; (800ca70 <_Bfree+0x3c>)
 800ca4c:	4809      	ldr	r0, [pc, #36]	; (800ca74 <_Bfree+0x40>)
 800ca4e:	218a      	movs	r1, #138	; 0x8a
 800ca50:	f000 fcfa 	bl	800d448 <__assert_func>
 800ca54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca58:	6006      	str	r6, [r0, #0]
 800ca5a:	60c6      	str	r6, [r0, #12]
 800ca5c:	b13c      	cbz	r4, 800ca6e <_Bfree+0x3a>
 800ca5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca60:	6862      	ldr	r2, [r4, #4]
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca68:	6021      	str	r1, [r4, #0]
 800ca6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca6e:	bd70      	pop	{r4, r5, r6, pc}
 800ca70:	0800fa45 	.word	0x0800fa45
 800ca74:	0800fb28 	.word	0x0800fb28

0800ca78 <__multadd>:
 800ca78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7c:	690d      	ldr	r5, [r1, #16]
 800ca7e:	4607      	mov	r7, r0
 800ca80:	460c      	mov	r4, r1
 800ca82:	461e      	mov	r6, r3
 800ca84:	f101 0c14 	add.w	ip, r1, #20
 800ca88:	2000      	movs	r0, #0
 800ca8a:	f8dc 3000 	ldr.w	r3, [ip]
 800ca8e:	b299      	uxth	r1, r3
 800ca90:	fb02 6101 	mla	r1, r2, r1, r6
 800ca94:	0c1e      	lsrs	r6, r3, #16
 800ca96:	0c0b      	lsrs	r3, r1, #16
 800ca98:	fb02 3306 	mla	r3, r2, r6, r3
 800ca9c:	b289      	uxth	r1, r1
 800ca9e:	3001      	adds	r0, #1
 800caa0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800caa4:	4285      	cmp	r5, r0
 800caa6:	f84c 1b04 	str.w	r1, [ip], #4
 800caaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800caae:	dcec      	bgt.n	800ca8a <__multadd+0x12>
 800cab0:	b30e      	cbz	r6, 800caf6 <__multadd+0x7e>
 800cab2:	68a3      	ldr	r3, [r4, #8]
 800cab4:	42ab      	cmp	r3, r5
 800cab6:	dc19      	bgt.n	800caec <__multadd+0x74>
 800cab8:	6861      	ldr	r1, [r4, #4]
 800caba:	4638      	mov	r0, r7
 800cabc:	3101      	adds	r1, #1
 800cabe:	f7ff ff79 	bl	800c9b4 <_Balloc>
 800cac2:	4680      	mov	r8, r0
 800cac4:	b928      	cbnz	r0, 800cad2 <__multadd+0x5a>
 800cac6:	4602      	mov	r2, r0
 800cac8:	4b0c      	ldr	r3, [pc, #48]	; (800cafc <__multadd+0x84>)
 800caca:	480d      	ldr	r0, [pc, #52]	; (800cb00 <__multadd+0x88>)
 800cacc:	21b5      	movs	r1, #181	; 0xb5
 800cace:	f000 fcbb 	bl	800d448 <__assert_func>
 800cad2:	6922      	ldr	r2, [r4, #16]
 800cad4:	3202      	adds	r2, #2
 800cad6:	f104 010c 	add.w	r1, r4, #12
 800cada:	0092      	lsls	r2, r2, #2
 800cadc:	300c      	adds	r0, #12
 800cade:	f7fd ffff 	bl	800aae0 <memcpy>
 800cae2:	4621      	mov	r1, r4
 800cae4:	4638      	mov	r0, r7
 800cae6:	f7ff ffa5 	bl	800ca34 <_Bfree>
 800caea:	4644      	mov	r4, r8
 800caec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800caf0:	3501      	adds	r5, #1
 800caf2:	615e      	str	r6, [r3, #20]
 800caf4:	6125      	str	r5, [r4, #16]
 800caf6:	4620      	mov	r0, r4
 800caf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cafc:	0800fab7 	.word	0x0800fab7
 800cb00:	0800fb28 	.word	0x0800fb28

0800cb04 <__hi0bits>:
 800cb04:	0c03      	lsrs	r3, r0, #16
 800cb06:	041b      	lsls	r3, r3, #16
 800cb08:	b9d3      	cbnz	r3, 800cb40 <__hi0bits+0x3c>
 800cb0a:	0400      	lsls	r0, r0, #16
 800cb0c:	2310      	movs	r3, #16
 800cb0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cb12:	bf04      	itt	eq
 800cb14:	0200      	lsleq	r0, r0, #8
 800cb16:	3308      	addeq	r3, #8
 800cb18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cb1c:	bf04      	itt	eq
 800cb1e:	0100      	lsleq	r0, r0, #4
 800cb20:	3304      	addeq	r3, #4
 800cb22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cb26:	bf04      	itt	eq
 800cb28:	0080      	lsleq	r0, r0, #2
 800cb2a:	3302      	addeq	r3, #2
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	db05      	blt.n	800cb3c <__hi0bits+0x38>
 800cb30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cb34:	f103 0301 	add.w	r3, r3, #1
 800cb38:	bf08      	it	eq
 800cb3a:	2320      	moveq	r3, #32
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	4770      	bx	lr
 800cb40:	2300      	movs	r3, #0
 800cb42:	e7e4      	b.n	800cb0e <__hi0bits+0xa>

0800cb44 <__lo0bits>:
 800cb44:	6803      	ldr	r3, [r0, #0]
 800cb46:	f013 0207 	ands.w	r2, r3, #7
 800cb4a:	4601      	mov	r1, r0
 800cb4c:	d00b      	beq.n	800cb66 <__lo0bits+0x22>
 800cb4e:	07da      	lsls	r2, r3, #31
 800cb50:	d423      	bmi.n	800cb9a <__lo0bits+0x56>
 800cb52:	0798      	lsls	r0, r3, #30
 800cb54:	bf49      	itett	mi
 800cb56:	085b      	lsrmi	r3, r3, #1
 800cb58:	089b      	lsrpl	r3, r3, #2
 800cb5a:	2001      	movmi	r0, #1
 800cb5c:	600b      	strmi	r3, [r1, #0]
 800cb5e:	bf5c      	itt	pl
 800cb60:	600b      	strpl	r3, [r1, #0]
 800cb62:	2002      	movpl	r0, #2
 800cb64:	4770      	bx	lr
 800cb66:	b298      	uxth	r0, r3
 800cb68:	b9a8      	cbnz	r0, 800cb96 <__lo0bits+0x52>
 800cb6a:	0c1b      	lsrs	r3, r3, #16
 800cb6c:	2010      	movs	r0, #16
 800cb6e:	b2da      	uxtb	r2, r3
 800cb70:	b90a      	cbnz	r2, 800cb76 <__lo0bits+0x32>
 800cb72:	3008      	adds	r0, #8
 800cb74:	0a1b      	lsrs	r3, r3, #8
 800cb76:	071a      	lsls	r2, r3, #28
 800cb78:	bf04      	itt	eq
 800cb7a:	091b      	lsreq	r3, r3, #4
 800cb7c:	3004      	addeq	r0, #4
 800cb7e:	079a      	lsls	r2, r3, #30
 800cb80:	bf04      	itt	eq
 800cb82:	089b      	lsreq	r3, r3, #2
 800cb84:	3002      	addeq	r0, #2
 800cb86:	07da      	lsls	r2, r3, #31
 800cb88:	d403      	bmi.n	800cb92 <__lo0bits+0x4e>
 800cb8a:	085b      	lsrs	r3, r3, #1
 800cb8c:	f100 0001 	add.w	r0, r0, #1
 800cb90:	d005      	beq.n	800cb9e <__lo0bits+0x5a>
 800cb92:	600b      	str	r3, [r1, #0]
 800cb94:	4770      	bx	lr
 800cb96:	4610      	mov	r0, r2
 800cb98:	e7e9      	b.n	800cb6e <__lo0bits+0x2a>
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	4770      	bx	lr
 800cb9e:	2020      	movs	r0, #32
 800cba0:	4770      	bx	lr
	...

0800cba4 <__i2b>:
 800cba4:	b510      	push	{r4, lr}
 800cba6:	460c      	mov	r4, r1
 800cba8:	2101      	movs	r1, #1
 800cbaa:	f7ff ff03 	bl	800c9b4 <_Balloc>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	b928      	cbnz	r0, 800cbbe <__i2b+0x1a>
 800cbb2:	4b05      	ldr	r3, [pc, #20]	; (800cbc8 <__i2b+0x24>)
 800cbb4:	4805      	ldr	r0, [pc, #20]	; (800cbcc <__i2b+0x28>)
 800cbb6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cbba:	f000 fc45 	bl	800d448 <__assert_func>
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	6144      	str	r4, [r0, #20]
 800cbc2:	6103      	str	r3, [r0, #16]
 800cbc4:	bd10      	pop	{r4, pc}
 800cbc6:	bf00      	nop
 800cbc8:	0800fab7 	.word	0x0800fab7
 800cbcc:	0800fb28 	.word	0x0800fb28

0800cbd0 <__multiply>:
 800cbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd4:	4691      	mov	r9, r2
 800cbd6:	690a      	ldr	r2, [r1, #16]
 800cbd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	bfb8      	it	lt
 800cbe0:	460b      	movlt	r3, r1
 800cbe2:	460c      	mov	r4, r1
 800cbe4:	bfbc      	itt	lt
 800cbe6:	464c      	movlt	r4, r9
 800cbe8:	4699      	movlt	r9, r3
 800cbea:	6927      	ldr	r7, [r4, #16]
 800cbec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cbf0:	68a3      	ldr	r3, [r4, #8]
 800cbf2:	6861      	ldr	r1, [r4, #4]
 800cbf4:	eb07 060a 	add.w	r6, r7, sl
 800cbf8:	42b3      	cmp	r3, r6
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	bfb8      	it	lt
 800cbfe:	3101      	addlt	r1, #1
 800cc00:	f7ff fed8 	bl	800c9b4 <_Balloc>
 800cc04:	b930      	cbnz	r0, 800cc14 <__multiply+0x44>
 800cc06:	4602      	mov	r2, r0
 800cc08:	4b44      	ldr	r3, [pc, #272]	; (800cd1c <__multiply+0x14c>)
 800cc0a:	4845      	ldr	r0, [pc, #276]	; (800cd20 <__multiply+0x150>)
 800cc0c:	f240 115d 	movw	r1, #349	; 0x15d
 800cc10:	f000 fc1a 	bl	800d448 <__assert_func>
 800cc14:	f100 0514 	add.w	r5, r0, #20
 800cc18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cc1c:	462b      	mov	r3, r5
 800cc1e:	2200      	movs	r2, #0
 800cc20:	4543      	cmp	r3, r8
 800cc22:	d321      	bcc.n	800cc68 <__multiply+0x98>
 800cc24:	f104 0314 	add.w	r3, r4, #20
 800cc28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cc2c:	f109 0314 	add.w	r3, r9, #20
 800cc30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cc34:	9202      	str	r2, [sp, #8]
 800cc36:	1b3a      	subs	r2, r7, r4
 800cc38:	3a15      	subs	r2, #21
 800cc3a:	f022 0203 	bic.w	r2, r2, #3
 800cc3e:	3204      	adds	r2, #4
 800cc40:	f104 0115 	add.w	r1, r4, #21
 800cc44:	428f      	cmp	r7, r1
 800cc46:	bf38      	it	cc
 800cc48:	2204      	movcc	r2, #4
 800cc4a:	9201      	str	r2, [sp, #4]
 800cc4c:	9a02      	ldr	r2, [sp, #8]
 800cc4e:	9303      	str	r3, [sp, #12]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d80c      	bhi.n	800cc6e <__multiply+0x9e>
 800cc54:	2e00      	cmp	r6, #0
 800cc56:	dd03      	ble.n	800cc60 <__multiply+0x90>
 800cc58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d05a      	beq.n	800cd16 <__multiply+0x146>
 800cc60:	6106      	str	r6, [r0, #16]
 800cc62:	b005      	add	sp, #20
 800cc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc68:	f843 2b04 	str.w	r2, [r3], #4
 800cc6c:	e7d8      	b.n	800cc20 <__multiply+0x50>
 800cc6e:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc72:	f1ba 0f00 	cmp.w	sl, #0
 800cc76:	d024      	beq.n	800ccc2 <__multiply+0xf2>
 800cc78:	f104 0e14 	add.w	lr, r4, #20
 800cc7c:	46a9      	mov	r9, r5
 800cc7e:	f04f 0c00 	mov.w	ip, #0
 800cc82:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cc86:	f8d9 1000 	ldr.w	r1, [r9]
 800cc8a:	fa1f fb82 	uxth.w	fp, r2
 800cc8e:	b289      	uxth	r1, r1
 800cc90:	fb0a 110b 	mla	r1, sl, fp, r1
 800cc94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cc98:	f8d9 2000 	ldr.w	r2, [r9]
 800cc9c:	4461      	add	r1, ip
 800cc9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cca2:	fb0a c20b 	mla	r2, sl, fp, ip
 800cca6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ccaa:	b289      	uxth	r1, r1
 800ccac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ccb0:	4577      	cmp	r7, lr
 800ccb2:	f849 1b04 	str.w	r1, [r9], #4
 800ccb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ccba:	d8e2      	bhi.n	800cc82 <__multiply+0xb2>
 800ccbc:	9a01      	ldr	r2, [sp, #4]
 800ccbe:	f845 c002 	str.w	ip, [r5, r2]
 800ccc2:	9a03      	ldr	r2, [sp, #12]
 800ccc4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ccc8:	3304      	adds	r3, #4
 800ccca:	f1b9 0f00 	cmp.w	r9, #0
 800ccce:	d020      	beq.n	800cd12 <__multiply+0x142>
 800ccd0:	6829      	ldr	r1, [r5, #0]
 800ccd2:	f104 0c14 	add.w	ip, r4, #20
 800ccd6:	46ae      	mov	lr, r5
 800ccd8:	f04f 0a00 	mov.w	sl, #0
 800ccdc:	f8bc b000 	ldrh.w	fp, [ip]
 800cce0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cce4:	fb09 220b 	mla	r2, r9, fp, r2
 800cce8:	4492      	add	sl, r2
 800ccea:	b289      	uxth	r1, r1
 800ccec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ccf0:	f84e 1b04 	str.w	r1, [lr], #4
 800ccf4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ccf8:	f8be 1000 	ldrh.w	r1, [lr]
 800ccfc:	0c12      	lsrs	r2, r2, #16
 800ccfe:	fb09 1102 	mla	r1, r9, r2, r1
 800cd02:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cd06:	4567      	cmp	r7, ip
 800cd08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cd0c:	d8e6      	bhi.n	800ccdc <__multiply+0x10c>
 800cd0e:	9a01      	ldr	r2, [sp, #4]
 800cd10:	50a9      	str	r1, [r5, r2]
 800cd12:	3504      	adds	r5, #4
 800cd14:	e79a      	b.n	800cc4c <__multiply+0x7c>
 800cd16:	3e01      	subs	r6, #1
 800cd18:	e79c      	b.n	800cc54 <__multiply+0x84>
 800cd1a:	bf00      	nop
 800cd1c:	0800fab7 	.word	0x0800fab7
 800cd20:	0800fb28 	.word	0x0800fb28

0800cd24 <__pow5mult>:
 800cd24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd28:	4615      	mov	r5, r2
 800cd2a:	f012 0203 	ands.w	r2, r2, #3
 800cd2e:	4606      	mov	r6, r0
 800cd30:	460f      	mov	r7, r1
 800cd32:	d007      	beq.n	800cd44 <__pow5mult+0x20>
 800cd34:	4c25      	ldr	r4, [pc, #148]	; (800cdcc <__pow5mult+0xa8>)
 800cd36:	3a01      	subs	r2, #1
 800cd38:	2300      	movs	r3, #0
 800cd3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd3e:	f7ff fe9b 	bl	800ca78 <__multadd>
 800cd42:	4607      	mov	r7, r0
 800cd44:	10ad      	asrs	r5, r5, #2
 800cd46:	d03d      	beq.n	800cdc4 <__pow5mult+0xa0>
 800cd48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cd4a:	b97c      	cbnz	r4, 800cd6c <__pow5mult+0x48>
 800cd4c:	2010      	movs	r0, #16
 800cd4e:	f7fd febf 	bl	800aad0 <malloc>
 800cd52:	4602      	mov	r2, r0
 800cd54:	6270      	str	r0, [r6, #36]	; 0x24
 800cd56:	b928      	cbnz	r0, 800cd64 <__pow5mult+0x40>
 800cd58:	4b1d      	ldr	r3, [pc, #116]	; (800cdd0 <__pow5mult+0xac>)
 800cd5a:	481e      	ldr	r0, [pc, #120]	; (800cdd4 <__pow5mult+0xb0>)
 800cd5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cd60:	f000 fb72 	bl	800d448 <__assert_func>
 800cd64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd68:	6004      	str	r4, [r0, #0]
 800cd6a:	60c4      	str	r4, [r0, #12]
 800cd6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cd70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd74:	b94c      	cbnz	r4, 800cd8a <__pow5mult+0x66>
 800cd76:	f240 2171 	movw	r1, #625	; 0x271
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	f7ff ff12 	bl	800cba4 <__i2b>
 800cd80:	2300      	movs	r3, #0
 800cd82:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd86:	4604      	mov	r4, r0
 800cd88:	6003      	str	r3, [r0, #0]
 800cd8a:	f04f 0900 	mov.w	r9, #0
 800cd8e:	07eb      	lsls	r3, r5, #31
 800cd90:	d50a      	bpl.n	800cda8 <__pow5mult+0x84>
 800cd92:	4639      	mov	r1, r7
 800cd94:	4622      	mov	r2, r4
 800cd96:	4630      	mov	r0, r6
 800cd98:	f7ff ff1a 	bl	800cbd0 <__multiply>
 800cd9c:	4639      	mov	r1, r7
 800cd9e:	4680      	mov	r8, r0
 800cda0:	4630      	mov	r0, r6
 800cda2:	f7ff fe47 	bl	800ca34 <_Bfree>
 800cda6:	4647      	mov	r7, r8
 800cda8:	106d      	asrs	r5, r5, #1
 800cdaa:	d00b      	beq.n	800cdc4 <__pow5mult+0xa0>
 800cdac:	6820      	ldr	r0, [r4, #0]
 800cdae:	b938      	cbnz	r0, 800cdc0 <__pow5mult+0x9c>
 800cdb0:	4622      	mov	r2, r4
 800cdb2:	4621      	mov	r1, r4
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	f7ff ff0b 	bl	800cbd0 <__multiply>
 800cdba:	6020      	str	r0, [r4, #0]
 800cdbc:	f8c0 9000 	str.w	r9, [r0]
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	e7e4      	b.n	800cd8e <__pow5mult+0x6a>
 800cdc4:	4638      	mov	r0, r7
 800cdc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdca:	bf00      	nop
 800cdcc:	0800fc78 	.word	0x0800fc78
 800cdd0:	0800fa45 	.word	0x0800fa45
 800cdd4:	0800fb28 	.word	0x0800fb28

0800cdd8 <__lshift>:
 800cdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cddc:	460c      	mov	r4, r1
 800cdde:	6849      	ldr	r1, [r1, #4]
 800cde0:	6923      	ldr	r3, [r4, #16]
 800cde2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cde6:	68a3      	ldr	r3, [r4, #8]
 800cde8:	4607      	mov	r7, r0
 800cdea:	4691      	mov	r9, r2
 800cdec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cdf0:	f108 0601 	add.w	r6, r8, #1
 800cdf4:	42b3      	cmp	r3, r6
 800cdf6:	db0b      	blt.n	800ce10 <__lshift+0x38>
 800cdf8:	4638      	mov	r0, r7
 800cdfa:	f7ff fddb 	bl	800c9b4 <_Balloc>
 800cdfe:	4605      	mov	r5, r0
 800ce00:	b948      	cbnz	r0, 800ce16 <__lshift+0x3e>
 800ce02:	4602      	mov	r2, r0
 800ce04:	4b2a      	ldr	r3, [pc, #168]	; (800ceb0 <__lshift+0xd8>)
 800ce06:	482b      	ldr	r0, [pc, #172]	; (800ceb4 <__lshift+0xdc>)
 800ce08:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ce0c:	f000 fb1c 	bl	800d448 <__assert_func>
 800ce10:	3101      	adds	r1, #1
 800ce12:	005b      	lsls	r3, r3, #1
 800ce14:	e7ee      	b.n	800cdf4 <__lshift+0x1c>
 800ce16:	2300      	movs	r3, #0
 800ce18:	f100 0114 	add.w	r1, r0, #20
 800ce1c:	f100 0210 	add.w	r2, r0, #16
 800ce20:	4618      	mov	r0, r3
 800ce22:	4553      	cmp	r3, sl
 800ce24:	db37      	blt.n	800ce96 <__lshift+0xbe>
 800ce26:	6920      	ldr	r0, [r4, #16]
 800ce28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce2c:	f104 0314 	add.w	r3, r4, #20
 800ce30:	f019 091f 	ands.w	r9, r9, #31
 800ce34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ce3c:	d02f      	beq.n	800ce9e <__lshift+0xc6>
 800ce3e:	f1c9 0e20 	rsb	lr, r9, #32
 800ce42:	468a      	mov	sl, r1
 800ce44:	f04f 0c00 	mov.w	ip, #0
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	fa02 f209 	lsl.w	r2, r2, r9
 800ce4e:	ea42 020c 	orr.w	r2, r2, ip
 800ce52:	f84a 2b04 	str.w	r2, [sl], #4
 800ce56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce5a:	4298      	cmp	r0, r3
 800ce5c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ce60:	d8f2      	bhi.n	800ce48 <__lshift+0x70>
 800ce62:	1b03      	subs	r3, r0, r4
 800ce64:	3b15      	subs	r3, #21
 800ce66:	f023 0303 	bic.w	r3, r3, #3
 800ce6a:	3304      	adds	r3, #4
 800ce6c:	f104 0215 	add.w	r2, r4, #21
 800ce70:	4290      	cmp	r0, r2
 800ce72:	bf38      	it	cc
 800ce74:	2304      	movcc	r3, #4
 800ce76:	f841 c003 	str.w	ip, [r1, r3]
 800ce7a:	f1bc 0f00 	cmp.w	ip, #0
 800ce7e:	d001      	beq.n	800ce84 <__lshift+0xac>
 800ce80:	f108 0602 	add.w	r6, r8, #2
 800ce84:	3e01      	subs	r6, #1
 800ce86:	4638      	mov	r0, r7
 800ce88:	612e      	str	r6, [r5, #16]
 800ce8a:	4621      	mov	r1, r4
 800ce8c:	f7ff fdd2 	bl	800ca34 <_Bfree>
 800ce90:	4628      	mov	r0, r5
 800ce92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce96:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	e7c1      	b.n	800ce22 <__lshift+0x4a>
 800ce9e:	3904      	subs	r1, #4
 800cea0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cea4:	f841 2f04 	str.w	r2, [r1, #4]!
 800cea8:	4298      	cmp	r0, r3
 800ceaa:	d8f9      	bhi.n	800cea0 <__lshift+0xc8>
 800ceac:	e7ea      	b.n	800ce84 <__lshift+0xac>
 800ceae:	bf00      	nop
 800ceb0:	0800fab7 	.word	0x0800fab7
 800ceb4:	0800fb28 	.word	0x0800fb28

0800ceb8 <__mcmp>:
 800ceb8:	b530      	push	{r4, r5, lr}
 800ceba:	6902      	ldr	r2, [r0, #16]
 800cebc:	690c      	ldr	r4, [r1, #16]
 800cebe:	1b12      	subs	r2, r2, r4
 800cec0:	d10e      	bne.n	800cee0 <__mcmp+0x28>
 800cec2:	f100 0314 	add.w	r3, r0, #20
 800cec6:	3114      	adds	r1, #20
 800cec8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cecc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ced0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ced4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ced8:	42a5      	cmp	r5, r4
 800ceda:	d003      	beq.n	800cee4 <__mcmp+0x2c>
 800cedc:	d305      	bcc.n	800ceea <__mcmp+0x32>
 800cede:	2201      	movs	r2, #1
 800cee0:	4610      	mov	r0, r2
 800cee2:	bd30      	pop	{r4, r5, pc}
 800cee4:	4283      	cmp	r3, r0
 800cee6:	d3f3      	bcc.n	800ced0 <__mcmp+0x18>
 800cee8:	e7fa      	b.n	800cee0 <__mcmp+0x28>
 800ceea:	f04f 32ff 	mov.w	r2, #4294967295
 800ceee:	e7f7      	b.n	800cee0 <__mcmp+0x28>

0800cef0 <__mdiff>:
 800cef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef4:	460c      	mov	r4, r1
 800cef6:	4606      	mov	r6, r0
 800cef8:	4611      	mov	r1, r2
 800cefa:	4620      	mov	r0, r4
 800cefc:	4690      	mov	r8, r2
 800cefe:	f7ff ffdb 	bl	800ceb8 <__mcmp>
 800cf02:	1e05      	subs	r5, r0, #0
 800cf04:	d110      	bne.n	800cf28 <__mdiff+0x38>
 800cf06:	4629      	mov	r1, r5
 800cf08:	4630      	mov	r0, r6
 800cf0a:	f7ff fd53 	bl	800c9b4 <_Balloc>
 800cf0e:	b930      	cbnz	r0, 800cf1e <__mdiff+0x2e>
 800cf10:	4b3a      	ldr	r3, [pc, #232]	; (800cffc <__mdiff+0x10c>)
 800cf12:	4602      	mov	r2, r0
 800cf14:	f240 2132 	movw	r1, #562	; 0x232
 800cf18:	4839      	ldr	r0, [pc, #228]	; (800d000 <__mdiff+0x110>)
 800cf1a:	f000 fa95 	bl	800d448 <__assert_func>
 800cf1e:	2301      	movs	r3, #1
 800cf20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf28:	bfa4      	itt	ge
 800cf2a:	4643      	movge	r3, r8
 800cf2c:	46a0      	movge	r8, r4
 800cf2e:	4630      	mov	r0, r6
 800cf30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cf34:	bfa6      	itte	ge
 800cf36:	461c      	movge	r4, r3
 800cf38:	2500      	movge	r5, #0
 800cf3a:	2501      	movlt	r5, #1
 800cf3c:	f7ff fd3a 	bl	800c9b4 <_Balloc>
 800cf40:	b920      	cbnz	r0, 800cf4c <__mdiff+0x5c>
 800cf42:	4b2e      	ldr	r3, [pc, #184]	; (800cffc <__mdiff+0x10c>)
 800cf44:	4602      	mov	r2, r0
 800cf46:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cf4a:	e7e5      	b.n	800cf18 <__mdiff+0x28>
 800cf4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cf50:	6926      	ldr	r6, [r4, #16]
 800cf52:	60c5      	str	r5, [r0, #12]
 800cf54:	f104 0914 	add.w	r9, r4, #20
 800cf58:	f108 0514 	add.w	r5, r8, #20
 800cf5c:	f100 0e14 	add.w	lr, r0, #20
 800cf60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cf64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cf68:	f108 0210 	add.w	r2, r8, #16
 800cf6c:	46f2      	mov	sl, lr
 800cf6e:	2100      	movs	r1, #0
 800cf70:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cf78:	fa1f f883 	uxth.w	r8, r3
 800cf7c:	fa11 f18b 	uxtah	r1, r1, fp
 800cf80:	0c1b      	lsrs	r3, r3, #16
 800cf82:	eba1 0808 	sub.w	r8, r1, r8
 800cf86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cf8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cf8e:	fa1f f888 	uxth.w	r8, r8
 800cf92:	1419      	asrs	r1, r3, #16
 800cf94:	454e      	cmp	r6, r9
 800cf96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cf9a:	f84a 3b04 	str.w	r3, [sl], #4
 800cf9e:	d8e7      	bhi.n	800cf70 <__mdiff+0x80>
 800cfa0:	1b33      	subs	r3, r6, r4
 800cfa2:	3b15      	subs	r3, #21
 800cfa4:	f023 0303 	bic.w	r3, r3, #3
 800cfa8:	3304      	adds	r3, #4
 800cfaa:	3415      	adds	r4, #21
 800cfac:	42a6      	cmp	r6, r4
 800cfae:	bf38      	it	cc
 800cfb0:	2304      	movcc	r3, #4
 800cfb2:	441d      	add	r5, r3
 800cfb4:	4473      	add	r3, lr
 800cfb6:	469e      	mov	lr, r3
 800cfb8:	462e      	mov	r6, r5
 800cfba:	4566      	cmp	r6, ip
 800cfbc:	d30e      	bcc.n	800cfdc <__mdiff+0xec>
 800cfbe:	f10c 0203 	add.w	r2, ip, #3
 800cfc2:	1b52      	subs	r2, r2, r5
 800cfc4:	f022 0203 	bic.w	r2, r2, #3
 800cfc8:	3d03      	subs	r5, #3
 800cfca:	45ac      	cmp	ip, r5
 800cfcc:	bf38      	it	cc
 800cfce:	2200      	movcc	r2, #0
 800cfd0:	441a      	add	r2, r3
 800cfd2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cfd6:	b17b      	cbz	r3, 800cff8 <__mdiff+0x108>
 800cfd8:	6107      	str	r7, [r0, #16]
 800cfda:	e7a3      	b.n	800cf24 <__mdiff+0x34>
 800cfdc:	f856 8b04 	ldr.w	r8, [r6], #4
 800cfe0:	fa11 f288 	uxtah	r2, r1, r8
 800cfe4:	1414      	asrs	r4, r2, #16
 800cfe6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cfea:	b292      	uxth	r2, r2
 800cfec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cff0:	f84e 2b04 	str.w	r2, [lr], #4
 800cff4:	1421      	asrs	r1, r4, #16
 800cff6:	e7e0      	b.n	800cfba <__mdiff+0xca>
 800cff8:	3f01      	subs	r7, #1
 800cffa:	e7ea      	b.n	800cfd2 <__mdiff+0xe2>
 800cffc:	0800fab7 	.word	0x0800fab7
 800d000:	0800fb28 	.word	0x0800fb28

0800d004 <__d2b>:
 800d004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d008:	4689      	mov	r9, r1
 800d00a:	2101      	movs	r1, #1
 800d00c:	ec57 6b10 	vmov	r6, r7, d0
 800d010:	4690      	mov	r8, r2
 800d012:	f7ff fccf 	bl	800c9b4 <_Balloc>
 800d016:	4604      	mov	r4, r0
 800d018:	b930      	cbnz	r0, 800d028 <__d2b+0x24>
 800d01a:	4602      	mov	r2, r0
 800d01c:	4b25      	ldr	r3, [pc, #148]	; (800d0b4 <__d2b+0xb0>)
 800d01e:	4826      	ldr	r0, [pc, #152]	; (800d0b8 <__d2b+0xb4>)
 800d020:	f240 310a 	movw	r1, #778	; 0x30a
 800d024:	f000 fa10 	bl	800d448 <__assert_func>
 800d028:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d02c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d030:	bb35      	cbnz	r5, 800d080 <__d2b+0x7c>
 800d032:	2e00      	cmp	r6, #0
 800d034:	9301      	str	r3, [sp, #4]
 800d036:	d028      	beq.n	800d08a <__d2b+0x86>
 800d038:	4668      	mov	r0, sp
 800d03a:	9600      	str	r6, [sp, #0]
 800d03c:	f7ff fd82 	bl	800cb44 <__lo0bits>
 800d040:	9900      	ldr	r1, [sp, #0]
 800d042:	b300      	cbz	r0, 800d086 <__d2b+0x82>
 800d044:	9a01      	ldr	r2, [sp, #4]
 800d046:	f1c0 0320 	rsb	r3, r0, #32
 800d04a:	fa02 f303 	lsl.w	r3, r2, r3
 800d04e:	430b      	orrs	r3, r1
 800d050:	40c2      	lsrs	r2, r0
 800d052:	6163      	str	r3, [r4, #20]
 800d054:	9201      	str	r2, [sp, #4]
 800d056:	9b01      	ldr	r3, [sp, #4]
 800d058:	61a3      	str	r3, [r4, #24]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	bf14      	ite	ne
 800d05e:	2202      	movne	r2, #2
 800d060:	2201      	moveq	r2, #1
 800d062:	6122      	str	r2, [r4, #16]
 800d064:	b1d5      	cbz	r5, 800d09c <__d2b+0x98>
 800d066:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d06a:	4405      	add	r5, r0
 800d06c:	f8c9 5000 	str.w	r5, [r9]
 800d070:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d074:	f8c8 0000 	str.w	r0, [r8]
 800d078:	4620      	mov	r0, r4
 800d07a:	b003      	add	sp, #12
 800d07c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d080:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d084:	e7d5      	b.n	800d032 <__d2b+0x2e>
 800d086:	6161      	str	r1, [r4, #20]
 800d088:	e7e5      	b.n	800d056 <__d2b+0x52>
 800d08a:	a801      	add	r0, sp, #4
 800d08c:	f7ff fd5a 	bl	800cb44 <__lo0bits>
 800d090:	9b01      	ldr	r3, [sp, #4]
 800d092:	6163      	str	r3, [r4, #20]
 800d094:	2201      	movs	r2, #1
 800d096:	6122      	str	r2, [r4, #16]
 800d098:	3020      	adds	r0, #32
 800d09a:	e7e3      	b.n	800d064 <__d2b+0x60>
 800d09c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d0a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d0a4:	f8c9 0000 	str.w	r0, [r9]
 800d0a8:	6918      	ldr	r0, [r3, #16]
 800d0aa:	f7ff fd2b 	bl	800cb04 <__hi0bits>
 800d0ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d0b2:	e7df      	b.n	800d074 <__d2b+0x70>
 800d0b4:	0800fab7 	.word	0x0800fab7
 800d0b8:	0800fb28 	.word	0x0800fb28

0800d0bc <_calloc_r>:
 800d0bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0be:	fba1 2402 	umull	r2, r4, r1, r2
 800d0c2:	b94c      	cbnz	r4, 800d0d8 <_calloc_r+0x1c>
 800d0c4:	4611      	mov	r1, r2
 800d0c6:	9201      	str	r2, [sp, #4]
 800d0c8:	f7fd fd8c 	bl	800abe4 <_malloc_r>
 800d0cc:	9a01      	ldr	r2, [sp, #4]
 800d0ce:	4605      	mov	r5, r0
 800d0d0:	b930      	cbnz	r0, 800d0e0 <_calloc_r+0x24>
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	b003      	add	sp, #12
 800d0d6:	bd30      	pop	{r4, r5, pc}
 800d0d8:	220c      	movs	r2, #12
 800d0da:	6002      	str	r2, [r0, #0]
 800d0dc:	2500      	movs	r5, #0
 800d0de:	e7f8      	b.n	800d0d2 <_calloc_r+0x16>
 800d0e0:	4621      	mov	r1, r4
 800d0e2:	f7fd fd0b 	bl	800aafc <memset>
 800d0e6:	e7f4      	b.n	800d0d2 <_calloc_r+0x16>

0800d0e8 <__sfputc_r>:
 800d0e8:	6893      	ldr	r3, [r2, #8]
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	b410      	push	{r4}
 800d0f0:	6093      	str	r3, [r2, #8]
 800d0f2:	da08      	bge.n	800d106 <__sfputc_r+0x1e>
 800d0f4:	6994      	ldr	r4, [r2, #24]
 800d0f6:	42a3      	cmp	r3, r4
 800d0f8:	db01      	blt.n	800d0fe <__sfputc_r+0x16>
 800d0fa:	290a      	cmp	r1, #10
 800d0fc:	d103      	bne.n	800d106 <__sfputc_r+0x1e>
 800d0fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d102:	f7fe baeb 	b.w	800b6dc <__swbuf_r>
 800d106:	6813      	ldr	r3, [r2, #0]
 800d108:	1c58      	adds	r0, r3, #1
 800d10a:	6010      	str	r0, [r2, #0]
 800d10c:	7019      	strb	r1, [r3, #0]
 800d10e:	4608      	mov	r0, r1
 800d110:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <__sfputs_r>:
 800d116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d118:	4606      	mov	r6, r0
 800d11a:	460f      	mov	r7, r1
 800d11c:	4614      	mov	r4, r2
 800d11e:	18d5      	adds	r5, r2, r3
 800d120:	42ac      	cmp	r4, r5
 800d122:	d101      	bne.n	800d128 <__sfputs_r+0x12>
 800d124:	2000      	movs	r0, #0
 800d126:	e007      	b.n	800d138 <__sfputs_r+0x22>
 800d128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d12c:	463a      	mov	r2, r7
 800d12e:	4630      	mov	r0, r6
 800d130:	f7ff ffda 	bl	800d0e8 <__sfputc_r>
 800d134:	1c43      	adds	r3, r0, #1
 800d136:	d1f3      	bne.n	800d120 <__sfputs_r+0xa>
 800d138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d13c <_vfiprintf_r>:
 800d13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d140:	460d      	mov	r5, r1
 800d142:	b09d      	sub	sp, #116	; 0x74
 800d144:	4614      	mov	r4, r2
 800d146:	4698      	mov	r8, r3
 800d148:	4606      	mov	r6, r0
 800d14a:	b118      	cbz	r0, 800d154 <_vfiprintf_r+0x18>
 800d14c:	6983      	ldr	r3, [r0, #24]
 800d14e:	b90b      	cbnz	r3, 800d154 <_vfiprintf_r+0x18>
 800d150:	f7ff fb1a 	bl	800c788 <__sinit>
 800d154:	4b89      	ldr	r3, [pc, #548]	; (800d37c <_vfiprintf_r+0x240>)
 800d156:	429d      	cmp	r5, r3
 800d158:	d11b      	bne.n	800d192 <_vfiprintf_r+0x56>
 800d15a:	6875      	ldr	r5, [r6, #4]
 800d15c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d15e:	07d9      	lsls	r1, r3, #31
 800d160:	d405      	bmi.n	800d16e <_vfiprintf_r+0x32>
 800d162:	89ab      	ldrh	r3, [r5, #12]
 800d164:	059a      	lsls	r2, r3, #22
 800d166:	d402      	bmi.n	800d16e <_vfiprintf_r+0x32>
 800d168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d16a:	f7ff fbb0 	bl	800c8ce <__retarget_lock_acquire_recursive>
 800d16e:	89ab      	ldrh	r3, [r5, #12]
 800d170:	071b      	lsls	r3, r3, #28
 800d172:	d501      	bpl.n	800d178 <_vfiprintf_r+0x3c>
 800d174:	692b      	ldr	r3, [r5, #16]
 800d176:	b9eb      	cbnz	r3, 800d1b4 <_vfiprintf_r+0x78>
 800d178:	4629      	mov	r1, r5
 800d17a:	4630      	mov	r0, r6
 800d17c:	f7fe fb00 	bl	800b780 <__swsetup_r>
 800d180:	b1c0      	cbz	r0, 800d1b4 <_vfiprintf_r+0x78>
 800d182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d184:	07dc      	lsls	r4, r3, #31
 800d186:	d50e      	bpl.n	800d1a6 <_vfiprintf_r+0x6a>
 800d188:	f04f 30ff 	mov.w	r0, #4294967295
 800d18c:	b01d      	add	sp, #116	; 0x74
 800d18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d192:	4b7b      	ldr	r3, [pc, #492]	; (800d380 <_vfiprintf_r+0x244>)
 800d194:	429d      	cmp	r5, r3
 800d196:	d101      	bne.n	800d19c <_vfiprintf_r+0x60>
 800d198:	68b5      	ldr	r5, [r6, #8]
 800d19a:	e7df      	b.n	800d15c <_vfiprintf_r+0x20>
 800d19c:	4b79      	ldr	r3, [pc, #484]	; (800d384 <_vfiprintf_r+0x248>)
 800d19e:	429d      	cmp	r5, r3
 800d1a0:	bf08      	it	eq
 800d1a2:	68f5      	ldreq	r5, [r6, #12]
 800d1a4:	e7da      	b.n	800d15c <_vfiprintf_r+0x20>
 800d1a6:	89ab      	ldrh	r3, [r5, #12]
 800d1a8:	0598      	lsls	r0, r3, #22
 800d1aa:	d4ed      	bmi.n	800d188 <_vfiprintf_r+0x4c>
 800d1ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1ae:	f7ff fb8f 	bl	800c8d0 <__retarget_lock_release_recursive>
 800d1b2:	e7e9      	b.n	800d188 <_vfiprintf_r+0x4c>
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d1b8:	2320      	movs	r3, #32
 800d1ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1be:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1c2:	2330      	movs	r3, #48	; 0x30
 800d1c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d388 <_vfiprintf_r+0x24c>
 800d1c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1cc:	f04f 0901 	mov.w	r9, #1
 800d1d0:	4623      	mov	r3, r4
 800d1d2:	469a      	mov	sl, r3
 800d1d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1d8:	b10a      	cbz	r2, 800d1de <_vfiprintf_r+0xa2>
 800d1da:	2a25      	cmp	r2, #37	; 0x25
 800d1dc:	d1f9      	bne.n	800d1d2 <_vfiprintf_r+0x96>
 800d1de:	ebba 0b04 	subs.w	fp, sl, r4
 800d1e2:	d00b      	beq.n	800d1fc <_vfiprintf_r+0xc0>
 800d1e4:	465b      	mov	r3, fp
 800d1e6:	4622      	mov	r2, r4
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	f7ff ff93 	bl	800d116 <__sfputs_r>
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	f000 80aa 	beq.w	800d34a <_vfiprintf_r+0x20e>
 800d1f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1f8:	445a      	add	r2, fp
 800d1fa:	9209      	str	r2, [sp, #36]	; 0x24
 800d1fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d200:	2b00      	cmp	r3, #0
 800d202:	f000 80a2 	beq.w	800d34a <_vfiprintf_r+0x20e>
 800d206:	2300      	movs	r3, #0
 800d208:	f04f 32ff 	mov.w	r2, #4294967295
 800d20c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d210:	f10a 0a01 	add.w	sl, sl, #1
 800d214:	9304      	str	r3, [sp, #16]
 800d216:	9307      	str	r3, [sp, #28]
 800d218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d21c:	931a      	str	r3, [sp, #104]	; 0x68
 800d21e:	4654      	mov	r4, sl
 800d220:	2205      	movs	r2, #5
 800d222:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d226:	4858      	ldr	r0, [pc, #352]	; (800d388 <_vfiprintf_r+0x24c>)
 800d228:	f7f2 ffda 	bl	80001e0 <memchr>
 800d22c:	9a04      	ldr	r2, [sp, #16]
 800d22e:	b9d8      	cbnz	r0, 800d268 <_vfiprintf_r+0x12c>
 800d230:	06d1      	lsls	r1, r2, #27
 800d232:	bf44      	itt	mi
 800d234:	2320      	movmi	r3, #32
 800d236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d23a:	0713      	lsls	r3, r2, #28
 800d23c:	bf44      	itt	mi
 800d23e:	232b      	movmi	r3, #43	; 0x2b
 800d240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d244:	f89a 3000 	ldrb.w	r3, [sl]
 800d248:	2b2a      	cmp	r3, #42	; 0x2a
 800d24a:	d015      	beq.n	800d278 <_vfiprintf_r+0x13c>
 800d24c:	9a07      	ldr	r2, [sp, #28]
 800d24e:	4654      	mov	r4, sl
 800d250:	2000      	movs	r0, #0
 800d252:	f04f 0c0a 	mov.w	ip, #10
 800d256:	4621      	mov	r1, r4
 800d258:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d25c:	3b30      	subs	r3, #48	; 0x30
 800d25e:	2b09      	cmp	r3, #9
 800d260:	d94e      	bls.n	800d300 <_vfiprintf_r+0x1c4>
 800d262:	b1b0      	cbz	r0, 800d292 <_vfiprintf_r+0x156>
 800d264:	9207      	str	r2, [sp, #28]
 800d266:	e014      	b.n	800d292 <_vfiprintf_r+0x156>
 800d268:	eba0 0308 	sub.w	r3, r0, r8
 800d26c:	fa09 f303 	lsl.w	r3, r9, r3
 800d270:	4313      	orrs	r3, r2
 800d272:	9304      	str	r3, [sp, #16]
 800d274:	46a2      	mov	sl, r4
 800d276:	e7d2      	b.n	800d21e <_vfiprintf_r+0xe2>
 800d278:	9b03      	ldr	r3, [sp, #12]
 800d27a:	1d19      	adds	r1, r3, #4
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	9103      	str	r1, [sp, #12]
 800d280:	2b00      	cmp	r3, #0
 800d282:	bfbb      	ittet	lt
 800d284:	425b      	neglt	r3, r3
 800d286:	f042 0202 	orrlt.w	r2, r2, #2
 800d28a:	9307      	strge	r3, [sp, #28]
 800d28c:	9307      	strlt	r3, [sp, #28]
 800d28e:	bfb8      	it	lt
 800d290:	9204      	strlt	r2, [sp, #16]
 800d292:	7823      	ldrb	r3, [r4, #0]
 800d294:	2b2e      	cmp	r3, #46	; 0x2e
 800d296:	d10c      	bne.n	800d2b2 <_vfiprintf_r+0x176>
 800d298:	7863      	ldrb	r3, [r4, #1]
 800d29a:	2b2a      	cmp	r3, #42	; 0x2a
 800d29c:	d135      	bne.n	800d30a <_vfiprintf_r+0x1ce>
 800d29e:	9b03      	ldr	r3, [sp, #12]
 800d2a0:	1d1a      	adds	r2, r3, #4
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	9203      	str	r2, [sp, #12]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	bfb8      	it	lt
 800d2aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2ae:	3402      	adds	r4, #2
 800d2b0:	9305      	str	r3, [sp, #20]
 800d2b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d398 <_vfiprintf_r+0x25c>
 800d2b6:	7821      	ldrb	r1, [r4, #0]
 800d2b8:	2203      	movs	r2, #3
 800d2ba:	4650      	mov	r0, sl
 800d2bc:	f7f2 ff90 	bl	80001e0 <memchr>
 800d2c0:	b140      	cbz	r0, 800d2d4 <_vfiprintf_r+0x198>
 800d2c2:	2340      	movs	r3, #64	; 0x40
 800d2c4:	eba0 000a 	sub.w	r0, r0, sl
 800d2c8:	fa03 f000 	lsl.w	r0, r3, r0
 800d2cc:	9b04      	ldr	r3, [sp, #16]
 800d2ce:	4303      	orrs	r3, r0
 800d2d0:	3401      	adds	r4, #1
 800d2d2:	9304      	str	r3, [sp, #16]
 800d2d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2d8:	482c      	ldr	r0, [pc, #176]	; (800d38c <_vfiprintf_r+0x250>)
 800d2da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2de:	2206      	movs	r2, #6
 800d2e0:	f7f2 ff7e 	bl	80001e0 <memchr>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d03f      	beq.n	800d368 <_vfiprintf_r+0x22c>
 800d2e8:	4b29      	ldr	r3, [pc, #164]	; (800d390 <_vfiprintf_r+0x254>)
 800d2ea:	bb1b      	cbnz	r3, 800d334 <_vfiprintf_r+0x1f8>
 800d2ec:	9b03      	ldr	r3, [sp, #12]
 800d2ee:	3307      	adds	r3, #7
 800d2f0:	f023 0307 	bic.w	r3, r3, #7
 800d2f4:	3308      	adds	r3, #8
 800d2f6:	9303      	str	r3, [sp, #12]
 800d2f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2fa:	443b      	add	r3, r7
 800d2fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d2fe:	e767      	b.n	800d1d0 <_vfiprintf_r+0x94>
 800d300:	fb0c 3202 	mla	r2, ip, r2, r3
 800d304:	460c      	mov	r4, r1
 800d306:	2001      	movs	r0, #1
 800d308:	e7a5      	b.n	800d256 <_vfiprintf_r+0x11a>
 800d30a:	2300      	movs	r3, #0
 800d30c:	3401      	adds	r4, #1
 800d30e:	9305      	str	r3, [sp, #20]
 800d310:	4619      	mov	r1, r3
 800d312:	f04f 0c0a 	mov.w	ip, #10
 800d316:	4620      	mov	r0, r4
 800d318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d31c:	3a30      	subs	r2, #48	; 0x30
 800d31e:	2a09      	cmp	r2, #9
 800d320:	d903      	bls.n	800d32a <_vfiprintf_r+0x1ee>
 800d322:	2b00      	cmp	r3, #0
 800d324:	d0c5      	beq.n	800d2b2 <_vfiprintf_r+0x176>
 800d326:	9105      	str	r1, [sp, #20]
 800d328:	e7c3      	b.n	800d2b2 <_vfiprintf_r+0x176>
 800d32a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d32e:	4604      	mov	r4, r0
 800d330:	2301      	movs	r3, #1
 800d332:	e7f0      	b.n	800d316 <_vfiprintf_r+0x1da>
 800d334:	ab03      	add	r3, sp, #12
 800d336:	9300      	str	r3, [sp, #0]
 800d338:	462a      	mov	r2, r5
 800d33a:	4b16      	ldr	r3, [pc, #88]	; (800d394 <_vfiprintf_r+0x258>)
 800d33c:	a904      	add	r1, sp, #16
 800d33e:	4630      	mov	r0, r6
 800d340:	f7fd fd64 	bl	800ae0c <_printf_float>
 800d344:	4607      	mov	r7, r0
 800d346:	1c78      	adds	r0, r7, #1
 800d348:	d1d6      	bne.n	800d2f8 <_vfiprintf_r+0x1bc>
 800d34a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d34c:	07d9      	lsls	r1, r3, #31
 800d34e:	d405      	bmi.n	800d35c <_vfiprintf_r+0x220>
 800d350:	89ab      	ldrh	r3, [r5, #12]
 800d352:	059a      	lsls	r2, r3, #22
 800d354:	d402      	bmi.n	800d35c <_vfiprintf_r+0x220>
 800d356:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d358:	f7ff faba 	bl	800c8d0 <__retarget_lock_release_recursive>
 800d35c:	89ab      	ldrh	r3, [r5, #12]
 800d35e:	065b      	lsls	r3, r3, #25
 800d360:	f53f af12 	bmi.w	800d188 <_vfiprintf_r+0x4c>
 800d364:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d366:	e711      	b.n	800d18c <_vfiprintf_r+0x50>
 800d368:	ab03      	add	r3, sp, #12
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	462a      	mov	r2, r5
 800d36e:	4b09      	ldr	r3, [pc, #36]	; (800d394 <_vfiprintf_r+0x258>)
 800d370:	a904      	add	r1, sp, #16
 800d372:	4630      	mov	r0, r6
 800d374:	f7fd ffee 	bl	800b354 <_printf_i>
 800d378:	e7e4      	b.n	800d344 <_vfiprintf_r+0x208>
 800d37a:	bf00      	nop
 800d37c:	0800fae8 	.word	0x0800fae8
 800d380:	0800fb08 	.word	0x0800fb08
 800d384:	0800fac8 	.word	0x0800fac8
 800d388:	0800fc84 	.word	0x0800fc84
 800d38c:	0800fc8e 	.word	0x0800fc8e
 800d390:	0800ae0d 	.word	0x0800ae0d
 800d394:	0800d117 	.word	0x0800d117
 800d398:	0800fc8a 	.word	0x0800fc8a

0800d39c <__sread>:
 800d39c:	b510      	push	{r4, lr}
 800d39e:	460c      	mov	r4, r1
 800d3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3a4:	f000 f8d6 	bl	800d554 <_read_r>
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	bfab      	itete	ge
 800d3ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d3ae:	89a3      	ldrhlt	r3, [r4, #12]
 800d3b0:	181b      	addge	r3, r3, r0
 800d3b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d3b6:	bfac      	ite	ge
 800d3b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d3ba:	81a3      	strhlt	r3, [r4, #12]
 800d3bc:	bd10      	pop	{r4, pc}

0800d3be <__swrite>:
 800d3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c2:	461f      	mov	r7, r3
 800d3c4:	898b      	ldrh	r3, [r1, #12]
 800d3c6:	05db      	lsls	r3, r3, #23
 800d3c8:	4605      	mov	r5, r0
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	4616      	mov	r6, r2
 800d3ce:	d505      	bpl.n	800d3dc <__swrite+0x1e>
 800d3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3d4:	2302      	movs	r3, #2
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f000 f898 	bl	800d50c <_lseek_r>
 800d3dc:	89a3      	ldrh	r3, [r4, #12]
 800d3de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3e6:	81a3      	strh	r3, [r4, #12]
 800d3e8:	4632      	mov	r2, r6
 800d3ea:	463b      	mov	r3, r7
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f2:	f000 b817 	b.w	800d424 <_write_r>

0800d3f6 <__sseek>:
 800d3f6:	b510      	push	{r4, lr}
 800d3f8:	460c      	mov	r4, r1
 800d3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3fe:	f000 f885 	bl	800d50c <_lseek_r>
 800d402:	1c43      	adds	r3, r0, #1
 800d404:	89a3      	ldrh	r3, [r4, #12]
 800d406:	bf15      	itete	ne
 800d408:	6560      	strne	r0, [r4, #84]	; 0x54
 800d40a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d40e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d412:	81a3      	strheq	r3, [r4, #12]
 800d414:	bf18      	it	ne
 800d416:	81a3      	strhne	r3, [r4, #12]
 800d418:	bd10      	pop	{r4, pc}

0800d41a <__sclose>:
 800d41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d41e:	f000 b831 	b.w	800d484 <_close_r>
	...

0800d424 <_write_r>:
 800d424:	b538      	push	{r3, r4, r5, lr}
 800d426:	4d07      	ldr	r5, [pc, #28]	; (800d444 <_write_r+0x20>)
 800d428:	4604      	mov	r4, r0
 800d42a:	4608      	mov	r0, r1
 800d42c:	4611      	mov	r1, r2
 800d42e:	2200      	movs	r2, #0
 800d430:	602a      	str	r2, [r5, #0]
 800d432:	461a      	mov	r2, r3
 800d434:	f7f9 fa92 	bl	800695c <_write>
 800d438:	1c43      	adds	r3, r0, #1
 800d43a:	d102      	bne.n	800d442 <_write_r+0x1e>
 800d43c:	682b      	ldr	r3, [r5, #0]
 800d43e:	b103      	cbz	r3, 800d442 <_write_r+0x1e>
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	bd38      	pop	{r3, r4, r5, pc}
 800d444:	200019b0 	.word	0x200019b0

0800d448 <__assert_func>:
 800d448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d44a:	4614      	mov	r4, r2
 800d44c:	461a      	mov	r2, r3
 800d44e:	4b09      	ldr	r3, [pc, #36]	; (800d474 <__assert_func+0x2c>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4605      	mov	r5, r0
 800d454:	68d8      	ldr	r0, [r3, #12]
 800d456:	b14c      	cbz	r4, 800d46c <__assert_func+0x24>
 800d458:	4b07      	ldr	r3, [pc, #28]	; (800d478 <__assert_func+0x30>)
 800d45a:	9100      	str	r1, [sp, #0]
 800d45c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d460:	4906      	ldr	r1, [pc, #24]	; (800d47c <__assert_func+0x34>)
 800d462:	462b      	mov	r3, r5
 800d464:	f000 f81e 	bl	800d4a4 <fiprintf>
 800d468:	f000 f893 	bl	800d592 <abort>
 800d46c:	4b04      	ldr	r3, [pc, #16]	; (800d480 <__assert_func+0x38>)
 800d46e:	461c      	mov	r4, r3
 800d470:	e7f3      	b.n	800d45a <__assert_func+0x12>
 800d472:	bf00      	nop
 800d474:	200008c4 	.word	0x200008c4
 800d478:	0800fc95 	.word	0x0800fc95
 800d47c:	0800fca2 	.word	0x0800fca2
 800d480:	0800fcd0 	.word	0x0800fcd0

0800d484 <_close_r>:
 800d484:	b538      	push	{r3, r4, r5, lr}
 800d486:	4d06      	ldr	r5, [pc, #24]	; (800d4a0 <_close_r+0x1c>)
 800d488:	2300      	movs	r3, #0
 800d48a:	4604      	mov	r4, r0
 800d48c:	4608      	mov	r0, r1
 800d48e:	602b      	str	r3, [r5, #0]
 800d490:	f000 f9fe 	bl	800d890 <_close>
 800d494:	1c43      	adds	r3, r0, #1
 800d496:	d102      	bne.n	800d49e <_close_r+0x1a>
 800d498:	682b      	ldr	r3, [r5, #0]
 800d49a:	b103      	cbz	r3, 800d49e <_close_r+0x1a>
 800d49c:	6023      	str	r3, [r4, #0]
 800d49e:	bd38      	pop	{r3, r4, r5, pc}
 800d4a0:	200019b0 	.word	0x200019b0

0800d4a4 <fiprintf>:
 800d4a4:	b40e      	push	{r1, r2, r3}
 800d4a6:	b503      	push	{r0, r1, lr}
 800d4a8:	4601      	mov	r1, r0
 800d4aa:	ab03      	add	r3, sp, #12
 800d4ac:	4805      	ldr	r0, [pc, #20]	; (800d4c4 <fiprintf+0x20>)
 800d4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4b2:	6800      	ldr	r0, [r0, #0]
 800d4b4:	9301      	str	r3, [sp, #4]
 800d4b6:	f7ff fe41 	bl	800d13c <_vfiprintf_r>
 800d4ba:	b002      	add	sp, #8
 800d4bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4c0:	b003      	add	sp, #12
 800d4c2:	4770      	bx	lr
 800d4c4:	200008c4 	.word	0x200008c4

0800d4c8 <_fstat_r>:
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	4d07      	ldr	r5, [pc, #28]	; (800d4e8 <_fstat_r+0x20>)
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	4608      	mov	r0, r1
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	602b      	str	r3, [r5, #0]
 800d4d6:	f000 f9e3 	bl	800d8a0 <_fstat>
 800d4da:	1c43      	adds	r3, r0, #1
 800d4dc:	d102      	bne.n	800d4e4 <_fstat_r+0x1c>
 800d4de:	682b      	ldr	r3, [r5, #0]
 800d4e0:	b103      	cbz	r3, 800d4e4 <_fstat_r+0x1c>
 800d4e2:	6023      	str	r3, [r4, #0]
 800d4e4:	bd38      	pop	{r3, r4, r5, pc}
 800d4e6:	bf00      	nop
 800d4e8:	200019b0 	.word	0x200019b0

0800d4ec <_isatty_r>:
 800d4ec:	b538      	push	{r3, r4, r5, lr}
 800d4ee:	4d06      	ldr	r5, [pc, #24]	; (800d508 <_isatty_r+0x1c>)
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	4608      	mov	r0, r1
 800d4f6:	602b      	str	r3, [r5, #0]
 800d4f8:	f000 f9e2 	bl	800d8c0 <_isatty>
 800d4fc:	1c43      	adds	r3, r0, #1
 800d4fe:	d102      	bne.n	800d506 <_isatty_r+0x1a>
 800d500:	682b      	ldr	r3, [r5, #0]
 800d502:	b103      	cbz	r3, 800d506 <_isatty_r+0x1a>
 800d504:	6023      	str	r3, [r4, #0]
 800d506:	bd38      	pop	{r3, r4, r5, pc}
 800d508:	200019b0 	.word	0x200019b0

0800d50c <_lseek_r>:
 800d50c:	b538      	push	{r3, r4, r5, lr}
 800d50e:	4d07      	ldr	r5, [pc, #28]	; (800d52c <_lseek_r+0x20>)
 800d510:	4604      	mov	r4, r0
 800d512:	4608      	mov	r0, r1
 800d514:	4611      	mov	r1, r2
 800d516:	2200      	movs	r2, #0
 800d518:	602a      	str	r2, [r5, #0]
 800d51a:	461a      	mov	r2, r3
 800d51c:	f000 f9e0 	bl	800d8e0 <_lseek>
 800d520:	1c43      	adds	r3, r0, #1
 800d522:	d102      	bne.n	800d52a <_lseek_r+0x1e>
 800d524:	682b      	ldr	r3, [r5, #0]
 800d526:	b103      	cbz	r3, 800d52a <_lseek_r+0x1e>
 800d528:	6023      	str	r3, [r4, #0]
 800d52a:	bd38      	pop	{r3, r4, r5, pc}
 800d52c:	200019b0 	.word	0x200019b0

0800d530 <__ascii_mbtowc>:
 800d530:	b082      	sub	sp, #8
 800d532:	b901      	cbnz	r1, 800d536 <__ascii_mbtowc+0x6>
 800d534:	a901      	add	r1, sp, #4
 800d536:	b142      	cbz	r2, 800d54a <__ascii_mbtowc+0x1a>
 800d538:	b14b      	cbz	r3, 800d54e <__ascii_mbtowc+0x1e>
 800d53a:	7813      	ldrb	r3, [r2, #0]
 800d53c:	600b      	str	r3, [r1, #0]
 800d53e:	7812      	ldrb	r2, [r2, #0]
 800d540:	1e10      	subs	r0, r2, #0
 800d542:	bf18      	it	ne
 800d544:	2001      	movne	r0, #1
 800d546:	b002      	add	sp, #8
 800d548:	4770      	bx	lr
 800d54a:	4610      	mov	r0, r2
 800d54c:	e7fb      	b.n	800d546 <__ascii_mbtowc+0x16>
 800d54e:	f06f 0001 	mvn.w	r0, #1
 800d552:	e7f8      	b.n	800d546 <__ascii_mbtowc+0x16>

0800d554 <_read_r>:
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	4d07      	ldr	r5, [pc, #28]	; (800d574 <_read_r+0x20>)
 800d558:	4604      	mov	r4, r0
 800d55a:	4608      	mov	r0, r1
 800d55c:	4611      	mov	r1, r2
 800d55e:	2200      	movs	r2, #0
 800d560:	602a      	str	r2, [r5, #0]
 800d562:	461a      	mov	r2, r3
 800d564:	f000 f9c4 	bl	800d8f0 <_read>
 800d568:	1c43      	adds	r3, r0, #1
 800d56a:	d102      	bne.n	800d572 <_read_r+0x1e>
 800d56c:	682b      	ldr	r3, [r5, #0]
 800d56e:	b103      	cbz	r3, 800d572 <_read_r+0x1e>
 800d570:	6023      	str	r3, [r4, #0]
 800d572:	bd38      	pop	{r3, r4, r5, pc}
 800d574:	200019b0 	.word	0x200019b0

0800d578 <__ascii_wctomb>:
 800d578:	b149      	cbz	r1, 800d58e <__ascii_wctomb+0x16>
 800d57a:	2aff      	cmp	r2, #255	; 0xff
 800d57c:	bf85      	ittet	hi
 800d57e:	238a      	movhi	r3, #138	; 0x8a
 800d580:	6003      	strhi	r3, [r0, #0]
 800d582:	700a      	strbls	r2, [r1, #0]
 800d584:	f04f 30ff 	movhi.w	r0, #4294967295
 800d588:	bf98      	it	ls
 800d58a:	2001      	movls	r0, #1
 800d58c:	4770      	bx	lr
 800d58e:	4608      	mov	r0, r1
 800d590:	4770      	bx	lr

0800d592 <abort>:
 800d592:	b508      	push	{r3, lr}
 800d594:	2006      	movs	r0, #6
 800d596:	f000 f82b 	bl	800d5f0 <raise>
 800d59a:	2001      	movs	r0, #1
 800d59c:	f000 f9b0 	bl	800d900 <_exit>

0800d5a0 <_raise_r>:
 800d5a0:	291f      	cmp	r1, #31
 800d5a2:	b538      	push	{r3, r4, r5, lr}
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	460d      	mov	r5, r1
 800d5a8:	d904      	bls.n	800d5b4 <_raise_r+0x14>
 800d5aa:	2316      	movs	r3, #22
 800d5ac:	6003      	str	r3, [r0, #0]
 800d5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b2:	bd38      	pop	{r3, r4, r5, pc}
 800d5b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d5b6:	b112      	cbz	r2, 800d5be <_raise_r+0x1e>
 800d5b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5bc:	b94b      	cbnz	r3, 800d5d2 <_raise_r+0x32>
 800d5be:	4620      	mov	r0, r4
 800d5c0:	f000 f830 	bl	800d624 <_getpid_r>
 800d5c4:	462a      	mov	r2, r5
 800d5c6:	4601      	mov	r1, r0
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5ce:	f000 b817 	b.w	800d600 <_kill_r>
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d00a      	beq.n	800d5ec <_raise_r+0x4c>
 800d5d6:	1c59      	adds	r1, r3, #1
 800d5d8:	d103      	bne.n	800d5e2 <_raise_r+0x42>
 800d5da:	2316      	movs	r3, #22
 800d5dc:	6003      	str	r3, [r0, #0]
 800d5de:	2001      	movs	r0, #1
 800d5e0:	e7e7      	b.n	800d5b2 <_raise_r+0x12>
 800d5e2:	2400      	movs	r4, #0
 800d5e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	4798      	blx	r3
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	e7e0      	b.n	800d5b2 <_raise_r+0x12>

0800d5f0 <raise>:
 800d5f0:	4b02      	ldr	r3, [pc, #8]	; (800d5fc <raise+0xc>)
 800d5f2:	4601      	mov	r1, r0
 800d5f4:	6818      	ldr	r0, [r3, #0]
 800d5f6:	f7ff bfd3 	b.w	800d5a0 <_raise_r>
 800d5fa:	bf00      	nop
 800d5fc:	200008c4 	.word	0x200008c4

0800d600 <_kill_r>:
 800d600:	b538      	push	{r3, r4, r5, lr}
 800d602:	4d07      	ldr	r5, [pc, #28]	; (800d620 <_kill_r+0x20>)
 800d604:	2300      	movs	r3, #0
 800d606:	4604      	mov	r4, r0
 800d608:	4608      	mov	r0, r1
 800d60a:	4611      	mov	r1, r2
 800d60c:	602b      	str	r3, [r5, #0]
 800d60e:	f000 f95f 	bl	800d8d0 <_kill>
 800d612:	1c43      	adds	r3, r0, #1
 800d614:	d102      	bne.n	800d61c <_kill_r+0x1c>
 800d616:	682b      	ldr	r3, [r5, #0]
 800d618:	b103      	cbz	r3, 800d61c <_kill_r+0x1c>
 800d61a:	6023      	str	r3, [r4, #0]
 800d61c:	bd38      	pop	{r3, r4, r5, pc}
 800d61e:	bf00      	nop
 800d620:	200019b0 	.word	0x200019b0

0800d624 <_getpid_r>:
 800d624:	f000 b944 	b.w	800d8b0 <_getpid>

0800d628 <expf>:
 800d628:	b508      	push	{r3, lr}
 800d62a:	ed2d 8b02 	vpush	{d8}
 800d62e:	eef0 8a40 	vmov.f32	s17, s0
 800d632:	f000 f82f 	bl	800d694 <__ieee754_expf>
 800d636:	eeb0 8a40 	vmov.f32	s16, s0
 800d63a:	eeb0 0a68 	vmov.f32	s0, s17
 800d63e:	f000 f919 	bl	800d874 <finitef>
 800d642:	b160      	cbz	r0, 800d65e <expf+0x36>
 800d644:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800d684 <expf+0x5c>
 800d648:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d650:	dd0a      	ble.n	800d668 <expf+0x40>
 800d652:	f7fd fa13 	bl	800aa7c <__errno>
 800d656:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800d688 <expf+0x60>
 800d65a:	2322      	movs	r3, #34	; 0x22
 800d65c:	6003      	str	r3, [r0, #0]
 800d65e:	eeb0 0a48 	vmov.f32	s0, s16
 800d662:	ecbd 8b02 	vpop	{d8}
 800d666:	bd08      	pop	{r3, pc}
 800d668:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d68c <expf+0x64>
 800d66c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d674:	d5f3      	bpl.n	800d65e <expf+0x36>
 800d676:	f7fd fa01 	bl	800aa7c <__errno>
 800d67a:	2322      	movs	r3, #34	; 0x22
 800d67c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800d690 <expf+0x68>
 800d680:	6003      	str	r3, [r0, #0]
 800d682:	e7ec      	b.n	800d65e <expf+0x36>
 800d684:	42b17180 	.word	0x42b17180
 800d688:	7f800000 	.word	0x7f800000
 800d68c:	c2cff1b5 	.word	0xc2cff1b5
 800d690:	00000000 	.word	0x00000000

0800d694 <__ieee754_expf>:
 800d694:	ee10 2a10 	vmov	r2, s0
 800d698:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800d69c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d6a0:	d902      	bls.n	800d6a8 <__ieee754_expf+0x14>
 800d6a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d6a6:	4770      	bx	lr
 800d6a8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800d6ac:	d106      	bne.n	800d6bc <__ieee754_expf+0x28>
 800d6ae:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800d7e8 <__ieee754_expf+0x154>
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	bf18      	it	ne
 800d6b6:	eeb0 0a67 	vmovne.f32	s0, s15
 800d6ba:	4770      	bx	lr
 800d6bc:	484b      	ldr	r0, [pc, #300]	; (800d7ec <__ieee754_expf+0x158>)
 800d6be:	4282      	cmp	r2, r0
 800d6c0:	dd02      	ble.n	800d6c8 <__ieee754_expf+0x34>
 800d6c2:	2000      	movs	r0, #0
 800d6c4:	f000 b8d0 	b.w	800d868 <__math_oflowf>
 800d6c8:	2a00      	cmp	r2, #0
 800d6ca:	da05      	bge.n	800d6d8 <__ieee754_expf+0x44>
 800d6cc:	4a48      	ldr	r2, [pc, #288]	; (800d7f0 <__ieee754_expf+0x15c>)
 800d6ce:	4291      	cmp	r1, r2
 800d6d0:	d902      	bls.n	800d6d8 <__ieee754_expf+0x44>
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	f000 b8c2 	b.w	800d85c <__math_uflowf>
 800d6d8:	4a46      	ldr	r2, [pc, #280]	; (800d7f4 <__ieee754_expf+0x160>)
 800d6da:	4291      	cmp	r1, r2
 800d6dc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d6e0:	d952      	bls.n	800d788 <__ieee754_expf+0xf4>
 800d6e2:	4a45      	ldr	r2, [pc, #276]	; (800d7f8 <__ieee754_expf+0x164>)
 800d6e4:	4291      	cmp	r1, r2
 800d6e6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800d6ea:	d834      	bhi.n	800d756 <__ieee754_expf+0xc2>
 800d6ec:	4943      	ldr	r1, [pc, #268]	; (800d7fc <__ieee754_expf+0x168>)
 800d6ee:	4411      	add	r1, r2
 800d6f0:	ed91 7a00 	vldr	s14, [r1]
 800d6f4:	4942      	ldr	r1, [pc, #264]	; (800d800 <__ieee754_expf+0x16c>)
 800d6f6:	440a      	add	r2, r1
 800d6f8:	edd2 7a00 	vldr	s15, [r2]
 800d6fc:	ee30 7a47 	vsub.f32	s14, s0, s14
 800d700:	f1c3 0201 	rsb	r2, r3, #1
 800d704:	1ad2      	subs	r2, r2, r3
 800d706:	ee37 0a67 	vsub.f32	s0, s14, s15
 800d70a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800d70e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800d804 <__ieee754_expf+0x170>
 800d712:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d808 <__ieee754_expf+0x174>
 800d716:	eee6 6a05 	vfma.f32	s13, s12, s10
 800d71a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800d80c <__ieee754_expf+0x178>
 800d71e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800d722:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d810 <__ieee754_expf+0x17c>
 800d726:	eee5 6a06 	vfma.f32	s13, s10, s12
 800d72a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800d814 <__ieee754_expf+0x180>
 800d72e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800d732:	eef0 6a40 	vmov.f32	s13, s0
 800d736:	eee5 6a46 	vfms.f32	s13, s10, s12
 800d73a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800d73e:	ee20 5a26 	vmul.f32	s10, s0, s13
 800d742:	bb92      	cbnz	r2, 800d7aa <__ieee754_expf+0x116>
 800d744:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800d748:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800d74c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d750:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800d754:	4770      	bx	lr
 800d756:	4b30      	ldr	r3, [pc, #192]	; (800d818 <__ieee754_expf+0x184>)
 800d758:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800d81c <__ieee754_expf+0x188>
 800d75c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800d820 <__ieee754_expf+0x18c>
 800d760:	4413      	add	r3, r2
 800d762:	edd3 7a00 	vldr	s15, [r3]
 800d766:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d76a:	eeb0 7a40 	vmov.f32	s14, s0
 800d76e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d772:	ee17 2a90 	vmov	r2, s15
 800d776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d77a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d77e:	eddf 6a29 	vldr	s13, [pc, #164]	; 800d824 <__ieee754_expf+0x190>
 800d782:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d786:	e7be      	b.n	800d706 <__ieee754_expf+0x72>
 800d788:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800d78c:	d20b      	bcs.n	800d7a6 <__ieee754_expf+0x112>
 800d78e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800d828 <__ieee754_expf+0x194>
 800d792:	ee70 6a26 	vadd.f32	s13, s0, s13
 800d796:	eef4 6ae5 	vcmpe.f32	s13, s11
 800d79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79e:	dd02      	ble.n	800d7a6 <__ieee754_expf+0x112>
 800d7a0:	ee30 0a25 	vadd.f32	s0, s0, s11
 800d7a4:	4770      	bx	lr
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	e7af      	b.n	800d70a <__ieee754_expf+0x76>
 800d7aa:	ee76 6a66 	vsub.f32	s13, s12, s13
 800d7ae:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800d7b2:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800d7b6:	bfb8      	it	lt
 800d7b8:	3264      	addlt	r2, #100	; 0x64
 800d7ba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d7be:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d7c2:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800d7c6:	ee17 3a90 	vmov	r3, s15
 800d7ca:	bfab      	itete	ge
 800d7cc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800d7d0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800d7d4:	ee00 3a10 	vmovge	s0, r3
 800d7d8:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800d82c <__ieee754_expf+0x198>
 800d7dc:	bfbc      	itt	lt
 800d7de:	ee00 3a10 	vmovlt	s0, r3
 800d7e2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800d7e6:	4770      	bx	lr
 800d7e8:	00000000 	.word	0x00000000
 800d7ec:	42b17217 	.word	0x42b17217
 800d7f0:	42cff1b5 	.word	0x42cff1b5
 800d7f4:	3eb17218 	.word	0x3eb17218
 800d7f8:	3f851591 	.word	0x3f851591
 800d7fc:	0800fde4 	.word	0x0800fde4
 800d800:	0800fdec 	.word	0x0800fdec
 800d804:	3331bb4c 	.word	0x3331bb4c
 800d808:	b5ddea0e 	.word	0xb5ddea0e
 800d80c:	388ab355 	.word	0x388ab355
 800d810:	bb360b61 	.word	0xbb360b61
 800d814:	3e2aaaab 	.word	0x3e2aaaab
 800d818:	0800fddc 	.word	0x0800fddc
 800d81c:	3fb8aa3b 	.word	0x3fb8aa3b
 800d820:	3f317180 	.word	0x3f317180
 800d824:	3717f7d1 	.word	0x3717f7d1
 800d828:	7149f2ca 	.word	0x7149f2ca
 800d82c:	0d800000 	.word	0x0d800000

0800d830 <with_errnof>:
 800d830:	b513      	push	{r0, r1, r4, lr}
 800d832:	4604      	mov	r4, r0
 800d834:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d838:	f7fd f920 	bl	800aa7c <__errno>
 800d83c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d840:	6004      	str	r4, [r0, #0]
 800d842:	b002      	add	sp, #8
 800d844:	bd10      	pop	{r4, pc}

0800d846 <xflowf>:
 800d846:	b130      	cbz	r0, 800d856 <xflowf+0x10>
 800d848:	eef1 7a40 	vneg.f32	s15, s0
 800d84c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d850:	2022      	movs	r0, #34	; 0x22
 800d852:	f7ff bfed 	b.w	800d830 <with_errnof>
 800d856:	eef0 7a40 	vmov.f32	s15, s0
 800d85a:	e7f7      	b.n	800d84c <xflowf+0x6>

0800d85c <__math_uflowf>:
 800d85c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d864 <__math_uflowf+0x8>
 800d860:	f7ff bff1 	b.w	800d846 <xflowf>
 800d864:	10000000 	.word	0x10000000

0800d868 <__math_oflowf>:
 800d868:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d870 <__math_oflowf+0x8>
 800d86c:	f7ff bfeb 	b.w	800d846 <xflowf>
 800d870:	70000000 	.word	0x70000000

0800d874 <finitef>:
 800d874:	b082      	sub	sp, #8
 800d876:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d87a:	9801      	ldr	r0, [sp, #4]
 800d87c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d880:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d884:	bfac      	ite	ge
 800d886:	2000      	movge	r0, #0
 800d888:	2001      	movlt	r0, #1
 800d88a:	b002      	add	sp, #8
 800d88c:	4770      	bx	lr
	...

0800d890 <_close>:
 800d890:	4b02      	ldr	r3, [pc, #8]	; (800d89c <_close+0xc>)
 800d892:	2258      	movs	r2, #88	; 0x58
 800d894:	601a      	str	r2, [r3, #0]
 800d896:	f04f 30ff 	mov.w	r0, #4294967295
 800d89a:	4770      	bx	lr
 800d89c:	200019b0 	.word	0x200019b0

0800d8a0 <_fstat>:
 800d8a0:	4b02      	ldr	r3, [pc, #8]	; (800d8ac <_fstat+0xc>)
 800d8a2:	2258      	movs	r2, #88	; 0x58
 800d8a4:	601a      	str	r2, [r3, #0]
 800d8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8aa:	4770      	bx	lr
 800d8ac:	200019b0 	.word	0x200019b0

0800d8b0 <_getpid>:
 800d8b0:	4b02      	ldr	r3, [pc, #8]	; (800d8bc <_getpid+0xc>)
 800d8b2:	2258      	movs	r2, #88	; 0x58
 800d8b4:	601a      	str	r2, [r3, #0]
 800d8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ba:	4770      	bx	lr
 800d8bc:	200019b0 	.word	0x200019b0

0800d8c0 <_isatty>:
 800d8c0:	4b02      	ldr	r3, [pc, #8]	; (800d8cc <_isatty+0xc>)
 800d8c2:	2258      	movs	r2, #88	; 0x58
 800d8c4:	601a      	str	r2, [r3, #0]
 800d8c6:	2000      	movs	r0, #0
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop
 800d8cc:	200019b0 	.word	0x200019b0

0800d8d0 <_kill>:
 800d8d0:	4b02      	ldr	r3, [pc, #8]	; (800d8dc <_kill+0xc>)
 800d8d2:	2258      	movs	r2, #88	; 0x58
 800d8d4:	601a      	str	r2, [r3, #0]
 800d8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8da:	4770      	bx	lr
 800d8dc:	200019b0 	.word	0x200019b0

0800d8e0 <_lseek>:
 800d8e0:	4b02      	ldr	r3, [pc, #8]	; (800d8ec <_lseek+0xc>)
 800d8e2:	2258      	movs	r2, #88	; 0x58
 800d8e4:	601a      	str	r2, [r3, #0]
 800d8e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ea:	4770      	bx	lr
 800d8ec:	200019b0 	.word	0x200019b0

0800d8f0 <_read>:
 800d8f0:	4b02      	ldr	r3, [pc, #8]	; (800d8fc <_read+0xc>)
 800d8f2:	2258      	movs	r2, #88	; 0x58
 800d8f4:	601a      	str	r2, [r3, #0]
 800d8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8fa:	4770      	bx	lr
 800d8fc:	200019b0 	.word	0x200019b0

0800d900 <_exit>:
 800d900:	e7fe      	b.n	800d900 <_exit>
	...

0800d904 <_init>:
 800d904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d906:	bf00      	nop
 800d908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d90a:	bc08      	pop	{r3}
 800d90c:	469e      	mov	lr, r3
 800d90e:	4770      	bx	lr

0800d910 <_fini>:
 800d910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d912:	bf00      	nop
 800d914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d916:	bc08      	pop	{r3}
 800d918:	469e      	mov	lr, r3
 800d91a:	4770      	bx	lr
