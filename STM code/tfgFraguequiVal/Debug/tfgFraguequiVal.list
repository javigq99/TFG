
tfgFraguequiVal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003244  0800c560  0800c560  0001c560  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7a4  0800f7a4  00020ac4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7a4  0800f7a4  0001f7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7ac  0800f7ac  00020ac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7ac  0800f7ac  0001f7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7b0  0800f7b0  0001f7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ac4  20000000  0800f7b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b40  20000ae0  08010278  00020ae0  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20001620  08010278  00021620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020ac4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dcd2  00000000  00000000  00020af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c92  00000000  00000000  0003e7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00043458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  00044230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b816  00000000  00000000  000457f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d91  00000000  00000000  00071006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe12a  00000000  00000000  00089d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  00187ec1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003998  00000000  00000000  00187f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000eba0  00000000  00000000  0018b924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000b4  00000000  00000000  0019a4c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000183  00000000  00000000  0019a578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000ae0 	.word	0x20000ae0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c534 	.word	0x0800c534

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000ae4 	.word	0x20000ae4
 80001cc:	0800c534 	.word	0x0800c534

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	; 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_uldivmod>:
 8000dc4:	b953      	cbnz	r3, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc6:	b94a      	cbnz	r2, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	bf08      	it	eq
 8000dcc:	2800      	cmpeq	r0, #0
 8000dce:	bf1c      	itt	ne
 8000dd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd8:	f000 b974 	b.w	80010c4 <__aeabi_idiv0>
 8000ddc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000de0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de4:	f000 f806 	bl	8000df4 <__udivmoddi4>
 8000de8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df0:	b004      	add	sp, #16
 8000df2:	4770      	bx	lr

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b500      	push	{lr}
 80010ca:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010cc:	2244      	movs	r2, #68	; 0x44
 80010ce:	2100      	movs	r1, #0
 80010d0:	a805      	add	r0, sp, #20
 80010d2:	f008 fb17 	bl	8009704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d6:	2214      	movs	r2, #20
 80010d8:	2100      	movs	r1, #0
 80010da:	4668      	mov	r0, sp
 80010dc:	f008 fb12 	bl	8009704 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010e4:	f000 fd1c 	bl	8001b20 <HAL_PWREx_ControlVoltageScaling>
 80010e8:	b108      	cbz	r0, 80010ee <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ea:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	e7fe      	b.n	80010ec <SystemClock_Config+0x24>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010ee:	2310      	movs	r3, #16
 80010f0:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010f2:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010f4:	2201      	movs	r2, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010f6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f8:	2302      	movs	r3, #2
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010fa:	e9cd 200b 	strd	r2, r0, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010fe:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001102:	2028      	movs	r0, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001104:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001106:	2207      	movs	r2, #7
 8001108:	e9cd 0212 	strd	r0, r2, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800110e:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001112:	f000 fdcb 	bl	8001cac <HAL_RCC_OscConfig>
 8001116:	b108      	cbz	r0, 800111c <SystemClock_Config+0x54>
 8001118:	b672      	cpsid	i
  while (1)
 800111a:	e7fe      	b.n	800111a <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800111c:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001120:	220f      	movs	r2, #15
 8001122:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001124:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001126:	2104      	movs	r1, #4
 8001128:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800112e:	f001 f83d 	bl	80021ac <HAL_RCC_ClockConfig>
 8001132:	b108      	cbz	r0, 8001138 <SystemClock_Config+0x70>
 8001134:	b672      	cpsid	i
  while (1)
 8001136:	e7fe      	b.n	8001136 <SystemClock_Config+0x6e>
}
 8001138:	b017      	add	sp, #92	; 0x5c
 800113a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001140 <main>:
{
 8001140:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001144:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8001146:	f000 fae7 	bl	8001718 <HAL_Init>
  SystemClock_Config();
 800114a:	f7ff ffbd 	bl	80010c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	2214      	movs	r2, #20
 8001150:	2100      	movs	r1, #0
 8001152:	eb0d 0002 	add.w	r0, sp, r2
 8001156:	f008 fad5 	bl	8009704 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800115a:	4bc9      	ldr	r3, [pc, #804]	; (8001480 <main+0x340>)
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800115c:	48c9      	ldr	r0, [pc, #804]	; (8001484 <main+0x344>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800115e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001160:	f042 0210 	orr.w	r2, r2, #16
 8001164:	64da      	str	r2, [r3, #76]	; 0x4c
 8001166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001168:	f002 0210 	and.w	r2, r2, #16
 800116c:	9200      	str	r2, [sp, #0]
 800116e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001170:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001172:	f042 0204 	orr.w	r2, r2, #4
 8001176:	64da      	str	r2, [r3, #76]	; 0x4c
 8001178:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800117a:	f002 0204 	and.w	r2, r2, #4
 800117e:	9201      	str	r2, [sp, #4]
 8001180:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001184:	f042 0201 	orr.w	r2, r2, #1
 8001188:	64da      	str	r2, [r3, #76]	; 0x4c
 800118a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800118c:	f002 0201 	and.w	r2, r2, #1
 8001190:	9202      	str	r2, [sp, #8]
 8001192:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001196:	f042 0202 	orr.w	r2, r2, #2
 800119a:	64da      	str	r2, [r3, #76]	; 0x4c
 800119c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800119e:	f002 0202 	and.w	r2, r2, #2
 80011a2:	9203      	str	r2, [sp, #12]
 80011a4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011a8:	f042 0208 	orr.w	r2, r2, #8
 80011ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 718a 	mov.w	r1, #276	; 0x114
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011bc:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80011be:	f000 fc95 	bl	8001aec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f248 1104 	movw	r1, #33028	; 0x8104
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011cc:	f000 fc8e 	bl	8001aec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80011d0:	48ad      	ldr	r0, [pc, #692]	; (8001488 <main+0x348>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f24f 0114 	movw	r1, #61460	; 0xf014
 80011d8:	f000 fc88 	bl	8001aec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80011dc:	48ab      	ldr	r0, [pc, #684]	; (800148c <main+0x34c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	f241 0181 	movw	r1, #4225	; 0x1081
 80011e4:	f000 fc82 	bl	8001aec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80011e8:	48a8      	ldr	r0, [pc, #672]	; (800148c <main+0x34c>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f0:	f000 fc7c 	bl	8001aec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80011f4:	48a6      	ldr	r0, [pc, #664]	; (8001490 <main+0x350>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80011fc:	f000 fc76 	bl	8001aec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001200:	48a1      	ldr	r0, [pc, #644]	; (8001488 <main+0x348>)
 8001202:	2201      	movs	r2, #1
 8001204:	2120      	movs	r1, #32
 8001206:	f000 fc71 	bl	8001aec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	4611      	mov	r1, r2
 800120e:	489d      	ldr	r0, [pc, #628]	; (8001484 <main+0x344>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001212:	f000 fc6b 	bl	8001aec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2701      	movs	r7, #1
 8001218:	f240 1315 	movw	r3, #277	; 0x115
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800121c:	4899      	ldr	r0, [pc, #612]	; (8001484 <main+0x344>)
 800121e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001220:	f44f 1888 	mov.w	r8, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122c:	f000 fb80 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001230:	236a      	movs	r3, #106	; 0x6a
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001232:	4894      	ldr	r0, [pc, #592]	; (8001484 <main+0x344>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001236:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001238:	e9cd 3805 	strd	r3, r8, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123c:	f000 fb78 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001240:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001244:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001248:	4891      	ldr	r0, [pc, #580]	; (8001490 <main+0x350>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800124c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800124e:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001252:	f04f 090b 	mov.w	r9, #11
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001256:	f000 fb6b 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800125a:	233f      	movs	r3, #63	; 0x3f
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125c:	488c      	ldr	r0, [pc, #560]	; (8001490 <main+0x350>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001260:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2603      	movs	r6, #3
 8001264:	2502      	movs	r5, #2
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001266:	e9cd 3905 	strd	r3, r9, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800126a:	f04f 0a08 	mov.w	sl, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126e:	f000 fb5f 	bl	8001930 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	a905      	add	r1, sp, #20
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001278:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	e9cd 6505 	strd	r6, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	e9cd 4607 	strd	r4, r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f000 fb54 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001288:	f248 1304 	movw	r3, #33028	; 0x8104
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	a905      	add	r1, sp, #20
 800128e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f000 fb49 	bl	8001930 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800129e:	a905      	add	r1, sp, #20
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	e9cd a505 	strd	sl, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	e9cd 4407 	strd	r4, r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012ac:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f000 fb3f 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80012b2:	2310      	movs	r3, #16
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80012b4:	a905      	add	r1, sp, #20
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012ba:	e9cd 3905 	strd	r3, r9, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012be:	f04f 0b05 	mov.w	fp, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f000 fb34 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80012c8:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	a905      	add	r1, sp, #20
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	e9cd 4607 	strd	r4, r6, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012d8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f000 fb28 	bl	8001930 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80012e0:	4869      	ldr	r0, [pc, #420]	; (8001488 <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80012e4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e6:	e9cd 7805 	strd	r7, r8, [sp, #20]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f000 fb21 	bl	8001930 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80012ee:	4866      	ldr	r0, [pc, #408]	; (8001488 <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80012f2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012f4:	e9cd 5905 	strd	r5, r9, [sp, #20]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f000 fb1a 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80012fc:	f24f 0334 	movw	r3, #61492	; 0xf034
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	4861      	ldr	r0, [pc, #388]	; (8001488 <main+0x348>)
 8001302:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f000 fb10 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001310:	f44f 7320 	mov.w	r3, #640	; 0x280
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001318:	485a      	ldr	r0, [pc, #360]	; (8001484 <main+0x344>)
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800131a:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800131c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800131e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001324:	f000 fb04 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001328:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	e9cd 2505 	strd	r2, r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001330:	4854      	ldr	r0, [pc, #336]	; (8001484 <main+0x344>)
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001332:	220a      	movs	r2, #10
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001334:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001336:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	e9cd 4607 	strd	r4, r6, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133c:	f000 faf8 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001340:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001344:	2312      	movs	r3, #18
 8001346:	e9cd 1305 	strd	r1, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	484f      	ldr	r0, [pc, #316]	; (8001488 <main+0x348>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800134c:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001350:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001352:	f44f 7940 	mov.w	r9, #768	; 0x300
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001356:	f04f 0a07 	mov.w	sl, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	e9cd 4607 	strd	r4, r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f000 fae7 	bl	8001930 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001362:	484a      	ldr	r0, [pc, #296]	; (800148c <main+0x34c>)
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001364:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001368:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	e9cd 9505 	strd	r9, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	e9cd 4607 	strd	r4, r6, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001372:	f000 fadd 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001376:	f64c 4104 	movw	r1, #52228	; 0xcc04
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137a:	e9cd 1805 	strd	r1, r8, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137e:	4843      	ldr	r0, [pc, #268]	; (800148c <main+0x34c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001382:	a905      	add	r1, sp, #20
 8001384:	f000 fad4 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001388:	f243 0181 	movw	r1, #12417	; 0x3081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	e9cd 1705 	strd	r1, r7, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001390:	483e      	ldr	r0, [pc, #248]	; (800148c <main+0x34c>)
 8001392:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001398:	f000 faca 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800139c:	f44f 7110 	mov.w	r1, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	e9cd 1705 	strd	r1, r7, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a4:	483a      	ldr	r0, [pc, #232]	; (8001490 <main+0x350>)
 80013a6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ac:	f000 fac0 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80013b0:	f44f 71c0 	mov.w	r1, #384	; 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b4:	e9cd 1805 	strd	r1, r8, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	4835      	ldr	r0, [pc, #212]	; (8001490 <main+0x350>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	a905      	add	r1, sp, #20
 80013be:	f000 fab7 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80013c2:	f44f 7100 	mov.w	r1, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	e9cd 1405 	strd	r1, r4, [sp, #20]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ce:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80013d0:	f44f 58e0 	mov.w	r8, #7168	; 0x1c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f000 faab 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013da:	220a      	movs	r2, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	a905      	add	r1, sp, #20
 80013de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013e2:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	e9cd 8505 	strd	r8, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	e9cd 4607 	strd	r4, r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f000 faa0 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013f0:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f2:	4827      	ldr	r0, [pc, #156]	; (8001490 <main+0x350>)
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013f4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	e9cd 8505 	strd	r8, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	e9cd 4607 	strd	r4, r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001400:	f000 fa96 	bl	8001930 <HAL_GPIO_Init>
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001404:	4821      	ldr	r0, [pc, #132]	; (800148c <main+0x34c>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001406:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800140a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	e9cd 5505 	strd	r5, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	e9cd 4607 	strd	r4, r6, [sp, #28]
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001414:	f000 fa8c 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001418:	2378      	movs	r3, #120	; 0x78
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141a:	481c      	ldr	r0, [pc, #112]	; (800148c <main+0x34c>)
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001420:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	e9cd 4607 	strd	r4, r6, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142a:	f000 fa81 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142e:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	e9cd 3406 	strd	r3, r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	4814      	ldr	r0, [pc, #80]	; (8001488 <main+0x348>)
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001436:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800143a:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800143e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001442:	f000 fa75 	bl	8001930 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001446:	4622      	mov	r2, r4
 8001448:	4621      	mov	r1, r4
 800144a:	2017      	movs	r0, #23
 800144c:	f000 f9be 	bl	80017cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001450:	2017      	movs	r0, #23
 8001452:	f000 f9ed 	bl	8001830 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001456:	4622      	mov	r2, r4
 8001458:	4621      	mov	r1, r4
 800145a:	2028      	movs	r0, #40	; 0x28
 800145c:	f000 f9b6 	bl	80017cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001460:	2028      	movs	r0, #40	; 0x28
 8001462:	f000 f9e5 	bl	8001830 <HAL_NVIC_EnableIRQ>
  hcrc.Instance = CRC;
 8001466:	480b      	ldr	r0, [pc, #44]	; (8001494 <main+0x354>)
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <main+0x358>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800146a:	8084      	strh	r4, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800146c:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hcrc.Instance = CRC;
 8001470:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001472:	6207      	str	r7, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001474:	f000 f9fe 	bl	8001874 <HAL_CRC_Init>
 8001478:	b180      	cbz	r0, 800149c <main+0x35c>
 800147a:	b672      	cpsid	i
  while (1)
 800147c:	e7fe      	b.n	800147c <main+0x33c>
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	48001000 	.word	0x48001000
 8001488:	48000400 	.word	0x48000400
 800148c:	48000c00 	.word	0x48000c00
 8001490:	48000800 	.word	0x48000800
 8001494:	20000afc 	.word	0x20000afc
 8001498:	40023000 	.word	0x40023000
  MX_X_CUBE_AI_Init();
 800149c:	f002 ff90 	bl	80043c0 <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 80014a0:	f002 ff95 	bl	80043ce <MX_X_CUBE_AI_Process>
  while (1)
 80014a4:	e7fc      	b.n	80014a0 <main+0x360>
 80014a6:	bf00      	nop

080014a8 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 80014a8:	480b      	ldr	r0, [pc, #44]	; (80014d8 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 80014aa:	4a0c      	ldr	r2, [pc, #48]	; (80014dc <MX_USART1_UART_Init+0x34>)
{
 80014ac:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 115200;
 80014ae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80014b2:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b8:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014ba:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c6:	6103      	str	r3, [r0, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ca:	f001 fd2c 	bl	8002f26 <HAL_UART_Init>
 80014ce:	b108      	cbz	r0, 80014d4 <MX_USART1_UART_Init+0x2c>
 80014d0:	b672      	cpsid	i
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <MX_USART1_UART_Init+0x2a>
}
 80014d4:	bd08      	pop	{r3, pc}
 80014d6:	bf00      	nop
 80014d8:	20000b20 	.word	0x20000b20
 80014dc:	40013800 	.word	0x40013800

080014e0 <Error_Handler>:
 80014e0:	b672      	cpsid	i
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <Error_Handler+0x2>

080014e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_MspInit+0x2c>)
 80014e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014e8:	f042 0201 	orr.w	r2, r2, #1
 80014ec:	661a      	str	r2, [r3, #96]	; 0x60
 80014ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80014f0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	f002 0201 	and.w	r2, r2, #1
 80014f6:	9200      	str	r2, [sp, #0]
 80014f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001500:	659a      	str	r2, [r3, #88]	; 0x58
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150c:	b002      	add	sp, #8
 800150e:	4770      	bx	lr
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001514:	6802      	ldr	r2, [r0, #0]
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_CRC_MspInit+0x24>)
 8001518:	429a      	cmp	r2, r3
{
 800151a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800151c:	d10a      	bne.n	8001534 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800151e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001522:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001524:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001528:	649a      	str	r2, [r3, #72]	; 0x48
 800152a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001534:	b002      	add	sp, #8
 8001536:	4770      	bx	lr
 8001538:	40023000 	.word	0x40023000

0800153c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800153c:	b510      	push	{r4, lr}
 800153e:	b0aa      	sub	sp, #168	; 0xa8
 8001540:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	2214      	movs	r2, #20
 8001544:	2100      	movs	r1, #0
 8001546:	a803      	add	r0, sp, #12
 8001548:	f008 f8dc 	bl	8009704 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800154c:	2288      	movs	r2, #136	; 0x88
 800154e:	2100      	movs	r1, #0
 8001550:	a808      	add	r0, sp, #32
 8001552:	f008 f8d7 	bl	8009704 <memset>
  if(huart->Instance==USART1)
 8001556:	6822      	ldr	r2, [r4, #0]
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <HAL_UART_MspInit+0x78>)
 800155a:	429a      	cmp	r2, r3
 800155c:	d128      	bne.n	80015b0 <HAL_UART_MspInit+0x74>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800155e:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001560:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001562:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001564:	f000 fffc 	bl	8002560 <HAL_RCCEx_PeriphCLKConfig>
 8001568:	b108      	cbz	r0, 800156e <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 800156a:	f7ff ffb9 	bl	80014e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_UART_MspInit+0x7c>)
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	4812      	ldr	r0, [pc, #72]	; (80015bc <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001572:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001578:	661a      	str	r2, [r3, #96]	; 0x60
 800157a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800157c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001580:	9201      	str	r2, [sp, #4]
 8001582:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001586:	f042 0202 	orr.w	r2, r2, #2
 800158a:	64da      	str	r2, [r3, #76]	; 0x4c
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	9302      	str	r3, [sp, #8]
 8001594:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	22c0      	movs	r2, #192	; 0xc0
 8001598:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015a6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015aa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ac:	f000 f9c0 	bl	8001930 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015b0:	b02a      	add	sp, #168	; 0xa8
 80015b2:	bd10      	pop	{r4, pc}
 80015b4:	40013800 	.word	0x40013800
 80015b8:	40021000 	.word	0x40021000
 80015bc:	48000400 	.word	0x48000400

080015c0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <NMI_Handler>

080015c2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler>

080015c4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler>

080015c6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler>

080015c8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <UsageFault_Handler>

080015ca <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ca:	4770      	bx	lr

080015cc <DebugMon_Handler>:
 80015cc:	4770      	bx	lr

080015ce <PendSV_Handler>:
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d0:	f000 b8b2 	b.w	8001738 <HAL_IncTick>

080015d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80015d6:	2020      	movs	r0, #32
 80015d8:	f000 fa8e 	bl	8001af8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80015dc:	2040      	movs	r0, #64	; 0x40
 80015de:	f000 fa8b 	bl	8001af8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80015e2:	2080      	movs	r0, #128	; 0x80
 80015e4:	f000 fa88 	bl	8001af8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80015ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015f0:	f000 ba82 	b.w	8001af8 <HAL_GPIO_EXTI_IRQHandler>

080015f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80015f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015fa:	f000 fa7d 	bl	8001af8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80015fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001602:	f000 fa79 	bl	8001af8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001606:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800160a:	f000 fa75 	bl	8001af8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800160e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001612:	f000 fa71 	bl	8001af8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800161a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800161e:	f000 ba6b 	b.w	8001af8 <HAL_GPIO_EXTI_IRQHandler>
	...

08001624 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001624:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <_sbrk+0x30>)
 8001626:	6811      	ldr	r1, [r2, #0]
{
 8001628:	b510      	push	{r4, lr}
 800162a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800162c:	b909      	cbnz	r1, 8001632 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800162e:	490a      	ldr	r1, [pc, #40]	; (8001658 <_sbrk+0x34>)
 8001630:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001632:	6810      	ldr	r0, [r2, #0]
 8001634:	4909      	ldr	r1, [pc, #36]	; (800165c <_sbrk+0x38>)
 8001636:	4c0a      	ldr	r4, [pc, #40]	; (8001660 <_sbrk+0x3c>)
 8001638:	4403      	add	r3, r0
 800163a:	1b09      	subs	r1, r1, r4
 800163c:	428b      	cmp	r3, r1
 800163e:	d906      	bls.n	800164e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001640:	f008 f820 	bl	8009684 <__errno>
 8001644:	230c      	movs	r3, #12
 8001646:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001648:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800164c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800164e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001650:	e7fc      	b.n	800164c <_sbrk+0x28>
 8001652:	bf00      	nop
 8001654:	20000ba4 	.word	0x20000ba4
 8001658:	20001620 	.word	0x20001620
 800165c:	20018000 	.word	0x20018000
 8001660:	00000800 	.word	0x00000800

08001664 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001664:	4a03      	ldr	r2, [pc, #12]	; (8001674 <SystemInit+0x10>)
 8001666:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800166a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800166e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800167c:	f7ff fff2 	bl	8001664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001682:	490d      	ldr	r1, [pc, #52]	; (80016b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001684:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <LoopForever+0xe>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001688:	e002      	b.n	8001690 <LoopCopyDataInit>

0800168a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800168c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168e:	3304      	adds	r3, #4

08001690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001694:	d3f9      	bcc.n	800168a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001698:	4c0a      	ldr	r4, [pc, #40]	; (80016c4 <LoopForever+0x16>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800169c:	e001      	b.n	80016a2 <LoopFillZerobss>

0800169e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a0:	3204      	adds	r2, #4

080016a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a4:	d3fb      	bcc.n	800169e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016a6:	f007 fff3 	bl	8009690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016aa:	f7ff fd49 	bl	8001140 <main>

080016ae <LoopForever>:

LoopForever:
    b LoopForever
 80016ae:	e7fe      	b.n	80016ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b8:	20000ac4 	.word	0x20000ac4
  ldr r2, =_sidata
 80016bc:	0800f7b4 	.word	0x0800f7b4
  ldr r2, =_sbss
 80016c0:	20000ae0 	.word	0x20000ae0
  ldr r4, =_ebss
 80016c4:	20001620 	.word	0x20001620

080016c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC1_2_IRQHandler>
	...

080016cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_InitTick+0x40>)
{
 80016d0:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80016d2:	7818      	ldrb	r0, [r3, #0]
 80016d4:	b908      	cbnz	r0, 80016da <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80016d6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80016d8:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016da:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <HAL_InitTick+0x44>)
 80016dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e0:	fbb3 f3f0 	udiv	r3, r3, r0
 80016e4:	6810      	ldr	r0, [r2, #0]
 80016e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80016ea:	f000 f8af 	bl	800184c <HAL_SYSTICK_Config>
 80016ee:	4604      	mov	r4, r0
 80016f0:	2800      	cmp	r0, #0
 80016f2:	d1f0      	bne.n	80016d6 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f4:	2d0f      	cmp	r5, #15
 80016f6:	d8ee      	bhi.n	80016d6 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	4602      	mov	r2, r0
 80016fa:	4629      	mov	r1, r5
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f000 f864 	bl	80017cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_InitTick+0x48>)
 8001706:	4620      	mov	r0, r4
 8001708:	601d      	str	r5, [r3, #0]
  return status;
 800170a:	e7e5      	b.n	80016d8 <HAL_InitTick+0xc>
 800170c:	20000004 	.word	0x20000004
 8001710:	20000000 	.word	0x20000000
 8001714:	20000008 	.word	0x20000008

08001718 <HAL_Init>:
{
 8001718:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171a:	2003      	movs	r0, #3
 800171c:	f000 f844 	bl	80017a8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff ffd3 	bl	80016cc <HAL_InitTick>
 8001726:	4604      	mov	r4, r0
 8001728:	b918      	cbnz	r0, 8001732 <HAL_Init+0x1a>
    HAL_MspInit();
 800172a:	f7ff fedb 	bl	80014e4 <HAL_MspInit>
}
 800172e:	4620      	mov	r0, r4
 8001730:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001732:	2401      	movs	r4, #1
 8001734:	e7fb      	b.n	800172e <HAL_Init+0x16>
	...

08001738 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001738:	4a03      	ldr	r2, [pc, #12]	; (8001748 <HAL_IncTick+0x10>)
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <HAL_IncTick+0x14>)
 800173c:	6811      	ldr	r1, [r2, #0]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	440b      	add	r3, r1
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000ba8 	.word	0x20000ba8
 800174c:	20000004 	.word	0x20000004

08001750 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001750:	4b01      	ldr	r3, [pc, #4]	; (8001758 <HAL_GetTick+0x8>)
 8001752:	6818      	ldr	r0, [r3, #0]
}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000ba8 	.word	0x20000ba8

0800175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800175c:	b538      	push	{r3, r4, r5, lr}
 800175e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff fff6 	bl	8001750 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001764:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001766:	bf1c      	itt	ne
 8001768:	4b05      	ldrne	r3, [pc, #20]	; (8001780 <HAL_Delay+0x24>)
 800176a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800176c:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 800176e:	bf18      	it	ne
 8001770:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001772:	f7ff ffed 	bl	8001750 <HAL_GetTick>
 8001776:	1b43      	subs	r3, r0, r5
 8001778:	42a3      	cmp	r3, r4
 800177a:	d3fa      	bcc.n	8001772 <HAL_Delay+0x16>
  {
  }
}
 800177c:	bd38      	pop	{r3, r4, r5, pc}
 800177e:	bf00      	nop
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 8001784:	4800      	ldr	r0, [pc, #0]	; (8001788 <HAL_GetHalVersion+0x4>)
 8001786:	4770      	bx	lr
 8001788:	010d0300 	.word	0x010d0300

0800178c <HAL_GetREVID>:
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 800178c:	4b01      	ldr	r3, [pc, #4]	; (8001794 <HAL_GetREVID+0x8>)
 800178e:	6818      	ldr	r0, [r3, #0]
}
 8001790:	0c00      	lsrs	r0, r0, #16
 8001792:	4770      	bx	lr
 8001794:	e0042000 	.word	0xe0042000

08001798 <HAL_GetDEVID>:
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8001798:	4b02      	ldr	r3, [pc, #8]	; (80017a4 <HAL_GetDEVID+0xc>)
 800179a:	6818      	ldr	r0, [r3, #0]
}
 800179c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e0042000 	.word	0xe0042000

080017a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4907      	ldr	r1, [pc, #28]	; (80017c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017aa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80017c4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ce:	b530      	push	{r4, r5, lr}
 80017d0:	68dc      	ldr	r4, [r3, #12]
 80017d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	2d04      	cmp	r5, #4
 80017de:	bf28      	it	cs
 80017e0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e8:	bf8c      	ite	hi
 80017ea:	3c03      	subhi	r4, #3
 80017ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ee:	fa03 f505 	lsl.w	r5, r3, r5
 80017f2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f6:	40a3      	lsls	r3, r4
 80017f8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80017fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	bfac      	ite	ge
 8001806:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	4a08      	ldrlt	r2, [pc, #32]	; (800182c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	bfb8      	it	lt
 8001812:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	b2db      	uxtb	r3, r3
 8001818:	bfaa      	itet	ge
 800181a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001824:	bd30      	pop	{r4, r5, pc}
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00
 800182c:	e000ed14 	.word	0xe000ed14

08001830 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001830:	2800      	cmp	r0, #0
 8001832:	db08      	blt.n	8001846 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001834:	2301      	movs	r3, #1
 8001836:	0942      	lsrs	r2, r0, #5
 8001838:	f000 001f 	and.w	r0, r0, #31
 800183c:	fa03 f000 	lsl.w	r0, r3, r0
 8001840:	4b01      	ldr	r3, [pc, #4]	; (8001848 <HAL_NVIC_EnableIRQ+0x18>)
 8001842:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100

0800184c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800184c:	3801      	subs	r0, #1
 800184e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001852:	d20b      	bcs.n	800186c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001854:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	4a05      	ldr	r2, [pc, #20]	; (8001870 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	21f0      	movs	r1, #240	; 0xf0
 800185e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001862:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001864:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001866:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001868:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800186c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001874:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001876:	4604      	mov	r4, r0
 8001878:	b908      	cbnz	r0, 800187e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800187a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800187c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800187e:	7f43      	ldrb	r3, [r0, #29]
 8001880:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001884:	b913      	cbnz	r3, 800188c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001886:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001888:	f7ff fe44 	bl	8001514 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800188c:	2302      	movs	r3, #2
 800188e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001890:	7923      	ldrb	r3, [r4, #4]
 8001892:	b9e3      	cbnz	r3, 80018ce <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <HAL_CRC_Init+0x70>)
 8001898:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	f022 0218 	bic.w	r2, r2, #24
 80018a0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80018a2:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80018a4:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80018a6:	b9d2      	cbnz	r2, 80018de <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80018ac:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	6961      	ldr	r1, [r4, #20]
 80018b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	69a1      	ldr	r1, [r4, #24]
 80018be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018c2:	430a      	orrs	r2, r1
 80018c4:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80018c6:	2301      	movs	r3, #1
 80018c8:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80018ca:	2000      	movs	r0, #0
 80018cc:	e7d6      	b.n	800187c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80018ce:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80018d2:	4620      	mov	r0, r4
 80018d4:	f000 f808 	bl	80018e8 <HAL_CRCEx_Polynomial_Set>
 80018d8:	2800      	cmp	r0, #0
 80018da:	d0e2      	beq.n	80018a2 <HAL_CRC_Init+0x2e>
 80018dc:	e7cd      	b.n	800187a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80018de:	6922      	ldr	r2, [r4, #16]
 80018e0:	e7e4      	b.n	80018ac <HAL_CRC_Init+0x38>
 80018e2:	bf00      	nop
 80018e4:	04c11db7 	.word	0x04c11db7

080018e8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80018e8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80018ea:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80018ec:	3b01      	subs	r3, #1
 80018ee:	d31c      	bcc.n	800192a <HAL_CRCEx_Polynomial_Set+0x42>
 80018f0:	fa21 f403 	lsr.w	r4, r1, r3
 80018f4:	07e4      	lsls	r4, r4, #31
 80018f6:	d5f9      	bpl.n	80018ec <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80018f8:	2a10      	cmp	r2, #16
 80018fa:	d012      	beq.n	8001922 <HAL_CRCEx_Polynomial_Set+0x3a>
 80018fc:	d804      	bhi.n	8001908 <HAL_CRCEx_Polynomial_Set+0x20>
 80018fe:	b13a      	cbz	r2, 8001910 <HAL_CRCEx_Polynomial_Set+0x28>
 8001900:	2a08      	cmp	r2, #8
 8001902:	d010      	beq.n	8001926 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8001904:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8001906:	e00b      	b.n	8001920 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8001908:	2a18      	cmp	r2, #24
 800190a:	d1fb      	bne.n	8001904 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 800190c:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 800190e:	d8f9      	bhi.n	8001904 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001910:	6800      	ldr	r0, [r0, #0]
 8001912:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001914:	6883      	ldr	r3, [r0, #8]
 8001916:	f023 0318 	bic.w	r3, r3, #24
 800191a:	431a      	orrs	r2, r3
 800191c:	6082      	str	r2, [r0, #8]
 800191e:	2000      	movs	r0, #0
}
 8001920:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001922:	2b07      	cmp	r3, #7
 8001924:	e7f3      	b.n	800190e <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8001926:	2b0f      	cmp	r3, #15
 8001928:	e7f1      	b.n	800190e <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 800192a:	2a00      	cmp	r2, #0
 800192c:	d1ea      	bne.n	8001904 <HAL_CRCEx_Polynomial_Set+0x1c>
 800192e:	e7ef      	b.n	8001910 <HAL_CRCEx_Polynomial_Set+0x28>

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001934:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8001ae8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001938:	4c69      	ldr	r4, [pc, #420]	; (8001ae0 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 800193a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193c:	680a      	ldr	r2, [r1, #0]
 800193e:	fa32 f503 	lsrs.w	r5, r2, r3
 8001942:	d102      	bne.n	800194a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001944:	b003      	add	sp, #12
 8001946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800194a:	f04f 0e01 	mov.w	lr, #1
 800194e:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8001952:	ea1e 0202 	ands.w	r2, lr, r2
 8001956:	f000 8090 	beq.w	8001a7a <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800195a:	684d      	ldr	r5, [r1, #4]
 800195c:	f005 0603 	and.w	r6, r5, #3
 8001960:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001964:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001968:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800196a:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800196e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001970:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001974:	f200 8083 	bhi.w	8001a7e <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8001978:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800197a:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 800197e:	68cf      	ldr	r7, [r1, #12]
 8001980:	fa07 f708 	lsl.w	r7, r7, r8
 8001984:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001988:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800198a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800198c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001990:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001994:	409f      	lsls	r7, r3
 8001996:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800199a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800199c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800199e:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a2:	688f      	ldr	r7, [r1, #8]
 80019a4:	fa07 f708 	lsl.w	r7, r7, r8
 80019a8:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ac:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 80019ae:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b0:	d071      	beq.n	8001a96 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 80019b2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019b4:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019b8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019bc:	4337      	orrs	r7, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019be:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80019c2:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019c4:	d059      	beq.n	8001a7a <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80019ca:	f046 0601 	orr.w	r6, r6, #1
 80019ce:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 80019d2:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80019d6:	f023 0703 	bic.w	r7, r3, #3
 80019da:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80019de:	f006 0601 	and.w	r6, r6, #1
 80019e2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80019e6:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019e8:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ec:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80019ee:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019f0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80019f4:	f04f 0c0f 	mov.w	ip, #15
 80019f8:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019fc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a00:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a04:	d05f      	beq.n	8001ac6 <HAL_GPIO_Init+0x196>
 8001a06:	4e37      	ldr	r6, [pc, #220]	; (8001ae4 <HAL_GPIO_Init+0x1b4>)
 8001a08:	42b0      	cmp	r0, r6
 8001a0a:	d05e      	beq.n	8001aca <HAL_GPIO_Init+0x19a>
 8001a0c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a10:	42b0      	cmp	r0, r6
 8001a12:	d05c      	beq.n	8001ace <HAL_GPIO_Init+0x19e>
 8001a14:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a18:	42b0      	cmp	r0, r6
 8001a1a:	d05a      	beq.n	8001ad2 <HAL_GPIO_Init+0x1a2>
 8001a1c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a20:	42b0      	cmp	r0, r6
 8001a22:	d058      	beq.n	8001ad6 <HAL_GPIO_Init+0x1a6>
 8001a24:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a28:	42b0      	cmp	r0, r6
 8001a2a:	d056      	beq.n	8001ada <HAL_GPIO_Init+0x1aa>
 8001a2c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a30:	42b0      	cmp	r0, r6
 8001a32:	bf0c      	ite	eq
 8001a34:	2606      	moveq	r6, #6
 8001a36:	2607      	movne	r6, #7
 8001a38:	fa06 f60e 	lsl.w	r6, r6, lr
 8001a3c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a40:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8001a42:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8001a44:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a46:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001a4a:	bf0c      	ite	eq
 8001a4c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001a4e:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001a50:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8001a52:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a54:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001a58:	bf0c      	ite	eq
 8001a5a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001a5c:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 8001a5e:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8001a60:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a62:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001a66:	bf0c      	ite	eq
 8001a68:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001a6a:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001a6c:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8001a6e:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a70:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8001a72:	bf54      	ite	pl
 8001a74:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001a76:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8001a78:	6026      	str	r6, [r4, #0]
    position++;
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	e75e      	b.n	800193c <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a7e:	2e03      	cmp	r6, #3
 8001a80:	d18c      	bne.n	800199c <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8001a82:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a84:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a88:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8001a8c:	409f      	lsls	r7, r3
 8001a8e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 8001a92:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a94:	e78d      	b.n	80019b2 <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 8001a96:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001a9a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a9e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001aa2:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aa6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001aaa:	f04f 0e0f 	mov.w	lr, #15
 8001aae:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001ab2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ab6:	690f      	ldr	r7, [r1, #16]
 8001ab8:	fa07 f70b 	lsl.w	r7, r7, fp
 8001abc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001ac0:	f8ca 7020 	str.w	r7, [sl, #32]
 8001ac4:	e775      	b.n	80019b2 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ac6:	2600      	movs	r6, #0
 8001ac8:	e7b6      	b.n	8001a38 <HAL_GPIO_Init+0x108>
 8001aca:	2601      	movs	r6, #1
 8001acc:	e7b4      	b.n	8001a38 <HAL_GPIO_Init+0x108>
 8001ace:	2602      	movs	r6, #2
 8001ad0:	e7b2      	b.n	8001a38 <HAL_GPIO_Init+0x108>
 8001ad2:	2603      	movs	r6, #3
 8001ad4:	e7b0      	b.n	8001a38 <HAL_GPIO_Init+0x108>
 8001ad6:	2604      	movs	r6, #4
 8001ad8:	e7ae      	b.n	8001a38 <HAL_GPIO_Init+0x108>
 8001ada:	2605      	movs	r6, #5
 8001adc:	e7ac      	b.n	8001a38 <HAL_GPIO_Init+0x108>
 8001ade:	bf00      	nop
 8001ae0:	40010400 	.word	0x40010400
 8001ae4:	48000400 	.word	0x48000400
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aec:	b10a      	cbz	r2, 8001af2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aee:	6181      	str	r1, [r0, #24]
 8001af0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001af4:	4770      	bx	lr

08001af6 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001af6:	4770      	bx	lr

08001af8 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001afa:	6951      	ldr	r1, [r2, #20]
 8001afc:	4201      	tst	r1, r0
{
 8001afe:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b00:	d002      	beq.n	8001b08 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b02:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b04:	f7ff fff7 	bl	8001af6 <HAL_GPIO_EXTI_Callback>
}
 8001b08:	bd08      	pop	{r3, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b10:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <HAL_PWREx_GetVoltageRange+0xc>)
 8001b12:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001b14:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40007000 	.word	0x40007000

08001b20 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b20:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b22:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b24:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b2c:	d11d      	bne.n	8001b6a <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b32:	d101      	bne.n	8001b38 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b34:	2000      	movs	r0, #0
 8001b36:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b38:	6813      	ldr	r3, [r2, #0]
 8001b3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b42:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2132      	movs	r1, #50	; 0x32
 8001b4a:	434b      	muls	r3, r1
 8001b4c:	490e      	ldr	r1, [pc, #56]	; (8001b88 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b52:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b54:	6951      	ldr	r1, [r2, #20]
 8001b56:	0549      	lsls	r1, r1, #21
 8001b58:	d500      	bpl.n	8001b5c <HAL_PWREx_ControlVoltageScaling+0x3c>
 8001b5a:	b923      	cbnz	r3, 8001b66 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b5c:	6953      	ldr	r3, [r2, #20]
 8001b5e:	055b      	lsls	r3, r3, #21
 8001b60:	d5e8      	bpl.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8001b62:	2003      	movs	r0, #3
}
 8001b64:	4770      	bx	lr
        wait_loop_index--;
 8001b66:	3b01      	subs	r3, #1
 8001b68:	e7f4      	b.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b6e:	bf1f      	itttt	ne
 8001b70:	6813      	ldrne	r3, [r2, #0]
 8001b72:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 8001b76:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 8001b7a:	6013      	strne	r3, [r2, #0]
 8001b7c:	e7da      	b.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0x14>
 8001b7e:	bf00      	nop
 8001b80:	40007000 	.word	0x40007000
 8001b84:	20000000 	.word	0x20000000
 8001b88:	000f4240 	.word	0x000f4240

08001b8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b8e:	4d1e      	ldr	r5, [pc, #120]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001b90:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001b92:	00da      	lsls	r2, r3, #3
{
 8001b94:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b96:	d518      	bpl.n	8001bca <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b98:	f7ff ffba 	bl	8001b10 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b9c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001ba0:	d123      	bne.n	8001bea <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ba2:	2c80      	cmp	r4, #128	; 0x80
 8001ba4:	d929      	bls.n	8001bfa <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ba6:	2ca0      	cmp	r4, #160	; 0xa0
 8001ba8:	bf8c      	ite	hi
 8001baa:	2002      	movhi	r0, #2
 8001bac:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bae:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001bb0:	6813      	ldr	r3, [r2, #0]
 8001bb2:	f023 0307 	bic.w	r3, r3, #7
 8001bb6:	4303      	orrs	r3, r0
 8001bb8:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bba:	6813      	ldr	r3, [r2, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001bc0:	1a18      	subs	r0, r3, r0
 8001bc2:	bf18      	it	ne
 8001bc4:	2001      	movne	r0, #1
 8001bc6:	b003      	add	sp, #12
 8001bc8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	65ab      	str	r3, [r5, #88]	; 0x58
 8001bd2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001bdc:	f7ff ff98 	bl	8001b10 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001be0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be6:	65ab      	str	r3, [r5, #88]	; 0x58
 8001be8:	e7d8      	b.n	8001b9c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001bea:	2c80      	cmp	r4, #128	; 0x80
 8001bec:	d807      	bhi.n	8001bfe <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001bee:	d008      	beq.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001bf0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001bf4:	4258      	negs	r0, r3
 8001bf6:	4158      	adcs	r0, r3
 8001bf8:	e7d9      	b.n	8001bae <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	e7d7      	b.n	8001bae <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bfe:	2003      	movs	r0, #3
 8001c00:	e7d5      	b.n	8001bae <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c02:	2002      	movs	r0, #2
 8001c04:	e7d3      	b.n	8001bae <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40022000 	.word	0x40022000

08001c10 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c10:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x8c>)
 8001c12:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c14:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c16:	f012 020c 	ands.w	r2, r2, #12
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x18>
 8001c1c:	2a0c      	cmp	r2, #12
 8001c1e:	d115      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c20:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c24:	2901      	cmp	r1, #1
 8001c26:	d118      	bne.n	8001c5a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c28:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001c2a:	481d      	ldr	r0, [pc, #116]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c2c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c2e:	bf55      	itete	pl
 8001c30:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c34:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c36:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c3a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001c3e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c42:	b34a      	cbz	r2, 8001c98 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c44:	2a0c      	cmp	r2, #12
 8001c46:	d009      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x4c>
 8001c48:	2000      	movs	r0, #0
  return sysclockfreq;
 8001c4a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c4c:	2a04      	cmp	r2, #4
 8001c4e:	d022      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c50:	2a08      	cmp	r2, #8
 8001c52:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c54:	bf18      	it	ne
 8001c56:	2000      	movne	r0, #0
 8001c58:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c5a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001c62:	2a02      	cmp	r2, #2
 8001c64:	d015      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x82>
 8001c66:	490f      	ldr	r1, [pc, #60]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c68:	2a03      	cmp	r2, #3
 8001c6a:	bf08      	it	eq
 8001c6c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c6e:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001c76:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c78:	68d8      	ldr	r0, [r3, #12]
 8001c7a:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c7e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c82:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c84:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c86:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c88:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001c8c:	fbb2 f0f0 	udiv	r0, r2, r0
 8001c90:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001c92:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c94:	e7eb      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001c96:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	0800c57c 	.word	0x0800c57c
 8001ca4:	007a1200 	.word	0x007a1200
 8001ca8:	00f42400 	.word	0x00f42400

08001cac <HAL_RCC_OscConfig>:
{
 8001cac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001cb0:	4605      	mov	r5, r0
 8001cb2:	b918      	cbnz	r0, 8001cbc <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001cb4:	2001      	movs	r0, #1
}
 8001cb6:	b003      	add	sp, #12
 8001cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cbc:	4c92      	ldr	r4, [pc, #584]	; (8001f08 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cbe:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cc0:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc2:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cc4:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cc6:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cca:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cce:	d53d      	bpl.n	8001d4c <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cd0:	b11e      	cbz	r6, 8001cda <HAL_RCC_OscConfig+0x2e>
 8001cd2:	2e0c      	cmp	r6, #12
 8001cd4:	d166      	bne.n	8001da4 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cd6:	2f01      	cmp	r7, #1
 8001cd8:	d164      	bne.n	8001da4 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	0798      	lsls	r0, r3, #30
 8001cde:	d502      	bpl.n	8001ce6 <HAL_RCC_OscConfig+0x3a>
 8001ce0:	69ab      	ldr	r3, [r5, #24]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0e6      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	6a28      	ldr	r0, [r5, #32]
 8001cea:	0719      	lsls	r1, r3, #28
 8001cec:	bf56      	itet	pl
 8001cee:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001cf2:	6823      	ldrmi	r3, [r4, #0]
 8001cf4:	091b      	lsrpl	r3, r3, #4
 8001cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cfa:	4298      	cmp	r0, r3
 8001cfc:	d93b      	bls.n	8001d76 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cfe:	f7ff ff45 	bl	8001b8c <RCC_SetFlashLatencyFromMSIRange>
 8001d02:	2800      	cmp	r0, #0
 8001d04:	d1d6      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d06:	6823      	ldr	r3, [r4, #0]
 8001d08:	f043 0308 	orr.w	r3, r3, #8
 8001d0c:	6023      	str	r3, [r4, #0]
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	6a2a      	ldr	r2, [r5, #32]
 8001d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d16:	4313      	orrs	r3, r2
 8001d18:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d1a:	6863      	ldr	r3, [r4, #4]
 8001d1c:	69ea      	ldr	r2, [r5, #28]
 8001d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d26:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d28:	f7ff ff72 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001d2c:	68a3      	ldr	r3, [r4, #8]
 8001d2e:	4a77      	ldr	r2, [pc, #476]	; (8001f0c <HAL_RCC_OscConfig+0x260>)
 8001d30:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d34:	5cd3      	ldrb	r3, [r2, r3]
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	40d8      	lsrs	r0, r3
 8001d3c:	4b74      	ldr	r3, [pc, #464]	; (8001f10 <HAL_RCC_OscConfig+0x264>)
 8001d3e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001d40:	4b74      	ldr	r3, [pc, #464]	; (8001f14 <HAL_RCC_OscConfig+0x268>)
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	f7ff fcc2 	bl	80016cc <HAL_InitTick>
        if(status != HAL_OK)
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	d1b4      	bne.n	8001cb6 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4c:	682b      	ldr	r3, [r5, #0]
 8001d4e:	07d8      	lsls	r0, r3, #31
 8001d50:	d45f      	bmi.n	8001e12 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	682b      	ldr	r3, [r5, #0]
 8001d54:	0799      	lsls	r1, r3, #30
 8001d56:	f100 809e 	bmi.w	8001e96 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5a:	682b      	ldr	r3, [r5, #0]
 8001d5c:	0718      	lsls	r0, r3, #28
 8001d5e:	f100 80db 	bmi.w	8001f18 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d62:	682b      	ldr	r3, [r5, #0]
 8001d64:	0759      	lsls	r1, r3, #29
 8001d66:	f100 8101 	bmi.w	8001f6c <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f040 816a 	bne.w	8002046 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001d72:	2000      	movs	r0, #0
 8001d74:	e79f      	b.n	8001cb6 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	f043 0308 	orr.w	r3, r3, #8
 8001d7c:	6023      	str	r3, [r4, #0]
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d84:	4303      	orrs	r3, r0
 8001d86:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d88:	6863      	ldr	r3, [r4, #4]
 8001d8a:	69ea      	ldr	r2, [r5, #28]
 8001d8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d94:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d96:	2e00      	cmp	r6, #0
 8001d98:	d1c6      	bne.n	8001d28 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d9a:	f7ff fef7 	bl	8001b8c <RCC_SetFlashLatencyFromMSIRange>
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	d0c2      	beq.n	8001d28 <HAL_RCC_OscConfig+0x7c>
 8001da2:	e787      	b.n	8001cb4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001da4:	69ab      	ldr	r3, [r5, #24]
 8001da6:	b31b      	cbz	r3, 8001df0 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001db0:	f7ff fcce 	bl	8001750 <HAL_GetTick>
 8001db4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	079a      	lsls	r2, r3, #30
 8001dba:	d511      	bpl.n	8001de0 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	f043 0308 	orr.w	r3, r3, #8
 8001dc2:	6023      	str	r3, [r4, #0]
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	6a2a      	ldr	r2, [r5, #32]
 8001dc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd0:	6863      	ldr	r3, [r4, #4]
 8001dd2:	69ea      	ldr	r2, [r5, #28]
 8001dd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ddc:	6063      	str	r3, [r4, #4]
 8001dde:	e7b5      	b.n	8001d4c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001de0:	f7ff fcb6 	bl	8001750 <HAL_GetTick>
 8001de4:	eba0 0008 	sub.w	r0, r0, r8
 8001de8:	2802      	cmp	r0, #2
 8001dea:	d9e4      	bls.n	8001db6 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8001dec:	2003      	movs	r0, #3
 8001dee:	e762      	b.n	8001cb6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001df8:	f7ff fcaa 	bl	8001750 <HAL_GetTick>
 8001dfc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	079b      	lsls	r3, r3, #30
 8001e02:	d5a3      	bpl.n	8001d4c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e04:	f7ff fca4 	bl	8001750 <HAL_GetTick>
 8001e08:	eba0 0008 	sub.w	r0, r0, r8
 8001e0c:	2802      	cmp	r0, #2
 8001e0e:	d9f6      	bls.n	8001dfe <HAL_RCC_OscConfig+0x152>
 8001e10:	e7ec      	b.n	8001dec <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e12:	2e08      	cmp	r6, #8
 8001e14:	d003      	beq.n	8001e1e <HAL_RCC_OscConfig+0x172>
 8001e16:	2e0c      	cmp	r6, #12
 8001e18:	d108      	bne.n	8001e2c <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e1a:	2f03      	cmp	r7, #3
 8001e1c:	d106      	bne.n	8001e2c <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	039a      	lsls	r2, r3, #14
 8001e22:	d596      	bpl.n	8001d52 <HAL_RCC_OscConfig+0xa6>
 8001e24:	686b      	ldr	r3, [r5, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d193      	bne.n	8001d52 <HAL_RCC_OscConfig+0xa6>
 8001e2a:	e743      	b.n	8001cb4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2c:	686b      	ldr	r3, [r5, #4]
 8001e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e32:	d110      	bne.n	8001e56 <HAL_RCC_OscConfig+0x1aa>
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fc88 	bl	8001750 <HAL_GetTick>
 8001e40:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	039b      	lsls	r3, r3, #14
 8001e46:	d484      	bmi.n	8001d52 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff fc82 	bl	8001750 <HAL_GetTick>
 8001e4c:	eba0 0008 	sub.w	r0, r0, r8
 8001e50:	2864      	cmp	r0, #100	; 0x64
 8001e52:	d9f6      	bls.n	8001e42 <HAL_RCC_OscConfig+0x196>
 8001e54:	e7ca      	b.n	8001dec <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e5a:	d104      	bne.n	8001e66 <HAL_RCC_OscConfig+0x1ba>
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e62:	6023      	str	r3, [r4, #0]
 8001e64:	e7e6      	b.n	8001e34 <HAL_RCC_OscConfig+0x188>
 8001e66:	6822      	ldr	r2, [r4, #0]
 8001e68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e6c:	6022      	str	r2, [r4, #0]
 8001e6e:	6822      	ldr	r2, [r4, #0]
 8001e70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e74:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1e0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8001e7a:	f7ff fc69 	bl	8001750 <HAL_GetTick>
 8001e7e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	0398      	lsls	r0, r3, #14
 8001e84:	f57f af65 	bpl.w	8001d52 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fc62 	bl	8001750 <HAL_GetTick>
 8001e8c:	eba0 0008 	sub.w	r0, r0, r8
 8001e90:	2864      	cmp	r0, #100	; 0x64
 8001e92:	d9f5      	bls.n	8001e80 <HAL_RCC_OscConfig+0x1d4>
 8001e94:	e7aa      	b.n	8001dec <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e96:	2e04      	cmp	r6, #4
 8001e98:	d003      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x1f6>
 8001e9a:	2e0c      	cmp	r6, #12
 8001e9c:	d110      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e9e:	2f02      	cmp	r7, #2
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	0559      	lsls	r1, r3, #21
 8001ea6:	d503      	bpl.n	8001eb0 <HAL_RCC_OscConfig+0x204>
 8001ea8:	68eb      	ldr	r3, [r5, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f43f af02 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	6863      	ldr	r3, [r4, #4]
 8001eb2:	692a      	ldr	r2, [r5, #16]
 8001eb4:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001eb8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ebc:	6063      	str	r3, [r4, #4]
 8001ebe:	e74c      	b.n	8001d5a <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec0:	68eb      	ldr	r3, [r5, #12]
 8001ec2:	b17b      	cbz	r3, 8001ee4 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fc40 	bl	8001750 <HAL_GetTick>
 8001ed0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	055a      	lsls	r2, r3, #21
 8001ed6:	d4eb      	bmi.n	8001eb0 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fc3a 	bl	8001750 <HAL_GetTick>
 8001edc:	1bc0      	subs	r0, r0, r7
 8001ede:	2802      	cmp	r0, #2
 8001ee0:	d9f7      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x226>
 8001ee2:	e783      	b.n	8001dec <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001eec:	f7ff fc30 	bl	8001750 <HAL_GetTick>
 8001ef0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	055b      	lsls	r3, r3, #21
 8001ef6:	f57f af30 	bpl.w	8001d5a <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efa:	f7ff fc29 	bl	8001750 <HAL_GetTick>
 8001efe:	1bc0      	subs	r0, r0, r7
 8001f00:	2802      	cmp	r0, #2
 8001f02:	d9f6      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x246>
 8001f04:	e772      	b.n	8001dec <HAL_RCC_OscConfig+0x140>
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	0800c564 	.word	0x0800c564
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f18:	696b      	ldr	r3, [r5, #20]
 8001f1a:	b19b      	cbz	r3, 8001f44 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8001f1c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f28:	f7ff fc12 	bl	8001750 <HAL_GetTick>
 8001f2c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f2e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f32:	079a      	lsls	r2, r3, #30
 8001f34:	f53f af15 	bmi.w	8001d62 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f38:	f7ff fc0a 	bl	8001750 <HAL_GetTick>
 8001f3c:	1bc0      	subs	r0, r0, r7
 8001f3e:	2802      	cmp	r0, #2
 8001f40:	d9f5      	bls.n	8001f2e <HAL_RCC_OscConfig+0x282>
 8001f42:	e753      	b.n	8001dec <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8001f44:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f50:	f7ff fbfe 	bl	8001750 <HAL_GetTick>
 8001f54:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f56:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f5a:	079b      	lsls	r3, r3, #30
 8001f5c:	f57f af01 	bpl.w	8001d62 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f60:	f7ff fbf6 	bl	8001750 <HAL_GetTick>
 8001f64:	1bc0      	subs	r0, r0, r7
 8001f66:	2802      	cmp	r0, #2
 8001f68:	d9f5      	bls.n	8001f56 <HAL_RCC_OscConfig+0x2aa>
 8001f6a:	e73f      	b.n	8001dec <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f6e:	00df      	lsls	r7, r3, #3
 8001f70:	d429      	bmi.n	8001fc6 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f84:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f88:	4f85      	ldr	r7, [pc, #532]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	05d8      	lsls	r0, r3, #23
 8001f8e:	d51d      	bpl.n	8001fcc <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f90:	68ab      	ldr	r3, [r5, #8]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d12b      	bne.n	8001fee <HAL_RCC_OscConfig+0x342>
 8001f96:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001fa2:	f7ff fbd5 	bl	8001750 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001faa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001fb0:	079a      	lsls	r2, r3, #30
 8001fb2:	d542      	bpl.n	800203a <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8001fb4:	f1b8 0f00 	cmp.w	r8, #0
 8001fb8:	f43f aed7 	beq.w	8001d6a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	65a3      	str	r3, [r4, #88]	; 0x58
 8001fc4:	e6d1      	b.n	8001d6a <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8001fc6:	f04f 0800 	mov.w	r8, #0
 8001fca:	e7dd      	b.n	8001f88 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001fd4:	f7ff fbbc 	bl	8001750 <HAL_GetTick>
 8001fd8:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	05d9      	lsls	r1, r3, #23
 8001fde:	d4d7      	bmi.n	8001f90 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe0:	f7ff fbb6 	bl	8001750 <HAL_GetTick>
 8001fe4:	eba0 0009 	sub.w	r0, r0, r9
 8001fe8:	2802      	cmp	r0, #2
 8001fea:	d9f6      	bls.n	8001fda <HAL_RCC_OscConfig+0x32e>
 8001fec:	e6fe      	b.n	8001dec <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fee:	2b05      	cmp	r3, #5
 8001ff0:	d106      	bne.n	8002000 <HAL_RCC_OscConfig+0x354>
 8001ff2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001ffe:	e7ca      	b.n	8001f96 <HAL_RCC_OscConfig+0x2ea>
 8002000:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800200c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002010:	f022 0204 	bic.w	r2, r2, #4
 8002014:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1c2      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 800201c:	f7ff fb98 	bl	8001750 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002024:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002026:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800202a:	079b      	lsls	r3, r3, #30
 800202c:	d5c2      	bpl.n	8001fb4 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7ff fb8f 	bl	8001750 <HAL_GetTick>
 8002032:	1bc0      	subs	r0, r0, r7
 8002034:	4548      	cmp	r0, r9
 8002036:	d9f6      	bls.n	8002026 <HAL_RCC_OscConfig+0x37a>
 8002038:	e6d8      	b.n	8001dec <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7ff fb89 	bl	8001750 <HAL_GetTick>
 800203e:	1bc0      	subs	r0, r0, r7
 8002040:	4548      	cmp	r0, r9
 8002042:	d9b3      	bls.n	8001fac <HAL_RCC_OscConfig+0x300>
 8002044:	e6d2      	b.n	8001dec <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002046:	2b02      	cmp	r3, #2
 8002048:	f040 808f 	bne.w	800216a <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 800204c:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002050:	f003 0103 	and.w	r1, r3, #3
 8002054:	4291      	cmp	r1, r2
 8002056:	d124      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002058:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800205a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800205e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002060:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002064:	d11d      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002066:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002068:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800206c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002070:	d117      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002072:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002074:	3a07      	subs	r2, #7
 8002076:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800207a:	bf18      	it	ne
 800207c:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800207e:	4291      	cmp	r1, r2
 8002080:	d10f      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002082:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002084:	0852      	lsrs	r2, r2, #1
 8002086:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800208a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800208c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002092:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002094:	0852      	lsrs	r2, r2, #1
 8002096:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800209a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80020a0:	d04a      	beq.n	8002138 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020a2:	2e0c      	cmp	r6, #12
 80020a4:	f43f ae06 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	015f      	lsls	r7, r3, #5
 80020ac:	f53f ae02 	bmi.w	8001cb4 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	00de      	lsls	r6, r3, #3
 80020b4:	f53f adfe 	bmi.w	8001cb4 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020be:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 80020c0:	f7ff fb46 	bl	8001750 <HAL_GetTick>
 80020c4:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	0198      	lsls	r0, r3, #6
 80020ca:	d42f      	bmi.n	800212c <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020cc:	68e2      	ldr	r2, [r4, #12]
 80020ce:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <HAL_RCC_OscConfig+0x4f8>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80020d4:	4313      	orrs	r3, r2
 80020d6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80020d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80020dc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80020de:	3a01      	subs	r2, #1
 80020e0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80020e4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80020e6:	0912      	lsrs	r2, r2, #4
 80020e8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80020ec:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80020ee:	0852      	lsrs	r2, r2, #1
 80020f0:	3a01      	subs	r2, #1
 80020f2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80020f6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80020f8:	0852      	lsrs	r2, r2, #1
 80020fa:	3a01      	subs	r2, #1
 80020fc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002100:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002108:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800210a:	68e3      	ldr	r3, [r4, #12]
 800210c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002110:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002112:	f7ff fb1d 	bl	8001750 <HAL_GetTick>
 8002116:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	0199      	lsls	r1, r3, #6
 800211c:	f53f ae29 	bmi.w	8001d72 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff fb16 	bl	8001750 <HAL_GetTick>
 8002124:	1b40      	subs	r0, r0, r5
 8002126:	2802      	cmp	r0, #2
 8002128:	d9f6      	bls.n	8002118 <HAL_RCC_OscConfig+0x46c>
 800212a:	e65f      	b.n	8001dec <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212c:	f7ff fb10 	bl	8001750 <HAL_GetTick>
 8002130:	1b80      	subs	r0, r0, r6
 8002132:	2802      	cmp	r0, #2
 8002134:	d9c7      	bls.n	80020c6 <HAL_RCC_OscConfig+0x41a>
 8002136:	e659      	b.n	8001dec <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	019a      	lsls	r2, r3, #6
 800213c:	f53f ae19 	bmi.w	8001d72 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002146:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002148:	68e3      	ldr	r3, [r4, #12]
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214e:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002150:	f7ff fafe 	bl	8001750 <HAL_GetTick>
 8002154:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	019b      	lsls	r3, r3, #6
 800215a:	f53f ae0a 	bmi.w	8001d72 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215e:	f7ff faf7 	bl	8001750 <HAL_GetTick>
 8002162:	1b40      	subs	r0, r0, r5
 8002164:	2802      	cmp	r0, #2
 8002166:	d9f6      	bls.n	8002156 <HAL_RCC_OscConfig+0x4aa>
 8002168:	e640      	b.n	8001dec <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800216a:	2e0c      	cmp	r6, #12
 800216c:	f43f ada2 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002176:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002178:	f7ff faea 	bl	8001750 <HAL_GetTick>
 800217c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002184:	d105      	bne.n	8002192 <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002186:	68e1      	ldr	r1, [r4, #12]
 8002188:	4a07      	ldr	r2, [pc, #28]	; (80021a8 <HAL_RCC_OscConfig+0x4fc>)
 800218a:	400a      	ands	r2, r1
 800218c:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 800218e:	4618      	mov	r0, r3
 8002190:	e591      	b.n	8001cb6 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002192:	f7ff fadd 	bl	8001750 <HAL_GetTick>
 8002196:	1b40      	subs	r0, r0, r5
 8002198:	2802      	cmp	r0, #2
 800219a:	d9f0      	bls.n	800217e <HAL_RCC_OscConfig+0x4d2>
 800219c:	e626      	b.n	8001dec <HAL_RCC_OscConfig+0x140>
 800219e:	bf00      	nop
 80021a0:	40007000 	.word	0x40007000
 80021a4:	f99d808c 	.word	0xf99d808c
 80021a8:	feeefffc 	.word	0xfeeefffc

080021ac <HAL_RCC_ClockConfig>:
{
 80021ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021b0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80021b2:	4604      	mov	r4, r0
 80021b4:	b910      	cbnz	r0, 80021bc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80021b6:	2001      	movs	r0, #1
}
 80021b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021bc:	4a4b      	ldr	r2, [pc, #300]	; (80022ec <HAL_RCC_ClockConfig+0x140>)
 80021be:	6813      	ldr	r3, [r2, #0]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	428b      	cmp	r3, r1
 80021c6:	d32c      	bcc.n	8002222 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	6820      	ldr	r0, [r4, #0]
 80021ca:	0786      	lsls	r6, r0, #30
 80021cc:	d434      	bmi.n	8002238 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ce:	07c1      	lsls	r1, r0, #31
 80021d0:	d43f      	bmi.n	8002252 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d2:	6821      	ldr	r1, [r4, #0]
 80021d4:	078a      	lsls	r2, r1, #30
 80021d6:	d468      	bmi.n	80022aa <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d8:	4a44      	ldr	r2, [pc, #272]	; (80022ec <HAL_RCC_ClockConfig+0x140>)
 80021da:	6813      	ldr	r3, [r2, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	42ab      	cmp	r3, r5
 80021e2:	d86f      	bhi.n	80022c4 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e4:	f011 0f04 	tst.w	r1, #4
 80021e8:	4d41      	ldr	r5, [pc, #260]	; (80022f0 <HAL_RCC_ClockConfig+0x144>)
 80021ea:	d177      	bne.n	80022dc <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ec:	070b      	lsls	r3, r1, #28
 80021ee:	d506      	bpl.n	80021fe <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021f0:	68ab      	ldr	r3, [r5, #8]
 80021f2:	6922      	ldr	r2, [r4, #16]
 80021f4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80021fc:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021fe:	f7ff fd07 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002202:	68ab      	ldr	r3, [r5, #8]
 8002204:	4a3b      	ldr	r2, [pc, #236]	; (80022f4 <HAL_RCC_ClockConfig+0x148>)
 8002206:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800220a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	40d8      	lsrs	r0, r3
 8002216:	4b38      	ldr	r3, [pc, #224]	; (80022f8 <HAL_RCC_ClockConfig+0x14c>)
 8002218:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800221a:	4b38      	ldr	r3, [pc, #224]	; (80022fc <HAL_RCC_ClockConfig+0x150>)
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	f7ff ba55 	b.w	80016cc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	6813      	ldr	r3, [r2, #0]
 8002224:	f023 0307 	bic.w	r3, r3, #7
 8002228:	430b      	orrs	r3, r1
 800222a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222c:	6813      	ldr	r3, [r2, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	428b      	cmp	r3, r1
 8002234:	d1bf      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xa>
 8002236:	e7c7      	b.n	80021c8 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002238:	4a2d      	ldr	r2, [pc, #180]	; (80022f0 <HAL_RCC_ClockConfig+0x144>)
 800223a:	68a6      	ldr	r6, [r4, #8]
 800223c:	6891      	ldr	r1, [r2, #8]
 800223e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8002242:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002244:	bf81      	itttt	hi
 8002246:	6893      	ldrhi	r3, [r2, #8]
 8002248:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 800224c:	4333      	orrhi	r3, r6
 800224e:	6093      	strhi	r3, [r2, #8]
 8002250:	e7bd      	b.n	80021ce <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002252:	6862      	ldr	r2, [r4, #4]
 8002254:	4e26      	ldr	r6, [pc, #152]	; (80022f0 <HAL_RCC_ClockConfig+0x144>)
 8002256:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002258:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800225a:	d11a      	bne.n	8002292 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002260:	d0a9      	beq.n	80021b6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002262:	68b3      	ldr	r3, [r6, #8]
 8002264:	f023 0303 	bic.w	r3, r3, #3
 8002268:	4313      	orrs	r3, r2
 800226a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800226c:	f7ff fa70 	bl	8001750 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002270:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002274:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	68b3      	ldr	r3, [r6, #8]
 8002278:	6862      	ldr	r2, [r4, #4]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002282:	d0a6      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002284:	f7ff fa64 	bl	8001750 <HAL_GetTick>
 8002288:	1bc0      	subs	r0, r0, r7
 800228a:	4540      	cmp	r0, r8
 800228c:	d9f3      	bls.n	8002276 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 800228e:	2003      	movs	r0, #3
 8002290:	e792      	b.n	80021b8 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002292:	2a02      	cmp	r2, #2
 8002294:	d102      	bne.n	800229c <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002296:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800229a:	e7e1      	b.n	8002260 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800229c:	b912      	cbnz	r2, 80022a4 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800229e:	f013 0f02 	tst.w	r3, #2
 80022a2:	e7dd      	b.n	8002260 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80022a8:	e7da      	b.n	8002260 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022aa:	4a11      	ldr	r2, [pc, #68]	; (80022f0 <HAL_RCC_ClockConfig+0x144>)
 80022ac:	68a6      	ldr	r6, [r4, #8]
 80022ae:	6890      	ldr	r0, [r2, #8]
 80022b0:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 80022b4:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b6:	bf3f      	itttt	cc
 80022b8:	6893      	ldrcc	r3, [r2, #8]
 80022ba:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 80022be:	4333      	orrcc	r3, r6
 80022c0:	6093      	strcc	r3, [r2, #8]
 80022c2:	e789      	b.n	80021d8 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c4:	6813      	ldr	r3, [r2, #0]
 80022c6:	f023 0307 	bic.w	r3, r3, #7
 80022ca:	432b      	orrs	r3, r5
 80022cc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	6813      	ldr	r3, [r2, #0]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	42ab      	cmp	r3, r5
 80022d6:	f47f af6e 	bne.w	80021b6 <HAL_RCC_ClockConfig+0xa>
 80022da:	e783      	b.n	80021e4 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022dc:	68ab      	ldr	r3, [r5, #8]
 80022de:	68e2      	ldr	r2, [r4, #12]
 80022e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60ab      	str	r3, [r5, #8]
 80022e8:	e780      	b.n	80021ec <HAL_RCC_ClockConfig+0x40>
 80022ea:	bf00      	nop
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40021000 	.word	0x40021000
 80022f4:	0800c564 	.word	0x0800c564
 80022f8:	20000000 	.word	0x20000000
 80022fc:	20000008 	.word	0x20000008

08002300 <HAL_RCC_GetHCLKFreq>:
}
 8002300:	4b01      	ldr	r3, [pc, #4]	; (8002308 <HAL_RCC_GetHCLKFreq+0x8>)
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000000 	.word	0x20000000

0800230c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_RCC_GetPCLK1Freq+0x18>)
 800230e:	4a06      	ldr	r2, [pc, #24]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_RCC_GetPCLK1Freq+0x20>)
 800231a:	6810      	ldr	r0, [r2, #0]
 800231c:	f003 031f 	and.w	r3, r3, #31
}
 8002320:	40d8      	lsrs	r0, r3
 8002322:	4770      	bx	lr
 8002324:	40021000 	.word	0x40021000
 8002328:	0800c574 	.word	0x0800c574
 800232c:	20000000 	.word	0x20000000

08002330 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002332:	4a06      	ldr	r2, [pc, #24]	; (800234c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	4a04      	ldr	r2, [pc, #16]	; (8002350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800233e:	6810      	ldr	r0, [r2, #0]
 8002340:	f003 031f 	and.w	r3, r3, #31
}
 8002344:	40d8      	lsrs	r0, r3
 8002346:	4770      	bx	lr
 8002348:	40021000 	.word	0x40021000
 800234c:	0800c574 	.word	0x0800c574
 8002350:	20000000 	.word	0x20000000

08002354 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002356:	4c43      	ldr	r4, [pc, #268]	; (8002464 <RCCEx_PLLSAI1_Config+0x110>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002358:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800235a:	68e2      	ldr	r2, [r4, #12]
{
 800235c:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800235e:	0790      	lsls	r0, r2, #30
{
 8002360:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002362:	d029      	beq.n	80023b8 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002364:	68e2      	ldr	r2, [r4, #12]
 8002366:	f002 0203 	and.w	r2, r2, #3
 800236a:	429a      	cmp	r2, r3
 800236c:	d178      	bne.n	8002460 <RCCEx_PLLSAI1_Config+0x10c>
       ||
 800236e:	2a00      	cmp	r2, #0
 8002370:	d076      	beq.n	8002460 <RCCEx_PLLSAI1_Config+0x10c>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002372:	68e3      	ldr	r3, [r4, #12]
       ||
 8002374:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002376:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800237a:	3301      	adds	r3, #1
       ||
 800237c:	4293      	cmp	r3, r2
 800237e:	d16f      	bne.n	8002460 <RCCEx_PLLSAI1_Config+0x10c>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002386:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002388:	f7ff f9e2 	bl	8001750 <HAL_GetTick>
 800238c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	011a      	lsls	r2, r3, #4
 8002392:	d430      	bmi.n	80023f6 <RCCEx_PLLSAI1_Config+0xa2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002394:	68ab      	ldr	r3, [r5, #8]
 8002396:	021f      	lsls	r7, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8002398:	b3a6      	cbz	r6, 8002404 <RCCEx_PLLSAI1_Config+0xb0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800239a:	2e01      	cmp	r6, #1
 800239c:	d14d      	bne.n	800243a <RCCEx_PLLSAI1_Config+0xe6>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800239e:	692a      	ldr	r2, [r5, #16]
 80023a0:	6921      	ldr	r1, [r4, #16]
 80023a2:	0852      	lsrs	r2, r2, #1
 80023a4:	1e53      	subs	r3, r2, #1
 80023a6:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 80023aa:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80023ae:	433a      	orrs	r2, r7
 80023b0:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 80023b4:	6122      	str	r2, [r4, #16]
 80023b6:	e030      	b.n	800241a <RCCEx_PLLSAI1_Config+0xc6>
    switch(PllSai1->PLLSAI1Source)
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d011      	beq.n	80023e0 <RCCEx_PLLSAI1_Config+0x8c>
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d013      	beq.n	80023e8 <RCCEx_PLLSAI1_Config+0x94>
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d14d      	bne.n	8002460 <RCCEx_PLLSAI1_Config+0x10c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023c4:	6822      	ldr	r2, [r4, #0]
 80023c6:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023ca:	d049      	beq.n	8002460 <RCCEx_PLLSAI1_Config+0x10c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023cc:	68e0      	ldr	r0, [r4, #12]
 80023ce:	686a      	ldr	r2, [r5, #4]
 80023d0:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 80023d4:	3a01      	subs	r2, #1
 80023d6:	4318      	orrs	r0, r3
 80023d8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80023dc:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 80023de:	e7cf      	b.n	8002380 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023e0:	6822      	ldr	r2, [r4, #0]
 80023e2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80023e6:	e7f0      	b.n	80023ca <RCCEx_PLLSAI1_Config+0x76>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023e8:	6822      	ldr	r2, [r4, #0]
 80023ea:	0391      	lsls	r1, r2, #14
 80023ec:	d4ee      	bmi.n	80023cc <RCCEx_PLLSAI1_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023ee:	6822      	ldr	r2, [r4, #0]
 80023f0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80023f4:	e7e9      	b.n	80023ca <RCCEx_PLLSAI1_Config+0x76>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023f6:	f7ff f9ab 	bl	8001750 <HAL_GetTick>
 80023fa:	1bc0      	subs	r0, r0, r7
 80023fc:	2802      	cmp	r0, #2
 80023fe:	d9c6      	bls.n	800238e <RCCEx_PLLSAI1_Config+0x3a>
        status = HAL_TIMEOUT;
 8002400:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002404:	6921      	ldr	r1, [r4, #16]
 8002406:	68eb      	ldr	r3, [r5, #12]
 8002408:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800240c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	4339      	orrs	r1, r7
 8002414:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002418:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002420:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002422:	f7ff f995 	bl	8001750 <HAL_GetTick>
 8002426:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	d512      	bpl.n	8002454 <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800242e:	6923      	ldr	r3, [r4, #16]
 8002430:	69aa      	ldr	r2, [r5, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	6123      	str	r3, [r4, #16]
 8002436:	2000      	movs	r0, #0
  return status;
 8002438:	e7e3      	b.n	8002402 <RCCEx_PLLSAI1_Config+0xae>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800243a:	696b      	ldr	r3, [r5, #20]
 800243c:	6922      	ldr	r2, [r4, #16]
 800243e:	085b      	lsrs	r3, r3, #1
 8002440:	1e59      	subs	r1, r3, #1
 8002442:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 8002446:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800244a:	433b      	orrs	r3, r7
 800244c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002450:	6123      	str	r3, [r4, #16]
 8002452:	e7e2      	b.n	800241a <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002454:	f7ff f97c 	bl	8001750 <HAL_GetTick>
 8002458:	1b80      	subs	r0, r0, r6
 800245a:	2802      	cmp	r0, #2
 800245c:	d9e4      	bls.n	8002428 <RCCEx_PLLSAI1_Config+0xd4>
 800245e:	e7cf      	b.n	8002400 <RCCEx_PLLSAI1_Config+0xac>
      status = HAL_ERROR;
 8002460:	2001      	movs	r0, #1
 8002462:	e7ce      	b.n	8002402 <RCCEx_PLLSAI1_Config+0xae>
 8002464:	40021000 	.word	0x40021000

08002468 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800246a:	4c3c      	ldr	r4, [pc, #240]	; (800255c <RCCEx_PLLSAI2_Config+0xf4>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800246c:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800246e:	68e2      	ldr	r2, [r4, #12]
{
 8002470:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002472:	0790      	lsls	r0, r2, #30
{
 8002474:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002476:	d027      	beq.n	80024c8 <RCCEx_PLLSAI2_Config+0x60>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002478:	68e2      	ldr	r2, [r4, #12]
 800247a:	f002 0203 	and.w	r2, r2, #3
 800247e:	429a      	cmp	r2, r3
 8002480:	d169      	bne.n	8002556 <RCCEx_PLLSAI2_Config+0xee>
       ||
 8002482:	2a00      	cmp	r2, #0
 8002484:	d067      	beq.n	8002556 <RCCEx_PLLSAI2_Config+0xee>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002486:	68e3      	ldr	r3, [r4, #12]
       ||
 8002488:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800248a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800248e:	3301      	adds	r3, #1
       ||
 8002490:	4293      	cmp	r3, r2
 8002492:	d160      	bne.n	8002556 <RCCEx_PLLSAI2_Config+0xee>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800249c:	f7ff f958 	bl	8001750 <HAL_GetTick>
 80024a0:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	009a      	lsls	r2, r3, #2
 80024a6:	d42e      	bmi.n	8002506 <RCCEx_PLLSAI2_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80024a8:	68ab      	ldr	r3, [r5, #8]
 80024aa:	0218      	lsls	r0, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80024ac:	b396      	cbz	r6, 8002514 <RCCEx_PLLSAI2_Config+0xac>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80024ae:	6963      	ldr	r3, [r4, #20]
 80024b0:	6929      	ldr	r1, [r5, #16]
 80024b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024b6:	0849      	lsrs	r1, r1, #1
 80024b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024bc:	3901      	subs	r1, #1
 80024be:	4303      	orrs	r3, r0
 80024c0:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80024c4:	6163      	str	r3, [r4, #20]
 80024c6:	e030      	b.n	800252a <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d011      	beq.n	80024f0 <RCCEx_PLLSAI2_Config+0x88>
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d013      	beq.n	80024f8 <RCCEx_PLLSAI2_Config+0x90>
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d140      	bne.n	8002556 <RCCEx_PLLSAI2_Config+0xee>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024d4:	6822      	ldr	r2, [r4, #0]
 80024d6:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024da:	d03c      	beq.n	8002556 <RCCEx_PLLSAI2_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024dc:	68e0      	ldr	r0, [r4, #12]
 80024de:	686a      	ldr	r2, [r5, #4]
 80024e0:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 80024e4:	3a01      	subs	r2, #1
 80024e6:	4318      	orrs	r0, r3
 80024e8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80024ec:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 80024ee:	e7d1      	b.n	8002494 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024f0:	6822      	ldr	r2, [r4, #0]
 80024f2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80024f6:	e7f0      	b.n	80024da <RCCEx_PLLSAI2_Config+0x72>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024f8:	6822      	ldr	r2, [r4, #0]
 80024fa:	0391      	lsls	r1, r2, #14
 80024fc:	d4ee      	bmi.n	80024dc <RCCEx_PLLSAI2_Config+0x74>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024fe:	6822      	ldr	r2, [r4, #0]
 8002500:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002504:	e7e9      	b.n	80024da <RCCEx_PLLSAI2_Config+0x72>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002506:	f7ff f923 	bl	8001750 <HAL_GetTick>
 800250a:	1bc0      	subs	r0, r0, r7
 800250c:	2802      	cmp	r0, #2
 800250e:	d9c8      	bls.n	80024a2 <RCCEx_PLLSAI2_Config+0x3a>
        status = HAL_TIMEOUT;
 8002510:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002514:	6962      	ldr	r2, [r4, #20]
 8002516:	68eb      	ldr	r3, [r5, #12]
 8002518:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800251c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	4302      	orrs	r2, r0
 8002524:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002528:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002530:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002532:	f7ff f90d 	bl	8001750 <HAL_GetTick>
 8002536:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	d505      	bpl.n	800254a <RCCEx_PLLSAI2_Config+0xe2>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800253e:	6963      	ldr	r3, [r4, #20]
 8002540:	696a      	ldr	r2, [r5, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	6163      	str	r3, [r4, #20]
 8002546:	2000      	movs	r0, #0
  return status;
 8002548:	e7e3      	b.n	8002512 <RCCEx_PLLSAI2_Config+0xaa>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800254a:	f7ff f901 	bl	8001750 <HAL_GetTick>
 800254e:	1b80      	subs	r0, r0, r6
 8002550:	2802      	cmp	r0, #2
 8002552:	d9f1      	bls.n	8002538 <RCCEx_PLLSAI2_Config+0xd0>
 8002554:	e7dc      	b.n	8002510 <RCCEx_PLLSAI2_Config+0xa8>
      status = HAL_ERROR;
 8002556:	2001      	movs	r0, #1
 8002558:	e7db      	b.n	8002512 <RCCEx_PLLSAI2_Config+0xaa>
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002560:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002564:	6806      	ldr	r6, [r0, #0]
 8002566:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800256a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800256c:	d009      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 800256e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002570:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002574:	d022      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002576:	d813      	bhi.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002578:	b331      	cbz	r1, 80025c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800257a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800257e:	d02a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002580:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	04d8      	lsls	r0, r3, #19
 8002586:	d509      	bpl.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002588:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800258a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800258e:	d02c      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002590:	d826      	bhi.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002592:	b381      	cbz	r1, 80025f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8002594:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002598:	d070      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800259a:	2601      	movs	r6, #1
 800259c:	4635      	mov	r5, r6
 800259e:	e039      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 80025a0:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80025a4:	d1ec      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025a6:	4a3b      	ldr	r2, [pc, #236]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025a8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80025aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025b2:	430b      	orrs	r3, r1
 80025b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80025b8:	2600      	movs	r6, #0
 80025ba:	e7e2      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025bc:	4a35      	ldr	r2, [pc, #212]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025be:	68d3      	ldr	r3, [r2, #12]
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 80025c6:	e7ee      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025c8:	3004      	adds	r0, #4
 80025ca:	f7ff fec3 	bl	8002354 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025ce:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80025d0:	2800      	cmp	r0, #0
 80025d2:	d1d6      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x22>
 80025d4:	e7e7      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025d6:	2100      	movs	r1, #0
 80025d8:	3020      	adds	r0, #32
 80025da:	f7ff ff45 	bl	8002468 <RCCEx_PLLSAI2_Config>
 80025de:	e7f6      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 80025e0:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80025e4:	d1d9      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80025e6:	4635      	mov	r5, r6
 80025e8:	e009      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025ea:	4a2a      	ldr	r2, [pc, #168]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025ec:	68d3      	ldr	r3, [r2, #12]
 80025ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f2:	60d3      	str	r3, [r2, #12]
      break;
 80025f4:	e7f7      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025f6:	1d20      	adds	r0, r4, #4
 80025f8:	f7ff feac 	bl	8002354 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025fc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80025fe:	2d00      	cmp	r5, #0
 8002600:	d142      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002602:	4a24      	ldr	r2, [pc, #144]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002604:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002606:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800260a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800260e:	430b      	orrs	r3, r1
 8002610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	0399      	lsls	r1, r3, #14
 8002618:	f140 815e 	bpl.w	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x378>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800261c:	4f1d      	ldr	r7, [pc, #116]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800261e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002620:	00da      	lsls	r2, r3, #3
 8002622:	d433      	bmi.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262a:	65bb      	str	r3, [r7, #88]	; 0x58
 800262c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002636:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800263a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8002698 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800263e:	f8d9 3000 	ldr.w	r3, [r9]
 8002642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002646:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800264a:	f7ff f881 	bl	8001750 <HAL_GetTick>
 800264e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002650:	f8d9 3000 	ldr.w	r3, [r9]
 8002654:	05db      	lsls	r3, r3, #23
 8002656:	d521      	bpl.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    if(ret == HAL_OK)
 8002658:	bb3d      	cbnz	r5, 80026aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800265a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800265e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002662:	f040 810f 	bne.w	8002884 <HAL_RCCEx_PeriphCLKConfig+0x324>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002666:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800266a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800266e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002678:	4635      	mov	r5, r6
 800267a:	e016      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800267c:	2100      	movs	r1, #0
 800267e:	f104 0020 	add.w	r0, r4, #32
 8002682:	f7ff fef1 	bl	8002468 <RCCEx_PLLSAI2_Config>
 8002686:	e7b9      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002688:	462e      	mov	r6, r5
 800268a:	e7c3      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 800268c:	f04f 0800 	mov.w	r8, #0
 8002690:	e7d3      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269c:	f7ff f858 	bl	8001750 <HAL_GetTick>
 80026a0:	eba0 000a 	sub.w	r0, r0, sl
 80026a4:	2802      	cmp	r0, #2
 80026a6:	d9d3      	bls.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 80026a8:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80026aa:	f1b8 0f00 	cmp.w	r8, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b6:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026b8:	6823      	ldr	r3, [r4, #0]
 80026ba:	07da      	lsls	r2, r3, #31
 80026bc:	d508      	bpl.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026be:	499d      	ldr	r1, [pc, #628]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80026c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80026c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026c6:	f022 0203 	bic.w	r2, r2, #3
 80026ca:	4302      	orrs	r2, r0
 80026cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d0:	079f      	lsls	r7, r3, #30
 80026d2:	d508      	bpl.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026d4:	4997      	ldr	r1, [pc, #604]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80026d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80026d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026dc:	f022 020c 	bic.w	r2, r2, #12
 80026e0:	4302      	orrs	r2, r0
 80026e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026e6:	075e      	lsls	r6, r3, #29
 80026e8:	d508      	bpl.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ea:	4992      	ldr	r1, [pc, #584]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80026ec:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80026ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026f2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80026f6:	4302      	orrs	r2, r0
 80026f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026fc:	0718      	lsls	r0, r3, #28
 80026fe:	d508      	bpl.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002700:	498c      	ldr	r1, [pc, #560]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002702:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002704:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002708:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800270c:	4302      	orrs	r2, r0
 800270e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002712:	06d9      	lsls	r1, r3, #27
 8002714:	d508      	bpl.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002716:	4987      	ldr	r1, [pc, #540]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002718:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800271a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800271e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002722:	4302      	orrs	r2, r0
 8002724:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002728:	069a      	lsls	r2, r3, #26
 800272a:	d508      	bpl.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800272c:	4981      	ldr	r1, [pc, #516]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800272e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002730:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002734:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002738:	4302      	orrs	r2, r0
 800273a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800273e:	059f      	lsls	r7, r3, #22
 8002740:	d508      	bpl.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002742:	497c      	ldr	r1, [pc, #496]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002744:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002746:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800274a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800274e:	4302      	orrs	r2, r0
 8002750:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002754:	055e      	lsls	r6, r3, #21
 8002756:	d508      	bpl.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002758:	4976      	ldr	r1, [pc, #472]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800275a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800275c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002760:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002764:	4302      	orrs	r2, r0
 8002766:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800276a:	0658      	lsls	r0, r3, #25
 800276c:	d508      	bpl.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800276e:	4971      	ldr	r1, [pc, #452]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002770:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002772:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002776:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800277a:	4302      	orrs	r2, r0
 800277c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002780:	0619      	lsls	r1, r3, #24
 8002782:	d508      	bpl.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002784:	496b      	ldr	r1, [pc, #428]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002786:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002788:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800278c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002790:	4302      	orrs	r2, r0
 8002792:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002796:	05da      	lsls	r2, r3, #23
 8002798:	d508      	bpl.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800279a:	4966      	ldr	r1, [pc, #408]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800279c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800279e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80027a2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80027a6:	4302      	orrs	r2, r0
 80027a8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027ac:	049b      	lsls	r3, r3, #18
 80027ae:	d510      	bpl.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027b0:	4a60      	ldr	r2, [pc, #384]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80027b2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80027b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027b8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80027bc:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027be:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027c6:	f040 8089 	bne.w	80028dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ca:	68d3      	ldr	r3, [r2, #12]
 80027cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	031f      	lsls	r7, r3, #12
 80027d6:	d510      	bpl.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x29a>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027d8:	4a56      	ldr	r2, [pc, #344]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80027da:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80027dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027e0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80027e4:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027e6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027ee:	f040 8081 	bne.w	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f2:	68d3      	ldr	r3, [r2, #12]
 80027f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027f8:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	035e      	lsls	r6, r3, #13
 80027fe:	d50f      	bpl.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002800:	4a4c      	ldr	r2, [pc, #304]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002802:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002804:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002808:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800280c:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800280e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002812:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002816:	d179      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002818:	68d3      	ldr	r3, [r2, #12]
 800281a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800281e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	0458      	lsls	r0, r3, #17
 8002824:	d512      	bpl.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002826:	4943      	ldr	r1, [pc, #268]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002828:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800282a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800282e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002832:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002834:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800283c:	d171      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800283e:	2102      	movs	r1, #2
 8002840:	1d20      	adds	r0, r4, #4
 8002842:	f7ff fd87 	bl	8002354 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002846:	2800      	cmp	r0, #0
 8002848:	bf18      	it	ne
 800284a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800284c:	6822      	ldr	r2, [r4, #0]
 800284e:	0411      	lsls	r1, r2, #16
 8002850:	d508      	bpl.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002852:	4938      	ldr	r1, [pc, #224]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002854:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002856:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800285a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800285e:	4303      	orrs	r3, r0
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002864:	03d3      	lsls	r3, r2, #15
 8002866:	d509      	bpl.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x31c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002868:	4a32      	ldr	r2, [pc, #200]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800286a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800286e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002872:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002876:	430b      	orrs	r3, r1
 8002878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800287c:	4628      	mov	r0, r5
 800287e:	b002      	add	sp, #8
 8002880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002884:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002888:	4293      	cmp	r3, r2
 800288a:	f43f aeec 	beq.w	8002666 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800288e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002892:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800289e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028a2:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028aa:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80028b0:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028b4:	f57f aed7 	bpl.w	8002666 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 80028b8:	f7fe ff4a 	bl	8001750 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80028c0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028c6:	0799      	lsls	r1, r3, #30
 80028c8:	f53f aecd 	bmi.w	8002666 <HAL_RCCEx_PeriphCLKConfig+0x106>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028cc:	f7fe ff40 	bl	8001750 <HAL_GetTick>
 80028d0:	1b40      	subs	r0, r0, r5
 80028d2:	4548      	cmp	r0, r9
 80028d4:	d9f5      	bls.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80028d6:	e6e7      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80028d8:	4635      	mov	r5, r6
 80028da:	e6ed      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028dc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80028e0:	f47f af77 	bne.w	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x272>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028e4:	2101      	movs	r1, #1
 80028e6:	1d20      	adds	r0, r4, #4
 80028e8:	f7ff fd34 	bl	8002354 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80028ec:	2800      	cmp	r0, #0
 80028ee:	bf18      	it	ne
 80028f0:	4605      	movne	r5, r0
 80028f2:	e76e      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028f4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80028f8:	f47f af7f 	bne.w	80027fa <HAL_RCCEx_PeriphCLKConfig+0x29a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028fc:	2101      	movs	r1, #1
 80028fe:	1d20      	adds	r0, r4, #4
 8002900:	f7ff fd28 	bl	8002354 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002904:	2800      	cmp	r0, #0
 8002906:	bf18      	it	ne
 8002908:	4605      	movne	r5, r0
 800290a:	e776      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x29a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800290c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002910:	d186      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002912:	2101      	movs	r1, #1
 8002914:	1d20      	adds	r0, r4, #4
 8002916:	f7ff fd1d 	bl	8002354 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800291a:	2800      	cmp	r0, #0
 800291c:	bf18      	it	ne
 800291e:	4605      	movne	r5, r0
 8002920:	e77e      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002922:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002926:	d191      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002928:	2102      	movs	r1, #2
 800292a:	f104 0020 	add.w	r0, r4, #32
 800292e:	f7ff fd9b 	bl	8002468 <RCCEx_PLLSAI2_Config>
 8002932:	e788      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002934:	40021000 	.word	0x40021000

08002938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002938:	b570      	push	{r4, r5, r6, lr}
 800293a:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800293c:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800293e:	6921      	ldr	r1, [r4, #16]
 8002940:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002942:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002944:	69c0      	ldr	r0, [r0, #28]
 8002946:	430a      	orrs	r2, r1
 8002948:	6961      	ldr	r1, [r4, #20]
 800294a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800294c:	498f      	ldr	r1, [pc, #572]	; (8002b8c <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800294e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002950:	4029      	ands	r1, r5
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	68e1      	ldr	r1, [r4, #12]
 800295a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800295e:	430a      	orrs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002962:	4a8b      	ldr	r2, [pc, #556]	; (8002b90 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002964:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002966:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002968:	bf1c      	itt	ne
 800296a:	6a22      	ldrne	r2, [r4, #32]
 800296c:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002974:	430a      	orrs	r2, r1
 8002976:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002978:	4a86      	ldr	r2, [pc, #536]	; (8002b94 <UART_SetConfig+0x25c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d117      	bne.n	80029ae <UART_SetConfig+0x76>
 800297e:	4b86      	ldr	r3, [pc, #536]	; (8002b98 <UART_SetConfig+0x260>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	3b01      	subs	r3, #1
 800298a:	2b02      	cmp	r3, #2
 800298c:	f200 80cf 	bhi.w	8002b2e <UART_SetConfig+0x1f6>
 8002990:	4a82      	ldr	r2, [pc, #520]	; (8002b9c <UART_SetConfig+0x264>)
 8002992:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002994:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002998:	f040 8099 	bne.w	8002ace <UART_SetConfig+0x196>
  {
    switch (clocksource)
 800299c:	2b08      	cmp	r3, #8
 800299e:	d822      	bhi.n	80029e6 <UART_SetConfig+0xae>
 80029a0:	e8df f003 	tbb	[pc, r3]
 80029a4:	2193c8d9 	.word	0x2193c8d9
 80029a8:	212121ce 	.word	0x212121ce
 80029ac:	dd          	.byte	0xdd
 80029ad:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ae:	4a7c      	ldr	r2, [pc, #496]	; (8002ba0 <UART_SetConfig+0x268>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d106      	bne.n	80029c2 <UART_SetConfig+0x8a>
 80029b4:	4b78      	ldr	r3, [pc, #480]	; (8002b98 <UART_SetConfig+0x260>)
 80029b6:	4a7b      	ldr	r2, [pc, #492]	; (8002ba4 <UART_SetConfig+0x26c>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	e7e7      	b.n	8002992 <UART_SetConfig+0x5a>
 80029c2:	4a79      	ldr	r2, [pc, #484]	; (8002ba8 <UART_SetConfig+0x270>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d119      	bne.n	80029fc <UART_SetConfig+0xc4>
 80029c8:	4b73      	ldr	r3, [pc, #460]	; (8002b98 <UART_SetConfig+0x260>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	f000 80b7 	beq.w	8002b46 <UART_SetConfig+0x20e>
 80029d8:	d807      	bhi.n	80029ea <UART_SetConfig+0xb2>
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 80b8 	beq.w	8002b50 <UART_SetConfig+0x218>
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	f000 80aa 	beq.w	8002b3a <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029e6:	2001      	movs	r0, #1
 80029e8:	e04e      	b.n	8002a88 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ea:	2b30      	cmp	r3, #48	; 0x30
 80029ec:	d1fb      	bne.n	80029e6 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80029f2:	f000 80b4 	beq.w	8002b5e <UART_SetConfig+0x226>
 80029f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029fa:	e083      	b.n	8002b04 <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029fc:	4a6b      	ldr	r2, [pc, #428]	; (8002bac <UART_SetConfig+0x274>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10f      	bne.n	8002a22 <UART_SetConfig+0xea>
 8002a02:	4b65      	ldr	r3, [pc, #404]	; (8002b98 <UART_SetConfig+0x260>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a0c:	2b80      	cmp	r3, #128	; 0x80
 8002a0e:	f000 809a 	beq.w	8002b46 <UART_SetConfig+0x20e>
 8002a12:	d804      	bhi.n	8002a1e <UART_SetConfig+0xe6>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 809b 	beq.w	8002b50 <UART_SetConfig+0x218>
 8002a1a:	2b40      	cmp	r3, #64	; 0x40
 8002a1c:	e7e1      	b.n	80029e2 <UART_SetConfig+0xaa>
 8002a1e:	2bc0      	cmp	r3, #192	; 0xc0
 8002a20:	e7e4      	b.n	80029ec <UART_SetConfig+0xb4>
 8002a22:	4a63      	ldr	r2, [pc, #396]	; (8002bb0 <UART_SetConfig+0x278>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d112      	bne.n	8002a4e <UART_SetConfig+0x116>
 8002a28:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <UART_SetConfig+0x260>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a36:	f000 8086 	beq.w	8002b46 <UART_SetConfig+0x20e>
 8002a3a:	d805      	bhi.n	8002a48 <UART_SetConfig+0x110>
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8087 	beq.w	8002b50 <UART_SetConfig+0x218>
 8002a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a46:	e7cc      	b.n	80029e2 <UART_SetConfig+0xaa>
 8002a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a4c:	e7ce      	b.n	80029ec <UART_SetConfig+0xb4>
 8002a4e:	4a50      	ldr	r2, [pc, #320]	; (8002b90 <UART_SetConfig+0x258>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d1c8      	bne.n	80029e6 <UART_SetConfig+0xae>
 8002a54:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <UART_SetConfig+0x260>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a62:	d015      	beq.n	8002a90 <UART_SetConfig+0x158>
 8002a64:	d806      	bhi.n	8002a74 <UART_SetConfig+0x13c>
 8002a66:	b15b      	cbz	r3, 8002a80 <UART_SetConfig+0x148>
 8002a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6c:	d1bb      	bne.n	80029e6 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8002a6e:	f7ff f8cf 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
        break;
 8002a72:	e007      	b.n	8002a84 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a78:	d1b5      	bne.n	80029e6 <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8002a7a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a7e:	e008      	b.n	8002a92 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a80:	f7ff fc44 	bl	800230c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002a84:	b928      	cbnz	r0, 8002a92 <UART_SetConfig+0x15a>
 8002a86:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a88:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002a8a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8002a8e:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8002a90:	4848      	ldr	r0, [pc, #288]	; (8002bb4 <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a92:	6862      	ldr	r2, [r4, #4]
 8002a94:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002a98:	4283      	cmp	r3, r0
 8002a9a:	d8a4      	bhi.n	80029e6 <UART_SetConfig+0xae>
 8002a9c:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002aa0:	d8a1      	bhi.n	80029e6 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002aa2:	0851      	lsrs	r1, r2, #1
 8002aa4:	2500      	movs	r5, #0
 8002aa6:	468c      	mov	ip, r1
 8002aa8:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002aac:	4629      	mov	r1, r5
 8002aae:	fbe0 c106 	umlal	ip, r1, r0, r6
 8002ab2:	462b      	mov	r3, r5
 8002ab4:	4660      	mov	r0, ip
 8002ab6:	f7fe f985 	bl	8000dc4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002aba:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <UART_SetConfig+0x280>)
 8002abc:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d890      	bhi.n	80029e6 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	60d8      	str	r0, [r3, #12]
 8002ac8:	e7dd      	b.n	8002a86 <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 8002aca:	483a      	ldr	r0, [pc, #232]	; (8002bb4 <UART_SetConfig+0x27c>)
 8002acc:	e047      	b.n	8002b5e <UART_SetConfig+0x226>
    switch (clocksource)
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d889      	bhi.n	80029e6 <UART_SetConfig+0xae>
 8002ad2:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <UART_SetConfig+0x1a0>)
 8002ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad8:	08002afd 	.word	0x08002afd
 8002adc:	08002b23 	.word	0x08002b23
 8002ae0:	08002b4d 	.word	0x08002b4d
 8002ae4:	080029e7 	.word	0x080029e7
 8002ae8:	08002b29 	.word	0x08002b29
 8002aec:	080029e7 	.word	0x080029e7
 8002af0:	080029e7 	.word	0x080029e7
 8002af4:	080029e7 	.word	0x080029e7
 8002af8:	080029f7 	.word	0x080029f7
        pclk = HAL_RCC_GetPCLK1Freq();
 8002afc:	f7ff fc06 	bl	800230c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d0c0      	beq.n	8002a86 <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b04:	6862      	ldr	r2, [r4, #4]
 8002b06:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002b0a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b0e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002b12:	f1a3 0110 	sub.w	r1, r3, #16
 8002b16:	4291      	cmp	r1, r2
 8002b18:	f63f af65 	bhi.w	80029e6 <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b1c:	6822      	ldr	r2, [r4, #0]
 8002b1e:	60d3      	str	r3, [r2, #12]
 8002b20:	e7b1      	b.n	8002a86 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b22:	f7ff fc05 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
        break;
 8002b26:	e7eb      	b.n	8002b00 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002b28:	f7ff f872 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
        break;
 8002b2c:	e7e8      	b.n	8002b00 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b2e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002b32:	d1f6      	bne.n	8002b22 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b34:	f7ff fbfc 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
        break;
 8002b38:	e00f      	b.n	8002b5a <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b3a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002b3e:	d1f3      	bne.n	8002b28 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 8002b40:	f7ff f866 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
        break;
 8002b44:	e009      	b.n	8002b5a <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b46:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002b4a:	d0be      	beq.n	8002aca <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 8002b4c:	4819      	ldr	r0, [pc, #100]	; (8002bb4 <UART_SetConfig+0x27c>)
 8002b4e:	e7d9      	b.n	8002b04 <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b50:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002b54:	d1d2      	bne.n	8002afc <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b56:	f7ff fbd9 	bl	800230c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002b5a:	2800      	cmp	r0, #0
 8002b5c:	d093      	beq.n	8002a86 <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b5e:	6862      	ldr	r2, [r4, #4]
 8002b60:	0853      	lsrs	r3, r2, #1
 8002b62:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b66:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b6a:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b6e:	f1a0 0210 	sub.w	r2, r0, #16
 8002b72:	429a      	cmp	r2, r3
 8002b74:	f63f af37 	bhi.w	80029e6 <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b78:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8002b7c:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b7e:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b80:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8002b84:	4318      	orrs	r0, r3
 8002b86:	60d0      	str	r0, [r2, #12]
 8002b88:	e77d      	b.n	8002a86 <UART_SetConfig+0x14e>
 8002b8a:	bf00      	nop
 8002b8c:	efff69f3 	.word	0xefff69f3
 8002b90:	40008000 	.word	0x40008000
 8002b94:	40013800 	.word	0x40013800
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	0800c5ac 	.word	0x0800c5ac
 8002ba0:	40004400 	.word	0x40004400
 8002ba4:	0800c5af 	.word	0x0800c5af
 8002ba8:	40004800 	.word	0x40004800
 8002bac:	40004c00 	.word	0x40004c00
 8002bb0:	40005000 	.word	0x40005000
 8002bb4:	00f42400 	.word	0x00f42400
 8002bb8:	000ffcff 	.word	0x000ffcff

08002bbc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002bbe:	07da      	lsls	r2, r3, #31
{
 8002bc0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bc2:	d506      	bpl.n	8002bd2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bc4:	6801      	ldr	r1, [r0, #0]
 8002bc6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002bc8:	684a      	ldr	r2, [r1, #4]
 8002bca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002bce:	4322      	orrs	r2, r4
 8002bd0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bd2:	079c      	lsls	r4, r3, #30
 8002bd4:	d506      	bpl.n	8002be4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bd6:	6801      	ldr	r1, [r0, #0]
 8002bd8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002bda:	684a      	ldr	r2, [r1, #4]
 8002bdc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002be0:	4322      	orrs	r2, r4
 8002be2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002be4:	0759      	lsls	r1, r3, #29
 8002be6:	d506      	bpl.n	8002bf6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002be8:	6801      	ldr	r1, [r0, #0]
 8002bea:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002bec:	684a      	ldr	r2, [r1, #4]
 8002bee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bf2:	4322      	orrs	r2, r4
 8002bf4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bf6:	071a      	lsls	r2, r3, #28
 8002bf8:	d506      	bpl.n	8002c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bfa:	6801      	ldr	r1, [r0, #0]
 8002bfc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002bfe:	684a      	ldr	r2, [r1, #4]
 8002c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c04:	4322      	orrs	r2, r4
 8002c06:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c08:	06dc      	lsls	r4, r3, #27
 8002c0a:	d506      	bpl.n	8002c1a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c0c:	6801      	ldr	r1, [r0, #0]
 8002c0e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002c10:	688a      	ldr	r2, [r1, #8]
 8002c12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c16:	4322      	orrs	r2, r4
 8002c18:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c1a:	0699      	lsls	r1, r3, #26
 8002c1c:	d506      	bpl.n	8002c2c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c1e:	6801      	ldr	r1, [r0, #0]
 8002c20:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002c22:	688a      	ldr	r2, [r1, #8]
 8002c24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c28:	4322      	orrs	r2, r4
 8002c2a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c2c:	065a      	lsls	r2, r3, #25
 8002c2e:	d50f      	bpl.n	8002c50 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c30:	6801      	ldr	r1, [r0, #0]
 8002c32:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002c34:	684a      	ldr	r2, [r1, #4]
 8002c36:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002c3a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c3c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c40:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c42:	d105      	bne.n	8002c50 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c44:	684a      	ldr	r2, [r1, #4]
 8002c46:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002c48:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002c4c:	4322      	orrs	r2, r4
 8002c4e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c50:	061b      	lsls	r3, r3, #24
 8002c52:	d506      	bpl.n	8002c62 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c54:	6802      	ldr	r2, [r0, #0]
 8002c56:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002c58:	6853      	ldr	r3, [r2, #4]
 8002c5a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	6053      	str	r3, [r2, #4]
  }
}
 8002c62:	bd10      	pop	{r4, pc}

08002c64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c68:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	460e      	mov	r6, r1
 8002c70:	4615      	mov	r5, r2
 8002c72:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c74:	6822      	ldr	r2, [r4, #0]
 8002c76:	69d3      	ldr	r3, [r2, #28]
 8002c78:	ea36 0303 	bics.w	r3, r6, r3
 8002c7c:	bf0c      	ite	eq
 8002c7e:	2301      	moveq	r3, #1
 8002c80:	2300      	movne	r3, #0
 8002c82:	42ab      	cmp	r3, r5
 8002c84:	d001      	beq.n	8002c8a <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002c86:	2000      	movs	r0, #0
 8002c88:	e025      	b.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 8002c8a:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002c8e:	d0f2      	beq.n	8002c76 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c90:	f7fe fd5e 	bl	8001750 <HAL_GetTick>
 8002c94:	1bc0      	subs	r0, r0, r7
 8002c96:	4540      	cmp	r0, r8
 8002c98:	6820      	ldr	r0, [r4, #0]
 8002c9a:	d802      	bhi.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0x3e>
 8002c9c:	f1b8 0f00 	cmp.w	r8, #0
 8002ca0:	d11b      	bne.n	8002cda <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca2:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ca6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002caa:	e840 3200 	strex	r2, r3, [r0]
 8002cae:	2a00      	cmp	r2, #0
 8002cb0:	d1f7      	bne.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb2:	f100 0308 	add.w	r3, r0, #8
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cba:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbe:	f100 0108 	add.w	r1, r0, #8
 8002cc2:	e841 3200 	strex	r2, r3, [r1]
 8002cc6:	2a00      	cmp	r2, #0
 8002cc8:	d1f3      	bne.n	8002cb2 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8002cca:	2320      	movs	r3, #32
 8002ccc:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002cce:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002cd0:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8002cd4:	2003      	movs	r0, #3
}
 8002cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002cda:	6803      	ldr	r3, [r0, #0]
 8002cdc:	075a      	lsls	r2, r3, #29
 8002cde:	d5c9      	bpl.n	8002c74 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ce0:	69c3      	ldr	r3, [r0, #28]
 8002ce2:	051b      	lsls	r3, r3, #20
 8002ce4:	d5c6      	bpl.n	8002c74 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ce6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cea:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf4:	e840 3200 	strex	r2, r3, [r0]
 8002cf8:	2a00      	cmp	r2, #0
 8002cfa:	d1f7      	bne.n	8002cec <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfc:	f100 0308 	add.w	r3, r0, #8
 8002d00:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d04:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	f100 0108 	add.w	r1, r0, #8
 8002d0c:	e841 3200 	strex	r2, r3, [r1]
 8002d10:	2a00      	cmp	r2, #0
 8002d12:	d1f3      	bne.n	8002cfc <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8002d14:	2320      	movs	r3, #32
 8002d16:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002d18:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d1a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8002d1e:	e7d7      	b.n	8002cd0 <UART_WaitOnFlagUntilTimeout+0x6c>

08002d20 <HAL_UART_Transmit>:
{
 8002d20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002d24:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002d26:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002d28:	2b20      	cmp	r3, #32
{
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	460e      	mov	r6, r1
 8002d2e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002d30:	d14e      	bne.n	8002dd0 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8002d32:	2900      	cmp	r1, #0
 8002d34:	d04a      	beq.n	8002dcc <HAL_UART_Transmit+0xac>
 8002d36:	2a00      	cmp	r2, #0
 8002d38:	d048      	beq.n	8002dcc <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002d3a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d046      	beq.n	8002dd0 <HAL_UART_Transmit+0xb0>
 8002d42:	2301      	movs	r3, #1
 8002d44:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d48:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d4a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d4c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d50:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8002d52:	f7fe fcfd 	bl	8001750 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d56:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8002d58:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d5c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002d60:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8002d62:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d66:	d103      	bne.n	8002d70 <HAL_UART_Transmit+0x50>
 8002d68:	6922      	ldr	r2, [r4, #16]
 8002d6a:	b90a      	cbnz	r2, 8002d70 <HAL_UART_Transmit+0x50>
 8002d6c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002d6e:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8002d70:	2200      	movs	r2, #0
 8002d72:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8002d76:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002d7e:	b292      	uxth	r2, r2
 8002d80:	b93a      	cbnz	r2, 8002d92 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d82:	2140      	movs	r1, #64	; 0x40
 8002d84:	4620      	mov	r0, r4
 8002d86:	f7ff ff6d 	bl	8002c64 <UART_WaitOnFlagUntilTimeout>
 8002d8a:	b950      	cbnz	r0, 8002da2 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8002d90:	e008      	b.n	8002da4 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d92:	2200      	movs	r2, #0
 8002d94:	2180      	movs	r1, #128	; 0x80
 8002d96:	4620      	mov	r0, r4
 8002d98:	9303      	str	r3, [sp, #12]
 8002d9a:	f7ff ff63 	bl	8002c64 <UART_WaitOnFlagUntilTimeout>
 8002d9e:	9b03      	ldr	r3, [sp, #12]
 8002da0:	b118      	cbz	r0, 8002daa <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8002da2:	2003      	movs	r0, #3
}
 8002da4:	b004      	add	sp, #16
 8002da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002daa:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8002dac:	b95e      	cbnz	r6, 8002dc6 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dae:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002db2:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db6:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002db8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002dbc:	3a01      	subs	r2, #1
 8002dbe:	b292      	uxth	r2, r2
 8002dc0:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8002dc4:	e7d7      	b.n	8002d76 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dc6:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002dca:	e7f4      	b.n	8002db6 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8002dcc:	2001      	movs	r0, #1
 8002dce:	e7e9      	b.n	8002da4 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8002dd0:	2002      	movs	r0, #2
 8002dd2:	e7e7      	b.n	8002da4 <HAL_UART_Transmit+0x84>

08002dd4 <HAL_UART_Receive>:
{
 8002dd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002dd8:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dda:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002ddc:	2b20      	cmp	r3, #32
{
 8002dde:	4604      	mov	r4, r0
 8002de0:	460d      	mov	r5, r1
 8002de2:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002de4:	d168      	bne.n	8002eb8 <HAL_UART_Receive+0xe4>
    if ((pData == NULL) || (Size == 0U))
 8002de6:	2900      	cmp	r1, #0
 8002de8:	d064      	beq.n	8002eb4 <HAL_UART_Receive+0xe0>
 8002dea:	2a00      	cmp	r2, #0
 8002dec:	d062      	beq.n	8002eb4 <HAL_UART_Receive+0xe0>
    __HAL_LOCK(huart);
 8002dee:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d060      	beq.n	8002eb8 <HAL_UART_Receive+0xe4>
 8002df6:	2301      	movs	r3, #1
 8002df8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfc:	f04f 0800 	mov.w	r8, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e00:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e02:	f8c0 8080 	str.w	r8, [r0, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e06:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e08:	f8c0 8060 	str.w	r8, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 8002e0c:	f7fe fca0 	bl	8001750 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8002e10:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8002e12:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002e1a:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 8002e1c:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002e20:	d11c      	bne.n	8002e5c <HAL_UART_Receive+0x88>
 8002e22:	6922      	ldr	r2, [r4, #16]
 8002e24:	b9c2      	cbnz	r2, 8002e58 <HAL_UART_Receive+0x84>
 8002e26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002e2a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 8002e32:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e36:	d122      	bne.n	8002e7e <HAL_UART_Receive+0xaa>
 8002e38:	6923      	ldr	r3, [r4, #16]
 8002e3a:	bb03      	cbnz	r3, 8002e7e <HAL_UART_Receive+0xaa>
 8002e3c:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8002e3e:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 8002e40:	2300      	movs	r3, #0
 8002e42:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->RxXferCount > 0U)
 8002e46:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8002e4a:	b290      	uxth	r0, r2
 8002e4c:	b9c8      	cbnz	r0, 8002e82 <HAL_UART_Receive+0xae>
    huart->RxState = HAL_UART_STATE_READY;
 8002e4e:	2320      	movs	r3, #32
 8002e50:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8002e52:	b003      	add	sp, #12
 8002e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	e7e6      	b.n	8002e2a <HAL_UART_Receive+0x56>
 8002e5c:	b923      	cbnz	r3, 8002e68 <HAL_UART_Receive+0x94>
 8002e5e:	6922      	ldr	r2, [r4, #16]
 8002e60:	2a00      	cmp	r2, #0
 8002e62:	d0f9      	beq.n	8002e58 <HAL_UART_Receive+0x84>
 8002e64:	227f      	movs	r2, #127	; 0x7f
 8002e66:	e7e0      	b.n	8002e2a <HAL_UART_Receive+0x56>
 8002e68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e6c:	d104      	bne.n	8002e78 <HAL_UART_Receive+0xa4>
 8002e6e:	6922      	ldr	r2, [r4, #16]
 8002e70:	2a00      	cmp	r2, #0
 8002e72:	d0f7      	beq.n	8002e64 <HAL_UART_Receive+0x90>
 8002e74:	223f      	movs	r2, #63	; 0x3f
 8002e76:	e7d8      	b.n	8002e2a <HAL_UART_Receive+0x56>
 8002e78:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
 8002e7c:	e7d7      	b.n	8002e2e <HAL_UART_Receive+0x5a>
      pdata16bits = NULL;
 8002e7e:	2600      	movs	r6, #0
 8002e80:	e7de      	b.n	8002e40 <HAL_UART_Receive+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e82:	9700      	str	r7, [sp, #0]
 8002e84:	464b      	mov	r3, r9
 8002e86:	2200      	movs	r2, #0
 8002e88:	2120      	movs	r1, #32
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f7ff feea 	bl	8002c64 <UART_WaitOnFlagUntilTimeout>
 8002e90:	b9a0      	cbnz	r0, 8002ebc <HAL_UART_Receive+0xe8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e96:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 8002e9a:	b945      	cbnz	r5, 8002eae <HAL_UART_Receive+0xda>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002e9c:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8002ea0:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8002ea4:	3a01      	subs	r2, #1
 8002ea6:	b292      	uxth	r2, r2
 8002ea8:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8002eac:	e7cb      	b.n	8002e46 <HAL_UART_Receive+0x72>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002eae:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8002eb2:	e7f5      	b.n	8002ea0 <HAL_UART_Receive+0xcc>
      return  HAL_ERROR;
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	e7cc      	b.n	8002e52 <HAL_UART_Receive+0x7e>
    return HAL_BUSY;
 8002eb8:	2002      	movs	r0, #2
 8002eba:	e7ca      	b.n	8002e52 <HAL_UART_Receive+0x7e>
        return HAL_TIMEOUT;
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	e7c8      	b.n	8002e52 <HAL_UART_Receive+0x7e>

08002ec0 <UART_CheckIdleState>:
{
 8002ec0:	b530      	push	{r4, r5, lr}
 8002ec2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec4:	2500      	movs	r5, #0
{
 8002ec6:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8002ecc:	f7fe fc40 	bl	8001750 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ed0:	6822      	ldr	r2, [r4, #0]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8002ed6:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ed8:	d415      	bmi.n	8002f06 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eda:	6822      	ldr	r2, [r4, #0]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	0752      	lsls	r2, r2, #29
 8002ee0:	d509      	bpl.n	8002ef6 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ee2:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002ee6:	9200      	str	r2, [sp, #0]
 8002ee8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002eec:	2200      	movs	r2, #0
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f7ff feb8 	bl	8002c64 <UART_WaitOnFlagUntilTimeout>
 8002ef4:	b9a0      	cbnz	r0, 8002f20 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002ef6:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002efa:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002efc:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002f00:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f02:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8002f04:	e00d      	b.n	8002f22 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f06:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002f0a:	9200      	str	r2, [sp, #0]
 8002f0c:	9003      	str	r0, [sp, #12]
 8002f0e:	462a      	mov	r2, r5
 8002f10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f14:	4620      	mov	r0, r4
 8002f16:	f7ff fea5 	bl	8002c64 <UART_WaitOnFlagUntilTimeout>
 8002f1a:	9b03      	ldr	r3, [sp, #12]
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d0dc      	beq.n	8002eda <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002f20:	2003      	movs	r0, #3
}
 8002f22:	b005      	add	sp, #20
 8002f24:	bd30      	pop	{r4, r5, pc}

08002f26 <HAL_UART_Init>:
{
 8002f26:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002f28:	4604      	mov	r4, r0
 8002f2a:	b340      	cbz	r0, 8002f7e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002f2e:	b91b      	cbnz	r3, 8002f38 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002f30:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8002f34:	f7fe fb02 	bl	800153c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002f38:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002f3a:	2324      	movs	r3, #36	; 0x24
 8002f3c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002f3e:	6813      	ldr	r3, [r2, #0]
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f46:	4620      	mov	r0, r4
 8002f48:	f7ff fcf6 	bl	8002938 <UART_SetConfig>
 8002f4c:	2801      	cmp	r0, #1
 8002f4e:	d016      	beq.n	8002f7e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f52:	b113      	cbz	r3, 8002f5a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7ff fe31 	bl	8002bbc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f6a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002f72:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002f74:	601a      	str	r2, [r3, #0]
}
 8002f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002f7a:	f7ff bfa1 	b.w	8002ec0 <UART_CheckIdleState>
}
 8002f7e:	2001      	movs	r0, #1
 8002f80:	bd10      	pop	{r4, pc}
	...

08002f84 <write_callback>:
  o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *pr = (uint8_t *)buf;

  UNUSED(stream);

  while (count) {
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002f86:	4d0e      	ldr	r5, [pc, #56]	; (8002fc0 <write_callback+0x3c>)
{
 8002f88:	460e      	mov	r6, r1
 8002f8a:	4614      	mov	r4, r2
  bool res = true;
 8002f8c:	2001      	movs	r0, #1
      pr++;
      count--;
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
      res = write_packet();
      o_packet.pw = 0;
 8002f8e:	2700      	movs	r7, #0
  while (count) {
 8002f90:	b93c      	cbnz	r4, 8002fa2 <write_callback+0x1e>
 8002f92:	e00b      	b.n	8002fac <write_callback+0x28>
      o_packet.payload[o_packet.pw] = *pr;
 8002f94:	18ea      	adds	r2, r5, r3
 8002f96:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002f9a:	7051      	strb	r1, [r2, #1]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002f9c:	3301      	adds	r3, #1
      count--;
 8002f9e:	3c01      	subs	r4, #1
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002fa0:	702b      	strb	r3, [r5, #0]
 8002fa2:	782b      	ldrb	r3, [r5, #0]
 8002fa4:	2b1f      	cmp	r3, #31
 8002fa6:	d802      	bhi.n	8002fae <write_callback+0x2a>
 8002fa8:	2c00      	cmp	r4, #0
 8002faa:	d1f3      	bne.n	8002f94 <write_callback+0x10>
    }
  }
  return res;
}
 8002fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	d1ee      	bne.n	8002f90 <write_callback+0xc>
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002fb2:	2121      	movs	r1, #33	; 0x21
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	f000 fcb5 	bl	8003924 <ioRawWriteBuffer>
      o_packet.pw = 0;
 8002fba:	702f      	strb	r7, [r5, #0]
 8002fbc:	e7e8      	b.n	8002f90 <write_callback+0xc>
 8002fbe:	bf00      	nop
 8002fc0:	20000bd4 	.word	0x20000bd4

08002fc4 <read_callback>:
  i_packet.pr = 0xFF;
  i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 8002fc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002fc8:	460f      	mov	r7, r1
  bool res = true;
  uint8_t *pw = (uint8_t *)buf;

  UNUSED(stream);

  if (count == 0)
 8002fca:	4614      	mov	r4, r2
 8002fcc:	b1f2      	cbz	r2, 800300c <read_callback+0x48>
    return true;

  if (i_packet.pr == 0xFF)
 8002fce:	4d1d      	ldr	r5, [pc, #116]	; (8003044 <read_callback+0x80>)
 8002fd0:	4e1d      	ldr	r6, [pc, #116]	; (8003048 <read_callback+0x84>)
 8002fd2:	782b      	ldrb	r3, [r5, #0]
 8002fd4:	2bff      	cmp	r3, #255	; 0xff
 8002fd6:	d11b      	bne.n	8003010 <read_callback+0x4c>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002fd8:	2121      	movs	r1, #33	; 0x21
 8002fda:	4628      	mov	r0, r5
 8002fdc:	f000 fcb0 	bl	8003940 <ioRawReadBuffer>
  i_ridx = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	6033      	str	r3, [r6, #0]
    res = read_packet();

  if (res == false)
 8002fe4:	b9a0      	cbnz	r0, 8003010 <read_callback+0x4c>
      read_packet();
    }
  }

  return res;
}
 8002fe6:	b003      	add	sp, #12
 8002fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *pw = i_packet.payload[i_ridx];
 8002fec:	5cea      	ldrb	r2, [r5, r3]
 8002fee:	f807 2b01 	strb.w	r2, [r7], #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002ff2:	782a      	ldrb	r2, [r5, #0]
 8002ff4:	3a01      	subs	r2, #1
 8002ff6:	702a      	strb	r2, [r5, #0]
      count--;
 8002ff8:	3c01      	subs	r4, #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	7828      	ldrb	r0, [r5, #0]
 8002ffe:	4619      	mov	r1, r3
 8003000:	b158      	cbz	r0, 800301a <read_callback+0x56>
 8003002:	3301      	adds	r3, #1
 8003004:	2c00      	cmp	r4, #0
 8003006:	d1f1      	bne.n	8002fec <read_callback+0x28>
 8003008:	b102      	cbz	r2, 800300c <read_callback+0x48>
 800300a:	6031      	str	r1, [r6, #0]
 800300c:	2001      	movs	r0, #1
 800300e:	e7ea      	b.n	8002fe6 <read_callback+0x22>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8003010:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8003044 <read_callback+0x80>
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8003014:	f04f 0900 	mov.w	r9, #0
 8003018:	e011      	b.n	800303e <read_callback+0x7a>
 800301a:	b102      	cbz	r2, 800301e <read_callback+0x5a>
 800301c:	6033      	str	r3, [r6, #0]
    if (count && i_packet.pr == 0) {
 800301e:	2c00      	cmp	r4, #0
 8003020:	d0f4      	beq.n	800300c <read_callback+0x48>
      uint8_t sync = 0xAA;
 8003022:	23aa      	movs	r3, #170	; 0xaa
      ioRawWriteBuffer(&sync, 1);
 8003024:	2101      	movs	r1, #1
 8003026:	f10d 0007 	add.w	r0, sp, #7
      uint8_t sync = 0xAA;
 800302a:	f88d 3007 	strb.w	r3, [sp, #7]
      ioRawWriteBuffer(&sync, 1);
 800302e:	f000 fc79 	bl	8003924 <ioRawWriteBuffer>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8003032:	2121      	movs	r1, #33	; 0x21
 8003034:	4640      	mov	r0, r8
 8003036:	f000 fc83 	bl	8003940 <ioRawReadBuffer>
  i_ridx = 0;
 800303a:	f8c6 9000 	str.w	r9, [r6]
  while (count) {
 800303e:	6833      	ldr	r3, [r6, #0]
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8003040:	2200      	movs	r2, #0
 8003042:	e7db      	b.n	8002ffc <read_callback+0x38>
 8003044:	20000bac 	.word	0x20000bac
 8003048:	20000bd0 	.word	0x20000bd0

0800304c <pb_io_flush_ostream>:
{
 800304c:	b510      	push	{r4, lr}
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 800304e:	4c06      	ldr	r4, [pc, #24]	; (8003068 <pb_io_flush_ostream+0x1c>)
 8003050:	7823      	ldrb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8003052:	2121      	movs	r1, #33	; 0x21
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8003054:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8003058:	4620      	mov	r0, r4
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 800305a:	7023      	strb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 800305c:	f000 fc62 	bl	8003924 <ioRawWriteBuffer>
  o_packet.pw = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	7023      	strb	r3, [r4, #0]
}
 8003064:	bd10      	pop	{r4, pc}
 8003066:	bf00      	nop
 8003068:	20000bd4 	.word	0x20000bd4

0800306c <pb_io_flush_istream>:
  i_packet.pr = 0xFF;
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <pb_io_flush_istream+0x10>)
 800306e:	22ff      	movs	r2, #255	; 0xff
 8003070:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 8003072:	4b03      	ldr	r3, [pc, #12]	; (8003080 <pb_io_flush_istream+0x14>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
}
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000bac 	.word	0x20000bac
 8003080:	20000bd0 	.word	0x20000bd0

08003084 <pb_io_ostream>:

pb_ostream_t pb_io_ostream(int fd)
{
 8003084:	b510      	push	{r4, lr}
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 8003086:	2200      	movs	r2, #0
 8003088:	e9c0 2203 	strd	r2, r2, [r0, #12]
  return stream;
 800308c:	4a03      	ldr	r2, [pc, #12]	; (800309c <pb_io_ostream+0x18>)
 800308e:	e9c0 2100 	strd	r2, r1, [r0]
 8003092:	f04f 32ff 	mov.w	r2, #4294967295
 8003096:	6082      	str	r2, [r0, #8]
}
 8003098:	bd10      	pop	{r4, pc}
 800309a:	bf00      	nop
 800309c:	08002f85 	.word	0x08002f85

080030a0 <pb_io_istream>:

pb_istream_t pb_io_istream(int fd)
{
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 80030a0:	2200      	movs	r2, #0
 80030a2:	60c2      	str	r2, [r0, #12]
  return stream;
 80030a4:	4a03      	ldr	r2, [pc, #12]	; (80030b4 <pb_io_istream+0x14>)
 80030a6:	e9c0 2100 	strd	r2, r1, [r0]
 80030aa:	f04f 32ff 	mov.w	r2, #4294967295
 80030ae:	6082      	str	r2, [r0, #8]
}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	08002fc5 	.word	0x08002fc5

080030b8 <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 80030b8:	b508      	push	{r3, lr}
  ioRawDisableLLWrite();
 80030ba:	f000 fc4f 	bl	800395c <ioRawDisableLLWrite>
  return 0;
}
 80030be:	2000      	movs	r0, #0
 80030c0:	bd08      	pop	{r3, pc}

080030c2 <aiPbBuffer_read_cb3>:
  return (size_t)AI_BUFFER_BYTE_SIZE(1,format);
}

static bool aiPbBuffer_read_cb3(pb_istream_t *stream, const pb_field_t *field,
    void **arg)
{
 80030c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 80030c6:	6814      	ldr	r4, [r2, #0]
  size_t itsize;

  UNUSED(field);

  int maxr = bm->n_max;
  msg = (aiBufferByteMsg *)bm->msg;
 80030c8:	6922      	ldr	r2, [r4, #16]
  int maxr = bm->n_max;
 80030ca:	6866      	ldr	r6, [r4, #4]
  return (ai_buffer_format)msgFmt;
 80030cc:	6815      	ldr	r5, [r2, #0]
  format = aiPbMsgFmtToAiFmt(msg->shape.format);

  /* todo(jmd) - adding scale/zeropoint values */

      /* Check shape/format */
      bm->err = EnumError_E_NONE;
 80030ce:	2300      	movs	r3, #0
      if ((format == AI_BUFFER_FORMAT_NONE) || (format != bm->buffer->format)) {
 80030d0:	2d40      	cmp	r5, #64	; 0x40
      bm->err = EnumError_E_NONE;
 80030d2:	60e3      	str	r3, [r4, #12]
{
 80030d4:	4607      	mov	r7, r0
      if ((format == AI_BUFFER_FORMAT_NONE) || (format != bm->buffer->format)) {
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	d002      	beq.n	80030e0 <aiPbBuffer_read_cb3+0x1e>
 80030da:	6819      	ldr	r1, [r3, #0]
 80030dc:	42a9      	cmp	r1, r5
 80030de:	d017      	beq.n	8003110 <aiPbBuffer_read_cb3+0x4e>
        maxr = 0;
        bm->err = EnumError_E_INVALID_FORMAT;
 80030e0:	2202      	movs	r2, #2
      } else if ((msg->shape.channels != bm->buffer->channels) ||
          (msg->shape.height != bm->buffer->height) ||
          (msg->shape.width != bm->buffer->width) ||
          (msg->shape.n_batches != bm->buffer->n_batches)) {
        maxr = 0;
        bm->err = EnumError_E_INVALID_SHAPE;
 80030e2:	60e2      	str	r2, [r4, #12]
        maxr = 0;
 80030e4:	2600      	movs	r6, #0
  return (size_t)AI_BUFFER_BYTE_SIZE(1,format);
 80030e6:	f3c5 15c6 	ubfx	r5, r5, #7, #7
 80030ea:	3504      	adds	r5, #4
      }

      itsize = aiPbBufferGetItemSize(format);

      /* Read data */
      uint8_t *pw = (uint8_t *)bm->buffer->data;
 80030ec:	f8d3 8010 	ldr.w	r8, [r3, #16]
  return (size_t)AI_BUFFER_BYTE_SIZE(1,format);
 80030f0:	10ed      	asrs	r5, r5, #3
      while (stream->bytes_left) {
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	b9f3      	cbnz	r3, 8003134 <aiPbBuffer_read_cb3+0x72>
        }
        bm->n_ops++;
      }

      /* Check nb_op */
      if ((bm->err == EnumError_E_NONE) && (bm->n_ops != bm->n_max))
 80030f6:	68e3      	ldr	r3, [r4, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d132      	bne.n	8003162 <aiPbBuffer_read_cb3+0xa0>
 80030fc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	f04f 0001 	mov.w	r0, #1
 8003106:	d000      	beq.n	800310a <aiPbBuffer_read_cb3+0x48>
        bm->err = EnumError_E_INVALID_SIZE;
 8003108:	60e0      	str	r0, [r4, #12]

      return true;
}
 800310a:	b002      	add	sp, #8
 800310c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if ((msg->shape.channels != bm->buffer->channels) ||
 8003110:	6910      	ldr	r0, [r2, #16]
 8003112:	68d9      	ldr	r1, [r3, #12]
 8003114:	4288      	cmp	r0, r1
 8003116:	d10b      	bne.n	8003130 <aiPbBuffer_read_cb3+0x6e>
          (msg->shape.height != bm->buffer->height) ||
 8003118:	88d9      	ldrh	r1, [r3, #6]
      } else if ((msg->shape.channels != bm->buffer->channels) ||
 800311a:	6890      	ldr	r0, [r2, #8]
 800311c:	4288      	cmp	r0, r1
 800311e:	d107      	bne.n	8003130 <aiPbBuffer_read_cb3+0x6e>
          (msg->shape.width != bm->buffer->width) ||
 8003120:	8919      	ldrh	r1, [r3, #8]
          (msg->shape.height != bm->buffer->height) ||
 8003122:	68d0      	ldr	r0, [r2, #12]
 8003124:	4288      	cmp	r0, r1
 8003126:	d103      	bne.n	8003130 <aiPbBuffer_read_cb3+0x6e>
          (msg->shape.n_batches != bm->buffer->n_batches)) {
 8003128:	8899      	ldrh	r1, [r3, #4]
          (msg->shape.width != bm->buffer->width) ||
 800312a:	6852      	ldr	r2, [r2, #4]
 800312c:	428a      	cmp	r2, r1
 800312e:	d0da      	beq.n	80030e6 <aiPbBuffer_read_cb3+0x24>
        bm->err = EnumError_E_INVALID_SHAPE;
 8003130:	2205      	movs	r2, #5
 8003132:	e7d6      	b.n	80030e2 <aiPbBuffer_read_cb3+0x20>
        if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 8003134:	462a      	mov	r2, r5
 8003136:	4669      	mov	r1, sp
 8003138:	4638      	mov	r0, r7
 800313a:	f001 fc93 	bl	8004a64 <pb_read>
 800313e:	2800      	cmp	r0, #0
 8003140:	d0e3      	beq.n	800310a <aiPbBuffer_read_cb3+0x48>
        if (maxr > 0) {
 8003142:	2e00      	cmp	r6, #0
 8003144:	dd09      	ble.n	800315a <aiPbBuffer_read_cb3+0x98>
          if (pw) {
 8003146:	f1b8 0f00 	cmp.w	r8, #0
 800314a:	d005      	beq.n	8003158 <aiPbBuffer_read_cb3+0x96>
            memcpy(pw, &number, itsize);
 800314c:	4640      	mov	r0, r8
 800314e:	462a      	mov	r2, r5
 8003150:	4669      	mov	r1, sp
 8003152:	f006 fac9 	bl	80096e8 <memcpy>
            pw += itsize;
 8003156:	44a8      	add	r8, r5
          maxr--;
 8003158:	3e01      	subs	r6, #1
        bm->n_ops++;
 800315a:	68a3      	ldr	r3, [r4, #8]
 800315c:	3301      	adds	r3, #1
 800315e:	60a3      	str	r3, [r4, #8]
 8003160:	e7c7      	b.n	80030f2 <aiPbBuffer_read_cb3+0x30>
      return true;
 8003162:	2001      	movs	r0, #1
 8003164:	e7d1      	b.n	800310a <aiPbBuffer_read_cb3+0x48>

08003166 <aiPbMgrSetMetaInfo.constprop.0>:
}

static void aiPbMgrSetMetaInfo(const ai_buffer_meta_info *meta_info, const int idx,
    aiBufferShapeMsg *shape)
{
  shape->scale = 0.0f;
 8003166:	2300      	movs	r3, #0
  shape->zeropoint = 0;
 8003168:	2200      	movs	r2, #0
static void aiPbMgrSetMetaInfo(const ai_buffer_meta_info *meta_info, const int idx,
 800316a:	b510      	push	{r4, lr}
  shape->scale = 0.0f;
 800316c:	614b      	str	r3, [r1, #20]
  shape->zeropoint = 0;
 800316e:	618a      	str	r2, [r1, #24]
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 8003170:	b1a0      	cbz	r0, 800319c <aiPbMgrSetMetaInfo.constprop.0+0x36>
 8003172:	6802      	ldr	r2, [r0, #0]
 8003174:	07d2      	lsls	r2, r2, #31
 8003176:	d511      	bpl.n	800319c <aiPbMgrSetMetaInfo.constprop.0+0x36>
 8003178:	6840      	ldr	r0, [r0, #4]
 800317a:	b178      	cbz	r0, 800319c <aiPbMgrSetMetaInfo.constprop.0+0x36>
    shape->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, idx);
 800317c:	6842      	ldr	r2, [r0, #4]
 800317e:	b11a      	cbz	r2, 8003188 <aiPbMgrSetMetaInfo.constprop.0+0x22>
 8003180:	8844      	ldrh	r4, [r0, #2]
 8003182:	b10c      	cbz	r4, 8003188 <aiPbMgrSetMetaInfo.constprop.0+0x22>
 8003184:	6813      	ldr	r3, [r2, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	614b      	str	r3, [r1, #20]
    shape->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, idx);
 800318a:	8803      	ldrh	r3, [r0, #0]
 800318c:	079b      	lsls	r3, r3, #30
 800318e:	d506      	bpl.n	800319e <aiPbMgrSetMetaInfo.constprop.0+0x38>
 8003190:	b16a      	cbz	r2, 80031ae <aiPbMgrSetMetaInfo.constprop.0+0x48>
 8003192:	8843      	ldrh	r3, [r0, #2]
 8003194:	b10b      	cbz	r3, 800319a <aiPbMgrSetMetaInfo.constprop.0+0x34>
 8003196:	6853      	ldr	r3, [r2, #4]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	618b      	str	r3, [r1, #24]
  }
}
 800319c:	bd10      	pop	{r4, pc}
    shape->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, idx);
 800319e:	b132      	cbz	r2, 80031ae <aiPbMgrSetMetaInfo.constprop.0+0x48>
 80031a0:	8843      	ldrh	r3, [r0, #2]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f9      	beq.n	800319a <aiPbMgrSetMetaInfo.constprop.0+0x34>
 80031a6:	6853      	ldr	r3, [r2, #4]
 80031a8:	f993 3000 	ldrsb.w	r3, [r3]
 80031ac:	e7f5      	b.n	800319a <aiPbMgrSetMetaInfo.constprop.0+0x34>
 80031ae:	4613      	mov	r3, r2
 80031b0:	e7f3      	b.n	800319a <aiPbMgrSetMetaInfo.constprop.0+0x34>

080031b2 <init_aibuffer_msg>:
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
}


static void init_aibuffer_msg(const ai_buffer *aibuffer, aiBufferShapeMsg *msg)
{
 80031b2:	b410      	push	{r4}
  if ((!aibuffer) || (!msg))
 80031b4:	4603      	mov	r3, r0
 80031b6:	b180      	cbz	r0, 80031da <init_aibuffer_msg+0x28>
    msg->zeropoint = 0;
  }
#else
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(aibuffer);

  msg->format = aiPbAiFmtToMsgFmt(aibuffer->format);
 80031b8:	681c      	ldr	r4, [r3, #0]
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(aibuffer);
 80031ba:	6940      	ldr	r0, [r0, #20]
  msg->format = aiPbAiFmtToMsgFmt(aibuffer->format);
 80031bc:	600c      	str	r4, [r1, #0]
  msg->channels = aibuffer->channels;
 80031be:	68dc      	ldr	r4, [r3, #12]
 80031c0:	610c      	str	r4, [r1, #16]
  msg->height = aibuffer->height;
 80031c2:	88dc      	ldrh	r4, [r3, #6]
 80031c4:	608c      	str	r4, [r1, #8]
  msg->width = aibuffer->width;
 80031c6:	891c      	ldrh	r4, [r3, #8]
 80031c8:	60cc      	str	r4, [r1, #12]
  msg->n_batches = aibuffer->n_batches;
 80031ca:	889c      	ldrh	r4, [r3, #4]
  msg->addr = (uint32_t)aibuffer->data;
 80031cc:	691b      	ldr	r3, [r3, #16]
  msg->n_batches = aibuffer->n_batches;
 80031ce:	604c      	str	r4, [r1, #4]
  msg->addr = (uint32_t)aibuffer->data;
 80031d0:	61cb      	str	r3, [r1, #28]
  aiPbMgrSetMetaInfo(meta_info, 0, msg);
#endif
}
 80031d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  aiPbMgrSetMetaInfo(meta_info, 0, msg);
 80031d6:	f7ff bfc6 	b.w	8003166 <aiPbMgrSetMetaInfo.constprop.0>
}
 80031da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <nn_shape_w_cb>:

static bool nn_shape_w_cb(pb_ostream_t *stream, const pb_field_t *field,
    const ai_buffer *aibuffer, int maxw)
{
 80031e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031e4:	2618      	movs	r6, #24
    if (!pb_encode_tag_for_field(stream, field))
      return false;

    init_aibuffer_msg(&aibuffer[i], &msg);

    if (!pb_encode_submessage(stream, aiBufferShapeMsg_fields, &msg))
 80031e6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800322c <nn_shape_w_cb+0x4c>
{
 80031ea:	b088      	sub	sp, #32
 80031ec:	4605      	mov	r5, r0
 80031ee:	460f      	mov	r7, r1
 80031f0:	4614      	mov	r4, r2
 80031f2:	fb06 2603 	mla	r6, r6, r3, r2
  for (int i = 0; i < maxw; i++) {
 80031f6:	42b4      	cmp	r4, r6
 80031f8:	d101      	bne.n	80031fe <nn_shape_w_cb+0x1e>
      return false;
  }
  return true;
 80031fa:	2001      	movs	r0, #1
 80031fc:	e005      	b.n	800320a <nn_shape_w_cb+0x2a>
    if (!pb_encode_tag_for_field(stream, field))
 80031fe:	4639      	mov	r1, r7
 8003200:	4628      	mov	r0, r5
 8003202:	f002 fa45 	bl	8005690 <pb_encode_tag_for_field>
 8003206:	b918      	cbnz	r0, 8003210 <nn_shape_w_cb+0x30>
      return false;
 8003208:	2000      	movs	r0, #0
}
 800320a:	b008      	add	sp, #32
 800320c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    init_aibuffer_msg(&aibuffer[i], &msg);
 8003210:	4620      	mov	r0, r4
 8003212:	4669      	mov	r1, sp
 8003214:	f7ff ffcd 	bl	80031b2 <init_aibuffer_msg>
    if (!pb_encode_submessage(stream, aiBufferShapeMsg_fields, &msg))
 8003218:	466a      	mov	r2, sp
 800321a:	4641      	mov	r1, r8
 800321c:	4628      	mov	r0, r5
 800321e:	f002 fbe1 	bl	80059e4 <pb_encode_submessage>
 8003222:	3418      	adds	r4, #24
 8003224:	2800      	cmp	r0, #0
 8003226:	d1e6      	bne.n	80031f6 <nn_shape_w_cb+0x16>
 8003228:	e7ee      	b.n	8003208 <nn_shape_w_cb+0x28>
 800322a:	bf00      	nop
 800322c:	0800ef80 	.word	0x0800ef80

08003230 <nn_outputs_w_cb>:
}

static bool nn_outputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
  ai_network_report *report = (ai_network_report *)*arg;
 8003230:	6812      	ldr	r2, [r2, #0]

  if (!report)
 8003232:	b11a      	cbz	r2, 800323c <nn_outputs_w_cb+0xc>
    return true;

  return nn_shape_w_cb(stream, field, &report->outputs[0], report->n_outputs);
 8003234:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 8003236:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003238:	f7ff bfd2 	b.w	80031e0 <nn_shape_w_cb>
}
 800323c:	2001      	movs	r0, #1
 800323e:	4770      	bx	lr

08003240 <nn_inputs_w_cb>:
  ai_network_report *report = (ai_network_report *)*arg;
 8003240:	6812      	ldr	r2, [r2, #0]
  if (!report)
 8003242:	b11a      	cbz	r2, 800324c <nn_inputs_w_cb+0xc>
  return nn_shape_w_cb(stream, field, &report->inputs[0], report->n_inputs);
 8003244:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8003246:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003248:	f7ff bfca 	b.w	80031e0 <nn_shape_w_cb>
}
 800324c:	2001      	movs	r0, #1
 800324e:	4770      	bx	lr

08003250 <aiPbBuffer_write_cb3>:
{
 8003250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 8003254:	6815      	ldr	r5, [r2, #0]
  int maxw = bm->n_max;
 8003256:	686e      	ldr	r6, [r5, #4]
{
 8003258:	4607      	mov	r7, r0
  if ((maxw == 0) || (!bm->buffer))
 800325a:	b1be      	cbz	r6, 800328c <aiPbBuffer_write_cb3+0x3c>
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	b1ab      	cbz	r3, 800328c <aiPbBuffer_write_cb3+0x3c>
  format = bm->buffer->format;
 8003260:	681c      	ldr	r4, [r3, #0]
  pb_byte_t *pr = (pb_byte_t *)bm->buffer->data;
 8003262:	f8d3 8010 	ldr.w	r8, [r3, #16]
  if (!pb_encode_tag_for_field(stream, field))
 8003266:	f002 fa13 	bl	8005690 <pb_encode_tag_for_field>
 800326a:	b910      	cbnz	r0, 8003272 <aiPbBuffer_write_cb3+0x22>
    return false;
 800326c:	2000      	movs	r0, #0
}
 800326e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (size_t)AI_BUFFER_BYTE_SIZE(1,format);
 8003272:	f3c4 12c6 	ubfx	r2, r4, #7, #7
 8003276:	3204      	adds	r2, #4
 8003278:	10d2      	asrs	r2, r2, #3
  if (!pb_encode_string(stream, pr, itsize * maxw))
 800327a:	4372      	muls	r2, r6
 800327c:	4641      	mov	r1, r8
 800327e:	4638      	mov	r0, r7
 8003280:	f002 fb60 	bl	8005944 <pb_encode_string>
 8003284:	2800      	cmp	r0, #0
 8003286:	d0f1      	beq.n	800326c <aiPbBuffer_write_cb3+0x1c>
  bm->n_ops = maxw;
 8003288:	60ae      	str	r6, [r5, #8]
  return true;
 800328a:	e7f0      	b.n	800326e <aiPbBuffer_write_cb3+0x1e>
    return true;
 800328c:	2001      	movs	r0, #1
 800328e:	e7ee      	b.n	800326e <aiPbBuffer_write_cb3+0x1e>

08003290 <aiPbMgrInit>:
{
 8003290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003292:	b08b      	sub	sp, #44	; 0x2c
  pbContextMgr.input = pb_io_istream(0);
 8003294:	ac06      	add	r4, sp, #24
{
 8003296:	4607      	mov	r7, r0
  pb_io_stream_init();
 8003298:	f7ff ff0e 	bl	80030b8 <pb_io_stream_init>
  pbContextMgr.input = pb_io_istream(0);
 800329c:	4620      	mov	r0, r4
 800329e:	2100      	movs	r1, #0
 80032a0:	f7ff fefe 	bl	80030a0 <pb_io_istream>
 80032a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80032a8:	4d10      	ldr	r5, [pc, #64]	; (80032ec <aiPbMgrInit+0x5c>)
  pbContextMgr.output = pb_io_ostream(0);
 80032aa:	466c      	mov	r4, sp
  pbContextMgr.input = pb_io_istream(0);
 80032ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 80032b0:	2100      	movs	r1, #0
 80032b2:	4668      	mov	r0, sp
 80032b4:	f7ff fee6 	bl	8003084 <pb_io_ostream>
 80032b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ba:	f105 0610 	add.w	r6, r5, #16
 80032be:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	6033      	str	r3, [r6, #0]
  pbContextMgr.n_func = 0;
 80032c4:	2300      	movs	r3, #0
  pbContextMgr.funcs = NULL;
 80032c6:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
  if (funcs) {
 80032ca:	b967      	cbnz	r7, 80032e6 <aiPbMgrInit+0x56>
}
 80032cc:	b00b      	add	sp, #44	; 0x2c
 80032ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cfunc++;
 80032d0:	320c      	adds	r2, #12
 80032d2:	4623      	mov	r3, r4
 80032d4:	2101      	movs	r1, #1
    while (cfunc->process) {
 80032d6:	6850      	ldr	r0, [r2, #4]
 80032d8:	1c5c      	adds	r4, r3, #1
 80032da:	2800      	cmp	r0, #0
 80032dc:	d1f8      	bne.n	80032d0 <aiPbMgrInit+0x40>
 80032de:	b101      	cbz	r1, 80032e2 <aiPbMgrInit+0x52>
 80032e0:	62ab      	str	r3, [r5, #40]	; 0x28
    pbContextMgr.funcs = funcs;
 80032e2:	626f      	str	r7, [r5, #36]	; 0x24
}
 80032e4:	e7f2      	b.n	80032cc <aiPbMgrInit+0x3c>
 80032e6:	463a      	mov	r2, r7
 80032e8:	4619      	mov	r1, r3
 80032ea:	e7f4      	b.n	80032d6 <aiPbMgrInit+0x46>
 80032ec:	20000bf8 	.word	0x20000bf8

080032f0 <aiPbMgrSendResp>:
{
 80032f0:	b508      	push	{r3, lr}
  resp->reqid = req->reqid;
 80032f2:	6803      	ldr	r3, [r0, #0]
 80032f4:	600b      	str	r3, [r1, #0]
  resp->state = state;
 80032f6:	710a      	strb	r2, [r1, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 80032f8:	4804      	ldr	r0, [pc, #16]	; (800330c <aiPbMgrSendResp+0x1c>)
 80032fa:	460a      	mov	r2, r1
 80032fc:	4904      	ldr	r1, [pc, #16]	; (8003310 <aiPbMgrSendResp+0x20>)
 80032fe:	f002 faed 	bl	80058dc <pb_encode>
}
 8003302:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pb_io_flush_ostream();
 8003306:	f7ff bea1 	b.w	800304c <pb_io_flush_ostream>
 800330a:	bf00      	nop
 800330c:	20000c08 	.word	0x20000c08
 8003310:	0800f288 	.word	0x0800f288

08003314 <aiPbMgrWaitAndProcess>:
{
 8003314:	b570      	push	{r4, r5, r6, lr}
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &req)) {
 8003316:	4c17      	ldr	r4, [pc, #92]	; (8003374 <aiPbMgrWaitAndProcess+0x60>)
 8003318:	4d17      	ldr	r5, [pc, #92]	; (8003378 <aiPbMgrWaitAndProcess+0x64>)
  pb_io_flush_istream();
 800331a:	f7ff fea7 	bl	800306c <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &req)) {
 800331e:	4917      	ldr	r1, [pc, #92]	; (800337c <aiPbMgrWaitAndProcess+0x68>)
 8003320:	4622      	mov	r2, r4
 8003322:	4628      	mov	r0, r5
 8003324:	f001 ffe0 	bl	80052e8 <pb_decode_delimited>
 8003328:	b1e8      	cbz	r0, 8003366 <aiPbMgrWaitAndProcess+0x52>
    pb_io_flush_istream();
 800332a:	f7ff fe9f 	bl	800306c <pb_io_flush_istream>
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 800332e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003330:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      if (cfunc->cmd == req.cmd) {
 8003332:	7920      	ldrb	r0, [r4, #4]
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8003334:	2400      	movs	r4, #0
 8003336:	42a1      	cmp	r1, r4
 8003338:	d00c      	beq.n	8003354 <aiPbMgrWaitAndProcess+0x40>
      cfunc = &pbContextMgr.funcs[idx];
 800333a:	461a      	mov	r2, r3
      if (cfunc->cmd == req.cmd) {
 800333c:	f813 6b0c 	ldrb.w	r6, [r3], #12
 8003340:	4286      	cmp	r6, r0
 8003342:	d114      	bne.n	800336e <aiPbMgrWaitAndProcess+0x5a>
        cfunc->process(&req, &resp, cfunc->param);
 8003344:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
 8003348:	490d      	ldr	r1, [pc, #52]	; (8003380 <aiPbMgrWaitAndProcess+0x6c>)
 800334a:	480a      	ldr	r0, [pc, #40]	; (8003374 <aiPbMgrWaitAndProcess+0x60>)
 800334c:	4798      	blx	r3
    if (idx == pbContextMgr.n_func) {
 800334e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003350:	42a3      	cmp	r3, r4
 8003352:	d108      	bne.n	8003366 <aiPbMgrWaitAndProcess+0x52>
  resp->which_payload = respMsg_ack_tag;
 8003354:	490a      	ldr	r1, [pc, #40]	; (8003380 <aiPbMgrWaitAndProcess+0x6c>)
  aiPbMgrSendResp(req, resp, state);
 8003356:	4807      	ldr	r0, [pc, #28]	; (8003374 <aiPbMgrWaitAndProcess+0x60>)
  resp->payload.ack.param = param;
 8003358:	2204      	movs	r2, #4
  resp->which_payload = respMsg_ack_tag;
 800335a:	230c      	movs	r3, #12
 800335c:	80cb      	strh	r3, [r1, #6]
  resp->payload.ack.param = param;
 800335e:	608a      	str	r2, [r1, #8]
  resp->payload.ack.error = error;
 8003360:	730a      	strb	r2, [r1, #12]
  aiPbMgrSendResp(req, resp, state);
 8003362:	f7ff ffc5 	bl	80032f0 <aiPbMgrSendResp>
  pb_io_flush_istream();
 8003366:	f7ff fe81 	bl	800306c <pb_io_flush_istream>
}
 800336a:	2000      	movs	r0, #0
 800336c:	bd70      	pop	{r4, r5, r6, pc}
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 800336e:	3401      	adds	r4, #1
 8003370:	e7e1      	b.n	8003336 <aiPbMgrWaitAndProcess+0x22>
 8003372:	bf00      	nop
 8003374:	20000c24 	.word	0x20000c24
 8003378:	20000bf8 	.word	0x20000bf8
 800337c:	0800f22e 	.word	0x0800f22e
 8003380:	20000c74 	.word	0x20000c74

08003384 <aiPbMgrSendAck>:
{
 8003384:	b470      	push	{r4, r5, r6}
  resp->which_payload = respMsg_ack_tag;
 8003386:	260c      	movs	r6, #12
{
 8003388:	f89d 500c 	ldrb.w	r5, [sp, #12]
  resp->which_payload = respMsg_ack_tag;
 800338c:	80ce      	strh	r6, [r1, #6]
  resp->payload.ack.error = error;
 800338e:	730d      	strb	r5, [r1, #12]
  resp->payload.ack.param = param;
 8003390:	608b      	str	r3, [r1, #8]
}
 8003392:	bc70      	pop	{r4, r5, r6}
  aiPbMgrSendResp(req, resp, state);
 8003394:	f7ff bfac 	b.w	80032f0 <aiPbMgrSendResp>

08003398 <aiPbMgrWaitAck>:
{
 8003398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ackMsg ack = ackMsg_init_default;
 800339a:	2300      	movs	r3, #0
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 800339c:	4907      	ldr	r1, [pc, #28]	; (80033bc <aiPbMgrWaitAck+0x24>)
 800339e:	4808      	ldr	r0, [pc, #32]	; (80033c0 <aiPbMgrWaitAck+0x28>)
  ackMsg ack = ackMsg_init_default;
 80033a0:	9302      	str	r3, [sp, #8]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 80033a2:	aa02      	add	r2, sp, #8
  ackMsg ack = ackMsg_init_default;
 80033a4:	f88d 300c 	strb.w	r3, [sp, #12]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 80033a8:	f001 ff9e 	bl	80052e8 <pb_decode_delimited>
 80033ac:	9001      	str	r0, [sp, #4]
  pb_io_flush_istream();
 80033ae:	f7ff fe5d 	bl	800306c <pb_io_flush_istream>
}
 80033b2:	9801      	ldr	r0, [sp, #4]
 80033b4:	b005      	add	sp, #20
 80033b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80033ba:	bf00      	nop
 80033bc:	0800ef1c 	.word	0x0800ef1c
 80033c0:	20000bf8 	.word	0x20000bf8

080033c4 <aiPbAiBufferSize>:
  if (!buffer)
 80033c4:	b130      	cbz	r0, 80033d4 <aiPbAiBufferSize+0x10>
        * buffer->width * buffer->n_batches;
 80033c6:	8902      	ldrh	r2, [r0, #8]
    return buffer->channels * buffer->height
 80033c8:	88c3      	ldrh	r3, [r0, #6]
        * buffer->width * buffer->n_batches;
 80033ca:	4353      	muls	r3, r2
 80033cc:	68c2      	ldr	r2, [r0, #12]
 80033ce:	8880      	ldrh	r0, [r0, #4]
 80033d0:	4353      	muls	r3, r2
 80033d2:	4358      	muls	r0, r3
}
 80033d4:	4770      	bx	lr
	...

080033d8 <aiPbMgrReceiveAiBuffer3>:
{
 80033d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033da:	b091      	sub	sp, #68	; 0x44
  hdlb.n_ops = 0;
 80033dc:	2500      	movs	r5, #0
{
 80033de:	4607      	mov	r7, r0
 80033e0:	4618      	mov	r0, r3
 80033e2:	4616      	mov	r6, r2
  hdlb.buffer = buffer;
 80033e4:	9301      	str	r3, [sp, #4]
  hdlb.n_ops = 0;
 80033e6:	9503      	str	r5, [sp, #12]
  hdlb.err = EnumError_E_NONE;
 80033e8:	9504      	str	r5, [sp, #16]
  hdlb.n_max = aiPbAiBufferSize(buffer);
 80033ea:	f7ff ffeb 	bl	80033c4 <aiPbAiBufferSize>
  msg.datas.funcs.decode = &aiPbBuffer_read_cb3;
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <aiPbMgrReceiveAiBuffer3+0x6c>)
  hdlb.n_max = aiPbAiBufferSize(buffer);
 80033f0:	9002      	str	r0, [sp, #8]
  hdlb.msg = &msg;
 80033f2:	aa06      	add	r2, sp, #24
{
 80033f4:	460c      	mov	r4, r1
  msg.datas.funcs.decode = &aiPbBuffer_read_cb3;
 80033f6:	930e      	str	r3, [sp, #56]	; 0x38
  pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 80033f8:	4913      	ldr	r1, [pc, #76]	; (8003448 <aiPbMgrReceiveAiBuffer3+0x70>)
 80033fa:	4814      	ldr	r0, [pc, #80]	; (800344c <aiPbMgrReceiveAiBuffer3+0x74>)
  hdlb.msg = &msg;
 80033fc:	9205      	str	r2, [sp, #20]
  msg.datas.arg = &hdlb;
 80033fe:	ab01      	add	r3, sp, #4
 8003400:	930f      	str	r3, [sp, #60]	; 0x3c
  pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 8003402:	f001 ff71 	bl	80052e8 <pb_decode_delimited>
  pb_io_flush_istream();
 8003406:	f7ff fe31 	bl	800306c <pb_io_flush_istream>
  if (hdlb.err) {
 800340a:	9b04      	ldr	r3, [sp, #16]
 800340c:	220c      	movs	r2, #12
  resp->which_payload = respMsg_ack_tag;
 800340e:	80e2      	strh	r2, [r4, #6]
  if (hdlb.err) {
 8003410:	b14b      	cbz	r3, 8003426 <aiPbMgrReceiveAiBuffer3+0x4e>
  aiPbMgrSendResp(req, resp, state);
 8003412:	4638      	mov	r0, r7
  resp->payload.ack.param = param;
 8003414:	60a3      	str	r3, [r4, #8]
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 8003416:	7323      	strb	r3, [r4, #12]
  aiPbMgrSendResp(req, resp, state);
 8003418:	2204      	movs	r2, #4
 800341a:	4621      	mov	r1, r4
 800341c:	f7ff ff68 	bl	80032f0 <aiPbMgrSendResp>
    res = false;
 8003420:	4628      	mov	r0, r5
}
 8003422:	b011      	add	sp, #68	; 0x44
 8003424:	bdf0      	pop	{r4, r5, r6, r7, pc}
  resp->payload.ack.param = param;
 8003426:	9a03      	ldr	r2, [sp, #12]
 8003428:	60a2      	str	r2, [r4, #8]
  resp->payload.ack.error = error;
 800342a:	7323      	strb	r3, [r4, #12]
  aiPbMgrSendResp(req, resp, state);
 800342c:	4632      	mov	r2, r6
 800342e:	4621      	mov	r1, r4
 8003430:	4638      	mov	r0, r7
    if ((state == EnumState_S_WAITING) ||
 8003432:	3e01      	subs	r6, #1
  aiPbMgrSendResp(req, resp, state);
 8003434:	f7ff ff5c 	bl	80032f0 <aiPbMgrSendResp>
    if ((state == EnumState_S_WAITING) ||
 8003438:	2e01      	cmp	r6, #1
 800343a:	d801      	bhi.n	8003440 <aiPbMgrReceiveAiBuffer3+0x68>
      aiPbMgrWaitAck();
 800343c:	f7ff ffac 	bl	8003398 <aiPbMgrWaitAck>
  bool res = true;
 8003440:	2001      	movs	r0, #1
 8003442:	e7ee      	b.n	8003422 <aiPbMgrReceiveAiBuffer3+0x4a>
 8003444:	080030c3 	.word	0x080030c3
 8003448:	0800ef49 	.word	0x0800ef49
 800344c:	20000bf8 	.word	0x20000bf8

08003450 <aiPbMgrSendAiBuffer4>:
{
 8003450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003454:	b087      	sub	sp, #28
 8003456:	460c      	mov	r4, r1
 8003458:	990f      	ldr	r1, [sp, #60]	; 0x3c
  hdlb.buffer = (ai_buffer *)buffer;
 800345a:	9101      	str	r1, [sp, #4]
  hdlb.n_ops = 0;
 800345c:	2700      	movs	r7, #0
{
 800345e:	4680      	mov	r8, r0
  hdlb.n_max = aiPbAiBufferSize(buffer);
 8003460:	4608      	mov	r0, r1
{
 8003462:	461d      	mov	r5, r3
 8003464:	4616      	mov	r6, r2
  hdlb.n_ops = 0;
 8003466:	9703      	str	r7, [sp, #12]
  hdlb.err = EnumError_E_NONE;
 8003468:	9704      	str	r7, [sp, #16]
  hdlb.n_max = aiPbAiBufferSize(buffer);
 800346a:	f7ff ffab 	bl	80033c4 <aiPbAiBufferSize>
  resp->which_payload = respMsg_node_tag;
 800346e:	230e      	movs	r3, #14
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buffer);
 8003470:	f8d1 9014 	ldr.w	r9, [r1, #20]
  resp->which_payload = respMsg_node_tag;
 8003474:	80e3      	strh	r3, [r4, #6]
  resp->payload.node.id = id;
 8003476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003478:	60e3      	str	r3, [r4, #12]
  resp->payload.node.buffer.shape.format = aiPbAiFmtToMsgFmt(buffer->format);
 800347a:	680b      	ldr	r3, [r1, #0]
 800347c:	6163      	str	r3, [r4, #20]
  resp->payload.node.buffer.shape.n_batches = buffer->n_batches;
 800347e:	888b      	ldrh	r3, [r1, #4]
 8003480:	61a3      	str	r3, [r4, #24]
  resp->payload.node.buffer.shape.height = buffer->height;
 8003482:	88cb      	ldrh	r3, [r1, #6]
 8003484:	61e3      	str	r3, [r4, #28]
    hdlb.n_max  = 0;
 8003486:	42bd      	cmp	r5, r7
  resp->payload.node.buffer.shape.width = buffer->width;
 8003488:	890b      	ldrh	r3, [r1, #8]
 800348a:	6223      	str	r3, [r4, #32]
    hdlb.n_max  = 0;
 800348c:	bfb8      	it	lt
 800348e:	4638      	movlt	r0, r7
  resp->payload.node.buffer.shape.channels = buffer->channels;
 8003490:	68cb      	ldr	r3, [r1, #12]
  hdlb.msg = NULL;
 8003492:	9705      	str	r7, [sp, #20]
  type &= (~PB_BUFFER_TYPE_SEND_WITHOUT_DATA);
 8003494:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
    hdlb.n_max  = 0;
 8003498:	9002      	str	r0, [sp, #8]
  resp->payload.node.type = type;
 800349a:	60a5      	str	r5, [r4, #8]
  resp->payload.node.duration = dur_ms;
 800349c:	ed84 0a04 	vstr	s0, [r4, #16]
  resp->payload.node.buffer.shape.channels = buffer->channels;
 80034a0:	6263      	str	r3, [r4, #36]	; 0x24
  resp->payload.node.buffer.shape.addr = 0;
 80034a2:	6327      	str	r7, [r4, #48]	; 0x30
  if (meta_info && scale == 0.0f)
 80034a4:	f1b9 0f00 	cmp.w	r9, #0
 80034a8:	d019      	beq.n	80034de <aiPbMgrSendAiBuffer4+0x8e>
 80034aa:	eef5 0a40 	vcmp.f32	s1, #0.0
 80034ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b2:	d114      	bne.n	80034de <aiPbMgrSendAiBuffer4+0x8e>
    aiPbMgrSetMetaInfo(meta_info, 0, &resp->payload.node.buffer.shape);
 80034b4:	f104 0114 	add.w	r1, r4, #20
 80034b8:	4648      	mov	r0, r9
 80034ba:	f7ff fe54 	bl	8003166 <aiPbMgrSetMetaInfo.constprop.0>
  resp->payload.node.buffer.datas.funcs.encode = &aiPbBuffer_write_cb3;
 80034be:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <aiPbMgrSendAiBuffer4+0x9c>)
 80034c0:	6363      	str	r3, [r4, #52]	; 0x34
  resp->payload.node.buffer.datas.arg = &hdlb;
 80034c2:	ab01      	add	r3, sp, #4
 80034c4:	63a3      	str	r3, [r4, #56]	; 0x38
  aiPbMgrSendResp(req, resp, state);
 80034c6:	4632      	mov	r2, r6
 80034c8:	4621      	mov	r1, r4
 80034ca:	4640      	mov	r0, r8
 80034cc:	f7ff ff10 	bl	80032f0 <aiPbMgrSendResp>
  if (state == EnumState_S_PROCESSING)
 80034d0:	2e02      	cmp	r6, #2
 80034d2:	d109      	bne.n	80034e8 <aiPbMgrSendAiBuffer4+0x98>
    return aiPbMgrWaitAck();
 80034d4:	f7ff ff60 	bl	8003398 <aiPbMgrWaitAck>
}
 80034d8:	b007      	add	sp, #28
 80034da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    resp->payload.node.buffer.shape.zeropoint = zero_point;
 80034de:	9b10      	ldr	r3, [sp, #64]	; 0x40
    resp->payload.node.buffer.shape.scale = scale;
 80034e0:	edc4 0a0a 	vstr	s1, [r4, #40]	; 0x28
    resp->payload.node.buffer.shape.zeropoint = zero_point;
 80034e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034e6:	e7ea      	b.n	80034be <aiPbMgrSendAiBuffer4+0x6e>
    return true;
 80034e8:	2001      	movs	r0, #1
 80034ea:	e7f5      	b.n	80034d8 <aiPbMgrSendAiBuffer4+0x88>
 80034ec:	08003251 	.word	0x08003251

080034f0 <aiPbCmdSync>:
{
 80034f0:	b410      	push	{r4}
  resp->which_payload = respMsg_sync_tag;
 80034f2:	240a      	movs	r4, #10
 80034f4:	80cc      	strh	r4, [r1, #6]
  resp->payload.sync.version =
 80034f6:	f240 2402 	movw	r4, #514	; 0x202
 80034fa:	608c      	str	r4, [r1, #8]
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 80034fc:	b294      	uxth	r4, r2
  resp->payload.sync.rtid = (uint32_t)param >> 16;
 80034fe:	0c12      	lsrs	r2, r2, #16
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8003500:	f044 0402 	orr.w	r4, r4, #2
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 8003504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8003508:	60cc      	str	r4, [r1, #12]
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 800350a:	610a      	str	r2, [r1, #16]
}
 800350c:	f85d 4b04 	ldr.w	r4, [sp], #4
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003510:	2200      	movs	r2, #0
 8003512:	f7ff beed 	b.w	80032f0 <aiPbMgrSendResp>

08003516 <aiPbCmdSysInfo>:
{
 8003516:	b538      	push	{r3, r4, r5, lr}
  resp->which_payload = respMsg_sinfo_tag;
 8003518:	230b      	movs	r3, #11
 800351a:	80cb      	strh	r3, [r1, #6]
{
 800351c:	460c      	mov	r4, r1
 800351e:	4605      	mov	r5, r0
  resp->payload.sinfo.devid = HAL_GetDEVID();
 8003520:	f7fe f93a 	bl	8001798 <HAL_GetDEVID>
 8003524:	60a0      	str	r0, [r4, #8]
  resp->payload.sinfo.sclock = HAL_RCC_GetSysClockFreq();
 8003526:	f7fe fb73 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 800352a:	60e0      	str	r0, [r4, #12]
  resp->payload.sinfo.hclock = HAL_RCC_GetHCLKFreq();
 800352c:	f7fe fee8 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8003530:	6120      	str	r0, [r4, #16]
  resp->payload.sinfo.cache = getFlashCacheConf();
 8003532:	f000 facf 	bl	8003ad4 <getFlashCacheConf>
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003536:	4621      	mov	r1, r4
  resp->payload.sinfo.cache = getFlashCacheConf();
 8003538:	6160      	str	r0, [r4, #20]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800353a:	2200      	movs	r2, #0
 800353c:	4628      	mov	r0, r5
}
 800353e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003542:	f7ff bed5 	b.w	80032f0 <aiPbMgrSendResp>
	...

08003548 <aiPbStrCopy>:

void aiPbStrCopy(const char *src, char *dst, uint32_t max)
{
 8003548:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800354a:	4616      	mov	r6, r2
  const char undef[] = "UNDEFINED";
 800354c:	4a11      	ldr	r2, [pc, #68]	; (8003594 <aiPbStrCopy+0x4c>)
{
 800354e:	4605      	mov	r5, r0
 8003550:	460c      	mov	r4, r1
  const char undef[] = "UNDEFINED";
 8003552:	6810      	ldr	r0, [r2, #0]
 8003554:	6851      	ldr	r1, [r2, #4]
 8003556:	8912      	ldrh	r2, [r2, #8]
 8003558:	ab01      	add	r3, sp, #4
 800355a:	c303      	stmia	r3!, {r0, r1}
  size_t l = strlen(src);
 800355c:	4628      	mov	r0, r5
  const char undef[] = "UNDEFINED";
 800355e:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 8003560:	f7fc fe36 	bl	80001d0 <strlen>

  if (l > max)
 8003564:	42b0      	cmp	r0, r6
    l = max-1;
 8003566:	bf88      	it	hi
 8003568:	f106 30ff 	addhi.w	r0, r6, #4294967295

  if (!dst)
 800356c:	b184      	cbz	r4, 8003590 <aiPbStrCopy+0x48>
    return;

  if (src && l)
 800356e:	b138      	cbz	r0, 8003580 <aiPbStrCopy+0x38>
    memcpy(dst, src, l+1);
 8003570:	1c42      	adds	r2, r0, #1
 8003572:	4629      	mov	r1, r5
 8003574:	4620      	mov	r0, r4
  else
    memcpy(dst, undef, strlen(undef)+1);
}
 8003576:	b004      	add	sp, #16
 8003578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(dst, src, l+1);
 800357c:	f006 b8b4 	b.w	80096e8 <memcpy>
    memcpy(dst, undef, strlen(undef)+1);
 8003580:	a801      	add	r0, sp, #4
 8003582:	f7fc fe25 	bl	80001d0 <strlen>
 8003586:	a901      	add	r1, sp, #4
 8003588:	1c42      	adds	r2, r0, #1
 800358a:	4620      	mov	r0, r4
 800358c:	f006 f8ac 	bl	80096e8 <memcpy>
}
 8003590:	b004      	add	sp, #16
 8003592:	bd70      	pop	{r4, r5, r6, pc}
 8003594:	0800c5bc 	.word	0x0800c5bc

08003598 <aiPbVersionToUint32>:

uint32_t aiPbVersionToUint32(const ai_platform_version *ver)
{
  if (!ver)
 8003598:	b108      	cbz	r0, 800359e <aiPbVersionToUint32+0x6>
    return 0;

  return ver->major << 24 | ver->minor << 16
 800359a:	6800      	ldr	r0, [r0, #0]
 800359c:	ba00      	rev	r0, r0
      | ver->micro << 8 | ver->reserved;
}
 800359e:	4770      	bx	lr

080035a0 <aiPbMgrSendNNInfo>:

void aiPbMgrSendNNInfo(const reqMsg *req, respMsg *resp,
    EnumState state, const ai_network_report *nn)
{
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a2:	461d      	mov	r5, r3
  resp->which_payload = respMsg_ninfo_tag;
 80035a4:	2314      	movs	r3, #20
{
 80035a6:	460c      	mov	r4, r1
  resp->which_payload = respMsg_ninfo_tag;
 80035a8:	80cb      	strh	r3, [r1, #6]
{
 80035aa:	4606      	mov	r6, r0
 80035ac:	4617      	mov	r7, r2

  aiPbStrCopy(nn->model_name,
 80035ae:	6828      	ldr	r0, [r5, #0]
 80035b0:	2240      	movs	r2, #64	; 0x40
 80035b2:	3108      	adds	r1, #8
 80035b4:	f7ff ffc8 	bl	8003548 <aiPbStrCopy>
      &resp->payload.ninfo.model_name[0],
      sizeof(resp->payload.ninfo.model_name));
  aiPbStrCopy(nn->model_signature,
 80035b8:	6868      	ldr	r0, [r5, #4]
 80035ba:	f104 0148 	add.w	r1, r4, #72	; 0x48
 80035be:	2240      	movs	r2, #64	; 0x40
 80035c0:	f7ff ffc2 	bl	8003548 <aiPbStrCopy>
      &resp->payload.ninfo.model_signature[0],
      sizeof(resp->payload.ninfo.model_signature));
  aiPbStrCopy(nn->model_datetime,
 80035c4:	68a8      	ldr	r0, [r5, #8]
 80035c6:	f104 0188 	add.w	r1, r4, #136	; 0x88
 80035ca:	2240      	movs	r2, #64	; 0x40
 80035cc:	f7ff ffbc 	bl	8003548 <aiPbStrCopy>
      &resp->payload.ninfo.model_datetime[0],
      sizeof(resp->payload.ninfo.model_datetime));
  aiPbStrCopy(nn->compile_datetime,
 80035d0:	68e8      	ldr	r0, [r5, #12]
 80035d2:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 80035d6:	2240      	movs	r2, #64	; 0x40
 80035d8:	f7ff ffb6 	bl	8003548 <aiPbStrCopy>
      &resp->payload.ninfo.compile_datetime[0],
      sizeof(resp->payload.ninfo.compile_datetime));
  aiPbStrCopy(nn->runtime_revision,
 80035dc:	6928      	ldr	r0, [r5, #16]
 80035de:	f504 7184 	add.w	r1, r4, #264	; 0x108
 80035e2:	2240      	movs	r2, #64	; 0x40
 80035e4:	f7ff ffb0 	bl	8003548 <aiPbStrCopy>
      &resp->payload.ninfo.runtime_revision[0],
      sizeof(resp->payload.ninfo.runtime_revision));
  aiPbStrCopy(nn->tool_revision,
 80035e8:	2240      	movs	r2, #64	; 0x40
 80035ea:	69a8      	ldr	r0, [r5, #24]
 80035ec:	f504 71a6 	add.w	r1, r4, #332	; 0x14c
 80035f0:	f7ff ffaa 	bl	8003548 <aiPbStrCopy>
      &resp->payload.ninfo.tool_revision[0],
      sizeof(resp->payload.ninfo.tool_revision));

  resp->payload.ninfo.n_inputs = nn->n_inputs;
 80035f4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80035f6:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
  resp->payload.ninfo.n_outputs = nn->n_outputs;
 80035fa:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 80035fc:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  resp->payload.ninfo.n_nodes = nn->n_nodes;
 8003600:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8003602:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
  resp->payload.ninfo.n_macc = nn->n_macc;
 8003606:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003608:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c

  resp->payload.ninfo.signature = nn->signature;
 800360c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800360e:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
  resp->payload.ninfo.api_version =
      aiPbVersionToUint32(&nn->api_version);
 8003612:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8003616:	f7ff ffbf 	bl	8003598 <aiPbVersionToUint32>
  resp->payload.ninfo.api_version =
 800361a:	f8c4 0194 	str.w	r0, [r4, #404]	; 0x194
  resp->payload.ninfo.interface_api_version =
      aiPbVersionToUint32(&nn->interface_api_version);
 800361e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8003622:	f7ff ffb9 	bl	8003598 <aiPbVersionToUint32>
  resp->payload.ninfo.interface_api_version =
 8003626:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
  resp->payload.ninfo.runtime_version =
      aiPbVersionToUint32(&nn->runtime_version);
 800362a:	f105 0014 	add.w	r0, r5, #20
 800362e:	f7ff ffb3 	bl	8003598 <aiPbVersionToUint32>
  resp->payload.ninfo.runtime_version =
 8003632:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  resp->payload.ninfo.tool_version =
      aiPbVersionToUint32(&nn->tool_version);
 8003636:	f105 001c 	add.w	r0, r5, #28
 800363a:	f7ff ffad 	bl	8003598 <aiPbVersionToUint32>
  resp->payload.ninfo.tool_version =
 800363e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  resp->payload.ninfo.tool_api_version =
      aiPbVersionToUint32(&nn->tool_api_version);
 8003642:	f105 0020 	add.w	r0, r5, #32
 8003646:	f7ff ffa7 	bl	8003598 <aiPbVersionToUint32>

  init_aibuffer_msg(&nn->activations, &resp->payload.ninfo.activations);
 800364a:	f504 71de 	add.w	r1, r4, #444	; 0x1bc
  resp->payload.ninfo.tool_api_version =
 800364e:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
  init_aibuffer_msg(&nn->activations, &resp->payload.ninfo.activations);
 8003652:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8003656:	f7ff fdac 	bl	80031b2 <init_aibuffer_msg>
  init_aibuffer_msg(&nn->params, &resp->payload.ninfo.weights);
 800365a:	f504 71ee 	add.w	r1, r4, #476	; 0x1dc
 800365e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8003662:	f7ff fda6 	bl	80031b2 <init_aibuffer_msg>

  resp->payload.ninfo.inputs.funcs.encode = nn_inputs_w_cb;
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <aiPbMgrSendNNInfo+0xe0>)
  resp->payload.ninfo.inputs.arg = (void *)nn;
 8003668:	e9c4 356b 	strd	r3, r5, [r4, #428]	; 0x1ac

  resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <aiPbMgrSendNNInfo+0xe4>)
  resp->payload.ninfo.outputs.arg = (void *)nn;

  aiPbMgrSendResp(req, resp, state);
 800366e:	463a      	mov	r2, r7
  resp->payload.ninfo.outputs.arg = (void *)nn;
 8003670:	e9c4 356d 	strd	r3, r5, [r4, #436]	; 0x1b4
  aiPbMgrSendResp(req, resp, state);
 8003674:	4621      	mov	r1, r4
 8003676:	4630      	mov	r0, r6
}
 8003678:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  aiPbMgrSendResp(req, resp, state);
 800367c:	f7ff be38 	b.w	80032f0 <aiPbMgrSendResp>
 8003680:	08003241 	.word	0x08003241
 8003684:	08003231 	.word	0x08003231

08003688 <aiPlatformVersion>:
#include <aiTestHelper.h>

#include <ai_platform_interface.h>

void aiPlatformVersion(void)
{
 8003688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  printf("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 800368a:	2207      	movs	r2, #7
 800368c:	2300      	movs	r3, #0
 800368e:	9200      	str	r2, [sp, #0]
 8003690:	2201      	movs	r2, #1
 8003692:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8003696:	4611      	mov	r1, r2
 8003698:	4802      	ldr	r0, [pc, #8]	; (80036a4 <aiPlatformVersion+0x1c>)
 800369a:	f006 fd85 	bl	800a1a8 <iprintf>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      AI_PLATFORM_RUNTIME_MAJOR,
      AI_PLATFORM_RUNTIME_MINOR,
      AI_PLATFORM_RUNTIME_MICRO);
}
 800369e:	b005      	add	sp, #20
 80036a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80036a4:	0800c5c6 	.word	0x0800c5c6

080036a8 <aiLogErr>:
{
  return buffer->height * buffer->width * buffer->channels;
}

void aiLogErr(const ai_error err, const char *fct)
{
 80036a8:	b410      	push	{r4}
  if (fct)
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80036aa:	f3c0 2317 	ubfx	r3, r0, #8, #24
 80036ae:	b2c4      	uxtb	r4, r0
  if (fct)
 80036b0:	b129      	cbz	r1, 80036be <aiLogErr+0x16>
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80036b2:	4622      	mov	r2, r4
 80036b4:	4805      	ldr	r0, [pc, #20]	; (80036cc <aiLogErr+0x24>)
        err.type, err.code);
  else
    printf("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 80036b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80036ba:	f006 bd75 	b.w	800a1a8 <iprintf>
    printf("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80036be:	4621      	mov	r1, r4
 80036c0:	4803      	ldr	r0, [pc, #12]	; (80036d0 <aiLogErr+0x28>)
}
 80036c2:	f85d 4b04 	ldr.w	r4, [sp], #4
    printf("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80036c6:	461a      	mov	r2, r3
 80036c8:	f006 bd6e 	b.w	800a1a8 <iprintf>
 80036cc:	0800c5f8 	.word	0x0800c5f8
 80036d0:	0800c625 	.word	0x0800c625

080036d4 <aiPrintLayoutBuffer>:


void aiPrintLayoutBuffer(const char *msg, int idx,
    const ai_buffer* buffer)
{
 80036d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 80036d6:	6815      	ldr	r5, [r2, #0]
{
 80036d8:	4614      	mov	r4, r2
  uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 80036da:	f3c5 4543 	ubfx	r5, r5, #17, #4
  printf("%s[%d] ",msg, idx);
 80036de:	460a      	mov	r2, r1
 80036e0:	4601      	mov	r1, r0
 80036e2:	483c      	ldr	r0, [pc, #240]	; (80037d4 <aiPrintLayoutBuffer+0x100>)
 80036e4:	f006 fd60 	bl	800a1a8 <iprintf>
  if (type_id == AI_BUFFER_FMT_TYPE_Q) {
 80036e8:	2d02      	cmp	r5, #2
 80036ea:	d15c      	bne.n	80037a6 <aiPrintLayoutBuffer+0xd2>
    printf(" %s%d,",
        AI_BUFFER_FMT_GET_SIGN(buffer->format)?"s":"u",
 80036ec:	6822      	ldr	r2, [r4, #0]
    printf(" %s%d,",
 80036ee:	4b3a      	ldr	r3, [pc, #232]	; (80037d8 <aiPrintLayoutBuffer+0x104>)
 80036f0:	493a      	ldr	r1, [pc, #232]	; (80037dc <aiPrintLayoutBuffer+0x108>)
 80036f2:	483b      	ldr	r0, [pc, #236]	; (80037e0 <aiPrintLayoutBuffer+0x10c>)
 80036f4:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 80036f8:	bf08      	it	eq
 80036fa:	4619      	moveq	r1, r3
 80036fc:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8003700:	f006 fd52 	bl	800a1a8 <iprintf>
            (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8003704:	6963      	ldr	r3, [r4, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d03f      	beq.n	800378a <aiPrintLayoutBuffer+0xb6>
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	07d0      	lsls	r0, r2, #31
 800370e:	d53c      	bpl.n	800378a <aiPrintLayoutBuffer+0xb6>
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	2a00      	cmp	r2, #0
 8003714:	d039      	beq.n	800378a <aiPrintLayoutBuffer+0xb6>
      ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, 0);
 8003716:	6853      	ldr	r3, [r2, #4]
 8003718:	b35b      	cbz	r3, 8003772 <aiPrintLayoutBuffer+0x9e>
 800371a:	8851      	ldrh	r1, [r2, #2]
 800371c:	b349      	cbz	r1, 8003772 <aiPrintLayoutBuffer+0x9e>
 800371e:	6819      	ldr	r1, [r3, #0]
 8003720:	6808      	ldr	r0, [r1, #0]
      int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, 0);
 8003722:	8811      	ldrh	r1, [r2, #0]
 8003724:	0789      	lsls	r1, r1, #30
 8003726:	d526      	bpl.n	8003776 <aiPrintLayoutBuffer+0xa2>
 8003728:	b36b      	cbz	r3, 8003786 <aiPrintLayoutBuffer+0xb2>
 800372a:	8855      	ldrh	r5, [r2, #2]
 800372c:	b10d      	cbz	r5, 8003732 <aiPrintLayoutBuffer+0x5e>
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	781d      	ldrb	r5, [r3, #0]
      printf(" scale=%f, zero=%d,", scale, zero_point);
 8003732:	f7fc ff09 	bl	8000548 <__aeabi_f2d>
 8003736:	9500      	str	r5, [sp, #0]
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4829      	ldr	r0, [pc, #164]	; (80037e4 <aiPrintLayoutBuffer+0x110>)
 800373e:	f006 fd33 	bl	800a1a8 <iprintf>
  else if (type_id == AI_BUFFER_FMT_TYPE_BOOL)
    printf(" bool,");
  else
    printf("NONE");
  printf(" %d bytes, shape=(%d,%d,%d)",
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), buffer->format),
 8003742:	8923      	ldrh	r3, [r4, #8]
 8003744:	88e2      	ldrh	r2, [r4, #6]
 8003746:	6821      	ldr	r1, [r4, #0]
 8003748:	68e0      	ldr	r0, [r4, #12]
  printf(" %d bytes, shape=(%d,%d,%d)",
 800374a:	9000      	str	r0, [sp, #0]
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), buffer->format),
 800374c:	fb02 f503 	mul.w	r5, r2, r3
 8003750:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8003754:	4369      	muls	r1, r5
 8003756:	4341      	muls	r1, r0
 8003758:	3104      	adds	r1, #4
  printf(" %d bytes, shape=(%d,%d,%d)",
 800375a:	08c9      	lsrs	r1, r1, #3
 800375c:	4822      	ldr	r0, [pc, #136]	; (80037e8 <aiPrintLayoutBuffer+0x114>)
 800375e:	f006 fd23 	bl	800a1a8 <iprintf>
      buffer->height, buffer->width, (int)buffer->channels);
  if (buffer->data)
 8003762:	6921      	ldr	r1, [r4, #16]
 8003764:	b379      	cbz	r1, 80037c6 <aiPrintLayoutBuffer+0xf2>
    printf(" (@0x%08x)\r\n", (int)buffer->data);
 8003766:	4821      	ldr	r0, [pc, #132]	; (80037ec <aiPrintLayoutBuffer+0x118>)
  else
    printf(" (USER domain)\r\n");
}
 8003768:	b003      	add	sp, #12
 800376a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    printf(" (@0x%08x)\r\n", (int)buffer->data);
 800376e:	f006 bd1b 	b.w	800a1a8 <iprintf>
      ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, 0);
 8003772:	2000      	movs	r0, #0
 8003774:	e7d5      	b.n	8003722 <aiPrintLayoutBuffer+0x4e>
      int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, 0);
 8003776:	b133      	cbz	r3, 8003786 <aiPrintLayoutBuffer+0xb2>
 8003778:	8855      	ldrh	r5, [r2, #2]
 800377a:	2d00      	cmp	r5, #0
 800377c:	d0d9      	beq.n	8003732 <aiPrintLayoutBuffer+0x5e>
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f993 5000 	ldrsb.w	r5, [r3]
 8003784:	e7d5      	b.n	8003732 <aiPrintLayoutBuffer+0x5e>
 8003786:	461d      	mov	r5, r3
 8003788:	e7d3      	b.n	8003732 <aiPrintLayoutBuffer+0x5e>
          (int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 800378a:	6823      	ldr	r3, [r4, #0]
      printf("Q%d.%d,",
 800378c:	4818      	ldr	r0, [pc, #96]	; (80037f0 <aiPrintLayoutBuffer+0x11c>)
          - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 800378e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003792:	3a40      	subs	r2, #64	; 0x40
          (int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 8003794:	f3c3 11c6 	ubfx	r1, r3, #7, #7
              (int)AI_BUFFER_FMT_GET_SIGN(buffer->format)),
 8003798:	f3c3 53c0 	ubfx	r3, r3, #23, #1
          - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 800379c:	4413      	add	r3, r2
      printf("Q%d.%d,",
 800379e:	1ac9      	subs	r1, r1, r3
 80037a0:	f006 fd02 	bl	800a1a8 <iprintf>
 80037a4:	e7cd      	b.n	8003742 <aiPrintLayoutBuffer+0x6e>
  else if (type_id == AI_BUFFER_FMT_TYPE_FLOAT)
 80037a6:	2d01      	cmp	r5, #1
 80037a8:	d106      	bne.n	80037b8 <aiPrintLayoutBuffer+0xe4>
        (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 80037aa:	6821      	ldr	r1, [r4, #0]
    printf(" float%d,",
 80037ac:	4811      	ldr	r0, [pc, #68]	; (80037f4 <aiPrintLayoutBuffer+0x120>)
 80037ae:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 80037b2:	f006 fcf9 	bl	800a1a8 <iprintf>
 80037b6:	e7c4      	b.n	8003742 <aiPrintLayoutBuffer+0x6e>
  else if (type_id == AI_BUFFER_FMT_TYPE_BOOL)
 80037b8:	2d03      	cmp	r5, #3
    printf(" bool,");
 80037ba:	bf0c      	ite	eq
 80037bc:	480e      	ldreq	r0, [pc, #56]	; (80037f8 <aiPrintLayoutBuffer+0x124>)
    printf("NONE");
 80037be:	480f      	ldrne	r0, [pc, #60]	; (80037fc <aiPrintLayoutBuffer+0x128>)
 80037c0:	f006 fcf2 	bl	800a1a8 <iprintf>
 80037c4:	e7bd      	b.n	8003742 <aiPrintLayoutBuffer+0x6e>
    printf(" (USER domain)\r\n");
 80037c6:	480e      	ldr	r0, [pc, #56]	; (8003800 <aiPrintLayoutBuffer+0x12c>)
}
 80037c8:	b003      	add	sp, #12
 80037ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    printf(" (USER domain)\r\n");
 80037ce:	f006 bd71 	b.w	800a2b4 <puts>
 80037d2:	bf00      	nop
 80037d4:	0800c651 	.word	0x0800c651
 80037d8:	0800c64f 	.word	0x0800c64f
 80037dc:	0800c64d 	.word	0x0800c64d
 80037e0:	0800c659 	.word	0x0800c659
 80037e4:	0800c660 	.word	0x0800c660
 80037e8:	0800c692 	.word	0x0800c692
 80037ec:	0800c6ae 	.word	0x0800c6ae
 80037f0:	0800c674 	.word	0x0800c674
 80037f4:	0800c67c 	.word	0x0800c67c
 80037f8:	0800c686 	.word	0x0800c686
 80037fc:	0800c68d 	.word	0x0800c68d
 8003800:	0800c6bb 	.word	0x0800c6bb

08003804 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int i;
  uint32_t w_addr = (uint32_t)report->params.data;
 8003806:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
{
 8003808:	4604      	mov	r4, r0

  if ((w_addr) && (*(uint32_t *)w_addr == AI_MAGIC_MARKER)) {
 800380a:	b125      	cbz	r5, 8003816 <aiPrintNetworkInfo+0x12>
 800380c:	682a      	ldr	r2, [r5, #0]
 800380e:	4b35      	ldr	r3, [pc, #212]	; (80038e4 <aiPrintNetworkInfo+0xe0>)
 8003810:	429a      	cmp	r2, r3
    w_addr = *(uint32_t *)((uint32_t *)(w_addr) + 1);
 8003812:	bf08      	it	eq
 8003814:	686d      	ldreq	r5, [r5, #4]
  }

  printf("Network informations...\r\n");
 8003816:	4834      	ldr	r0, [pc, #208]	; (80038e8 <aiPrintNetworkInfo+0xe4>)
 8003818:	f006 fd4c 	bl	800a2b4 <puts>
  printf(" model name         : %s\r\n", report->model_name);
 800381c:	6821      	ldr	r1, [r4, #0]
 800381e:	4833      	ldr	r0, [pc, #204]	; (80038ec <aiPrintNetworkInfo+0xe8>)
 8003820:	f006 fcc2 	bl	800a1a8 <iprintf>
  printf(" model signature    : %s\r\n", report->model_signature);
 8003824:	6861      	ldr	r1, [r4, #4]
 8003826:	4832      	ldr	r0, [pc, #200]	; (80038f0 <aiPrintNetworkInfo+0xec>)
 8003828:	f006 fcbe 	bl	800a1a8 <iprintf>
  printf(" model datetime     : %s\r\n", report->model_datetime);
 800382c:	68a1      	ldr	r1, [r4, #8]
 800382e:	4831      	ldr	r0, [pc, #196]	; (80038f4 <aiPrintNetworkInfo+0xf0>)
 8003830:	f006 fcba 	bl	800a1a8 <iprintf>
  printf(" compile datetime   : %s\r\n", report->compile_datetime);
 8003834:	68e1      	ldr	r1, [r4, #12]
 8003836:	4830      	ldr	r0, [pc, #192]	; (80038f8 <aiPrintNetworkInfo+0xf4>)
 8003838:	f006 fcb6 	bl	800a1a8 <iprintf>
  printf(" runtime version    : %d.%d.%d\r\n",
 800383c:	7da3      	ldrb	r3, [r4, #22]
 800383e:	7d21      	ldrb	r1, [r4, #20]
 8003840:	7d62      	ldrb	r2, [r4, #21]
 8003842:	482e      	ldr	r0, [pc, #184]	; (80038fc <aiPrintNetworkInfo+0xf8>)
 8003844:	f006 fcb0 	bl	800a1a8 <iprintf>
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
  if (report->tool_revision[0])
 8003848:	69a1      	ldr	r1, [r4, #24]
 800384a:	780b      	ldrb	r3, [r1, #0]
 800384c:	b113      	cbz	r3, 8003854 <aiPrintNetworkInfo+0x50>
    printf(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 800384e:	482c      	ldr	r0, [pc, #176]	; (8003900 <aiPrintNetworkInfo+0xfc>)
 8003850:	f006 fcaa 	bl	800a1a8 <iprintf>
  printf(" tools version      : %d.%d.%d\r\n",
 8003854:	7fa3      	ldrb	r3, [r4, #30]
 8003856:	7f62      	ldrb	r2, [r4, #29]
 8003858:	7f21      	ldrb	r1, [r4, #28]
 800385a:	482a      	ldr	r0, [pc, #168]	; (8003904 <aiPrintNetworkInfo+0x100>)
  printf(" weights            : %d bytes (0x%08x)\r\n",
      (int)AI_BUFFER_SIZE(&report->params), (unsigned int)w_addr);
  printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
      report->n_outputs);
  for (i=0; i<report->n_inputs; i++)
    aiPrintLayoutBuffer("  I", i, &report->inputs[i]);
 800385c:	4f2a      	ldr	r7, [pc, #168]	; (8003908 <aiPrintNetworkInfo+0x104>)
  printf(" tools version      : %d.%d.%d\r\n",
 800385e:	f006 fca3 	bl	800a1a8 <iprintf>
  printf(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 8003862:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003864:	4829      	ldr	r0, [pc, #164]	; (800390c <aiPrintNetworkInfo+0x108>)
 8003866:	f006 fc9f 	bl	800a1a8 <iprintf>
  printf(" c-nodes            : %d\r\n", (int)report->n_nodes);
 800386a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800386c:	4828      	ldr	r0, [pc, #160]	; (8003910 <aiPrintNetworkInfo+0x10c>)
 800386e:	f006 fc9b 	bl	800a1a8 <iprintf>
      (int)AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 8003872:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8003876:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
  printf(" activations        : %d bytes (0x%08x)\r\n",
 800387a:	4826      	ldr	r0, [pc, #152]	; (8003914 <aiPrintNetworkInfo+0x110>)
      (int)AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 800387c:	434b      	muls	r3, r1
  printf(" activations        : %d bytes (0x%08x)\r\n",
 800387e:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	; 0x60
 8003882:	4359      	muls	r1, r3
 8003884:	f006 fc90 	bl	800a1a8 <iprintf>
      (int)AI_BUFFER_SIZE(&report->params), (unsigned int)w_addr);
 8003888:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 800388c:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
  printf(" weights            : %d bytes (0x%08x)\r\n",
 8003890:	4821      	ldr	r0, [pc, #132]	; (8003918 <aiPrintNetworkInfo+0x114>)
      (int)AI_BUFFER_SIZE(&report->params), (unsigned int)w_addr);
 8003892:	434b      	muls	r3, r1
 8003894:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  printf(" weights            : %d bytes (0x%08x)\r\n",
 8003896:	462a      	mov	r2, r5
 8003898:	4359      	muls	r1, r3
 800389a:	f006 fc85 	bl	800a1a8 <iprintf>
  printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 800389e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80038a0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80038a2:	481e      	ldr	r0, [pc, #120]	; (800391c <aiPrintNetworkInfo+0x118>)
 80038a4:	f006 fc80 	bl	800a1a8 <iprintf>
  for (i=0; i<report->n_inputs; i++)
 80038a8:	2500      	movs	r5, #0
    aiPrintLayoutBuffer("  I", i, &report->inputs[i]);
 80038aa:	2618      	movs	r6, #24
  for (i=0; i<report->n_inputs; i++)
 80038ac:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80038ae:	42ab      	cmp	r3, r5
 80038b0:	dc06      	bgt.n	80038c0 <aiPrintNetworkInfo+0xbc>
  for (i=0; i<report->n_outputs; i++)
    aiPrintLayoutBuffer("  O", i, &report->outputs[i]);
 80038b2:	4f1b      	ldr	r7, [pc, #108]	; (8003920 <aiPrintNetworkInfo+0x11c>)
  for (i=0; i<report->n_outputs; i++)
 80038b4:	2500      	movs	r5, #0
    aiPrintLayoutBuffer("  O", i, &report->outputs[i]);
 80038b6:	2618      	movs	r6, #24
  for (i=0; i<report->n_outputs; i++)
 80038b8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80038ba:	42ab      	cmp	r3, r5
 80038bc:	dc09      	bgt.n	80038d2 <aiPrintNetworkInfo+0xce>
}
 80038be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aiPrintLayoutBuffer("  I", i, &report->inputs[i]);
 80038c0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80038c2:	4629      	mov	r1, r5
 80038c4:	fb06 2205 	mla	r2, r6, r5, r2
 80038c8:	4638      	mov	r0, r7
 80038ca:	f7ff ff03 	bl	80036d4 <aiPrintLayoutBuffer>
  for (i=0; i<report->n_inputs; i++)
 80038ce:	3501      	adds	r5, #1
 80038d0:	e7ec      	b.n	80038ac <aiPrintNetworkInfo+0xa8>
    aiPrintLayoutBuffer("  O", i, &report->outputs[i]);
 80038d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80038d4:	4629      	mov	r1, r5
 80038d6:	fb06 2205 	mla	r2, r6, r5, r2
 80038da:	4638      	mov	r0, r7
 80038dc:	f7ff fefa 	bl	80036d4 <aiPrintLayoutBuffer>
  for (i=0; i<report->n_outputs; i++)
 80038e0:	3501      	adds	r5, #1
 80038e2:	e7e9      	b.n	80038b8 <aiPrintNetworkInfo+0xb4>
 80038e4:	a1facade 	.word	0xa1facade
 80038e8:	0800c6cb 	.word	0x0800c6cb
 80038ec:	0800c6e4 	.word	0x0800c6e4
 80038f0:	0800c6ff 	.word	0x0800c6ff
 80038f4:	0800c71a 	.word	0x0800c71a
 80038f8:	0800c735 	.word	0x0800c735
 80038fc:	0800c750 	.word	0x0800c750
 8003900:	0800c771 	.word	0x0800c771
 8003904:	0800c78c 	.word	0x0800c78c
 8003908:	0800c85b 	.word	0x0800c85b
 800390c:	0800c7ad 	.word	0x0800c7ad
 8003910:	0800c7ce 	.word	0x0800c7ce
 8003914:	0800c7e9 	.word	0x0800c7e9
 8003918:	0800c813 	.word	0x0800c813
 800391c:	0800c83d 	.word	0x0800c83d
 8003920:	0800c85f 	.word	0x0800c85f

08003924 <ioRawWriteBuffer>:
}

#else

bool ioRawWriteBuffer(uint8_t *buff, int count)
{
 8003924:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003926:	b28a      	uxth	r2, r1
 8003928:	f04f 33ff 	mov.w	r3, #4294967295
 800392c:	4601      	mov	r1, r0
 800392e:	4803      	ldr	r0, [pc, #12]	; (800393c <ioRawWriteBuffer+0x18>)
 8003930:	f7ff f9f6 	bl	8002d20 <HAL_UART_Transmit>

  return (status == HAL_OK);
}
 8003934:	fab0 f080 	clz	r0, r0
 8003938:	0940      	lsrs	r0, r0, #5
 800393a:	bd08      	pop	{r3, pc}
 800393c:	20000b20 	.word	0x20000b20

08003940 <ioRawReadBuffer>:

bool ioRawReadBuffer(uint8_t *buff, int count)
{
 8003940:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status;

  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003942:	b28a      	uxth	r2, r1
 8003944:	f04f 33ff 	mov.w	r3, #4294967295
 8003948:	4601      	mov	r1, r0
 800394a:	4803      	ldr	r0, [pc, #12]	; (8003958 <ioRawReadBuffer+0x18>)
 800394c:	f7ff fa42 	bl	8002dd4 <HAL_UART_Receive>

  return (status == HAL_OK);
}
 8003950:	fab0 f080 	clz	r0, r0
 8003954:	0940      	lsrs	r0, r0, #5
 8003956:	bd08      	pop	{r3, pc}
 8003958:	20000b20 	.word	0x20000b20

0800395c <ioRawDisableLLWrite>:

void ioRawDisableLLWrite(void)
{
  _ioWriteAllowed = false;
 800395c:	4b01      	ldr	r3, [pc, #4]	; (8003964 <ioRawDisableLLWrite+0x8>)
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]
}
 8003962:	4770      	bx	lr
 8003964:	2000000c 	.word	0x2000000c

08003968 <_write>:
#if defined(__GNUC__) && !defined(__ARMCC_VERSION)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 8003968:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status;

  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800396a:	1e14      	subs	r4, r2, #0
 800396c:	da0a      	bge.n	8003984 <_write+0x1c>
 800396e:	3801      	subs	r0, #1
 8003970:	2801      	cmp	r0, #1
 8003972:	d907      	bls.n	8003984 <_write+0x1c>
    errno = EBADF;
 8003974:	f005 fe86 	bl	8009684 <__errno>
 8003978:	2309      	movs	r3, #9
 800397a:	6003      	str	r3, [r0, #0]
    return -1;
 800397c:	f04f 34ff 	mov.w	r4, #4294967295
        HAL_MAX_DELAY);
  else
    status = HAL_OK;

  return (status == HAL_OK ? count : 0);
}
 8003980:	4620      	mov	r0, r4
 8003982:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <_write+0x38>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f9      	beq.n	8003980 <_write+0x18>
    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 800398c:	b2a2      	uxth	r2, r4
 800398e:	4805      	ldr	r0, [pc, #20]	; (80039a4 <_write+0x3c>)
 8003990:	f04f 33ff 	mov.w	r3, #4294967295
 8003994:	f7ff f9c4 	bl	8002d20 <HAL_UART_Transmit>
  return (status == HAL_OK ? count : 0);
 8003998:	2800      	cmp	r0, #0
 800399a:	bf18      	it	ne
 800399c:	2400      	movne	r4, #0
 800399e:	e7ef      	b.n	8003980 <_write+0x18>
 80039a0:	2000000c 	.word	0x2000000c
 80039a4:	20000b20 	.word	0x20000b20

080039a8 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 80039a8:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 80039aa:	4d11      	ldr	r5, [pc, #68]	; (80039f0 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 80039ac:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 80039ae:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 80039b0:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 80039b4:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 80039b8:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 80039bc:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 80039be:	f005 fe8b 	bl	80096d8 <malloc>

  /* remember size */
  if (ptr) {
 80039c2:	b1a0      	cbz	r0, 80039ee <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 80039c4:	1903      	adds	r3, r0, r4
 80039c6:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 80039c8:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 80039ca:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 80039cc:	682b      	ldr	r3, [r5, #0]
 80039ce:	07db      	lsls	r3, r3, #31
 80039d0:	d50c      	bpl.n	80039ec <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 80039d2:	68eb      	ldr	r3, [r5, #12]
 80039d4:	3301      	adds	r3, #1
 80039d6:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 80039d8:	686b      	ldr	r3, [r5, #4]
 80039da:	4423      	add	r3, r4
 80039dc:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 80039de:	69ab      	ldr	r3, [r5, #24]
 80039e0:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 80039e2:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 80039e4:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 80039e6:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 80039e8:	bf88      	it	hi
 80039ea:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 80039ec:	3004      	adds	r0, #4
}
 80039ee:	bd38      	pop	{r3, r4, r5, pc}
 80039f0:	20000e80 	.word	0x20000e80
 80039f4:	efdcba98 	.word	0xefdcba98

080039f8 <dwtIpInit>:
#endif
}

void dwtIpInit(void)
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80039f8:	4a08      	ldr	r2, [pc, #32]	; (8003a1c <dwtIpInit+0x24>)
 80039fa:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 80039fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a02:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc

#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif

  DWT->CYCCNT = 0;
 8003a06:	f5a2 425d 	sub.w	r2, r2, #56576	; 0xdd00
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	6053      	str	r3, [r2, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 8003a0e:	6813      	ldr	r3, [r2, #0]
 8003a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	6013      	str	r3, [r2, #0]

}
 8003a1a:	4770      	bx	lr
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <dwtCyclesToTime>:
  return HAL_RCC_GetSysClockFreq();
#endif
}

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8003a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a24:	4604      	mov	r4, r0
 8003a26:	468a      	mov	sl, r1
  if (!t)
 8003a28:	4617      	mov	r7, r2
 8003a2a:	b382      	cbz	r2, 8003a8e <dwtCyclesToTime+0x6e>
  return HAL_RCC_GetHCLKFreq();
 8003a2c:	f7fe fc68 	bl	8002300 <HAL_RCC_GetHCLKFreq>
    return -1;
  uint32_t fcpu = systemCoreClock();
  uint64_t s  = clks / fcpu;
 8003a30:	2300      	movs	r3, #0
  return HAL_RCC_GetHCLKFreq();
 8003a32:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8003a34:	9001      	str	r0, [sp, #4]
 8003a36:	4651      	mov	r1, sl
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f7fd f9c3 	bl	8000dc4 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 8003a3e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint64_t s  = clks / fcpu;
 8003a42:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8003a44:	fba4 0106 	umull	r0, r1, r4, r6
 8003a48:	9a01      	ldr	r2, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003a4a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003a94 <dwtCyclesToTime+0x74>
  uint64_t ms = (clks * 1000) / fcpu;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	fb06 110a 	mla	r1, r6, sl, r1
 8003a54:	f7fd f9b6 	bl	8000dc4 <__aeabi_uldivmod>
  ms -= (s * 1000);
 8003a58:	fbab 3106 	umull	r3, r1, fp, r6
 8003a5c:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003a5e:	fba4 0109 	umull	r0, r1, r4, r9
 8003a62:	9a01      	ldr	r2, [sp, #4]
 8003a64:	fb09 110a 	mla	r1, r9, sl, r1
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f7fd f9ab 	bl	8000dc4 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
 8003a6e:	9a01      	ldr	r2, [sp, #4]
  t->s = s;
  t->ms = ms;
 8003a70:	60bd      	str	r5, [r7, #8]
  us -= (ms * 1000 + s * 1000000);
 8003a72:	fbab 8909 	umull	r8, r9, fp, r9
 8003a76:	eba0 0008 	sub.w	r0, r0, r8
 8003a7a:	fba5 5606 	umull	r5, r6, r5, r6
  t->s = s;
 8003a7e:	e9c7 2b00 	strd	r2, fp, [r7]
  us -= (ms * 1000 + s * 1000000);
 8003a82:	1b40      	subs	r0, r0, r5
  t->us = us;
 8003a84:	60f8      	str	r0, [r7, #12]
  return 0;
 8003a86:	2000      	movs	r0, #0
}
 8003a88:	b003      	add	sp, #12
 8003a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 8003a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a92:	e7f9      	b.n	8003a88 <dwtCyclesToTime+0x68>
 8003a94:	000f4240 	.word	0x000f4240

08003a98 <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 8003a98:	b510      	push	{r4, lr}
 8003a9a:	ed2d 8b02 	vpush	{d8}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	9101      	str	r1, [sp, #4]
  return HAL_RCC_GetHCLKFreq();
 8003aa4:	f7fe fc2c 	bl	8002300 <HAL_RCC_GetHCLKFreq>
  float res;
  float fcpu = (float)systemCoreClock();
  res = ((float)clks * (float)1000.0) / fcpu;
 8003aa8:	9901      	ldr	r1, [sp, #4]
  return HAL_RCC_GetHCLKFreq();
 8003aaa:	ee08 0a10 	vmov	s16, r0
  res = ((float)clks * (float)1000.0) / fcpu;
 8003aae:	4620      	mov	r0, r4
 8003ab0:	f7fd f942 	bl	8000d38 <__aeabi_ul2f>
 8003ab4:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8003ad0 <dwtCyclesToFloatMs+0x38>
 8003ab8:	ee07 0a90 	vmov	s15, r0
  float fcpu = (float)systemCoreClock();
 8003abc:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  res = ((float)clks * (float)1000.0) / fcpu;
 8003ac0:	ee27 0a80 	vmul.f32	s0, s15, s0
  return res;
}
 8003ac4:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8003ac8:	b002      	add	sp, #8
 8003aca:	ecbd 8b02 	vpop	{d8}
 8003ace:	bd10      	pop	{r4, pc}
 8003ad0:	447a0000 	.word	0x447a0000

08003ad4 <getFlashCacheConf>:
static uint32_t mconf;

uint32_t getFlashCacheConf(void)
{
  return mconf;
}
 8003ad4:	4b01      	ldr	r3, [pc, #4]	; (8003adc <getFlashCacheConf+0x8>)
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000e9c 	.word	0x20000e9c

08003ae0 <systemSettingLog>:

void systemSettingLog(void)
{
 8003ae0:	b570      	push	{r4, r5, r6, lr}
  struct dwtTime t;
  uint32_t st;

#if !defined(STM32F3) && !defined(STM32L5) && !defined(STM32U5)
  uint32_t acr = FLASH->ACR ;
 8003ae2:	4b49      	ldr	r3, [pc, #292]	; (8003c08 <systemSettingLog+0x128>)
  /* Display ARM Complier version */

#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  printf("Compiled with MDK-ARM Keil (Arm Compiler 6) %d\r\n", __ARMCC_VERSION);
#elif defined(__GNUC__)
  printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003ae4:	4849      	ldr	r0, [pc, #292]	; (8003c0c <systemSettingLog+0x12c>)
  uint32_t acr = FLASH->ACR ;
 8003ae6:	681c      	ldr	r4, [r3, #0]
{
 8003ae8:	b088      	sub	sp, #32
  printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003aea:	2203      	movs	r2, #3
 8003aec:	210a      	movs	r1, #10
 8003aee:	2301      	movs	r3, #1
 8003af0:	f006 fb5a 	bl	800a1a8 <iprintf>
#endif


  /* Display Device configuration */

  printf("STM32 Runtime configuration...\r\n");
 8003af4:	4846      	ldr	r0, [pc, #280]	; (8003c10 <systemSettingLog+0x130>)
 8003af6:	f006 fbdd 	bl	800a2b4 <puts>

  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
      (int)HAL_GetDEVID(),
 8003afa:	f7fd fe4d 	bl	8001798 <HAL_GetDEVID>
 8003afe:	4605      	mov	r5, r0
      devIdToStr(HAL_GetDEVID()),
 8003b00:	f7fd fe4a 	bl	8001798 <HAL_GetDEVID>
  switch (dev_id) {
 8003b04:	f2a0 4315 	subw	r3, r0, #1045	; 0x415
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b6b      	cmp	r3, #107	; 0x6b
 8003b0c:	bf96      	itet	ls
 8003b0e:	4a41      	ldrls	r2, [pc, #260]	; (8003c14 <systemSettingLog+0x134>)
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003b10:	4e41      	ldrhi	r6, [pc, #260]	; (8003c18 <systemSettingLog+0x138>)
 8003b12:	f852 6023 	ldrls.w	r6, [r2, r3, lsl #2]
      (int)HAL_GetREVID()
 8003b16:	f7fd fe39 	bl	800178c <HAL_GetREVID>
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003b1a:	4632      	mov	r2, r6
      (int)HAL_GetREVID()
 8003b1c:	4603      	mov	r3, r0
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003b1e:	4629      	mov	r1, r5
 8003b20:	483e      	ldr	r0, [pc, #248]	; (8003c1c <systemSettingLog+0x13c>)
          ""
#endif
  );

#if (__FPU_PRESENT == 1) && __FPU_USED
  mconf = (1 << 16);  /* FPU present and used */
 8003b22:	4d3f      	ldr	r5, [pc, #252]	; (8003c20 <systemSettingLog+0x140>)
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003b24:	f006 fb40 	bl	800a1a8 <iprintf>
  printf(" Core Arch.   : M%d - %s %s\r\n",
 8003b28:	4a3e      	ldr	r2, [pc, #248]	; (8003c24 <systemSettingLog+0x144>)
 8003b2a:	4b3f      	ldr	r3, [pc, #252]	; (8003c28 <systemSettingLog+0x148>)
 8003b2c:	483f      	ldr	r0, [pc, #252]	; (8003c2c <systemSettingLog+0x14c>)
 8003b2e:	2104      	movs	r1, #4
 8003b30:	f006 fb3a 	bl	800a1a8 <iprintf>
  mconf = (1 << 16);  /* FPU present and used */
 8003b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b38:	602b      	str	r3, [r5, #0]
#endif

  printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 8003b3a:	f7fd fe23 	bl	8001784 <HAL_GetHalVersion>
 8003b3e:	4601      	mov	r1, r0
 8003b40:	483b      	ldr	r0, [pc, #236]	; (8003c30 <systemSettingLog+0x150>)
 8003b42:	f006 fb31 	bl	800a1a8 <iprintf>
  return HAL_RCC_GetHCLKFreq();
 8003b46:	f7fe fbdb 	bl	8002300 <HAL_RCC_GetHCLKFreq>

  val = systemCoreClock()/1000000;

#if !defined(STM32H7)
  printf(" system clock : %u MHz\r\n", (int)val);
 8003b4a:	493a      	ldr	r1, [pc, #232]	; (8003c34 <systemSettingLog+0x154>)
 8003b4c:	fbb0 f1f1 	udiv	r1, r0, r1
 8003b50:	4839      	ldr	r0, [pc, #228]	; (8003c38 <systemSettingLog+0x158>)
 8003b52:	f006 fb29 	bl	800a1a8 <iprintf>
      bitToStr(val & SCB_CCR_DC_Msk));
#endif
#else
#if !defined(STM32F3) && !defined(STM32L5) && !defined(STM32U5) && !defined(STM32MP1)
  mconf |= (1 << 24);  /* F4/L4 conf. */
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003b56:	682b      	ldr	r3, [r5, #0]
 8003b58:	f004 0607 	and.w	r6, r4, #7
 8003b5c:	4333      	orrs	r3, r6
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8003b5e:	05e2      	lsls	r2, r4, #23
    mconf |= (1 << 8);
 8003b60:	bf4c      	ite	mi
 8003b62:	f043 2301 	orrmi.w	r3, r3, #16777472	; 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003b66:	f043 7380 	orrpl.w	r3, r3, #16777216	; 0x1000000
    mconf |= (1 << 8);
 8003b6a:	602b      	str	r3, [r5, #0]
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003b6c:	05a0      	lsls	r0, r4, #22
    mconf |= (1 << 9);
 8003b6e:	bf48      	it	mi
 8003b70:	682b      	ldrmi	r3, [r5, #0]
    return "False";
 8003b72:	4832      	ldr	r0, [pc, #200]	; (8003c3c <systemSettingLog+0x15c>)
    mconf |= (1 << 9);
 8003b74:	bf44      	itt	mi
 8003b76:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
 8003b7a:	602b      	strmi	r3, [r5, #0]
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8003b7c:	0561      	lsls	r1, r4, #21
    mconf |= (1 << 10);
 8003b7e:	bf48      	it	mi
 8003b80:	682b      	ldrmi	r3, [r5, #0]
    return "False";
 8003b82:	492f      	ldr	r1, [pc, #188]	; (8003c40 <systemSettingLog+0x160>)
    mconf |= (1 << 10);
 8003b84:	bf44      	itt	mi
 8003b86:	f443 6380 	orrmi.w	r3, r3, #1024	; 0x400
 8003b8a:	602b      	strmi	r3, [r5, #0]
    return "False";
 8003b8c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003b90:	bf14      	ite	ne
 8003b92:	460a      	movne	r2, r1
 8003b94:	4602      	moveq	r2, r0
 8003b96:	f414 7f00 	tst.w	r4, #512	; 0x200
 8003b9a:	bf14      	ite	ne
 8003b9c:	460b      	movne	r3, r1
 8003b9e:	4603      	moveq	r3, r0
 8003ba0:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8003ba4:	bf08      	it	eq
 8003ba6:	4601      	moveq	r1, r0
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8003ba8:	e9cd 1600 	strd	r1, r6, [sp]
 8003bac:	4621      	mov	r1, r4
  if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 8003bae:	4c25      	ldr	r4, [pc, #148]	; (8003c44 <systemSettingLog+0x164>)
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8003bb0:	4825      	ldr	r0, [pc, #148]	; (8003c48 <systemSettingLog+0x168>)
 8003bb2:	f006 faf9 	bl	800a1a8 <iprintf>
  if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 8003bb6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003bb8:	04db      	lsls	r3, r3, #19
 8003bba:	d402      	bmi.n	8003bc2 <systemSettingLog+0xe2>
    printf("W: CRC IP clock is NOT enabled\r\n");
 8003bbc:	4823      	ldr	r0, [pc, #140]	; (8003c4c <systemSettingLog+0x16c>)
 8003bbe:	f006 fb79 	bl	800a2b4 <puts>
  __HAL_RCC_CRC_CLK_ENABLE();
 8003bc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003bc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bc8:	64a3      	str	r3, [r4, #72]	; 0x48
 8003bca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
};

void dwtIpInit(void);

__STATIC_INLINE void dwtReset(void) {
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8003bcc:	4c20      	ldr	r4, [pc, #128]	; (8003c50 <systemSettingLog+0x170>)
 8003bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd2:	9303      	str	r3, [sp, #12]
 8003bd4:	2500      	movs	r5, #0
 8003bd6:	9b03      	ldr	r3, [sp, #12]
  crcIpInit();
  dwtIpInit();

  /* Display HAL tick Calibration */
  dwtReset();
  HAL_Delay(100);
 8003bd8:	2064      	movs	r0, #100	; 0x64
  dwtIpInit();
 8003bda:	f7ff ff0d 	bl	80039f8 <dwtIpInit>
 8003bde:	6065      	str	r5, [r4, #4]
  HAL_Delay(100);
 8003be0:	f7fd fdbc 	bl	800175c <HAL_Delay>
}

__STATIC_INLINE  uint32_t dwtGetCycles(void) {
  return DWT->CYCCNT;
 8003be4:	6860      	ldr	r0, [r4, #4]
  st = dwtGetCycles();
  dwtCyclesToTime(st/100, &t);
 8003be6:	aa04      	add	r2, sp, #16
 8003be8:	2464      	movs	r4, #100	; 0x64
 8003bea:	4629      	mov	r1, r5
 8003bec:	fbb0 f0f4 	udiv	r0, r0, r4
 8003bf0:	f7ff ff16 	bl	8003a20 <dwtCyclesToTime>

  printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
 8003bf4:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8003bf8:	9a07      	ldr	r2, [sp, #28]
 8003bfa:	4816      	ldr	r0, [pc, #88]	; (8003c54 <systemSettingLog+0x174>)
 8003bfc:	fb04 3101 	mla	r1, r4, r1, r3
 8003c00:	f006 fad2 	bl	800a1a8 <iprintf>
      t.s * 100 + t.ms, t.us);
}
 8003c04:	b008      	add	sp, #32
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
 8003c08:	40022000 	.word	0x40022000
 8003c0c:	0800c876 	.word	0x0800c876
 8003c10:	0800c893 	.word	0x0800c893
 8003c14:	0800cac4 	.word	0x0800cac4
 8003c18:	0800c863 	.word	0x0800c863
 8003c1c:	0800c8b3 	.word	0x0800c8b3
 8003c20:	20000e9c 	.word	0x20000e9c
 8003c24:	0800c8ed 	.word	0x0800c8ed
 8003c28:	0800c8e4 	.word	0x0800c8e4
 8003c2c:	0800c8f9 	.word	0x0800c8f9
 8003c30:	0800c917 	.word	0x0800c917
 8003c34:	000f4240 	.word	0x000f4240
 8003c38:	0800c930 	.word	0x0800c930
 8003c3c:	0800c870 	.word	0x0800c870
 8003c40:	0800c86b 	.word	0x0800c86b
 8003c44:	40021000 	.word	0x40021000
 8003c48:	0800c949 	.word	0x0800c949
 8003c4c:	0800c98d 	.word	0x0800c98d
 8003c50:	e0001000 	.word	0xe0001000
 8003c54:	0800c9ad 	.word	0x0800c9ad

08003c58 <cyclesCounterStart>:
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
  dwtIpInit();
}

__STATIC_INLINE void cyclesCounterStart(void)
{
 8003c58:	b508      	push	{r3, lr}
  cyclesCount.tick_start = HAL_GetTick();
 8003c5a:	f7fd fd79 	bl	8001750 <HAL_GetTick>
 8003c5e:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <cyclesCounterStart+0x18>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8003c60:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <cyclesCounterStart+0x1c>)
  cyclesCount.tick_start = HAL_GetTick();
 8003c62:	6098      	str	r0, [r3, #8]
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8003c64:	2100      	movs	r1, #0
 8003c66:	6051      	str	r1, [r2, #4]
  return DWT->CYCCNT;
 8003c68:	6852      	ldr	r2, [r2, #4]
  dwtReset();
  cyclesCount.dwt_start = dwtGetCycles();
 8003c6a:	605a      	str	r2, [r3, #4]
}
 8003c6c:	bd08      	pop	{r3, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000e74 	.word	0x20000e74
 8003c74:	e0001000 	.word	0xe0001000

08003c78 <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8003c78:	b570      	push	{r4, r5, r6, lr}
  return DWT->CYCCNT;
 8003c7a:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <cyclesCounterEnd+0x50>)
#if _APP_FIX_CLK_OVERFLOW == 1
  struct dwtTime t;
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8003c7c:	4e13      	ldr	r6, [pc, #76]	; (8003ccc <cyclesCounterEnd+0x54>)
  return DWT->CYCCNT;
 8003c7e:	685c      	ldr	r4, [r3, #4]
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8003c80:	6873      	ldr	r3, [r6, #4]
{
 8003c82:	b086      	sub	sp, #24
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8003c84:	2100      	movs	r1, #0
 8003c86:	1ae4      	subs	r4, r4, r3
 8003c88:	9101      	str	r1, [sp, #4]
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 8003c8a:	f7fd fd61 	bl	8001750 <HAL_GetTick>
 8003c8e:	68b5      	ldr	r5, [r6, #8]
  dwtCyclesToTime(dwt_e, &t);
 8003c90:	9901      	ldr	r1, [sp, #4]
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 8003c92:	1b45      	subs	r5, r0, r5
  dwtCyclesToTime(dwt_e, &t);
 8003c94:	aa02      	add	r2, sp, #8
 8003c96:	4620      	mov	r0, r4
 8003c98:	f7ff fec2 	bl	8003a20 <dwtCyclesToTime>
  if (tick_e > cyclesCount.dwt_max) {
 8003c9c:	6832      	ldr	r2, [r6, #0]
 8003c9e:	9901      	ldr	r1, [sp, #4]
 8003ca0:	4295      	cmp	r5, r2
 8003ca2:	d90d      	bls.n	8003cc0 <cyclesCounterEnd+0x48>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f7fd f88c 	bl	8000dc4 <__aeabi_uldivmod>
 8003cac:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb0:	fba0 0303 	umull	r0, r3, r0, r3
 8003cb4:	1900      	adds	r0, r0, r4
 8003cb6:	eba3 0101 	sub.w	r1, r3, r1
 8003cba:	4604      	mov	r4, r0
 8003cbc:	f141 0100 	adc.w	r1, r1, #0
  }
  return dwt_e;
#else
  return (uint64_t)(dwtGetCycles() - cyclesCount.dwt_start);
#endif
}
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	b006      	add	sp, #24
 8003cc4:	bd70      	pop	{r4, r5, r6, pc}
 8003cc6:	bf00      	nop
 8003cc8:	e0001000 	.word	0xe0001000
 8003ccc:	20000e74 	.word	0x20000e74

08003cd0 <aiOnExecNode_cb>:
 */

#ifdef HAS_OBSERVER
static ai_u32 aiOnExecNode_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 8003cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd4:	ed2d 8b02 	vpush	{d8}
 8003cd8:	b08f      	sub	sp, #60	; 0x3c
 8003cda:	460d      	mov	r5, r1

  struct ai_network_exec_ctx *ctx = (struct ai_network_exec_ctx*)cookie;
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8003cdc:	6f84      	ldr	r4, [r0, #120]	; 0x78
    const ai_observer_node *node) {
 8003cde:	4690      	mov	r8, r2

  volatile uint64_t ts = cyclesCounterEnd(); // dwtGetCycles(); /* time stamp to mark the entry */
 8003ce0:	f7ff ffca 	bl	8003c78 <cyclesCounterEnd>

  if (flags & AI_OBSERVER_PRE_EVT) {
 8003ce4:	f015 0702 	ands.w	r7, r5, #2
  volatile uint64_t ts = cyclesCounterEnd(); // dwtGetCycles(); /* time stamp to mark the entry */
 8003ce8:	e9cd 0106 	strd	r0, r1, [sp, #24]
  if (flags & AI_OBSERVER_PRE_EVT) {
 8003cec:	d011      	beq.n	8003d12 <aiOnExecNode_cb+0x42>
    obs_ctx->n_cb_in++;
 8003cee:	6863      	ldr	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8003cf0:	05ea      	lsls	r2, r5, #23
    obs_ctx->n_cb_in++;
 8003cf2:	f103 0301 	add.w	r3, r3, #1
 8003cf6:	6063      	str	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8003cf8:	d503      	bpl.n	8003d02 <aiOnExecNode_cb+0x32>
      obs_ctx->tnodes = ts;
 8003cfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003cfe:	e9c4 2308 	strd	r2, r3, [r4, #32]
      // break; /* currently (X-CUBE-AI 5.x) only one output tensor is available by operator */
    }
    obs_ctx->tcom += cyclesCounterEnd();
  }

  cyclesCounterStart();
 8003d02:	f7ff ffa9 	bl	8003c58 <cyclesCounterStart>
  return 0;
}
 8003d06:	2000      	movs	r0, #0
 8003d08:	b00f      	add	sp, #60	; 0x3c
 8003d0a:	ecbd 8b02 	vpop	{d8}
 8003d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (flags & AI_OBSERVER_POST_EVT) {
 8003d12:	076b      	lsls	r3, r5, #29
 8003d14:	d5f5      	bpl.n	8003d02 <aiOnExecNode_cb+0x32>
    cyclesCounterStart();
 8003d16:	f7ff ff9f 	bl	8003c58 <cyclesCounterStart>
    obs_ctx->tnodes += ts;
 8003d1a:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8003d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d22:	181b      	adds	r3, r3, r0
 8003d24:	eb42 0201 	adc.w	r2, r2, r1
 8003d28:	e9c4 3208 	strd	r3, r2, [r4, #32]
    obs_ctx->n_cb_out++;
 8003d2c:	68a3      	ldr	r3, [r4, #8]
    if (obs_ctx->no_data)
 8003d2e:	7d22      	ldrb	r2, [r4, #20]
      type = EnumLayerType_LAYER_TYPE_INTERNAL;
 8003d30:	f415 7f00 	tst.w	r5, #512	; 0x200
    obs_ctx->n_cb_out++;
 8003d34:	f103 0301 	add.w	r3, r3, #1
      type = EnumLayerType_LAYER_TYPE_INTERNAL;
 8003d38:	bf14      	ite	ne
 8003d3a:	2602      	movne	r6, #2
 8003d3c:	2601      	moveq	r6, #1
    obs_ctx->n_cb_out++;
 8003d3e:	60a3      	str	r3, [r4, #8]
    type = type << 16;
 8003d40:	0433      	lsls	r3, r6, #16
    if (obs_ctx->no_data)
 8003d42:	b10a      	cbz	r2, 8003d48 <aiOnExecNode_cb+0x78>
      type |= PB_BUFFER_TYPE_SEND_WITHOUT_DATA;
 8003d44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 8003d48:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8003d4c:	8811      	ldrh	r1, [r2, #0]
 8003d4e:	2901      	cmp	r1, #1
 8003d50:	d809      	bhi.n	8003d66 <aiOnExecNode_cb+0x96>
    obs_ctx->tcom += cyclesCounterEnd();
 8003d52:	f7ff ff91 	bl	8003c78 <cyclesCounterEnd>
 8003d56:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8003d5a:	1818      	adds	r0, r3, r0
 8003d5c:	eb42 0101 	adc.w	r1, r2, r1
 8003d60:	e9c4 0106 	strd	r0, r1, [r4, #24]
 8003d64:	e7cd      	b.n	8003d02 <aiOnExecNode_cb+0x32>
    type |= (node->type & (ai_u16)0x7FFF);
 8003d66:	f8b8 6002 	ldrh.w	r6, [r8, #2]
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 8003d6a:	f8d2 9004 	ldr.w	r9, [r2, #4]
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8003d6e:	eddf 8a3a 	vldr	s17, [pc, #232]	; 8003e58 <aiOnExecNode_cb+0x188>
    type |= (node->type & (ai_u16)0x7FFF);
 8003d72:	f3c6 060e 	ubfx	r6, r6, #0, #15
 8003d76:	431e      	orrs	r6, r3
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8003d78:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 8003d7c:	428f      	cmp	r7, r1
 8003d7e:	d2e8      	bcs.n	8003d52 <aiOnExecNode_cb+0x82>
 8003d80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0e4      	beq.n	8003d52 <aiOnExecNode_cb+0x82>
 8003d88:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
 8003d8c:	2a00      	cmp	r2, #0
 8003d8e:	d0e0      	beq.n	8003d52 <aiOnExecNode_cb+0x82>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8003d90:	6813      	ldr	r3, [r2, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d04c      	beq.n	8003e30 <aiOnExecNode_cb+0x160>
 8003d96:	6858      	ldr	r0, [r3, #4]
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	d049      	beq.n	8003e30 <aiOnExecNode_cb+0x160>
 8003d9c:	885d      	ldrh	r5, [r3, #2]
 8003d9e:	2d00      	cmp	r5, #0
 8003da0:	d046      	beq.n	8003e30 <aiOnExecNode_cb+0x160>
 8003da2:	6800      	ldr	r0, [r0, #0]
 8003da4:	ed90 8a00 	vldr	s16, [r0]
      if (AI_TENSOR_FMT_GET_SIGN(t))
 8003da8:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8003dac:	f8dc 0000 	ldr.w	r0, [ip]
 8003db0:	f410 0500 	ands.w	r5, r0, #8388608	; 0x800000
 8003db4:	d03f      	beq.n	8003e36 <aiOnExecNode_cb+0x166>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d04b      	beq.n	8003e52 <aiOnExecNode_cb+0x182>
 8003dba:	685d      	ldr	r5, [r3, #4]
 8003dbc:	b12d      	cbz	r5, 8003dca <aiOnExecNode_cb+0xfa>
 8003dbe:	885b      	ldrh	r3, [r3, #2]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d046      	beq.n	8003e52 <aiOnExecNode_cb+0x182>
 8003dc4:	686b      	ldr	r3, [r5, #4]
 8003dc6:	f993 5000 	ldrsb.w	r5, [r3]
      buffer.format = AI_TENSOR_GET_FMT(t);
 8003dca:	9008      	str	r0, [sp, #32]
      buffer.n_batches = 1;
 8003dcc:	f04f 0301 	mov.w	r3, #1
 8003dd0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
      buffer.data = AI_TENSOR_ARRAY_GET_DATA_ADDR(t);
 8003dd4:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8003dd8:	930c      	str	r3, [sp, #48]	; 0x30
      buffer.height = AI_SHAPE_H(AI_TENSOR_SHAPE(t));
 8003dda:	68d3      	ldr	r3, [r2, #12]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
      if (i < (GET_TENSOR_LIST_SIZE(tl) - 1)) {
 8003de2:	3901      	subs	r1, #1
      buffer.width = AI_SHAPE_W(AI_TENSOR_SHAPE(t));
 8003de4:	689a      	ldr	r2, [r3, #8]
      buffer.channels = AI_SHAPE_CH(AI_TENSOR_SHAPE(t));
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	930b      	str	r3, [sp, #44]	; 0x2c
      if (i < (GET_TENSOR_LIST_SIZE(tl) - 1)) {
 8003dea:	428f      	cmp	r7, r1
      buffer.meta_info = NULL;
 8003dec:	f04f 0300 	mov.w	r3, #0
      aiPbMgrSendAiBuffer4(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003df0:	e9d4 ab03 	ldrd	sl, fp, [r4, #12]
      buffer.meta_info = NULL;
 8003df4:	930d      	str	r3, [sp, #52]	; 0x34
      aiPbMgrSendAiBuffer4(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003df6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
        n_type = type | (EnumLayerType_LAYER_TYPE_INTERNAL_DATA_NO_LAST << 16);
 8003dfa:	bf34      	ite	cc
 8003dfc:	f446 2380 	orrcc.w	r3, r6, #262144	; 0x40000
        n_type = type;
 8003e00:	4633      	movcs	r3, r6
      buffer.width = AI_SHAPE_W(AI_TENSOR_SHAPE(t));
 8003e02:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
      aiPbMgrSendAiBuffer4(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003e06:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8003e0a:	9305      	str	r3, [sp, #20]
 8003e0c:	9204      	str	r2, [sp, #16]
 8003e0e:	f7ff fe43 	bl	8003a98 <dwtCyclesToFloatMs>
 8003e12:	9a04      	ldr	r2, [sp, #16]
 8003e14:	9200      	str	r2, [sp, #0]
 8003e16:	a908      	add	r1, sp, #32
 8003e18:	9101      	str	r1, [sp, #4]
 8003e1a:	9b05      	ldr	r3, [sp, #20]
 8003e1c:	9502      	str	r5, [sp, #8]
 8003e1e:	eef0 0a48 	vmov.f32	s1, s16
 8003e22:	2202      	movs	r2, #2
 8003e24:	4659      	mov	r1, fp
 8003e26:	4650      	mov	r0, sl
 8003e28:	f7ff fb12 	bl	8003450 <aiPbMgrSendAiBuffer4>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8003e2c:	3701      	adds	r7, #1
 8003e2e:	e7a3      	b.n	8003d78 <aiOnExecNode_cb+0xa8>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8003e30:	eeb0 8a68 	vmov.f32	s16, s17
 8003e34:	e7b8      	b.n	8003da8 <aiOnExecNode_cb+0xd8>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0c7      	beq.n	8003dca <aiOnExecNode_cb+0xfa>
 8003e3a:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8003e3e:	f1be 0f00 	cmp.w	lr, #0
 8003e42:	d0c2      	beq.n	8003dca <aiOnExecNode_cb+0xfa>
 8003e44:	885b      	ldrh	r3, [r3, #2]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0bf      	beq.n	8003dca <aiOnExecNode_cb+0xfa>
 8003e4a:	f8de 3004 	ldr.w	r3, [lr, #4]
 8003e4e:	781d      	ldrb	r5, [r3, #0]
 8003e50:	e7bb      	b.n	8003dca <aiOnExecNode_cb+0xfa>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003e52:	461d      	mov	r5, r3
 8003e54:	e7b9      	b.n	8003dca <aiOnExecNode_cb+0xfa>
 8003e56:	bf00      	nop
 8003e58:	00000000 	.word	0x00000000

08003e5c <aiExecCtx>:
 * AI-related functions
 * -----------------------------------------------------------------------------
 */

static struct ai_network_exec_ctx *aiExecCtx(const char *nn_name, int pos)
{
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	4604      	mov	r4, r0
  struct ai_network_exec_ctx *cur = NULL;

  if (!nn_name)
    return NULL;

  if (!nn_name[0]) {
 8003e60:	7800      	ldrb	r0, [r0, #0]
 8003e62:	b930      	cbnz	r0, 8003e72 <aiExecCtx+0x16>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 8003e64:	b921      	cbnz	r1, 8003e70 <aiExecCtx+0x14>
 8003e66:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <aiExecCtx+0x4c>)
 8003e68:	6818      	ldr	r0, [r3, #0]
      cur = &net_exec_ctx[pos];
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	bf18      	it	ne
 8003e6e:	4618      	movne	r0, r3
      }
      cur = NULL;
    }
  }
  return cur;
}
 8003e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (cur->handle &&
 8003e72:	4e0d      	ldr	r6, [pc, #52]	; (8003ea8 <aiExecCtx+0x4c>)
 8003e74:	6830      	ldr	r0, [r6, #0]
 8003e76:	2800      	cmp	r0, #0
 8003e78:	d0fa      	beq.n	8003e70 <aiExecCtx+0x14>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8003e7a:	6877      	ldr	r7, [r6, #4]
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	f7fc f9a7 	bl	80001d0 <strlen>
 8003e82:	4605      	mov	r5, r0
 8003e84:	4620      	mov	r0, r4
 8003e86:	f7fc f9a3 	bl	80001d0 <strlen>
      if (cur->handle &&
 8003e8a:	4285      	cmp	r5, r0
 8003e8c:	d109      	bne.n	8003ea2 <aiExecCtx+0x46>
          (strncmp(cur->report.model_name, nn_name,
 8003e8e:	462a      	mov	r2, r5
 8003e90:	4621      	mov	r1, r4
 8003e92:	4638      	mov	r0, r7
 8003e94:	f006 fa26 	bl	800a2e4 <strncmp>
      cur = &net_exec_ctx[pos];
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	bf0c      	ite	eq
 8003e9c:	4630      	moveq	r0, r6
 8003e9e:	2000      	movne	r0, #0
 8003ea0:	e7e6      	b.n	8003e70 <aiExecCtx+0x14>
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	e7e4      	b.n	8003e70 <aiExecCtx+0x14>
 8003ea6:	bf00      	nop
 8003ea8:	20001460 	.word	0x20001460

08003eac <aiPbCmdNNInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8003eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003eae:	4604      	mov	r4, r0
 8003eb0:	460d      	mov	r5, r1
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 8003eb2:	300c      	adds	r0, #12
 8003eb4:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8003eb8:	f7ff ffd0 	bl	8003e5c <aiExecCtx>
  if (ctx)
 8003ebc:	b140      	cbz	r0, 8003ed0 <aiPbCmdNNInfo+0x24>
    aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 8003ebe:	1d03      	adds	r3, r0, #4
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	4620      	mov	r0, r4
        &ctx->report);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 8003ec6:	b003      	add	sp, #12
 8003ec8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 8003ecc:	f7ff bb68 	b.w	80035a0 <aiPbMgrSendNNInfo>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f7ff fa53 	bl	8003384 <aiPbMgrSendAck>
}
 8003ede:	b003      	add	sp, #12
 8003ee0:	bd30      	pop	{r4, r5, pc}
	...

08003ee4 <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 8003ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee8:	ed2d 8b02 	vpush	{d8}
 8003eec:	4606      	mov	r6, r0
 8003eee:	b0a1      	sub	sp, #132	; 0x84
 8003ef0:	460d      	mov	r5, r1
  ai_buffer ai_output[AI_MNETWORK_OUT_NUM];

  UNUSED(param);

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 8003ef2:	300c      	adds	r0, #12
 8003ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef8:	f7ff ffb0 	bl	8003e5c <aiExecCtx>
  if (!ctx) {
 8003efc:	4604      	mov	r4, r0
 8003efe:	b958      	cbnz	r0, 8003f18 <aiPbCmdNNRun+0x34>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003f00:	2304      	movs	r3, #4

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
  if (batch != 1) {
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	2204      	movs	r2, #4
 8003f06:	4629      	mov	r1, r5
 8003f08:	4630      	mov	r0, r6
 8003f0a:	f7ff fa3b 	bl	8003384 <aiPbMgrSendAck>
        0, dwtCyclesToFloatMs(tend),
        &ai_output[i], 0.0f, 0);
  }

  aiObserverUnbind(ctx);
}
 8003f0e:	b021      	add	sp, #132	; 0x84
 8003f10:	ecbd 8b02 	vpop	{d8}
 8003f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  aiObserverConfig(ctx, req);
 8003f18:	68b2      	ldr	r2, [r6, #8]
  net_obs_ctx.no_data = false;
 8003f1a:	4b81      	ldr	r3, [pc, #516]	; (8004120 <aiPbCmdNNRun+0x23c>)
  ctx->obs_ctx = &net_obs_ctx;
 8003f1c:	67a3      	str	r3, [r4, #120]	; 0x78
  net_obs_ctx.no_data = false;
 8003f1e:	2100      	movs	r1, #0
 8003f20:	7519      	strb	r1, [r3, #20]
  if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR) ==
 8003f22:	f012 0101 	ands.w	r1, r2, #1
    net_obs_ctx.is_enabled = true;
 8003f26:	bf18      	it	ne
 8003f28:	2101      	movne	r1, #1
 8003f2a:	7019      	strb	r1, [r3, #0]
  net_obs_ctx.tcom = 0ULL;
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	2100      	movs	r1, #0
  net_obs_ctx.n_cb_in  = 0;
 8003f30:	2700      	movs	r7, #0
  if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) ==
 8003f32:	0792      	lsls	r2, r2, #30
  net_obs_ctx.tcom = 0ULL;
 8003f34:	e9c3 0106 	strd	r0, r1, [r3, #24]
  net_obs_ctx.tnodes = 0ULL;
 8003f38:	e9c3 0108 	strd	r0, r1, [r3, #32]
  net_obs_ctx.n_cb_out = 0;
 8003f3c:	e9c3 7701 	strd	r7, r7, [r3, #4]
    net_obs_ctx.is_enabled = true;
 8003f40:	bf42      	ittt	mi
 8003f42:	2201      	movmi	r2, #1
 8003f44:	701a      	strbmi	r2, [r3, #0]
    net_obs_ctx.no_data = true;
 8003f46:	751a      	strbmi	r2, [r3, #20]
return 0;
 8003f48:	f10d 0820 	add.w	r8, sp, #32
    ai_input[i] = ctx->report.inputs[i];
 8003f4c:	f04f 0b18 	mov.w	fp, #24
    ai_input[i].n_batches  = 1;
 8003f50:	f04f 0a01 	mov.w	sl, #1
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8003f54:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8003f56:	42bb      	cmp	r3, r7
 8003f58:	dc41      	bgt.n	8003fde <aiPbCmdNNRun+0xfa>
 8003f5a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8003f5e:	46c6      	mov	lr, r8
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003f60:	f04f 0900 	mov.w	r9, #0
    ai_output[i] = ctx->report.outputs[i];
 8003f64:	f04f 0b18 	mov.w	fp, #24
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003f68:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003f6a:	454b      	cmp	r3, r9
 8003f6c:	dc52      	bgt.n	8004014 <aiPbCmdNNRun+0x130>
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 8003f6e:	a808      	add	r0, sp, #32
 8003f70:	f7ff fa28 	bl	80033c4 <aiPbAiBufferSize>
 8003f74:	2700      	movs	r7, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	9700      	str	r7, [sp, #0]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	4630      	mov	r0, r6
 8003f80:	f7ff fa00 	bl	8003384 <aiPbMgrSendAck>
    res = aiPbMgrReceiveAiBuffer3(req, resp, state, &ai_input[i]);
 8003f84:	f04f 0918 	mov.w	r9, #24
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8003f88:	463b      	mov	r3, r7
 8003f8a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	dc5e      	bgt.n	800404e <aiPbCmdNNRun+0x16a>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8003f90:	6fa7      	ldr	r7, [r4, #120]	; 0x78
  if (obs_ctx->is_enabled == false)
 8003f92:	783b      	ldrb	r3, [r7, #0]
 8003f94:	b18b      	cbz	r3, 8003fba <aiPbCmdNNRun+0xd6>
  if (ctx->handle == AI_HANDLE_NULL)
 8003f96:	6820      	ldr	r0, [r4, #0]
 8003f98:	b178      	cbz	r0, 8003fba <aiPbCmdNNRun+0xd6>
  ai_mnetwork_get_private_handle(ctx->handle,
 8003f9a:	a907      	add	r1, sp, #28
  obs_ctx->cresp = cresp;
 8003f9c:	e9c7 6503 	strd	r6, r5, [r7, #12]
  ai_mnetwork_get_private_handle(ctx->handle,
 8003fa0:	aa14      	add	r2, sp, #80	; 0x50
 8003fa2:	f000 facc 	bl	800453e <ai_mnetwork_get_private_handle>
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 8003fa6:	4b5f      	ldr	r3, [pc, #380]	; (8004124 <aiPbCmdNNRun+0x240>)
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 8003fa8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8003fac:	2306      	movs	r3, #6
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8003fae:	9807      	ldr	r0, [sp, #28]
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8003fb2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003fb6:	f003 f865 	bl	8007084 <ai_platform_observer_register_s>
  cyclesCounterStart();
 8003fba:	f7ff fe4d 	bl	8003c58 <cyclesCounterStart>
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 8003fbe:	6820      	ldr	r0, [r4, #0]
 8003fc0:	aa0e      	add	r2, sp, #56	; 0x38
 8003fc2:	a908      	add	r1, sp, #32
 8003fc4:	f000 faaa 	bl	800451c <ai_mnetwork_run>
  if (batch != 1) {
 8003fc8:	2801      	cmp	r0, #1
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 8003fca:	4682      	mov	sl, r0
  if (batch != 1) {
 8003fcc:	d050      	beq.n	8004070 <aiPbCmdNNRun+0x18c>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 8003fce:	6820      	ldr	r0, [r4, #0]
 8003fd0:	f000 fa5f 	bl	8004492 <ai_mnetwork_get_error>
 8003fd4:	4954      	ldr	r1, [pc, #336]	; (8004128 <aiPbCmdNNRun+0x244>)
 8003fd6:	f7ff fb67 	bl	80036a8 <aiLogErr>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003fda:	230a      	movs	r3, #10
 8003fdc:	e791      	b.n	8003f02 <aiPbCmdNNRun+0x1e>
    ai_input[i] = ctx->report.inputs[i];
 8003fde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fe0:	fb0b 3907 	mla	r9, fp, r7, r3
 8003fe4:	46ce      	mov	lr, r9
 8003fe6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003fea:	46c4      	mov	ip, r8
 8003fec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003ff0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8003ff4:	e88c 0003 	stmia.w	ip, {r0, r1}
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8003ff8:	4a4c      	ldr	r2, [pc, #304]	; (800412c <aiPbCmdNNRun+0x248>)
    if (ctx->report.inputs[i].data)
 8003ffa:	f8d9 3010 	ldr.w	r3, [r9, #16]
    ai_input[i].n_batches  = 1;
 8003ffe:	f8a8 a004 	strh.w	sl, [r8, #4]
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8004002:	2b00      	cmp	r3, #0
 8004004:	bf08      	it	eq
 8004006:	4613      	moveq	r3, r2
 8004008:	f8c8 3010 	str.w	r3, [r8, #16]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 800400c:	3701      	adds	r7, #1
 800400e:	f108 0818 	add.w	r8, r8, #24
 8004012:	e79f      	b.n	8003f54 <aiPbCmdNNRun+0x70>
    ai_output[i] = ctx->report.outputs[i];
 8004014:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004016:	fb0b 3a09 	mla	sl, fp, r9, r3
 800401a:	46d4      	mov	ip, sl
 800401c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004020:	4677      	mov	r7, lr
 8004022:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004024:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8004028:	e887 0003 	stmia.w	r7, {r0, r1}
    ai_output[i].n_batches = 1;
 800402c:	f04f 0301 	mov.w	r3, #1
 8004030:	f8ae 3004 	strh.w	r3, [lr, #4]
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8004034:	4a3e      	ldr	r2, [pc, #248]	; (8004130 <aiPbCmdNNRun+0x24c>)
    if (ctx->report.outputs[i].data)
 8004036:	f8da 3010 	ldr.w	r3, [sl, #16]
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf08      	it	eq
 800403e:	4613      	moveq	r3, r2
 8004040:	f8ce 3010 	str.w	r3, [lr, #16]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8004044:	f109 0901 	add.w	r9, r9, #1
 8004048:	f10e 0e18 	add.w	lr, lr, #24
 800404c:	e78c      	b.n	8003f68 <aiPbCmdNNRun+0x84>
    if ((i + 1) == ctx->report.n_inputs)
 800404e:	1c5f      	adds	r7, r3, #1
    res = aiPbMgrReceiveAiBuffer3(req, resp, state, &ai_input[i]);
 8004050:	a908      	add	r1, sp, #32
 8004052:	fb09 1303 	mla	r3, r9, r3, r1
 8004056:	4297      	cmp	r7, r2
 8004058:	bf0c      	ite	eq
 800405a:	2202      	moveq	r2, #2
 800405c:	2201      	movne	r2, #1
 800405e:	4629      	mov	r1, r5
 8004060:	4630      	mov	r0, r6
 8004062:	f7ff f9b9 	bl	80033d8 <aiPbMgrReceiveAiBuffer3>
    if (res != true)
 8004066:	2800      	cmp	r0, #0
 8004068:	f43f af51 	beq.w	8003f0e <aiPbCmdNNRun+0x2a>
 800406c:	463b      	mov	r3, r7
 800406e:	e78c      	b.n	8003f8a <aiPbCmdNNRun+0xa6>
  tend = cyclesCounterEnd();
 8004070:	f7ff fe02 	bl	8003c78 <cyclesCounterEnd>
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8004074:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 8004076:	e9d2 3706 	ldrd	r3, r7, [r2, #24]
 800407a:	e9d2 c208 	ldrd	ip, r2, [r2, #32]
 800407e:	eb13 030c 	adds.w	r3, r3, ip
 8004082:	eb47 0202 	adc.w	r2, r7, r2
 8004086:	181f      	adds	r7, r3, r0
 8004088:	eb42 0901 	adc.w	r9, r2, r1
  aiObserverSendReport(req, resp, EnumState_S_PROCESSING, ctx,
 800408c:	4638      	mov	r0, r7
 800408e:	4649      	mov	r1, r9
 8004090:	f7ff fd02 	bl	8003a98 <dwtCyclesToFloatMs>
  if (obs_ctx->is_enabled == false)
 8004094:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	b183      	cbz	r3, 80040bc <aiPbCmdNNRun+0x1d8>
  resp->which_payload = respMsg_report_tag;
 800409a:	2315      	movs	r3, #21
  resp->payload.report.n_nodes = ctx->report.n_nodes;
 800409c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  resp->which_payload = respMsg_report_tag;
 800409e:	80eb      	strh	r3, [r5, #6]
  resp->payload.report.id = 0;
 80040a0:	2300      	movs	r3, #0
  resp->payload.report.num_inferences = 1;
 80040a2:	e9c5 3a03 	strd	r3, sl, [r5, #12]
  resp->payload.report.id = 0;
 80040a6:	60ab      	str	r3, [r5, #8]
  resp->payload.report.elapsed_ms = dur_ms;
 80040a8:	ed85 0a06 	vstr	s0, [r5, #24]
  resp->payload.report.n_nodes = ctx->report.n_nodes;
 80040ac:	616a      	str	r2, [r5, #20]
  aiPbMgrSendResp(req, resp, state);
 80040ae:	4629      	mov	r1, r5
 80040b0:	2202      	movs	r2, #2
 80040b2:	4630      	mov	r0, r6
 80040b4:	f7ff f91c 	bl	80032f0 <aiPbMgrSendResp>
  aiPbMgrWaitAck();
 80040b8:	f7ff f96e 	bl	8003398 <aiPbMgrWaitAck>
      state = EnumState_S_DONE;
 80040bc:	f04f 0a00 	mov.w	sl, #0
    aiPbMgrSendAiBuffer4(req, resp, state,
 80040c0:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8004134 <aiPbCmdNNRun+0x250>
 80040c4:	46d3      	mov	fp, sl
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80040c6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80040c8:	4552      	cmp	r2, sl
 80040ca:	dc0f      	bgt.n	80040ec <aiPbCmdNNRun+0x208>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 80040cc:	6fa5      	ldr	r5, [r4, #120]	; 0x78
  if (obs_ctx->is_enabled == false)
 80040ce:	782b      	ldrb	r3, [r5, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f43f af1c 	beq.w	8003f0e <aiPbCmdNNRun+0x2a>
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 80040d6:	a907      	add	r1, sp, #28
 80040d8:	6820      	ldr	r0, [r4, #0]
 80040da:	aa14      	add	r2, sp, #80	; 0x50
 80040dc:	f000 fa2f 	bl	800453e <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 80040e0:	9807      	ldr	r0, [sp, #28]
 80040e2:	f105 0128 	add.w	r1, r5, #40	; 0x28
 80040e6:	f003 f86d 	bl	80071c4 <ai_platform_observer_unregister_s>
  return 0;
 80040ea:	e710      	b.n	8003f0e <aiPbCmdNNRun+0x2a>
    if ((i + 1) == ctx->report.n_outputs)
 80040ec:	f10a 0a01 	add.w	sl, sl, #1
      state = EnumState_S_DONE;
 80040f0:	4592      	cmp	sl, r2
 80040f2:	bf14      	ite	ne
 80040f4:	2202      	movne	r2, #2
 80040f6:	2203      	moveq	r2, #3
    aiPbMgrSendAiBuffer4(req, resp, state,
 80040f8:	4638      	mov	r0, r7
 80040fa:	4649      	mov	r1, r9
      state = EnumState_S_DONE;
 80040fc:	9205      	str	r2, [sp, #20]
    aiPbMgrSendAiBuffer4(req, resp, state,
 80040fe:	f7ff fccb 	bl	8003a98 <dwtCyclesToFloatMs>
 8004102:	e9cd 8b01 	strd	r8, fp, [sp, #4]
 8004106:	9a05      	ldr	r2, [sp, #20]
 8004108:	f8cd b000 	str.w	fp, [sp]
 800410c:	eef0 0a48 	vmov.f32	s1, s16
 8004110:	2300      	movs	r3, #0
 8004112:	4629      	mov	r1, r5
 8004114:	4630      	mov	r0, r6
 8004116:	f7ff f99b 	bl	8003450 <aiPbMgrSendAiBuffer4>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800411a:	f108 0818 	add.w	r8, r8, #24
 800411e:	e7d2      	b.n	80040c6 <aiPbCmdNNRun+0x1e2>
 8004120:	200014e0 	.word	0x200014e0
 8004124:	08003cd1 	.word	0x08003cd1
 8004128:	0800cc74 	.word	0x0800cc74
 800412c:	200011e0 	.word	0x200011e0
 8004130:	20001450 	.word	0x20001450
 8004134:	00000000 	.word	0x00000000

08004138 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 8004138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  printf("\r\n#\r\n");
 800413a:	4811      	ldr	r0, [pc, #68]	; (8004180 <aiValidationInit+0x48>)
 800413c:	f006 f8ba 	bl	800a2b4 <puts>
  printf("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 8004140:	2302      	movs	r3, #2
 8004142:	4910      	ldr	r1, [pc, #64]	; (8004184 <aiValidationInit+0x4c>)
 8004144:	4810      	ldr	r0, [pc, #64]	; (8004188 <aiValidationInit+0x50>)
 8004146:	2205      	movs	r2, #5
 8004148:	f006 f82e 	bl	800a1a8 <iprintf>
  printf("#\r\n");
 800414c:	480f      	ldr	r0, [pc, #60]	; (800418c <aiValidationInit+0x54>)
 800414e:	f006 f8b1 	bl	800a2b4 <puts>

  systemSettingLog();
 8004152:	f7ff fcc5 	bl	8003ae0 <systemSettingLog>
  dwtCyclesToTime(UINT32_MAX, &t);
 8004156:	466a      	mov	r2, sp
 8004158:	2100      	movs	r1, #0
 800415a:	f04f 30ff 	mov.w	r0, #4294967295
 800415e:	f7ff fc5f 	bl	8003a20 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8004162:	9a01      	ldr	r2, [sp, #4]
 8004164:	9b02      	ldr	r3, [sp, #8]
 8004166:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800416a:	fb01 3302 	mla	r3, r1, r2, r3
 800416e:	4a08      	ldr	r2, [pc, #32]	; (8004190 <aiValidationInit+0x58>)
 8004170:	6013      	str	r3, [r2, #0]
  dwtIpInit();
 8004172:	f7ff fc41 	bl	80039f8 <dwtIpInit>

  cyclesCounterInit();

  return 0;
}
 8004176:	2000      	movs	r0, #0
 8004178:	b005      	add	sp, #20
 800417a:	f85d fb04 	ldr.w	pc, [sp], #4
 800417e:	bf00      	nop
 8004180:	0800cc84 	.word	0x0800cc84
 8004184:	0800cc89 	.word	0x0800cc89
 8004188:	0800cca8 	.word	0x0800cca8
 800418c:	0800cc86 	.word	0x0800cc86
 8004190:	20000e74 	.word	0x20000e74

08004194 <aiValidationProcess>:

int aiValidationProcess(void)
{
 8004194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8004198:	4c65      	ldr	r4, [pc, #404]	; (8004330 <aiValidationProcess+0x19c>)
      printf("\r\nFound network \"%s\"\r\n", nn_name);
 800419a:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8004370 <aiValidationProcess+0x1dc>
  printf("Creating the network \"%s\"..\r\n", nn_name);
 800419e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8004374 <aiValidationProcess+0x1e0>
  printf("Initializing the network\r\n");
 80041a2:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8004378 <aiValidationProcess+0x1e4>
{
 80041a6:	b08f      	sub	sp, #60	; 0x3c
  aiPlatformVersion();
 80041a8:	f7ff fa6e 	bl	8003688 <aiPlatformVersion>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80041ac:	2700      	movs	r7, #0
  printf("Discovering the network(s)...\r\n");
 80041ae:	4861      	ldr	r0, [pc, #388]	; (8004334 <aiValidationProcess+0x1a0>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80041b0:	f844 7b04 	str.w	r7, [r4], #4
  printf("Discovering the network(s)...\r\n");
 80041b4:	f006 f87e 	bl	800a2b4 <puts>
  int res = -1;
 80041b8:	f04f 35ff 	mov.w	r5, #4294967295
    nn_name = ai_mnetwork_find(NULL, idx);
 80041bc:	4639      	mov	r1, r7
 80041be:	2000      	movs	r0, #0
 80041c0:	f000 f908 	bl	80043d4 <ai_mnetwork_find>
    if (nn_name) {
 80041c4:	4606      	mov	r6, r0
 80041c6:	b1a8      	cbz	r0, 80041f4 <aiValidationProcess+0x60>
      printf("\r\nFound network \"%s\"\r\n", nn_name);
 80041c8:	4601      	mov	r1, r0
 80041ca:	4640      	mov	r0, r8
 80041cc:	f005 ffec 	bl	800a1a8 <iprintf>
  printf("Creating the network \"%s\"..\r\n", nn_name);
 80041d0:	4631      	mov	r1, r6
 80041d2:	4648      	mov	r0, r9
 80041d4:	f005 ffe8 	bl	800a1a8 <iprintf>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 80041d8:	2200      	movs	r2, #0
 80041da:	1f21      	subs	r1, r4, #4
 80041dc:	4630      	mov	r0, r6
 80041de:	f000 f907 	bl	80043f0 <ai_mnetwork_create>
  if (err.type) {
 80041e2:	f010 0bff 	ands.w	fp, r0, #255	; 0xff
 80041e6:	d017      	beq.n	8004218 <aiValidationProcess+0x84>
    aiLogErr(err, "ai_mnetwork_create");
 80041e8:	4953      	ldr	r1, [pc, #332]	; (8004338 <aiValidationProcess+0x1a4>)
 80041ea:	f7ff fa5d 	bl	80036a8 <aiLogErr>
        nn_name = NULL;
 80041ee:	2600      	movs	r6, #0
    return -1;
 80041f0:	f04f 35ff 	mov.w	r5, #4294967295
    idx++;
 80041f4:	3701      	adds	r7, #1
  } while (nn_name);
 80041f6:	347c      	adds	r4, #124	; 0x7c
 80041f8:	2e00      	cmp	r6, #0
 80041fa:	d1df      	bne.n	80041bc <aiValidationProcess+0x28>
  int r;

  r = aiInit();
  if (r) {
 80041fc:	2d00      	cmp	r5, #0
 80041fe:	d073      	beq.n	80042e8 <aiValidationProcess+0x154>
    printf("\r\nE:  aiInit() r=%d\r\n", r);
 8004200:	484e      	ldr	r0, [pc, #312]	; (800433c <aiValidationProcess+0x1a8>)
 8004202:	4629      	mov	r1, r5
 8004204:	f005 ffd0 	bl	800a1a8 <iprintf>
    HAL_Delay(2000);
 8004208:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800420c:	f7fd faa6 	bl	800175c <HAL_Delay>
  do {
    r = aiPbMgrWaitAndProcess();
  } while (r==0);

  return r;
}
 8004210:	4628      	mov	r0, r5
 8004212:	b00f      	add	sp, #60	; 0x3c
 8004214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  printf("Initializing the network\r\n");
 8004218:	4650      	mov	r0, sl
 800421a:	f006 f84b 	bl	800a2b4 <puts>
  if (ai_mnetwork_get_info(ctx->handle,
 800421e:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8004222:	4621      	mov	r1, r4
 8004224:	f000 f92a 	bl	800447c <ai_mnetwork_get_info>
 8004228:	4605      	mov	r5, r0
 800422a:	b980      	cbnz	r0, 800424e <aiValidationProcess+0xba>
    err = ai_mnetwork_get_error(ctx->handle);
 800422c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8004230:	f000 f92f 	bl	8004492 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8004234:	4942      	ldr	r1, [pc, #264]	; (8004340 <aiValidationProcess+0x1ac>)
 8004236:	f7ff fa37 	bl	80036a8 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 800423a:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800423e:	f000 f905 	bl	800444c <ai_mnetwork_destroy>
        nn_name = NULL;
 8004242:	462e      	mov	r6, r5
    ctx->handle = AI_HANDLE_NULL;
 8004244:	f844 5c04 	str.w	r5, [r4, #-4]
    return -2;
 8004248:	f06f 0501 	mvn.w	r5, #1
 800424c:	e7d2      	b.n	80041f4 <aiValidationProcess+0x60>
  ai_network_params params = AI_NETWORK_PARAMS_INIT(
 800424e:	222c      	movs	r2, #44	; 0x2c
 8004250:	4659      	mov	r1, fp
 8004252:	a803      	add	r0, sp, #12
 8004254:	f005 fa56 	bl	8009704 <memset>
 8004258:	4b3a      	ldr	r3, [pc, #232]	; (8004344 <aiValidationProcess+0x1b0>)
  if (ai_mnetwork_get_ext_data_activations(ctx->handle, &ext_addr, &sz) == 0) {
 800425a:	f854 0c04 	ldr.w	r0, [r4, #-4]
  ai_network_params params = AI_NETWORK_PARAMS_INIT(
 800425e:	9302      	str	r3, [sp, #8]
  if (ai_mnetwork_get_ext_data_activations(ctx->handle, &ext_addr, &sz) == 0) {
 8004260:	aa01      	add	r2, sp, #4
 8004262:	4669      	mov	r1, sp
  ai_network_params params = AI_NETWORK_PARAMS_INIT(
 8004264:	9308      	str	r3, [sp, #32]
  if (ai_mnetwork_get_ext_data_activations(ctx->handle, &ext_addr, &sz) == 0) {
 8004266:	f000 f982 	bl	800456e <ai_mnetwork_get_ext_data_activations>
 800426a:	4605      	mov	r5, r0
 800426c:	b9b8      	cbnz	r0, 800429e <aiValidationProcess+0x10a>
    if (ext_addr == 0xFFFFFFFF) {
 800426e:	9b00      	ldr	r3, [sp, #0]
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	d113      	bne.n	800429c <aiValidationProcess+0x108>
      params.activations.data = (ai_handle)activations;
 8004274:	4b34      	ldr	r3, [pc, #208]	; (8004348 <aiValidationProcess+0x1b4>)
 8004276:	930c      	str	r3, [sp, #48]	; 0x30
      if (sz > AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE) {
 8004278:	9b01      	ldr	r3, [sp, #4]
 800427a:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 800427e:	d90e      	bls.n	800429e <aiValidationProcess+0x10a>
        printf("E: APP error (aiBootstrap for %s) - size of the local activations buffer is not enough\r\n",
 8004280:	4631      	mov	r1, r6
 8004282:	4832      	ldr	r0, [pc, #200]	; (800434c <aiValidationProcess+0x1b8>)
 8004284:	f005 ff90 	bl	800a1a8 <iprintf>
        ai_mnetwork_destroy(ctx->handle);
 8004288:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800428c:	f000 f8de 	bl	800444c <ai_mnetwork_destroy>
        nn_name = NULL;
 8004290:	462e      	mov	r6, r5
        ctx->handle = AI_HANDLE_NULL;
 8004292:	f844 5c04 	str.w	r5, [r4, #-4]
        return -5;
 8004296:	f06f 0504 	mvn.w	r5, #4
 800429a:	e7ab      	b.n	80041f4 <aiValidationProcess+0x60>
      params.activations.data = (ai_handle)ext_addr;
 800429c:	930c      	str	r3, [sp, #48]	; 0x30
  if (!ai_mnetwork_init(ctx->handle, &params)) {
 800429e:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80042a2:	a902      	add	r1, sp, #8
 80042a4:	f000 f902 	bl	80044ac <ai_mnetwork_init>
 80042a8:	4605      	mov	r5, r0
 80042aa:	b980      	cbnz	r0, 80042ce <aiValidationProcess+0x13a>
    err = ai_mnetwork_get_error(ctx->handle);
 80042ac:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80042b0:	f000 f8ef 	bl	8004492 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 80042b4:	4926      	ldr	r1, [pc, #152]	; (8004350 <aiValidationProcess+0x1bc>)
 80042b6:	f7ff f9f7 	bl	80036a8 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 80042ba:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80042be:	f000 f8c5 	bl	800444c <ai_mnetwork_destroy>
        nn_name = NULL;
 80042c2:	462e      	mov	r6, r5
    ctx->handle = AI_HANDLE_NULL;
 80042c4:	f844 5c04 	str.w	r5, [r4, #-4]
    return -4;
 80042c8:	f06f 0503 	mvn.w	r5, #3
 80042cc:	e792      	b.n	80041f4 <aiValidationProcess+0x60>
  if (ai_mnetwork_get_info(ctx->handle,
 80042ce:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80042d2:	4621      	mov	r1, r4
 80042d4:	f000 f8d2 	bl	800447c <ai_mnetwork_get_info>
 80042d8:	4605      	mov	r5, r0
 80042da:	2800      	cmp	r0, #0
 80042dc:	d0a6      	beq.n	800422c <aiValidationProcess+0x98>
    aiPrintNetworkInfo(&ctx->report);
 80042de:	4620      	mov	r0, r4
 80042e0:	f7ff fa90 	bl	8003804 <aiPrintNetworkInfo>
  return 0;
 80042e4:	2500      	movs	r5, #0
 80042e6:	e785      	b.n	80041f4 <aiValidationProcess+0x60>
    printf("\r\n");
 80042e8:	481a      	ldr	r0, [pc, #104]	; (8004354 <aiValidationProcess+0x1c0>)
 80042ea:	f005 ffe3 	bl	800a2b4 <puts>
    printf("-------------------------------------------\r\n");
 80042ee:	481a      	ldr	r0, [pc, #104]	; (8004358 <aiValidationProcess+0x1c4>)
 80042f0:	f005 ffe0 	bl	800a2b4 <puts>
    printf("| READY to receive a CMD from the HOST... |\r\n");
 80042f4:	4819      	ldr	r0, [pc, #100]	; (800435c <aiValidationProcess+0x1c8>)
 80042f6:	f005 ffdd 	bl	800a2b4 <puts>
    printf("-------------------------------------------\r\n");
 80042fa:	4817      	ldr	r0, [pc, #92]	; (8004358 <aiValidationProcess+0x1c4>)
 80042fc:	f005 ffda 	bl	800a2b4 <puts>
    printf("\r\n");
 8004300:	4814      	ldr	r0, [pc, #80]	; (8004354 <aiValidationProcess+0x1c0>)
 8004302:	f005 ffd7 	bl	800a2b4 <puts>
    printf("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 8004306:	4816      	ldr	r0, [pc, #88]	; (8004360 <aiValidationProcess+0x1cc>)
 8004308:	f005 ffd4 	bl	800a2b4 <puts>
    printf("# and a stm32com-base interface should be used\r\n");
 800430c:	4815      	ldr	r0, [pc, #84]	; (8004364 <aiValidationProcess+0x1d0>)
 800430e:	f005 ffd1 	bl	800a2b4 <puts>
    printf("# (i.e. Python stm32com module). Protocol version = %d.%d\r\n",
 8004312:	2202      	movs	r2, #2
 8004314:	4814      	ldr	r0, [pc, #80]	; (8004368 <aiValidationProcess+0x1d4>)
 8004316:	4611      	mov	r1, r2
 8004318:	f005 ff46 	bl	800a1a8 <iprintf>
  aiPbMgrInit(pbCmdFuncTab);
 800431c:	4813      	ldr	r0, [pc, #76]	; (800436c <aiValidationProcess+0x1d8>)
 800431e:	f7fe ffb7 	bl	8003290 <aiPbMgrInit>
    r = aiPbMgrWaitAndProcess();
 8004322:	f7fe fff7 	bl	8003314 <aiPbMgrWaitAndProcess>
  } while (r==0);
 8004326:	4605      	mov	r5, r0
 8004328:	2800      	cmp	r0, #0
 800432a:	d0fa      	beq.n	8004322 <aiValidationProcess+0x18e>
 800432c:	e770      	b.n	8004210 <aiValidationProcess+0x7c>
 800432e:	bf00      	nop
 8004330:	20001460 	.word	0x20001460
 8004334:	0800ccb5 	.word	0x0800ccb5
 8004338:	0800cd09 	.word	0x0800cd09
 800433c:	0800cdb5 	.word	0x0800cdb5
 8004340:	0800cd36 	.word	0x0800cd36
 8004344:	40000040 	.word	0x40000040
 8004348:	20000ea0 	.word	0x20000ea0
 800434c:	0800cd4b 	.word	0x0800cd4b
 8004350:	0800cda4 	.word	0x0800cda4
 8004354:	0800cc87 	.word	0x0800cc87
 8004358:	0800cdcb 	.word	0x0800cdcb
 800435c:	0800cdf8 	.word	0x0800cdf8
 8004360:	0800ce25 	.word	0x0800ce25
 8004364:	0800ce6a 	.word	0x0800ce6a
 8004368:	0800ce9a 	.word	0x0800ce9a
 800436c:	20000010 	.word	0x20000010
 8004370:	0800ccd4 	.word	0x0800ccd4
 8004374:	0800cceb 	.word	0x0800cceb
 8004378:	0800cd1c 	.word	0x0800cd1c

0800437c <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <ai_mnetwork_handle+0x18>)
 800437e:	b120      	cbz	r0, 800438a <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8004380:	4298      	cmp	r0, r3
 8004382:	bf0c      	ite	eq
 8004384:	4618      	moveq	r0, r3
 8004386:	2000      	movne	r0, #0
 8004388:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 800438a:	681a      	ldr	r2, [r3, #0]
            return inst;
 800438c:	2a00      	cmp	r2, #0
 800438e:	bf08      	it	eq
 8004390:	4618      	moveq	r0, r3
}
 8004392:	4770      	bx	lr
 8004394:	20001520 	.word	0x20001520

08004398 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8004398:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 800439a:	4604      	mov	r4, r0
 800439c:	b160      	cbz	r0, 80043b8 <ai_mnetwork_is_valid.constprop.0+0x20>
 800439e:	f7fb ff17 	bl	80001d0 <strlen>
 80043a2:	2807      	cmp	r0, #7
 80043a4:	4602      	mov	r2, r0
 80043a6:	d107      	bne.n	80043b8 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 80043a8:	4804      	ldr	r0, [pc, #16]	; (80043bc <ai_mnetwork_is_valid.constprop.0+0x24>)
 80043aa:	4621      	mov	r1, r4
 80043ac:	f005 ff9a 	bl	800a2e4 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 80043b0:	fab0 f080 	clz	r0, r0
 80043b4:	0940      	lsrs	r0, r0, #5
}
 80043b6:	bd10      	pop	{r4, pc}
    return false;
 80043b8:	2000      	movs	r0, #0
 80043ba:	e7fc      	b.n	80043b6 <ai_mnetwork_is_valid.constprop.0+0x1e>
 80043bc:	0800ced6 	.word	0x0800ced6

080043c0 <MX_X_CUBE_AI_Init>:
{
 80043c0:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 80043c2:	f7fd f871 	bl	80014a8 <MX_USART1_UART_Init>
}
 80043c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 80043ca:	f7ff beb5 	b.w	8004138 <aiValidationInit>

080043ce <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 80043ce:	f7ff bee1 	b.w	8004194 <aiValidationProcess>
	...

080043d4 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 80043d4:	b510      	push	{r4, lr}
 80043d6:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 80043d8:	f7ff ffde 	bl	8004398 <ai_mnetwork_is_valid.constprop.0>
 80043dc:	b920      	cbnz	r0, 80043e8 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 80043de:	2c00      	cmp	r4, #0
 80043e0:	4802      	ldr	r0, [pc, #8]	; (80043ec <ai_mnetwork_find+0x18>)
 80043e2:	bf18      	it	ne
 80043e4:	2000      	movne	r0, #0
}
 80043e6:	bd10      	pop	{r4, pc}
            return entry->name;
 80043e8:	4800      	ldr	r0, [pc, #0]	; (80043ec <ai_mnetwork_find+0x18>)
 80043ea:	e7fc      	b.n	80043e6 <ai_mnetwork_find+0x12>
 80043ec:	0800ced6 	.word	0x0800ced6

080043f0 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 80043f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043f2:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80043f4:	2000      	movs	r0, #0
{
 80043f6:	460d      	mov	r5, r1
 80043f8:	4611      	mov	r1, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80043fa:	f7ff ffbf 	bl	800437c <ai_mnetwork_handle>

    if (!inst) {
 80043fe:	4604      	mov	r4, r0
 8004400:	b930      	cbnz	r0, 8004410 <ai_mnetwork_create+0x20>
        err.type = AI_ERROR_ALLOCATION_FAILED;
        err.code = AI_ERROR_CODE_NETWORK;
        return err;
 8004402:	f241 0031 	movw	r0, #4145	; 0x1031
        inst->handle = *network;
        *network = (ai_handle*)inst;
    }

    return err;
}
 8004406:	b002      	add	sp, #8
 8004408:	bd70      	pop	{r4, r5, r6, pc}
        return err;
 800440a:	f241 0014 	movw	r0, #4116	; 0x1014
 800440e:	e7fa      	b.n	8004406 <ai_mnetwork_create+0x16>
        if (ai_mnetwork_is_valid(name, entry)) {
 8004410:	4630      	mov	r0, r6
 8004412:	9101      	str	r1, [sp, #4]
 8004414:	f7ff ffc0 	bl	8004398 <ai_mnetwork_is_valid.constprop.0>
 8004418:	9901      	ldr	r1, [sp, #4]
 800441a:	2800      	cmp	r0, #0
 800441c:	d0f5      	beq.n	800440a <ai_mnetwork_create+0x1a>
        err = found->ai_create(network, network_config);
 800441e:	4628      	mov	r0, r5
 8004420:	f000 f8fe 	bl	8004620 <ai_network_create>
 8004424:	b2c2      	uxtb	r2, r0
 8004426:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 800442a:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 800442e:	d104      	bne.n	800443a <ai_mnetwork_create+0x4a>
        inst->entry = found;
 8004430:	4905      	ldr	r1, [pc, #20]	; (8004448 <ai_mnetwork_create+0x58>)
 8004432:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8004434:	6829      	ldr	r1, [r5, #0]
 8004436:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8004438:	602c      	str	r4, [r5, #0]
    return err;
 800443a:	2000      	movs	r0, #0
 800443c:	f362 0007 	bfi	r0, r2, #0, #8
 8004440:	f363 201f 	bfi	r0, r3, #8, #24
 8004444:	e7df      	b.n	8004406 <ai_mnetwork_create+0x16>
 8004446:	bf00      	nop
 8004448:	0800cee0 	.word	0x0800cee0

0800444c <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004450:	f7ff ff94 	bl	800437c <ai_mnetwork_handle>
    if (inn) {
 8004454:	4605      	mov	r5, r0
 8004456:	b160      	cbz	r0, 8004472 <ai_mnetwork_destroy+0x26>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8004458:	6803      	ldr	r3, [r0, #0]
 800445a:	6840      	ldr	r0, [r0, #4]
 800445c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445e:	4798      	blx	r3
        if (hdl != inn->handle) {
 8004460:	686b      	ldr	r3, [r5, #4]
 8004462:	4283      	cmp	r3, r0
 8004464:	d005      	beq.n	8004472 <ai_mnetwork_destroy+0x26>
        if ((inst) && (&gnetworks[i] == inst)) {
 8004466:	4b04      	ldr	r3, [pc, #16]	; (8004478 <ai_mnetwork_destroy+0x2c>)
 8004468:	429d      	cmp	r5, r3
 800446a:	f04f 0400 	mov.w	r4, #0
 800446e:	d100      	bne.n	8004472 <ai_mnetwork_destroy+0x26>
            gnetworks[i].entry = NULL;
 8004470:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 8004472:	4620      	mov	r0, r4
 8004474:	bd38      	pop	{r3, r4, r5, pc}
 8004476:	bf00      	nop
 8004478:	20001520 	.word	0x20001520

0800447c <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 800447c:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800447e:	f7ff ff7d 	bl	800437c <ai_mnetwork_handle>
    if (inn)
 8004482:	b128      	cbz	r0, 8004490 <ai_mnetwork_get_info+0x14>
        return inn->entry->ai_get_info(inn->handle, report);
 8004484:	6802      	ldr	r2, [r0, #0]
 8004486:	6840      	ldr	r0, [r0, #4]
 8004488:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    else
        return false;
}
 800448a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_info(inn->handle, report);
 800448e:	4710      	bx	r2
}
 8004490:	bd10      	pop	{r4, pc}

08004492 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8004492:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004494:	f7ff ff72 	bl	800437c <ai_mnetwork_handle>
    if (inn)
 8004498:	b128      	cbz	r0, 80044a6 <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 800449a:	6803      	ldr	r3, [r0, #0]
 800449c:	6840      	ldr	r0, [r0, #4]
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    else
        return err;
}
 80044a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 80044a4:	4718      	bx	r3
}
 80044a6:	f241 0014 	movw	r0, #4116	; 0x1014
 80044aa:	bd10      	pop	{r4, pc}

080044ac <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 80044ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ae:	b08d      	sub	sp, #52	; 0x34
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80044b0:	f7ff ff64 	bl	800437c <ai_mnetwork_handle>
{
 80044b4:	460e      	mov	r6, r1
    if (inn) {
 80044b6:	4607      	mov	r7, r0
 80044b8:	b330      	cbz	r0, 8004508 <ai_mnetwork_init+0x5c>
        par = inn->entry->params;
 80044ba:	f8d0 c000 	ldr.w	ip, [r0]
 80044be:	f10c 0504 	add.w	r5, ip, #4
 80044c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044c4:	466c      	mov	r4, sp
 80044c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80044d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 80044d4:	8bb3      	ldrh	r3, [r6, #28]
 80044d6:	b1cb      	cbz	r3, 800450c <ai_mnetwork_init+0x60>
            par.activations = params->activations;
 80044d8:	f106 0518 	add.w	r5, r6, #24
 80044dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044de:	ac06      	add	r4, sp, #24
 80044e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80044e6:	e884 0003 	stmia.w	r4, {r0, r1}
        else
            par.activations.data = params->activations.data;
        if (params->params.n_batches)
 80044ea:	88b3      	ldrh	r3, [r6, #4]
 80044ec:	b18b      	cbz	r3, 8004512 <ai_mnetwork_init+0x66>
            par.params = params->params;
 80044ee:	4634      	mov	r4, r6
 80044f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044f2:	466d      	mov	r5, sp
 80044f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044fa:	e885 0003 	stmia.w	r5, {r0, r1}
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
        return inn->entry->ai_init(inn->handle, &par);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004504:	4669      	mov	r1, sp
 8004506:	4798      	blx	r3
    }
    else
        return false;
}
 8004508:	b00d      	add	sp, #52	; 0x34
 800450a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            par.activations.data = params->activations.data;
 800450c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800450e:	930a      	str	r3, [sp, #40]	; 0x28
 8004510:	e7eb      	b.n	80044ea <ai_mnetwork_init+0x3e>
            par.params.data = inn->entry->ai_data_weights_get_default();
 8004512:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8004516:	4798      	blx	r3
 8004518:	9004      	str	r0, [sp, #16]
 800451a:	e7f0      	b.n	80044fe <ai_mnetwork_init+0x52>

0800451c <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 800451c:	b513      	push	{r0, r1, r4, lr}
 800451e:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004520:	f7ff ff2c 	bl	800437c <ai_mnetwork_handle>
    if (inn)
 8004524:	4603      	mov	r3, r0
 8004526:	b140      	cbz	r0, 800453a <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 8004528:	6800      	ldr	r0, [r0, #0]
 800452a:	9a01      	ldr	r2, [sp, #4]
 800452c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800452e:	6858      	ldr	r0, [r3, #4]
 8004530:	4623      	mov	r3, r4
    else
        return 0;
}
 8004532:	b002      	add	sp, #8
 8004534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 8004538:	4718      	bx	r3
}
 800453a:	b002      	add	sp, #8
 800453c:	bd10      	pop	{r4, pc}

0800453e <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 800453e:	b538      	push	{r3, r4, r5, lr}
 8004540:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004542:	f7ff ff1b 	bl	800437c <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8004546:	b178      	cbz	r0, 8004568 <ai_mnetwork_get_private_handle+0x2a>
 8004548:	b171      	cbz	r1, 8004568 <ai_mnetwork_get_private_handle+0x2a>
 800454a:	b16d      	cbz	r5, 8004568 <ai_mnetwork_get_private_handle+0x2a>
         *phandle = inn->handle;
 800454c:	6843      	ldr	r3, [r0, #4]
 800454e:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8004550:	f100 0408 	add.w	r4, r0, #8
 8004554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800455a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800455c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004560:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
         return 0;
 8004564:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8004566:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 8004568:	f04f 30ff 	mov.w	r0, #4294967295
 800456c:	e7fb      	b.n	8004566 <ai_mnetwork_get_private_handle+0x28>

0800456e <ai_mnetwork_get_ext_data_activations>:

 AI_API_ENTRY
int ai_mnetwork_get_ext_data_activations(ai_handle network,
         ai_u32 *add,
         ai_u32 *size)
 {
 800456e:	b510      	push	{r4, lr}
 8004570:	4614      	mov	r4, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004572:	f7ff ff03 	bl	800437c <ai_mnetwork_handle>
     if (inn && add && size) {
 8004576:	b140      	cbz	r0, 800458a <ai_mnetwork_get_ext_data_activations+0x1c>
 8004578:	b139      	cbz	r1, 800458a <ai_mnetwork_get_ext_data_activations+0x1c>
 800457a:	b134      	cbz	r4, 800458a <ai_mnetwork_get_ext_data_activations+0x1c>
         *add = inn->entry->extActBufferStartAddr;
 800457c:	6803      	ldr	r3, [r0, #0]
 800457e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004580:	600a      	str	r2, [r1, #0]
         *size = inn->entry->actBufferSize;
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	6023      	str	r3, [r4, #0]
         return 0;
 8004586:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8004588:	bd10      	pop	{r4, pc}
         return -1;
 800458a:	f04f 30ff 	mov.w	r0, #4294967295
 800458e:	e7fb      	b.n	8004588 <ai_mnetwork_get_ext_data_activations+0x1a>

08004590 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/
AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	b09e      	sub	sp, #120	; 0x78
 8004594:	4606      	mov	r6, r0
 8004596:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004598:	f001 fc9e 	bl	8005ed8 <ai_platform_context_acquire>
 800459c:	4604      	mov	r4, r0

  if (report && net_ctx)
 800459e:	2d00      	cmp	r5, #0
 80045a0:	d02f      	beq.n	8004602 <ai_network_get_info+0x72>
 80045a2:	b358      	cbz	r0, 80045fc <ai_network_get_info+0x6c>
  {
    ai_network_report r = {
 80045a4:	2264      	movs	r2, #100	; 0x64
 80045a6:	2100      	movs	r1, #0
 80045a8:	a805      	add	r0, sp, #20
 80045aa:	f005 f8ab 	bl	8009704 <memset>
 80045ae:	4b16      	ldr	r3, [pc, #88]	; (8004608 <ai_network_get_info+0x78>)
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	4b16      	ldr	r3, [pc, #88]	; (800460c <ai_network_get_info+0x7c>)
 80045b4:	9302      	str	r3, [sp, #8]
 80045b6:	4b16      	ldr	r3, [pc, #88]	; (8004610 <ai_network_get_info+0x80>)
 80045b8:	9303      	str	r3, [sp, #12]
 80045ba:	4b16      	ldr	r3, [pc, #88]	; (8004614 <ai_network_get_info+0x84>)
 80045bc:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80045be:	f001 fb5f 	bl	8005c80 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 80045c2:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 80045c4:	f001 fb9e 	bl	8005d04 <ai_platform_runtime_get_version>
    ai_network_report r = {
 80045c8:	4b13      	ldr	r3, [pc, #76]	; (8004618 <ai_network_get_info+0x88>)
 80045ca:	9307      	str	r3, [sp, #28]
 80045cc:	2307      	movs	r3, #7
 80045ce:	f88d 3020 	strb.w	r3, [sp, #32]
      .runtime_version   = ai_platform_runtime_get_version(),
 80045d2:	9006      	str	r0, [sp, #24]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 80045d4:	f001 fbd8 	bl	8005d88 <ai_platform_api_get_version>
 80045d8:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80045da:	f001 fc29 	bl	8005e30 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 80045de:	f244 132e 	movw	r3, #16686	; 0x412e
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80045e2:	900b      	str	r0, [sp, #44]	; 0x2c
      .activations       = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80045e4:	a901      	add	r1, sp, #4
 80045e6:	4630      	mov	r0, r6
    ai_network_report r = {
 80045e8:	930c      	str	r3, [sp, #48]	; 0x30
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80045ea:	f001 fd37 	bl	800605c <ai_platform_api_get_network_report>
 80045ee:	4604      	mov	r4, r0
 80045f0:	b120      	cbz	r0, 80045fc <ai_network_get_info+0x6c>

    *report = r;
 80045f2:	2274      	movs	r2, #116	; 0x74
 80045f4:	a901      	add	r1, sp, #4
 80045f6:	4628      	mov	r0, r5
 80045f8:	f005 f876 	bl	80096e8 <memcpy>
    return true;
  }
  return false;
}
 80045fc:	4620      	mov	r0, r4
 80045fe:	b01e      	add	sp, #120	; 0x78
 8004600:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8004602:	462c      	mov	r4, r5
 8004604:	e7fa      	b.n	80045fc <ai_network_get_info+0x6c>
 8004606:	bf00      	nop
 8004608:	0800ced6 	.word	0x0800ced6
 800460c:	0800cf40 	.word	0x0800cf40
 8004610:	0800cf61 	.word	0x0800cf61
 8004614:	0800cf7a 	.word	0x0800cf7a
 8004618:	0800ccea 	.word	0x0800ccea

0800461c <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 800461c:	f001 bca4 	b.w	8005f68 <ai_platform_network_get_error>

08004620 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004620:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8004622:	2304      	movs	r3, #4
 8004624:	2200      	movs	r2, #0
 8004626:	e9cd 3200 	strd	r3, r2, [sp]
 800462a:	4a03      	ldr	r2, [pc, #12]	; (8004638 <ai_network_create+0x18>)
 800462c:	2301      	movs	r3, #1
 800462e:	f001 ffb7 	bl	80065a0 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004632:	b003      	add	sp, #12
 8004634:	f85d fb04 	ldr.w	pc, [sp], #4
 8004638:	20000880 	.word	0x20000880

0800463c <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 800463c:	f002 b886 	b.w	800674c <ai_platform_network_destroy>

08004640 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004642:	b085      	sub	sp, #20
 8004644:	4606      	mov	r6, r0
 8004646:	9101      	str	r1, [sp, #4]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004648:	f002 f8f8 	bl	800683c <ai_platform_network_init>
  if (!net_ctx) return false;
 800464c:	2800      	cmp	r0, #0
 800464e:	f000 8086 	beq.w	800475e <ai_network_init+0x11e>
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8004652:	9a01      	ldr	r2, [sp, #4]
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8004654:	2300      	movs	r3, #0
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8004656:	2101      	movs	r1, #1
 8004658:	a803      	add	r0, sp, #12
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 800465a:	9303      	str	r3, [sp, #12]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 800465c:	f001 faa8 	bl	8005bb0 <ai_platform_get_weights_map>
 8004660:	9a01      	ldr	r2, [sp, #4]
 8004662:	4604      	mov	r4, r0
 8004664:	2800      	cmp	r0, #0
 8004666:	d048      	beq.n	80046fa <ai_network_init+0xba>
    conv1d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004668:	493e      	ldr	r1, [pc, #248]	; (8004764 <ai_network_init+0x124>)
 800466a:	680b      	ldr	r3, [r1, #0]
 800466c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004670:	600b      	str	r3, [r1, #0]
    conv1d_weights_array.data = AI_PTR(weights_map[0] + 0);
 8004672:	9b03      	ldr	r3, [sp, #12]
    conv1d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8004674:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv1d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004678:	493b      	ldr	r1, [pc, #236]	; (8004768 <ai_network_init+0x128>)
 800467a:	6808      	ldr	r0, [r1, #0]
 800467c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8004680:	6008      	str	r0, [r1, #0]
    conv1d_bias_array.data = AI_PTR(weights_map[0] + 1920);
 8004682:	f503 60f0 	add.w	r0, r3, #1920	; 0x780
    conv1d_bias_array.data_start = AI_PTR(weights_map[0] + 1920);
 8004686:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv1d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800468a:	4938      	ldr	r1, [pc, #224]	; (800476c <ai_network_init+0x12c>)
 800468c:	6808      	ldr	r0, [r1, #0]
 800468e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8004692:	6008      	str	r0, [r1, #0]
    conv1d_1_weights_array.data = AI_PTR(weights_map[0] + 1984);
 8004694:	f503 60f8 	add.w	r0, r3, #1984	; 0x7c0
    conv1d_1_weights_array.data_start = AI_PTR(weights_map[0] + 1984);
 8004698:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv1d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800469c:	4934      	ldr	r1, [pc, #208]	; (8004770 <ai_network_init+0x130>)
 800469e:	6808      	ldr	r0, [r1, #0]
 80046a0:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80046a4:	6008      	str	r0, [r1, #0]
    conv1d_1_bias_array.data = AI_PTR(weights_map[0] + 4544);
 80046a6:	f503 508e 	add.w	r0, r3, #4544	; 0x11c0
    conv1d_1_bias_array.data_start = AI_PTR(weights_map[0] + 4544);
 80046aa:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80046ae:	4931      	ldr	r1, [pc, #196]	; (8004774 <ai_network_init+0x134>)
 80046b0:	6808      	ldr	r0, [r1, #0]
 80046b2:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80046b6:	6008      	str	r0, [r1, #0]
    dense_weights_array.data = AI_PTR(weights_map[0] + 4576);
 80046b8:	f503 508f 	add.w	r0, r3, #4576	; 0x11e0
    dense_weights_array.data_start = AI_PTR(weights_map[0] + 4576);
 80046bc:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80046c0:	492d      	ldr	r1, [pc, #180]	; (8004778 <ai_network_init+0x138>)
 80046c2:	6808      	ldr	r0, [r1, #0]
 80046c4:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80046c8:	6008      	str	r0, [r1, #0]
    dense_bias_array.data = AI_PTR(weights_map[0] + 6976);
 80046ca:	f503 50da 	add.w	r0, r3, #6976	; 0x1b40
    dense_bias_array.data_start = AI_PTR(weights_map[0] + 6976);
 80046ce:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80046d2:	492a      	ldr	r1, [pc, #168]	; (800477c <ai_network_init+0x13c>)
 80046d4:	6808      	ldr	r0, [r1, #0]
 80046d6:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80046da:	6008      	str	r0, [r1, #0]
    dense_1_weights_array.data = AI_PTR(weights_map[0] + 7076);
 80046dc:	f503 50dd 	add.w	r0, r3, #7072	; 0x1ba0
 80046e0:	3004      	adds	r0, #4
    dense_1_weights_array.data_start = AI_PTR(weights_map[0] + 7076);
 80046e2:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80046e6:	4926      	ldr	r1, [pc, #152]	; (8004780 <ai_network_init+0x140>)
 80046e8:	6808      	ldr	r0, [r1, #0]
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 7476);
 80046ea:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80046ee:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 7476);
 80046f2:	3314      	adds	r3, #20
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80046f4:	6008      	str	r0, [r1, #0]
    dense_1_bias_array.data_start = AI_PTR(weights_map[0] + 7476);
 80046f6:	e9c1 3302 	strd	r3, r3, [r1, #8]
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 80046fa:	2500      	movs	r5, #0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 80046fc:	2101      	movs	r1, #1
 80046fe:	a803      	add	r0, sp, #12
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8004700:	9503      	str	r5, [sp, #12]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8004702:	f001 fa89 	bl	8005c18 <ai_platform_get_activations_map>
 8004706:	4607      	mov	r7, r0
 8004708:	b318      	cbz	r0, 8004752 <ai_network_init+0x112>
    input_0_output_array.data = AI_PTR(NULL);
 800470a:	4b1e      	ldr	r3, [pc, #120]	; (8004784 <ai_network_init+0x144>)
    conv1d_output_array.data = AI_PTR(activations_map[0] + 128);
 800470c:	4a1e      	ldr	r2, [pc, #120]	; (8004788 <ai_network_init+0x148>)
    input_0_output_array.data_start = AI_PTR(NULL);
 800470e:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv1d_output_array.data = AI_PTR(activations_map[0] + 128);
 8004712:	9b03      	ldr	r3, [sp, #12]
 8004714:	f103 0180 	add.w	r1, r3, #128	; 0x80
    conv1d_output_array.data_start = AI_PTR(activations_map[0] + 128);
 8004718:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv1d_1_output_array.data = AI_PTR(activations_map[0] + 64);
 800471c:	4a1b      	ldr	r2, [pc, #108]	; (800478c <ai_network_init+0x14c>)
 800471e:	f103 0140 	add.w	r1, r3, #64	; 0x40
    conv1d_1_output_array.data_start = AI_PTR(activations_map[0] + 64);
 8004722:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_output_array.data = AI_PTR(activations_map[0] + 160);
 8004726:	4a1a      	ldr	r2, [pc, #104]	; (8004790 <ai_network_init+0x150>)
 8004728:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
    dense_output_array.data_start = AI_PTR(activations_map[0] + 160);
 800472c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 8004730:	4a18      	ldr	r2, [pc, #96]	; (8004794 <ai_network_init+0x154>)
    dense_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8004732:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_output_array.data = AI_PTR(activations_map[0] + 100);
 8004736:	4a18      	ldr	r2, [pc, #96]	; (8004798 <ai_network_init+0x158>)
 8004738:	f103 0164 	add.w	r1, r3, #100	; 0x64
    dense_1_output_array.data_start = AI_PTR(activations_map[0] + 100);
 800473c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_nl_output_array.data = AI_PTR(NULL);
 8004740:	4a16      	ldr	r2, [pc, #88]	; (800479c <ai_network_init+0x15c>)
    dense_1_nl_output_array.data_start = AI_PTR(NULL);
 8004742:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv1d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8004746:	4a16      	ldr	r2, [pc, #88]	; (80047a0 <ai_network_init+0x160>)
    conv1d_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8004748:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv1d_1_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800474c:	4a15      	ldr	r2, [pc, #84]	; (80047a4 <ai_network_init+0x164>)
    conv1d_1_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 800474e:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8004752:	4630      	mov	r0, r6
 8004754:	f002 f984 	bl	8006a60 <ai_platform_network_post_init>
 8004758:	4038      	ands	r0, r7
 800475a:	4020      	ands	r0, r4
 800475c:	b2c0      	uxtb	r0, r0

  return ok;
}
 800475e:	b005      	add	sp, #20
 8004760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004762:	bf00      	nop
 8004764:	20000698 	.word	0x20000698
 8004768:	200005b8 	.word	0x200005b8
 800476c:	2000058c 	.word	0x2000058c
 8004770:	20000490 	.word	0x20000490
 8004774:	20000870 	.word	0x20000870
 8004778:	200007b0 	.word	0x200007b0
 800477c:	20000784 	.word	0x20000784
 8004780:	200006c4 	.word	0x200006c4
 8004784:	200008e4 	.word	0x200008e4
 8004788:	20000640 	.word	0x20000640
 800478c:	20000534 	.word	0x20000534
 8004790:	20000844 	.word	0x20000844
 8004794:	20000818 	.word	0x20000818
 8004798:	20000758 	.word	0x20000758
 800479c:	2000072c 	.word	0x2000072c
 80047a0:	2000066c 	.word	0x2000066c
 80047a4:	20000560 	.word	0x20000560

080047a8 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80047a8:	f002 b9ee 	b.w	8006b88 <ai_platform_network_process>

080047ac <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 80047ac:	2200      	movs	r2, #0
 80047ae:	f002 b9eb 	b.w	8006b88 <ai_platform_network_process>
	...

080047b4 <ai_network_data_weights_get>:
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_map);

}
 80047b4:	4800      	ldr	r0, [pc, #0]	; (80047b8 <ai_network_data_weights_get+0x4>)
 80047b6:	4770      	bx	lr
 80047b8:	0800ed08 	.word	0x0800ed08

080047bc <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 80047bc:	2300      	movs	r3, #0
    iter->dest_struct = dest_struct;
 80047be:	e9c0 3202 	strd	r3, r2, [r0, #8]
    iter->pos = fields;
 80047c2:	e9c0 1100 	strd	r1, r1, [r0]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 80047c6:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 80047ca:	441a      	add	r2, r3
 80047cc:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80047ce:	f9b1 3005 	ldrsh.w	r3, [r1, #5]
 80047d2:	441a      	add	r2, r3
 80047d4:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 80047d6:	8808      	ldrh	r0, [r1, #0]
}
 80047d8:	3800      	subs	r0, #0
 80047da:	bf18      	it	ne
 80047dc:	2001      	movne	r0, #1
 80047de:	4770      	bx	lr

080047e0 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 80047e0:	6841      	ldr	r1, [r0, #4]

    if (prev_field->tag == 0)
 80047e2:	880a      	ldrh	r2, [r1, #0]
{
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	4603      	mov	r3, r0
    if (prev_field->tag == 0)
 80047e8:	2a00      	cmp	r2, #0
 80047ea:	d038      	beq.n	800485e <pb_field_iter_next+0x7e>
        return false;
    }
    
    iter->pos++;
    
    if (iter->pos->tag == 0)
 80047ec:	f8b1 400f 	ldrh.w	r4, [r1, #15]
    iter->pos++;
 80047f0:	f101 020f 	add.w	r2, r1, #15
 80047f4:	6042      	str	r2, [r0, #4]
    if (iter->pos->tag == 0)
 80047f6:	b92c      	cbnz	r4, 8004804 <pb_field_iter_next+0x24>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 80047f8:	68c2      	ldr	r2, [r0, #12]
 80047fa:	6801      	ldr	r1, [r0, #0]
 80047fc:	f7ff ffde 	bl	80047bc <pb_field_iter_begin>
        return false;
 8004800:	4620      	mov	r0, r4
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
 8004802:	bd70      	pop	{r4, r5, r6, pc}
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8004804:	7888      	ldrb	r0, [r1, #2]
        size_t prev_size = prev_field->data_size;
 8004806:	f8b1 2007 	ldrh.w	r2, [r1, #7]
            iter->pos->data_offset == PB_SIZE_MAX)
 800480a:	8a4c      	ldrh	r4, [r1, #18]
 800480c:	f000 0630 	and.w	r6, r0, #48	; 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8004810:	2e30      	cmp	r6, #48	; 0x30
 8004812:	d10a      	bne.n	800482a <pb_field_iter_next+0x4a>
 8004814:	7c4d      	ldrb	r5, [r1, #17]
 8004816:	f005 0530 	and.w	r5, r5, #48	; 0x30
 800481a:	2d30      	cmp	r5, #48	; 0x30
 800481c:	d119      	bne.n	8004852 <pb_field_iter_next+0x72>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 800481e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8004822:	42ac      	cmp	r4, r5
 8004824:	d115      	bne.n	8004852 <pb_field_iter_next+0x72>
            return true;
 8004826:	2001      	movs	r0, #1
 8004828:	e7eb      	b.n	8004802 <pb_field_iter_next+0x22>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 800482a:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 800482e:	2d20      	cmp	r5, #32
 8004830:	d10f      	bne.n	8004852 <pb_field_iter_next+0x72>
            prev_size *= prev_field->array_size;
 8004832:	f8b1 0009 	ldrh.w	r0, [r1, #9]
 8004836:	4342      	muls	r2, r0
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 8004838:	b916      	cbnz	r6, 8004840 <pb_field_iter_next+0x60>
            iter->required_field_index++;
 800483a:	6898      	ldr	r0, [r3, #8]
 800483c:	3001      	adds	r0, #1
 800483e:	6098      	str	r0, [r3, #8]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8004840:	4414      	add	r4, r2
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	4422      	add	r2, r4
 8004846:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8004848:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 800484c:	440a      	add	r2, r1
 800484e:	615a      	str	r2, [r3, #20]
        return true;
 8004850:	e7e9      	b.n	8004826 <pb_field_iter_next+0x46>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 8004852:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
            prev_size = sizeof(void*);
 8004856:	2880      	cmp	r0, #128	; 0x80
 8004858:	bf08      	it	eq
 800485a:	2204      	moveq	r2, #4
 800485c:	e7ec      	b.n	8004838 <pb_field_iter_next+0x58>
        return false;
 800485e:	4610      	mov	r0, r2
 8004860:	e7cf      	b.n	8004802 <pb_field_iter_next+0x22>

08004862 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8004862:	b570      	push	{r4, r5, r6, lr}
    const pb_field_t *start = iter->pos;
 8004864:	6846      	ldr	r6, [r0, #4]
{
 8004866:	4604      	mov	r4, r0
 8004868:	460d      	mov	r5, r1
    
    do {
        if (iter->pos->tag == tag &&
 800486a:	6863      	ldr	r3, [r4, #4]
 800486c:	881a      	ldrh	r2, [r3, #0]
 800486e:	42aa      	cmp	r2, r5
 8004870:	d104      	bne.n	800487c <pb_field_iter_find+0x1a>
 8004872:	789b      	ldrb	r3, [r3, #2]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	2b08      	cmp	r3, #8
 800487a:	d107      	bne.n	800488c <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 800487c:	4620      	mov	r0, r4
 800487e:	f7ff ffaf 	bl	80047e0 <pb_field_iter_next>
    } while (iter->pos != start);
 8004882:	6863      	ldr	r3, [r4, #4]
 8004884:	42b3      	cmp	r3, r6
 8004886:	d1f0      	bne.n	800486a <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 8004888:	2000      	movs	r0, #0
}
 800488a:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 800488c:	2001      	movs	r0, #1
 800488e:	e7fc      	b.n	800488a <pb_field_iter_find+0x28>

08004890 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8004890:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8004892:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 8004894:	18a3      	adds	r3, r4, r2
 8004896:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 8004898:	b939      	cbnz	r1, 80048aa <buf_read+0x1a>
        for (i = 0; i < count; i++)
            buf[i] = source[i];
    }
    
    return true;
}
 800489a:	2001      	movs	r0, #1
 800489c:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 800489e:	5ce0      	ldrb	r0, [r4, r3]
 80048a0:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 80048a2:	3301      	adds	r3, #1
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d1fa      	bne.n	800489e <buf_read+0xe>
 80048a8:	e7f7      	b.n	800489a <buf_read+0xa>
 80048aa:	2300      	movs	r3, #0
 80048ac:	e7fa      	b.n	80048a4 <buf_read+0x14>

080048ae <pb_field_set_to_default>:
    return false;
}

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 80048ae:	b570      	push	{r4, r5, r6, lr}
    pb_type_t type;
    type = iter->pos->type;
 80048b0:	6845      	ldr	r5, [r0, #4]
 80048b2:	78aa      	ldrb	r2, [r5, #2]
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80048b4:	f002 060f 	and.w	r6, r2, #15
 80048b8:	2e08      	cmp	r6, #8
{
 80048ba:	b086      	sub	sp, #24
 80048bc:	4603      	mov	r3, r0
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80048be:	d11f      	bne.n	8004900 <pb_field_set_to_default+0x52>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 80048c0:	6903      	ldr	r3, [r0, #16]
 80048c2:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 80048c4:	2600      	movs	r6, #0
        while (ext != NULL)
 80048c6:	b90c      	cbnz	r4, 80048cc <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 80048c8:	b006      	add	sp, #24
 80048ca:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80048cc:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 80048ce:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80048d0:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 80048d2:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 80048d4:	4629      	mov	r1, r5
 80048d6:	4668      	mov	r0, sp
 80048d8:	f7ff ff70 	bl	80047bc <pb_field_iter_begin>
    iter->pData = extension->dest;
 80048dc:	6863      	ldr	r3, [r4, #4]
 80048de:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 80048e0:	f104 030c 	add.w	r3, r4, #12
 80048e4:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80048e6:	78ab      	ldrb	r3, [r5, #2]
 80048e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048ec:	2b80      	cmp	r3, #128	; 0x80
        iter->pData = &extension->dest;
 80048ee:	bf08      	it	eq
 80048f0:	1d23      	addeq	r3, r4, #4
            pb_field_set_to_default(&ext_iter);
 80048f2:	4668      	mov	r0, sp
        iter->pData = &extension->dest;
 80048f4:	bf08      	it	eq
 80048f6:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 80048f8:	f7ff ffd9 	bl	80048ae <pb_field_set_to_default>
            ext = ext->next;
 80048fc:	68a4      	ldr	r4, [r4, #8]
 80048fe:	e7e2      	b.n	80048c6 <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8004900:	f012 01c0 	ands.w	r1, r2, #192	; 0xc0
 8004904:	d127      	bne.n	8004956 <pb_field_set_to_default+0xa8>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 8004906:	f002 0030 	and.w	r0, r2, #48	; 0x30
 800490a:	2810      	cmp	r0, #16
 800490c:	d110      	bne.n	8004930 <pb_field_set_to_default+0x82>
 800490e:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 8004912:	4282      	cmp	r2, r0
 8004914:	d000      	beq.n	8004918 <pb_field_set_to_default+0x6a>
            *(bool*)iter->pSize = false;
 8004916:	7011      	strb	r1, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8004918:	2e07      	cmp	r6, #7
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 800491a:	f8d5 400b 	ldr.w	r4, [r5, #11]
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 800491e:	6918      	ldr	r0, [r3, #16]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8004920:	d10b      	bne.n	800493a <pb_field_set_to_default+0x8c>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8004922:	4601      	mov	r1, r0
 8004924:	4620      	mov	r0, r4
}
 8004926:	b006      	add	sp, #24
 8004928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 800492c:	f000 b81b 	b.w	8004966 <pb_message_set_to_defaults>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004930:	0690      	lsls	r0, r2, #26
 8004932:	d5f1      	bpl.n	8004918 <pb_field_set_to_default+0x6a>
            *(pb_size_t*)iter->pSize = 0;
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	8019      	strh	r1, [r3, #0]
}
 8004938:	e7c6      	b.n	80048c8 <pb_field_set_to_default+0x1a>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 800493a:	f8b5 2007 	ldrh.w	r2, [r5, #7]
 800493e:	4621      	mov	r1, r4
            else if (iter->pos->ptr != NULL)
 8004940:	b124      	cbz	r4, 800494c <pb_field_set_to_default+0x9e>
}
 8004942:	b006      	add	sp, #24
 8004944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8004948:	f004 bece 	b.w	80096e8 <memcpy>
}
 800494c:	b006      	add	sp, #24
 800494e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(iter->pData, 0, iter->pos->data_size);
 8004952:	f004 bed7 	b.w	8009704 <memset>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8004956:	2980      	cmp	r1, #128	; 0x80
 8004958:	d1b6      	bne.n	80048c8 <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 800495a:	6900      	ldr	r0, [r0, #16]
 800495c:	2100      	movs	r1, #0
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800495e:	0692      	lsls	r2, r2, #26
        *(void**)iter->pData = NULL;
 8004960:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004962:	d5b1      	bpl.n	80048c8 <pb_field_set_to_default+0x1a>
 8004964:	e7e6      	b.n	8004934 <pb_field_set_to_default+0x86>

08004966 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 8004966:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004968:	460a      	mov	r2, r1
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 800496a:	4601      	mov	r1, r0
 800496c:	4668      	mov	r0, sp
 800496e:	f7ff ff25 	bl	80047bc <pb_field_iter_begin>
 8004972:	b130      	cbz	r0, 8004982 <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 8004974:	4668      	mov	r0, sp
 8004976:	f7ff ff9a 	bl	80048ae <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 800497a:	4668      	mov	r0, sp
 800497c:	f7ff ff30 	bl	80047e0 <pb_field_iter_next>
 8004980:	e7f7      	b.n	8004972 <pb_message_set_to_defaults+0xc>
}
 8004982:	b007      	add	sp, #28
 8004984:	f85d fb04 	ldr.w	pc, [sp], #4

08004988 <pb_readbyte>:
    if (stream->bytes_left == 0)
 8004988:	6883      	ldr	r3, [r0, #8]
{
 800498a:	b510      	push	{r4, lr}
 800498c:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 800498e:	b93b      	cbnz	r3, 80049a0 <pb_readbyte+0x18>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8004990:	68c2      	ldr	r2, [r0, #12]
 8004992:	490b      	ldr	r1, [pc, #44]	; (80049c0 <pb_readbyte+0x38>)
 8004994:	2a00      	cmp	r2, #0
 8004996:	bf08      	it	eq
 8004998:	460a      	moveq	r2, r1
 800499a:	60c2      	str	r2, [r0, #12]
 800499c:	4618      	mov	r0, r3
}
 800499e:	bd10      	pop	{r4, pc}
    if (!stream->callback(stream, buf, 1))
 80049a0:	6803      	ldr	r3, [r0, #0]
 80049a2:	2201      	movs	r2, #1
 80049a4:	4798      	blx	r3
 80049a6:	b930      	cbnz	r0, 80049b6 <pb_readbyte+0x2e>
        PB_RETURN_ERROR(stream, "io error");
 80049a8:	68e3      	ldr	r3, [r4, #12]
 80049aa:	4a06      	ldr	r2, [pc, #24]	; (80049c4 <pb_readbyte+0x3c>)
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf08      	it	eq
 80049b0:	4613      	moveq	r3, r2
 80049b2:	60e3      	str	r3, [r4, #12]
 80049b4:	e7f3      	b.n	800499e <pb_readbyte+0x16>
    stream->bytes_left--;
 80049b6:	68a3      	ldr	r3, [r4, #8]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	60a3      	str	r3, [r4, #8]
    return true;    
 80049bc:	e7ef      	b.n	800499e <pb_readbyte+0x16>
 80049be:	bf00      	nop
 80049c0:	0800ed14 	.word	0x0800ed14
 80049c4:	0800ed22 	.word	0x0800ed22

080049c8 <pb_decode_varint32_eof>:
{
 80049c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80049cc:	4688      	mov	r8, r1
    if (!pb_readbyte(stream, &byte))
 80049ce:	f10d 0107 	add.w	r1, sp, #7
{
 80049d2:	4605      	mov	r5, r0
 80049d4:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 80049d6:	f7ff ffd7 	bl	8004988 <pb_readbyte>
 80049da:	4606      	mov	r6, r0
 80049dc:	b958      	cbnz	r0, 80049f6 <pb_decode_varint32_eof+0x2e>
        if (stream->bytes_left == 0)
 80049de:	68ab      	ldr	r3, [r5, #8]
 80049e0:	b10b      	cbz	r3, 80049e6 <pb_decode_varint32_eof+0x1e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 80049e2:	2600      	movs	r6, #0
 80049e4:	e003      	b.n	80049ee <pb_decode_varint32_eof+0x26>
            if (eof)
 80049e6:	2c00      	cmp	r4, #0
 80049e8:	d0fb      	beq.n	80049e2 <pb_decode_varint32_eof+0x1a>
                *eof = true;
 80049ea:	2301      	movs	r3, #1
 80049ec:	7023      	strb	r3, [r4, #0]
}
 80049ee:	4630      	mov	r0, r6
 80049f0:	b002      	add	sp, #8
 80049f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((byte & 0x80) == 0)
 80049f6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80049fa:	f89d 4007 	ldrb.w	r4, [sp, #7]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	da2a      	bge.n	8004a58 <pb_decode_varint32_eof+0x90>
        result = byte & 0x7F;
 8004a02:	f004 047f 	and.w	r4, r4, #127	; 0x7f
        uint_fast8_t bitpos = 7;
 8004a06:	2707      	movs	r7, #7
            if (!pb_readbyte(stream, &byte))
 8004a08:	f10d 0107 	add.w	r1, sp, #7
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f7ff ffbb 	bl	8004988 <pb_readbyte>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d0e5      	beq.n	80049e2 <pb_decode_varint32_eof+0x1a>
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8004a16:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if (bitpos >= 32)
 8004a1a:	2f1f      	cmp	r7, #31
 8004a1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a20:	d90f      	bls.n	8004a42 <pb_decode_varint32_eof+0x7a>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8004a22:	2f3f      	cmp	r7, #63	; 0x3f
 8004a24:	bf34      	ite	cc
 8004a26:	21ff      	movcc	r1, #255	; 0xff
 8004a28:	2101      	movcs	r1, #1
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8004a2a:	b162      	cbz	r2, 8004a46 <pb_decode_varint32_eof+0x7e>
 8004a2c:	2c00      	cmp	r4, #0
 8004a2e:	da01      	bge.n	8004a34 <pb_decode_varint32_eof+0x6c>
 8004a30:	4299      	cmp	r1, r3
 8004a32:	d008      	beq.n	8004a46 <pb_decode_varint32_eof+0x7e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8004a34:	68eb      	ldr	r3, [r5, #12]
 8004a36:	4a0a      	ldr	r2, [pc, #40]	; (8004a60 <pb_decode_varint32_eof+0x98>)
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bf08      	it	eq
 8004a3c:	4613      	moveq	r3, r2
 8004a3e:	60eb      	str	r3, [r5, #12]
 8004a40:	e7cf      	b.n	80049e2 <pb_decode_varint32_eof+0x1a>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8004a42:	40ba      	lsls	r2, r7
 8004a44:	4314      	orrs	r4, r2
        } while (byte & 0x80);
 8004a46:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 8004a48:	f107 0707 	add.w	r7, r7, #7
        } while (byte & 0x80);
 8004a4c:	d4dc      	bmi.n	8004a08 <pb_decode_varint32_eof+0x40>
        if (bitpos == 35 && (byte & 0x70) != 0)
 8004a4e:	2f23      	cmp	r7, #35	; 0x23
 8004a50:	d102      	bne.n	8004a58 <pb_decode_varint32_eof+0x90>
 8004a52:	f013 0f70 	tst.w	r3, #112	; 0x70
 8004a56:	d1ed      	bne.n	8004a34 <pb_decode_varint32_eof+0x6c>
   *dest = result;
 8004a58:	f8c8 4000 	str.w	r4, [r8]
   return true;
 8004a5c:	e7c7      	b.n	80049ee <pb_decode_varint32_eof+0x26>
 8004a5e:	bf00      	nop
 8004a60:	0800ed2b 	.word	0x0800ed2b

08004a64 <pb_read>:
{
 8004a64:	b530      	push	{r4, r5, lr}
 8004a66:	4604      	mov	r4, r0
 8004a68:	b085      	sub	sp, #20
 8004a6a:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 8004a6c:	b9a9      	cbnz	r1, 8004a9a <pb_read+0x36>
 8004a6e:	6802      	ldr	r2, [r0, #0]
 8004a70:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <pb_read+0x6c>)
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d011      	beq.n	8004a9a <pb_read+0x36>
		while (count > 16)
 8004a76:	2d10      	cmp	r5, #16
 8004a78:	d806      	bhi.n	8004a88 <pb_read+0x24>
		return pb_read(stream, tmp, count);
 8004a7a:	462a      	mov	r2, r5
 8004a7c:	4669      	mov	r1, sp
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f7ff fff0 	bl	8004a64 <pb_read>
}
 8004a84:	b005      	add	sp, #20
 8004a86:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 8004a88:	2210      	movs	r2, #16
 8004a8a:	4669      	mov	r1, sp
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f7ff ffe9 	bl	8004a64 <pb_read>
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d0f6      	beq.n	8004a84 <pb_read+0x20>
			count -= 16;
 8004a96:	3d10      	subs	r5, #16
 8004a98:	e7ed      	b.n	8004a76 <pb_read+0x12>
    if (stream->bytes_left < count)
 8004a9a:	68a3      	ldr	r3, [r4, #8]
 8004a9c:	42ab      	cmp	r3, r5
 8004a9e:	d207      	bcs.n	8004ab0 <pb_read+0x4c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8004aa0:	68e3      	ldr	r3, [r4, #12]
 8004aa2:	4a0c      	ldr	r2, [pc, #48]	; (8004ad4 <pb_read+0x70>)
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf08      	it	eq
 8004aa8:	4613      	moveq	r3, r2
 8004aaa:	60e3      	str	r3, [r4, #12]
 8004aac:	2000      	movs	r0, #0
 8004aae:	e7e9      	b.n	8004a84 <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	462a      	mov	r2, r5
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	4798      	blx	r3
 8004ab8:	b930      	cbnz	r0, 8004ac8 <pb_read+0x64>
        PB_RETURN_ERROR(stream, "io error");
 8004aba:	68e3      	ldr	r3, [r4, #12]
 8004abc:	4a06      	ldr	r2, [pc, #24]	; (8004ad8 <pb_read+0x74>)
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	bf08      	it	eq
 8004ac2:	4613      	moveq	r3, r2
 8004ac4:	60e3      	str	r3, [r4, #12]
 8004ac6:	e7dd      	b.n	8004a84 <pb_read+0x20>
    stream->bytes_left -= count;
 8004ac8:	68a2      	ldr	r2, [r4, #8]
 8004aca:	1b52      	subs	r2, r2, r5
 8004acc:	60a2      	str	r2, [r4, #8]
    return true;
 8004ace:	e7d9      	b.n	8004a84 <pb_read+0x20>
 8004ad0:	08004891 	.word	0x08004891
 8004ad4:	0800ed14 	.word	0x0800ed14
 8004ad8:	0800ed22 	.word	0x0800ed22

08004adc <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 8004adc:	2200      	movs	r2, #0
 8004ade:	f7ff bf73 	b.w	80049c8 <pb_decode_varint32_eof>
	...

08004ae4 <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8004ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ae6:	460f      	mov	r7, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8004ae8:	a901      	add	r1, sp, #4
{
 8004aea:	4605      	mov	r5, r0
 8004aec:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 8004aee:	f7ff fff5 	bl	8004adc <pb_decode_varint32>
 8004af2:	4604      	mov	r4, r0
 8004af4:	b188      	cbz	r0, 8004b1a <pb_dec_fixed_length_bytes+0x36>
        return false;

    if (size > PB_SIZE_MAX)
 8004af6:	9901      	ldr	r1, [sp, #4]
 8004af8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004afc:	d307      	bcc.n	8004b0e <pb_dec_fixed_length_bytes+0x2a>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8004afe:	68eb      	ldr	r3, [r5, #12]
 8004b00:	4a0d      	ldr	r2, [pc, #52]	; (8004b38 <pb_dec_fixed_length_bytes+0x54>)
        memset(dest, 0, field->data_size);
        return true;
    }

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bf08      	it	eq
 8004b06:	4613      	moveq	r3, r2
 8004b08:	60eb      	str	r3, [r5, #12]
 8004b0a:	2400      	movs	r4, #0
 8004b0c:	e005      	b.n	8004b1a <pb_dec_fixed_length_bytes+0x36>
        memset(dest, 0, field->data_size);
 8004b0e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    if (size == 0)
 8004b12:	b929      	cbnz	r1, 8004b20 <pb_dec_fixed_length_bytes+0x3c>
        memset(dest, 0, field->data_size);
 8004b14:	4630      	mov	r0, r6
 8004b16:	f004 fdf5 	bl	8009704 <memset>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	b003      	add	sp, #12
 8004b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 8004b20:	4291      	cmp	r1, r2
 8004b22:	d002      	beq.n	8004b2a <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8004b24:	68eb      	ldr	r3, [r5, #12]
 8004b26:	4a05      	ldr	r2, [pc, #20]	; (8004b3c <pb_dec_fixed_length_bytes+0x58>)
 8004b28:	e7eb      	b.n	8004b02 <pb_dec_fixed_length_bytes+0x1e>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 8004b2a:	460a      	mov	r2, r1
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	4631      	mov	r1, r6
 8004b30:	f7ff ff98 	bl	8004a64 <pb_read>
 8004b34:	4604      	mov	r4, r0
 8004b36:	e7f0      	b.n	8004b1a <pb_dec_fixed_length_bytes+0x36>
 8004b38:	0800ed3b 	.word	0x0800ed3b
 8004b3c:	0800ed4a 	.word	0x0800ed4a

08004b40 <pb_dec_string>:
{
 8004b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b42:	460f      	mov	r7, r1
    if (!pb_decode_varint32(stream, &size))
 8004b44:	a901      	add	r1, sp, #4
{
 8004b46:	4604      	mov	r4, r0
 8004b48:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 8004b4a:	f7ff ffc7 	bl	8004adc <pb_decode_varint32>
 8004b4e:	b198      	cbz	r0, 8004b78 <pb_dec_string+0x38>
    alloc_size = size + 1;
 8004b50:	9a01      	ldr	r2, [sp, #4]
 8004b52:	1c51      	adds	r1, r2, #1
 8004b54:	f04f 0600 	mov.w	r6, #0
 8004b58:	d207      	bcs.n	8004b6a <pb_dec_string+0x2a>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004b5a:	78bb      	ldrb	r3, [r7, #2]
 8004b5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b60:	2b80      	cmp	r3, #128	; 0x80
 8004b62:	d10b      	bne.n	8004b7c <pb_dec_string+0x3c>
        PB_RETURN_ERROR(stream, "no malloc support");
 8004b64:	68e3      	ldr	r3, [r4, #12]
 8004b66:	4a0c      	ldr	r2, [pc, #48]	; (8004b98 <pb_dec_string+0x58>)
 8004b68:	e001      	b.n	8004b6e <pb_dec_string+0x2e>
        PB_RETURN_ERROR(stream, "size too large");
 8004b6a:	68e3      	ldr	r3, [r4, #12]
 8004b6c:	4a0b      	ldr	r2, [pc, #44]	; (8004b9c <pb_dec_string+0x5c>)
        PB_RETURN_ERROR(stream, "no malloc support");
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	bf08      	it	eq
 8004b72:	4613      	moveq	r3, r2
 8004b74:	60e3      	str	r3, [r4, #12]
 8004b76:	4630      	mov	r0, r6
}
 8004b78:	b003      	add	sp, #12
 8004b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (alloc_size > field->data_size)
 8004b7c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 8004b80:	428b      	cmp	r3, r1
 8004b82:	d202      	bcs.n	8004b8a <pb_dec_string+0x4a>
            PB_RETURN_ERROR(stream, "string overflow");
 8004b84:	68e3      	ldr	r3, [r4, #12]
 8004b86:	4a06      	ldr	r2, [pc, #24]	; (8004ba0 <pb_dec_string+0x60>)
 8004b88:	e7f1      	b.n	8004b6e <pb_dec_string+0x2e>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f7ff ff69 	bl	8004a64 <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 8004b92:	9b01      	ldr	r3, [sp, #4]
 8004b94:	54ee      	strb	r6, [r5, r3]
    return status;
 8004b96:	e7ef      	b.n	8004b78 <pb_dec_string+0x38>
 8004b98:	0800ed7b 	.word	0x0800ed7b
 8004b9c:	0800ed6c 	.word	0x0800ed6c
 8004ba0:	0800ed8d 	.word	0x0800ed8d

08004ba4 <pb_dec_bytes>:
{
 8004ba4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ba6:	460e      	mov	r6, r1
    if (!pb_decode_varint32(stream, &size))
 8004ba8:	a901      	add	r1, sp, #4
{
 8004baa:	4604      	mov	r4, r0
 8004bac:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 8004bae:	f7ff ff95 	bl	8004adc <pb_decode_varint32>
 8004bb2:	b1a0      	cbz	r0, 8004bde <pb_dec_bytes+0x3a>
    if (size > PB_SIZE_MAX)
 8004bb4:	9a01      	ldr	r2, [sp, #4]
 8004bb6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004bba:	d302      	bcc.n	8004bc2 <pb_dec_bytes+0x1e>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8004bbc:	68e3      	ldr	r3, [r4, #12]
 8004bbe:	4a0e      	ldr	r2, [pc, #56]	; (8004bf8 <pb_dec_bytes+0x54>)
 8004bc0:	e008      	b.n	8004bd4 <pb_dec_bytes+0x30>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004bc2:	78b3      	ldrb	r3, [r6, #2]
 8004bc4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bc8:	2b80      	cmp	r3, #128	; 0x80
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8004bca:	f102 0102 	add.w	r1, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004bce:	d108      	bne.n	8004be2 <pb_dec_bytes+0x3e>
        PB_RETURN_ERROR(stream, "no malloc support");
 8004bd0:	68e3      	ldr	r3, [r4, #12]
 8004bd2:	4a0a      	ldr	r2, [pc, #40]	; (8004bfc <pb_dec_bytes+0x58>)
            PB_RETURN_ERROR(stream, "bytes overflow");
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	bf08      	it	eq
 8004bd8:	4613      	moveq	r3, r2
 8004bda:	60e3      	str	r3, [r4, #12]
 8004bdc:	2000      	movs	r0, #0
}
 8004bde:	b002      	add	sp, #8
 8004be0:	bd70      	pop	{r4, r5, r6, pc}
        if (alloc_size > field->data_size)
 8004be2:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8004be6:	428b      	cmp	r3, r1
 8004be8:	d3e8      	bcc.n	8004bbc <pb_dec_bytes+0x18>
    bdest->size = (pb_size_t)size;
 8004bea:	4629      	mov	r1, r5
    return pb_read(stream, bdest->bytes, size);
 8004bec:	4620      	mov	r0, r4
    bdest->size = (pb_size_t)size;
 8004bee:	f821 2b02 	strh.w	r2, [r1], #2
    return pb_read(stream, bdest->bytes, size);
 8004bf2:	f7ff ff37 	bl	8004a64 <pb_read>
 8004bf6:	e7f2      	b.n	8004bde <pb_dec_bytes+0x3a>
 8004bf8:	0800ed3b 	.word	0x0800ed3b
 8004bfc:	0800ed7b 	.word	0x0800ed7b

08004c00 <pb_decode_varint>:
{
 8004c00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint64_t result = 0;
 8004c04:	2500      	movs	r5, #0
{
 8004c06:	4606      	mov	r6, r0
 8004c08:	460f      	mov	r7, r1
    uint64_t result = 0;
 8004c0a:	46a8      	mov	r8, r5
    uint_fast8_t bitpos = 0;
 8004c0c:	462c      	mov	r4, r5
        if (!pb_readbyte(stream, &byte))
 8004c0e:	f10d 0107 	add.w	r1, sp, #7
 8004c12:	4630      	mov	r0, r6
 8004c14:	f7ff feb8 	bl	8004988 <pb_readbyte>
 8004c18:	b310      	cbz	r0, 8004c60 <pb_decode_varint+0x60>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8004c1a:	f89d c007 	ldrb.w	ip, [sp, #7]
 8004c1e:	f1a4 0320 	sub.w	r3, r4, #32
 8004c22:	f00c 027f 	and.w	r2, ip, #127	; 0x7f
 8004c26:	f1c4 0120 	rsb	r1, r4, #32
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	fa22 f101 	lsr.w	r1, r2, r1
 8004c32:	430b      	orrs	r3, r1
 8004c34:	40a2      	lsls	r2, r4
    } while (byte & 0x80);
 8004c36:	f01c 0f80 	tst.w	ip, #128	; 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8004c3a:	ea45 0502 	orr.w	r5, r5, r2
 8004c3e:	ea43 0808 	orr.w	r8, r3, r8
        bitpos = (uint_fast8_t)(bitpos + 7);
 8004c42:	f104 0407 	add.w	r4, r4, #7
    } while (byte & 0x80);
 8004c46:	d102      	bne.n	8004c4e <pb_decode_varint+0x4e>
    *dest = result;
 8004c48:	e9c7 5800 	strd	r5, r8, [r7]
    return true;
 8004c4c:	e008      	b.n	8004c60 <pb_decode_varint+0x60>
        if (bitpos >= 64)
 8004c4e:	2c46      	cmp	r4, #70	; 0x46
 8004c50:	d1dd      	bne.n	8004c0e <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 8004c52:	68f3      	ldr	r3, [r6, #12]
 8004c54:	4a04      	ldr	r2, [pc, #16]	; (8004c68 <pb_decode_varint+0x68>)
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bf08      	it	eq
 8004c5a:	4613      	moveq	r3, r2
 8004c5c:	60f3      	str	r3, [r6, #12]
 8004c5e:	2000      	movs	r0, #0
}
 8004c60:	b002      	add	sp, #8
 8004c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c66:	bf00      	nop
 8004c68:	0800ed2b 	.word	0x0800ed2b

08004c6c <pb_dec_uvarint>:
{
 8004c6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c6e:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 8004c70:	4669      	mov	r1, sp
{
 8004c72:	4604      	mov	r4, r0
 8004c74:	4615      	mov	r5, r2
    if (!pb_decode_varint(stream, &value))
 8004c76:	f7ff ffc3 	bl	8004c00 <pb_decode_varint>
 8004c7a:	b138      	cbz	r0, 8004c8c <pb_dec_uvarint+0x20>
    if (field->data_size == sizeof(pb_uint64_t))
 8004c7c:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d105      	bne.n	8004c90 <pb_dec_uvarint+0x24>
        clamped = *(pb_uint64_t*)dest = value;
 8004c84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c88:	e9c5 2300 	strd	r2, r3, [r5]
}
 8004c8c:	b002      	add	sp, #8
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(uint32_t))
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d10b      	bne.n	8004cac <pb_dec_uvarint+0x40>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 8004c94:	9b00      	ldr	r3, [sp, #0]
 8004c96:	602b      	str	r3, [r5, #0]
    if (clamped != value)
 8004c98:	e9dd 5100 	ldrd	r5, r1, [sp]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	4291      	cmp	r1, r2
 8004ca0:	bf08      	it	eq
 8004ca2:	429d      	cmpeq	r5, r3
 8004ca4:	d0f2      	beq.n	8004c8c <pb_dec_uvarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8004ca6:	68e3      	ldr	r3, [r4, #12]
 8004ca8:	4a0b      	ldr	r2, [pc, #44]	; (8004cd8 <pb_dec_uvarint+0x6c>)
 8004caa:	e00e      	b.n	8004cca <pb_dec_uvarint+0x5e>
    else if (field->data_size == sizeof(uint_least16_t))
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d103      	bne.n	8004cb8 <pb_dec_uvarint+0x4c>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 8004cb0:	9b00      	ldr	r3, [sp, #0]
 8004cb2:	802b      	strh	r3, [r5, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	e7ef      	b.n	8004c98 <pb_dec_uvarint+0x2c>
    else if (field->data_size == sizeof(uint_least8_t))
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d104      	bne.n	8004cc6 <pb_dec_uvarint+0x5a>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 8004cbc:	9b00      	ldr	r3, [sp, #0]
 8004cbe:	702b      	strb	r3, [r5, #0]
 8004cc0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8004cc4:	e7e8      	b.n	8004c98 <pb_dec_uvarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8004cc6:	68e3      	ldr	r3, [r4, #12]
 8004cc8:	4a04      	ldr	r2, [pc, #16]	; (8004cdc <pb_dec_uvarint+0x70>)
        PB_RETURN_ERROR(stream, "integer too large");
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf08      	it	eq
 8004cce:	4613      	moveq	r3, r2
 8004cd0:	60e3      	str	r3, [r4, #12]
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	e7da      	b.n	8004c8c <pb_dec_uvarint+0x20>
 8004cd6:	bf00      	nop
 8004cd8:	0800edaf 	.word	0x0800edaf
 8004cdc:	0800ed9d 	.word	0x0800ed9d

08004ce0 <pb_dec_varint>:
{
 8004ce0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ce2:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 8004ce4:	4669      	mov	r1, sp
{
 8004ce6:	4605      	mov	r5, r0
 8004ce8:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 8004cea:	f7ff ff89 	bl	8004c00 <pb_decode_varint>
 8004cee:	b138      	cbz	r0, 8004d00 <pb_dec_varint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 8004cf0:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8004cf4:	2b08      	cmp	r3, #8
        svalue = (pb_int64_t)value;
 8004cf6:	e9dd 2100 	ldrd	r2, r1, [sp]
    if (field->data_size == sizeof(pb_int64_t))
 8004cfa:	d103      	bne.n	8004d04 <pb_dec_varint+0x24>
        clamped = *(pb_int64_t*)dest = svalue;
 8004cfc:	e9c4 2100 	strd	r2, r1, [r4]
}
 8004d00:	b002      	add	sp, #8
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 8004d04:	2b04      	cmp	r3, #4
        svalue = (int32_t)value;
 8004d06:	ea4f 76e2 	mov.w	r6, r2, asr #31
    else if (field->data_size == sizeof(int32_t))
 8004d0a:	d101      	bne.n	8004d10 <pb_dec_varint+0x30>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 8004d0c:	6022      	str	r2, [r4, #0]
    if (clamped != svalue)
 8004d0e:	e7f7      	b.n	8004d00 <pb_dec_varint+0x20>
    else if (field->data_size == sizeof(int_least16_t))
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d109      	bne.n	8004d28 <pb_dec_varint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 8004d14:	b213      	sxth	r3, r2
 8004d16:	8023      	strh	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8004d18:	17d9      	asrs	r1, r3, #31
    if (clamped != svalue)
 8004d1a:	42b1      	cmp	r1, r6
 8004d1c:	bf08      	it	eq
 8004d1e:	4293      	cmpeq	r3, r2
 8004d20:	d0ee      	beq.n	8004d00 <pb_dec_varint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8004d22:	68eb      	ldr	r3, [r5, #12]
 8004d24:	4a07      	ldr	r2, [pc, #28]	; (8004d44 <pb_dec_varint+0x64>)
 8004d26:	e006      	b.n	8004d36 <pb_dec_varint+0x56>
    else if (field->data_size == sizeof(int_least8_t))
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d102      	bne.n	8004d32 <pb_dec_varint+0x52>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8004d2c:	b253      	sxtb	r3, r2
 8004d2e:	7023      	strb	r3, [r4, #0]
 8004d30:	e7f2      	b.n	8004d18 <pb_dec_varint+0x38>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8004d32:	68eb      	ldr	r3, [r5, #12]
 8004d34:	4a04      	ldr	r2, [pc, #16]	; (8004d48 <pb_dec_varint+0x68>)
        PB_RETURN_ERROR(stream, "integer too large");
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bf08      	it	eq
 8004d3a:	4613      	moveq	r3, r2
 8004d3c:	60eb      	str	r3, [r5, #12]
 8004d3e:	2000      	movs	r0, #0
 8004d40:	e7de      	b.n	8004d00 <pb_dec_varint+0x20>
 8004d42:	bf00      	nop
 8004d44:	0800edaf 	.word	0x0800edaf
 8004d48:	0800ed9d 	.word	0x0800ed9d

08004d4c <pb_decode_tag>:
{
 8004d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d4e:	461d      	mov	r5, r3
    *eof = false;
 8004d50:	2300      	movs	r3, #0
 8004d52:	702b      	strb	r3, [r5, #0]
{
 8004d54:	460e      	mov	r6, r1
    *wire_type = (pb_wire_type_t) 0;
 8004d56:	700b      	strb	r3, [r1, #0]
{
 8004d58:	4617      	mov	r7, r2
    *tag = 0;
 8004d5a:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8004d5c:	a901      	add	r1, sp, #4
 8004d5e:	462a      	mov	r2, r5
 8004d60:	f7ff fe32 	bl	80049c8 <pb_decode_varint32_eof>
 8004d64:	b120      	cbz	r0, 8004d70 <pb_decode_tag+0x24>
    if (temp == 0)
 8004d66:	9c01      	ldr	r4, [sp, #4]
 8004d68:	b924      	cbnz	r4, 8004d74 <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	702b      	strb	r3, [r5, #0]
        return false;
 8004d6e:	4620      	mov	r0, r4
}
 8004d70:	b003      	add	sp, #12
 8004d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *tag = temp >> 3;
 8004d74:	08e3      	lsrs	r3, r4, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 8004d76:	f004 0407 	and.w	r4, r4, #7
    *tag = temp >> 3;
 8004d7a:	603b      	str	r3, [r7, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8004d7c:	7034      	strb	r4, [r6, #0]
    return true;
 8004d7e:	e7f7      	b.n	8004d70 <pb_decode_tag+0x24>

08004d80 <pb_skip_field>:
{
 8004d80:	b513      	push	{r0, r1, r4, lr}
 8004d82:	4604      	mov	r4, r0
    switch (wire_type)
 8004d84:	2905      	cmp	r1, #5
 8004d86:	d825      	bhi.n	8004dd4 <pb_skip_field+0x54>
 8004d88:	e8df f001 	tbb	[pc, r1]
 8004d8c:	24170f03 	.word	0x24170f03
 8004d90:	2224      	.short	0x2224
        if (!pb_read(stream, &byte, 1))
 8004d92:	2201      	movs	r2, #1
 8004d94:	a901      	add	r1, sp, #4
 8004d96:	4620      	mov	r0, r4
 8004d98:	f7ff fe64 	bl	8004a64 <pb_read>
 8004d9c:	b118      	cbz	r0, 8004da6 <pb_skip_field+0x26>
    } while (byte & 0x80);
 8004d9e:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	dbf5      	blt.n	8004d92 <pb_skip_field+0x12>
}
 8004da6:	b002      	add	sp, #8
 8004da8:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8004daa:	2208      	movs	r2, #8
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8004dac:	2100      	movs	r1, #0
 8004dae:	4620      	mov	r0, r4
}
 8004db0:	b002      	add	sp, #8
 8004db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8004db6:	f7ff be55 	b.w	8004a64 <pb_read>
    if (!pb_decode_varint32(stream, &length))
 8004dba:	a901      	add	r1, sp, #4
 8004dbc:	f7ff fe8e 	bl	8004adc <pb_decode_varint32>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	d0f0      	beq.n	8004da6 <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 8004dc4:	9a01      	ldr	r2, [sp, #4]
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f7ff fe4b 	bl	8004a64 <pb_read>
        case PB_WT_STRING: return pb_skip_string(stream);
 8004dce:	e7ea      	b.n	8004da6 <pb_skip_field+0x26>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8004dd0:	2204      	movs	r2, #4
 8004dd2:	e7eb      	b.n	8004dac <pb_skip_field+0x2c>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8004dd4:	68c3      	ldr	r3, [r0, #12]
 8004dd6:	4a03      	ldr	r2, [pc, #12]	; (8004de4 <pb_skip_field+0x64>)
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bf08      	it	eq
 8004ddc:	4613      	moveq	r3, r2
 8004dde:	60c3      	str	r3, [r0, #12]
 8004de0:	2000      	movs	r0, #0
 8004de2:	e7e0      	b.n	8004da6 <pb_skip_field+0x26>
 8004de4:	0800edc1 	.word	0x0800edc1

08004de8 <pb_make_string_substream>:
{
 8004de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004dea:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8004dec:	a901      	add	r1, sp, #4
{
 8004dee:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 8004df0:	f7ff fe74 	bl	8004adc <pb_decode_varint32>
 8004df4:	4606      	mov	r6, r0
 8004df6:	b168      	cbz	r0, 8004e14 <pb_make_string_substream+0x2c>
    *substream = *stream;
 8004df8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004dfc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8004e00:	9901      	ldr	r1, [sp, #4]
 8004e02:	428a      	cmp	r2, r1
 8004e04:	d209      	bcs.n	8004e1a <pb_make_string_substream+0x32>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8004e06:	68e3      	ldr	r3, [r4, #12]
 8004e08:	4a06      	ldr	r2, [pc, #24]	; (8004e24 <pb_make_string_substream+0x3c>)
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	bf08      	it	eq
 8004e0e:	4613      	moveq	r3, r2
 8004e10:	60e3      	str	r3, [r4, #12]
 8004e12:	2600      	movs	r6, #0
}
 8004e14:	4630      	mov	r0, r6
 8004e16:	b002      	add	sp, #8
 8004e18:	bd70      	pop	{r4, r5, r6, pc}
    substream->bytes_left = size;
 8004e1a:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 8004e1c:	68a3      	ldr	r3, [r4, #8]
 8004e1e:	1a5b      	subs	r3, r3, r1
 8004e20:	60a3      	str	r3, [r4, #8]
    return true;
 8004e22:	e7f7      	b.n	8004e14 <pb_make_string_substream+0x2c>
 8004e24:	0800edd3 	.word	0x0800edd3

08004e28 <pb_close_string_substream>:
    if (substream->bytes_left) {
 8004e28:	688a      	ldr	r2, [r1, #8]
{
 8004e2a:	b538      	push	{r3, r4, r5, lr}
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 8004e30:	b92a      	cbnz	r2, 8004e3e <pb_close_string_substream+0x16>
    stream->state = substream->state;
 8004e32:	6863      	ldr	r3, [r4, #4]
 8004e34:	606b      	str	r3, [r5, #4]
    stream->errmsg = substream->errmsg;
 8004e36:	68e3      	ldr	r3, [r4, #12]
 8004e38:	60eb      	str	r3, [r5, #12]
    return true;
 8004e3a:	2001      	movs	r0, #1
}
 8004e3c:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 8004e3e:	2100      	movs	r1, #0
 8004e40:	4620      	mov	r0, r4
 8004e42:	f7ff fe0f 	bl	8004a64 <pb_read>
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d1f3      	bne.n	8004e32 <pb_close_string_substream+0xa>
 8004e4a:	e7f7      	b.n	8004e3c <pb_close_string_substream+0x14>

08004e4c <decode_field>:
{
 8004e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e50:	460b      	mov	r3, r1
    switch (PB_ATYPE(iter->pos->type))
 8004e52:	6851      	ldr	r1, [r2, #4]
{
 8004e54:	4616      	mov	r6, r2
    switch (PB_ATYPE(iter->pos->type))
 8004e56:	788a      	ldrb	r2, [r1, #2]
 8004e58:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
 8004e5c:	2c40      	cmp	r4, #64	; 0x40
{
 8004e5e:	b089      	sub	sp, #36	; 0x24
 8004e60:	4605      	mov	r5, r0
    switch (PB_ATYPE(iter->pos->type))
 8004e62:	f000 8083 	beq.w	8004f6c <decode_field+0x120>
 8004e66:	2c80      	cmp	r4, #128	; 0x80
 8004e68:	d07d      	beq.n	8004f66 <decode_field+0x11a>
 8004e6a:	b964      	cbnz	r4, 8004e86 <decode_field+0x3a>
    func = PB_DECODERS[PB_LTYPE(type)];
 8004e6c:	f002 0c0f 	and.w	ip, r2, #15
 8004e70:	4f6f      	ldr	r7, [pc, #444]	; (8005030 <decode_field+0x1e4>)
 8004e72:	f002 0230 	and.w	r2, r2, #48	; 0x30
    switch (PB_HTYPE(type))
 8004e76:	2a20      	cmp	r2, #32
    func = PB_DECODERS[PB_LTYPE(type)];
 8004e78:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
    switch (PB_HTYPE(type))
 8004e7c:	d02b      	beq.n	8004ed6 <decode_field+0x8a>
 8004e7e:	d805      	bhi.n	8004e8c <decode_field+0x40>
 8004e80:	b1da      	cbz	r2, 8004eba <decode_field+0x6e>
 8004e82:	2a10      	cmp	r2, #16
 8004e84:	d01f      	beq.n	8004ec6 <decode_field+0x7a>
            PB_RETURN_ERROR(stream, "invalid field type");
 8004e86:	68eb      	ldr	r3, [r5, #12]
 8004e88:	4a6a      	ldr	r2, [pc, #424]	; (8005034 <decode_field+0x1e8>)
 8004e8a:	e04c      	b.n	8004f26 <decode_field+0xda>
    switch (PB_HTYPE(type))
 8004e8c:	2a30      	cmp	r2, #48	; 0x30
 8004e8e:	d1fa      	bne.n	8004e86 <decode_field+0x3a>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8004e90:	6973      	ldr	r3, [r6, #20]
 8004e92:	880a      	ldrh	r2, [r1, #0]
 8004e94:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8004e96:	f1bc 0f07 	cmp.w	ip, #7
 8004e9a:	d10b      	bne.n	8004eb4 <decode_field+0x68>
                memset(iter->pData, 0, iter->pos->data_size);
 8004e9c:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8004ea0:	6930      	ldr	r0, [r6, #16]
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	f004 fc2e 	bl	8009704 <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 8004ea8:	6873      	ldr	r3, [r6, #4]
 8004eaa:	6931      	ldr	r1, [r6, #16]
 8004eac:	f8d3 000b 	ldr.w	r0, [r3, #11]
 8004eb0:	f7ff fd59 	bl	8004966 <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 8004eb4:	6932      	ldr	r2, [r6, #16]
 8004eb6:	6871      	ldr	r1, [r6, #4]
 8004eb8:	e00b      	b.n	8004ed2 <decode_field+0x86>
            return func(stream, iter->pos, iter->pData);
 8004eba:	6932      	ldr	r2, [r6, #16]
            return func(stream, iter->pos, iter->pData);
 8004ebc:	463b      	mov	r3, r7
}
 8004ebe:	b009      	add	sp, #36	; 0x24
 8004ec0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return func(stream, iter->pos, iter->pData);
 8004ec4:	4718      	bx	r3
            if (iter->pSize != iter->pData)
 8004ec6:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8004eca:	4293      	cmp	r3, r2
                *(bool*)iter->pSize = true;
 8004ecc:	bf1c      	itt	ne
 8004ece:	2001      	movne	r0, #1
 8004ed0:	7018      	strbne	r0, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	e7f2      	b.n	8004ebc <decode_field+0x70>
            if (wire_type == PB_WT_STRING
 8004ed6:	2b02      	cmp	r3, #2
            if (iter->pSize != iter->pData)
 8004ed8:	f8d6 8014 	ldr.w	r8, [r6, #20]
            if (wire_type == PB_WT_STRING
 8004edc:	d134      	bne.n	8004f48 <decode_field+0xfc>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8004ede:	f1bc 0f04 	cmp.w	ip, #4
 8004ee2:	d831      	bhi.n	8004f48 <decode_field+0xfc>
                if (!pb_make_string_substream(stream, &substream))
 8004ee4:	a904      	add	r1, sp, #16
 8004ee6:	f7ff ff7f 	bl	8004de8 <pb_make_string_substream>
 8004eea:	4604      	mov	r4, r0
 8004eec:	b970      	cbnz	r0, 8004f0c <decode_field+0xc0>
            PB_RETURN_ERROR(stream, "invalid field type");
 8004eee:	2400      	movs	r4, #0
 8004ef0:	e026      	b.n	8004f40 <decode_field+0xf4>
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8004ef2:	f8b1 0007 	ldrh.w	r0, [r1, #7]
 8004ef6:	6932      	ldr	r2, [r6, #16]
                    if (!func(&substream, iter->pos, pItem))
 8004ef8:	fb03 2200 	mla	r2, r3, r0, r2
 8004efc:	a804      	add	r0, sp, #16
 8004efe:	47b8      	blx	r7
 8004f00:	b1b0      	cbz	r0, 8004f30 <decode_field+0xe4>
                    (*size)++;
 8004f02:	f8b8 3000 	ldrh.w	r3, [r8]
 8004f06:	3301      	adds	r3, #1
 8004f08:	f8a8 3000 	strh.w	r3, [r8]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 8004f0c:	9b06      	ldr	r3, [sp, #24]
 8004f0e:	b133      	cbz	r3, 8004f1e <decode_field+0xd2>
 8004f10:	6871      	ldr	r1, [r6, #4]
 8004f12:	f8b8 3000 	ldrh.w	r3, [r8]
 8004f16:	f8b1 2009 	ldrh.w	r2, [r1, #9]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d8e9      	bhi.n	8004ef2 <decode_field+0xa6>
                if (substream.bytes_left != 0)
 8004f1e:	9b06      	ldr	r3, [sp, #24]
 8004f20:	b143      	cbz	r3, 8004f34 <decode_field+0xe8>
                    PB_RETURN_ERROR(stream, "array overflow");
 8004f22:	68eb      	ldr	r3, [r5, #12]
 8004f24:	4a44      	ldr	r2, [pc, #272]	; (8005038 <decode_field+0x1ec>)
            PB_RETURN_ERROR(stream, "invalid field type");
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bf08      	it	eq
 8004f2a:	4613      	moveq	r3, r2
 8004f2c:	60eb      	str	r3, [r5, #12]
 8004f2e:	e7de      	b.n	8004eee <decode_field+0xa2>
                        status = false;
 8004f30:	4604      	mov	r4, r0
 8004f32:	e7f4      	b.n	8004f1e <decode_field+0xd2>
                if (!pb_close_string_substream(stream, &substream))
 8004f34:	a904      	add	r1, sp, #16
 8004f36:	4628      	mov	r0, r5
 8004f38:	f7ff ff76 	bl	8004e28 <pb_close_string_substream>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d0d6      	beq.n	8004eee <decode_field+0xa2>
}
 8004f40:	4620      	mov	r0, r4
 8004f42:	b009      	add	sp, #36	; 0x24
 8004f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8004f48:	f8b8 3000 	ldrh.w	r3, [r8]
 8004f4c:	6932      	ldr	r2, [r6, #16]
 8004f4e:	f8b1 0007 	ldrh.w	r0, [r1, #7]
                if ((*size)++ >= iter->pos->array_size)
 8004f52:	1c5c      	adds	r4, r3, #1
 8004f54:	f8a8 4000 	strh.w	r4, [r8]
 8004f58:	f8b1 4009 	ldrh.w	r4, [r1, #9]
 8004f5c:	429c      	cmp	r4, r3
 8004f5e:	d9e0      	bls.n	8004f22 <decode_field+0xd6>
                return func(stream, iter->pos, pItem);
 8004f60:	fb03 2200 	mla	r2, r3, r0, r2
 8004f64:	e7b5      	b.n	8004ed2 <decode_field+0x86>
    PB_RETURN_ERROR(stream, "no malloc support");
 8004f66:	68c3      	ldr	r3, [r0, #12]
 8004f68:	4a34      	ldr	r2, [pc, #208]	; (800503c <decode_field+0x1f0>)
 8004f6a:	e7dc      	b.n	8004f26 <decode_field+0xda>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 8004f6c:	6937      	ldr	r7, [r6, #16]
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 8004f6e:	b10f      	cbz	r7, 8004f74 <decode_field+0x128>
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	b932      	cbnz	r2, 8004f82 <decode_field+0x136>
        return pb_skip_field(stream, wire_type);
 8004f74:	4619      	mov	r1, r3
 8004f76:	4628      	mov	r0, r5
}
 8004f78:	b009      	add	sp, #36	; 0x24
 8004f7a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return pb_skip_field(stream, wire_type);
 8004f7e:	f7ff beff 	b.w	8004d80 <pb_skip_field>
    if (wire_type == PB_WT_STRING)
 8004f82:	2b02      	cmp	r3, #2
    void **arg = &(pCallback->arg);
 8004f84:	f107 0804 	add.w	r8, r7, #4
    if (wire_type == PB_WT_STRING)
 8004f88:	d11c      	bne.n	8004fc4 <decode_field+0x178>
        if (!pb_make_string_substream(stream, &substream))
 8004f8a:	a904      	add	r1, sp, #16
 8004f8c:	f7ff ff2c 	bl	8004de8 <pb_make_string_substream>
 8004f90:	4604      	mov	r4, r0
 8004f92:	2800      	cmp	r0, #0
 8004f94:	d0d4      	beq.n	8004f40 <decode_field+0xf4>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6871      	ldr	r1, [r6, #4]
 8004f9a:	4642      	mov	r2, r8
 8004f9c:	a804      	add	r0, sp, #16
 8004f9e:	4798      	blx	r3
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	b930      	cbnz	r0, 8004fb2 <decode_field+0x166>
                PB_RETURN_ERROR(stream, "callback failed");
 8004fa4:	68eb      	ldr	r3, [r5, #12]
 8004fa6:	4a26      	ldr	r2, [pc, #152]	; (8005040 <decode_field+0x1f4>)
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	bf08      	it	eq
 8004fac:	4613      	moveq	r3, r2
 8004fae:	60eb      	str	r3, [r5, #12]
 8004fb0:	e7c6      	b.n	8004f40 <decode_field+0xf4>
        } while (substream.bytes_left);
 8004fb2:	9b06      	ldr	r3, [sp, #24]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1ee      	bne.n	8004f96 <decode_field+0x14a>
        if (!pb_close_string_substream(stream, &substream))
 8004fb8:	a904      	add	r1, sp, #16
 8004fba:	4628      	mov	r0, r5
 8004fbc:	f7ff ff34 	bl	8004e28 <pb_close_string_substream>
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	e7bd      	b.n	8004f40 <decode_field+0xf4>
    switch (wire_type)
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d020      	beq.n	800500a <decode_field+0x1be>
 8004fc8:	2b05      	cmp	r3, #5
 8004fca:	d026      	beq.n	800501a <decode_field+0x1ce>
 8004fcc:	bb63      	cbnz	r3, 8005028 <decode_field+0x1dc>
 8004fce:	461c      	mov	r4, r3
 8004fd0:	f10d 0904 	add.w	r9, sp, #4
                (*size)++;
 8004fd4:	3401      	adds	r4, #1
                if (*size > max_size) return false;
 8004fd6:	2c0b      	cmp	r4, #11
 8004fd8:	d089      	beq.n	8004eee <decode_field+0xa2>
                if (!pb_read(stream, buf, 1)) return false;
 8004fda:	2201      	movs	r2, #1
 8004fdc:	4649      	mov	r1, r9
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f7ff fd40 	bl	8004a64 <pb_read>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d082      	beq.n	8004eee <decode_field+0xa2>
            } while (*buf++ & 0x80);
 8004fe8:	f919 3b01 	ldrsb.w	r3, [r9], #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	dbf1      	blt.n	8004fd4 <decode_field+0x188>
        substream = pb_istream_from_buffer(buffer, size);
 8004ff0:	4b14      	ldr	r3, [pc, #80]	; (8005044 <decode_field+0x1f8>)
 8004ff2:	9304      	str	r3, [sp, #16]
 8004ff4:	ab01      	add	r3, sp, #4
 8004ff6:	e9cd 3405 	strd	r3, r4, [sp, #20]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	9307      	str	r3, [sp, #28]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8004ffe:	6871      	ldr	r1, [r6, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	4642      	mov	r2, r8
 8005004:	a804      	add	r0, sp, #16
 8005006:	4798      	blx	r3
 8005008:	e7da      	b.n	8004fc0 <decode_field+0x174>
            return pb_read(stream, buf, 8);
 800500a:	2208      	movs	r2, #8
 800500c:	a901      	add	r1, sp, #4
 800500e:	f7ff fd29 	bl	8004a64 <pb_read>
            *size = 8;
 8005012:	2408      	movs	r4, #8
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8005014:	2800      	cmp	r0, #0
 8005016:	d1eb      	bne.n	8004ff0 <decode_field+0x1a4>
 8005018:	e769      	b.n	8004eee <decode_field+0xa2>
            return pb_read(stream, buf, 4);
 800501a:	2204      	movs	r2, #4
 800501c:	eb0d 0102 	add.w	r1, sp, r2
 8005020:	f7ff fd20 	bl	8004a64 <pb_read>
            *size = 4;
 8005024:	2404      	movs	r4, #4
            return pb_read(stream, buf, 4);
 8005026:	e7f5      	b.n	8005014 <decode_field+0x1c8>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8005028:	68c3      	ldr	r3, [r0, #12]
 800502a:	4a07      	ldr	r2, [pc, #28]	; (8005048 <decode_field+0x1fc>)
 800502c:	e77b      	b.n	8004f26 <decode_field+0xda>
 800502e:	bf00      	nop
 8005030:	0800ee70 	.word	0x0800ee70
 8005034:	0800edfa 	.word	0x0800edfa
 8005038:	0800edeb 	.word	0x0800edeb
 800503c:	0800ed7b 	.word	0x0800ed7b
 8005040:	0800ee0d 	.word	0x0800ee0d
 8005044:	08004891 	.word	0x08004891
 8005048:	0800edc1 	.word	0x0800edc1

0800504c <pb_decode_noinit>:
{
 800504c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005050:	b091      	sub	sp, #68	; 0x44
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8005052:	2500      	movs	r5, #0
{
 8005054:	4604      	mov	r4, r0
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8005056:	a804      	add	r0, sp, #16
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8005058:	e9cd 5502 	strd	r5, r5, [sp, #8]
    pb_size_t fixed_count_size = 0;
 800505c:	f8ad 5002 	strh.w	r5, [sp, #2]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8005060:	f7ff fbac 	bl	80047bc <pb_field_iter_begin>
    uint32_t extension_range_start = 0;
 8005064:	462f      	mov	r7, r5
    while (stream->bytes_left)
 8005066:	68a3      	ldr	r3, [r4, #8]
 8005068:	b9f3      	cbnz	r3, 80050a8 <pb_decode_noinit+0x5c>
    if (fixed_count_field != NULL &&
 800506a:	b135      	cbz	r5, 800507a <pb_decode_noinit+0x2e>
 800506c:	f8b5 2009 	ldrh.w	r2, [r5, #9]
 8005070:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005074:	429a      	cmp	r2, r3
 8005076:	f040 8096 	bne.w	80051a6 <pb_decode_noinit+0x15a>
            last_type = iter.pos->type;
 800507a:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
        } while (pb_field_iter_next(&iter));
 800507e:	a804      	add	r0, sp, #16
            last_type = iter.pos->type;
 8005080:	789e      	ldrb	r6, [r3, #2]
        } while (pb_field_iter_next(&iter));
 8005082:	f7ff fbad 	bl	80047e0 <pb_field_iter_next>
 8005086:	2800      	cmp	r0, #0
 8005088:	d1f7      	bne.n	800507a <pb_decode_noinit+0x2e>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 800508a:	f016 0f30 	tst.w	r6, #48	; 0x30
 800508e:	d103      	bne.n	8005098 <pb_decode_noinit+0x4c>
 8005090:	9b05      	ldr	r3, [sp, #20]
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b103      	cbz	r3, 8005098 <pb_decode_noinit+0x4c>
            req_field_count++;
 8005096:	3501      	adds	r5, #1
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8005098:	2d40      	cmp	r5, #64	; 0x40
 800509a:	f200 80cd 	bhi.w	8005238 <pb_decode_noinit+0x1ec>
        if (req_field_count > 0)
 800509e:	2d00      	cmp	r5, #0
 80050a0:	f040 80cb 	bne.w	800523a <pb_decode_noinit+0x1ee>
    return true;
 80050a4:	2001      	movs	r0, #1
 80050a6:	e00c      	b.n	80050c2 <pb_decode_noinit+0x76>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 80050a8:	f10d 0301 	add.w	r3, sp, #1
 80050ac:	aa01      	add	r2, sp, #4
 80050ae:	4669      	mov	r1, sp
 80050b0:	4620      	mov	r0, r4
 80050b2:	f7ff fe4b 	bl	8004d4c <pb_decode_tag>
 80050b6:	b938      	cbnz	r0, 80050c8 <pb_decode_noinit+0x7c>
            if (eof)
 80050b8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1d4      	bne.n	800506a <pb_decode_noinit+0x1e>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80050c0:	2000      	movs	r0, #0
}
 80050c2:	b011      	add	sp, #68	; 0x44
 80050c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 80050c8:	9901      	ldr	r1, [sp, #4]
 80050ca:	a804      	add	r0, sp, #16
 80050cc:	f7ff fbc9 	bl	8004862 <pb_field_iter_find>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d155      	bne.n	8005180 <pb_decode_noinit+0x134>
            if (tag >= extension_range_start)
 80050d4:	9b01      	ldr	r3, [sp, #4]
 80050d6:	42bb      	cmp	r3, r7
 80050d8:	f0c0 80b6 	bcc.w	8005248 <pb_decode_noinit+0x1fc>
    const pb_field_t *start = iter->pos;
 80050dc:	9e05      	ldr	r6, [sp, #20]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 80050de:	9a05      	ldr	r2, [sp, #20]
 80050e0:	7893      	ldrb	r3, [r2, #2]
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	f000 80b7 	beq.w	800525a <pb_decode_noinit+0x20e>
        (void)pb_field_iter_next(iter);
 80050ec:	a804      	add	r0, sp, #16
 80050ee:	f7ff fb77 	bl	80047e0 <pb_field_iter_next>
    } while (iter->pos != start);
 80050f2:	9b05      	ldr	r3, [sp, #20]
 80050f4:	429e      	cmp	r6, r3
 80050f6:	d1f2      	bne.n	80050de <pb_decode_noinit+0x92>
                    extension_range_start = (uint32_t)-1;
 80050f8:	f04f 37ff 	mov.w	r7, #4294967295
                if (tag >= extension_range_start)
 80050fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005100:	45b8      	cmp	r8, r7
 8005102:	f0c0 80a1 	bcc.w	8005248 <pb_decode_noinit+0x1fc>
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8005106:	9a08      	ldr	r2, [sp, #32]
                    if (!decode_extension(stream, tag, wire_type, &iter))
 8005108:	f89d b000 	ldrb.w	fp, [sp]
                    size_t pos = stream->bytes_left;
 800510c:	f8d4 9008 	ldr.w	r9, [r4, #8]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8005110:	6816      	ldr	r6, [r2, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8005112:	68a2      	ldr	r2, [r4, #8]
 8005114:	2e00      	cmp	r6, #0
 8005116:	f000 8094 	beq.w	8005242 <pb_decode_noinit+0x1f6>
 800511a:	4591      	cmp	r9, r2
 800511c:	d1a3      	bne.n	8005066 <pb_decode_noinit+0x1a>
        if (extension->type->decode)
 800511e:	6832      	ldr	r2, [r6, #0]
 8005120:	f8d2 a000 	ldr.w	sl, [r2]
 8005124:	f1ba 0f00 	cmp.w	sl, #0
 8005128:	d008      	beq.n	800513c <pb_decode_noinit+0xf0>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800512a:	465b      	mov	r3, fp
 800512c:	4642      	mov	r2, r8
 800512e:	4631      	mov	r1, r6
 8005130:	4620      	mov	r0, r4
 8005132:	47d0      	blx	sl
        if (!status)
 8005134:	2800      	cmp	r0, #0
 8005136:	d0c3      	beq.n	80050c0 <pb_decode_noinit+0x74>
        extension = extension->next;
 8005138:	68b6      	ldr	r6, [r6, #8]
 800513a:	e7ea      	b.n	8005112 <pb_decode_noinit+0xc6>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800513c:	f8d2 a008 	ldr.w	sl, [r2, #8]
    if (field->tag != tag)
 8005140:	f8ba 2000 	ldrh.w	r2, [sl]
 8005144:	4590      	cmp	r8, r2
 8005146:	d1f7      	bne.n	8005138 <pb_decode_noinit+0xec>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8005148:	6872      	ldr	r2, [r6, #4]
 800514a:	4651      	mov	r1, sl
 800514c:	a80a      	add	r0, sp, #40	; 0x28
 800514e:	f7ff fb35 	bl	80047bc <pb_field_iter_begin>
    iter->pData = extension->dest;
 8005152:	6872      	ldr	r2, [r6, #4]
 8005154:	920e      	str	r2, [sp, #56]	; 0x38
    iter->pSize = &extension->found;
 8005156:	f106 020c 	add.w	r2, r6, #12
 800515a:	920f      	str	r2, [sp, #60]	; 0x3c
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800515c:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8005160:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005164:	2a80      	cmp	r2, #128	; 0x80
        iter->pData = &extension->dest;
 8005166:	bf08      	it	eq
 8005168:	1d32      	addeq	r2, r6, #4
    extension->found = true;
 800516a:	f04f 0301 	mov.w	r3, #1
        iter->pData = &extension->dest;
 800516e:	bf08      	it	eq
 8005170:	920e      	streq	r2, [sp, #56]	; 0x38
    return decode_field(stream, wire_type, &iter);
 8005172:	4659      	mov	r1, fp
    extension->found = true;
 8005174:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 8005176:	aa0a      	add	r2, sp, #40	; 0x28
 8005178:	4620      	mov	r0, r4
 800517a:	f7ff fe67 	bl	8004e4c <decode_field>
 800517e:	e7d9      	b.n	8005134 <pb_decode_noinit+0xe8>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 8005180:	9a05      	ldr	r2, [sp, #20]
 8005182:	7893      	ldrb	r3, [r2, #2]
 8005184:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005188:	2b20      	cmp	r3, #32
 800518a:	d121      	bne.n	80051d0 <pb_decode_noinit+0x184>
            && iter.pSize == iter.pData)
 800518c:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 8005190:	4299      	cmp	r1, r3
 8005192:	d116      	bne.n	80051c2 <pb_decode_noinit+0x176>
            if (fixed_count_field != iter.pos) {
 8005194:	42aa      	cmp	r2, r5
 8005196:	d010      	beq.n	80051ba <pb_decode_noinit+0x16e>
                if (fixed_count_field != NULL &&
 8005198:	b165      	cbz	r5, 80051b4 <pb_decode_noinit+0x168>
 800519a:	f8b5 1009 	ldrh.w	r1, [r5, #9]
 800519e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80051a2:	4299      	cmp	r1, r3
 80051a4:	d006      	beq.n	80051b4 <pb_decode_noinit+0x168>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80051a6:	68e3      	ldr	r3, [r4, #12]
 80051a8:	4a2d      	ldr	r2, [pc, #180]	; (8005260 <pb_decode_noinit+0x214>)
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf08      	it	eq
 80051ae:	4613      	moveq	r3, r2
 80051b0:	60e3      	str	r3, [r4, #12]
 80051b2:	e785      	b.n	80050c0 <pb_decode_noinit+0x74>
                fixed_count_size = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	f8ad 3002 	strh.w	r3, [sp, #2]
            iter.pSize = &fixed_count_size;
 80051ba:	f10d 0302 	add.w	r3, sp, #2
 80051be:	9309      	str	r3, [sp, #36]	; 0x24
 80051c0:	4615      	mov	r5, r2
        if (!decode_field(stream, wire_type, &iter))
 80051c2:	f89d 1000 	ldrb.w	r1, [sp]
 80051c6:	aa04      	add	r2, sp, #16
 80051c8:	4620      	mov	r0, r4
 80051ca:	f7ff fe3f 	bl	8004e4c <decode_field>
 80051ce:	e040      	b.n	8005252 <pb_decode_noinit+0x206>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f6      	bne.n	80051c2 <pb_decode_noinit+0x176>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 80051d4:	9a06      	ldr	r2, [sp, #24]
 80051d6:	2a3f      	cmp	r2, #63	; 0x3f
 80051d8:	d8f3      	bhi.n	80051c2 <pb_decode_noinit+0x176>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 80051da:	0951      	lsrs	r1, r2, #5
 80051dc:	ab10      	add	r3, sp, #64	; 0x40
 80051de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 80051e2:	f002 021f 	and.w	r2, r2, #31
 80051e6:	2301      	movs	r3, #1
 80051e8:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 80051ea:	f851 2c38 	ldr.w	r2, [r1, #-56]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f841 3c38 	str.w	r3, [r1, #-56]
 80051f4:	e7e5      	b.n	80051c2 <pb_decode_noinit+0x176>
                if (fields_seen[i] != allbits)
 80051f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80051fa:	3601      	adds	r6, #1
 80051fc:	d006      	beq.n	800520c <pb_decode_noinit+0x1c0>
                    PB_RETURN_ERROR(stream, "missing required field");
 80051fe:	68e3      	ldr	r3, [r4, #12]
 8005200:	4a18      	ldr	r2, [pc, #96]	; (8005264 <pb_decode_noinit+0x218>)
 8005202:	2b00      	cmp	r3, #0
 8005204:	bf08      	it	eq
 8005206:	4613      	moveq	r3, r2
 8005208:	60e3      	str	r3, [r4, #12]
 800520a:	e75a      	b.n	80050c2 <pb_decode_noinit+0x76>
            for (i = 0; i < (req_field_count >> 5); i++)
 800520c:	3201      	adds	r2, #1
 800520e:	4293      	cmp	r3, r2
 8005210:	d1f1      	bne.n	80051f6 <pb_decode_noinit+0x1aa>
            if ((req_field_count & 31) != 0)
 8005212:	f015 051f 	ands.w	r5, r5, #31
 8005216:	f43f af45 	beq.w	80050a4 <pb_decode_noinit+0x58>
                if (fields_seen[req_field_count >> 5] !=
 800521a:	aa10      	add	r2, sp, #64	; 0x40
 800521c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 8005220:	f1c5 0520 	rsb	r5, r5, #32
                if (fields_seen[req_field_count >> 5] !=
 8005224:	f853 3c38 	ldr.w	r3, [r3, #-56]
                    (allbits >> (32 - (req_field_count & 31))))
 8005228:	f04f 32ff 	mov.w	r2, #4294967295
 800522c:	fa22 f505 	lsr.w	r5, r2, r5
                if (fields_seen[req_field_count >> 5] !=
 8005230:	42ab      	cmp	r3, r5
 8005232:	f43f af37 	beq.w	80050a4 <pb_decode_noinit+0x58>
 8005236:	e7e2      	b.n	80051fe <pb_decode_noinit+0x1b2>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 8005238:	2540      	movs	r5, #64	; 0x40
            for (i = 0; i < (req_field_count >> 5); i++)
 800523a:	096b      	lsrs	r3, r5, #5
 800523c:	a902      	add	r1, sp, #8
 800523e:	2200      	movs	r2, #0
 8005240:	e7e5      	b.n	800520e <pb_decode_noinit+0x1c2>
                    if (pos != stream->bytes_left)
 8005242:	4591      	cmp	r9, r2
 8005244:	f47f af0f 	bne.w	8005066 <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 8005248:	f89d 1000 	ldrb.w	r1, [sp]
 800524c:	4620      	mov	r0, r4
 800524e:	f7ff fd97 	bl	8004d80 <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 8005252:	2800      	cmp	r0, #0
 8005254:	f47f af07 	bne.w	8005066 <pb_decode_noinit+0x1a>
 8005258:	e732      	b.n	80050c0 <pb_decode_noinit+0x74>
                    extension_range_start = iter.pos->tag;
 800525a:	8817      	ldrh	r7, [r2, #0]
 800525c:	e74e      	b.n	80050fc <pb_decode_noinit+0xb0>
 800525e:	bf00      	nop
 8005260:	0800ee1d 	.word	0x0800ee1d
 8005264:	0800ee3e 	.word	0x0800ee3e

08005268 <pb_decode>:
{
 8005268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800526a:	460c      	mov	r4, r1
 800526c:	4605      	mov	r5, r0
    pb_message_set_to_defaults(fields, dest_struct);
 800526e:	4611      	mov	r1, r2
 8005270:	4620      	mov	r0, r4
 8005272:	9201      	str	r2, [sp, #4]
 8005274:	f7ff fb77 	bl	8004966 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 8005278:	9a01      	ldr	r2, [sp, #4]
 800527a:	4621      	mov	r1, r4
 800527c:	4628      	mov	r0, r5
}
 800527e:	b003      	add	sp, #12
 8005280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 8005284:	f7ff bee2 	b.w	800504c <pb_decode_noinit>

08005288 <pb_dec_submessage>:
{
 8005288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800528a:	b087      	sub	sp, #28
 800528c:	460e      	mov	r6, r1
 800528e:	9201      	str	r2, [sp, #4]
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 8005290:	f8d1 700b 	ldr.w	r7, [r1, #11]
    if (!pb_make_string_substream(stream, &substream))
 8005294:	a902      	add	r1, sp, #8
{
 8005296:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 8005298:	f7ff fda6 	bl	8004de8 <pb_make_string_substream>
 800529c:	b1e0      	cbz	r0, 80052d8 <pb_dec_submessage+0x50>
    if (field->ptr == NULL)
 800529e:	f8d6 400b 	ldr.w	r4, [r6, #11]
 80052a2:	9a01      	ldr	r2, [sp, #4]
 80052a4:	b944      	cbnz	r4, 80052b8 <pb_dec_submessage+0x30>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80052a6:	68eb      	ldr	r3, [r5, #12]
 80052a8:	4a0e      	ldr	r2, [pc, #56]	; (80052e4 <pb_dec_submessage+0x5c>)
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	bf08      	it	eq
 80052ae:	4613      	moveq	r3, r2
 80052b0:	60eb      	str	r3, [r5, #12]
}
 80052b2:	4620      	mov	r0, r4
 80052b4:	b007      	add	sp, #28
 80052b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 80052b8:	78b3      	ldrb	r3, [r6, #2]
 80052ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052be:	2b20      	cmp	r3, #32
        status = pb_decode(&substream, submsg_fields, dest);
 80052c0:	4639      	mov	r1, r7
 80052c2:	a802      	add	r0, sp, #8
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 80052c4:	d10a      	bne.n	80052dc <pb_dec_submessage+0x54>
        status = pb_decode(&substream, submsg_fields, dest);
 80052c6:	f7ff ffcf 	bl	8005268 <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 80052ca:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 80052cc:	a902      	add	r1, sp, #8
 80052ce:	4628      	mov	r0, r5
 80052d0:	f7ff fdaa 	bl	8004e28 <pb_close_string_substream>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	d1ec      	bne.n	80052b2 <pb_dec_submessage+0x2a>
        return false;
 80052d8:	2400      	movs	r4, #0
 80052da:	e7ea      	b.n	80052b2 <pb_dec_submessage+0x2a>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 80052dc:	f7ff feb6 	bl	800504c <pb_decode_noinit>
 80052e0:	e7f3      	b.n	80052ca <pb_dec_submessage+0x42>
 80052e2:	bf00      	nop
 80052e4:	0800ee55 	.word	0x0800ee55

080052e8 <pb_decode_delimited>:
{
 80052e8:	b530      	push	{r4, r5, lr}
 80052ea:	b087      	sub	sp, #28
 80052ec:	460c      	mov	r4, r1
    if (!pb_make_string_substream(stream, &substream))
 80052ee:	a902      	add	r1, sp, #8
{
 80052f0:	4605      	mov	r5, r0
 80052f2:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 80052f4:	f7ff fd78 	bl	8004de8 <pb_make_string_substream>
 80052f8:	b150      	cbz	r0, 8005310 <pb_decode_delimited+0x28>
    status = pb_decode(&substream, fields, dest_struct);
 80052fa:	4621      	mov	r1, r4
 80052fc:	9a01      	ldr	r2, [sp, #4]
 80052fe:	a802      	add	r0, sp, #8
 8005300:	f7ff ffb2 	bl	8005268 <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 8005304:	a902      	add	r1, sp, #8
    status = pb_decode(&substream, fields, dest_struct);
 8005306:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8005308:	4628      	mov	r0, r5
 800530a:	f7ff fd8d 	bl	8004e28 <pb_close_string_substream>
 800530e:	b900      	cbnz	r0, 8005312 <pb_decode_delimited+0x2a>
        return false;
 8005310:	2400      	movs	r4, #0
}
 8005312:	4620      	mov	r0, r4
 8005314:	b007      	add	sp, #28
 8005316:	bd30      	pop	{r4, r5, pc}

08005318 <pb_decode_svarint>:
{
 8005318:	b513      	push	{r0, r1, r4, lr}
 800531a:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 800531c:	4669      	mov	r1, sp
 800531e:	f7ff fc6f 	bl	8004c00 <pb_decode_varint>
 8005322:	b160      	cbz	r0, 800533e <pb_decode_svarint+0x26>
    if (value & 1)
 8005324:	e9dd 1300 	ldrd	r1, r3, [sp]
        *dest = (pb_int64_t)(~(value >> 1));
 8005328:	084a      	lsrs	r2, r1, #1
 800532a:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    if (value & 1)
 800532e:	07c9      	lsls	r1, r1, #31
        *dest = (pb_int64_t)(~(value >> 1));
 8005330:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8005334:	bf44      	itt	mi
 8005336:	43d2      	mvnmi	r2, r2
 8005338:	43db      	mvnmi	r3, r3
        *dest = (pb_int64_t)(value >> 1);
 800533a:	e9c4 2300 	strd	r2, r3, [r4]
}
 800533e:	b002      	add	sp, #8
 8005340:	bd10      	pop	{r4, pc}
	...

08005344 <pb_dec_svarint>:
{
 8005344:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005346:	460e      	mov	r6, r1
    if (!pb_decode_svarint(stream, &value))
 8005348:	4669      	mov	r1, sp
{
 800534a:	4604      	mov	r4, r0
 800534c:	4615      	mov	r5, r2
    if (!pb_decode_svarint(stream, &value))
 800534e:	f7ff ffe3 	bl	8005318 <pb_decode_svarint>
 8005352:	b138      	cbz	r0, 8005364 <pb_dec_svarint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 8005354:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d105      	bne.n	8005368 <pb_dec_svarint+0x24>
        clamped = *(pb_int64_t*)dest = value;
 800535c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005360:	e9c5 2300 	strd	r2, r3, [r5]
}
 8005364:	b002      	add	sp, #8
 8005366:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 8005368:	2b04      	cmp	r3, #4
 800536a:	d10b      	bne.n	8005384 <pb_dec_svarint+0x40>
        clamped = *(int32_t*)dest = (int32_t)value;
 800536c:	9b00      	ldr	r3, [sp, #0]
 800536e:	602b      	str	r3, [r5, #0]
    if (clamped != value)
 8005370:	e9dd 5100 	ldrd	r5, r1, [sp]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8005374:	17da      	asrs	r2, r3, #31
    if (clamped != value)
 8005376:	4291      	cmp	r1, r2
 8005378:	bf08      	it	eq
 800537a:	429d      	cmpeq	r5, r3
 800537c:	d0f2      	beq.n	8005364 <pb_dec_svarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 800537e:	68e3      	ldr	r3, [r4, #12]
 8005380:	4a0a      	ldr	r2, [pc, #40]	; (80053ac <pb_dec_svarint+0x68>)
 8005382:	e00d      	b.n	80053a0 <pb_dec_svarint+0x5c>
    else if (field->data_size == sizeof(int_least16_t))
 8005384:	2b02      	cmp	r3, #2
 8005386:	d103      	bne.n	8005390 <pb_dec_svarint+0x4c>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 8005388:	f9bd 3000 	ldrsh.w	r3, [sp]
 800538c:	802b      	strh	r3, [r5, #0]
 800538e:	e7ef      	b.n	8005370 <pb_dec_svarint+0x2c>
    else if (field->data_size == sizeof(int_least8_t))
 8005390:	2b01      	cmp	r3, #1
 8005392:	d103      	bne.n	800539c <pb_dec_svarint+0x58>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8005394:	f99d 3000 	ldrsb.w	r3, [sp]
 8005398:	702b      	strb	r3, [r5, #0]
 800539a:	e7e9      	b.n	8005370 <pb_dec_svarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800539c:	68e3      	ldr	r3, [r4, #12]
 800539e:	4a04      	ldr	r2, [pc, #16]	; (80053b0 <pb_dec_svarint+0x6c>)
        PB_RETURN_ERROR(stream, "integer too large");
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bf08      	it	eq
 80053a4:	4613      	moveq	r3, r2
 80053a6:	60e3      	str	r3, [r4, #12]
 80053a8:	2000      	movs	r0, #0
 80053aa:	e7db      	b.n	8005364 <pb_dec_svarint+0x20>
 80053ac:	0800edaf 	.word	0x0800edaf
 80053b0:	0800ed9d 	.word	0x0800ed9d

080053b4 <pb_decode_fixed32>:
{
 80053b4:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 4))
 80053b6:	2204      	movs	r2, #4
{
 80053b8:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 80053ba:	eb0d 0102 	add.w	r1, sp, r2
 80053be:	f7ff fb51 	bl	8004a64 <pb_read>
 80053c2:	b108      	cbz	r0, 80053c8 <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 80053c4:	9b01      	ldr	r3, [sp, #4]
 80053c6:	6023      	str	r3, [r4, #0]
}
 80053c8:	b002      	add	sp, #8
 80053ca:	bd10      	pop	{r4, pc}

080053cc <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 80053cc:	4611      	mov	r1, r2
 80053ce:	f7ff bff1 	b.w	80053b4 <pb_decode_fixed32>

080053d2 <pb_decode_fixed64>:
{
 80053d2:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 80053d4:	2208      	movs	r2, #8
{
 80053d6:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 80053d8:	4669      	mov	r1, sp
 80053da:	f7ff fb43 	bl	8004a64 <pb_read>
 80053de:	b118      	cbz	r0, 80053e8 <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 80053e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053e4:	e9c4 2300 	strd	r2, r3, [r4]
}
 80053e8:	b002      	add	sp, #8
 80053ea:	bd10      	pop	{r4, pc}

080053ec <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 80053ec:	4611      	mov	r1, r2
 80053ee:	f7ff bff0 	b.w	80053d2 <pb_decode_fixed64>

080053f2 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 80053f2:	b510      	push	{r4, lr}
    pb_type_t type = field->type;
 80053f4:	7882      	ldrb	r2, [r0, #2]
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 80053f6:	f012 0330 	ands.w	r3, r2, #48	; 0x30
{
 80053fa:	b086      	sub	sp, #24
    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 80053fc:	d043      	beq.n	8005486 <pb_check_proto3_default_value+0x94>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 80053fe:	2b20      	cmp	r3, #32
    const void *pSize = (const char*)pData + field->size_offset;
 8005400:	f9b0 4005 	ldrsh.w	r4, [r0, #5]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8005404:	d104      	bne.n	8005410 <pb_check_proto3_default_value+0x1e>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 8005406:	5b08      	ldrh	r0, [r1, r4]
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
            return bytes->size == 0;
 8005408:	fab0 f080 	clz	r0, r0
 800540c:	0940      	lsrs	r0, r0, #5
 800540e:	e007      	b.n	8005420 <pb_check_proto3_default_value+0x2e>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8005410:	2b30      	cmp	r3, #48	; 0x30
 8005412:	d0f8      	beq.n	8005406 <pb_check_proto3_default_value+0x14>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 8005414:	2b10      	cmp	r3, #16
 8005416:	d105      	bne.n	8005424 <pb_check_proto3_default_value+0x32>
 8005418:	b124      	cbz	r4, 8005424 <pb_check_proto3_default_value+0x32>
        return *(const bool*)pSize == false;
 800541a:	5d08      	ldrb	r0, [r1, r4]
 800541c:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 8005420:	b006      	add	sp, #24
 8005422:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8005424:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8005428:	d006      	beq.n	8005438 <pb_check_proto3_default_value+0x46>
 800542a:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 800542e:	440b      	add	r3, r1
	    for (i = 0; i < field->data_size; i++)
 8005430:	428b      	cmp	r3, r1
 8005432:	d124      	bne.n	800547e <pb_check_proto3_default_value+0x8c>
	    return true;
 8005434:	2001      	movs	r0, #1
 8005436:	e7f3      	b.n	8005420 <pb_check_proto3_default_value+0x2e>
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8005438:	f002 030f 	and.w	r3, r2, #15
 800543c:	2b05      	cmp	r3, #5
 800543e:	d101      	bne.n	8005444 <pb_check_proto3_default_value+0x52>
            return bytes->size == 0;
 8005440:	8808      	ldrh	r0, [r1, #0]
 8005442:	e7e1      	b.n	8005408 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8005444:	2b06      	cmp	r3, #6
 8005446:	d101      	bne.n	800544c <pb_check_proto3_default_value+0x5a>
            return *(const char*)pData == '\0';
 8005448:	7808      	ldrb	r0, [r1, #0]
 800544a:	e7dd      	b.n	8005408 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800544c:	2b09      	cmp	r3, #9
 800544e:	d102      	bne.n	8005456 <pb_check_proto3_default_value+0x64>
            return field->data_size == 0;
 8005450:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8005454:	e7d8      	b.n	8005408 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8005456:	2b07      	cmp	r3, #7
 8005458:	d1e7      	bne.n	800542a <pb_check_proto3_default_value+0x38>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 800545a:	460a      	mov	r2, r1
 800545c:	f8d0 100b 	ldr.w	r1, [r0, #11]
 8005460:	4668      	mov	r0, sp
 8005462:	f7ff f9ab 	bl	80047bc <pb_field_iter_begin>
 8005466:	2800      	cmp	r0, #0
 8005468:	d0e4      	beq.n	8005434 <pb_check_proto3_default_value+0x42>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 800546a:	9904      	ldr	r1, [sp, #16]
 800546c:	9801      	ldr	r0, [sp, #4]
 800546e:	f7ff ffc0 	bl	80053f2 <pb_check_proto3_default_value>
 8005472:	2800      	cmp	r0, #0
 8005474:	d0d4      	beq.n	8005420 <pb_check_proto3_default_value+0x2e>
                } while (pb_field_iter_next(&iter));
 8005476:	4668      	mov	r0, sp
 8005478:	f7ff f9b2 	bl	80047e0 <pb_field_iter_next>
 800547c:	e7f3      	b.n	8005466 <pb_check_proto3_default_value+0x74>
	        if (p[i] != 0)
 800547e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005482:	2a00      	cmp	r2, #0
 8005484:	d0d4      	beq.n	8005430 <pb_check_proto3_default_value+0x3e>
        return false;
 8005486:	2000      	movs	r0, #0
 8005488:	e7ca      	b.n	8005420 <pb_check_proto3_default_value+0x2e>
	...

0800548c <pb_write>:
{
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 800548e:	6806      	ldr	r6, [r0, #0]
{
 8005490:	4604      	mov	r4, r0
 8005492:	4615      	mov	r5, r2
    if (stream->callback != NULL)
 8005494:	b1ae      	cbz	r6, 80054c2 <pb_write+0x36>
        if (stream->bytes_written + count > stream->max_size)
 8005496:	68c3      	ldr	r3, [r0, #12]
 8005498:	6887      	ldr	r7, [r0, #8]
 800549a:	4413      	add	r3, r2
 800549c:	429f      	cmp	r7, r3
 800549e:	d207      	bcs.n	80054b0 <pb_write+0x24>
            PB_RETURN_ERROR(stream, "stream full");
 80054a0:	6903      	ldr	r3, [r0, #16]
 80054a2:	4a0a      	ldr	r2, [pc, #40]	; (80054cc <pb_write+0x40>)
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	bf08      	it	eq
 80054a8:	4613      	moveq	r3, r2
 80054aa:	6103      	str	r3, [r0, #16]
 80054ac:	2000      	movs	r0, #0
}
 80054ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
 80054b0:	47b0      	blx	r6
 80054b2:	b930      	cbnz	r0, 80054c2 <pb_write+0x36>
            PB_RETURN_ERROR(stream, "io error");
 80054b4:	6923      	ldr	r3, [r4, #16]
 80054b6:	4a06      	ldr	r2, [pc, #24]	; (80054d0 <pb_write+0x44>)
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	bf08      	it	eq
 80054bc:	4613      	moveq	r3, r2
 80054be:	6123      	str	r3, [r4, #16]
 80054c0:	e7f5      	b.n	80054ae <pb_write+0x22>
    stream->bytes_written += count;
 80054c2:	68e2      	ldr	r2, [r4, #12]
 80054c4:	442a      	add	r2, r5
 80054c6:	60e2      	str	r2, [r4, #12]
    return true;
 80054c8:	2001      	movs	r0, #1
 80054ca:	e7f0      	b.n	80054ae <pb_write+0x22>
 80054cc:	0800ee98 	.word	0x0800ee98
 80054d0:	0800ed22 	.word	0x0800ed22

080054d4 <pb_encode_varint>:
bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 80054d4:	2a80      	cmp	r2, #128	; 0x80
{
 80054d6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (value <= 0x7F)
 80054d8:	f173 0100 	sbcs.w	r1, r3, #0
{
 80054dc:	4605      	mov	r5, r0
    if (value <= 0x7F)
 80054de:	d207      	bcs.n	80054f0 <pb_encode_varint+0x1c>
    {
        pb_byte_t v = (pb_byte_t)value;
 80054e0:	f88d 2004 	strb.w	r2, [sp, #4]
        return pb_write(stream, &v, 1);
 80054e4:	a901      	add	r1, sp, #4
 80054e6:	2201      	movs	r2, #1
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 80054e8:	f7ff ffd0 	bl	800548c <pb_write>
}
 80054ec:	b004      	add	sp, #16
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
 80054f0:	ae01      	add	r6, sp, #4
    size_t i = 0;
 80054f2:	2400      	movs	r4, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 80054f4:	f062 017f 	orn	r1, r2, #127	; 0x7f
 80054f8:	f806 1b01 	strb.w	r1, [r6], #1
        value >>= 7;
 80054fc:	09d1      	lsrs	r1, r2, #7
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 80054fe:	b2d0      	uxtb	r0, r2
        value >>= 7;
 8005500:	ea41 6243 	orr.w	r2, r1, r3, lsl #25
 8005504:	09db      	lsrs	r3, r3, #7
    while (value)
 8005506:	ea52 0c03 	orrs.w	ip, r2, r3
 800550a:	4621      	mov	r1, r4
        i++;
 800550c:	f104 0401 	add.w	r4, r4, #1
    while (value)
 8005510:	d1f0      	bne.n	80054f4 <pb_encode_varint+0x20>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8005512:	f101 0310 	add.w	r3, r1, #16
 8005516:	446b      	add	r3, sp
 8005518:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800551c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    return pb_write(stream, buffer, i);
 8005520:	a901      	add	r1, sp, #4
 8005522:	4622      	mov	r2, r4
 8005524:	4628      	mov	r0, r5
 8005526:	e7df      	b.n	80054e8 <pb_encode_varint+0x14>

08005528 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
 8005528:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d104      	bne.n	800553a <pb_enc_uvarint+0x12>
        value = *(const uint_least8_t*)src;
 8005530:	7811      	ldrb	r1, [r2, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
    else if (field->data_size == sizeof(uint32_t))
        value = *(const uint32_t*)src;
 8005532:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 8005534:	460a      	mov	r2, r1
 8005536:	f7ff bfcd 	b.w	80054d4 <pb_encode_varint>
    else if (field->data_size == sizeof(uint_least16_t))
 800553a:	2b02      	cmp	r3, #2
 800553c:	d101      	bne.n	8005542 <pb_enc_uvarint+0x1a>
        value = *(const uint_least16_t*)src;
 800553e:	8811      	ldrh	r1, [r2, #0]
 8005540:	e7f7      	b.n	8005532 <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(uint32_t))
 8005542:	2b04      	cmp	r3, #4
 8005544:	d101      	bne.n	800554a <pb_enc_uvarint+0x22>
        value = *(const uint32_t*)src;
 8005546:	6811      	ldr	r1, [r2, #0]
 8005548:	e7f3      	b.n	8005532 <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(pb_uint64_t))
 800554a:	2b08      	cmp	r3, #8
 800554c:	d102      	bne.n	8005554 <pb_enc_uvarint+0x2c>
        value = *(const pb_uint64_t*)src;
 800554e:	e9d2 1300 	ldrd	r1, r3, [r2]
 8005552:	e7ef      	b.n	8005534 <pb_enc_uvarint+0xc>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005554:	6903      	ldr	r3, [r0, #16]
 8005556:	4a03      	ldr	r2, [pc, #12]	; (8005564 <pb_enc_uvarint+0x3c>)
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf08      	it	eq
 800555c:	4613      	moveq	r3, r2
 800555e:	6103      	str	r3, [r0, #16]
}
 8005560:	2000      	movs	r0, #0
 8005562:	4770      	bx	lr
 8005564:	0800ed9d 	.word	0x0800ed9d

08005568 <pb_enc_varint>:
{
 8005568:	4613      	mov	r3, r2
    if (field->data_size == sizeof(int_least8_t))
 800556a:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 800556e:	2a01      	cmp	r2, #1
 8005570:	d104      	bne.n	800557c <pb_enc_varint+0x14>
        value = *(const int_least8_t*)src;
 8005572:	f993 2000 	ldrsb.w	r2, [r3]
        value = *(const int32_t*)src;
 8005576:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 8005578:	f7ff bfac 	b.w	80054d4 <pb_encode_varint>
    else if (field->data_size == sizeof(int_least16_t))
 800557c:	2a02      	cmp	r2, #2
 800557e:	d102      	bne.n	8005586 <pb_enc_varint+0x1e>
        value = *(const int_least16_t*)src;
 8005580:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005584:	e7f7      	b.n	8005576 <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(int32_t))
 8005586:	2a04      	cmp	r2, #4
 8005588:	d101      	bne.n	800558e <pb_enc_varint+0x26>
        value = *(const int32_t*)src;
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	e7f3      	b.n	8005576 <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 800558e:	2a08      	cmp	r2, #8
 8005590:	d102      	bne.n	8005598 <pb_enc_varint+0x30>
        value = *(const pb_int64_t*)src;
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	e7ef      	b.n	8005578 <pb_enc_varint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005598:	6903      	ldr	r3, [r0, #16]
 800559a:	4a03      	ldr	r2, [pc, #12]	; (80055a8 <pb_enc_varint+0x40>)
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf08      	it	eq
 80055a0:	4613      	moveq	r3, r2
 80055a2:	6103      	str	r3, [r0, #16]
}
 80055a4:	2000      	movs	r0, #0
 80055a6:	4770      	bx	lr
 80055a8:	0800ed9d 	.word	0x0800ed9d

080055ac <pb_encode_svarint>:
        zigzagged = ~((pb_uint64_t)value << 1);
 80055ac:	1892      	adds	r2, r2, r2
{
 80055ae:	b410      	push	{r4}
 80055b0:	461c      	mov	r4, r3
        zigzagged = ~((pb_uint64_t)value << 1);
 80055b2:	eb43 0103 	adc.w	r1, r3, r3
    if (value < 0)
 80055b6:	2c00      	cmp	r4, #0
        zigzagged = ~((pb_uint64_t)value << 1);
 80055b8:	460b      	mov	r3, r1
}
 80055ba:	f85d 4b04 	ldr.w	r4, [sp], #4
        zigzagged = ~((pb_uint64_t)value << 1);
 80055be:	bfbc      	itt	lt
 80055c0:	43d2      	mvnlt	r2, r2
 80055c2:	43cb      	mvnlt	r3, r1
    return pb_encode_varint(stream, zigzagged);
 80055c4:	f7ff bf86 	b.w	80054d4 <pb_encode_varint>

080055c8 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80055c8:	4613      	mov	r3, r2
    pb_int64_t value = 0;
    
    if (field->data_size == sizeof(int_least8_t))
 80055ca:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 80055ce:	2a01      	cmp	r2, #1
 80055d0:	d104      	bne.n	80055dc <pb_enc_svarint+0x14>
        value = *(const int_least8_t*)src;
 80055d2:	f993 2000 	ldrsb.w	r2, [r3]
    else if (field->data_size == sizeof(int_least16_t))
        value = *(const int_least16_t*)src;
    else if (field->data_size == sizeof(int32_t))
        value = *(const int32_t*)src;
 80055d6:	17d3      	asrs	r3, r2, #31
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_svarint(stream, value);
 80055d8:	f7ff bfe8 	b.w	80055ac <pb_encode_svarint>
    else if (field->data_size == sizeof(int_least16_t))
 80055dc:	2a02      	cmp	r2, #2
 80055de:	d102      	bne.n	80055e6 <pb_enc_svarint+0x1e>
        value = *(const int_least16_t*)src;
 80055e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80055e4:	e7f7      	b.n	80055d6 <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(int32_t))
 80055e6:	2a04      	cmp	r2, #4
 80055e8:	d101      	bne.n	80055ee <pb_enc_svarint+0x26>
        value = *(const int32_t*)src;
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	e7f3      	b.n	80055d6 <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 80055ee:	2a08      	cmp	r2, #8
 80055f0:	d102      	bne.n	80055f8 <pb_enc_svarint+0x30>
        value = *(const pb_int64_t*)src;
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	e7ef      	b.n	80055d8 <pb_enc_svarint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 80055f8:	6903      	ldr	r3, [r0, #16]
 80055fa:	4a03      	ldr	r2, [pc, #12]	; (8005608 <pb_enc_svarint+0x40>)
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bf08      	it	eq
 8005600:	4613      	moveq	r3, r2
 8005602:	6103      	str	r3, [r0, #16]
}
 8005604:	2000      	movs	r0, #0
 8005606:	4770      	bx	lr
 8005608:	0800ed9d 	.word	0x0800ed9d

0800560c <pb_encode_fixed32>:
{
 800560c:	b507      	push	{r0, r1, r2, lr}
    uint32_t val = *(const uint32_t*)value;
 800560e:	680b      	ldr	r3, [r1, #0]
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8005610:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 8005614:	0a1a      	lsrs	r2, r3, #8
 8005616:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800561a:	0c1a      	lsrs	r2, r3, #16
 800561c:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 4);
 8005620:	2204      	movs	r2, #4
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 8005622:	0e1b      	lsrs	r3, r3, #24
    return pb_write(stream, bytes, 4);
 8005624:	eb0d 0102 	add.w	r1, sp, r2
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 8005628:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 4);
 800562c:	f7ff ff2e 	bl	800548c <pb_write>
}
 8005630:	b003      	add	sp, #12
 8005632:	f85d fb04 	ldr.w	pc, [sp], #4

08005636 <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 8005636:	4611      	mov	r1, r2
 8005638:	f7ff bfe8 	b.w	800560c <pb_encode_fixed32>

0800563c <pb_encode_fixed64>:
{
 800563c:	b507      	push	{r0, r1, r2, lr}
    uint64_t val = *(const uint64_t*)value;
 800563e:	e9d1 2300 	ldrd	r2, r3, [r1]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 8005642:	0a11      	lsrs	r1, r2, #8
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8005644:	f88d 2000 	strb.w	r2, [sp]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 8005648:	f88d 1001 	strb.w	r1, [sp, #1]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800564c:	0c11      	lsrs	r1, r2, #16
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 800564e:	0e12      	lsrs	r2, r2, #24
 8005650:	f88d 2003 	strb.w	r2, [sp, #3]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 8005654:	0a1a      	lsrs	r2, r3, #8
 8005656:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 800565a:	0c1a      	lsrs	r2, r3, #16
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 800565c:	f88d 1002 	strb.w	r1, [sp, #2]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 8005660:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8005664:	f88d 2006 	strb.w	r2, [sp, #6]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8005668:	0e1b      	lsrs	r3, r3, #24
    return pb_write(stream, bytes, 8);
 800566a:	2208      	movs	r2, #8
 800566c:	4669      	mov	r1, sp
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800566e:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 8005672:	f7ff ff0b 	bl	800548c <pb_write>
}
 8005676:	b003      	add	sp, #12
 8005678:	f85d fb04 	ldr.w	pc, [sp], #4

0800567c <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 800567c:	4611      	mov	r1, r2
 800567e:	f7ff bfdd 	b.w	800563c <pb_encode_fixed64>

08005682 <pb_encode_tag>:
{
 8005682:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
 8005684:	0f5b      	lsrs	r3, r3, #29
 8005686:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 800568a:	f7ff bf23 	b.w	80054d4 <pb_encode_varint>
	...

08005690 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 8005690:	788a      	ldrb	r2, [r1, #2]
 8005692:	f002 020f 	and.w	r2, r2, #15
{
 8005696:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
 8005698:	2a09      	cmp	r2, #9
 800569a:	d810      	bhi.n	80056be <pb_encode_tag_for_field+0x2e>
 800569c:	e8df f002 	tbb	[pc, r2]
 80056a0:	050b0b0b 	.word	0x050b0b0b
 80056a4:	0909090d 	.word	0x0909090d
 80056a8:	090f      	.short	0x090f
 80056aa:	2105      	movs	r1, #5
    return pb_encode_tag(stream, wiretype, field->tag);
 80056ac:	881a      	ldrh	r2, [r3, #0]
 80056ae:	f7ff bfe8 	b.w	8005682 <pb_encode_tag>
            wiretype = PB_WT_STRING;
 80056b2:	2102      	movs	r1, #2
            break;
 80056b4:	e7fa      	b.n	80056ac <pb_encode_tag_for_field+0x1c>
            wiretype = PB_WT_VARINT;
 80056b6:	2100      	movs	r1, #0
 80056b8:	e7f8      	b.n	80056ac <pb_encode_tag_for_field+0x1c>
            wiretype = PB_WT_64BIT;
 80056ba:	2101      	movs	r1, #1
 80056bc:	e7f6      	b.n	80056ac <pb_encode_tag_for_field+0x1c>
            PB_RETURN_ERROR(stream, "invalid field type");
 80056be:	6903      	ldr	r3, [r0, #16]
 80056c0:	4a03      	ldr	r2, [pc, #12]	; (80056d0 <pb_encode_tag_for_field+0x40>)
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	bf08      	it	eq
 80056c6:	4613      	moveq	r3, r2
 80056c8:	6103      	str	r3, [r0, #16]
}
 80056ca:	2000      	movs	r0, #0
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	0800edfa 	.word	0x0800edfa

080056d4 <encode_field>:
{
 80056d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d8:	4616      	mov	r6, r2
    switch (PB_ATYPE(field->type))
 80056da:	788a      	ldrb	r2, [r1, #2]
 80056dc:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
 80056e0:	2b40      	cmp	r3, #64	; 0x40
{
 80056e2:	b086      	sub	sp, #24
 80056e4:	4605      	mov	r5, r0
 80056e6:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 80056e8:	f000 80dd 	beq.w	80058a6 <encode_field+0x1d2>
 80056ec:	0653      	lsls	r3, r2, #25
 80056ee:	d41b      	bmi.n	8005728 <encode_field+0x54>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 80056f0:	4b75      	ldr	r3, [pc, #468]	; (80058c8 <encode_field+0x1f4>)
 80056f2:	f002 010f 	and.w	r1, r2, #15
 80056f6:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    if (field->size_offset)
 80056fa:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
 80056fe:	b1b3      	cbz	r3, 800572e <encode_field+0x5a>
        pSize = (const char*)pData + field->size_offset;
 8005700:	4433      	add	r3, r6
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005702:	78a2      	ldrb	r2, [r4, #2]
 8005704:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 8005708:	2880      	cmp	r0, #128	; 0x80
 800570a:	d105      	bne.n	8005718 <encode_field+0x44>
        pData = *(const void* const*)pData;
 800570c:	6836      	ldr	r6, [r6, #0]
        implicit_has = (pData != NULL);
 800570e:	1e31      	subs	r1, r6, #0
 8005710:	bf18      	it	ne
 8005712:	2101      	movne	r1, #1
 8005714:	f88d 1003 	strb.w	r1, [sp, #3]
    switch (PB_HTYPE(field->type))
 8005718:	f002 0130 	and.w	r1, r2, #48	; 0x30
 800571c:	2920      	cmp	r1, #32
 800571e:	d03e      	beq.n	800579e <encode_field+0xca>
 8005720:	d818      	bhi.n	8005754 <encode_field+0x80>
 8005722:	b361      	cbz	r1, 800577e <encode_field+0xaa>
 8005724:	2910      	cmp	r1, #16
 8005726:	d033      	beq.n	8005790 <encode_field+0xbc>
            PB_RETURN_ERROR(stream, "invalid field type");
 8005728:	692b      	ldr	r3, [r5, #16]
 800572a:	4a68      	ldr	r2, [pc, #416]	; (80058cc <encode_field+0x1f8>)
 800572c:	e02b      	b.n	8005786 <encode_field+0xb2>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800572e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005732:	2a10      	cmp	r2, #16
 8005734:	d10a      	bne.n	800574c <encode_field+0x78>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 8005736:	4631      	mov	r1, r6
 8005738:	4620      	mov	r0, r4
 800573a:	f7ff fe5a 	bl	80053f2 <pb_check_proto3_default_value>
 800573e:	f080 0001 	eor.w	r0, r0, #1
 8005742:	f88d 0003 	strb.w	r0, [sp, #3]
    const void *pSize = &implicit_has;
 8005746:	f10d 0303 	add.w	r3, sp, #3
 800574a:	e7da      	b.n	8005702 <encode_field+0x2e>
        implicit_has = true;
 800574c:	2301      	movs	r3, #1
 800574e:	f88d 3003 	strb.w	r3, [sp, #3]
 8005752:	e7f8      	b.n	8005746 <encode_field+0x72>
    switch (PB_HTYPE(field->type))
 8005754:	2930      	cmp	r1, #48	; 0x30
 8005756:	d1e7      	bne.n	8005728 <encode_field+0x54>
            if (*(const pb_size_t*)pSize == field->tag)
 8005758:	881a      	ldrh	r2, [r3, #0]
 800575a:	8823      	ldrh	r3, [r4, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d11a      	bne.n	8005796 <encode_field+0xc2>
                if (!pb_encode_tag_for_field(stream, field))
 8005760:	4621      	mov	r1, r4
 8005762:	4628      	mov	r0, r5
 8005764:	f7ff ff94 	bl	8005690 <pb_encode_tag_for_field>
 8005768:	2800      	cmp	r0, #0
 800576a:	f000 8090 	beq.w	800588e <encode_field+0x1ba>
                if (!func(stream, field, pData))
 800576e:	4632      	mov	r2, r6
 8005770:	4621      	mov	r1, r4
 8005772:	4628      	mov	r0, r5
 8005774:	463b      	mov	r3, r7
}
 8005776:	b006      	add	sp, #24
 8005778:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                if (!func(stream, field, pData))
 800577c:	4718      	bx	r3
            if (!pData)
 800577e:	2e00      	cmp	r6, #0
 8005780:	d1ee      	bne.n	8005760 <encode_field+0x8c>
                PB_RETURN_ERROR(stream, "missing required field");
 8005782:	692b      	ldr	r3, [r5, #16]
 8005784:	4a52      	ldr	r2, [pc, #328]	; (80058d0 <encode_field+0x1fc>)
            PB_RETURN_ERROR(stream, "invalid field type");
 8005786:	2b00      	cmp	r3, #0
 8005788:	bf08      	it	eq
 800578a:	4613      	moveq	r3, r2
 800578c:	612b      	str	r3, [r5, #16]
 800578e:	e07e      	b.n	800588e <encode_field+0x1ba>
            if (*(const bool*)pSize)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e4      	bne.n	8005760 <encode_field+0x8c>
    return true;
 8005796:	2001      	movs	r0, #1
}
 8005798:	b006      	add	sp, #24
 800579a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (field->size_offset != 0) {
 800579e:	f9b4 1005 	ldrsh.w	r1, [r4, #5]
 80057a2:	b169      	cbz	r1, 80057c0 <encode_field+0xec>
                count = *(const pb_size_t*)pSize;
 80057a4:	f8b3 8000 	ldrh.w	r8, [r3]
    if (count == 0)
 80057a8:	f1b8 0f00 	cmp.w	r8, #0
 80057ac:	d0f3      	beq.n	8005796 <encode_field+0xc2>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 80057ae:	2880      	cmp	r0, #128	; 0x80
 80057b0:	d009      	beq.n	80057c6 <encode_field+0xf2>
 80057b2:	f8b4 3009 	ldrh.w	r3, [r4, #9]
 80057b6:	4598      	cmp	r8, r3
 80057b8:	d905      	bls.n	80057c6 <encode_field+0xf2>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 80057ba:	692b      	ldr	r3, [r5, #16]
 80057bc:	4a45      	ldr	r2, [pc, #276]	; (80058d4 <encode_field+0x200>)
 80057be:	e7e2      	b.n	8005786 <encode_field+0xb2>
                count = field->array_size;
 80057c0:	f8b4 8009 	ldrh.w	r8, [r4, #9]
 80057c4:	e7f0      	b.n	80057a8 <encode_field+0xd4>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 80057c6:	f002 020f 	and.w	r2, r2, #15
 80057ca:	2a04      	cmp	r2, #4
 80057cc:	d849      	bhi.n	8005862 <encode_field+0x18e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 80057ce:	8822      	ldrh	r2, [r4, #0]
 80057d0:	2102      	movs	r1, #2
 80057d2:	4628      	mov	r0, r5
 80057d4:	f7ff ff55 	bl	8005682 <pb_encode_tag>
 80057d8:	2800      	cmp	r0, #0
 80057da:	d058      	beq.n	800588e <encode_field+0x1ba>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 80057dc:	78a3      	ldrb	r3, [r4, #2]
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d111      	bne.n	800580a <encode_field+0x136>
            size = 4 * count;
 80057e6:	ea4f 0988 	mov.w	r9, r8, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80057ea:	464a      	mov	r2, r9
 80057ec:	2300      	movs	r3, #0
 80057ee:	4628      	mov	r0, r5
 80057f0:	f7ff fe70 	bl	80054d4 <pb_encode_varint>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d04a      	beq.n	800588e <encode_field+0x1ba>
        if (stream->callback == NULL)
 80057f8:	6829      	ldr	r1, [r5, #0]
 80057fa:	bb19      	cbnz	r1, 8005844 <encode_field+0x170>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 80057fc:	464a      	mov	r2, r9
 80057fe:	4628      	mov	r0, r5
}
 8005800:	b006      	add	sp, #24
 8005802:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8005806:	f7ff be41 	b.w	800548c <pb_write>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800580a:	2b04      	cmp	r3, #4
 800580c:	d102      	bne.n	8005814 <encode_field+0x140>
            size = 8 * count;
 800580e:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8005812:	e7ea      	b.n	80057ea <encode_field+0x116>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8005814:	2214      	movs	r2, #20
 8005816:	2100      	movs	r1, #0
 8005818:	a801      	add	r0, sp, #4
 800581a:	f003 ff73 	bl	8009704 <memset>
 800581e:	46b2      	mov	sl, r6
            for (i = 0; i < count; i++)
 8005820:	f04f 0900 	mov.w	r9, #0
                if (!func(&sizestream, field, p))
 8005824:	4652      	mov	r2, sl
 8005826:	4621      	mov	r1, r4
 8005828:	a801      	add	r0, sp, #4
 800582a:	47b8      	blx	r7
 800582c:	2800      	cmp	r0, #0
 800582e:	d0b3      	beq.n	8005798 <encode_field+0xc4>
                p = (const char*)p + field->data_size;
 8005830:	f8b4 3007 	ldrh.w	r3, [r4, #7]
            for (i = 0; i < count; i++)
 8005834:	f109 0901 	add.w	r9, r9, #1
 8005838:	45c8      	cmp	r8, r9
                p = (const char*)p + field->data_size;
 800583a:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 800583c:	d8f2      	bhi.n	8005824 <encode_field+0x150>
            size = sizestream.bytes_written;
 800583e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8005842:	e7d2      	b.n	80057ea <encode_field+0x116>
        for (i = 0; i < count; i++)
 8005844:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 8005848:	4632      	mov	r2, r6
 800584a:	4621      	mov	r1, r4
 800584c:	4628      	mov	r0, r5
 800584e:	47b8      	blx	r7
 8005850:	b1e8      	cbz	r0, 800588e <encode_field+0x1ba>
            p = (const char*)p + field->data_size;
 8005852:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 8005856:	f109 0901 	add.w	r9, r9, #1
 800585a:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 800585c:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 800585e:	d8f3      	bhi.n	8005848 <encode_field+0x174>
 8005860:	e799      	b.n	8005796 <encode_field+0xc2>
        for (i = 0; i < count; i++)
 8005862:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 8005866:	4621      	mov	r1, r4
 8005868:	4628      	mov	r0, r5
 800586a:	f7ff ff11 	bl	8005690 <pb_encode_tag_for_field>
 800586e:	b170      	cbz	r0, 800588e <encode_field+0x1ba>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8005870:	78a3      	ldrb	r3, [r4, #2]
 8005872:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8005876:	2a80      	cmp	r2, #128	; 0x80
 8005878:	d113      	bne.n	80058a2 <encode_field+0x1ce>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8005880:	2b01      	cmp	r3, #1
 8005882:	d80e      	bhi.n	80058a2 <encode_field+0x1ce>
                if (!func(stream, field, *(const void* const*)p))
 8005884:	6832      	ldr	r2, [r6, #0]
                if (!func(stream, field, p))
 8005886:	4621      	mov	r1, r4
 8005888:	4628      	mov	r0, r5
 800588a:	47b8      	blx	r7
 800588c:	b908      	cbnz	r0, 8005892 <encode_field+0x1be>
            PB_RETURN_ERROR(stream, "invalid field type");
 800588e:	2000      	movs	r0, #0
 8005890:	e782      	b.n	8005798 <encode_field+0xc4>
            p = (const char*)p + field->data_size;
 8005892:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 8005896:	f109 0901 	add.w	r9, r9, #1
 800589a:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 800589c:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 800589e:	d8e2      	bhi.n	8005866 <encode_field+0x192>
 80058a0:	e779      	b.n	8005796 <encode_field+0xc2>
                if (!func(stream, field, p))
 80058a2:	4632      	mov	r2, r6
 80058a4:	e7ef      	b.n	8005886 <encode_field+0x1b2>
    if (callback->funcs.encode != NULL)
 80058a6:	6833      	ldr	r3, [r6, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f43f af74 	beq.w	8005796 <encode_field+0xc2>
        if (!callback->funcs.encode(stream, field, arg))
 80058ae:	1d32      	adds	r2, r6, #4
 80058b0:	4798      	blx	r3
 80058b2:	2800      	cmp	r0, #0
 80058b4:	f47f af6f 	bne.w	8005796 <encode_field+0xc2>
            PB_RETURN_ERROR(stream, "callback error");
 80058b8:	692b      	ldr	r3, [r5, #16]
 80058ba:	4a07      	ldr	r2, [pc, #28]	; (80058d8 <encode_field+0x204>)
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf08      	it	eq
 80058c0:	4613      	moveq	r3, r2
 80058c2:	612b      	str	r3, [r5, #16]
 80058c4:	e768      	b.n	8005798 <encode_field+0xc4>
 80058c6:	bf00      	nop
 80058c8:	0800eef4 	.word	0x0800eef4
 80058cc:	0800edfa 	.word	0x0800edfa
 80058d0:	0800ee3e 	.word	0x0800ee3e
 80058d4:	0800eea4 	.word	0x0800eea4
 80058d8:	0800eebc 	.word	0x0800eebc

080058dc <pb_encode>:
{
 80058dc:	b530      	push	{r4, r5, lr}
 80058de:	b087      	sub	sp, #28
 80058e0:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 80058e2:	4668      	mov	r0, sp
 80058e4:	f7fe ff6a 	bl	80047bc <pb_field_iter_begin>
 80058e8:	b910      	cbnz	r0, 80058f0 <pb_encode+0x14>
        return true; /* Empty message type */
 80058ea:	2001      	movs	r0, #1
}
 80058ec:	b007      	add	sp, #28
 80058ee:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 80058f0:	9901      	ldr	r1, [sp, #4]
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 80058f2:	9a04      	ldr	r2, [sp, #16]
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 80058f4:	788b      	ldrb	r3, [r1, #2]
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	2b08      	cmp	r3, #8
 80058fc:	d11c      	bne.n	8005938 <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 80058fe:	6814      	ldr	r4, [r2, #0]
    while (extension)
 8005900:	b91c      	cbnz	r4, 800590a <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 8005902:	4668      	mov	r0, sp
 8005904:	f7fe ff6c 	bl	80047e0 <pb_field_iter_next>
 8005908:	e7ee      	b.n	80058e8 <pb_encode+0xc>
        if (extension->type->encode)
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	b12a      	cbz	r2, 800591c <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 8005910:	4621      	mov	r1, r4
 8005912:	4628      	mov	r0, r5
 8005914:	4790      	blx	r2
        if (!status)
 8005916:	b968      	cbnz	r0, 8005934 <pb_encode+0x58>
                return false;
 8005918:	2000      	movs	r0, #0
 800591a:	e7e7      	b.n	80058ec <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800591c:	6899      	ldr	r1, [r3, #8]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800591e:	788b      	ldrb	r3, [r1, #2]
 8005920:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005924:	2b80      	cmp	r3, #128	; 0x80
        return encode_field(stream, field, extension->dest);
 8005926:	bf14      	ite	ne
 8005928:	6862      	ldrne	r2, [r4, #4]
        return encode_field(stream, field, &extension->dest);
 800592a:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 800592c:	4628      	mov	r0, r5
 800592e:	f7ff fed1 	bl	80056d4 <encode_field>
 8005932:	e7f0      	b.n	8005916 <pb_encode+0x3a>
        extension = extension->next;
 8005934:	68a4      	ldr	r4, [r4, #8]
 8005936:	e7e3      	b.n	8005900 <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 8005938:	4628      	mov	r0, r5
 800593a:	f7ff fecb 	bl	80056d4 <encode_field>
 800593e:	2800      	cmp	r0, #0
 8005940:	d1df      	bne.n	8005902 <pb_encode+0x26>
 8005942:	e7e9      	b.n	8005918 <pb_encode+0x3c>

08005944 <pb_encode_string>:
{
 8005944:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005946:	2300      	movs	r3, #0
{
 8005948:	4604      	mov	r4, r0
 800594a:	9101      	str	r1, [sp, #4]
 800594c:	4615      	mov	r5, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800594e:	f7ff fdc1 	bl	80054d4 <pb_encode_varint>
 8005952:	b138      	cbz	r0, 8005964 <pb_encode_string+0x20>
    return pb_write(stream, buffer, size);
 8005954:	9901      	ldr	r1, [sp, #4]
 8005956:	462a      	mov	r2, r5
 8005958:	4620      	mov	r0, r4
}
 800595a:	b003      	add	sp, #12
 800595c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return pb_write(stream, buffer, size);
 8005960:	f7ff bd94 	b.w	800548c <pb_write>
}
 8005964:	b003      	add	sp, #12
 8005966:	bd30      	pop	{r4, r5, pc}

08005968 <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8005968:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 800596a:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 800596e:	4619      	mov	r1, r3
 8005970:	f7ff bfe8 	b.w	8005944 <pb_encode_string>

08005974 <pb_enc_string>:
{
 8005974:	b410      	push	{r4}
    size_t max_size = field->data_size;
 8005976:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800597a:	7889      	ldrb	r1, [r1, #2]
 800597c:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    size_t max_size = field->data_size;
 8005980:	2980      	cmp	r1, #128	; 0x80
 8005982:	bf08      	it	eq
 8005984:	f04f 33ff 	moveq.w	r3, #4294967295
    if (src == NULL)
 8005988:	4611      	mov	r1, r2
 800598a:	b122      	cbz	r2, 8005996 <pb_enc_string+0x22>
    size_t size = 0;
 800598c:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 800598e:	429a      	cmp	r2, r3
 8005990:	d001      	beq.n	8005996 <pb_enc_string+0x22>
 8005992:	5c8c      	ldrb	r4, [r1, r2]
 8005994:	b91c      	cbnz	r4, 800599e <pb_enc_string+0x2a>
}
 8005996:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 800599a:	f7ff bfd3 	b.w	8005944 <pb_encode_string>
            size++;
 800599e:	3201      	adds	r2, #1
            p++;
 80059a0:	e7f5      	b.n	800598e <pb_enc_string+0x1a>
	...

080059a4 <pb_enc_bytes>:
{
 80059a4:	b470      	push	{r4, r5, r6}
 80059a6:	4603      	mov	r3, r0
 80059a8:	460c      	mov	r4, r1
    if (src == NULL)
 80059aa:	4611      	mov	r1, r2
 80059ac:	b912      	cbnz	r2, 80059b4 <pb_enc_bytes+0x10>
}
 80059ae:	bc70      	pop	{r4, r5, r6}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 80059b0:	f7ff bfc8 	b.w	8005944 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80059b4:	78a0      	ldrb	r0, [r4, #2]
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 80059b6:	8812      	ldrh	r2, [r2, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80059b8:	f010 00c0 	ands.w	r0, r0, #192	; 0xc0
 80059bc:	d104      	bne.n	80059c8 <pb_enc_bytes+0x24>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 80059be:	f8b4 6007 	ldrh.w	r6, [r4, #7]
 80059c2:	1c95      	adds	r5, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80059c4:	42b5      	cmp	r5, r6
 80059c6:	d802      	bhi.n	80059ce <pb_enc_bytes+0x2a>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 80059c8:	3102      	adds	r1, #2
 80059ca:	4618      	mov	r0, r3
 80059cc:	e7ef      	b.n	80059ae <pb_enc_bytes+0xa>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	4903      	ldr	r1, [pc, #12]	; (80059e0 <pb_enc_bytes+0x3c>)
 80059d2:	2a00      	cmp	r2, #0
 80059d4:	bf08      	it	eq
 80059d6:	460a      	moveq	r2, r1
}
 80059d8:	bc70      	pop	{r4, r5, r6}
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 80059da:	611a      	str	r2, [r3, #16]
}
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	0800eecb 	.word	0x0800eecb

080059e4 <pb_encode_submessage>:
{
 80059e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e8:	b086      	sub	sp, #24
 80059ea:	460f      	mov	r7, r1
 80059ec:	4690      	mov	r8, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 80059ee:	2100      	movs	r1, #0
 80059f0:	2214      	movs	r2, #20
{
 80059f2:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 80059f4:	a801      	add	r0, sp, #4
 80059f6:	f003 fe85 	bl	8009704 <memset>
    if (!pb_encode(&substream, fields, src_struct))
 80059fa:	4642      	mov	r2, r8
 80059fc:	4639      	mov	r1, r7
 80059fe:	a801      	add	r0, sp, #4
 8005a00:	f7ff ff6c 	bl	80058dc <pb_encode>
 8005a04:	b910      	cbnz	r0, 8005a0c <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
 8005a06:	9b05      	ldr	r3, [sp, #20]
    stream->errmsg = substream.errmsg;
 8005a08:	6123      	str	r3, [r4, #16]
 8005a0a:	e00d      	b.n	8005a28 <pb_encode_submessage+0x44>
    size = substream.bytes_written;
 8005a0c:	9e04      	ldr	r6, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005a0e:	2500      	movs	r5, #0
 8005a10:	4632      	mov	r2, r6
 8005a12:	462b      	mov	r3, r5
 8005a14:	4620      	mov	r0, r4
 8005a16:	f7ff fd5d 	bl	80054d4 <pb_encode_varint>
 8005a1a:	b128      	cbz	r0, 8005a28 <pb_encode_submessage+0x44>
    if (stream->callback == NULL)
 8005a1c:	6821      	ldr	r1, [r4, #0]
 8005a1e:	b931      	cbnz	r1, 8005a2e <pb_encode_submessage+0x4a>
        return pb_write(stream, NULL, size); /* Just sizing */
 8005a20:	4632      	mov	r2, r6
 8005a22:	4620      	mov	r0, r4
 8005a24:	f7ff fd32 	bl	800548c <pb_write>
}
 8005a28:	b006      	add	sp, #24
 8005a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->bytes_written + size > stream->max_size)
 8005a2e:	68e3      	ldr	r3, [r4, #12]
 8005a30:	68a2      	ldr	r2, [r4, #8]
 8005a32:	4433      	add	r3, r6
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d907      	bls.n	8005a48 <pb_encode_submessage+0x64>
        PB_RETURN_ERROR(stream, "stream full");
 8005a38:	6923      	ldr	r3, [r4, #16]
 8005a3a:	4a0e      	ldr	r2, [pc, #56]	; (8005a74 <pb_encode_submessage+0x90>)
        PB_RETURN_ERROR(stream, "submsg size changed");
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bf08      	it	eq
 8005a40:	4613      	moveq	r3, r2
 8005a42:	6123      	str	r3, [r4, #16]
 8005a44:	4628      	mov	r0, r5
 8005a46:	e7ef      	b.n	8005a28 <pb_encode_submessage+0x44>
    substream.state = stream->state;
 8005a48:	6863      	ldr	r3, [r4, #4]
    substream.callback = stream->callback;
 8005a4a:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	4639      	mov	r1, r7
 8005a50:	a801      	add	r0, sp, #4
    substream.max_size = size;
 8005a52:	e9cd 3602 	strd	r3, r6, [sp, #8]
    substream.errmsg = NULL;
 8005a56:	e9cd 5504 	strd	r5, r5, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
 8005a5a:	f7ff ff3f 	bl	80058dc <pb_encode>
    stream->bytes_written += substream.bytes_written;
 8005a5e:	9a04      	ldr	r2, [sp, #16]
 8005a60:	68e3      	ldr	r3, [r4, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	60e3      	str	r3, [r4, #12]
    if (substream.bytes_written != size)
 8005a66:	42b2      	cmp	r2, r6
    stream->state = substream.state;
 8005a68:	9b02      	ldr	r3, [sp, #8]
 8005a6a:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
 8005a6c:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
 8005a6e:	d0cb      	beq.n	8005a08 <pb_encode_submessage+0x24>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8005a70:	4a01      	ldr	r2, [pc, #4]	; (8005a78 <pb_encode_submessage+0x94>)
 8005a72:	e7e3      	b.n	8005a3c <pb_encode_submessage+0x58>
 8005a74:	0800ee98 	.word	0x0800ee98
 8005a78:	0800eedf 	.word	0x0800eedf

08005a7c <pb_enc_submessage>:
    if (field->ptr == NULL)
 8005a7c:	f8d1 100b 	ldr.w	r1, [r1, #11]
{
 8005a80:	4603      	mov	r3, r0
    if (field->ptr == NULL)
 8005a82:	b109      	cbz	r1, 8005a88 <pb_enc_submessage+0xc>
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 8005a84:	f7ff bfae 	b.w	80059e4 <pb_encode_submessage>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8005a88:	6902      	ldr	r2, [r0, #16]
 8005a8a:	4803      	ldr	r0, [pc, #12]	; (8005a98 <pb_enc_submessage+0x1c>)
 8005a8c:	2a00      	cmp	r2, #0
 8005a8e:	bf08      	it	eq
 8005a90:	4602      	moveq	r2, r0
 8005a92:	611a      	str	r2, [r3, #16]
}
 8005a94:	4608      	mov	r0, r1
 8005a96:	4770      	bx	lr
 8005a98:	0800ee55 	.word	0x0800ee55

08005a9c <_platform_observer_node_exec_cb>:
 8005a9c:	2a00      	cmp	r2, #0
 8005a9e:	d063      	beq.n	8005b68 <_platform_observer_node_exec_cb+0xcc>
 8005aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005aa4:	6816      	ldr	r6, [r2, #0]
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	2e00      	cmp	r6, #0
 8005aaa:	d063      	beq.n	8005b74 <_platform_observer_node_exec_cb+0xd8>
 8005aac:	8993      	ldrh	r3, [r2, #12]
 8005aae:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f240 3802 	movw	r8, #770	; 0x302
 8005ab8:	f240 3c01 	movw	ip, #769	; 0x301
 8005abc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005ac0:	f240 2702 	movw	r7, #514	; 0x202
 8005ac4:	f240 2501 	movw	r5, #513	; 0x201
 8005ac8:	bf04      	itt	eq
 8005aca:	4647      	moveq	r7, r8
 8005acc:	4665      	moveq	r5, ip
 8005ace:	f240 1401 	movw	r4, #257	; 0x101
 8005ad2:	bf0b      	itete	eq
 8005ad4:	f44f 7982 	moveq.w	r9, #260	; 0x104
 8005ad8:	f04f 0904 	movne.w	r9, #4
 8005adc:	f44f 7881 	moveq.w	r8, #258	; 0x102
 8005ae0:	f04f 0802 	movne.w	r8, #2
 8005ae4:	bf16      	itet	ne
 8005ae6:	2401      	movne	r4, #1
 8005ae8:	f44f 7c41 	moveq.w	ip, #772	; 0x304
 8005aec:	f44f 7c01 	movne.w	ip, #516	; 0x204
 8005af0:	459e      	cmp	lr, r3
 8005af2:	d002      	beq.n	8005afa <_platform_observer_node_exec_cb+0x5e>
 8005af4:	46cc      	mov	ip, r9
 8005af6:	4647      	mov	r7, r8
 8005af8:	4625      	mov	r5, r4
 8005afa:	4614      	mov	r4, r2
 8005afc:	b9c0      	cbnz	r0, 8005b30 <_platform_observer_node_exec_cb+0x94>
 8005afe:	6892      	ldr	r2, [r2, #8]
 8005b00:	07d7      	lsls	r7, r2, #31
 8005b02:	d50f      	bpl.n	8005b24 <_platform_observer_node_exec_cb+0x88>
 8005b04:	880a      	ldrh	r2, [r1, #0]
 8005b06:	884f      	ldrh	r7, [r1, #2]
 8005b08:	f8ad 3000 	strh.w	r3, [sp]
 8005b0c:	698b      	ldr	r3, [r1, #24]
 8005b0e:	9002      	str	r0, [sp, #8]
 8005b10:	f8ad 2002 	strh.w	r2, [sp, #2]
 8005b14:	9303      	str	r3, [sp, #12]
 8005b16:	4629      	mov	r1, r5
 8005b18:	f8ad 7004 	strh.w	r7, [sp, #4]
 8005b1c:	466a      	mov	r2, sp
 8005b1e:	6860      	ldr	r0, [r4, #4]
 8005b20:	47b0      	blx	r6
 8005b22:	89a3      	ldrh	r3, [r4, #12]
 8005b24:	3301      	adds	r3, #1
 8005b26:	81a3      	strh	r3, [r4, #12]
 8005b28:	2000      	movs	r0, #0
 8005b2a:	b005      	add	sp, #20
 8005b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b30:	2801      	cmp	r0, #1
 8005b32:	d01b      	beq.n	8005b6c <_platform_observer_node_exec_cb+0xd0>
 8005b34:	2802      	cmp	r0, #2
 8005b36:	d021      	beq.n	8005b7c <_platform_observer_node_exec_cb+0xe0>
 8005b38:	2803      	cmp	r0, #3
 8005b3a:	d1f5      	bne.n	8005b28 <_platform_observer_node_exec_cb+0x8c>
 8005b3c:	6892      	ldr	r2, [r2, #8]
 8005b3e:	0752      	lsls	r2, r2, #29
 8005b40:	d5f0      	bpl.n	8005b24 <_platform_observer_node_exec_cb+0x88>
 8005b42:	6922      	ldr	r2, [r4, #16]
 8005b44:	f8ad 3000 	strh.w	r3, [sp]
 8005b48:	8853      	ldrh	r3, [r2, #2]
 8005b4a:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005b4e:	8813      	ldrh	r3, [r2, #0]
 8005b50:	f8ad 3002 	strh.w	r3, [sp, #2]
 8005b54:	6993      	ldr	r3, [r2, #24]
 8005b56:	9303      	str	r3, [sp, #12]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	9302      	str	r3, [sp, #8]
 8005b5c:	4661      	mov	r1, ip
 8005b5e:	466a      	mov	r2, sp
 8005b60:	6860      	ldr	r0, [r4, #4]
 8005b62:	47b0      	blx	r6
 8005b64:	89a3      	ldrh	r3, [r4, #12]
 8005b66:	e7dd      	b.n	8005b24 <_platform_observer_node_exec_cb+0x88>
 8005b68:	2001      	movs	r0, #1
 8005b6a:	4770      	bx	lr
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	6111      	str	r1, [r2, #16]
 8005b70:	8190      	strh	r0, [r2, #12]
 8005b72:	e7da      	b.n	8005b2a <_platform_observer_node_exec_cb+0x8e>
 8005b74:	2001      	movs	r0, #1
 8005b76:	b005      	add	sp, #20
 8005b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b7c:	6892      	ldr	r2, [r2, #8]
 8005b7e:	6121      	str	r1, [r4, #16]
 8005b80:	0790      	lsls	r0, r2, #30
 8005b82:	d5d1      	bpl.n	8005b28 <_platform_observer_node_exec_cb+0x8c>
 8005b84:	f8ad 3000 	strh.w	r3, [sp]
 8005b88:	698b      	ldr	r3, [r1, #24]
 8005b8a:	880a      	ldrh	r2, [r1, #0]
 8005b8c:	884d      	ldrh	r5, [r1, #2]
 8005b8e:	6860      	ldr	r0, [r4, #4]
 8005b90:	f8ad 2002 	strh.w	r2, [sp, #2]
 8005b94:	2400      	movs	r4, #0
 8005b96:	f8ad 5004 	strh.w	r5, [sp, #4]
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8005ba0:	466a      	mov	r2, sp
 8005ba2:	47b0      	blx	r6
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	e7c0      	b.n	8005b2a <_platform_observer_node_exec_cb+0x8e>

08005ba8 <_ai_platform_acquire_crc>:
 8005ba8:	2001      	movs	r0, #1
 8005baa:	4770      	bx	lr

08005bac <_ai_platform_release_crc>:
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop

08005bb0 <ai_platform_get_weights_map>:
 8005bb0:	b132      	cbz	r2, 8005bc0 <ai_platform_get_weights_map+0x10>
 8005bb2:	6912      	ldr	r2, [r2, #16]
 8005bb4:	b122      	cbz	r2, 8005bc0 <ai_platform_get_weights_map+0x10>
 8005bb6:	b110      	cbz	r0, 8005bbe <ai_platform_get_weights_map+0xe>
 8005bb8:	b921      	cbnz	r1, 8005bc4 <ai_platform_get_weights_map+0x14>
 8005bba:	4608      	mov	r0, r1
 8005bbc:	4770      	bx	lr
 8005bbe:	4770      	bx	lr
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	4770      	bx	lr
 8005bc4:	b470      	push	{r4, r5, r6}
 8005bc6:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <ai_platform_get_weights_map+0x64>)
 8005bc8:	6815      	ldr	r5, [r2, #0]
 8005bca:	429d      	cmp	r5, r3
 8005bcc:	d007      	beq.n	8005bde <ai_platform_get_weights_map+0x2e>
 8005bce:	6002      	str	r2, [r0, #0]
 8005bd0:	f1a1 0001 	sub.w	r0, r1, #1
 8005bd4:	fab0 f080 	clz	r0, r0
 8005bd8:	0940      	lsrs	r0, r0, #5
 8005bda:	bc70      	pop	{r4, r5, r6}
 8005bdc:	4770      	bx	lr
 8005bde:	6854      	ldr	r4, [r2, #4]
 8005be0:	42ac      	cmp	r4, r5
 8005be2:	f102 0204 	add.w	r2, r2, #4
 8005be6:	d011      	beq.n	8005c0c <ai_platform_get_weights_map+0x5c>
 8005be8:	1f03      	subs	r3, r0, #4
 8005bea:	4616      	mov	r6, r2
 8005bec:	2000      	movs	r0, #0
 8005bee:	e003      	b.n	8005bf8 <ai_platform_get_weights_map+0x48>
 8005bf0:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8005bf4:	42ac      	cmp	r4, r5
 8005bf6:	d009      	beq.n	8005c0c <ai_platform_get_weights_map+0x5c>
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	4281      	cmp	r1, r0
 8005bfc:	f843 4f04 	str.w	r4, [r3, #4]!
 8005c00:	d1f6      	bne.n	8005bf0 <ai_platform_get_weights_map+0x40>
 8005c02:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005c06:	4b03      	ldr	r3, [pc, #12]	; (8005c14 <ai_platform_get_weights_map+0x64>)
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d001      	beq.n	8005c10 <ai_platform_get_weights_map+0x60>
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	e7e4      	b.n	8005bda <ai_platform_get_weights_map+0x2a>
 8005c10:	2001      	movs	r0, #1
 8005c12:	e7e2      	b.n	8005bda <ai_platform_get_weights_map+0x2a>
 8005c14:	a1facade 	.word	0xa1facade

08005c18 <ai_platform_get_activations_map>:
 8005c18:	b132      	cbz	r2, 8005c28 <ai_platform_get_activations_map+0x10>
 8005c1a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005c1c:	b122      	cbz	r2, 8005c28 <ai_platform_get_activations_map+0x10>
 8005c1e:	b110      	cbz	r0, 8005c26 <ai_platform_get_activations_map+0xe>
 8005c20:	b921      	cbnz	r1, 8005c2c <ai_platform_get_activations_map+0x14>
 8005c22:	4608      	mov	r0, r1
 8005c24:	4770      	bx	lr
 8005c26:	4770      	bx	lr
 8005c28:	4610      	mov	r0, r2
 8005c2a:	4770      	bx	lr
 8005c2c:	b470      	push	{r4, r5, r6}
 8005c2e:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <ai_platform_get_activations_map+0x64>)
 8005c30:	6815      	ldr	r5, [r2, #0]
 8005c32:	429d      	cmp	r5, r3
 8005c34:	d007      	beq.n	8005c46 <ai_platform_get_activations_map+0x2e>
 8005c36:	6002      	str	r2, [r0, #0]
 8005c38:	f1a1 0001 	sub.w	r0, r1, #1
 8005c3c:	fab0 f080 	clz	r0, r0
 8005c40:	0940      	lsrs	r0, r0, #5
 8005c42:	bc70      	pop	{r4, r5, r6}
 8005c44:	4770      	bx	lr
 8005c46:	6854      	ldr	r4, [r2, #4]
 8005c48:	42ac      	cmp	r4, r5
 8005c4a:	f102 0204 	add.w	r2, r2, #4
 8005c4e:	d011      	beq.n	8005c74 <ai_platform_get_activations_map+0x5c>
 8005c50:	1f03      	subs	r3, r0, #4
 8005c52:	4616      	mov	r6, r2
 8005c54:	2000      	movs	r0, #0
 8005c56:	e003      	b.n	8005c60 <ai_platform_get_activations_map+0x48>
 8005c58:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8005c5c:	42ac      	cmp	r4, r5
 8005c5e:	d009      	beq.n	8005c74 <ai_platform_get_activations_map+0x5c>
 8005c60:	3001      	adds	r0, #1
 8005c62:	4281      	cmp	r1, r0
 8005c64:	f843 4f04 	str.w	r4, [r3, #4]!
 8005c68:	d1f6      	bne.n	8005c58 <ai_platform_get_activations_map+0x40>
 8005c6a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005c6e:	4b03      	ldr	r3, [pc, #12]	; (8005c7c <ai_platform_get_activations_map+0x64>)
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d001      	beq.n	8005c78 <ai_platform_get_activations_map+0x60>
 8005c74:	2000      	movs	r0, #0
 8005c76:	e7e4      	b.n	8005c42 <ai_platform_get_activations_map+0x2a>
 8005c78:	2001      	movs	r0, #1
 8005c7a:	e7e2      	b.n	8005c42 <ai_platform_get_activations_map+0x2a>
 8005c7c:	a1facade 	.word	0xa1facade

08005c80 <ai_platform_runtime_get_revision>:
 8005c80:	b508      	push	{r3, lr}
 8005c82:	4a17      	ldr	r2, [pc, #92]	; (8005ce0 <ai_platform_runtime_get_revision+0x60>)
 8005c84:	6813      	ldr	r3, [r2, #0]
 8005c86:	f023 0301 	bic.w	r3, r3, #1
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	f7ff ff8c 	bl	8005ba8 <_ai_platform_acquire_crc>
 8005c90:	4b14      	ldr	r3, [pc, #80]	; (8005ce4 <ai_platform_runtime_get_revision+0x64>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9c:	d00d      	beq.n	8005cba <ai_platform_runtime_get_revision+0x3a>
 8005c9e:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <ai_platform_runtime_get_revision+0x68>)
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	2a00      	cmp	r2, #0
 8005ca8:	d1fc      	bne.n	8005ca4 <ai_platform_runtime_get_revision+0x24>
 8005caa:	4b10      	ldr	r3, [pc, #64]	; (8005cec <ai_platform_runtime_get_revision+0x6c>)
 8005cac:	4a10      	ldr	r2, [pc, #64]	; (8005cf0 <ai_platform_runtime_get_revision+0x70>)
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <ai_platform_runtime_get_revision+0x74>)
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d00e      	beq.n	8005cd6 <ai_platform_runtime_get_revision+0x56>
 8005cb8:	e7fe      	b.n	8005cb8 <ai_platform_runtime_get_revision+0x38>
 8005cba:	4b0f      	ldr	r3, [pc, #60]	; (8005cf8 <ai_platform_runtime_get_revision+0x78>)
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	2a00      	cmp	r2, #0
 8005cc4:	d1fc      	bne.n	8005cc0 <ai_platform_runtime_get_revision+0x40>
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <ai_platform_runtime_get_revision+0x7c>)
 8005cc8:	4a09      	ldr	r2, [pc, #36]	; (8005cf0 <ai_platform_runtime_get_revision+0x70>)
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <ai_platform_runtime_get_revision+0x74>)
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d000      	beq.n	8005cd6 <ai_platform_runtime_get_revision+0x56>
 8005cd4:	e7fe      	b.n	8005cd4 <ai_platform_runtime_get_revision+0x54>
 8005cd6:	f7ff ff69 	bl	8005bac <_ai_platform_release_crc>
 8005cda:	4809      	ldr	r0, [pc, #36]	; (8005d00 <ai_platform_runtime_get_revision+0x80>)
 8005cdc:	bd08      	pop	{r3, pc}
 8005cde:	bf00      	nop
 8005ce0:	e0002000 	.word	0xe0002000
 8005ce4:	e0042000 	.word	0xe0042000
 8005ce8:	58024c08 	.word	0x58024c08
 8005cec:	58024c00 	.word	0x58024c00
 8005cf0:	f407a5c2 	.word	0xf407a5c2
 8005cf4:	b5e8b5cd 	.word	0xb5e8b5cd
 8005cf8:	40023008 	.word	0x40023008
 8005cfc:	40023000 	.word	0x40023000
 8005d00:	0800f3a8 	.word	0x0800f3a8

08005d04 <ai_platform_runtime_get_version>:
 8005d04:	b500      	push	{lr}
 8005d06:	4a18      	ldr	r2, [pc, #96]	; (8005d68 <ai_platform_runtime_get_version+0x64>)
 8005d08:	6813      	ldr	r3, [r2, #0]
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	b083      	sub	sp, #12
 8005d12:	f7ff ff49 	bl	8005ba8 <_ai_platform_acquire_crc>
 8005d16:	4b15      	ldr	r3, [pc, #84]	; (8005d6c <ai_platform_runtime_get_version+0x68>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d22:	d00d      	beq.n	8005d40 <ai_platform_runtime_get_version+0x3c>
 8005d24:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <ai_platform_runtime_get_version+0x6c>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	2a00      	cmp	r2, #0
 8005d2e:	d1fc      	bne.n	8005d2a <ai_platform_runtime_get_version+0x26>
 8005d30:	4b10      	ldr	r3, [pc, #64]	; (8005d74 <ai_platform_runtime_get_version+0x70>)
 8005d32:	4a11      	ldr	r2, [pc, #68]	; (8005d78 <ai_platform_runtime_get_version+0x74>)
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <ai_platform_runtime_get_version+0x78>)
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d00e      	beq.n	8005d5c <ai_platform_runtime_get_version+0x58>
 8005d3e:	e7fe      	b.n	8005d3e <ai_platform_runtime_get_version+0x3a>
 8005d40:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <ai_platform_runtime_get_version+0x7c>)
 8005d42:	2201      	movs	r2, #1
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	2a00      	cmp	r2, #0
 8005d4a:	d1fc      	bne.n	8005d46 <ai_platform_runtime_get_version+0x42>
 8005d4c:	4b0d      	ldr	r3, [pc, #52]	; (8005d84 <ai_platform_runtime_get_version+0x80>)
 8005d4e:	4a0a      	ldr	r2, [pc, #40]	; (8005d78 <ai_platform_runtime_get_version+0x74>)
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <ai_platform_runtime_get_version+0x78>)
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d000      	beq.n	8005d5c <ai_platform_runtime_get_version+0x58>
 8005d5a:	e7fe      	b.n	8005d5a <ai_platform_runtime_get_version+0x56>
 8005d5c:	f7ff ff26 	bl	8005bac <_ai_platform_release_crc>
 8005d60:	2007      	movs	r0, #7
 8005d62:	b003      	add	sp, #12
 8005d64:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d68:	e0002000 	.word	0xe0002000
 8005d6c:	e0042000 	.word	0xe0042000
 8005d70:	58024c08 	.word	0x58024c08
 8005d74:	58024c00 	.word	0x58024c00
 8005d78:	f407a5c2 	.word	0xf407a5c2
 8005d7c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005d80:	40023008 	.word	0x40023008
 8005d84:	40023000 	.word	0x40023000

08005d88 <ai_platform_api_get_version>:
 8005d88:	b500      	push	{lr}
 8005d8a:	4a20      	ldr	r2, [pc, #128]	; (8005e0c <ai_platform_api_get_version+0x84>)
 8005d8c:	6813      	ldr	r3, [r2, #0]
 8005d8e:	f023 0301 	bic.w	r3, r3, #1
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	b083      	sub	sp, #12
 8005d96:	f7ff ff07 	bl	8005ba8 <_ai_platform_acquire_crc>
 8005d9a:	4b1d      	ldr	r3, [pc, #116]	; (8005e10 <ai_platform_api_get_version+0x88>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da6:	d00d      	beq.n	8005dc4 <ai_platform_api_get_version+0x3c>
 8005da8:	4b1a      	ldr	r3, [pc, #104]	; (8005e14 <ai_platform_api_get_version+0x8c>)
 8005daa:	2201      	movs	r2, #1
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	2a00      	cmp	r2, #0
 8005db2:	d1fc      	bne.n	8005dae <ai_platform_api_get_version+0x26>
 8005db4:	4b18      	ldr	r3, [pc, #96]	; (8005e18 <ai_platform_api_get_version+0x90>)
 8005db6:	4a19      	ldr	r2, [pc, #100]	; (8005e1c <ai_platform_api_get_version+0x94>)
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	4b18      	ldr	r3, [pc, #96]	; (8005e20 <ai_platform_api_get_version+0x98>)
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d00e      	beq.n	8005de0 <ai_platform_api_get_version+0x58>
 8005dc2:	e7fe      	b.n	8005dc2 <ai_platform_api_get_version+0x3a>
 8005dc4:	4b17      	ldr	r3, [pc, #92]	; (8005e24 <ai_platform_api_get_version+0x9c>)
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	2a00      	cmp	r2, #0
 8005dce:	d1fc      	bne.n	8005dca <ai_platform_api_get_version+0x42>
 8005dd0:	4b15      	ldr	r3, [pc, #84]	; (8005e28 <ai_platform_api_get_version+0xa0>)
 8005dd2:	4a12      	ldr	r2, [pc, #72]	; (8005e1c <ai_platform_api_get_version+0x94>)
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	4b11      	ldr	r3, [pc, #68]	; (8005e20 <ai_platform_api_get_version+0x98>)
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d000      	beq.n	8005de0 <ai_platform_api_get_version+0x58>
 8005dde:	e7fe      	b.n	8005dde <ai_platform_api_get_version+0x56>
 8005de0:	f7ff fee4 	bl	8005bac <_ai_platform_release_crc>
 8005de4:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <ai_platform_api_get_version+0xa4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2000      	movs	r0, #0
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	f362 0007 	bfi	r0, r2, #0, #8
 8005df0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005df4:	f362 200f 	bfi	r0, r2, #8, #8
 8005df8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005dfc:	f362 4017 	bfi	r0, r2, #16, #8
 8005e00:	0e1b      	lsrs	r3, r3, #24
 8005e02:	f363 601f 	bfi	r0, r3, #24, #8
 8005e06:	b003      	add	sp, #12
 8005e08:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e0c:	e0002000 	.word	0xe0002000
 8005e10:	e0042000 	.word	0xe0042000
 8005e14:	58024c08 	.word	0x58024c08
 8005e18:	58024c00 	.word	0x58024c00
 8005e1c:	f407a5c2 	.word	0xf407a5c2
 8005e20:	b5e8b5cd 	.word	0xb5e8b5cd
 8005e24:	40023008 	.word	0x40023008
 8005e28:	40023000 	.word	0x40023000
 8005e2c:	0800f3ac 	.word	0x0800f3ac

08005e30 <ai_platform_interface_api_get_version>:
 8005e30:	b500      	push	{lr}
 8005e32:	4a20      	ldr	r2, [pc, #128]	; (8005eb4 <ai_platform_interface_api_get_version+0x84>)
 8005e34:	6813      	ldr	r3, [r2, #0]
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	f7ff feb3 	bl	8005ba8 <_ai_platform_acquire_crc>
 8005e42:	4b1d      	ldr	r3, [pc, #116]	; (8005eb8 <ai_platform_interface_api_get_version+0x88>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4e:	d00d      	beq.n	8005e6c <ai_platform_interface_api_get_version+0x3c>
 8005e50:	4b1a      	ldr	r3, [pc, #104]	; (8005ebc <ai_platform_interface_api_get_version+0x8c>)
 8005e52:	2201      	movs	r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	d1fc      	bne.n	8005e56 <ai_platform_interface_api_get_version+0x26>
 8005e5c:	4b18      	ldr	r3, [pc, #96]	; (8005ec0 <ai_platform_interface_api_get_version+0x90>)
 8005e5e:	4a19      	ldr	r2, [pc, #100]	; (8005ec4 <ai_platform_interface_api_get_version+0x94>)
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	4b18      	ldr	r3, [pc, #96]	; (8005ec8 <ai_platform_interface_api_get_version+0x98>)
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d00e      	beq.n	8005e88 <ai_platform_interface_api_get_version+0x58>
 8005e6a:	e7fe      	b.n	8005e6a <ai_platform_interface_api_get_version+0x3a>
 8005e6c:	4b17      	ldr	r3, [pc, #92]	; (8005ecc <ai_platform_interface_api_get_version+0x9c>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	d1fc      	bne.n	8005e72 <ai_platform_interface_api_get_version+0x42>
 8005e78:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <ai_platform_interface_api_get_version+0xa0>)
 8005e7a:	4a12      	ldr	r2, [pc, #72]	; (8005ec4 <ai_platform_interface_api_get_version+0x94>)
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4b11      	ldr	r3, [pc, #68]	; (8005ec8 <ai_platform_interface_api_get_version+0x98>)
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d000      	beq.n	8005e88 <ai_platform_interface_api_get_version+0x58>
 8005e86:	e7fe      	b.n	8005e86 <ai_platform_interface_api_get_version+0x56>
 8005e88:	f7ff fe90 	bl	8005bac <_ai_platform_release_crc>
 8005e8c:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <ai_platform_interface_api_get_version+0xa4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2000      	movs	r0, #0
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	f362 0007 	bfi	r0, r2, #0, #8
 8005e98:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005e9c:	f362 200f 	bfi	r0, r2, #8, #8
 8005ea0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005ea4:	f362 4017 	bfi	r0, r2, #16, #8
 8005ea8:	0e1b      	lsrs	r3, r3, #24
 8005eaa:	f363 601f 	bfi	r0, r3, #24, #8
 8005eae:	b003      	add	sp, #12
 8005eb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005eb4:	e0002000 	.word	0xe0002000
 8005eb8:	e0042000 	.word	0xe0042000
 8005ebc:	58024c08 	.word	0x58024c08
 8005ec0:	58024c00 	.word	0x58024c00
 8005ec4:	f407a5c2 	.word	0xf407a5c2
 8005ec8:	b5e8b5cd 	.word	0xb5e8b5cd
 8005ecc:	40023008 	.word	0x40023008
 8005ed0:	40023000 	.word	0x40023000
 8005ed4:	0800f3b0 	.word	0x0800f3b0

08005ed8 <ai_platform_context_acquire>:
 8005ed8:	b510      	push	{r4, lr}
 8005eda:	4604      	mov	r4, r0
 8005edc:	b120      	cbz	r0, 8005ee8 <ai_platform_context_acquire+0x10>
 8005ede:	4b19      	ldr	r3, [pc, #100]	; (8005f44 <ai_platform_context_acquire+0x6c>)
 8005ee0:	6802      	ldr	r2, [r0, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	bf18      	it	ne
 8005ee6:	2400      	movne	r4, #0
 8005ee8:	4a17      	ldr	r2, [pc, #92]	; (8005f48 <ai_platform_context_acquire+0x70>)
 8005eea:	6813      	ldr	r3, [r2, #0]
 8005eec:	f023 0301 	bic.w	r3, r3, #1
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	f7ff fe59 	bl	8005ba8 <_ai_platform_acquire_crc>
 8005ef6:	4b15      	ldr	r3, [pc, #84]	; (8005f4c <ai_platform_context_acquire+0x74>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f02:	d00d      	beq.n	8005f20 <ai_platform_context_acquire+0x48>
 8005f04:	4b12      	ldr	r3, [pc, #72]	; (8005f50 <ai_platform_context_acquire+0x78>)
 8005f06:	2201      	movs	r2, #1
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	2a00      	cmp	r2, #0
 8005f0e:	d1fc      	bne.n	8005f0a <ai_platform_context_acquire+0x32>
 8005f10:	4b10      	ldr	r3, [pc, #64]	; (8005f54 <ai_platform_context_acquire+0x7c>)
 8005f12:	4a11      	ldr	r2, [pc, #68]	; (8005f58 <ai_platform_context_acquire+0x80>)
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <ai_platform_context_acquire+0x84>)
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d00e      	beq.n	8005f3c <ai_platform_context_acquire+0x64>
 8005f1e:	e7fe      	b.n	8005f1e <ai_platform_context_acquire+0x46>
 8005f20:	4b0f      	ldr	r3, [pc, #60]	; (8005f60 <ai_platform_context_acquire+0x88>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	2a00      	cmp	r2, #0
 8005f2a:	d1fc      	bne.n	8005f26 <ai_platform_context_acquire+0x4e>
 8005f2c:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <ai_platform_context_acquire+0x8c>)
 8005f2e:	4a0a      	ldr	r2, [pc, #40]	; (8005f58 <ai_platform_context_acquire+0x80>)
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <ai_platform_context_acquire+0x84>)
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d000      	beq.n	8005f3c <ai_platform_context_acquire+0x64>
 8005f3a:	e7fe      	b.n	8005f3a <ai_platform_context_acquire+0x62>
 8005f3c:	f7ff fe36 	bl	8005bac <_ai_platform_release_crc>
 8005f40:	4620      	mov	r0, r4
 8005f42:	bd10      	pop	{r4, pc}
 8005f44:	a1c00100 	.word	0xa1c00100
 8005f48:	e0002000 	.word	0xe0002000
 8005f4c:	e0042000 	.word	0xe0042000
 8005f50:	58024c08 	.word	0x58024c08
 8005f54:	58024c00 	.word	0x58024c00
 8005f58:	f407a5c2 	.word	0xf407a5c2
 8005f5c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005f60:	40023008 	.word	0x40023008
 8005f64:	40023000 	.word	0x40023000

08005f68 <ai_platform_network_get_error>:
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	b120      	cbz	r0, 8005f76 <ai_platform_network_get_error+0xe>
 8005f6c:	4b32      	ldr	r3, [pc, #200]	; (8006038 <ai_platform_network_get_error+0xd0>)
 8005f6e:	6802      	ldr	r2, [r0, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	4604      	mov	r4, r0
 8005f74:	d02e      	beq.n	8005fd4 <ai_platform_network_get_error+0x6c>
 8005f76:	4a31      	ldr	r2, [pc, #196]	; (800603c <ai_platform_network_get_error+0xd4>)
 8005f78:	6813      	ldr	r3, [r2, #0]
 8005f7a:	f023 0301 	bic.w	r3, r3, #1
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	f7ff fe12 	bl	8005ba8 <_ai_platform_acquire_crc>
 8005f84:	4b2e      	ldr	r3, [pc, #184]	; (8006040 <ai_platform_network_get_error+0xd8>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f90:	d00d      	beq.n	8005fae <ai_platform_network_get_error+0x46>
 8005f92:	4b2c      	ldr	r3, [pc, #176]	; (8006044 <ai_platform_network_get_error+0xdc>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	2a00      	cmp	r2, #0
 8005f9c:	d1fc      	bne.n	8005f98 <ai_platform_network_get_error+0x30>
 8005f9e:	4b2a      	ldr	r3, [pc, #168]	; (8006048 <ai_platform_network_get_error+0xe0>)
 8005fa0:	4a2a      	ldr	r2, [pc, #168]	; (800604c <ai_platform_network_get_error+0xe4>)
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4b2a      	ldr	r3, [pc, #168]	; (8006050 <ai_platform_network_get_error+0xe8>)
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d00d      	beq.n	8005fc8 <ai_platform_network_get_error+0x60>
 8005fac:	e7fe      	b.n	8005fac <ai_platform_network_get_error+0x44>
 8005fae:	4b29      	ldr	r3, [pc, #164]	; (8006054 <ai_platform_network_get_error+0xec>)
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	2a00      	cmp	r2, #0
 8005fb8:	d1fc      	bne.n	8005fb4 <ai_platform_network_get_error+0x4c>
 8005fba:	4b27      	ldr	r3, [pc, #156]	; (8006058 <ai_platform_network_get_error+0xf0>)
 8005fbc:	4a23      	ldr	r2, [pc, #140]	; (800604c <ai_platform_network_get_error+0xe4>)
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	4b23      	ldr	r3, [pc, #140]	; (8006050 <ai_platform_network_get_error+0xe8>)
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d104      	bne.n	8005fd2 <ai_platform_network_get_error+0x6a>
 8005fc8:	f7ff fdf0 	bl	8005bac <_ai_platform_release_crc>
 8005fcc:	f241 0010 	movw	r0, #4112	; 0x1010
 8005fd0:	bd10      	pop	{r4, pc}
 8005fd2:	e7fe      	b.n	8005fd2 <ai_platform_network_get_error+0x6a>
 8005fd4:	4a19      	ldr	r2, [pc, #100]	; (800603c <ai_platform_network_get_error+0xd4>)
 8005fd6:	6813      	ldr	r3, [r2, #0]
 8005fd8:	f023 0301 	bic.w	r3, r3, #1
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	f7ff fde3 	bl	8005ba8 <_ai_platform_acquire_crc>
 8005fe2:	4b17      	ldr	r3, [pc, #92]	; (8006040 <ai_platform_network_get_error+0xd8>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fee:	d00d      	beq.n	800600c <ai_platform_network_get_error+0xa4>
 8005ff0:	4b14      	ldr	r3, [pc, #80]	; (8006044 <ai_platform_network_get_error+0xdc>)
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	2a00      	cmp	r2, #0
 8005ffa:	d1fc      	bne.n	8005ff6 <ai_platform_network_get_error+0x8e>
 8005ffc:	4b12      	ldr	r3, [pc, #72]	; (8006048 <ai_platform_network_get_error+0xe0>)
 8005ffe:	4a13      	ldr	r2, [pc, #76]	; (800604c <ai_platform_network_get_error+0xe4>)
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	4b12      	ldr	r3, [pc, #72]	; (8006050 <ai_platform_network_get_error+0xe8>)
 8006006:	429a      	cmp	r2, r3
 8006008:	d00e      	beq.n	8006028 <ai_platform_network_get_error+0xc0>
 800600a:	e7fe      	b.n	800600a <ai_platform_network_get_error+0xa2>
 800600c:	4b11      	ldr	r3, [pc, #68]	; (8006054 <ai_platform_network_get_error+0xec>)
 800600e:	2201      	movs	r2, #1
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	2a00      	cmp	r2, #0
 8006016:	d1fc      	bne.n	8006012 <ai_platform_network_get_error+0xaa>
 8006018:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <ai_platform_network_get_error+0xf0>)
 800601a:	4a0c      	ldr	r2, [pc, #48]	; (800604c <ai_platform_network_get_error+0xe4>)
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <ai_platform_network_get_error+0xe8>)
 8006022:	429a      	cmp	r2, r3
 8006024:	d000      	beq.n	8006028 <ai_platform_network_get_error+0xc0>
 8006026:	e7fe      	b.n	8006026 <ai_platform_network_get_error+0xbe>
 8006028:	f7ff fdc0 	bl	8005bac <_ai_platform_release_crc>
 800602c:	f104 0010 	add.w	r0, r4, #16
 8006030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006034:	f001 b94a 	b.w	80072cc <core_get_error>
 8006038:	a1c00100 	.word	0xa1c00100
 800603c:	e0002000 	.word	0xe0002000
 8006040:	e0042000 	.word	0xe0042000
 8006044:	58024c08 	.word	0x58024c08
 8006048:	58024c00 	.word	0x58024c00
 800604c:	f407a5c2 	.word	0xf407a5c2
 8006050:	b5e8b5cd 	.word	0xb5e8b5cd
 8006054:	40023008 	.word	0x40023008
 8006058:	40023000 	.word	0x40023000

0800605c <ai_platform_api_get_network_report>:
 800605c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006060:	b083      	sub	sp, #12
 8006062:	b120      	cbz	r0, 800606e <ai_platform_api_get_network_report+0x12>
 8006064:	4ba1      	ldr	r3, [pc, #644]	; (80062ec <ai_platform_api_get_network_report+0x290>)
 8006066:	6802      	ldr	r2, [r0, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	4605      	mov	r5, r0
 800606c:	d030      	beq.n	80060d0 <ai_platform_api_get_network_report+0x74>
 800606e:	4aa0      	ldr	r2, [pc, #640]	; (80062f0 <ai_platform_api_get_network_report+0x294>)
 8006070:	6813      	ldr	r3, [r2, #0]
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	f7ff fd96 	bl	8005ba8 <_ai_platform_acquire_crc>
 800607c:	4b9d      	ldr	r3, [pc, #628]	; (80062f4 <ai_platform_api_get_network_report+0x298>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006088:	d00d      	beq.n	80060a6 <ai_platform_api_get_network_report+0x4a>
 800608a:	4b9b      	ldr	r3, [pc, #620]	; (80062f8 <ai_platform_api_get_network_report+0x29c>)
 800608c:	2201      	movs	r2, #1
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	2a00      	cmp	r2, #0
 8006094:	d1fc      	bne.n	8006090 <ai_platform_api_get_network_report+0x34>
 8006096:	4b99      	ldr	r3, [pc, #612]	; (80062fc <ai_platform_api_get_network_report+0x2a0>)
 8006098:	4a99      	ldr	r2, [pc, #612]	; (8006300 <ai_platform_api_get_network_report+0x2a4>)
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b99      	ldr	r3, [pc, #612]	; (8006304 <ai_platform_api_get_network_report+0x2a8>)
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d00d      	beq.n	80060c0 <ai_platform_api_get_network_report+0x64>
 80060a4:	e7fe      	b.n	80060a4 <ai_platform_api_get_network_report+0x48>
 80060a6:	4b98      	ldr	r3, [pc, #608]	; (8006308 <ai_platform_api_get_network_report+0x2ac>)
 80060a8:	2201      	movs	r2, #1
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	2a00      	cmp	r2, #0
 80060b0:	d1fc      	bne.n	80060ac <ai_platform_api_get_network_report+0x50>
 80060b2:	4b96      	ldr	r3, [pc, #600]	; (800630c <ai_platform_api_get_network_report+0x2b0>)
 80060b4:	4a92      	ldr	r2, [pc, #584]	; (8006300 <ai_platform_api_get_network_report+0x2a4>)
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	4b92      	ldr	r3, [pc, #584]	; (8006304 <ai_platform_api_get_network_report+0x2a8>)
 80060bc:	429a      	cmp	r2, r3
 80060be:	d106      	bne.n	80060ce <ai_platform_api_get_network_report+0x72>
 80060c0:	f7ff fd74 	bl	8005bac <_ai_platform_release_crc>
 80060c4:	2600      	movs	r6, #0
 80060c6:	4630      	mov	r0, r6
 80060c8:	b003      	add	sp, #12
 80060ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ce:	e7fe      	b.n	80060ce <ai_platform_api_get_network_report+0x72>
 80060d0:	4a87      	ldr	r2, [pc, #540]	; (80062f0 <ai_platform_api_get_network_report+0x294>)
 80060d2:	6813      	ldr	r3, [r2, #0]
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	460c      	mov	r4, r1
 80060dc:	f7ff fd64 	bl	8005ba8 <_ai_platform_acquire_crc>
 80060e0:	4b84      	ldr	r3, [pc, #528]	; (80062f4 <ai_platform_api_get_network_report+0x298>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ec:	d00d      	beq.n	800610a <ai_platform_api_get_network_report+0xae>
 80060ee:	4b82      	ldr	r3, [pc, #520]	; (80062f8 <ai_platform_api_get_network_report+0x29c>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	2a00      	cmp	r2, #0
 80060f8:	d1fc      	bne.n	80060f4 <ai_platform_api_get_network_report+0x98>
 80060fa:	4b80      	ldr	r3, [pc, #512]	; (80062fc <ai_platform_api_get_network_report+0x2a0>)
 80060fc:	4a80      	ldr	r2, [pc, #512]	; (8006300 <ai_platform_api_get_network_report+0x2a4>)
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b80      	ldr	r3, [pc, #512]	; (8006304 <ai_platform_api_get_network_report+0x2a8>)
 8006104:	429a      	cmp	r2, r3
 8006106:	d00e      	beq.n	8006126 <ai_platform_api_get_network_report+0xca>
 8006108:	e7fe      	b.n	8006108 <ai_platform_api_get_network_report+0xac>
 800610a:	4b7f      	ldr	r3, [pc, #508]	; (8006308 <ai_platform_api_get_network_report+0x2ac>)
 800610c:	2201      	movs	r2, #1
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	2a00      	cmp	r2, #0
 8006114:	d1fc      	bne.n	8006110 <ai_platform_api_get_network_report+0xb4>
 8006116:	4b7d      	ldr	r3, [pc, #500]	; (800630c <ai_platform_api_get_network_report+0x2b0>)
 8006118:	4a79      	ldr	r2, [pc, #484]	; (8006300 <ai_platform_api_get_network_report+0x2a4>)
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	4b79      	ldr	r3, [pc, #484]	; (8006304 <ai_platform_api_get_network_report+0x2a8>)
 8006120:	429a      	cmp	r2, r3
 8006122:	d000      	beq.n	8006126 <ai_platform_api_get_network_report+0xca>
 8006124:	e7fe      	b.n	8006124 <ai_platform_api_get_network_report+0xc8>
 8006126:	f7ff fd41 	bl	8005bac <_ai_platform_release_crc>
 800612a:	2c00      	cmp	r4, #0
 800612c:	d07c      	beq.n	8006228 <ai_platform_api_get_network_report+0x1cc>
 800612e:	2300      	movs	r3, #0
 8006130:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006132:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006134:	2a00      	cmp	r2, #0
 8006136:	d079      	beq.n	800622c <ai_platform_api_get_network_report+0x1d0>
 8006138:	2301      	movs	r3, #1
 800613a:	66e3      	str	r3, [r4, #108]	; 0x6c
 800613c:	6913      	ldr	r3, [r2, #16]
 800613e:	429a      	cmp	r2, r3
 8006140:	d00c      	beq.n	800615c <ai_platform_api_get_network_report+0x100>
 8006142:	b15b      	cbz	r3, 800615c <ai_platform_api_get_network_report+0x100>
 8006144:	2202      	movs	r2, #2
 8006146:	e003      	b.n	8006150 <ai_platform_api_get_network_report+0xf4>
 8006148:	1c50      	adds	r0, r2, #1
 800614a:	460b      	mov	r3, r1
 800614c:	b121      	cbz	r1, 8006158 <ai_platform_api_get_network_report+0xfc>
 800614e:	4602      	mov	r2, r0
 8006150:	66e2      	str	r2, [r4, #108]	; 0x6c
 8006152:	6919      	ldr	r1, [r3, #16]
 8006154:	4299      	cmp	r1, r3
 8006156:	d1f7      	bne.n	8006148 <ai_platform_api_get_network_report+0xec>
 8006158:	2a00      	cmp	r2, #0
 800615a:	d067      	beq.n	800622c <ai_platform_api_get_network_report+0x1d0>
 800615c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 80d6 	beq.w	8006310 <ai_platform_api_get_network_report+0x2b4>
 8006164:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8006166:	2f00      	cmp	r7, #0
 8006168:	f000 80d2 	beq.w	8006310 <ai_platform_api_get_network_report+0x2b4>
 800616c:	883b      	ldrh	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 80ce 	beq.w	8006310 <ai_platform_api_get_network_report+0x2b4>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 80ca 	beq.w	8006310 <ai_platform_api_get_network_report+0x2b4>
 800617c:	681e      	ldr	r6, [r3, #0]
 800617e:	2e00      	cmp	r6, #0
 8006180:	f000 80c6 	beq.w	8006310 <ai_platform_api_get_network_report+0x2b4>
 8006184:	f04f 0800 	mov.w	r8, #0
 8006188:	4641      	mov	r1, r8
 800618a:	f04f 0b18 	mov.w	fp, #24
 800618e:	f04f 0a01 	mov.w	sl, #1
 8006192:	e019      	b.n	80061c8 <ai_platform_api_get_network_report+0x16c>
 8006194:	f849 1038 	str.w	r1, [r9, r8, lsl #3]
 8006198:	6830      	ldr	r0, [r6, #0]
 800619a:	6050      	str	r0, [r2, #4]
 800619c:	2800      	cmp	r0, #0
 800619e:	d039      	beq.n	8006214 <ai_platform_api_get_network_report+0x1b8>
 80061a0:	8840      	ldrh	r0, [r0, #2]
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d036      	beq.n	8006214 <ai_platform_api_get_network_report+0x1b8>
 80061a6:	f849 a00c 	str.w	sl, [r9, ip]
 80061aa:	615a      	str	r2, [r3, #20]
 80061ac:	8838      	ldrh	r0, [r7, #0]
 80061ae:	f108 0301 	add.w	r3, r8, #1
 80061b2:	4283      	cmp	r3, r0
 80061b4:	4698      	mov	r8, r3
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	d240      	bcs.n	800623c <ai_platform_api_get_network_report+0x1e0>
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	2800      	cmp	r0, #0
 80061be:	d03d      	beq.n	800623c <ai_platform_api_get_network_report+0x1e0>
 80061c0:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
 80061c4:	2e00      	cmp	r6, #0
 80061c6:	d039      	beq.n	800623c <ai_platform_api_get_network_report+0x1e0>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	69b2      	ldr	r2, [r6, #24]
 80061cc:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80061d0:	6810      	ldr	r0, [r2, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	9101      	str	r1, [sp, #4]
 80061d6:	9200      	str	r2, [sp, #0]
 80061d8:	f003 f9da 	bl	8009590 <ai_array_to_buffer_fmt>
 80061dc:	9a00      	ldr	r2, [sp, #0]
 80061de:	9901      	ldr	r1, [sp, #4]
 80061e0:	fb0b fc08 	mul.w	ip, fp, r8
 80061e4:	eb02 030c 	add.w	r3, r2, ip
 80061e8:	f842 000c 	str.w	r0, [r2, ip]
 80061ec:	f8a3 a004 	strh.w	sl, [r3, #4]
 80061f0:	68f2      	ldr	r2, [r6, #12]
 80061f2:	68d2      	ldr	r2, [r2, #12]
 80061f4:	80da      	strh	r2, [r3, #6]
 80061f6:	68f2      	ldr	r2, [r6, #12]
 80061f8:	6892      	ldr	r2, [r2, #8]
 80061fa:	811a      	strh	r2, [r3, #8]
 80061fc:	68f2      	ldr	r2, [r6, #12]
 80061fe:	6852      	ldr	r2, [r2, #4]
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	69b2      	ldr	r2, [r6, #24]
 8006204:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 8006208:	6892      	ldr	r2, [r2, #8]
 800620a:	611a      	str	r2, [r3, #16]
 800620c:	eb09 020c 	add.w	r2, r9, ip
 8006210:	2a00      	cmp	r2, #0
 8006212:	d1bf      	bne.n	8006194 <ai_platform_api_get_network_report+0x138>
 8006214:	2200      	movs	r2, #0
 8006216:	e7c8      	b.n	80061aa <ai_platform_api_get_network_report+0x14e>
 8006218:	2300      	movs	r3, #0
 800621a:	8663      	strh	r3, [r4, #50]	; 0x32
 800621c:	f105 0010 	add.w	r0, r5, #16
 8006220:	2218      	movs	r2, #24
 8006222:	2113      	movs	r1, #19
 8006224:	f001 f858 	bl	80072d8 <core_set_error>
 8006228:	2600      	movs	r6, #0
 800622a:	e74c      	b.n	80060c6 <ai_platform_api_get_network_report+0x6a>
 800622c:	f105 0010 	add.w	r0, r5, #16
 8006230:	2218      	movs	r2, #24
 8006232:	2111      	movs	r1, #17
 8006234:	f001 f850 	bl	80072d8 <core_set_error>
 8006238:	2600      	movs	r6, #0
 800623a:	e744      	b.n	80060c6 <ai_platform_api_get_network_report+0x6a>
 800623c:	2a00      	cmp	r2, #0
 800623e:	d067      	beq.n	8006310 <ai_platform_api_get_network_report+0x2b4>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	6363      	str	r3, [r4, #52]	; 0x34
 8006246:	8622      	strh	r2, [r4, #48]	; 0x30
 8006248:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800624a:	2b01      	cmp	r3, #1
 800624c:	d9e4      	bls.n	8006218 <ai_platform_api_get_network_report+0x1bc>
 800624e:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8006252:	2600      	movs	r6, #0
 8006254:	f108 0a0c 	add.w	sl, r8, #12
 8006258:	4631      	mov	r1, r6
 800625a:	f04f 0b01 	mov.w	fp, #1
 800625e:	b2b3      	uxth	r3, r6
 8006260:	f1ba 0f00 	cmp.w	sl, #0
 8006264:	d05f      	beq.n	8006326 <ai_platform_api_get_network_report+0x2ca>
 8006266:	f8b8 000c 	ldrh.w	r0, [r8, #12]
 800626a:	4286      	cmp	r6, r0
 800626c:	d25b      	bcs.n	8006326 <ai_platform_api_get_network_report+0x2ca>
 800626e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8006272:	2800      	cmp	r0, #0
 8006274:	d057      	beq.n	8006326 <ai_platform_api_get_network_report+0x2ca>
 8006276:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800627a:	2f00      	cmp	r7, #0
 800627c:	d053      	beq.n	8006326 <ai_platform_api_get_network_report+0x2ca>
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	6853      	ldr	r3, [r2, #4]
 8006288:	9101      	str	r1, [sp, #4]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8006290:	f003 f97e 	bl	8009590 <ai_array_to_buffer_fmt>
 8006294:	2318      	movs	r3, #24
 8006296:	fb03 fe06 	mul.w	lr, r3, r6
 800629a:	9b00      	ldr	r3, [sp, #0]
 800629c:	9901      	ldr	r1, [sp, #4]
 800629e:	f843 000e 	str.w	r0, [r3, lr]
 80062a2:	eb03 0c0e 	add.w	ip, r3, lr
 80062a6:	00f0      	lsls	r0, r6, #3
 80062a8:	f8ac b004 	strh.w	fp, [ip, #4]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f8ac 3006 	strh.w	r3, [ip, #6]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f8ac 3008 	strh.w	r3, [ip, #8]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f8cc 300c 	str.w	r3, [ip, #12]
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f8cc 3010 	str.w	r3, [ip, #16]
 80062cc:	eb09 0300 	add.w	r3, r9, r0
 80062d0:	b33b      	cbz	r3, 8006322 <ai_platform_api_get_network_report+0x2c6>
 80062d2:	f849 1036 	str.w	r1, [r9, r6, lsl #3]
 80062d6:	683f      	ldr	r7, [r7, #0]
 80062d8:	605f      	str	r7, [r3, #4]
 80062da:	b317      	cbz	r7, 8006322 <ai_platform_api_get_network_report+0x2c6>
 80062dc:	887f      	ldrh	r7, [r7, #2]
 80062de:	b307      	cbz	r7, 8006322 <ai_platform_api_get_network_report+0x2c6>
 80062e0:	f849 b000 	str.w	fp, [r9, r0]
 80062e4:	f8cc 3014 	str.w	r3, [ip, #20]
 80062e8:	3601      	adds	r6, #1
 80062ea:	e7b8      	b.n	800625e <ai_platform_api_get_network_report+0x202>
 80062ec:	a1c00100 	.word	0xa1c00100
 80062f0:	e0002000 	.word	0xe0002000
 80062f4:	e0042000 	.word	0xe0042000
 80062f8:	58024c08 	.word	0x58024c08
 80062fc:	58024c00 	.word	0x58024c00
 8006300:	f407a5c2 	.word	0xf407a5c2
 8006304:	b5e8b5cd 	.word	0xb5e8b5cd
 8006308:	40023008 	.word	0x40023008
 800630c:	40023000 	.word	0x40023000
 8006310:	2600      	movs	r6, #0
 8006312:	f105 0010 	add.w	r0, r5, #16
 8006316:	8626      	strh	r6, [r4, #48]	; 0x30
 8006318:	2218      	movs	r2, #24
 800631a:	2112      	movs	r1, #18
 800631c:	f000 ffdc 	bl	80072d8 <core_set_error>
 8006320:	e6d1      	b.n	80060c6 <ai_platform_api_get_network_report+0x6a>
 8006322:	2300      	movs	r3, #0
 8006324:	e7de      	b.n	80062e4 <ai_platform_api_get_network_report+0x288>
 8006326:	2b00      	cmp	r3, #0
 8006328:	f43f af77 	beq.w	800621a <ai_platform_api_get_network_report+0x1be>
 800632c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8006330:	6852      	ldr	r2, [r2, #4]
 8006332:	63a2      	str	r2, [r4, #56]	; 0x38
 8006334:	8663      	strh	r3, [r4, #50]	; 0x32
 8006336:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006338:	b16b      	cbz	r3, 8006356 <ai_platform_api_get_network_report+0x2fa>
 800633a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800633c:	b15b      	cbz	r3, 8006356 <ai_platform_api_get_network_report+0x2fa>
 800633e:	6a2b      	ldr	r3, [r5, #32]
 8006340:	b10b      	cbz	r3, 8006346 <ai_platform_api_get_network_report+0x2ea>
 8006342:	8beb      	ldrh	r3, [r5, #30]
 8006344:	b97b      	cbnz	r3, 8006366 <ai_platform_api_get_network_report+0x30a>
 8006346:	f105 0010 	add.w	r0, r5, #16
 800634a:	2212      	movs	r2, #18
 800634c:	2111      	movs	r1, #17
 800634e:	f000 ffc3 	bl	80072d8 <core_set_error>
 8006352:	2600      	movs	r6, #0
 8006354:	e6b7      	b.n	80060c6 <ai_platform_api_get_network_report+0x6a>
 8006356:	f105 0010 	add.w	r0, r5, #16
 800635a:	2213      	movs	r2, #19
 800635c:	2111      	movs	r1, #17
 800635e:	f000 ffbb 	bl	80072d8 <core_set_error>
 8006362:	2600      	movs	r6, #0
 8006364:	e6af      	b.n	80060c6 <ai_platform_api_get_network_report+0x6a>
 8006366:	686b      	ldr	r3, [r5, #4]
 8006368:	4a83      	ldr	r2, [pc, #524]	; (8006578 <ai_platform_api_get_network_report+0x51c>)
 800636a:	6723      	str	r3, [r4, #112]	; 0x70
 800636c:	6813      	ldr	r3, [r2, #0]
 800636e:	f023 0301 	bic.w	r3, r3, #1
 8006372:	6013      	str	r3, [r2, #0]
 8006374:	f7ff fc18 	bl	8005ba8 <_ai_platform_acquire_crc>
 8006378:	4b80      	ldr	r3, [pc, #512]	; (800657c <ai_platform_api_get_network_report+0x520>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006384:	d00d      	beq.n	80063a2 <ai_platform_api_get_network_report+0x346>
 8006386:	4b7e      	ldr	r3, [pc, #504]	; (8006580 <ai_platform_api_get_network_report+0x524>)
 8006388:	2201      	movs	r2, #1
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	2a00      	cmp	r2, #0
 8006390:	d1fc      	bne.n	800638c <ai_platform_api_get_network_report+0x330>
 8006392:	4b7c      	ldr	r3, [pc, #496]	; (8006584 <ai_platform_api_get_network_report+0x528>)
 8006394:	4a7c      	ldr	r2, [pc, #496]	; (8006588 <ai_platform_api_get_network_report+0x52c>)
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	4b7c      	ldr	r3, [pc, #496]	; (800658c <ai_platform_api_get_network_report+0x530>)
 800639c:	429a      	cmp	r2, r3
 800639e:	d00e      	beq.n	80063be <ai_platform_api_get_network_report+0x362>
 80063a0:	e7fe      	b.n	80063a0 <ai_platform_api_get_network_report+0x344>
 80063a2:	4b7b      	ldr	r3, [pc, #492]	; (8006590 <ai_platform_api_get_network_report+0x534>)
 80063a4:	2201      	movs	r2, #1
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	2a00      	cmp	r2, #0
 80063ac:	d1fc      	bne.n	80063a8 <ai_platform_api_get_network_report+0x34c>
 80063ae:	4b79      	ldr	r3, [pc, #484]	; (8006594 <ai_platform_api_get_network_report+0x538>)
 80063b0:	4a75      	ldr	r2, [pc, #468]	; (8006588 <ai_platform_api_get_network_report+0x52c>)
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	4b75      	ldr	r3, [pc, #468]	; (800658c <ai_platform_api_get_network_report+0x530>)
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d000      	beq.n	80063be <ai_platform_api_get_network_report+0x362>
 80063bc:	e7fe      	b.n	80063bc <ai_platform_api_get_network_report+0x360>
 80063be:	f7ff fbf5 	bl	8005bac <_ai_platform_release_crc>
 80063c2:	4a6d      	ldr	r2, [pc, #436]	; (8006578 <ai_platform_api_get_network_report+0x51c>)
 80063c4:	4b74      	ldr	r3, [pc, #464]	; (8006598 <ai_platform_api_get_network_report+0x53c>)
 80063c6:	6123      	str	r3, [r4, #16]
 80063c8:	6813      	ldr	r3, [r2, #0]
 80063ca:	f023 0301 	bic.w	r3, r3, #1
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	f7ff fbea 	bl	8005ba8 <_ai_platform_acquire_crc>
 80063d4:	4b69      	ldr	r3, [pc, #420]	; (800657c <ai_platform_api_get_network_report+0x520>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e0:	d00d      	beq.n	80063fe <ai_platform_api_get_network_report+0x3a2>
 80063e2:	4b67      	ldr	r3, [pc, #412]	; (8006580 <ai_platform_api_get_network_report+0x524>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	2a00      	cmp	r2, #0
 80063ec:	d1fc      	bne.n	80063e8 <ai_platform_api_get_network_report+0x38c>
 80063ee:	4b65      	ldr	r3, [pc, #404]	; (8006584 <ai_platform_api_get_network_report+0x528>)
 80063f0:	4a65      	ldr	r2, [pc, #404]	; (8006588 <ai_platform_api_get_network_report+0x52c>)
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	4b65      	ldr	r3, [pc, #404]	; (800658c <ai_platform_api_get_network_report+0x530>)
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d00e      	beq.n	800641a <ai_platform_api_get_network_report+0x3be>
 80063fc:	e7fe      	b.n	80063fc <ai_platform_api_get_network_report+0x3a0>
 80063fe:	4b64      	ldr	r3, [pc, #400]	; (8006590 <ai_platform_api_get_network_report+0x534>)
 8006400:	2201      	movs	r2, #1
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	2a00      	cmp	r2, #0
 8006408:	d1fc      	bne.n	8006404 <ai_platform_api_get_network_report+0x3a8>
 800640a:	4b62      	ldr	r3, [pc, #392]	; (8006594 <ai_platform_api_get_network_report+0x538>)
 800640c:	4a5e      	ldr	r2, [pc, #376]	; (8006588 <ai_platform_api_get_network_report+0x52c>)
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4b5e      	ldr	r3, [pc, #376]	; (800658c <ai_platform_api_get_network_report+0x530>)
 8006414:	429a      	cmp	r2, r3
 8006416:	d000      	beq.n	800641a <ai_platform_api_get_network_report+0x3be>
 8006418:	e7fe      	b.n	8006418 <ai_platform_api_get_network_report+0x3bc>
 800641a:	f7ff fbc7 	bl	8005bac <_ai_platform_release_crc>
 800641e:	4a56      	ldr	r2, [pc, #344]	; (8006578 <ai_platform_api_get_network_report+0x51c>)
 8006420:	2307      	movs	r3, #7
 8006422:	6163      	str	r3, [r4, #20]
 8006424:	6813      	ldr	r3, [r2, #0]
 8006426:	f023 0301 	bic.w	r3, r3, #1
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	f7ff fbbc 	bl	8005ba8 <_ai_platform_acquire_crc>
 8006430:	4b52      	ldr	r3, [pc, #328]	; (800657c <ai_platform_api_get_network_report+0x520>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800643c:	d00d      	beq.n	800645a <ai_platform_api_get_network_report+0x3fe>
 800643e:	4b50      	ldr	r3, [pc, #320]	; (8006580 <ai_platform_api_get_network_report+0x524>)
 8006440:	2201      	movs	r2, #1
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	2a00      	cmp	r2, #0
 8006448:	d1fc      	bne.n	8006444 <ai_platform_api_get_network_report+0x3e8>
 800644a:	4b4e      	ldr	r3, [pc, #312]	; (8006584 <ai_platform_api_get_network_report+0x528>)
 800644c:	4a4e      	ldr	r2, [pc, #312]	; (8006588 <ai_platform_api_get_network_report+0x52c>)
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	4b4e      	ldr	r3, [pc, #312]	; (800658c <ai_platform_api_get_network_report+0x530>)
 8006454:	429a      	cmp	r2, r3
 8006456:	d00e      	beq.n	8006476 <ai_platform_api_get_network_report+0x41a>
 8006458:	e7fe      	b.n	8006458 <ai_platform_api_get_network_report+0x3fc>
 800645a:	4b4d      	ldr	r3, [pc, #308]	; (8006590 <ai_platform_api_get_network_report+0x534>)
 800645c:	2201      	movs	r2, #1
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	2a00      	cmp	r2, #0
 8006464:	d1fc      	bne.n	8006460 <ai_platform_api_get_network_report+0x404>
 8006466:	4b4b      	ldr	r3, [pc, #300]	; (8006594 <ai_platform_api_get_network_report+0x538>)
 8006468:	4a47      	ldr	r2, [pc, #284]	; (8006588 <ai_platform_api_get_network_report+0x52c>)
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	4b47      	ldr	r3, [pc, #284]	; (800658c <ai_platform_api_get_network_report+0x530>)
 8006470:	429a      	cmp	r2, r3
 8006472:	d000      	beq.n	8006476 <ai_platform_api_get_network_report+0x41a>
 8006474:	e7fe      	b.n	8006474 <ai_platform_api_get_network_report+0x418>
 8006476:	f7ff fb99 	bl	8005bac <_ai_platform_release_crc>
 800647a:	4a3f      	ldr	r2, [pc, #252]	; (8006578 <ai_platform_api_get_network_report+0x51c>)
 800647c:	f240 1301 	movw	r3, #257	; 0x101
 8006480:	6263      	str	r3, [r4, #36]	; 0x24
 8006482:	6813      	ldr	r3, [r2, #0]
 8006484:	f023 0301 	bic.w	r3, r3, #1
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	f7ff fb8d 	bl	8005ba8 <_ai_platform_acquire_crc>
 800648e:	4b3b      	ldr	r3, [pc, #236]	; (800657c <ai_platform_api_get_network_report+0x520>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800649a:	d00d      	beq.n	80064b8 <ai_platform_api_get_network_report+0x45c>
 800649c:	4b38      	ldr	r3, [pc, #224]	; (8006580 <ai_platform_api_get_network_report+0x524>)
 800649e:	2201      	movs	r2, #1
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	2a00      	cmp	r2, #0
 80064a6:	d1fc      	bne.n	80064a2 <ai_platform_api_get_network_report+0x446>
 80064a8:	4b36      	ldr	r3, [pc, #216]	; (8006584 <ai_platform_api_get_network_report+0x528>)
 80064aa:	4a37      	ldr	r2, [pc, #220]	; (8006588 <ai_platform_api_get_network_report+0x52c>)
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	4b36      	ldr	r3, [pc, #216]	; (800658c <ai_platform_api_get_network_report+0x530>)
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d00e      	beq.n	80064d4 <ai_platform_api_get_network_report+0x478>
 80064b6:	e7fe      	b.n	80064b6 <ai_platform_api_get_network_report+0x45a>
 80064b8:	4b35      	ldr	r3, [pc, #212]	; (8006590 <ai_platform_api_get_network_report+0x534>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	2a00      	cmp	r2, #0
 80064c2:	d1fc      	bne.n	80064be <ai_platform_api_get_network_report+0x462>
 80064c4:	4b33      	ldr	r3, [pc, #204]	; (8006594 <ai_platform_api_get_network_report+0x538>)
 80064c6:	4a30      	ldr	r2, [pc, #192]	; (8006588 <ai_platform_api_get_network_report+0x52c>)
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	4b2f      	ldr	r3, [pc, #188]	; (800658c <ai_platform_api_get_network_report+0x530>)
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d000      	beq.n	80064d4 <ai_platform_api_get_network_report+0x478>
 80064d2:	e7fe      	b.n	80064d2 <ai_platform_api_get_network_report+0x476>
 80064d4:	f7ff fb6a 	bl	8005bac <_ai_platform_release_crc>
 80064d8:	f240 4301 	movw	r3, #1025	; 0x401
 80064dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80064de:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80064e0:	4a2e      	ldr	r2, [pc, #184]	; (800659c <ai_platform_api_get_network_report+0x540>)
 80064e2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80064e4:	0e18      	lsrs	r0, r3, #24
 80064e6:	f884 0020 	strb.w	r0, [r4, #32]
 80064ea:	0c18      	lsrs	r0, r3, #16
 80064ec:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
 80064f0:	0a1b      	lsrs	r3, r3, #8
 80064f2:	2000      	movs	r0, #0
 80064f4:	4291      	cmp	r1, r2
 80064f6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80064fa:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 80064fe:	d019      	beq.n	8006534 <ai_platform_api_get_network_report+0x4d8>
 8006500:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8006502:	b386      	cbz	r6, 8006566 <ai_platform_api_get_network_report+0x50a>
 8006504:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8006506:	b373      	cbz	r3, 8006566 <ai_platform_api_get_network_report+0x50a>
 8006508:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800650a:	f104 0754 	add.w	r7, r4, #84	; 0x54
 800650e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8006510:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006514:	e887 0003 	stmia.w	r7, {r0, r1}
 8006518:	6a2b      	ldr	r3, [r5, #32]
 800651a:	b1db      	cbz	r3, 8006554 <ai_platform_api_get_network_report+0x4f8>
 800651c:	8bea      	ldrh	r2, [r5, #30]
 800651e:	b1ca      	cbz	r2, 8006554 <ai_platform_api_get_network_report+0x4f8>
 8006520:	461d      	mov	r5, r3
 8006522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006524:	343c      	adds	r4, #60	; 0x3c
 8006526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006528:	e895 0003 	ldmia.w	r5, {r0, r1}
 800652c:	2601      	movs	r6, #1
 800652e:	e884 0003 	stmia.w	r4, {r0, r1}
 8006532:	e5c8      	b.n	80060c6 <ai_platform_api_get_network_report+0x6a>
 8006534:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8006538:	e893 0003 	ldmia.w	r3, {r0, r1}
 800653c:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8006540:	e883 0003 	stmia.w	r3, {r0, r1}
 8006544:	351c      	adds	r5, #28
 8006546:	e895 0003 	ldmia.w	r5, {r0, r1}
 800654a:	3440      	adds	r4, #64	; 0x40
 800654c:	e884 0003 	stmia.w	r4, {r0, r1}
 8006550:	2601      	movs	r6, #1
 8006552:	e5b8      	b.n	80060c6 <ai_platform_api_get_network_report+0x6a>
 8006554:	2500      	movs	r5, #0
 8006556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006558:	343c      	adds	r4, #60	; 0x3c
 800655a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800655c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006560:	e884 0003 	stmia.w	r4, {r0, r1}
 8006564:	deff      	udf	#255	; 0xff
 8006566:	2500      	movs	r5, #0
 8006568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800656a:	3454      	adds	r4, #84	; 0x54
 800656c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800656e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006572:	e884 0003 	stmia.w	r4, {r0, r1}
 8006576:	deff      	udf	#255	; 0xff
 8006578:	e0002000 	.word	0xe0002000
 800657c:	e0042000 	.word	0xe0042000
 8006580:	58024c08 	.word	0x58024c08
 8006584:	58024c00 	.word	0x58024c00
 8006588:	f407a5c2 	.word	0xf407a5c2
 800658c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006590:	40023008 	.word	0x40023008
 8006594:	40023000 	.word	0x40023000
 8006598:	0800f3a8 	.word	0x0800f3a8
 800659c:	a1facade 	.word	0xa1facade

080065a0 <ai_platform_network_create>:
 80065a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a4:	b082      	sub	sp, #8
 80065a6:	4607      	mov	r7, r0
 80065a8:	4616      	mov	r6, r2
 80065aa:	461d      	mov	r5, r3
 80065ac:	f89d 4020 	ldrb.w	r4, [sp, #32]
 80065b0:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 80065b4:	f7ff faf8 	bl	8005ba8 <_ai_platform_acquire_crc>
 80065b8:	b178      	cbz	r0, 80065da <ai_platform_network_create+0x3a>
 80065ba:	4b5a      	ldr	r3, [pc, #360]	; (8006724 <ai_platform_network_create+0x184>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c6:	4602      	mov	r2, r0
 80065c8:	d00c      	beq.n	80065e4 <ai_platform_network_create+0x44>
 80065ca:	4b57      	ldr	r3, [pc, #348]	; (8006728 <ai_platform_network_create+0x188>)
 80065cc:	2118      	movs	r1, #24
 80065ce:	6019      	str	r1, [r3, #0]
 80065d0:	6819      	ldr	r1, [r3, #0]
 80065d2:	2918      	cmp	r1, #24
 80065d4:	d034      	beq.n	8006640 <ai_platform_network_create+0xa0>
 80065d6:	f7ff fae9 	bl	8005bac <_ai_platform_release_crc>
 80065da:	f241 0033 	movw	r0, #4147	; 0x1033
 80065de:	b002      	add	sp, #8
 80065e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e4:	4b51      	ldr	r3, [pc, #324]	; (800672c <ai_platform_network_create+0x18c>)
 80065e6:	2101      	movs	r1, #1
 80065e8:	6019      	str	r1, [r3, #0]
 80065ea:	2114      	movs	r1, #20
 80065ec:	e001      	b.n	80065f2 <ai_platform_network_create+0x52>
 80065ee:	3901      	subs	r1, #1
 80065f0:	d002      	beq.n	80065f8 <ai_platform_network_create+0x58>
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d1fa      	bne.n	80065ee <ai_platform_network_create+0x4e>
 80065f8:	4b4c      	ldr	r3, [pc, #304]	; (800672c <ai_platform_network_create+0x18c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	b9f3      	cbnz	r3, 800663c <ai_platform_network_create+0x9c>
 80065fe:	4610      	mov	r0, r2
 8006600:	f7ff fad4 	bl	8005bac <_ai_platform_release_crc>
 8006604:	4a4a      	ldr	r2, [pc, #296]	; (8006730 <ai_platform_network_create+0x190>)
 8006606:	6813      	ldr	r3, [r2, #0]
 8006608:	f023 0301 	bic.w	r3, r3, #1
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	f7ff facb 	bl	8005ba8 <_ai_platform_acquire_crc>
 8006612:	4b44      	ldr	r3, [pc, #272]	; (8006724 <ai_platform_network_create+0x184>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800661a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661e:	d015      	beq.n	800664c <ai_platform_network_create+0xac>
 8006620:	4b41      	ldr	r3, [pc, #260]	; (8006728 <ai_platform_network_create+0x188>)
 8006622:	2201      	movs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	2a00      	cmp	r2, #0
 800662a:	d1fc      	bne.n	8006626 <ai_platform_network_create+0x86>
 800662c:	4b41      	ldr	r3, [pc, #260]	; (8006734 <ai_platform_network_create+0x194>)
 800662e:	4a42      	ldr	r2, [pc, #264]	; (8006738 <ai_platform_network_create+0x198>)
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	4b41      	ldr	r3, [pc, #260]	; (800673c <ai_platform_network_create+0x19c>)
 8006636:	429a      	cmp	r2, r3
 8006638:	d016      	beq.n	8006668 <ai_platform_network_create+0xc8>
 800663a:	e7fe      	b.n	800663a <ai_platform_network_create+0x9a>
 800663c:	4610      	mov	r0, r2
 800663e:	e7ca      	b.n	80065d6 <ai_platform_network_create+0x36>
 8006640:	2101      	movs	r1, #1
 8006642:	6019      	str	r1, [r3, #0]
 8006644:	6819      	ldr	r1, [r3, #0]
 8006646:	2900      	cmp	r1, #0
 8006648:	d1fc      	bne.n	8006644 <ai_platform_network_create+0xa4>
 800664a:	e7d8      	b.n	80065fe <ai_platform_network_create+0x5e>
 800664c:	4b37      	ldr	r3, [pc, #220]	; (800672c <ai_platform_network_create+0x18c>)
 800664e:	2201      	movs	r2, #1
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	2a00      	cmp	r2, #0
 8006656:	d1fc      	bne.n	8006652 <ai_platform_network_create+0xb2>
 8006658:	4b39      	ldr	r3, [pc, #228]	; (8006740 <ai_platform_network_create+0x1a0>)
 800665a:	4a37      	ldr	r2, [pc, #220]	; (8006738 <ai_platform_network_create+0x198>)
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	4b36      	ldr	r3, [pc, #216]	; (800673c <ai_platform_network_create+0x19c>)
 8006662:	429a      	cmp	r2, r3
 8006664:	d000      	beq.n	8006668 <ai_platform_network_create+0xc8>
 8006666:	e7fe      	b.n	8006666 <ai_platform_network_create+0xc6>
 8006668:	f7ff faa0 	bl	8005bac <_ai_platform_release_crc>
 800666c:	b1af      	cbz	r7, 800669a <ai_platform_network_create+0xfa>
 800666e:	4b35      	ldr	r3, [pc, #212]	; (8006744 <ai_platform_network_create+0x1a4>)
 8006670:	6033      	str	r3, [r6, #0]
 8006672:	603e      	str	r6, [r7, #0]
 8006674:	f000 fe28 	bl	80072c8 <core_init>
 8006678:	b990      	cbnz	r0, 80066a0 <ai_platform_network_create+0x100>
 800667a:	062d      	lsls	r5, r5, #24
 800667c:	0424      	lsls	r4, r4, #16
 800667e:	2230      	movs	r2, #48	; 0x30
 8006680:	2300      	movs	r3, #0
 8006682:	603b      	str	r3, [r7, #0]
 8006684:	2110      	movs	r1, #16
 8006686:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 800668a:	2000      	movs	r0, #0
 800668c:	432b      	orrs	r3, r5
 800668e:	f362 0007 	bfi	r0, r2, #0, #8
 8006692:	6473      	str	r3, [r6, #68]	; 0x44
 8006694:	f361 201f 	bfi	r0, r1, #8, #24
 8006698:	e7a1      	b.n	80065de <ai_platform_network_create+0x3e>
 800669a:	f241 0010 	movw	r0, #4112	; 0x1010
 800669e:	e79e      	b.n	80065de <ai_platform_network_create+0x3e>
 80066a0:	4a23      	ldr	r2, [pc, #140]	; (8006730 <ai_platform_network_create+0x190>)
 80066a2:	6813      	ldr	r3, [r2, #0]
 80066a4:	f023 0301 	bic.w	r3, r3, #1
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	f7ff fa7d 	bl	8005ba8 <_ai_platform_acquire_crc>
 80066ae:	4b1d      	ldr	r3, [pc, #116]	; (8006724 <ai_platform_network_create+0x184>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ba:	d00d      	beq.n	80066d8 <ai_platform_network_create+0x138>
 80066bc:	4b1a      	ldr	r3, [pc, #104]	; (8006728 <ai_platform_network_create+0x188>)
 80066be:	2201      	movs	r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	2a00      	cmp	r2, #0
 80066c6:	d1fc      	bne.n	80066c2 <ai_platform_network_create+0x122>
 80066c8:	4b1a      	ldr	r3, [pc, #104]	; (8006734 <ai_platform_network_create+0x194>)
 80066ca:	4a1b      	ldr	r2, [pc, #108]	; (8006738 <ai_platform_network_create+0x198>)
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	4b1a      	ldr	r3, [pc, #104]	; (800673c <ai_platform_network_create+0x19c>)
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d00e      	beq.n	80066f4 <ai_platform_network_create+0x154>
 80066d6:	e7fe      	b.n	80066d6 <ai_platform_network_create+0x136>
 80066d8:	4b14      	ldr	r3, [pc, #80]	; (800672c <ai_platform_network_create+0x18c>)
 80066da:	2201      	movs	r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	2a00      	cmp	r2, #0
 80066e2:	d1fc      	bne.n	80066de <ai_platform_network_create+0x13e>
 80066e4:	4b16      	ldr	r3, [pc, #88]	; (8006740 <ai_platform_network_create+0x1a0>)
 80066e6:	4a14      	ldr	r2, [pc, #80]	; (8006738 <ai_platform_network_create+0x198>)
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	4b13      	ldr	r3, [pc, #76]	; (800673c <ai_platform_network_create+0x19c>)
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d000      	beq.n	80066f4 <ai_platform_network_create+0x154>
 80066f2:	e7fe      	b.n	80066f2 <ai_platform_network_create+0x152>
 80066f4:	062d      	lsls	r5, r5, #24
 80066f6:	0424      	lsls	r4, r4, #16
 80066f8:	f7ff fa58 	bl	8005bac <_ai_platform_release_crc>
 80066fc:	ea45 0304 	orr.w	r3, r5, r4
 8006700:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8006704:	d001      	beq.n	800670a <ai_platform_network_create+0x16a>
 8006706:	2201      	movs	r2, #1
 8006708:	e7ba      	b.n	8006680 <ai_platform_network_create+0xe0>
 800670a:	a802      	add	r0, sp, #8
 800670c:	4b0e      	ldr	r3, [pc, #56]	; (8006748 <ai_platform_network_create+0x1a8>)
 800670e:	f840 3d04 	str.w	r3, [r0, #-4]!
 8006712:	f002 fe81 	bl	8009418 <ai_check_custom_types>
 8006716:	b110      	cbz	r0, 800671e <ai_platform_network_create+0x17e>
 8006718:	2100      	movs	r1, #0
 800671a:	460a      	mov	r2, r1
 800671c:	e7b3      	b.n	8006686 <ai_platform_network_create+0xe6>
 800671e:	2202      	movs	r2, #2
 8006720:	e7ae      	b.n	8006680 <ai_platform_network_create+0xe0>
 8006722:	bf00      	nop
 8006724:	e0042000 	.word	0xe0042000
 8006728:	58024c08 	.word	0x58024c08
 800672c:	40023008 	.word	0x40023008
 8006730:	e0002000 	.word	0xe0002000
 8006734:	58024c00 	.word	0x58024c00
 8006738:	f407a5c2 	.word	0xf407a5c2
 800673c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006740:	40023000 	.word	0x40023000
 8006744:	a1c00100 	.word	0xa1c00100
 8006748:	84048403 	.word	0x84048403

0800674c <ai_platform_network_destroy>:
 800674c:	b510      	push	{r4, lr}
 800674e:	4604      	mov	r4, r0
 8006750:	b118      	cbz	r0, 800675a <ai_platform_network_destroy+0xe>
 8006752:	4b31      	ldr	r3, [pc, #196]	; (8006818 <ai_platform_network_destroy+0xcc>)
 8006754:	6802      	ldr	r2, [r0, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d02d      	beq.n	80067b6 <ai_platform_network_destroy+0x6a>
 800675a:	4a30      	ldr	r2, [pc, #192]	; (800681c <ai_platform_network_destroy+0xd0>)
 800675c:	6813      	ldr	r3, [r2, #0]
 800675e:	f023 0301 	bic.w	r3, r3, #1
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	f7ff fa20 	bl	8005ba8 <_ai_platform_acquire_crc>
 8006768:	4b2d      	ldr	r3, [pc, #180]	; (8006820 <ai_platform_network_destroy+0xd4>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006774:	d00d      	beq.n	8006792 <ai_platform_network_destroy+0x46>
 8006776:	4b2b      	ldr	r3, [pc, #172]	; (8006824 <ai_platform_network_destroy+0xd8>)
 8006778:	2201      	movs	r2, #1
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	2a00      	cmp	r2, #0
 8006780:	d1fc      	bne.n	800677c <ai_platform_network_destroy+0x30>
 8006782:	4b29      	ldr	r3, [pc, #164]	; (8006828 <ai_platform_network_destroy+0xdc>)
 8006784:	4a29      	ldr	r2, [pc, #164]	; (800682c <ai_platform_network_destroy+0xe0>)
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	4b29      	ldr	r3, [pc, #164]	; (8006830 <ai_platform_network_destroy+0xe4>)
 800678c:	429a      	cmp	r2, r3
 800678e:	d00e      	beq.n	80067ae <ai_platform_network_destroy+0x62>
 8006790:	e7fe      	b.n	8006790 <ai_platform_network_destroy+0x44>
 8006792:	4b28      	ldr	r3, [pc, #160]	; (8006834 <ai_platform_network_destroy+0xe8>)
 8006794:	2201      	movs	r2, #1
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	2a00      	cmp	r2, #0
 800679c:	d1fc      	bne.n	8006798 <ai_platform_network_destroy+0x4c>
 800679e:	4b26      	ldr	r3, [pc, #152]	; (8006838 <ai_platform_network_destroy+0xec>)
 80067a0:	4a22      	ldr	r2, [pc, #136]	; (800682c <ai_platform_network_destroy+0xe0>)
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	4b22      	ldr	r3, [pc, #136]	; (8006830 <ai_platform_network_destroy+0xe4>)
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d000      	beq.n	80067ae <ai_platform_network_destroy+0x62>
 80067ac:	e7fe      	b.n	80067ac <ai_platform_network_destroy+0x60>
 80067ae:	f7ff f9fd 	bl	8005bac <_ai_platform_release_crc>
 80067b2:	4620      	mov	r0, r4
 80067b4:	bd10      	pop	{r4, pc}
 80067b6:	4a19      	ldr	r2, [pc, #100]	; (800681c <ai_platform_network_destroy+0xd0>)
 80067b8:	6813      	ldr	r3, [r2, #0]
 80067ba:	f023 0301 	bic.w	r3, r3, #1
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	f7ff f9f2 	bl	8005ba8 <_ai_platform_acquire_crc>
 80067c4:	4b16      	ldr	r3, [pc, #88]	; (8006820 <ai_platform_network_destroy+0xd4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d0:	d00d      	beq.n	80067ee <ai_platform_network_destroy+0xa2>
 80067d2:	4b14      	ldr	r3, [pc, #80]	; (8006824 <ai_platform_network_destroy+0xd8>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	2a00      	cmp	r2, #0
 80067dc:	d1fc      	bne.n	80067d8 <ai_platform_network_destroy+0x8c>
 80067de:	4b12      	ldr	r3, [pc, #72]	; (8006828 <ai_platform_network_destroy+0xdc>)
 80067e0:	4a12      	ldr	r2, [pc, #72]	; (800682c <ai_platform_network_destroy+0xe0>)
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	4b12      	ldr	r3, [pc, #72]	; (8006830 <ai_platform_network_destroy+0xe4>)
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d00e      	beq.n	800680a <ai_platform_network_destroy+0xbe>
 80067ec:	e7fe      	b.n	80067ec <ai_platform_network_destroy+0xa0>
 80067ee:	4b11      	ldr	r3, [pc, #68]	; (8006834 <ai_platform_network_destroy+0xe8>)
 80067f0:	2201      	movs	r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	2a00      	cmp	r2, #0
 80067f8:	d1fc      	bne.n	80067f4 <ai_platform_network_destroy+0xa8>
 80067fa:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <ai_platform_network_destroy+0xec>)
 80067fc:	4a0b      	ldr	r2, [pc, #44]	; (800682c <ai_platform_network_destroy+0xe0>)
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <ai_platform_network_destroy+0xe4>)
 8006804:	429a      	cmp	r2, r3
 8006806:	d000      	beq.n	800680a <ai_platform_network_destroy+0xbe>
 8006808:	e7fe      	b.n	8006808 <ai_platform_network_destroy+0xbc>
 800680a:	f7ff f9cf 	bl	8005bac <_ai_platform_release_crc>
 800680e:	4620      	mov	r0, r4
 8006810:	f002 fea6 	bl	8009560 <ai_layers_destroy_all>
 8006814:	2400      	movs	r4, #0
 8006816:	e7cc      	b.n	80067b2 <ai_platform_network_destroy+0x66>
 8006818:	a1c00100 	.word	0xa1c00100
 800681c:	e0002000 	.word	0xe0002000
 8006820:	e0042000 	.word	0xe0042000
 8006824:	58024c08 	.word	0x58024c08
 8006828:	58024c00 	.word	0x58024c00
 800682c:	f407a5c2 	.word	0xf407a5c2
 8006830:	b5e8b5cd 	.word	0xb5e8b5cd
 8006834:	40023008 	.word	0x40023008
 8006838:	40023000 	.word	0x40023000

0800683c <ai_platform_network_init>:
 800683c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006840:	2800      	cmp	r0, #0
 8006842:	d04d      	beq.n	80068e0 <ai_platform_network_init+0xa4>
 8006844:	4b7c      	ldr	r3, [pc, #496]	; (8006a38 <ai_platform_network_init+0x1fc>)
 8006846:	6802      	ldr	r2, [r0, #0]
 8006848:	429a      	cmp	r2, r3
 800684a:	4604      	mov	r4, r0
 800684c:	d148      	bne.n	80068e0 <ai_platform_network_init+0xa4>
 800684e:	4a7b      	ldr	r2, [pc, #492]	; (8006a3c <ai_platform_network_init+0x200>)
 8006850:	6813      	ldr	r3, [r2, #0]
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	460d      	mov	r5, r1
 800685a:	f7ff f9a5 	bl	8005ba8 <_ai_platform_acquire_crc>
 800685e:	4b78      	ldr	r3, [pc, #480]	; (8006a40 <ai_platform_network_init+0x204>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686a:	d00d      	beq.n	8006888 <ai_platform_network_init+0x4c>
 800686c:	4b75      	ldr	r3, [pc, #468]	; (8006a44 <ai_platform_network_init+0x208>)
 800686e:	2201      	movs	r2, #1
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	2a00      	cmp	r2, #0
 8006876:	d1fc      	bne.n	8006872 <ai_platform_network_init+0x36>
 8006878:	4b73      	ldr	r3, [pc, #460]	; (8006a48 <ai_platform_network_init+0x20c>)
 800687a:	4a74      	ldr	r2, [pc, #464]	; (8006a4c <ai_platform_network_init+0x210>)
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	4b73      	ldr	r3, [pc, #460]	; (8006a50 <ai_platform_network_init+0x214>)
 8006882:	429a      	cmp	r2, r3
 8006884:	d00d      	beq.n	80068a2 <ai_platform_network_init+0x66>
 8006886:	e7fe      	b.n	8006886 <ai_platform_network_init+0x4a>
 8006888:	4b72      	ldr	r3, [pc, #456]	; (8006a54 <ai_platform_network_init+0x218>)
 800688a:	2201      	movs	r2, #1
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	2a00      	cmp	r2, #0
 8006892:	d1fc      	bne.n	800688e <ai_platform_network_init+0x52>
 8006894:	4b70      	ldr	r3, [pc, #448]	; (8006a58 <ai_platform_network_init+0x21c>)
 8006896:	4a6d      	ldr	r2, [pc, #436]	; (8006a4c <ai_platform_network_init+0x210>)
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	4b6c      	ldr	r3, [pc, #432]	; (8006a50 <ai_platform_network_init+0x214>)
 800689e:	429a      	cmp	r2, r3
 80068a0:	d11d      	bne.n	80068de <ai_platform_network_init+0xa2>
 80068a2:	f7ff f983 	bl	8005bac <_ai_platform_release_crc>
 80068a6:	2d00      	cmp	r5, #0
 80068a8:	d076      	beq.n	8006998 <ai_platform_network_init+0x15c>
 80068aa:	4b6c      	ldr	r3, [pc, #432]	; (8006a5c <ai_platform_network_init+0x220>)
 80068ac:	682a      	ldr	r2, [r5, #0]
 80068ae:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d030      	beq.n	8006918 <ai_platform_network_init+0xdc>
 80068b6:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80068b8:	46a9      	mov	r9, r5
 80068ba:	f105 0118 	add.w	r1, r5, #24
 80068be:	2e00      	cmp	r6, #0
 80068c0:	f000 8095 	beq.w	80069ee <ai_platform_network_init+0x1b2>
 80068c4:	f1bc 0f00 	cmp.w	ip, #0
 80068c8:	f000 80a4 	beq.w	8006a14 <ai_platform_network_init+0x1d8>
 80068cc:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 80068d0:	f1b8 0f01 	cmp.w	r8, #1
 80068d4:	d16a      	bne.n	80069ac <ai_platform_network_init+0x170>
 80068d6:	2700      	movs	r7, #0
 80068d8:	468c      	mov	ip, r1
 80068da:	83a7      	strh	r7, [r4, #28]
 80068dc:	e028      	b.n	8006930 <ai_platform_network_init+0xf4>
 80068de:	e7fe      	b.n	80068de <ai_platform_network_init+0xa2>
 80068e0:	4a56      	ldr	r2, [pc, #344]	; (8006a3c <ai_platform_network_init+0x200>)
 80068e2:	6813      	ldr	r3, [r2, #0]
 80068e4:	f023 0301 	bic.w	r3, r3, #1
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	f7ff f95d 	bl	8005ba8 <_ai_platform_acquire_crc>
 80068ee:	4b54      	ldr	r3, [pc, #336]	; (8006a40 <ai_platform_network_init+0x204>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068fa:	d067      	beq.n	80069cc <ai_platform_network_init+0x190>
 80068fc:	4b51      	ldr	r3, [pc, #324]	; (8006a44 <ai_platform_network_init+0x208>)
 80068fe:	2201      	movs	r2, #1
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	2a00      	cmp	r2, #0
 8006906:	d1fc      	bne.n	8006902 <ai_platform_network_init+0xc6>
 8006908:	4b4f      	ldr	r3, [pc, #316]	; (8006a48 <ai_platform_network_init+0x20c>)
 800690a:	4a50      	ldr	r2, [pc, #320]	; (8006a4c <ai_platform_network_init+0x210>)
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	4b4f      	ldr	r3, [pc, #316]	; (8006a50 <ai_platform_network_init+0x214>)
 8006912:	429a      	cmp	r2, r3
 8006914:	d067      	beq.n	80069e6 <ai_platform_network_init+0x1aa>
 8006916:	e7fe      	b.n	8006916 <ai_platform_network_init+0xda>
 8006918:	8be1      	ldrh	r1, [r4, #30]
 800691a:	88eb      	ldrh	r3, [r5, #6]
 800691c:	89af      	ldrh	r7, [r5, #12]
 800691e:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 8006922:	88aa      	ldrh	r2, [r5, #4]
 8006924:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8006928:	428b      	cmp	r3, r1
 800692a:	d13f      	bne.n	80069ac <ai_platform_network_init+0x170>
 800692c:	83a2      	strh	r2, [r4, #28]
 800692e:	b19b      	cbz	r3, 8006958 <ai_platform_network_init+0x11c>
 8006930:	f04f 0e00 	mov.w	lr, #0
 8006934:	46f2      	mov	sl, lr
 8006936:	eb09 060e 	add.w	r6, r9, lr
 800693a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800693c:	6a25      	ldr	r5, [r4, #32]
 800693e:	4475      	add	r5, lr
 8006940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006942:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006946:	e885 0003 	stmia.w	r5, {r0, r1}
 800694a:	8be3      	ldrh	r3, [r4, #30]
 800694c:	f10a 0a01 	add.w	sl, sl, #1
 8006950:	459a      	cmp	sl, r3
 8006952:	f10e 0e18 	add.w	lr, lr, #24
 8006956:	d3ee      	bcc.n	8006936 <ai_platform_network_init+0xfa>
 8006958:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800695a:	4598      	cmp	r8, r3
 800695c:	d12e      	bne.n	80069bc <ai_platform_network_init+0x180>
 800695e:	84a7      	strh	r7, [r4, #36]	; 0x24
 8006960:	f1b8 0f00 	cmp.w	r8, #0
 8006964:	d012      	beq.n	800698c <ai_platform_network_init+0x150>
 8006966:	2700      	movs	r7, #0
 8006968:	46be      	mov	lr, r7
 800696a:	eb0c 0607 	add.w	r6, ip, r7
 800696e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006970:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006972:	443d      	add	r5, r7
 8006974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006976:	e896 0003 	ldmia.w	r6, {r0, r1}
 800697a:	e885 0003 	stmia.w	r5, {r0, r1}
 800697e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006980:	f10e 0e01 	add.w	lr, lr, #1
 8006984:	459e      	cmp	lr, r3
 8006986:	f107 0718 	add.w	r7, r7, #24
 800698a:	d3ee      	bcc.n	800696a <ai_platform_network_init+0x12e>
 800698c:	2303      	movs	r3, #3
 800698e:	60e3      	str	r3, [r4, #12]
 8006990:	4620      	mov	r0, r4
 8006992:	f002 fd6b 	bl	800946c <ai_layers_init_all>
 8006996:	e006      	b.n	80069a6 <ai_platform_network_init+0x16a>
 8006998:	f104 0010 	add.w	r0, r4, #16
 800699c:	2211      	movs	r2, #17
 800699e:	2110      	movs	r1, #16
 80069a0:	462c      	mov	r4, r5
 80069a2:	f000 fc99 	bl	80072d8 <core_set_error>
 80069a6:	4620      	mov	r0, r4
 80069a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ac:	f104 0010 	add.w	r0, r4, #16
 80069b0:	2212      	movs	r2, #18
 80069b2:	2116      	movs	r1, #22
 80069b4:	f000 fc90 	bl	80072d8 <core_set_error>
 80069b8:	2400      	movs	r4, #0
 80069ba:	e7f4      	b.n	80069a6 <ai_platform_network_init+0x16a>
 80069bc:	f104 0010 	add.w	r0, r4, #16
 80069c0:	2213      	movs	r2, #19
 80069c2:	2116      	movs	r1, #22
 80069c4:	f000 fc88 	bl	80072d8 <core_set_error>
 80069c8:	2400      	movs	r4, #0
 80069ca:	e7ec      	b.n	80069a6 <ai_platform_network_init+0x16a>
 80069cc:	4b21      	ldr	r3, [pc, #132]	; (8006a54 <ai_platform_network_init+0x218>)
 80069ce:	2201      	movs	r2, #1
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	2a00      	cmp	r2, #0
 80069d6:	d1fc      	bne.n	80069d2 <ai_platform_network_init+0x196>
 80069d8:	4b1f      	ldr	r3, [pc, #124]	; (8006a58 <ai_platform_network_init+0x21c>)
 80069da:	4a1c      	ldr	r2, [pc, #112]	; (8006a4c <ai_platform_network_init+0x210>)
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	4b1b      	ldr	r3, [pc, #108]	; (8006a50 <ai_platform_network_init+0x214>)
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d115      	bne.n	8006a12 <ai_platform_network_init+0x1d6>
 80069e6:	f7ff f8e1 	bl	8005bac <_ai_platform_release_crc>
 80069ea:	2400      	movs	r4, #0
 80069ec:	e7db      	b.n	80069a6 <ai_platform_network_init+0x16a>
 80069ee:	8c28      	ldrh	r0, [r5, #32]
 80069f0:	8bea      	ldrh	r2, [r5, #30]
 80069f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069f4:	fb02 f200 	mul.w	r2, r2, r0
 80069f8:	fb03 f302 	mul.w	r3, r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f43f af61 	beq.w	80068c4 <ai_platform_network_init+0x88>
 8006a02:	f104 0010 	add.w	r0, r4, #16
 8006a06:	2213      	movs	r2, #19
 8006a08:	2110      	movs	r1, #16
 8006a0a:	4634      	mov	r4, r6
 8006a0c:	f000 fc64 	bl	80072d8 <core_set_error>
 8006a10:	e7c9      	b.n	80069a6 <ai_platform_network_init+0x16a>
 8006a12:	e7fe      	b.n	8006a12 <ai_platform_network_init+0x1d6>
 8006a14:	8928      	ldrh	r0, [r5, #8]
 8006a16:	88ea      	ldrh	r2, [r5, #6]
 8006a18:	68eb      	ldr	r3, [r5, #12]
 8006a1a:	fb02 f200 	mul.w	r2, r2, r0
 8006a1e:	fb03 f302 	mul.w	r3, r3, r2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f43f af52 	beq.w	80068cc <ai_platform_network_init+0x90>
 8006a28:	f104 0010 	add.w	r0, r4, #16
 8006a2c:	2212      	movs	r2, #18
 8006a2e:	2110      	movs	r1, #16
 8006a30:	4664      	mov	r4, ip
 8006a32:	f000 fc51 	bl	80072d8 <core_set_error>
 8006a36:	e7b6      	b.n	80069a6 <ai_platform_network_init+0x16a>
 8006a38:	a1c00100 	.word	0xa1c00100
 8006a3c:	e0002000 	.word	0xe0002000
 8006a40:	e0042000 	.word	0xe0042000
 8006a44:	58024c08 	.word	0x58024c08
 8006a48:	58024c00 	.word	0x58024c00
 8006a4c:	f407a5c2 	.word	0xf407a5c2
 8006a50:	b5e8b5cd 	.word	0xb5e8b5cd
 8006a54:	40023008 	.word	0x40023008
 8006a58:	40023000 	.word	0x40023000
 8006a5c:	a1facade 	.word	0xa1facade

08006a60 <ai_platform_network_post_init>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	b120      	cbz	r0, 8006a6e <ai_platform_network_post_init+0xe>
 8006a64:	4b3f      	ldr	r3, [pc, #252]	; (8006b64 <ai_platform_network_post_init+0x104>)
 8006a66:	6802      	ldr	r2, [r0, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	d02d      	beq.n	8006aca <ai_platform_network_post_init+0x6a>
 8006a6e:	4a3e      	ldr	r2, [pc, #248]	; (8006b68 <ai_platform_network_post_init+0x108>)
 8006a70:	6813      	ldr	r3, [r2, #0]
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	f7ff f896 	bl	8005ba8 <_ai_platform_acquire_crc>
 8006a7c:	4b3b      	ldr	r3, [pc, #236]	; (8006b6c <ai_platform_network_post_init+0x10c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a88:	d00d      	beq.n	8006aa6 <ai_platform_network_post_init+0x46>
 8006a8a:	4b39      	ldr	r3, [pc, #228]	; (8006b70 <ai_platform_network_post_init+0x110>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	2a00      	cmp	r2, #0
 8006a94:	d1fc      	bne.n	8006a90 <ai_platform_network_post_init+0x30>
 8006a96:	4b37      	ldr	r3, [pc, #220]	; (8006b74 <ai_platform_network_post_init+0x114>)
 8006a98:	4a37      	ldr	r2, [pc, #220]	; (8006b78 <ai_platform_network_post_init+0x118>)
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	4b37      	ldr	r3, [pc, #220]	; (8006b7c <ai_platform_network_post_init+0x11c>)
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d00d      	beq.n	8006ac0 <ai_platform_network_post_init+0x60>
 8006aa4:	e7fe      	b.n	8006aa4 <ai_platform_network_post_init+0x44>
 8006aa6:	4b36      	ldr	r3, [pc, #216]	; (8006b80 <ai_platform_network_post_init+0x120>)
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	2a00      	cmp	r2, #0
 8006ab0:	d1fc      	bne.n	8006aac <ai_platform_network_post_init+0x4c>
 8006ab2:	4b34      	ldr	r3, [pc, #208]	; (8006b84 <ai_platform_network_post_init+0x124>)
 8006ab4:	4a30      	ldr	r2, [pc, #192]	; (8006b78 <ai_platform_network_post_init+0x118>)
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b30      	ldr	r3, [pc, #192]	; (8006b7c <ai_platform_network_post_init+0x11c>)
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d103      	bne.n	8006ac8 <ai_platform_network_post_init+0x68>
 8006ac0:	f7ff f874 	bl	8005bac <_ai_platform_release_crc>
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
 8006ac8:	e7fe      	b.n	8006ac8 <ai_platform_network_post_init+0x68>
 8006aca:	4a27      	ldr	r2, [pc, #156]	; (8006b68 <ai_platform_network_post_init+0x108>)
 8006acc:	6813      	ldr	r3, [r2, #0]
 8006ace:	f023 0301 	bic.w	r3, r3, #1
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	f7ff f868 	bl	8005ba8 <_ai_platform_acquire_crc>
 8006ad8:	4b24      	ldr	r3, [pc, #144]	; (8006b6c <ai_platform_network_post_init+0x10c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae4:	d00d      	beq.n	8006b02 <ai_platform_network_post_init+0xa2>
 8006ae6:	4b22      	ldr	r3, [pc, #136]	; (8006b70 <ai_platform_network_post_init+0x110>)
 8006ae8:	2201      	movs	r2, #1
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	2a00      	cmp	r2, #0
 8006af0:	d1fc      	bne.n	8006aec <ai_platform_network_post_init+0x8c>
 8006af2:	4b20      	ldr	r3, [pc, #128]	; (8006b74 <ai_platform_network_post_init+0x114>)
 8006af4:	4a20      	ldr	r2, [pc, #128]	; (8006b78 <ai_platform_network_post_init+0x118>)
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b20      	ldr	r3, [pc, #128]	; (8006b7c <ai_platform_network_post_init+0x11c>)
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d00e      	beq.n	8006b1e <ai_platform_network_post_init+0xbe>
 8006b00:	e7fe      	b.n	8006b00 <ai_platform_network_post_init+0xa0>
 8006b02:	4b1f      	ldr	r3, [pc, #124]	; (8006b80 <ai_platform_network_post_init+0x120>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	2a00      	cmp	r2, #0
 8006b0c:	d1fc      	bne.n	8006b08 <ai_platform_network_post_init+0xa8>
 8006b0e:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <ai_platform_network_post_init+0x124>)
 8006b10:	4a19      	ldr	r2, [pc, #100]	; (8006b78 <ai_platform_network_post_init+0x118>)
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4b19      	ldr	r3, [pc, #100]	; (8006b7c <ai_platform_network_post_init+0x11c>)
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d000      	beq.n	8006b1e <ai_platform_network_post_init+0xbe>
 8006b1c:	e7fe      	b.n	8006b1c <ai_platform_network_post_init+0xbc>
 8006b1e:	f7ff f845 	bl	8005bac <_ai_platform_release_crc>
 8006b22:	68e3      	ldr	r3, [r4, #12]
 8006b24:	f013 0502 	ands.w	r5, r3, #2
 8006b28:	d011      	beq.n	8006b4e <ai_platform_network_post_init+0xee>
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f002 fcb2 	bl	8009494 <ai_layers_post_init_all>
 8006b30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b32:	b1a3      	cbz	r3, 8006b5e <ai_platform_network_post_init+0xfe>
 8006b34:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006b36:	b195      	cbz	r5, 8006b5e <ai_platform_network_post_init+0xfe>
 8006b38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	4798      	blx	r3
 8006b40:	692b      	ldr	r3, [r5, #16]
 8006b42:	42ab      	cmp	r3, r5
 8006b44:	d00b      	beq.n	8006b5e <ai_platform_network_post_init+0xfe>
 8006b46:	461d      	mov	r5, r3
 8006b48:	b14b      	cbz	r3, 8006b5e <ai_platform_network_post_init+0xfe>
 8006b4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b4c:	e7f4      	b.n	8006b38 <ai_platform_network_post_init+0xd8>
 8006b4e:	f104 0010 	add.w	r0, r4, #16
 8006b52:	2210      	movs	r2, #16
 8006b54:	2111      	movs	r1, #17
 8006b56:	f000 fbbf 	bl	80072d8 <core_set_error>
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	bd38      	pop	{r3, r4, r5, pc}
 8006b5e:	2001      	movs	r0, #1
 8006b60:	bd38      	pop	{r3, r4, r5, pc}
 8006b62:	bf00      	nop
 8006b64:	a1c00100 	.word	0xa1c00100
 8006b68:	e0002000 	.word	0xe0002000
 8006b6c:	e0042000 	.word	0xe0042000
 8006b70:	58024c08 	.word	0x58024c08
 8006b74:	58024c00 	.word	0x58024c00
 8006b78:	f407a5c2 	.word	0xf407a5c2
 8006b7c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006b80:	40023008 	.word	0x40023008
 8006b84:	40023000 	.word	0x40023000

08006b88 <ai_platform_network_process>:
 8006b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8c:	b085      	sub	sp, #20
 8006b8e:	460d      	mov	r5, r1
 8006b90:	9202      	str	r2, [sp, #8]
 8006b92:	4604      	mov	r4, r0
 8006b94:	b120      	cbz	r0, 8006ba0 <ai_platform_network_process+0x18>
 8006b96:	4b7b      	ldr	r3, [pc, #492]	; (8006d84 <ai_platform_network_process+0x1fc>)
 8006b98:	6802      	ldr	r2, [r0, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	bf18      	it	ne
 8006b9e:	2400      	movne	r4, #0
 8006ba0:	4a79      	ldr	r2, [pc, #484]	; (8006d88 <ai_platform_network_process+0x200>)
 8006ba2:	6813      	ldr	r3, [r2, #0]
 8006ba4:	f023 0301 	bic.w	r3, r3, #1
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	f7fe fffd 	bl	8005ba8 <_ai_platform_acquire_crc>
 8006bae:	4b77      	ldr	r3, [pc, #476]	; (8006d8c <ai_platform_network_process+0x204>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bba:	d00d      	beq.n	8006bd8 <ai_platform_network_process+0x50>
 8006bbc:	4b74      	ldr	r3, [pc, #464]	; (8006d90 <ai_platform_network_process+0x208>)
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	2a00      	cmp	r2, #0
 8006bc6:	d1fc      	bne.n	8006bc2 <ai_platform_network_process+0x3a>
 8006bc8:	4b72      	ldr	r3, [pc, #456]	; (8006d94 <ai_platform_network_process+0x20c>)
 8006bca:	4a73      	ldr	r2, [pc, #460]	; (8006d98 <ai_platform_network_process+0x210>)
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	4b72      	ldr	r3, [pc, #456]	; (8006d9c <ai_platform_network_process+0x214>)
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d00e      	beq.n	8006bf4 <ai_platform_network_process+0x6c>
 8006bd6:	e7fe      	b.n	8006bd6 <ai_platform_network_process+0x4e>
 8006bd8:	4b71      	ldr	r3, [pc, #452]	; (8006da0 <ai_platform_network_process+0x218>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	d1fc      	bne.n	8006bde <ai_platform_network_process+0x56>
 8006be4:	4b6f      	ldr	r3, [pc, #444]	; (8006da4 <ai_platform_network_process+0x21c>)
 8006be6:	4a6c      	ldr	r2, [pc, #432]	; (8006d98 <ai_platform_network_process+0x210>)
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	4b6b      	ldr	r3, [pc, #428]	; (8006d9c <ai_platform_network_process+0x214>)
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d000      	beq.n	8006bf4 <ai_platform_network_process+0x6c>
 8006bf2:	e7fe      	b.n	8006bf2 <ai_platform_network_process+0x6a>
 8006bf4:	f7fe ffda 	bl	8005bac <_ai_platform_release_crc>
 8006bf8:	2c00      	cmp	r4, #0
 8006bfa:	f000 808e 	beq.w	8006d1a <ai_platform_network_process+0x192>
 8006bfe:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8006c00:	2f00      	cmp	r7, #0
 8006c02:	f040 823c 	bne.w	800707e <ai_platform_network_process+0x4f6>
 8006c06:	68e3      	ldr	r3, [r4, #12]
 8006c08:	f003 0303 	and.w	r3, r3, #3
 8006c0c:	f04f 0b00 	mov.w	fp, #0
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	f8c4 b014 	str.w	fp, [r4, #20]
 8006c16:	f040 822b 	bne.w	8007070 <ai_platform_network_process+0x4e8>
 8006c1a:	2d00      	cmp	r5, #0
 8006c1c:	f000 80a8 	beq.w	8006d70 <ai_platform_network_process+0x1e8>
 8006c20:	2f00      	cmp	r7, #0
 8006c22:	f000 80a5 	beq.w	8006d70 <ai_platform_network_process+0x1e8>
 8006c26:	883b      	ldrh	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 80a1 	beq.w	8006d70 <ai_platform_network_process+0x1e8>
 8006c2e:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 8006c32:	9401      	str	r4, [sp, #4]
 8006c34:	46d8      	mov	r8, fp
 8006c36:	4598      	cmp	r8, r3
 8006c38:	f080 80b6 	bcs.w	8006da8 <ai_platform_network_process+0x220>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 80b2 	beq.w	8006da8 <ai_platform_network_process+0x220>
 8006c44:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8006c48:	2e00      	cmp	r6, #0
 8006c4a:	f000 80ad 	beq.w	8006da8 <ai_platform_network_process+0x220>
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	9303      	str	r3, [sp, #12]
 8006c54:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8006c58:	eb13 0a04 	adds.w	sl, r3, r4
 8006c5c:	f000 8087 	beq.w	8006d6e <ai_platform_network_process+0x1e6>
 8006c60:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8006c64:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8006c68:	69b0      	ldr	r0, [r6, #24]
 8006c6a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8006c6e:	6841      	ldr	r1, [r0, #4]
 8006c70:	fb0b f30e 	mul.w	r3, fp, lr
 8006c74:	fb0c f303 	mul.w	r3, ip, r3
 8006c78:	4299      	cmp	r1, r3
 8006c7a:	d36e      	bcc.n	8006d5a <ai_platform_network_process+0x1d2>
 8006c7c:	68f3      	ldr	r3, [r6, #12]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	455a      	cmp	r2, fp
 8006c82:	d16a      	bne.n	8006d5a <ai_platform_network_process+0x1d2>
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	4572      	cmp	r2, lr
 8006c88:	d167      	bne.n	8006d5a <ai_platform_network_process+0x1d2>
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	459c      	cmp	ip, r3
 8006c8e:	d164      	bne.n	8006d5a <ai_platform_network_process+0x1d2>
 8006c90:	6800      	ldr	r0, [r0, #0]
 8006c92:	f002 fcd5 	bl	8009640 <ai_array_get_byte_size>
 8006c96:	68f2      	ldr	r2, [r6, #12]
 8006c98:	6973      	ldr	r3, [r6, #20]
 8006c9a:	68d2      	ldr	r2, [r2, #12]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	fb03 f302 	mul.w	r3, r3, r2
 8006ca2:	4298      	cmp	r0, r3
 8006ca4:	d359      	bcc.n	8006d5a <ai_platform_network_process+0x1d2>
 8006ca6:	69b3      	ldr	r3, [r6, #24]
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	f002 fc71 	bl	8009590 <ai_array_to_buffer_fmt>
 8006cae:	682b      	ldr	r3, [r5, #0]
 8006cb0:	4043      	eors	r3, r0
 8006cb2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8006cb6:	d146      	bne.n	8006d46 <ai_platform_network_process+0x1be>
 8006cb8:	692b      	ldr	r3, [r5, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d03a      	beq.n	8006d34 <ai_platform_network_process+0x1ac>
 8006cbe:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8006cc2:	f1bb 0f00 	cmp.w	fp, #0
 8006cc6:	d02d      	beq.n	8006d24 <ai_platform_network_process+0x19c>
 8006cc8:	68f2      	ldr	r2, [r6, #12]
 8006cca:	6973      	ldr	r3, [r6, #20]
 8006ccc:	68d1      	ldr	r1, [r2, #12]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	fb02 f201 	mul.w	r2, r2, r1
 8006cd4:	f8ca 2008 	str.w	r2, [sl, #8]
 8006cd8:	88ab      	ldrh	r3, [r5, #4]
 8006cda:	fb02 f203 	mul.w	r2, r2, r3
 8006cde:	f8ca 200c 	str.w	r2, [sl, #12]
 8006ce2:	6929      	ldr	r1, [r5, #16]
 8006ce4:	f8ca 1004 	str.w	r1, [sl, #4]
 8006ce8:	692b      	ldr	r3, [r5, #16]
 8006cea:	4413      	add	r3, r2
 8006cec:	9a03      	ldr	r2, [sp, #12]
 8006cee:	5113      	str	r3, [r2, r4]
 8006cf0:	69b0      	ldr	r0, [r6, #24]
 8006cf2:	6803      	ldr	r3, [r0, #0]
 8006cf4:	45d9      	cmp	r9, fp
 8006cf6:	bf38      	it	cc
 8006cf8:	46d9      	movcc	r9, fp
 8006cfa:	009a      	lsls	r2, r3, #2
 8006cfc:	d408      	bmi.n	8006d10 <ai_platform_network_process+0x188>
 8006cfe:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006d02:	1a9b      	subs	r3, r3, r2
 8006d04:	4419      	add	r1, r3
 8006d06:	6081      	str	r1, [r0, #8]
 8006d08:	69b3      	ldr	r3, [r6, #24]
 8006d0a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006d0e:	60da      	str	r2, [r3, #12]
 8006d10:	883b      	ldrh	r3, [r7, #0]
 8006d12:	f108 0801 	add.w	r8, r8, #1
 8006d16:	3518      	adds	r5, #24
 8006d18:	e78d      	b.n	8006c36 <ai_platform_network_process+0xae>
 8006d1a:	46a3      	mov	fp, r4
 8006d1c:	4658      	mov	r0, fp
 8006d1e:	b005      	add	sp, #20
 8006d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d24:	9c01      	ldr	r4, [sp, #4]
 8006d26:	2221      	movs	r2, #33	; 0x21
 8006d28:	f104 0010 	add.w	r0, r4, #16
 8006d2c:	2112      	movs	r1, #18
 8006d2e:	f000 fad3 	bl	80072d8 <core_set_error>
 8006d32:	e7f3      	b.n	8006d1c <ai_platform_network_process+0x194>
 8006d34:	9c01      	ldr	r4, [sp, #4]
 8006d36:	2217      	movs	r2, #23
 8006d38:	f104 0010 	add.w	r0, r4, #16
 8006d3c:	2112      	movs	r1, #18
 8006d3e:	469b      	mov	fp, r3
 8006d40:	f000 faca 	bl	80072d8 <core_set_error>
 8006d44:	e7ea      	b.n	8006d1c <ai_platform_network_process+0x194>
 8006d46:	9c01      	ldr	r4, [sp, #4]
 8006d48:	2219      	movs	r2, #25
 8006d4a:	f104 0010 	add.w	r0, r4, #16
 8006d4e:	2112      	movs	r1, #18
 8006d50:	f000 fac2 	bl	80072d8 <core_set_error>
 8006d54:	f04f 0b00 	mov.w	fp, #0
 8006d58:	e7e0      	b.n	8006d1c <ai_platform_network_process+0x194>
 8006d5a:	9c01      	ldr	r4, [sp, #4]
 8006d5c:	2218      	movs	r2, #24
 8006d5e:	f104 0010 	add.w	r0, r4, #16
 8006d62:	2112      	movs	r1, #18
 8006d64:	f000 fab8 	bl	80072d8 <core_set_error>
 8006d68:	f04f 0b00 	mov.w	fp, #0
 8006d6c:	e7d6      	b.n	8006d1c <ai_platform_network_process+0x194>
 8006d6e:	9c01      	ldr	r4, [sp, #4]
 8006d70:	f104 0010 	add.w	r0, r4, #16
 8006d74:	2217      	movs	r2, #23
 8006d76:	2112      	movs	r1, #18
 8006d78:	f000 faae 	bl	80072d8 <core_set_error>
 8006d7c:	f04f 0b00 	mov.w	fp, #0
 8006d80:	e7cc      	b.n	8006d1c <ai_platform_network_process+0x194>
 8006d82:	bf00      	nop
 8006d84:	a1c00100 	.word	0xa1c00100
 8006d88:	e0002000 	.word	0xe0002000
 8006d8c:	e0042000 	.word	0xe0042000
 8006d90:	58024c08 	.word	0x58024c08
 8006d94:	58024c00 	.word	0x58024c00
 8006d98:	f407a5c2 	.word	0xf407a5c2
 8006d9c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006da0:	40023008 	.word	0x40023008
 8006da4:	40023000 	.word	0x40023000
 8006da8:	9c01      	ldr	r4, [sp, #4]
 8006daa:	9a02      	ldr	r2, [sp, #8]
 8006dac:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8006dae:	2a00      	cmp	r2, #0
 8006db0:	f000 80a9 	beq.w	8006f06 <ai_platform_network_process+0x37e>
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	f240 809b 	bls.w	8006ef0 <ai_platform_network_process+0x368>
 8006dba:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8006dbe:	f11a 0f0c 	cmn.w	sl, #12
 8006dc2:	f000 8095 	beq.w	8006ef0 <ai_platform_network_process+0x368>
 8006dc6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 8090 	beq.w	8006ef0 <ai_platform_network_process+0x368>
 8006dd0:	9d02      	ldr	r5, [sp, #8]
 8006dd2:	9401      	str	r4, [sp, #4]
 8006dd4:	f04f 0800 	mov.w	r8, #0
 8006dd8:	4598      	cmp	r8, r3
 8006dda:	f080 8092 	bcs.w	8006f02 <ai_platform_network_process+0x37a>
 8006dde:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 808d 	beq.w	8006f02 <ai_platform_network_process+0x37a>
 8006de8:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8006dec:	2e00      	cmp	r6, #0
 8006dee:	f000 8088 	beq.w	8006f02 <ai_platform_network_process+0x37a>
 8006df2:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	9302      	str	r3, [sp, #8]
 8006dfa:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8006dfe:	191f      	adds	r7, r3, r4
 8006e00:	f000 812d 	beq.w	800705e <ai_platform_network_process+0x4d6>
 8006e04:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8006e08:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8006e0c:	69b0      	ldr	r0, [r6, #24]
 8006e0e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8006e12:	6841      	ldr	r1, [r0, #4]
 8006e14:	fb0b f30e 	mul.w	r3, fp, lr
 8006e18:	fb0c f303 	mul.w	r3, ip, r3
 8006e1c:	4299      	cmp	r1, r3
 8006e1e:	d366      	bcc.n	8006eee <ai_platform_network_process+0x366>
 8006e20:	68f3      	ldr	r3, [r6, #12]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	455a      	cmp	r2, fp
 8006e26:	d162      	bne.n	8006eee <ai_platform_network_process+0x366>
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	4572      	cmp	r2, lr
 8006e2c:	d15f      	bne.n	8006eee <ai_platform_network_process+0x366>
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	459c      	cmp	ip, r3
 8006e32:	d15c      	bne.n	8006eee <ai_platform_network_process+0x366>
 8006e34:	6800      	ldr	r0, [r0, #0]
 8006e36:	f002 fc03 	bl	8009640 <ai_array_get_byte_size>
 8006e3a:	68f2      	ldr	r2, [r6, #12]
 8006e3c:	6973      	ldr	r3, [r6, #20]
 8006e3e:	68d2      	ldr	r2, [r2, #12]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	fb03 f302 	mul.w	r3, r3, r2
 8006e46:	4298      	cmp	r0, r3
 8006e48:	d351      	bcc.n	8006eee <ai_platform_network_process+0x366>
 8006e4a:	69b3      	ldr	r3, [r6, #24]
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	f002 fb9f 	bl	8009590 <ai_array_to_buffer_fmt>
 8006e52:	682b      	ldr	r3, [r5, #0]
 8006e54:	4043      	eors	r3, r0
 8006e56:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8006e5a:	d13e      	bne.n	8006eda <ai_platform_network_process+0x352>
 8006e5c:	692b      	ldr	r3, [r5, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d032      	beq.n	8006ec8 <ai_platform_network_process+0x340>
 8006e62:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8006e66:	f1bb 0f00 	cmp.w	fp, #0
 8006e6a:	d025      	beq.n	8006eb8 <ai_platform_network_process+0x330>
 8006e6c:	68f2      	ldr	r2, [r6, #12]
 8006e6e:	6973      	ldr	r3, [r6, #20]
 8006e70:	68d1      	ldr	r1, [r2, #12]
 8006e72:	68da      	ldr	r2, [r3, #12]
 8006e74:	fb02 f201 	mul.w	r2, r2, r1
 8006e78:	60ba      	str	r2, [r7, #8]
 8006e7a:	88ab      	ldrh	r3, [r5, #4]
 8006e7c:	fb02 f203 	mul.w	r2, r2, r3
 8006e80:	60fa      	str	r2, [r7, #12]
 8006e82:	6929      	ldr	r1, [r5, #16]
 8006e84:	6079      	str	r1, [r7, #4]
 8006e86:	692b      	ldr	r3, [r5, #16]
 8006e88:	4413      	add	r3, r2
 8006e8a:	9a02      	ldr	r2, [sp, #8]
 8006e8c:	5113      	str	r3, [r2, r4]
 8006e8e:	69b0      	ldr	r0, [r6, #24]
 8006e90:	6803      	ldr	r3, [r0, #0]
 8006e92:	45d9      	cmp	r9, fp
 8006e94:	bf38      	it	cc
 8006e96:	46d9      	movcc	r9, fp
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	d407      	bmi.n	8006eac <ai_platform_network_process+0x324>
 8006e9c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006ea0:	1a9b      	subs	r3, r3, r2
 8006ea2:	4419      	add	r1, r3
 8006ea4:	6081      	str	r1, [r0, #8]
 8006ea6:	69b3      	ldr	r3, [r6, #24]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	60da      	str	r2, [r3, #12]
 8006eac:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006eb0:	f108 0801 	add.w	r8, r8, #1
 8006eb4:	3518      	adds	r5, #24
 8006eb6:	e78f      	b.n	8006dd8 <ai_platform_network_process+0x250>
 8006eb8:	9c01      	ldr	r4, [sp, #4]
 8006eba:	2221      	movs	r2, #33	; 0x21
 8006ebc:	f104 0010 	add.w	r0, r4, #16
 8006ec0:	2113      	movs	r1, #19
 8006ec2:	f000 fa09 	bl	80072d8 <core_set_error>
 8006ec6:	e729      	b.n	8006d1c <ai_platform_network_process+0x194>
 8006ec8:	9c01      	ldr	r4, [sp, #4]
 8006eca:	2217      	movs	r2, #23
 8006ecc:	f104 0010 	add.w	r0, r4, #16
 8006ed0:	2113      	movs	r1, #19
 8006ed2:	469b      	mov	fp, r3
 8006ed4:	f000 fa00 	bl	80072d8 <core_set_error>
 8006ed8:	e720      	b.n	8006d1c <ai_platform_network_process+0x194>
 8006eda:	9c01      	ldr	r4, [sp, #4]
 8006edc:	2219      	movs	r2, #25
 8006ede:	f104 0010 	add.w	r0, r4, #16
 8006ee2:	2113      	movs	r1, #19
 8006ee4:	f000 f9f8 	bl	80072d8 <core_set_error>
 8006ee8:	f04f 0b00 	mov.w	fp, #0
 8006eec:	e716      	b.n	8006d1c <ai_platform_network_process+0x194>
 8006eee:	9c01      	ldr	r4, [sp, #4]
 8006ef0:	f104 0010 	add.w	r0, r4, #16
 8006ef4:	2218      	movs	r2, #24
 8006ef6:	2113      	movs	r1, #19
 8006ef8:	f000 f9ee 	bl	80072d8 <core_set_error>
 8006efc:	f04f 0b00 	mov.w	fp, #0
 8006f00:	e70c      	b.n	8006d1c <ai_platform_network_process+0x194>
 8006f02:	9c01      	ldr	r4, [sp, #4]
 8006f04:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8006f06:	f8a4 9014 	strh.w	r9, [r4, #20]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 80a4 	beq.w	8007058 <ai_platform_network_process+0x4d0>
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8006f14:	f240 809e 	bls.w	8007054 <ai_platform_network_process+0x4cc>
 8006f18:	f105 070c 	add.w	r7, r5, #12
 8006f1c:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8006f20:	8aa3      	ldrh	r3, [r4, #20]
 8006f22:	455b      	cmp	r3, fp
 8006f24:	f67f aefa 	bls.w	8006d1c <ai_platform_network_process+0x194>
 8006f28:	9401      	str	r4, [sp, #4]
 8006f2a:	2d00      	cmp	r5, #0
 8006f2c:	d036      	beq.n	8006f9c <ai_platform_network_process+0x414>
 8006f2e:	882b      	ldrh	r3, [r5, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d033      	beq.n	8006f9c <ai_platform_network_process+0x414>
 8006f34:	686b      	ldr	r3, [r5, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d030      	beq.n	8006f9c <ai_platform_network_process+0x414>
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f04f 0800 	mov.w	r8, #0
 8006f40:	b9db      	cbnz	r3, 8006f7a <ai_platform_network_process+0x3f2>
 8006f42:	e02b      	b.n	8006f9c <ai_platform_network_process+0x414>
 8006f44:	68d4      	ldr	r4, [r2, #12]
 8006f46:	1b00      	subs	r0, r0, r4
 8006f48:	4401      	add	r1, r0
 8006f4a:	6091      	str	r1, [r2, #8]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	6872      	ldr	r2, [r6, #4]
 8006f50:	60da      	str	r2, [r3, #12]
 8006f52:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8006f56:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006f5a:	440b      	add	r3, r1
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	bf24      	itt	cs
 8006f60:	68f3      	ldrcs	r3, [r6, #12]
 8006f62:	1ad3      	subcs	r3, r2, r3
 8006f64:	6073      	str	r3, [r6, #4]
 8006f66:	882b      	ldrh	r3, [r5, #0]
 8006f68:	f108 0801 	add.w	r8, r8, #1
 8006f6c:	4598      	cmp	r8, r3
 8006f6e:	d215      	bcs.n	8006f9c <ai_platform_network_process+0x414>
 8006f70:	686b      	ldr	r3, [r5, #4]
 8006f72:	b19b      	cbz	r3, 8006f9c <ai_platform_network_process+0x414>
 8006f74:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006f78:	b183      	cbz	r3, 8006f9c <ai_platform_network_process+0x414>
 8006f7a:	68a9      	ldr	r1, [r5, #8]
 8006f7c:	699a      	ldr	r2, [r3, #24]
 8006f7e:	f8d1 a000 	ldr.w	sl, [r1]
 8006f82:	6814      	ldr	r4, [r2, #0]
 8006f84:	6890      	ldr	r0, [r2, #8]
 8006f86:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8006f8a:	eb0a 0609 	add.w	r6, sl, r9
 8006f8e:	00a4      	lsls	r4, r4, #2
 8006f90:	6871      	ldr	r1, [r6, #4]
 8006f92:	d5d7      	bpl.n	8006f44 <ai_platform_network_process+0x3bc>
 8006f94:	68b2      	ldr	r2, [r6, #8]
 8006f96:	f002 fba7 	bl	80096e8 <memcpy>
 8006f9a:	e7da      	b.n	8006f52 <ai_platform_network_process+0x3ca>
 8006f9c:	9801      	ldr	r0, [sp, #4]
 8006f9e:	f002 fa91 	bl	80094c4 <ai_layers_forward_all>
 8006fa2:	2f00      	cmp	r7, #0
 8006fa4:	d047      	beq.n	8007036 <ai_platform_network_process+0x4ae>
 8006fa6:	883b      	ldrh	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d044      	beq.n	8007036 <ai_platform_network_process+0x4ae>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d041      	beq.n	8007036 <ai_platform_network_process+0x4ae>
 8006fb2:	6818      	ldr	r0, [r3, #0]
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d03e      	beq.n	8007036 <ai_platform_network_process+0x4ae>
 8006fb8:	f04f 0800 	mov.w	r8, #0
 8006fbc:	e019      	b.n	8006ff2 <ai_platform_network_process+0x46a>
 8006fbe:	f85a 2009 	ldr.w	r2, [sl, r9]
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	bf24      	itt	cs
 8006fc6:	68f3      	ldrcs	r3, [r6, #12]
 8006fc8:	1ad3      	subcs	r3, r2, r3
 8006fca:	6073      	str	r3, [r6, #4]
 8006fcc:	6981      	ldr	r1, [r0, #24]
 8006fce:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8006fd2:	1b12      	subs	r2, r2, r4
 8006fd4:	4413      	add	r3, r2
 8006fd6:	608b      	str	r3, [r1, #8]
 8006fd8:	6983      	ldr	r3, [r0, #24]
 8006fda:	6872      	ldr	r2, [r6, #4]
 8006fdc:	60da      	str	r2, [r3, #12]
 8006fde:	883b      	ldrh	r3, [r7, #0]
 8006fe0:	f108 0801 	add.w	r8, r8, #1
 8006fe4:	4598      	cmp	r8, r3
 8006fe6:	d226      	bcs.n	8007036 <ai_platform_network_process+0x4ae>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	b323      	cbz	r3, 8007036 <ai_platform_network_process+0x4ae>
 8006fec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006ff0:	b308      	cbz	r0, 8007036 <ai_platform_network_process+0x4ae>
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	6981      	ldr	r1, [r0, #24]
 8006ff6:	f8d3 a000 	ldr.w	sl, [r3]
 8006ffa:	680c      	ldr	r4, [r1, #0]
 8006ffc:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007000:	eb0a 0609 	add.w	r6, sl, r9
 8007004:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8007008:	00a4      	lsls	r4, r4, #2
 800700a:	eb0c 0302 	add.w	r3, ip, r2
 800700e:	d5d6      	bpl.n	8006fbe <ai_platform_network_process+0x436>
 8007010:	6889      	ldr	r1, [r1, #8]
 8007012:	4660      	mov	r0, ip
 8007014:	f002 fb68 	bl	80096e8 <memcpy>
 8007018:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800701c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007020:	440b      	add	r3, r1
 8007022:	4293      	cmp	r3, r2
 8007024:	bf24      	itt	cs
 8007026:	68f3      	ldrcs	r3, [r6, #12]
 8007028:	1ad3      	subcs	r3, r2, r3
 800702a:	6073      	str	r3, [r6, #4]
 800702c:	883b      	ldrh	r3, [r7, #0]
 800702e:	f108 0801 	add.w	r8, r8, #1
 8007032:	4598      	cmp	r8, r3
 8007034:	d3d8      	bcc.n	8006fe8 <ai_platform_network_process+0x460>
 8007036:	9b01      	ldr	r3, [sp, #4]
 8007038:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 800703c:	461a      	mov	r2, r3
 800703e:	f10b 0b01 	add.w	fp, fp, #1
 8007042:	8a9b      	ldrh	r3, [r3, #20]
 8007044:	fa1f fb8b 	uxth.w	fp, fp
 8007048:	455b      	cmp	r3, fp
 800704a:	f8a2 b016 	strh.w	fp, [r2, #22]
 800704e:	f63f af6c 	bhi.w	8006f2a <ai_platform_network_process+0x3a2>
 8007052:	e663      	b.n	8006d1c <ai_platform_network_process+0x194>
 8007054:	2700      	movs	r7, #0
 8007056:	e761      	b.n	8006f1c <ai_platform_network_process+0x394>
 8007058:	461d      	mov	r5, r3
 800705a:	461f      	mov	r7, r3
 800705c:	e75e      	b.n	8006f1c <ai_platform_network_process+0x394>
 800705e:	9c01      	ldr	r4, [sp, #4]
 8007060:	2217      	movs	r2, #23
 8007062:	f104 0010 	add.w	r0, r4, #16
 8007066:	2113      	movs	r1, #19
 8007068:	f000 f936 	bl	80072d8 <core_set_error>
 800706c:	46bb      	mov	fp, r7
 800706e:	e655      	b.n	8006d1c <ai_platform_network_process+0x194>
 8007070:	f104 0010 	add.w	r0, r4, #16
 8007074:	2230      	movs	r2, #48	; 0x30
 8007076:	2111      	movs	r1, #17
 8007078:	f000 f92e 	bl	80072d8 <core_set_error>
 800707c:	e64e      	b.n	8006d1c <ai_platform_network_process+0x194>
 800707e:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8007080:	e5c1      	b.n	8006c06 <ai_platform_network_process+0x7e>
 8007082:	bf00      	nop

08007084 <ai_platform_observer_register_s>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	b120      	cbz	r0, 8007092 <ai_platform_observer_register_s+0xe>
 8007088:	4b44      	ldr	r3, [pc, #272]	; (800719c <ai_platform_observer_register_s+0x118>)
 800708a:	6802      	ldr	r2, [r0, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	4604      	mov	r4, r0
 8007090:	d02d      	beq.n	80070ee <ai_platform_observer_register_s+0x6a>
 8007092:	4a43      	ldr	r2, [pc, #268]	; (80071a0 <ai_platform_observer_register_s+0x11c>)
 8007094:	6813      	ldr	r3, [r2, #0]
 8007096:	f023 0301 	bic.w	r3, r3, #1
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	f7fe fd84 	bl	8005ba8 <_ai_platform_acquire_crc>
 80070a0:	4b40      	ldr	r3, [pc, #256]	; (80071a4 <ai_platform_observer_register_s+0x120>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ac:	d00d      	beq.n	80070ca <ai_platform_observer_register_s+0x46>
 80070ae:	4b3e      	ldr	r3, [pc, #248]	; (80071a8 <ai_platform_observer_register_s+0x124>)
 80070b0:	2201      	movs	r2, #1
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	2a00      	cmp	r2, #0
 80070b8:	d1fc      	bne.n	80070b4 <ai_platform_observer_register_s+0x30>
 80070ba:	4b3c      	ldr	r3, [pc, #240]	; (80071ac <ai_platform_observer_register_s+0x128>)
 80070bc:	4a3c      	ldr	r2, [pc, #240]	; (80071b0 <ai_platform_observer_register_s+0x12c>)
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4b3c      	ldr	r3, [pc, #240]	; (80071b4 <ai_platform_observer_register_s+0x130>)
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d00e      	beq.n	80070e6 <ai_platform_observer_register_s+0x62>
 80070c8:	e7fe      	b.n	80070c8 <ai_platform_observer_register_s+0x44>
 80070ca:	4b3b      	ldr	r3, [pc, #236]	; (80071b8 <ai_platform_observer_register_s+0x134>)
 80070cc:	2201      	movs	r2, #1
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	2a00      	cmp	r2, #0
 80070d4:	d1fc      	bne.n	80070d0 <ai_platform_observer_register_s+0x4c>
 80070d6:	4b39      	ldr	r3, [pc, #228]	; (80071bc <ai_platform_observer_register_s+0x138>)
 80070d8:	4a35      	ldr	r2, [pc, #212]	; (80071b0 <ai_platform_observer_register_s+0x12c>)
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	4b35      	ldr	r3, [pc, #212]	; (80071b4 <ai_platform_observer_register_s+0x130>)
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d000      	beq.n	80070e6 <ai_platform_observer_register_s+0x62>
 80070e4:	e7fe      	b.n	80070e4 <ai_platform_observer_register_s+0x60>
 80070e6:	f7fe fd61 	bl	8005bac <_ai_platform_release_crc>
 80070ea:	2000      	movs	r0, #0
 80070ec:	bd38      	pop	{r3, r4, r5, pc}
 80070ee:	4a2c      	ldr	r2, [pc, #176]	; (80071a0 <ai_platform_observer_register_s+0x11c>)
 80070f0:	6813      	ldr	r3, [r2, #0]
 80070f2:	f023 0301 	bic.w	r3, r3, #1
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	460d      	mov	r5, r1
 80070fa:	f7fe fd55 	bl	8005ba8 <_ai_platform_acquire_crc>
 80070fe:	4b29      	ldr	r3, [pc, #164]	; (80071a4 <ai_platform_observer_register_s+0x120>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710a:	d00d      	beq.n	8007128 <ai_platform_observer_register_s+0xa4>
 800710c:	4b26      	ldr	r3, [pc, #152]	; (80071a8 <ai_platform_observer_register_s+0x124>)
 800710e:	2201      	movs	r2, #1
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	2a00      	cmp	r2, #0
 8007116:	d1fc      	bne.n	8007112 <ai_platform_observer_register_s+0x8e>
 8007118:	4b24      	ldr	r3, [pc, #144]	; (80071ac <ai_platform_observer_register_s+0x128>)
 800711a:	4a25      	ldr	r2, [pc, #148]	; (80071b0 <ai_platform_observer_register_s+0x12c>)
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	4b24      	ldr	r3, [pc, #144]	; (80071b4 <ai_platform_observer_register_s+0x130>)
 8007122:	429a      	cmp	r2, r3
 8007124:	d00e      	beq.n	8007144 <ai_platform_observer_register_s+0xc0>
 8007126:	e7fe      	b.n	8007126 <ai_platform_observer_register_s+0xa2>
 8007128:	4b23      	ldr	r3, [pc, #140]	; (80071b8 <ai_platform_observer_register_s+0x134>)
 800712a:	2201      	movs	r2, #1
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	2a00      	cmp	r2, #0
 8007132:	d1fc      	bne.n	800712e <ai_platform_observer_register_s+0xaa>
 8007134:	4b21      	ldr	r3, [pc, #132]	; (80071bc <ai_platform_observer_register_s+0x138>)
 8007136:	4a1e      	ldr	r2, [pc, #120]	; (80071b0 <ai_platform_observer_register_s+0x12c>)
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	4b1d      	ldr	r3, [pc, #116]	; (80071b4 <ai_platform_observer_register_s+0x130>)
 800713e:	429a      	cmp	r2, r3
 8007140:	d000      	beq.n	8007144 <ai_platform_observer_register_s+0xc0>
 8007142:	e7fe      	b.n	8007142 <ai_platform_observer_register_s+0xbe>
 8007144:	f7fe fd32 	bl	8005bac <_ai_platform_release_crc>
 8007148:	b14d      	cbz	r5, 800715e <ai_platform_observer_register_s+0xda>
 800714a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800714c:	b17b      	cbz	r3, 800716e <ai_platform_observer_register_s+0xea>
 800714e:	f104 0010 	add.w	r0, r4, #16
 8007152:	2240      	movs	r2, #64	; 0x40
 8007154:	2111      	movs	r1, #17
 8007156:	f000 f8bf 	bl	80072d8 <core_set_error>
 800715a:	2000      	movs	r0, #0
 800715c:	bd38      	pop	{r3, r4, r5, pc}
 800715e:	f104 0010 	add.w	r0, r4, #16
 8007162:	2211      	movs	r2, #17
 8007164:	2110      	movs	r1, #16
 8007166:	f000 f8b7 	bl	80072d8 <core_set_error>
 800716a:	4628      	mov	r0, r5
 800716c:	bd38      	pop	{r3, r4, r5, pc}
 800716e:	81eb      	strh	r3, [r5, #14]
 8007170:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007172:	b13a      	cbz	r2, 8007184 <ai_platform_observer_register_s+0x100>
 8007174:	3301      	adds	r3, #1
 8007176:	81eb      	strh	r3, [r5, #14]
 8007178:	6911      	ldr	r1, [r2, #16]
 800717a:	4291      	cmp	r1, r2
 800717c:	d002      	beq.n	8007184 <ai_platform_observer_register_s+0x100>
 800717e:	460a      	mov	r2, r1
 8007180:	2900      	cmp	r1, #0
 8007182:	d1f7      	bne.n	8007174 <ai_platform_observer_register_s+0xf0>
 8007184:	7a2b      	ldrb	r3, [r5, #8]
 8007186:	4a0e      	ldr	r2, [pc, #56]	; (80071c0 <ai_platform_observer_register_s+0x13c>)
 8007188:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800718c:	2100      	movs	r1, #0
 800718e:	60ab      	str	r3, [r5, #8]
 8007190:	81a9      	strh	r1, [r5, #12]
 8007192:	e9c4 250f 	strd	r2, r5, [r4, #60]	; 0x3c
 8007196:	2001      	movs	r0, #1
 8007198:	bd38      	pop	{r3, r4, r5, pc}
 800719a:	bf00      	nop
 800719c:	a1c00100 	.word	0xa1c00100
 80071a0:	e0002000 	.word	0xe0002000
 80071a4:	e0042000 	.word	0xe0042000
 80071a8:	58024c08 	.word	0x58024c08
 80071ac:	58024c00 	.word	0x58024c00
 80071b0:	f407a5c2 	.word	0xf407a5c2
 80071b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80071b8:	40023008 	.word	0x40023008
 80071bc:	40023000 	.word	0x40023000
 80071c0:	08005a9d 	.word	0x08005a9d

080071c4 <ai_platform_observer_unregister_s>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	b120      	cbz	r0, 80071d2 <ai_platform_observer_unregister_s+0xe>
 80071c8:	4b36      	ldr	r3, [pc, #216]	; (80072a4 <ai_platform_observer_unregister_s+0xe0>)
 80071ca:	6802      	ldr	r2, [r0, #0]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	4605      	mov	r5, r0
 80071d0:	d02d      	beq.n	800722e <ai_platform_observer_unregister_s+0x6a>
 80071d2:	4a35      	ldr	r2, [pc, #212]	; (80072a8 <ai_platform_observer_unregister_s+0xe4>)
 80071d4:	6813      	ldr	r3, [r2, #0]
 80071d6:	f023 0301 	bic.w	r3, r3, #1
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	f7fe fce4 	bl	8005ba8 <_ai_platform_acquire_crc>
 80071e0:	4b32      	ldr	r3, [pc, #200]	; (80072ac <ai_platform_observer_unregister_s+0xe8>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ec:	d00d      	beq.n	800720a <ai_platform_observer_unregister_s+0x46>
 80071ee:	4b30      	ldr	r3, [pc, #192]	; (80072b0 <ai_platform_observer_unregister_s+0xec>)
 80071f0:	2201      	movs	r2, #1
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	2a00      	cmp	r2, #0
 80071f8:	d1fc      	bne.n	80071f4 <ai_platform_observer_unregister_s+0x30>
 80071fa:	4b2e      	ldr	r3, [pc, #184]	; (80072b4 <ai_platform_observer_unregister_s+0xf0>)
 80071fc:	4a2e      	ldr	r2, [pc, #184]	; (80072b8 <ai_platform_observer_unregister_s+0xf4>)
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	4b2e      	ldr	r3, [pc, #184]	; (80072bc <ai_platform_observer_unregister_s+0xf8>)
 8007204:	429a      	cmp	r2, r3
 8007206:	d00e      	beq.n	8007226 <ai_platform_observer_unregister_s+0x62>
 8007208:	e7fe      	b.n	8007208 <ai_platform_observer_unregister_s+0x44>
 800720a:	4b2d      	ldr	r3, [pc, #180]	; (80072c0 <ai_platform_observer_unregister_s+0xfc>)
 800720c:	2201      	movs	r2, #1
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	2a00      	cmp	r2, #0
 8007214:	d1fc      	bne.n	8007210 <ai_platform_observer_unregister_s+0x4c>
 8007216:	4b2b      	ldr	r3, [pc, #172]	; (80072c4 <ai_platform_observer_unregister_s+0x100>)
 8007218:	4a27      	ldr	r2, [pc, #156]	; (80072b8 <ai_platform_observer_unregister_s+0xf4>)
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4b27      	ldr	r3, [pc, #156]	; (80072bc <ai_platform_observer_unregister_s+0xf8>)
 8007220:	429a      	cmp	r2, r3
 8007222:	d000      	beq.n	8007226 <ai_platform_observer_unregister_s+0x62>
 8007224:	e7fe      	b.n	8007224 <ai_platform_observer_unregister_s+0x60>
 8007226:	f7fe fcc1 	bl	8005bac <_ai_platform_release_crc>
 800722a:	2000      	movs	r0, #0
 800722c:	bd38      	pop	{r3, r4, r5, pc}
 800722e:	4a1e      	ldr	r2, [pc, #120]	; (80072a8 <ai_platform_observer_unregister_s+0xe4>)
 8007230:	6813      	ldr	r3, [r2, #0]
 8007232:	f023 0301 	bic.w	r3, r3, #1
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	460c      	mov	r4, r1
 800723a:	f7fe fcb5 	bl	8005ba8 <_ai_platform_acquire_crc>
 800723e:	4b1b      	ldr	r3, [pc, #108]	; (80072ac <ai_platform_observer_unregister_s+0xe8>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800724a:	d00d      	beq.n	8007268 <ai_platform_observer_unregister_s+0xa4>
 800724c:	4b18      	ldr	r3, [pc, #96]	; (80072b0 <ai_platform_observer_unregister_s+0xec>)
 800724e:	2201      	movs	r2, #1
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	2a00      	cmp	r2, #0
 8007256:	d1fc      	bne.n	8007252 <ai_platform_observer_unregister_s+0x8e>
 8007258:	4b16      	ldr	r3, [pc, #88]	; (80072b4 <ai_platform_observer_unregister_s+0xf0>)
 800725a:	4a17      	ldr	r2, [pc, #92]	; (80072b8 <ai_platform_observer_unregister_s+0xf4>)
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	4b16      	ldr	r3, [pc, #88]	; (80072bc <ai_platform_observer_unregister_s+0xf8>)
 8007262:	429a      	cmp	r2, r3
 8007264:	d00e      	beq.n	8007284 <ai_platform_observer_unregister_s+0xc0>
 8007266:	e7fe      	b.n	8007266 <ai_platform_observer_unregister_s+0xa2>
 8007268:	4b15      	ldr	r3, [pc, #84]	; (80072c0 <ai_platform_observer_unregister_s+0xfc>)
 800726a:	2201      	movs	r2, #1
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	2a00      	cmp	r2, #0
 8007272:	d1fc      	bne.n	800726e <ai_platform_observer_unregister_s+0xaa>
 8007274:	4b13      	ldr	r3, [pc, #76]	; (80072c4 <ai_platform_observer_unregister_s+0x100>)
 8007276:	4a10      	ldr	r2, [pc, #64]	; (80072b8 <ai_platform_observer_unregister_s+0xf4>)
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	4b0f      	ldr	r3, [pc, #60]	; (80072bc <ai_platform_observer_unregister_s+0xf8>)
 800727e:	429a      	cmp	r2, r3
 8007280:	d000      	beq.n	8007284 <ai_platform_observer_unregister_s+0xc0>
 8007282:	e7fe      	b.n	8007282 <ai_platform_observer_unregister_s+0xbe>
 8007284:	f7fe fc92 	bl	8005bac <_ai_platform_release_crc>
 8007288:	b124      	cbz	r4, 8007294 <ai_platform_observer_unregister_s+0xd0>
 800728a:	2300      	movs	r3, #0
 800728c:	e9c5 330f 	strd	r3, r3, [r5, #60]	; 0x3c
 8007290:	2001      	movs	r0, #1
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	f105 0010 	add.w	r0, r5, #16
 8007298:	2211      	movs	r2, #17
 800729a:	2110      	movs	r1, #16
 800729c:	f000 f81c 	bl	80072d8 <core_set_error>
 80072a0:	4620      	mov	r0, r4
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
 80072a4:	a1c00100 	.word	0xa1c00100
 80072a8:	e0002000 	.word	0xe0002000
 80072ac:	e0042000 	.word	0xe0042000
 80072b0:	58024c08 	.word	0x58024c08
 80072b4:	58024c00 	.word	0x58024c00
 80072b8:	f407a5c2 	.word	0xf407a5c2
 80072bc:	b5e8b5cd 	.word	0xb5e8b5cd
 80072c0:	40023008 	.word	0x40023008
 80072c4:	40023000 	.word	0x40023000

080072c8 <core_init>:
 80072c8:	2001      	movs	r0, #1
 80072ca:	4770      	bx	lr

080072cc <core_get_error>:
 80072cc:	4603      	mov	r3, r0
 80072ce:	2200      	movs	r2, #0
 80072d0:	6800      	ldr	r0, [r0, #0]
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop

080072d8 <core_set_error>:
 80072d8:	7803      	ldrb	r3, [r0, #0]
 80072da:	b933      	cbnz	r3, 80072ea <core_set_error+0x12>
 80072dc:	7001      	strb	r1, [r0, #0]
 80072de:	6803      	ldr	r3, [r0, #0]
 80072e0:	f362 231f 	bfi	r3, r2, #8, #24
 80072e4:	6003      	str	r3, [r0, #0]
 80072e6:	2001      	movs	r0, #1
 80072e8:	4770      	bx	lr
 80072ea:	2000      	movs	r0, #0
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop

080072f0 <func_dummy>:
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop

080072f4 <ai_dict8_dot_array_f32>:
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	f8dd c020 	ldr.w	ip, [sp, #32]
 80072fc:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8007300:	f000 80c0 	beq.w	8007484 <ai_dict8_dot_array_f32+0x190>
 8007304:	f101 0408 	add.w	r4, r1, #8
 8007308:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800730c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800748c <ai_dict8_dot_array_f32+0x198>
 8007310:	eb04 0e09 	add.w	lr, r4, r9
 8007314:	f103 0520 	add.w	r5, r3, #32
 8007318:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 800731c:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8007320:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8007324:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8007328:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 800732c:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8007330:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8007334:	ed55 3a04 	vldr	s7, [r5, #-16]
 8007338:	ed55 4a03 	vldr	s9, [r5, #-12]
 800733c:	ed55 5a02 	vldr	s11, [r5, #-8]
 8007340:	ed55 6a01 	vldr	s13, [r5, #-4]
 8007344:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007348:	edd6 7a00 	vldr	s15, [r6]
 800734c:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8007350:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007354:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007358:	ed9a 3a00 	vldr	s6, [sl]
 800735c:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8007360:	eee3 7a05 	vfma.f32	s15, s6, s10
 8007364:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007368:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800736c:	ed97 3a00 	vldr	s6, [r7]
 8007370:	ed96 5a00 	vldr	s10, [r6]
 8007374:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8007378:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 800737c:	eee3 7a04 	vfma.f32	s15, s6, s8
 8007380:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007384:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007388:	ed9a 3a00 	vldr	s6, [sl]
 800738c:	ed96 4a00 	vldr	s8, [r6]
 8007390:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8007394:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007398:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800739c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80073a0:	ed97 5a00 	vldr	s10, [r7]
 80073a4:	ed96 6a00 	vldr	s12, [r6]
 80073a8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80073ac:	3408      	adds	r4, #8
 80073ae:	45a6      	cmp	lr, r4
 80073b0:	f105 0520 	add.w	r5, r5, #32
 80073b4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80073b8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80073bc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80073c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80073c4:	d1a8      	bne.n	8007318 <ai_dict8_dot_array_f32+0x24>
 80073c6:	4449      	add	r1, r9
 80073c8:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80073cc:	f01c 0c07 	ands.w	ip, ip, #7
 80073d0:	d050      	beq.n	8007474 <ai_dict8_dot_array_f32+0x180>
 80073d2:	780c      	ldrb	r4, [r1, #0]
 80073d4:	edd3 6a00 	vldr	s13, [r3]
 80073d8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80073dc:	edd4 7a00 	vldr	s15, [r4]
 80073e0:	f1bc 0f01 	cmp.w	ip, #1
 80073e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80073e8:	d044      	beq.n	8007474 <ai_dict8_dot_array_f32+0x180>
 80073ea:	784c      	ldrb	r4, [r1, #1]
 80073ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80073f0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80073f4:	edd4 7a00 	vldr	s15, [r4]
 80073f8:	f1bc 0f02 	cmp.w	ip, #2
 80073fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007400:	d038      	beq.n	8007474 <ai_dict8_dot_array_f32+0x180>
 8007402:	788c      	ldrb	r4, [r1, #2]
 8007404:	edd3 6a02 	vldr	s13, [r3, #8]
 8007408:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800740c:	edd4 7a00 	vldr	s15, [r4]
 8007410:	f1bc 0f03 	cmp.w	ip, #3
 8007414:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007418:	d02c      	beq.n	8007474 <ai_dict8_dot_array_f32+0x180>
 800741a:	78cc      	ldrb	r4, [r1, #3]
 800741c:	edd3 6a03 	vldr	s13, [r3, #12]
 8007420:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007424:	edd4 7a00 	vldr	s15, [r4]
 8007428:	f1bc 0f04 	cmp.w	ip, #4
 800742c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007430:	d020      	beq.n	8007474 <ai_dict8_dot_array_f32+0x180>
 8007432:	790c      	ldrb	r4, [r1, #4]
 8007434:	edd3 6a04 	vldr	s13, [r3, #16]
 8007438:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800743c:	edd4 7a00 	vldr	s15, [r4]
 8007440:	f1bc 0f05 	cmp.w	ip, #5
 8007444:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007448:	d014      	beq.n	8007474 <ai_dict8_dot_array_f32+0x180>
 800744a:	794c      	ldrb	r4, [r1, #5]
 800744c:	edd3 6a05 	vldr	s13, [r3, #20]
 8007450:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007454:	edd4 7a00 	vldr	s15, [r4]
 8007458:	f1bc 0f06 	cmp.w	ip, #6
 800745c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007460:	d008      	beq.n	8007474 <ai_dict8_dot_array_f32+0x180>
 8007462:	7989      	ldrb	r1, [r1, #6]
 8007464:	edd3 7a06 	vldr	s15, [r3, #24]
 8007468:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800746c:	edd2 6a00 	vldr	s13, [r2]
 8007470:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007474:	edd0 7a00 	vldr	s15, [r0]
 8007478:	ee37 7a87 	vadd.f32	s14, s15, s14
 800747c:	ed80 7a00 	vstr	s14, [r0]
 8007480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007484:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800748c <ai_dict8_dot_array_f32+0x198>
 8007488:	e7a0      	b.n	80073cc <ai_dict8_dot_array_f32+0xd8>
 800748a:	bf00      	nop
 800748c:	00000000 	.word	0x00000000

08007490 <ai_dict4_dot_array_f32>:
 8007490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007494:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007496:	f027 0c01 	bic.w	ip, r7, #1
 800749a:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800749e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80074a2:	f000 80ae 	beq.w	8007602 <ai_dict4_dot_array_f32+0x172>
 80074a6:	1d0d      	adds	r5, r1, #4
 80074a8:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80074ac:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8007608 <ai_dict4_dot_array_f32+0x178>
 80074b0:	eb05 0e09 	add.w	lr, r5, r9
 80074b4:	f103 0420 	add.w	r4, r3, #32
 80074b8:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 80074bc:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 80074c0:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 80074c4:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 80074c8:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 80074cc:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 80074d0:	ed14 5a04 	vldr	s10, [r4, #-16]
 80074d4:	ed54 5a03 	vldr	s11, [r4, #-12]
 80074d8:	ed14 6a02 	vldr	s12, [r4, #-8]
 80074dc:	ed54 6a01 	vldr	s13, [r4, #-4]
 80074e0:	f006 0a0f 	and.w	sl, r6, #15
 80074e4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80074e8:	edda 7a00 	vldr	s15, [sl]
 80074ec:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 80074f0:	0936      	lsrs	r6, r6, #4
 80074f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80074f6:	ee67 7a83 	vmul.f32	s15, s15, s6
 80074fa:	ed96 3a00 	vldr	s6, [r6]
 80074fe:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8007502:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007506:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800750a:	f00b 0b0f 	and.w	fp, fp, #15
 800750e:	edd6 3a00 	vldr	s7, [r6]
 8007512:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8007516:	eee3 7a84 	vfma.f32	s15, s7, s8
 800751a:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800751e:	3504      	adds	r5, #4
 8007520:	ed9b 4a00 	vldr	s8, [fp]
 8007524:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8007528:	eee4 7a24 	vfma.f32	s15, s8, s9
 800752c:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8007530:	f00a 0a0f 	and.w	sl, sl, #15
 8007534:	eddb 4a00 	vldr	s9, [fp]
 8007538:	eee4 7a85 	vfma.f32	s15, s9, s10
 800753c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007540:	45ae      	cmp	lr, r5
 8007542:	ed9a 5a00 	vldr	s10, [sl]
 8007546:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800754a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800754e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007552:	f006 060f 	and.w	r6, r6, #15
 8007556:	edda 5a00 	vldr	s11, [sl]
 800755a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800755e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007562:	f104 0420 	add.w	r4, r4, #32
 8007566:	ed96 6a00 	vldr	s12, [r6]
 800756a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800756e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007572:	d1a1      	bne.n	80074b8 <ai_dict4_dot_array_f32+0x28>
 8007574:	4449      	add	r1, r9
 8007576:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800757a:	459c      	cmp	ip, r3
 800757c:	d92d      	bls.n	80075da <ai_dict4_dot_array_f32+0x14a>
 800757e:	f10c 0c07 	add.w	ip, ip, #7
 8007582:	f103 0508 	add.w	r5, r3, #8
 8007586:	ebac 0c05 	sub.w	ip, ip, r5
 800758a:	f02c 0407 	bic.w	r4, ip, #7
 800758e:	f103 0810 	add.w	r8, r3, #16
 8007592:	44a0      	add	r8, r4
 8007594:	f101 3eff 	add.w	lr, r1, #4294967295
 8007598:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800759c:	ed15 6a01 	vldr	s12, [r5, #-4]
 80075a0:	ed55 6a02 	vldr	s13, [r5, #-8]
 80075a4:	f004 060f 	and.w	r6, r4, #15
 80075a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80075ac:	0924      	lsrs	r4, r4, #4
 80075ae:	edd6 7a00 	vldr	s15, [r6]
 80075b2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80075b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80075ba:	ed94 6a00 	vldr	s12, [r4]
 80075be:	eee6 7a26 	vfma.f32	s15, s12, s13
 80075c2:	3508      	adds	r5, #8
 80075c4:	45a8      	cmp	r8, r5
 80075c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075ca:	d1e5      	bne.n	8007598 <ai_dict4_dot_array_f32+0x108>
 80075cc:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80075d0:	f10c 0c01 	add.w	ip, ip, #1
 80075d4:	4461      	add	r1, ip
 80075d6:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80075da:	07fc      	lsls	r4, r7, #31
 80075dc:	d509      	bpl.n	80075f2 <ai_dict4_dot_array_f32+0x162>
 80075de:	7809      	ldrb	r1, [r1, #0]
 80075e0:	edd3 7a00 	vldr	s15, [r3]
 80075e4:	090b      	lsrs	r3, r1, #4
 80075e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80075ea:	edd2 6a00 	vldr	s13, [r2]
 80075ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075f2:	edd0 7a00 	vldr	s15, [r0]
 80075f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075fa:	ed80 7a00 	vstr	s14, [r0]
 80075fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007602:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8007608 <ai_dict4_dot_array_f32+0x178>
 8007606:	e7b8      	b.n	800757a <ai_dict4_dot_array_f32+0xea>
 8007608:	00000000 	.word	0x00000000

0800760c <ai_dict_decompress_f32>:
 800760c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007610:	9f08      	ldr	r7, [sp, #32]
 8007612:	2b04      	cmp	r3, #4
 8007614:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8007618:	d00e      	beq.n	8007638 <ai_dict_decompress_f32+0x2c>
 800761a:	2b08      	cmp	r3, #8
 800761c:	d10a      	bne.n	8007634 <ai_dict_decompress_f32+0x28>
 800761e:	42b8      	cmp	r0, r7
 8007620:	d208      	bcs.n	8007634 <ai_dict_decompress_f32+0x28>
 8007622:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007626:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f840 3b04 	str.w	r3, [r0], #4
 8007630:	4287      	cmp	r7, r0
 8007632:	d8f6      	bhi.n	8007622 <ai_dict_decompress_f32+0x16>
 8007634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007638:	9b07      	ldr	r3, [sp, #28]
 800763a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800763e:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8007642:	f10c 38ff 	add.w	r8, ip, #4294967295
 8007646:	f003 0e01 	and.w	lr, r3, #1
 800764a:	42b8      	cmp	r0, r7
 800764c:	d2f2      	bcs.n	8007634 <ai_dict_decompress_f32+0x28>
 800764e:	f1bc 0f00 	cmp.w	ip, #0
 8007652:	d01a      	beq.n	800768a <ai_dict_decompress_f32+0x7e>
 8007654:	f100 0508 	add.w	r5, r0, #8
 8007658:	1e4c      	subs	r4, r1, #1
 800765a:	eb01 0608 	add.w	r6, r1, r8
 800765e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007662:	091b      	lsrs	r3, r3, #4
 8007664:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007668:	42a6      	cmp	r6, r4
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f845 3c08 	str.w	r3, [r5, #-8]
 8007670:	7823      	ldrb	r3, [r4, #0]
 8007672:	f003 030f 	and.w	r3, r3, #15
 8007676:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800767a:	f105 0508 	add.w	r5, r5, #8
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f845 3c0c 	str.w	r3, [r5, #-12]
 8007684:	d1eb      	bne.n	800765e <ai_dict_decompress_f32+0x52>
 8007686:	4461      	add	r1, ip
 8007688:	4448      	add	r0, r9
 800768a:	f1be 0f00 	cmp.w	lr, #0
 800768e:	d103      	bne.n	8007698 <ai_dict_decompress_f32+0x8c>
 8007690:	4287      	cmp	r7, r0
 8007692:	d8dc      	bhi.n	800764e <ai_dict_decompress_f32+0x42>
 8007694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007698:	780b      	ldrb	r3, [r1, #0]
 800769a:	091b      	lsrs	r3, r3, #4
 800769c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076a0:	3101      	adds	r1, #1
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6003      	str	r3, [r0, #0]
 80076a6:	3004      	adds	r0, #4
 80076a8:	e7cf      	b.n	800764a <ai_dict_decompress_f32+0x3e>
 80076aa:	bf00      	nop

080076ac <forward_conv2d_nl_pool>:
 80076ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b0:	ed2d 8b10 	vpush	{d8-d15}
 80076b4:	b0e1      	sub	sp, #388	; 0x184
 80076b6:	6983      	ldr	r3, [r0, #24]
 80076b8:	881e      	ldrh	r6, [r3, #0]
 80076ba:	af0a      	add	r7, sp, #40	; 0x28
 80076bc:	2e00      	cmp	r6, #0
 80076be:	f000 859b 	beq.w	80081f8 <forward_conv2d_nl_pool+0xb4c>
 80076c2:	6859      	ldr	r1, [r3, #4]
 80076c4:	684a      	ldr	r2, [r1, #4]
 80076c6:	2a00      	cmp	r2, #0
 80076c8:	f000 8593 	beq.w	80081f2 <forward_conv2d_nl_pool+0xb46>
 80076cc:	f8d2 c000 	ldr.w	ip, [r2]
 80076d0:	2e01      	cmp	r6, #1
 80076d2:	f240 858b 	bls.w	80081ec <forward_conv2d_nl_pool+0xb40>
 80076d6:	690a      	ldr	r2, [r1, #16]
 80076d8:	2a00      	cmp	r2, #0
 80076da:	f000 8582 	beq.w	80081e2 <forward_conv2d_nl_pool+0xb36>
 80076de:	f8d2 9000 	ldr.w	r9, [r2]
 80076e2:	2e02      	cmp	r6, #2
 80076e4:	f000 8582 	beq.w	80081ec <forward_conv2d_nl_pool+0xb40>
 80076e8:	69cd      	ldr	r5, [r1, #28]
 80076ea:	2d00      	cmp	r5, #0
 80076ec:	f000 8571 	beq.w	80081d2 <forward_conv2d_nl_pool+0xb26>
 80076f0:	682a      	ldr	r2, [r5, #0]
 80076f2:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 80076f6:	f111 0218 	adds.w	r2, r1, #24
 80076fa:	d004      	beq.n	8007706 <forward_conv2d_nl_pool+0x5a>
 80076fc:	8b0a      	ldrh	r2, [r1, #24]
 80076fe:	2a01      	cmp	r2, #1
 8007700:	f240 857c 	bls.w	80081fc <forward_conv2d_nl_pool+0xb50>
 8007704:	686a      	ldr	r2, [r5, #4]
 8007706:	68a9      	ldr	r1, [r5, #8]
 8007708:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800770a:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800770e:	f8dc b018 	ldr.w	fp, [ip, #24]
 8007712:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 8007716:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800771a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800771e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8007722:	f8db 4008 	ldr.w	r4, [fp, #8]
 8007726:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800772a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800772e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8007732:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 8007736:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800773a:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800773e:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007742:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 8007746:	f8de 4004 	ldr.w	r4, [lr, #4]
 800774a:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800774e:	f8de 400c 	ldr.w	r4, [lr, #12]
 8007752:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8007756:	f8de 4008 	ldr.w	r4, [lr, #8]
 800775a:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 800775e:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8007762:	6824      	ldr	r4, [r4, #0]
 8007764:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 8007768:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800776c:	6864      	ldr	r4, [r4, #4]
 800776e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8007772:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8007776:	68a5      	ldr	r5, [r4, #8]
 8007778:	f8da 4004 	ldr.w	r4, [sl, #4]
 800777c:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8007780:	f8da 4008 	ldr.w	r4, [sl, #8]
 8007784:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8007788:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800778a:	6824      	ldr	r4, [r4, #0]
 800778c:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 8007790:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8007792:	6864      	ldr	r4, [r4, #4]
 8007794:	643c      	str	r4, [r7, #64]	; 0x40
 8007796:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800779a:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800779e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80077a0:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80077a4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80077a6:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 80077aa:	69c4      	ldr	r4, [r0, #28]
 80077ac:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 80077b0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80077b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80077b4:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80077b6:	647c      	str	r4, [r7, #68]	; 0x44
 80077b8:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80077ba:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 80077be:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 80077c2:	2a00      	cmp	r2, #0
 80077c4:	f000 84f8 	beq.w	80081b8 <forward_conv2d_nl_pool+0xb0c>
 80077c8:	6992      	ldr	r2, [r2, #24]
 80077ca:	6892      	ldr	r2, [r2, #8]
 80077cc:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80077d0:	4680      	mov	r8, r0
 80077d2:	6a00      	ldr	r0, [r0, #32]
 80077d4:	2900      	cmp	r1, #0
 80077d6:	f000 84e4 	beq.w	80081a2 <forward_conv2d_nl_pool+0xaf6>
 80077da:	698a      	ldr	r2, [r1, #24]
 80077dc:	2a00      	cmp	r2, #0
 80077de:	f000 8533 	beq.w	8008248 <forward_conv2d_nl_pool+0xb9c>
 80077e2:	694b      	ldr	r3, [r1, #20]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80077ea:	e9d2 0100 	ldrd	r0, r1, [r2]
 80077ee:	6893      	ldr	r3, [r2, #8]
 80077f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80077f4:	f001 ff24 	bl	8009640 <ai_array_get_byte_size>
 80077f8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80077fc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8007800:	881e      	ldrh	r6, [r3, #0]
 8007802:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8007806:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800780a:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 800780e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007810:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8007814:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8007818:	fa11 f585 	uxtah	r5, r1, r5
 800781c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8007820:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8007824:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8007828:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800782c:	3901      	subs	r1, #1
 800782e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8007832:	eb05 0e00 	add.w	lr, r5, r0
 8007836:	fa1f f28a 	uxth.w	r2, sl
 800783a:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 800783e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8007842:	f8dc 4000 	ldr.w	r4, [ip]
 8007846:	f8dc 1000 	ldr.w	r1, [ip]
 800784a:	3a01      	subs	r2, #1
 800784c:	fb00 5002 	mla	r0, r0, r2, r5
 8007850:	fa1f f28b 	uxth.w	r2, fp
 8007854:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 8007858:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800785c:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8007860:	1e50      	subs	r0, r2, #1
 8007862:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8007866:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800786a:	fa44 f101 	asr.w	r1, r4, r1
 800786e:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8007872:	f8dc 4000 	ldr.w	r4, [ip]
 8007876:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800787a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800787e:	f3c4 4543 	ubfx	r5, r4, #17, #4
 8007882:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8007886:	ebae 0202 	sub.w	r2, lr, r2
 800788a:	fa1f fe81 	uxth.w	lr, r1
 800788e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8007892:	fbb2 f2f1 	udiv	r2, r2, r1
 8007896:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800789a:	3c01      	subs	r4, #1
 800789c:	fb04 1100 	mla	r1, r4, r0, r1
 80078a0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80078a4:	1c51      	adds	r1, r2, #1
 80078a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80078aa:	487c      	ldr	r0, [pc, #496]	; (8007a9c <forward_conv2d_nl_pool+0x3f0>)
 80078ac:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 80078b0:	4611      	mov	r1, r2
 80078b2:	2a00      	cmp	r2, #0
 80078b4:	bf08      	it	eq
 80078b6:	4601      	moveq	r1, r0
 80078b8:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 80078bc:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80078c0:	2d04      	cmp	r5, #4
 80078c2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80078c6:	f000 849e 	beq.w	8008206 <forward_conv2d_nl_pool+0xb5a>
 80078ca:	2d08      	cmp	r5, #8
 80078cc:	f000 849b 	beq.w	8008206 <forward_conv2d_nl_pool+0xb5a>
 80078d0:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80078d4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80078d8:	2e03      	cmp	r6, #3
 80078da:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 80078de:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 80078e2:	f240 8483 	bls.w	80081ec <forward_conv2d_nl_pool+0xb40>
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 8489 	beq.w	8008202 <forward_conv2d_nl_pool+0xb56>
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80078fe:	6899      	ldr	r1, [r3, #8]
 8007900:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8007904:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8007908:	6896      	ldr	r6, [r2, #8]
 800790a:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 800790e:	4249      	negs	r1, r1
 8007910:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8007914:	2800      	cmp	r0, #0
 8007916:	f000 82dd 	beq.w	8007ed4 <forward_conv2d_nl_pool+0x828>
 800791a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800791e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8007922:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007926:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 800792a:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8007aa0 <forward_conv2d_nl_pool+0x3f4>
 800792e:	fb03 f200 	mul.w	r2, r3, r0
 8007932:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8007936:	008c      	lsls	r4, r1, #2
 8007938:	fb04 f000 	mul.w	r0, r4, r0
 800793c:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8007940:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8007944:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8007948:	fb01 fc02 	mul.w	ip, r1, r2
 800794c:	00a2      	lsls	r2, r4, #2
 800794e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8007952:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007956:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 800795a:	00ab      	lsls	r3, r5, #2
 800795c:	4694      	mov	ip, r2
 800795e:	fb0c f204 	mul.w	r2, ip, r4
 8007962:	fb04 f303 	mul.w	r3, r4, r3
 8007966:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800796a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800796e:	00a4      	lsls	r4, r4, #2
 8007970:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8007974:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8007978:	f04f 0c00 	mov.w	ip, #0
 800797c:	fa0f f58b 	sxth.w	r5, fp
 8007980:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 8007984:	46a4      	mov	ip, r4
 8007986:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 800798a:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 800798e:	fa0f f58a 	sxth.w	r5, sl
 8007992:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 8007996:	fb0c fc04 	mul.w	ip, ip, r4
 800799a:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 800799e:	fb06 fc03 	mul.w	ip, r6, r3
 80079a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079a6:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 80079aa:	4240      	negs	r0, r0
 80079ac:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 80079b0:	469c      	mov	ip, r3
 80079b2:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 80079b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80079ba:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 80079be:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 80079c2:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 80079c6:	fb00 f303 	mul.w	r3, r0, r3
 80079ca:	460d      	mov	r5, r1
 80079cc:	fb0c fc04 	mul.w	ip, ip, r4
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24
 80079d2:	fb04 f305 	mul.w	r3, r4, r5
 80079d6:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 80079da:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 80079de:	623b      	str	r3, [r7, #32]
 80079e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079e4:	46a6      	mov	lr, r4
 80079e6:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 80079ea:	fb05 f503 	mul.w	r5, r5, r3
 80079ee:	667d      	str	r5, [r7, #100]	; 0x64
 80079f0:	4625      	mov	r5, r4
 80079f2:	fb05 f503 	mul.w	r5, r5, r3
 80079f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80079fa:	66bd      	str	r5, [r7, #104]	; 0x68
 80079fc:	fb00 f101 	mul.w	r1, r0, r1
 8007a00:	fb03 f306 	mul.w	r3, r3, r6
 8007a04:	657b      	str	r3, [r7, #84]	; 0x54
 8007a06:	008b      	lsls	r3, r1, #2
 8007a08:	633b      	str	r3, [r7, #48]	; 0x30
 8007a0a:	0093      	lsls	r3, r2, #2
 8007a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a0e:	0083      	lsls	r3, r0, #2
 8007a10:	61bb      	str	r3, [r7, #24]
 8007a12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a16:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8007a1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007a1e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8007a22:	2400      	movs	r4, #0
 8007a24:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a26:	4603      	mov	r3, r0
 8007a28:	fb03 f301 	mul.w	r3, r3, r1
 8007a2c:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8007a30:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8007a34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007a38:	00d1      	lsls	r1, r2, #3
 8007a3a:	0113      	lsls	r3, r2, #4
 8007a3c:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8007a40:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8007a44:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007a48:	fb00 f004 	mul.w	r0, r0, r4
 8007a4c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007a50:	66f8      	str	r0, [r7, #108]	; 0x6c
 8007a52:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8007a56:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8007a5a:	469a      	mov	sl, r3
 8007a5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f340 81d0 	ble.w	8007e06 <forward_conv2d_nl_pool+0x75a>
 8007a66:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8007a6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a6e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007a72:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8007a76:	2900      	cmp	r1, #0
 8007a78:	441a      	add	r2, r3
 8007a7a:	bfb4      	ite	lt
 8007a7c:	2100      	movlt	r1, #0
 8007a7e:	2300      	movge	r3, #0
 8007a80:	4282      	cmp	r2, r0
 8007a82:	bf28      	it	cs
 8007a84:	4602      	movcs	r2, r0
 8007a86:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8007a8a:	2801      	cmp	r0, #1
 8007a8c:	f000 83f6 	beq.w	800827c <forward_conv2d_nl_pool+0xbd0>
 8007a90:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007a94:	4281      	cmp	r1, r0
 8007a96:	f000 822a 	beq.w	8007eee <forward_conv2d_nl_pool+0x842>
 8007a9a:	e003      	b.n	8007aa4 <forward_conv2d_nl_pool+0x3f8>
 8007a9c:	080072f1 	.word	0x080072f1
 8007aa0:	00000000 	.word	0x00000000
 8007aa4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	f000 819f 	beq.w	8007dec <forward_conv2d_nl_pool+0x740>
 8007aae:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8007ab2:	fb93 f1f0 	sdiv	r1, r3, r0
 8007ab6:	fb00 3111 	mls	r1, r0, r1, r3
 8007aba:	1a41      	subs	r1, r0, r1
 8007abc:	1ad2      	subs	r2, r2, r3
 8007abe:	fb91 f5f0 	sdiv	r5, r1, r0
 8007ac2:	fb00 1515 	mls	r5, r0, r5, r1
 8007ac6:	1b52      	subs	r2, r2, r5
 8007ac8:	4601      	mov	r1, r0
 8007aca:	4402      	add	r2, r0
 8007acc:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8007ad0:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8007ada:	fbb4 f4f0 	udiv	r4, r4, r0
 8007ade:	6a38      	ldr	r0, [r7, #32]
 8007ae0:	3a01      	subs	r2, #1
 8007ae2:	fb92 f8f1 	sdiv	r8, r2, r1
 8007ae6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8007aea:	eba0 0c04 	sub.w	ip, r0, r4
 8007aee:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8007af2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007af6:	4614      	mov	r4, r2
 8007af8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007afc:	fbb4 f2f2 	udiv	r2, r4, r2
 8007b00:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8007b04:	663a      	str	r2, [r7, #96]	; 0x60
 8007b06:	441d      	add	r5, r3
 8007b08:	fb0e f000 	mul.w	r0, lr, r0
 8007b0c:	440b      	add	r3, r1
 8007b0e:	eba6 0608 	sub.w	r6, r6, r8
 8007b12:	fb04 f505 	mul.w	r5, r4, r5
 8007b16:	3b01      	subs	r3, #1
 8007b18:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8007b1c:	fb93 f3f4 	sdiv	r3, r3, r4
 8007b20:	fb00 f406 	mul.w	r4, r0, r6
 8007b24:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8007b28:	677d      	str	r5, [r7, #116]	; 0x74
 8007b2a:	0091      	lsls	r1, r2, #2
 8007b2c:	fb00 f003 	mul.w	r0, r0, r3
 8007b30:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8007b34:	65f8      	str	r0, [r7, #92]	; 0x5c
 8007b36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b3a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8007b3e:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8007b42:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8007b46:	1ac3      	subs	r3, r0, r3
 8007b48:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8007b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b50:	008b      	lsls	r3, r1, #2
 8007b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b54:	00d3      	lsls	r3, r2, #3
 8007b56:	61fb      	str	r3, [r7, #28]
 8007b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b68:	2300      	movs	r3, #0
 8007b6a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8007b6e:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8007b72:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b74:	46c2      	mov	sl, r8
 8007b76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b7a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007b7e:	eb03 0c02 	add.w	ip, r3, r2
 8007b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f2c0 811c 	blt.w	8007dc4 <forward_conv2d_nl_pool+0x718>
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8007b90:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 8007b94:	4605      	mov	r5, r0
 8007b96:	4606      	mov	r6, r0
 8007b98:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b9c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007ba0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007baa:	440a      	add	r2, r1
 8007bac:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007bb0:	428b      	cmp	r3, r1
 8007bb2:	bf94      	ite	ls
 8007bb4:	ebc6 0303 	rsbls	r3, r6, r3
 8007bb8:	ebc6 0301 	rsbhi	r3, r6, r1
 8007bbc:	4415      	add	r5, r2
 8007bbe:	1a1b      	subs	r3, r3, r0
 8007bc0:	00a4      	lsls	r4, r4, #2
 8007bc2:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8007bc6:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8007bca:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8007bce:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	bf08      	it	eq
 8007bd6:	4662      	moveq	r2, ip
 8007bd8:	f108 31ff 	add.w	r1, r8, #4294967295
 8007bdc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8007be0:	fb91 f1f0 	sdiv	r1, r1, r0
 8007be4:	4429      	add	r1, r5
 8007be6:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 8007bea:	fb0e 5501 	mla	r5, lr, r1, r5
 8007bee:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007bf2:	4403      	add	r3, r0
 8007bf4:	fb01 6104 	mla	r1, r1, r4, r6
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	fb93 f6f0 	sdiv	r6, r3, r0
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8007c04:	fb06 3110 	mls	r1, r6, r0, r3
 8007c08:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007c0c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8007c10:	4562      	cmp	r2, ip
 8007c12:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007c16:	bf08      	it	eq
 8007c18:	eeb0 6a48 	vmoveq.f32	s12, s16
 8007c1c:	1b9b      	subs	r3, r3, r6
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d070      	beq.n	8007d04 <forward_conv2d_nl_pool+0x658>
 8007c22:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8007c26:	fb0e f803 	mul.w	r8, lr, r3
 8007c2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c2c:	fb00 fb01 	mul.w	fp, r0, r1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d067      	beq.n	8007d04 <forward_conv2d_nl_pool+0x658>
 8007c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c38:	18d3      	adds	r3, r2, r3
 8007c3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c42:	1a9b      	subs	r3, r3, r2
 8007c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c46:	2300      	movs	r3, #0
 8007c48:	673b      	str	r3, [r7, #112]	; 0x70
 8007c4a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	4413      	add	r3, r2
 8007c52:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c54:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8007c60:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007c64:	ecf3 7a01 	vldmia	r3!, {s15}
 8007c68:	f1ba 0f00 	cmp.w	sl, #0
 8007c6c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007c70:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007c74:	f340 80a4 	ble.w	8007dc0 <forward_conv2d_nl_pool+0x714>
 8007c78:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8007c7c:	f04f 0c00 	mov.w	ip, #0
 8007c80:	2e00      	cmp	r6, #0
 8007c82:	dd19      	ble.n	8007cb8 <forward_conv2d_nl_pool+0x60c>
 8007c84:	2100      	movs	r1, #0
 8007c86:	eb00 040e 	add.w	r4, r0, lr
 8007c8a:	4284      	cmp	r4, r0
 8007c8c:	d910      	bls.n	8007cb0 <forward_conv2d_nl_pool+0x604>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	462a      	mov	r2, r5
 8007c92:	ecb3 7a01 	vldmia	r3!, {s14}
 8007c96:	ecf2 6a01 	vldmia	r2!, {s13}
 8007c9a:	429c      	cmp	r4, r3
 8007c9c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007ca0:	d8f7      	bhi.n	8007c92 <forward_conv2d_nl_pool+0x5e6>
 8007ca2:	43c3      	mvns	r3, r0
 8007ca4:	441c      	add	r4, r3
 8007ca6:	f024 0403 	bic.w	r4, r4, #3
 8007caa:	3404      	adds	r4, #4
 8007cac:	4425      	add	r5, r4
 8007cae:	4420      	add	r0, r4
 8007cb0:	3101      	adds	r1, #1
 8007cb2:	428e      	cmp	r6, r1
 8007cb4:	4448      	add	r0, r9
 8007cb6:	d1e6      	bne.n	8007c86 <forward_conv2d_nl_pool+0x5da>
 8007cb8:	f10c 0c01 	add.w	ip, ip, #1
 8007cbc:	45e2      	cmp	sl, ip
 8007cbe:	4458      	add	r0, fp
 8007cc0:	4445      	add	r5, r8
 8007cc2:	d1dd      	bne.n	8007c80 <forward_conv2d_nl_pool+0x5d4>
 8007cc4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8007cc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ccc:	441d      	add	r5, r3
 8007cce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007cd2:	ece3 7a01 	vstmia	r3!, {s15}
 8007cd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8007cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d1be      	bne.n	8007c60 <forward_conv2d_nl_pool+0x5b4>
 8007ce2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8007ce6:	69f9      	ldr	r1, [r7, #28]
 8007ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cea:	4472      	add	r2, lr
 8007cec:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8007cf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cf2:	1a52      	subs	r2, r2, r1
 8007cf4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8007cf8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	673b      	str	r3, [r7, #112]	; 0x70
 8007d02:	d1a2      	bne.n	8007c4a <forward_conv2d_nl_pool+0x59e>
 8007d04:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007d08:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8007d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d0e:	4608      	mov	r0, r1
 8007d10:	4410      	add	r0, r2
 8007d12:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007d16:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8007d1a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8007d1e:	4401      	add	r1, r0
 8007d20:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8007d24:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007d28:	1a8a      	subs	r2, r1, r2
 8007d2a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8007d2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007d32:	3301      	adds	r3, #1
 8007d34:	429a      	cmp	r2, r3
 8007d36:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d38:	f47f af1d 	bne.w	8007b76 <forward_conv2d_nl_pool+0x4ca>
 8007d3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007d44:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	2a00      	cmp	r2, #0
 8007d4c:	f000 8210 	beq.w	8008170 <forward_conv2d_nl_pool+0xac4>
 8007d50:	2400      	movs	r4, #0
 8007d52:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 8007d56:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 8007d5a:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 8007d5e:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 8007d62:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8007d66:	609e      	str	r6, [r3, #8]
 8007d68:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8007d6c:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8007d70:	462b      	mov	r3, r5
 8007d72:	4641      	mov	r1, r8
 8007d74:	4640      	mov	r0, r8
 8007d76:	47a0      	blx	r4
 8007d78:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007d7c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8007d80:	6859      	ldr	r1, [r3, #4]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8007d88:	4405      	add	r5, r0
 8007d8a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8007d8e:	0089      	lsls	r1, r1, #2
 8007d90:	4406      	add	r6, r0
 8007d92:	eba5 0c09 	sub.w	ip, r5, r9
 8007d96:	1850      	adds	r0, r2, r1
 8007d98:	45a4      	cmp	ip, r4
 8007d9a:	bfa8      	it	ge
 8007d9c:	464d      	movge	r5, r9
 8007d9e:	4286      	cmp	r6, r0
 8007da0:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8007da4:	bf28      	it	cs
 8007da6:	1a76      	subcs	r6, r6, r1
 8007da8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8007dac:	3001      	adds	r0, #1
 8007dae:	4281      	cmp	r1, r0
 8007db0:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 8007db4:	d1d7      	bne.n	8007d66 <forward_conv2d_nl_pool+0x6ba>
 8007db6:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 8007dba:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 8007dbe:	e019      	b.n	8007df4 <forward_conv2d_nl_pool+0x748>
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	e781      	b.n	8007cc8 <forward_conv2d_nl_pool+0x61c>
 8007dc4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8007dc8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007dcc:	fb90 f3f2 	sdiv	r3, r0, r2
 8007dd0:	fb02 0313 	mls	r3, r2, r3, r0
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	fb93 f0f2 	sdiv	r0, r3, r2
 8007ddc:	fb02 3010 	mls	r0, r2, r0, r3
 8007de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007de2:	462e      	mov	r6, r5
 8007de4:	18c4      	adds	r4, r0, r3
 8007de6:	eb02 0805 	add.w	r8, r2, r5
 8007dea:	e6d5      	b.n	8007b98 <forward_conv2d_nl_pool+0x4ec>
 8007dec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	609a      	str	r2, [r3, #8]
 8007df6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	b21b      	sxth	r3, r3
 8007dfe:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8007e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e06:	3b01      	subs	r3, #1
 8007e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e0c:	f100 83bf 	bmi.w	800858e <forward_conv2d_nl_pool+0xee2>
 8007e10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e14:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8007e18:	42a3      	cmp	r3, r4
 8007e1a:	f200 839d 	bhi.w	8008558 <forward_conv2d_nl_pool+0xeac>
 8007e1e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	6990      	ldr	r0, [r2, #24]
 8007e26:	9301      	str	r3, [sp, #4]
 8007e28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e2c:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 8007e30:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	fa1f f188 	uxth.w	r1, r8
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e40:	9308      	str	r3, [sp, #32]
 8007e42:	9105      	str	r1, [sp, #20]
 8007e44:	2601      	movs	r6, #1
 8007e46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007e4a:	9607      	str	r6, [sp, #28]
 8007e4c:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8007e50:	9506      	str	r5, [sp, #24]
 8007e52:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 8007e56:	9304      	str	r3, [sp, #16]
 8007e58:	1a64      	subs	r4, r4, r1
 8007e5a:	b2b1      	uxth	r1, r6
 8007e5c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8007e66:	b224      	sxth	r4, r4
 8007e68:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8007e6c:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8007e70:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8007e74:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8007e76:	47a0      	blx	r4
 8007e78:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8007e7c:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8007e80:	688a      	ldr	r2, [r1, #8]
 8007e82:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8007e84:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8007e88:	fa0f f388 	sxth.w	r3, r8
 8007e8c:	1af3      	subs	r3, r6, r3
 8007e8e:	4422      	add	r2, r4
 8007e90:	462e      	mov	r6, r5
 8007e92:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8007e96:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 8007e9a:	608a      	str	r2, [r1, #8]
 8007e9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007ea0:	4426      	add	r6, r4
 8007ea2:	b21b      	sxth	r3, r3
 8007ea4:	1b2c      	subs	r4, r5, r4
 8007ea6:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 8007eaa:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 8007eac:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8007eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007eb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007eb8:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	442c      	add	r4, r5
 8007ec0:	4283      	cmp	r3, r0
 8007ec2:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 8007ec6:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 8007eca:	f63f adc7 	bhi.w	8007a5c <forward_conv2d_nl_pool+0x3b0>
 8007ece:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	609a      	str	r2, [r3, #8]
 8007ed8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007edc:	68d3      	ldr	r3, [r2, #12]
 8007ede:	6093      	str	r3, [r2, #8]
 8007ee0:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	ecbd 8b10 	vpop	{d8-d15}
 8007eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ef0:	2901      	cmp	r1, #1
 8007ef2:	f47f add7 	bne.w	8007aa4 <forward_conv2d_nl_pool+0x3f8>
 8007ef6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8007efa:	2900      	cmp	r1, #0
 8007efc:	f43f af76 	beq.w	8007dec <forward_conv2d_nl_pool+0x740>
 8007f00:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8007f04:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 8007f08:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8007f0c:	1ad2      	subs	r2, r2, r3
 8007f0e:	1a8c      	subs	r4, r1, r2
 8007f10:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8007f14:	00b2      	lsls	r2, r6, #2
 8007f16:	fb02 f204 	mul.w	r2, r2, r4
 8007f1a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8007f1e:	fbb1 f1f0 	udiv	r1, r1, r0
 8007f22:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 8007f26:	460d      	mov	r5, r1
 8007f28:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007f2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8007f2c:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8007f30:	0082      	lsls	r2, r0, #2
 8007f32:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f34:	00ca      	lsls	r2, r1, #3
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	00aa      	lsls	r2, r5, #2
 8007f3a:	60ba      	str	r2, [r7, #8]
 8007f3c:	fb03 f206 	mul.w	r2, r3, r6
 8007f40:	67ba      	str	r2, [r7, #120]	; 0x78
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	fb02 f303 	mul.w	r3, r2, r3
 8007f48:	617b      	str	r3, [r7, #20]
 8007f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007f56:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007f5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007f62:	2300      	movs	r3, #0
 8007f64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f2c0 8112 	blt.w	8008196 <forward_conv2d_nl_pool+0xaea>
 8007f72:	2100      	movs	r1, #0
 8007f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f76:	460a      	mov	r2, r1
 8007f78:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8007f7c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8007f80:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8007f84:	4420      	add	r0, r4
 8007f86:	4408      	add	r0, r1
 8007f88:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007f8c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8007f90:	190c      	adds	r4, r1, r4
 8007f92:	42ac      	cmp	r4, r5
 8007f94:	bf28      	it	cs
 8007f96:	462c      	movcs	r4, r5
 8007f98:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 8007f9c:	0080      	lsls	r0, r0, #2
 8007f9e:	1aa4      	subs	r4, r4, r2
 8007fa0:	2d00      	cmp	r5, #0
 8007fa2:	f000 80e9 	beq.w	8008178 <forward_conv2d_nl_pool+0xacc>
 8007fa6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007faa:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 8007fae:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8007fb2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007fb6:	42b5      	cmp	r5, r6
 8007fb8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8007fbc:	eba3 0204 	sub.w	r2, r3, r4
 8007fc0:	eba1 0104 	sub.w	r1, r1, r4
 8007fc4:	bf08      	it	eq
 8007fc6:	eef0 3a48 	vmoveq.f32	s7, s16
 8007fca:	462b      	mov	r3, r5
 8007fcc:	697d      	ldr	r5, [r7, #20]
 8007fce:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8007fd2:	4428      	add	r0, r5
 8007fd4:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 8007fd8:	fb05 6e00 	mla	lr, r5, r0, r6
 8007fdc:	eb0e 000b 	add.w	r0, lr, fp
 8007fe0:	4586      	cmp	lr, r0
 8007fe2:	61f8      	str	r0, [r7, #28]
 8007fe4:	f080 80a5 	bcs.w	8008132 <forward_conv2d_nl_pool+0xa86>
 8007fe8:	0092      	lsls	r2, r2, #2
 8007fea:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8007fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ff0:	fb01 f10b 	mul.w	r1, r1, fp
 8007ff4:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8007ff8:	f024 0803 	bic.w	r8, r4, #3
 8007ffc:	2a00      	cmp	r2, #0
 8007ffe:	f000 8098 	beq.w	8008132 <forward_conv2d_nl_pool+0xa86>
 8008002:	f108 32ff 	add.w	r2, r8, #4294967295
 8008006:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008008:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800800c:	0892      	lsrs	r2, r2, #2
 800800e:	3201      	adds	r2, #1
 8008010:	4401      	add	r1, r0
 8008012:	fb02 f00a 	mul.w	r0, r2, sl
 8008016:	6638      	str	r0, [r7, #96]	; 0x60
 8008018:	0110      	lsls	r0, r2, #4
 800801a:	0092      	lsls	r2, r2, #2
 800801c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800801e:	1aca      	subs	r2, r1, r3
 8008020:	613a      	str	r2, [r7, #16]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	6738      	str	r0, [r7, #112]	; 0x70
 8008026:	4413      	add	r3, r2
 8008028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800802c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008032:	4413      	add	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]
 8008036:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	4413      	add	r3, r2
 800803e:	677b      	str	r3, [r7, #116]	; 0x74
 8008040:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008044:	ecf3 6a01 	vldmia	r3!, {s13}
 8008048:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800804c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008050:	2b00      	cmp	r3, #0
 8008052:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8008056:	dd57      	ble.n	8008108 <forward_conv2d_nl_pool+0xa5c>
 8008058:	4676      	mov	r6, lr
 800805a:	f04f 0c00 	mov.w	ip, #0
 800805e:	f1b8 0f00 	cmp.w	r8, #0
 8008062:	f340 8087 	ble.w	8008174 <forward_conv2d_nl_pool+0xac8>
 8008066:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800806a:	f109 0310 	add.w	r3, r9, #16
 800806e:	18b1      	adds	r1, r6, r2
 8008070:	2000      	movs	r0, #0
 8008072:	4632      	mov	r2, r6
 8008074:	eb02 050b 	add.w	r5, r2, fp
 8008078:	ed95 7a00 	vldr	s14, [r5]
 800807c:	ed53 7a03 	vldr	s15, [r3, #-12]
 8008080:	ed92 4a00 	vldr	s8, [r2]
 8008084:	ed53 4a04 	vldr	s9, [r3, #-16]
 8008088:	ed91 5a00 	vldr	s10, [r1]
 800808c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008090:	ed13 6a01 	vldr	s12, [r3, #-4]
 8008094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008098:	eb01 050b 	add.w	r5, r1, fp
 800809c:	eee4 7a24 	vfma.f32	s15, s8, s9
 80080a0:	3004      	adds	r0, #4
 80080a2:	4540      	cmp	r0, r8
 80080a4:	ed95 7a00 	vldr	s14, [r5]
 80080a8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80080ac:	4452      	add	r2, sl
 80080ae:	4451      	add	r1, sl
 80080b0:	f103 0310 	add.w	r3, r3, #16
 80080b4:	eee7 7a06 	vfma.f32	s15, s14, s12
 80080b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80080bc:	dbda      	blt.n	8008074 <forward_conv2d_nl_pool+0x9c8>
 80080be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080c0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80080c2:	441e      	add	r6, r3
 80080c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080c6:	4499      	add	r9, r3
 80080c8:	42a0      	cmp	r0, r4
 80080ca:	da11      	bge.n	80080f0 <forward_conv2d_nl_pool+0xa44>
 80080cc:	4602      	mov	r2, r0
 80080ce:	4633      	mov	r3, r6
 80080d0:	4649      	mov	r1, r9
 80080d2:	edd3 7a00 	vldr	s15, [r3]
 80080d6:	ecb1 7a01 	vldmia	r1!, {s14}
 80080da:	3201      	adds	r2, #1
 80080dc:	42a2      	cmp	r2, r4
 80080de:	eee7 6a27 	vfma.f32	s13, s14, s15
 80080e2:	445b      	add	r3, fp
 80080e4:	d1f5      	bne.n	80080d2 <forward_conv2d_nl_pool+0xa26>
 80080e6:	1a20      	subs	r0, r4, r0
 80080e8:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 80080ec:	fb00 660b 	mla	r6, r0, fp, r6
 80080f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080f4:	441e      	add	r6, r3
 80080f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080fa:	4499      	add	r9, r3
 80080fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008100:	f10c 0c01 	add.w	ip, ip, #1
 8008104:	4563      	cmp	r3, ip
 8008106:	d1aa      	bne.n	800805e <forward_conv2d_nl_pool+0x9b2>
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	4499      	add	r9, r3
 800810c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800810e:	ece3 6a01 	vstmia	r3!, {s13}
 8008112:	677b      	str	r3, [r7, #116]	; 0x74
 8008114:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 8008118:	4293      	cmp	r3, r2
 800811a:	d191      	bne.n	8008040 <forward_conv2d_nl_pool+0x994>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	1a9b      	subs	r3, r3, r2
 8008122:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	f10e 0e04 	add.w	lr, lr, #4
 800812c:	459e      	cmp	lr, r3
 800812e:	f4ff af7d 	bcc.w	800802c <forward_conv2d_nl_pool+0x980>
 8008132:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008136:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800813a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800813e:	440a      	add	r2, r1
 8008140:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8008144:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008148:	4608      	mov	r0, r1
 800814a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800814e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8008152:	4410      	add	r0, r2
 8008154:	1a8a      	subs	r2, r1, r2
 8008156:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800815a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800815e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8008162:	3301      	adds	r3, #1
 8008164:	429a      	cmp	r2, r3
 8008166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800816a:	f47f aefd 	bne.w	8007f68 <forward_conv2d_nl_pool+0x8bc>
 800816e:	e5e7      	b.n	8007d40 <forward_conv2d_nl_pool+0x694>
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	e63f      	b.n	8007df4 <forward_conv2d_nl_pool+0x748>
 8008174:	2000      	movs	r0, #0
 8008176:	e7a7      	b.n	80080c8 <forward_conv2d_nl_pool+0xa1c>
 8008178:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800817c:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8008180:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008184:	1b19      	subs	r1, r3, r4
 8008186:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800818a:	eef0 3a48 	vmov.f32	s7, s16
 800818e:	1b1a      	subs	r2, r3, r4
 8008190:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008194:	e71a      	b.n	8007fcc <forward_conv2d_nl_pool+0x920>
 8008196:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800819a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800819c:	460a      	mov	r2, r1
 800819e:	440b      	add	r3, r1
 80081a0:	e6ea      	b.n	8007f78 <forward_conv2d_nl_pool+0x8cc>
 80081a2:	b168      	cbz	r0, 80081c0 <forward_conv2d_nl_pool+0xb14>
 80081a4:	6882      	ldr	r2, [r0, #8]
 80081a6:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 80081aa:	2201      	movs	r2, #1
 80081ac:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80081b0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80081b4:	f7ff bb29 	b.w	800780a <forward_conv2d_nl_pool+0x15e>
 80081b8:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80081bc:	f7ff bb08 	b.w	80077d0 <forward_conv2d_nl_pool+0x124>
 80081c0:	2201      	movs	r2, #1
 80081c2:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80081c6:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80081ca:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80081ce:	f7ff bb1c 	b.w	800780a <forward_conv2d_nl_pool+0x15e>
 80081d2:	3118      	adds	r1, #24
 80081d4:	d008      	beq.n	80081e8 <forward_conv2d_nl_pool+0xb3c>
 80081d6:	462a      	mov	r2, r5
 80081d8:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 80081dc:	4629      	mov	r1, r5
 80081de:	f7ff ba93 	b.w	8007708 <forward_conv2d_nl_pool+0x5c>
 80081e2:	4691      	mov	r9, r2
 80081e4:	f7ff ba7d 	b.w	80076e2 <forward_conv2d_nl_pool+0x36>
 80081e8:	68cb      	ldr	r3, [r1, #12]
 80081ea:	deff      	udf	#255	; 0xff
 80081ec:	2300      	movs	r3, #0
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	deff      	udf	#255	; 0xff
 80081f2:	4694      	mov	ip, r2
 80081f4:	f7ff ba6c 	b.w	80076d0 <forward_conv2d_nl_pool+0x24>
 80081f8:	6873      	ldr	r3, [r6, #4]
 80081fa:	deff      	udf	#255	; 0xff
 80081fc:	2200      	movs	r2, #0
 80081fe:	f7ff ba82 	b.w	8007706 <forward_conv2d_nl_pool+0x5a>
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	deff      	udf	#255	; 0xff
 8008206:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800820a:	2a00      	cmp	r2, #0
 800820c:	f43f ab60 	beq.w	80078d0 <forward_conv2d_nl_pool+0x224>
 8008210:	2e03      	cmp	r6, #3
 8008212:	d9eb      	bls.n	80081ec <forward_conv2d_nl_pool+0xb40>
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008218:	b323      	cbz	r3, 8008264 <forward_conv2d_nl_pool+0xbb8>
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	b313      	cbz	r3, 8008264 <forward_conv2d_nl_pool+0xbb8>
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008224:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800822e:	9000      	str	r0, [sp, #0]
 8008230:	4673      	mov	r3, lr
 8008232:	4620      	mov	r0, r4
 8008234:	f7ff f9ea 	bl	800760c <ai_dict_decompress_f32>
 8008238:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800823c:	b17c      	cbz	r4, 800825e <forward_conv2d_nl_pool+0xbb2>
 800823e:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8008242:	881e      	ldrh	r6, [r3, #0]
 8008244:	f7ff bb44 	b.w	80078d0 <forward_conv2d_nl_pool+0x224>
 8008248:	b178      	cbz	r0, 800826a <forward_conv2d_nl_pool+0xbbe>
 800824a:	6881      	ldr	r1, [r0, #8]
 800824c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8008250:	2201      	movs	r2, #1
 8008252:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8008256:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800825a:	f7ff bad6 	b.w	800780a <forward_conv2d_nl_pool+0x15e>
 800825e:	881e      	ldrh	r6, [r3, #0]
 8008260:	f7ff bb36 	b.w	80078d0 <forward_conv2d_nl_pool+0x224>
 8008264:	2300      	movs	r3, #0
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	deff      	udf	#255	; 0xff
 800826a:	2201      	movs	r2, #1
 800826c:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8008270:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8008274:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008278:	f7ff bac7 	b.w	800780a <forward_conv2d_nl_pool+0x15e>
 800827c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800827e:	2801      	cmp	r0, #1
 8008280:	f47f ac10 	bne.w	8007aa4 <forward_conv2d_nl_pool+0x3f8>
 8008284:	1ad2      	subs	r2, r2, r3
 8008286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008288:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800828c:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008292:	fb00 4101 	mla	r1, r0, r1, r4
 8008296:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800829a:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800829e:	f080 81c4 	bcs.w	800862a <forward_conv2d_nl_pool+0xf7e>
 80082a2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80082a6:	2a00      	cmp	r2, #0
 80082a8:	f43f ad4a 	beq.w	8007d40 <forward_conv2d_nl_pool+0x694>
 80082ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80082b0:	fb02 f303 	mul.w	r3, r2, r3
 80082b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082b6:	677b      	str	r3, [r7, #116]	; 0x74
 80082b8:	1a9b      	subs	r3, r3, r2
 80082ba:	663b      	str	r3, [r7, #96]	; 0x60
 80082bc:	188b      	adds	r3, r1, r2
 80082be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80082c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80082cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80082d0:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 80082d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082dc:	2300      	movs	r3, #0
 80082de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80082e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 8133 	beq.w	8008552 <forward_conv2d_nl_pool+0xea6>
 80082ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082f0:	ed93 6a00 	vldr	s12, [r3]
 80082f4:	3304      	adds	r3, #4
 80082f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 8101 	beq.w	8008506 <forward_conv2d_nl_pool+0xe5a>
 8008304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008308:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800830c:	eb03 0802 	add.w	r8, r3, r2
 8008310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008312:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800831c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008320:	67bb      	str	r3, [r7, #120]	; 0x78
 8008322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800832a:	f04f 0b00 	mov.w	fp, #0
 800832e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008332:	2b00      	cmp	r3, #0
 8008334:	f2c0 8104 	blt.w	8008540 <forward_conv2d_nl_pool+0xe94>
 8008338:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800833c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800833e:	2300      	movs	r3, #0
 8008340:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8008344:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008348:	eb02 0c04 	add.w	ip, r2, r4
 800834c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008350:	4540      	cmp	r0, r8
 8008352:	bf94      	ite	ls
 8008354:	ebc3 0300 	rsbls	r3, r3, r0
 8008358:	ebc3 0308 	rsbhi	r3, r3, r8
 800835c:	eba2 0903 	sub.w	r9, r2, r3
 8008360:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008364:	1ac4      	subs	r4, r0, r3
 8008366:	fb03 f302 	mul.w	r3, r3, r2
 800836a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800836e:	2a00      	cmp	r2, #0
 8008370:	f340 80e3 	ble.w	800853a <forward_conv2d_nl_pool+0xe8e>
 8008374:	f023 050f 	bic.w	r5, r3, #15
 8008378:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 800837c:	1e68      	subs	r0, r5, #1
 800837e:	0900      	lsrs	r0, r0, #4
 8008380:	3001      	adds	r0, #1
 8008382:	fb06 f204 	mul.w	r2, r6, r4
 8008386:	673a      	str	r2, [r7, #112]	; 0x70
 8008388:	0102      	lsls	r2, r0, #4
 800838a:	65ba      	str	r2, [r7, #88]	; 0x58
 800838c:	fb06 f909 	mul.w	r9, r6, r9
 8008390:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8008394:	eef0 6a46 	vmov.f32	s13, s12
 8008398:	f04f 0e00 	mov.w	lr, #0
 800839c:	4662      	mov	r2, ip
 800839e:	2d00      	cmp	r5, #0
 80083a0:	f340 80c9 	ble.w	8008536 <forward_conv2d_nl_pool+0xe8a>
 80083a4:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80083a8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80083ac:	2600      	movs	r6, #0
 80083ae:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 80083b2:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80083b6:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 80083ba:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 80083be:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 80083c2:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 80083c6:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80083ca:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 80083ce:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 80083d2:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 80083d6:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 80083da:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 80083de:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 80083e2:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 80083e6:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 80083ea:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 80083ee:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 80083f2:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 80083f6:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 80083fa:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 80083fe:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8008402:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8008406:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800840a:	ed50 3a04 	vldr	s7, [r0, #-16]
 800840e:	ed14 4a04 	vldr	s8, [r4, #-16]
 8008412:	ed50 4a03 	vldr	s9, [r0, #-12]
 8008416:	ed14 5a03 	vldr	s10, [r4, #-12]
 800841a:	ed50 5a02 	vldr	s11, [r0, #-8]
 800841e:	ed14 7a02 	vldr	s14, [r4, #-8]
 8008422:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8008426:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800842a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800842e:	3610      	adds	r6, #16
 8008430:	42ae      	cmp	r6, r5
 8008432:	ed14 fa01 	vldr	s30, [r4, #-4]
 8008436:	ed50 ea01 	vldr	s29, [r0, #-4]
 800843a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800843e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008442:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8008446:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800844a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800844e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008452:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8008456:	eee9 7a89 	vfma.f32	s15, s19, s18
 800845a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800845e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008462:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008466:	eee2 7a83 	vfma.f32	s15, s5, s6
 800846a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800846e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008472:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008476:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800847a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800847e:	db96      	blt.n	80083ae <forward_conv2d_nl_pool+0xd02>
 8008480:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008482:	4451      	add	r1, sl
 8008484:	4452      	add	r2, sl
 8008486:	4283      	cmp	r3, r0
 8008488:	dd0f      	ble.n	80084aa <forward_conv2d_nl_pool+0xdfe>
 800848a:	4604      	mov	r4, r0
 800848c:	468c      	mov	ip, r1
 800848e:	4616      	mov	r6, r2
 8008490:	ecb6 7a01 	vldmia	r6!, {s14}
 8008494:	ecfc 7a01 	vldmia	ip!, {s15}
 8008498:	3401      	adds	r4, #1
 800849a:	42a3      	cmp	r3, r4
 800849c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80084a0:	d1f6      	bne.n	8008490 <forward_conv2d_nl_pool+0xde4>
 80084a2:	1a18      	subs	r0, r3, r0
 80084a4:	0080      	lsls	r0, r0, #2
 80084a6:	4402      	add	r2, r0
 80084a8:	4401      	add	r1, r0
 80084aa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80084ac:	4402      	add	r2, r0
 80084ae:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80084b2:	f10e 0e01 	add.w	lr, lr, #1
 80084b6:	4570      	cmp	r0, lr
 80084b8:	4449      	add	r1, r9
 80084ba:	f47f af70 	bne.w	800839e <forward_conv2d_nl_pool+0xcf2>
 80084be:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80084c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084c4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80084c8:	edc3 6a00 	vstr	s13, [r3]
 80084cc:	4608      	mov	r0, r1
 80084ce:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80084d2:	440b      	add	r3, r1
 80084d4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80084d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80084da:	4410      	add	r0, r2
 80084dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084de:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80084e2:	4608      	mov	r0, r1
 80084e4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80084e8:	4418      	add	r0, r3
 80084ea:	1acb      	subs	r3, r1, r3
 80084ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80084f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80084f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80084f8:	f10b 0b01 	add.w	fp, fp, #1
 80084fc:	455b      	cmp	r3, fp
 80084fe:	eba8 0802 	sub.w	r8, r8, r2
 8008502:	f47f af14 	bne.w	800832e <forward_conv2d_nl_pool+0xc82>
 8008506:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800850a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800850c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008510:	440a      	add	r2, r1
 8008512:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8008516:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800851a:	3204      	adds	r2, #4
 800851c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8008520:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008524:	3301      	adds	r3, #1
 8008526:	429a      	cmp	r2, r3
 8008528:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800852c:	f47f aed9 	bne.w	80082e2 <forward_conv2d_nl_pool+0xc36>
 8008530:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8008534:	e404      	b.n	8007d40 <forward_conv2d_nl_pool+0x694>
 8008536:	2000      	movs	r0, #0
 8008538:	e7a5      	b.n	8008486 <forward_conv2d_nl_pool+0xdda>
 800853a:	eef0 6a46 	vmov.f32	s13, s12
 800853e:	e7be      	b.n	80084be <forward_conv2d_nl_pool+0xe12>
 8008540:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008544:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008548:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800854c:	eba8 0303 	sub.w	r3, r8, r3
 8008550:	e6f6      	b.n	8008340 <forward_conv2d_nl_pool+0xc94>
 8008552:	eeb0 6a48 	vmov.f32	s12, s16
 8008556:	e6d0      	b.n	80082fa <forward_conv2d_nl_pool+0xc4e>
 8008558:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800855c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008560:	4611      	mov	r1, r2
 8008562:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008566:	4419      	add	r1, r3
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800856e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008574:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8008578:	4413      	add	r3, r2
 800857a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800857e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008582:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008586:	4293      	cmp	r3, r2
 8008588:	f63f aa68 	bhi.w	8007a5c <forward_conv2d_nl_pool+0x3b0>
 800858c:	e49f      	b.n	8007ece <forward_conv2d_nl_pool+0x822>
 800858e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008592:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8008596:	699a      	ldr	r2, [r3, #24]
 8008598:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800859c:	68d1      	ldr	r1, [r2, #12]
 800859e:	6853      	ldr	r3, [r2, #4]
 80085a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085a2:	fb00 4012 	mls	r0, r0, r2, r4
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4281      	cmp	r1, r0
 80085aa:	bf88      	it	hi
 80085ac:	18c0      	addhi	r0, r0, r3
 80085ae:	4281      	cmp	r1, r0
 80085b0:	eb01 0203 	add.w	r2, r1, r3
 80085b4:	d216      	bcs.n	80085e4 <forward_conv2d_nl_pool+0xf38>
 80085b6:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 80085ba:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 80085be:	42a1      	cmp	r1, r4
 80085c0:	d010      	beq.n	80085e4 <forward_conv2d_nl_pool+0xf38>
 80085c2:	4290      	cmp	r0, r2
 80085c4:	d20e      	bcs.n	80085e4 <forward_conv2d_nl_pool+0xf38>
 80085c6:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80085ca:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 80085ce:	f850 3b04 	ldr.w	r3, [r0], #4
 80085d2:	f841 3b04 	str.w	r3, [r1], #4
 80085d6:	69a2      	ldr	r2, [r4, #24]
 80085d8:	6853      	ldr	r3, [r2, #4]
 80085da:	68d2      	ldr	r2, [r2, #12]
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	441a      	add	r2, r3
 80085e0:	4282      	cmp	r2, r0
 80085e2:	d8f4      	bhi.n	80085ce <forward_conv2d_nl_pool+0xf22>
 80085e4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80085e8:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80085ec:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 80085f0:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80085f2:	4420      	add	r0, r4
 80085f4:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80085f8:	1a40      	subs	r0, r0, r1
 80085fa:	4421      	add	r1, r4
 80085fc:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8008600:	442c      	add	r4, r5
 8008602:	b209      	sxth	r1, r1
 8008604:	b200      	sxth	r0, r0
 8008606:	4294      	cmp	r4, r2
 8008608:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800860c:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8008610:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8008614:	4621      	mov	r1, r4
 8008616:	f4ff abfb 	bcc.w	8007e10 <forward_conv2d_nl_pool+0x764>
 800861a:	425b      	negs	r3, r3
 800861c:	4419      	add	r1, r3
 800861e:	4291      	cmp	r1, r2
 8008620:	d2fc      	bcs.n	800861c <forward_conv2d_nl_pool+0xf70>
 8008622:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8008626:	f7ff bbf3 	b.w	8007e10 <forward_conv2d_nl_pool+0x764>
 800862a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800862e:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 8008632:	320a      	adds	r2, #10
 8008634:	f022 0207 	bic.w	r2, r2, #7
 8008638:	ebad 0d02 	sub.w	sp, sp, r2
 800863c:	aa0a      	add	r2, sp, #40	; 0x28
 800863e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8008642:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008646:	2a00      	cmp	r2, #0
 8008648:	f000 8153 	beq.w	80088f2 <forward_conv2d_nl_pool+0x1246>
 800864c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008650:	f8c7 b01c 	str.w	fp, [r7, #28]
 8008654:	fb02 f303 	mul.w	r3, r2, r3
 8008658:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800865a:	663b      	str	r3, [r7, #96]	; 0x60
 800865c:	1a9b      	subs	r3, r3, r2
 800865e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008660:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008664:	f8c7 a014 	str.w	sl, [r7, #20]
 8008668:	4413      	add	r3, r2
 800866a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800866c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008670:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008678:	67bb      	str	r3, [r7, #120]	; 0x78
 800867a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800867e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008682:	2300      	movs	r3, #0
 8008684:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008688:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800868c:	b13b      	cbz	r3, 800869e <forward_conv2d_nl_pool+0xff2>
 800868e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008692:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8008696:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800869a:	f001 f825 	bl	80096e8 <memcpy>
 800869e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f000 8137 	beq.w	8008916 <forward_conv2d_nl_pool+0x126a>
 80086a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086aa:	ed93 6a00 	vldr	s12, [r3]
 80086ae:	3304      	adds	r3, #4
 80086b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80086b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 8101 	beq.w	80088be <forward_conv2d_nl_pool+0x1212>
 80086bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086c0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80086c4:	eb03 0802 	add.w	r8, r3, r2
 80086c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80086ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086d8:	677b      	str	r3, [r7, #116]	; 0x74
 80086da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80086e2:	f04f 0b00 	mov.w	fp, #0
 80086e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f2c0 810a 	blt.w	8008904 <forward_conv2d_nl_pool+0x1258>
 80086f0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80086f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086f6:	2300      	movs	r3, #0
 80086f8:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 80086fc:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008700:	eb02 0c04 	add.w	ip, r2, r4
 8008704:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008708:	4540      	cmp	r0, r8
 800870a:	bf94      	ite	ls
 800870c:	ebc3 0300 	rsbls	r3, r3, r0
 8008710:	ebc3 0308 	rsbhi	r3, r3, r8
 8008714:	eba2 0903 	sub.w	r9, r2, r3
 8008718:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800871c:	1ac4      	subs	r4, r0, r3
 800871e:	fb03 f302 	mul.w	r3, r3, r2
 8008722:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008726:	2a00      	cmp	r2, #0
 8008728:	f340 80e9 	ble.w	80088fe <forward_conv2d_nl_pool+0x1252>
 800872c:	f023 050f 	bic.w	r5, r3, #15
 8008730:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8008734:	1e68      	subs	r0, r5, #1
 8008736:	0900      	lsrs	r0, r0, #4
 8008738:	3001      	adds	r0, #1
 800873a:	fb06 f204 	mul.w	r2, r6, r4
 800873e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008740:	0102      	lsls	r2, r0, #4
 8008742:	62ba      	str	r2, [r7, #40]	; 0x28
 8008744:	fb06 f909 	mul.w	r9, r6, r9
 8008748:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800874c:	eef0 6a46 	vmov.f32	s13, s12
 8008750:	f04f 0e00 	mov.w	lr, #0
 8008754:	4662      	mov	r2, ip
 8008756:	2d00      	cmp	r5, #0
 8008758:	f340 80cf 	ble.w	80088fa <forward_conv2d_nl_pool+0x124e>
 800875c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8008760:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008764:	2600      	movs	r6, #0
 8008766:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800876a:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800876e:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8008772:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 8008776:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800877a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800877e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8008782:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8008786:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800878a:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800878e:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8008792:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8008796:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800879a:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800879e:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 80087a2:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 80087a6:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80087aa:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 80087ae:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80087b2:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 80087b6:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80087ba:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 80087be:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 80087c2:	ed50 3a04 	vldr	s7, [r0, #-16]
 80087c6:	ed14 4a04 	vldr	s8, [r4, #-16]
 80087ca:	ed54 4a03 	vldr	s9, [r4, #-12]
 80087ce:	ed10 5a03 	vldr	s10, [r0, #-12]
 80087d2:	ed50 5a02 	vldr	s11, [r0, #-8]
 80087d6:	ed14 7a02 	vldr	s14, [r4, #-8]
 80087da:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80087de:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 80087e2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80087e6:	3610      	adds	r6, #16
 80087e8:	42ae      	cmp	r6, r5
 80087ea:	ed14 fa01 	vldr	s30, [r4, #-4]
 80087ee:	ed50 ea01 	vldr	s29, [r0, #-4]
 80087f2:	eeee 7a2f 	vfma.f32	s15, s28, s31
 80087f6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80087fa:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80087fe:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8008802:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008806:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800880a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800880e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008812:	eee8 7a80 	vfma.f32	s15, s17, s0
 8008816:	eee0 7a81 	vfma.f32	s15, s1, s2
 800881a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800881e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008822:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008826:	eee4 7a85 	vfma.f32	s15, s9, s10
 800882a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800882e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008832:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008836:	db96      	blt.n	8008766 <forward_conv2d_nl_pool+0x10ba>
 8008838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800883a:	4451      	add	r1, sl
 800883c:	4452      	add	r2, sl
 800883e:	4283      	cmp	r3, r0
 8008840:	dd0f      	ble.n	8008862 <forward_conv2d_nl_pool+0x11b6>
 8008842:	4604      	mov	r4, r0
 8008844:	468c      	mov	ip, r1
 8008846:	4616      	mov	r6, r2
 8008848:	ecb6 7a01 	vldmia	r6!, {s14}
 800884c:	ecfc 7a01 	vldmia	ip!, {s15}
 8008850:	3401      	adds	r4, #1
 8008852:	42a3      	cmp	r3, r4
 8008854:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008858:	d1f6      	bne.n	8008848 <forward_conv2d_nl_pool+0x119c>
 800885a:	1a18      	subs	r0, r3, r0
 800885c:	0080      	lsls	r0, r0, #2
 800885e:	4402      	add	r2, r0
 8008860:	4401      	add	r1, r0
 8008862:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008864:	4402      	add	r2, r0
 8008866:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800886a:	f10e 0e01 	add.w	lr, lr, #1
 800886e:	4570      	cmp	r0, lr
 8008870:	4449      	add	r1, r9
 8008872:	f47f af70 	bne.w	8008756 <forward_conv2d_nl_pool+0x10aa>
 8008876:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800887a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800887c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008880:	edc3 6a00 	vstr	s13, [r3]
 8008884:	4608      	mov	r0, r1
 8008886:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800888a:	440b      	add	r3, r1
 800888c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008890:	677b      	str	r3, [r7, #116]	; 0x74
 8008892:	4410      	add	r0, r2
 8008894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008896:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800889a:	4608      	mov	r0, r1
 800889c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80088a0:	4418      	add	r0, r3
 80088a2:	1acb      	subs	r3, r1, r3
 80088a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80088ac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80088b0:	f10b 0b01 	add.w	fp, fp, #1
 80088b4:	455b      	cmp	r3, fp
 80088b6:	eba8 0802 	sub.w	r8, r8, r2
 80088ba:	f47f af14 	bne.w	80086e6 <forward_conv2d_nl_pool+0x103a>
 80088be:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80088c2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80088c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088ca:	440a      	add	r2, r1
 80088cc:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80088d0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80088d4:	3204      	adds	r2, #4
 80088d6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80088da:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80088de:	3301      	adds	r3, #1
 80088e0:	429a      	cmp	r2, r3
 80088e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088e6:	f47f aecf 	bne.w	8008688 <forward_conv2d_nl_pool+0xfdc>
 80088ea:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 80088ee:	f8d7 a014 	ldr.w	sl, [r7, #20]
 80088f2:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 80088f6:	f7ff ba23 	b.w	8007d40 <forward_conv2d_nl_pool+0x694>
 80088fa:	2000      	movs	r0, #0
 80088fc:	e79f      	b.n	800883e <forward_conv2d_nl_pool+0x1192>
 80088fe:	eef0 6a46 	vmov.f32	s13, s12
 8008902:	e7b8      	b.n	8008876 <forward_conv2d_nl_pool+0x11ca>
 8008904:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008908:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800890c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008910:	eba8 0303 	sub.w	r3, r8, r3
 8008914:	e6f0      	b.n	80086f8 <forward_conv2d_nl_pool+0x104c>
 8008916:	eeb0 6a48 	vmov.f32	s12, s16
 800891a:	e6ca      	b.n	80086b2 <forward_conv2d_nl_pool+0x1006>

0800891c <forward_dense>:
 800891c:	6983      	ldr	r3, [r0, #24]
 800891e:	881a      	ldrh	r2, [r3, #0]
 8008920:	2a00      	cmp	r2, #0
 8008922:	f000 80b5 	beq.w	8008a90 <forward_dense+0x174>
 8008926:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892a:	ed2d 8b10 	vpush	{d8-d15}
 800892e:	685f      	ldr	r7, [r3, #4]
 8008930:	687e      	ldr	r6, [r7, #4]
 8008932:	b091      	sub	sp, #68	; 0x44
 8008934:	b106      	cbz	r6, 8008938 <forward_dense+0x1c>
 8008936:	6836      	ldr	r6, [r6, #0]
 8008938:	2a01      	cmp	r2, #1
 800893a:	f240 80a6 	bls.w	8008a8a <forward_dense+0x16e>
 800893e:	693d      	ldr	r5, [r7, #16]
 8008940:	b105      	cbz	r5, 8008944 <forward_dense+0x28>
 8008942:	682d      	ldr	r5, [r5, #0]
 8008944:	2a02      	cmp	r2, #2
 8008946:	f000 80a5 	beq.w	8008a94 <forward_dense+0x178>
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 821b 	beq.w	8008d88 <forward_dense+0x46c>
 8008952:	6819      	ldr	r1, [r3, #0]
 8008954:	9106      	str	r1, [sp, #24]
 8008956:	f117 0118 	adds.w	r1, r7, #24
 800895a:	f000 80c9 	beq.w	8008af0 <forward_dense+0x1d4>
 800895e:	8b39      	ldrh	r1, [r7, #24]
 8008960:	2901      	cmp	r1, #1
 8008962:	f240 820e 	bls.w	8008d82 <forward_dense+0x466>
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 80c4 	beq.w	8008af4 <forward_dense+0x1d8>
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	9307      	str	r3, [sp, #28]
 8008970:	9b06      	ldr	r3, [sp, #24]
 8008972:	68ec      	ldr	r4, [r5, #12]
 8008974:	6998      	ldr	r0, [r3, #24]
 8008976:	68f1      	ldr	r1, [r6, #12]
 8008978:	6803      	ldr	r3, [r0, #0]
 800897a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800897e:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 8008982:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8008986:	f3c3 5141 	ubfx	r1, r3, #21, #2
 800898a:	fa49 f101 	asr.w	r1, r9, r1
 800898e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008990:	2a03      	cmp	r2, #3
 8008992:	fb0e f10c 	mul.w	r1, lr, ip
 8008996:	6864      	ldr	r4, [r4, #4]
 8008998:	9108      	str	r1, [sp, #32]
 800899a:	f000 81de 	beq.w	8008d5a <forward_dense+0x43e>
 800899e:	6abf      	ldr	r7, [r7, #40]	; 0x28
 80089a0:	b117      	cbz	r7, 80089a8 <forward_dense+0x8c>
 80089a2:	683f      	ldr	r7, [r7, #0]
 80089a4:	b107      	cbz	r7, 80089a8 <forward_dense+0x8c>
 80089a6:	69bf      	ldr	r7, [r7, #24]
 80089a8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80089ac:	2b04      	cmp	r3, #4
 80089ae:	f000 81d7 	beq.w	8008d60 <forward_dense+0x444>
 80089b2:	2b08      	cmp	r3, #8
 80089b4:	f000 81d4 	beq.w	8008d60 <forward_dense+0x444>
 80089b8:	f04f 0a00 	mov.w	sl, #0
 80089bc:	69ab      	ldr	r3, [r5, #24]
 80089be:	69b2      	ldr	r2, [r6, #24]
 80089c0:	6899      	ldr	r1, [r3, #8]
 80089c2:	9b06      	ldr	r3, [sp, #24]
 80089c4:	9104      	str	r1, [sp, #16]
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	6897      	ldr	r7, [r2, #8]
 80089ca:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80089ce:	00a3      	lsls	r3, r4, #2
 80089d0:	9309      	str	r3, [sp, #36]	; 0x24
 80089d2:	18ce      	adds	r6, r1, r3
 80089d4:	9b08      	ldr	r3, [sp, #32]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d052      	beq.n	8008a80 <forward_dense+0x164>
 80089da:	f1a8 0310 	sub.w	r3, r8, #16
 80089de:	091b      	lsrs	r3, r3, #4
 80089e0:	3301      	adds	r3, #1
 80089e2:	019b      	lsls	r3, r3, #6
 80089e4:	930c      	str	r3, [sp, #48]	; 0x30
 80089e6:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80089ea:	930a      	str	r3, [sp, #40]	; 0x28
 80089ec:	2300      	movs	r3, #0
 80089ee:	9305      	str	r3, [sp, #20]
 80089f0:	eddf aace 	vldr	s21, [pc, #824]	; 8008d2c <forward_dense+0x410>
 80089f4:	f008 030f 	and.w	r3, r8, #15
 80089f8:	930d      	str	r3, [sp, #52]	; 0x34
 80089fa:	9b06      	ldr	r3, [sp, #24]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	689d      	ldr	r5, [r3, #8]
 8008a00:	9b07      	ldr	r3, [sp, #28]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 818f 	beq.w	8008d26 <forward_dense+0x40a>
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	689c      	ldr	r4, [r3, #8]
 8008a0c:	9b04      	ldr	r3, [sp, #16]
 8008a0e:	f1ba 0f00 	cmp.w	sl, #0
 8008a12:	d071      	beq.n	8008af8 <forward_dense+0x1dc>
 8008a14:	42b3      	cmp	r3, r6
 8008a16:	d229      	bcs.n	8008a6c <forward_dense+0x150>
 8008a18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a1a:	469b      	mov	fp, r3
 8008a1c:	ab0f      	add	r3, sp, #60	; 0x3c
 8008a1e:	9303      	str	r3, [sp, #12]
 8008a20:	2a04      	cmp	r2, #4
 8008a22:	4633      	mov	r3, r6
 8008a24:	4646      	mov	r6, r8
 8008a26:	4698      	mov	r8, r3
 8008a28:	d037      	beq.n	8008a9a <forward_dense+0x17e>
 8008a2a:	2c00      	cmp	r4, #0
 8008a2c:	f000 8180 	beq.w	8008d30 <forward_dense+0x414>
 8008a30:	f8d4 c000 	ldr.w	ip, [r4]
 8008a34:	9803      	ldr	r0, [sp, #12]
 8008a36:	9600      	str	r6, [sp, #0]
 8008a38:	463b      	mov	r3, r7
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	4652      	mov	r2, sl
 8008a3e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8008a42:	f7fe fc57 	bl	80072f4 <ai_dict8_dot_array_f32>
 8008a46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a48:	f84b 3b04 	str.w	r3, [fp], #4
 8008a4c:	45c3      	cmp	fp, r8
 8008a4e:	f104 0404 	add.w	r4, r4, #4
 8008a52:	444d      	add	r5, r9
 8008a54:	d3e9      	bcc.n	8008a2a <forward_dense+0x10e>
 8008a56:	4643      	mov	r3, r8
 8008a58:	46b0      	mov	r8, r6
 8008a5a:	461e      	mov	r6, r3
 8008a5c:	9a04      	ldr	r2, [sp, #16]
 8008a5e:	43d3      	mvns	r3, r2
 8008a60:	4433      	add	r3, r6
 8008a62:	f023 0303 	bic.w	r3, r3, #3
 8008a66:	3304      	adds	r3, #4
 8008a68:	18d3      	adds	r3, r2, r3
 8008a6a:	9304      	str	r3, [sp, #16]
 8008a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a6e:	9b05      	ldr	r3, [sp, #20]
 8008a70:	4417      	add	r7, r2
 8008a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a74:	4416      	add	r6, r2
 8008a76:	9a08      	ldr	r2, [sp, #32]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	9305      	str	r3, [sp, #20]
 8008a7e:	d1bc      	bne.n	80089fa <forward_dense+0xde>
 8008a80:	b011      	add	sp, #68	; 0x44
 8008a82:	ecbd 8b10 	vpop	{d8-d15}
 8008a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	deff      	udf	#255	; 0xff
 8008a90:	6853      	ldr	r3, [r2, #4]
 8008a92:	deff      	udf	#255	; 0xff
 8008a94:	2300      	movs	r3, #0
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	deff      	udf	#255	; 0xff
 8008a9a:	b1a4      	cbz	r4, 8008ac6 <forward_dense+0x1aa>
 8008a9c:	f8d4 c000 	ldr.w	ip, [r4]
 8008aa0:	9803      	ldr	r0, [sp, #12]
 8008aa2:	9600      	str	r6, [sp, #0]
 8008aa4:	463b      	mov	r3, r7
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	4652      	mov	r2, sl
 8008aaa:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8008aae:	f7fe fcef 	bl	8007490 <ai_dict4_dot_array_f32>
 8008ab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ab4:	f84b 3b04 	str.w	r3, [fp], #4
 8008ab8:	45c3      	cmp	fp, r8
 8008aba:	f104 0404 	add.w	r4, r4, #4
 8008abe:	444d      	add	r5, r9
 8008ac0:	d2c9      	bcs.n	8008a56 <forward_dense+0x13a>
 8008ac2:	2c00      	cmp	r4, #0
 8008ac4:	d1ea      	bne.n	8008a9c <forward_dense+0x180>
 8008ac6:	4634      	mov	r4, r6
 8008ac8:	4646      	mov	r6, r8
 8008aca:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008ace:	9400      	str	r4, [sp, #0]
 8008ad0:	463b      	mov	r3, r7
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	4652      	mov	r2, sl
 8008ad6:	4640      	mov	r0, r8
 8008ad8:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8008adc:	f7fe fcd8 	bl	8007490 <ai_dict4_dot_array_f32>
 8008ae0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ae2:	f84b 3b04 	str.w	r3, [fp], #4
 8008ae6:	45b3      	cmp	fp, r6
 8008ae8:	444d      	add	r5, r9
 8008aea:	d3f0      	bcc.n	8008ace <forward_dense+0x1b2>
 8008aec:	46a0      	mov	r8, r4
 8008aee:	e7b5      	b.n	8008a5c <forward_dense+0x140>
 8008af0:	9107      	str	r1, [sp, #28]
 8008af2:	e73d      	b.n	8008970 <forward_dense+0x54>
 8008af4:	9307      	str	r3, [sp, #28]
 8008af6:	e73b      	b.n	8008970 <forward_dense+0x54>
 8008af8:	42b3      	cmp	r3, r6
 8008afa:	d2b7      	bcs.n	8008a6c <forward_dense+0x150>
 8008afc:	4618      	mov	r0, r3
 8008afe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b00:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8008b04:	eb07 0c03 	add.w	ip, r7, r3
 8008b08:	469e      	mov	lr, r3
 8008b0a:	2c00      	cmp	r4, #0
 8008b0c:	f000 80ff 	beq.w	8008d0e <forward_dense+0x3f2>
 8008b10:	f1b8 0f0f 	cmp.w	r8, #15
 8008b14:	edd4 fa00 	vldr	s31, [r4]
 8008b18:	eddf 6a84 	vldr	s13, [pc, #528]	; 8008d2c <forward_dense+0x410>
 8008b1c:	f104 0404 	add.w	r4, r4, #4
 8008b20:	f240 80fd 	bls.w	8008d1e <forward_dense+0x402>
 8008b24:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008b28:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8008b2c:	4641      	mov	r1, r8
 8008b2e:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8008b32:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008b36:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8008b3a:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8008b3e:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8008b42:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8008b46:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8008b4a:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8008b4e:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8008b52:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8008b56:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8008b5a:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8008b5e:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8008b62:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8008b66:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8008b6a:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8008b6e:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8008b72:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8008b76:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8008b7a:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8008b7e:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8008b82:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8008b86:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8008b8a:	ed12 4a04 	vldr	s8, [r2, #-16]
 8008b8e:	ed53 4a04 	vldr	s9, [r3, #-16]
 8008b92:	ed13 5a03 	vldr	s10, [r3, #-12]
 8008b96:	ed52 5a03 	vldr	s11, [r2, #-12]
 8008b9a:	ed13 6a02 	vldr	s12, [r3, #-8]
 8008b9e:	ed12 7a02 	vldr	s14, [r2, #-8]
 8008ba2:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8008ba6:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8008baa:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8008bae:	3910      	subs	r1, #16
 8008bb0:	290f      	cmp	r1, #15
 8008bb2:	ed52 ea01 	vldr	s29, [r2, #-4]
 8008bb6:	ed13 ea01 	vldr	s28, [r3, #-4]
 8008bba:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8008bbe:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8008bc2:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8008bc6:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8008bca:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8008bce:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8008bd2:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008bd6:	eee8 7a88 	vfma.f32	s15, s17, s16
 8008bda:	eee0 7a20 	vfma.f32	s15, s0, s1
 8008bde:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008be2:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008be6:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008bea:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008bee:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008bf2:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008bf6:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8008bfa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008bfe:	d896      	bhi.n	8008b2e <forward_dense+0x212>
 8008c00:	eb05 010e 	add.w	r1, r5, lr
 8008c04:	465b      	mov	r3, fp
 8008c06:	4662      	mov	r2, ip
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d075      	beq.n	8008cf8 <forward_dense+0x3dc>
 8008c0c:	ed91 7a00 	vldr	s14, [r1]
 8008c10:	edd2 7a00 	vldr	s15, [r2]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008c1a:	d06d      	beq.n	8008cf8 <forward_dense+0x3dc>
 8008c1c:	ed91 7a01 	vldr	s14, [r1, #4]
 8008c20:	edd2 7a01 	vldr	s15, [r2, #4]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008c2a:	d065      	beq.n	8008cf8 <forward_dense+0x3dc>
 8008c2c:	ed91 7a02 	vldr	s14, [r1, #8]
 8008c30:	edd2 7a02 	vldr	s15, [r2, #8]
 8008c34:	2b03      	cmp	r3, #3
 8008c36:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008c3a:	d05d      	beq.n	8008cf8 <forward_dense+0x3dc>
 8008c3c:	ed91 7a03 	vldr	s14, [r1, #12]
 8008c40:	edd2 7a03 	vldr	s15, [r2, #12]
 8008c44:	2b04      	cmp	r3, #4
 8008c46:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008c4a:	d055      	beq.n	8008cf8 <forward_dense+0x3dc>
 8008c4c:	ed91 7a04 	vldr	s14, [r1, #16]
 8008c50:	edd2 7a04 	vldr	s15, [r2, #16]
 8008c54:	2b05      	cmp	r3, #5
 8008c56:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008c5a:	d04d      	beq.n	8008cf8 <forward_dense+0x3dc>
 8008c5c:	ed91 7a05 	vldr	s14, [r1, #20]
 8008c60:	edd2 7a05 	vldr	s15, [r2, #20]
 8008c64:	2b06      	cmp	r3, #6
 8008c66:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008c6a:	d045      	beq.n	8008cf8 <forward_dense+0x3dc>
 8008c6c:	ed91 7a06 	vldr	s14, [r1, #24]
 8008c70:	edd2 7a06 	vldr	s15, [r2, #24]
 8008c74:	2b07      	cmp	r3, #7
 8008c76:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008c7a:	d03d      	beq.n	8008cf8 <forward_dense+0x3dc>
 8008c7c:	ed91 7a07 	vldr	s14, [r1, #28]
 8008c80:	edd2 7a07 	vldr	s15, [r2, #28]
 8008c84:	2b08      	cmp	r3, #8
 8008c86:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008c8a:	d035      	beq.n	8008cf8 <forward_dense+0x3dc>
 8008c8c:	ed91 7a08 	vldr	s14, [r1, #32]
 8008c90:	edd2 7a08 	vldr	s15, [r2, #32]
 8008c94:	2b09      	cmp	r3, #9
 8008c96:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008c9a:	d02d      	beq.n	8008cf8 <forward_dense+0x3dc>
 8008c9c:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8008ca0:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8008ca4:	2b0a      	cmp	r3, #10
 8008ca6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008caa:	d025      	beq.n	8008cf8 <forward_dense+0x3dc>
 8008cac:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8008cb0:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8008cb4:	2b0b      	cmp	r3, #11
 8008cb6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008cba:	d01d      	beq.n	8008cf8 <forward_dense+0x3dc>
 8008cbc:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8008cc0:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8008cc4:	2b0c      	cmp	r3, #12
 8008cc6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008cca:	d015      	beq.n	8008cf8 <forward_dense+0x3dc>
 8008ccc:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8008cd0:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8008cd4:	2b0d      	cmp	r3, #13
 8008cd6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008cda:	d00d      	beq.n	8008cf8 <forward_dense+0x3dc>
 8008cdc:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8008ce0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8008ce4:	2b0e      	cmp	r3, #14
 8008ce6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008cea:	d005      	beq.n	8008cf8 <forward_dense+0x3dc>
 8008cec:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8008cf0:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8008cf4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008cf8:	444d      	add	r5, r9
 8008cfa:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8008cfe:	ece0 6a01 	vstmia	r0!, {s13}
 8008d02:	42b0      	cmp	r0, r6
 8008d04:	f4bf aeaa 	bcs.w	8008a5c <forward_dense+0x140>
 8008d08:	2c00      	cmp	r4, #0
 8008d0a:	f47f af01 	bne.w	8008b10 <forward_dense+0x1f4>
 8008d0e:	f1b8 0f0f 	cmp.w	r8, #15
 8008d12:	eef0 fa6a 	vmov.f32	s31, s21
 8008d16:	eddf 6a05 	vldr	s13, [pc, #20]	; 8008d2c <forward_dense+0x410>
 8008d1a:	f63f af03 	bhi.w	8008b24 <forward_dense+0x208>
 8008d1e:	4643      	mov	r3, r8
 8008d20:	4629      	mov	r1, r5
 8008d22:	463a      	mov	r2, r7
 8008d24:	e770      	b.n	8008c08 <forward_dense+0x2ec>
 8008d26:	461c      	mov	r4, r3
 8008d28:	e670      	b.n	8008a0c <forward_dense+0xf0>
 8008d2a:	bf00      	nop
 8008d2c:	00000000 	.word	0x00000000
 8008d30:	4634      	mov	r4, r6
 8008d32:	4646      	mov	r6, r8
 8008d34:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008d38:	9400      	str	r4, [sp, #0]
 8008d3a:	463b      	mov	r3, r7
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	4652      	mov	r2, sl
 8008d40:	4640      	mov	r0, r8
 8008d42:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8008d46:	f7fe fad5 	bl	80072f4 <ai_dict8_dot_array_f32>
 8008d4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d4c:	f84b 3b04 	str.w	r3, [fp], #4
 8008d50:	455e      	cmp	r6, fp
 8008d52:	444d      	add	r5, r9
 8008d54:	d8f0      	bhi.n	8008d38 <forward_dense+0x41c>
 8008d56:	46a0      	mov	r8, r4
 8008d58:	e680      	b.n	8008a5c <forward_dense+0x140>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	deff      	udf	#255	; 0xff
 8008d60:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008d64:	2f00      	cmp	r7, #0
 8008d66:	f43f ae29 	beq.w	80089bc <forward_dense+0xa0>
 8008d6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d6e:	f000 fc67 	bl	8009640 <ai_array_get_byte_size>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	4602      	mov	r2, r0
 8008d76:	4651      	mov	r1, sl
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 fcb5 	bl	80096e8 <memcpy>
 8008d7e:	4682      	mov	sl, r0
 8008d80:	e61c      	b.n	80089bc <forward_dense+0xa0>
 8008d82:	2300      	movs	r3, #0
 8008d84:	9307      	str	r3, [sp, #28]
 8008d86:	e5f3      	b.n	8008970 <forward_dense+0x54>
 8008d88:	9306      	str	r3, [sp, #24]
 8008d8a:	e5e4      	b.n	8008956 <forward_dense+0x3a>

08008d8c <nl_func_relu_array_f32>:
 8008d8c:	b410      	push	{r4}
 8008d8e:	698c      	ldr	r4, [r1, #24]
 8008d90:	6981      	ldr	r1, [r0, #24]
 8008d92:	68a3      	ldr	r3, [r4, #8]
 8008d94:	6889      	ldr	r1, [r1, #8]
 8008d96:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008d9a:	3a01      	subs	r2, #1
 8008d9c:	0092      	lsls	r2, r2, #2
 8008d9e:	189b      	adds	r3, r3, r2
 8008da0:	d216      	bcs.n	8008dd0 <nl_func_relu_array_f32+0x44>
 8008da2:	3204      	adds	r2, #4
 8008da4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008dd8 <nl_func_relu_array_f32+0x4c>
 8008da8:	4411      	add	r1, r2
 8008daa:	3304      	adds	r3, #4
 8008dac:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008db0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db8:	bfb8      	it	lt
 8008dba:	eef0 7a47 	vmovlt.f32	s15, s14
 8008dbe:	ed61 7a01 	vstmdb	r1!, {s15}
 8008dc2:	68a0      	ldr	r0, [r4, #8]
 8008dc4:	f1a3 0208 	sub.w	r2, r3, #8
 8008dc8:	4290      	cmp	r0, r2
 8008dca:	f1a3 0304 	sub.w	r3, r3, #4
 8008dce:	d9ed      	bls.n	8008dac <nl_func_relu_array_f32+0x20>
 8008dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	00000000 	.word	0x00000000

08008ddc <nl_func_sm_array_f32>:
 8008ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de0:	ed2d 8b04 	vpush	{d8-d9}
 8008de4:	b089      	sub	sp, #36	; 0x24
 8008de6:	698f      	ldr	r7, [r1, #24]
 8008de8:	6984      	ldr	r4, [r0, #24]
 8008dea:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8008dee:	68bd      	ldr	r5, [r7, #8]
 8008df0:	9402      	str	r4, [sp, #8]
 8008df2:	4626      	mov	r6, r4
 8008df4:	4696      	mov	lr, r2
 8008df6:	eba2 020c 	sub.w	r2, r2, ip
 8008dfa:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8008dfe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	68b6      	ldr	r6, [r6, #8]
 8008e04:	ebae 0e04 	sub.w	lr, lr, r4
 8008e08:	4295      	cmp	r5, r2
 8008e0a:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 8008e0e:	d354      	bcc.n	8008eba <nl_func_sm_array_f32+0xde>
 8008e10:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8008e14:	f1cc 0200 	rsb	r2, ip, #0
 8008e18:	00a4      	lsls	r4, r4, #2
 8008e1a:	e9cd 1006 	strd	r1, r0, [sp, #24]
 8008e1e:	9303      	str	r3, [sp, #12]
 8008e20:	9204      	str	r2, [sp, #16]
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4262      	negs	r2, r4
 8008e26:	9205      	str	r2, [sp, #20]
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8008e2e:	9b02      	ldr	r3, [sp, #8]
 8008e30:	9a07      	ldr	r2, [sp, #28]
 8008e32:	60bd      	str	r5, [r7, #8]
 8008e34:	609e      	str	r6, [r3, #8]
 8008e36:	9b06      	ldr	r3, [sp, #24]
 8008e38:	6992      	ldr	r2, [r2, #24]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	6894      	ldr	r4, [r2, #8]
 8008e3e:	9a03      	ldr	r2, [sp, #12]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	2a01      	cmp	r2, #1
 8008e44:	ed93 8a00 	vldr	s16, [r3]
 8008e48:	d940      	bls.n	8008ecc <nl_func_sm_array_f32+0xf0>
 8008e4a:	9901      	ldr	r1, [sp, #4]
 8008e4c:	1d1a      	adds	r2, r3, #4
 8008e4e:	eb03 0b01 	add.w	fp, r3, r1
 8008e52:	ecf2 7a01 	vldmia	r2!, {s15}
 8008e56:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e5e:	bfb8      	it	lt
 8008e60:	eeb0 8a67 	vmovlt.f32	s16, s15
 8008e64:	4593      	cmp	fp, r2
 8008e66:	d1f4      	bne.n	8008e52 <nl_func_sm_array_f32+0x76>
 8008e68:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8008ed8 <nl_func_sm_array_f32+0xfc>
 8008e6c:	469a      	mov	sl, r3
 8008e6e:	46a1      	mov	r9, r4
 8008e70:	46a0      	mov	r8, r4
 8008e72:	ecba 0a01 	vldmia	sl!, {s0}
 8008e76:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008e7a:	f003 f9ed 	bl	800c258 <expf>
 8008e7e:	45d3      	cmp	fp, sl
 8008e80:	eca8 0a01 	vstmia	r8!, {s0}
 8008e84:	ee78 8a80 	vadd.f32	s17, s17, s0
 8008e88:	d1f3      	bne.n	8008e72 <nl_func_sm_array_f32+0x96>
 8008e8a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e92:	d00b      	beq.n	8008eac <nl_func_sm_array_f32+0xd0>
 8008e94:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8008e98:	9b01      	ldr	r3, [sp, #4]
 8008e9a:	441c      	add	r4, r3
 8008e9c:	edd9 7a00 	vldr	s15, [r9]
 8008ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ea4:	ece9 7a01 	vstmia	r9!, {s15}
 8008ea8:	454c      	cmp	r4, r9
 8008eaa:	d1f7      	bne.n	8008e9c <nl_func_sm_array_f32+0xc0>
 8008eac:	9b04      	ldr	r3, [sp, #16]
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	441d      	add	r5, r3
 8008eb2:	9b05      	ldr	r3, [sp, #20]
 8008eb4:	42aa      	cmp	r2, r5
 8008eb6:	441e      	add	r6, r3
 8008eb8:	d9b9      	bls.n	8008e2e <nl_func_sm_array_f32+0x52>
 8008eba:	60ba      	str	r2, [r7, #8]
 8008ebc:	9a02      	ldr	r2, [sp, #8]
 8008ebe:	68d3      	ldr	r3, [r2, #12]
 8008ec0:	6093      	str	r3, [r2, #8]
 8008ec2:	b009      	add	sp, #36	; 0x24
 8008ec4:	ecbd 8b04 	vpop	{d8-d9}
 8008ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ecc:	2a00      	cmp	r2, #0
 8008ece:	d0ed      	beq.n	8008eac <nl_func_sm_array_f32+0xd0>
 8008ed0:	9a01      	ldr	r2, [sp, #4]
 8008ed2:	eb03 0b02 	add.w	fp, r3, r2
 8008ed6:	e7c7      	b.n	8008e68 <nl_func_sm_array_f32+0x8c>
 8008ed8:	00000000 	.word	0x00000000

08008edc <nl_func_relu_generic_array_f32>:
 8008edc:	b430      	push	{r4, r5}
 8008ede:	6989      	ldr	r1, [r1, #24]
 8008ee0:	6980      	ldr	r0, [r0, #24]
 8008ee2:	edd3 6a02 	vldr	s13, [r3, #8]
 8008ee6:	688c      	ldr	r4, [r1, #8]
 8008ee8:	6880      	ldr	r0, [r0, #8]
 8008eea:	ed93 7a00 	vldr	s14, [r3]
 8008eee:	ed93 6a01 	vldr	s12, [r3, #4]
 8008ef2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008ef6:	3a01      	subs	r2, #1
 8008ef8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008efc:	0092      	lsls	r2, r2, #2
 8008efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f02:	4410      	add	r0, r2
 8008f04:	4422      	add	r2, r4
 8008f06:	d421      	bmi.n	8008f4c <nl_func_relu_generic_array_f32+0x70>
 8008f08:	4294      	cmp	r4, r2
 8008f0a:	d83d      	bhi.n	8008f88 <nl_func_relu_generic_array_f32+0xac>
 8008f0c:	1d13      	adds	r3, r2, #4
 8008f0e:	1d02      	adds	r2, r0, #4
 8008f10:	e010      	b.n	8008f34 <nl_func_relu_generic_array_f32+0x58>
 8008f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f1a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8008f1e:	d501      	bpl.n	8008f24 <nl_func_relu_generic_array_f32+0x48>
 8008f20:	ee65 7a86 	vmul.f32	s15, s11, s12
 8008f24:	ed62 7a01 	vstmdb	r2!, {s15}
 8008f28:	6888      	ldr	r0, [r1, #8]
 8008f2a:	f1a3 0408 	sub.w	r4, r3, #8
 8008f2e:	4284      	cmp	r4, r0
 8008f30:	462b      	mov	r3, r5
 8008f32:	d329      	bcc.n	8008f88 <nl_func_relu_generic_array_f32+0xac>
 8008f34:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008f38:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f40:	f1a3 0504 	sub.w	r5, r3, #4
 8008f44:	d4e5      	bmi.n	8008f12 <nl_func_relu_generic_array_f32+0x36>
 8008f46:	eef0 7a66 	vmov.f32	s15, s13
 8008f4a:	e7eb      	b.n	8008f24 <nl_func_relu_generic_array_f32+0x48>
 8008f4c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f54:	d01a      	beq.n	8008f8c <nl_func_relu_generic_array_f32+0xb0>
 8008f56:	4294      	cmp	r4, r2
 8008f58:	d816      	bhi.n	8008f88 <nl_func_relu_generic_array_f32+0xac>
 8008f5a:	1d13      	adds	r3, r2, #4
 8008f5c:	1d02      	adds	r2, r0, #4
 8008f5e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008f62:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f6a:	f1a3 0408 	sub.w	r4, r3, #8
 8008f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f72:	f1a3 0004 	sub.w	r0, r3, #4
 8008f76:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008f7a:	4623      	mov	r3, r4
 8008f7c:	d51e      	bpl.n	8008fbc <nl_func_relu_generic_array_f32+0xe0>
 8008f7e:	ed62 6a01 	vstmdb	r2!, {s13}
 8008f82:	688b      	ldr	r3, [r1, #8]
 8008f84:	42a3      	cmp	r3, r4
 8008f86:	d91e      	bls.n	8008fc6 <nl_func_relu_generic_array_f32+0xea>
 8008f88:	bc30      	pop	{r4, r5}
 8008f8a:	4770      	bx	lr
 8008f8c:	4294      	cmp	r4, r2
 8008f8e:	d8fb      	bhi.n	8008f88 <nl_func_relu_generic_array_f32+0xac>
 8008f90:	1d13      	adds	r3, r2, #4
 8008f92:	2500      	movs	r5, #0
 8008f94:	1d02      	adds	r2, r0, #4
 8008f96:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f9e:	f1a3 0408 	sub.w	r4, r3, #8
 8008fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa6:	f1a3 0004 	sub.w	r0, r3, #4
 8008faa:	4623      	mov	r3, r4
 8008fac:	db0d      	blt.n	8008fca <nl_func_relu_generic_array_f32+0xee>
 8008fae:	ed62 7a01 	vstmdb	r2!, {s15}
 8008fb2:	688b      	ldr	r3, [r1, #8]
 8008fb4:	42a3      	cmp	r3, r4
 8008fb6:	d8e7      	bhi.n	8008f88 <nl_func_relu_generic_array_f32+0xac>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	e7ec      	b.n	8008f96 <nl_func_relu_generic_array_f32+0xba>
 8008fbc:	ed62 7a01 	vstmdb	r2!, {s15}
 8008fc0:	688c      	ldr	r4, [r1, #8]
 8008fc2:	429c      	cmp	r4, r3
 8008fc4:	d8e0      	bhi.n	8008f88 <nl_func_relu_generic_array_f32+0xac>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	e7c9      	b.n	8008f5e <nl_func_relu_generic_array_f32+0x82>
 8008fca:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008fce:	688c      	ldr	r4, [r1, #8]
 8008fd0:	429c      	cmp	r4, r3
 8008fd2:	d8d9      	bhi.n	8008f88 <nl_func_relu_generic_array_f32+0xac>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	e7de      	b.n	8008f96 <nl_func_relu_generic_array_f32+0xba>

08008fd8 <forward_relu>:
 8008fd8:	6982      	ldr	r2, [r0, #24]
 8008fda:	8813      	ldrh	r3, [r2, #0]
 8008fdc:	b333      	cbz	r3, 800902c <forward_relu+0x54>
 8008fde:	6852      	ldr	r2, [r2, #4]
 8008fe0:	6851      	ldr	r1, [r2, #4]
 8008fe2:	b101      	cbz	r1, 8008fe6 <forward_relu+0xe>
 8008fe4:	6809      	ldr	r1, [r1, #0]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d91d      	bls.n	8009026 <forward_relu+0x4e>
 8008fea:	b4f0      	push	{r4, r5, r6, r7}
 8008fec:	6917      	ldr	r7, [r2, #16]
 8008fee:	b107      	cbz	r7, 8008ff2 <forward_relu+0x1a>
 8008ff0:	683f      	ldr	r7, [r7, #0]
 8008ff2:	688c      	ldr	r4, [r1, #8]
 8008ff4:	69c3      	ldr	r3, [r0, #28]
 8008ff6:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d044      	beq.n	8009088 <forward_relu+0xb0>
 8008ffe:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8009002:	2d01      	cmp	r5, #1
 8009004:	d014      	beq.n	8009030 <forward_relu+0x58>
 8009006:	2c00      	cmp	r4, #0
 8009008:	d074      	beq.n	80090f4 <forward_relu+0x11c>
 800900a:	68ce      	ldr	r6, [r1, #12]
 800900c:	2201      	movs	r2, #1
 800900e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8009012:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009016:	42a6      	cmp	r6, r4
 8009018:	fb05 f202 	mul.w	r2, r5, r2
 800901c:	d1f9      	bne.n	8009012 <forward_relu+0x3a>
 800901e:	4638      	mov	r0, r7
 8009020:	bcf0      	pop	{r4, r5, r6, r7}
 8009022:	f7ff bf5b 	b.w	8008edc <nl_func_relu_generic_array_f32>
 8009026:	2300      	movs	r3, #0
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	deff      	udf	#255	; 0xff
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	deff      	udf	#255	; 0xff
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	6988      	ldr	r0, [r1, #24]
 8009034:	6896      	ldr	r6, [r2, #8]
 8009036:	ed93 7a00 	vldr	s14, [r3]
 800903a:	6882      	ldr	r2, [r0, #8]
 800903c:	b184      	cbz	r4, 8009060 <forward_relu+0x88>
 800903e:	68cf      	ldr	r7, [r1, #12]
 8009040:	462b      	mov	r3, r5
 8009042:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8009046:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800904a:	42a7      	cmp	r7, r4
 800904c:	fb01 f303 	mul.w	r3, r1, r3
 8009050:	d1f9      	bne.n	8009046 <forward_relu+0x6e>
 8009052:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009056:	3b01      	subs	r3, #1
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	18d2      	adds	r2, r2, r3
 800905c:	441e      	add	r6, r3
 800905e:	d23f      	bcs.n	80090e0 <forward_relu+0x108>
 8009060:	1d13      	adds	r3, r2, #4
 8009062:	2500      	movs	r5, #0
 8009064:	1d32      	adds	r2, r6, #4
 8009066:	ed53 7a01 	vldr	s15, [r3, #-4]
 800906a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800906e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009072:	f1a3 0104 	sub.w	r1, r3, #4
 8009076:	d835      	bhi.n	80090e4 <forward_relu+0x10c>
 8009078:	ed62 7a01 	vstmdb	r2!, {s15}
 800907c:	6884      	ldr	r4, [r0, #8]
 800907e:	3b08      	subs	r3, #8
 8009080:	429c      	cmp	r4, r3
 8009082:	d82d      	bhi.n	80090e0 <forward_relu+0x108>
 8009084:	460b      	mov	r3, r1
 8009086:	e7ee      	b.n	8009066 <forward_relu+0x8e>
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	698d      	ldr	r5, [r1, #24]
 800908c:	6898      	ldr	r0, [r3, #8]
 800908e:	68ab      	ldr	r3, [r5, #8]
 8009090:	b184      	cbz	r4, 80090b4 <forward_relu+0xdc>
 8009092:	68ce      	ldr	r6, [r1, #12]
 8009094:	2201      	movs	r2, #1
 8009096:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800909a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800909e:	42a6      	cmp	r6, r4
 80090a0:	fb01 f202 	mul.w	r2, r1, r2
 80090a4:	d1f9      	bne.n	800909a <forward_relu+0xc2>
 80090a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80090aa:	3a01      	subs	r2, #1
 80090ac:	0092      	lsls	r2, r2, #2
 80090ae:	189b      	adds	r3, r3, r2
 80090b0:	4410      	add	r0, r2
 80090b2:	d215      	bcs.n	80090e0 <forward_relu+0x108>
 80090b4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80090f8 <forward_relu+0x120>
 80090b8:	3304      	adds	r3, #4
 80090ba:	1d01      	adds	r1, r0, #4
 80090bc:	ed53 7a01 	vldr	s15, [r3, #-4]
 80090c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c8:	bfb8      	it	lt
 80090ca:	eef0 7a47 	vmovlt.f32	s15, s14
 80090ce:	ed61 7a01 	vstmdb	r1!, {s15}
 80090d2:	68a8      	ldr	r0, [r5, #8]
 80090d4:	f1a3 0208 	sub.w	r2, r3, #8
 80090d8:	4290      	cmp	r0, r2
 80090da:	f1a3 0304 	sub.w	r3, r3, #4
 80090de:	d9ed      	bls.n	80090bc <forward_relu+0xe4>
 80090e0:	bcf0      	pop	{r4, r5, r6, r7}
 80090e2:	4770      	bx	lr
 80090e4:	f842 5d04 	str.w	r5, [r2, #-4]!
 80090e8:	6884      	ldr	r4, [r0, #8]
 80090ea:	3b08      	subs	r3, #8
 80090ec:	429c      	cmp	r4, r3
 80090ee:	d8f7      	bhi.n	80090e0 <forward_relu+0x108>
 80090f0:	460b      	mov	r3, r1
 80090f2:	e7b8      	b.n	8009066 <forward_relu+0x8e>
 80090f4:	2201      	movs	r2, #1
 80090f6:	e792      	b.n	800901e <forward_relu+0x46>
 80090f8:	00000000 	.word	0x00000000

080090fc <forward_sm>:
 80090fc:	6982      	ldr	r2, [r0, #24]
 80090fe:	8813      	ldrh	r3, [r2, #0]
 8009100:	b32b      	cbz	r3, 800914e <forward_sm+0x52>
 8009102:	6852      	ldr	r2, [r2, #4]
 8009104:	6851      	ldr	r1, [r2, #4]
 8009106:	b101      	cbz	r1, 800910a <forward_sm+0xe>
 8009108:	6809      	ldr	r1, [r1, #0]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d91c      	bls.n	8009148 <forward_sm+0x4c>
 800910e:	6913      	ldr	r3, [r2, #16]
 8009110:	b1c3      	cbz	r3, 8009144 <forward_sm+0x48>
 8009112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	688c      	ldr	r4, [r1, #8]
 8009118:	68c3      	ldr	r3, [r0, #12]
 800911a:	68ce      	ldr	r6, [r1, #12]
 800911c:	685f      	ldr	r7, [r3, #4]
 800911e:	6873      	ldr	r3, [r6, #4]
 8009120:	0a24      	lsrs	r4, r4, #8
 8009122:	b083      	sub	sp, #12
 8009124:	d015      	beq.n	8009152 <forward_sm+0x56>
 8009126:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800912a:	2201      	movs	r2, #1
 800912c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009130:	42a6      	cmp	r6, r4
 8009132:	fb05 f202 	mul.w	r2, r5, r2
 8009136:	d1f9      	bne.n	800912c <forward_sm+0x30>
 8009138:	e9cd 3700 	strd	r3, r7, [sp]
 800913c:	f7ff fe4e 	bl	8008ddc <nl_func_sm_array_f32>
 8009140:	b003      	add	sp, #12
 8009142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	deff      	udf	#255	; 0xff
 8009148:	2300      	movs	r3, #0
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	deff      	udf	#255	; 0xff
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	deff      	udf	#255	; 0xff
 8009152:	2201      	movs	r2, #1
 8009154:	e9cd 3700 	strd	r3, r7, [sp]
 8009158:	f7ff fe40 	bl	8008ddc <nl_func_sm_array_f32>
 800915c:	b003      	add	sp, #12
 800915e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009160 <pool_func_mp_array_f32>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	b093      	sub	sp, #76	; 0x4c
 8009166:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800916a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800916c:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 8009170:	68a8      	ldr	r0, [r5, #8]
 8009172:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 8009176:	9508      	str	r5, [sp, #32]
 8009178:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 800917c:	9002      	str	r0, [sp, #8]
 800917e:	950d      	str	r5, [sp, #52]	; 0x34
 8009180:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 8009184:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 8009188:	9004      	str	r0, [sp, #16]
 800918a:	9506      	str	r5, [sp, #24]
 800918c:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 8009190:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 8009194:	9009      	str	r0, [sp, #36]	; 0x24
 8009196:	950b      	str	r5, [sp, #44]	; 0x2c
 8009198:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 800919c:	9200      	str	r2, [sp, #0]
 800919e:	468a      	mov	sl, r1
 80091a0:	4699      	mov	r9, r3
 80091a2:	b95c      	cbnz	r4, 80091bc <pool_func_mp_array_f32+0x5c>
 80091a4:	b950      	cbnz	r0, 80091bc <pool_func_mp_array_f32+0x5c>
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	1a5a      	subs	r2, r3, r1
 80091aa:	9b06      	ldr	r3, [sp, #24]
 80091ac:	9908      	ldr	r1, [sp, #32]
 80091ae:	3a01      	subs	r2, #1
 80091b0:	3b01      	subs	r3, #1
 80091b2:	fb13 2301 	smlabb	r3, r3, r1, r2
 80091b6:	041a      	lsls	r2, r3, #16
 80091b8:	f100 809b 	bmi.w	80092f2 <pool_func_mp_array_f32+0x192>
 80091bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 808b 	beq.w	80092da <pool_func_mp_array_f32+0x17a>
 80091c4:	9b06      	ldr	r3, [sp, #24]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f000 8087 	beq.w	80092da <pool_func_mp_array_f32+0x17a>
 80091cc:	f1b9 0f00 	cmp.w	r9, #0
 80091d0:	f000 8083 	beq.w	80092da <pool_func_mp_array_f32+0x17a>
 80091d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091d6:	1b1c      	subs	r4, r3, r4
 80091d8:	9b04      	ldr	r3, [sp, #16]
 80091da:	1a1b      	subs	r3, r3, r0
 80091dc:	b29b      	uxth	r3, r3
 80091de:	4240      	negs	r0, r0
 80091e0:	2200      	movs	r2, #0
 80091e2:	b2a1      	uxth	r1, r4
 80091e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80091e6:	b283      	uxth	r3, r0
 80091e8:	920e      	str	r2, [sp, #56]	; 0x38
 80091ea:	910c      	str	r1, [sp, #48]	; 0x30
 80091ec:	9310      	str	r3, [sp, #64]	; 0x40
 80091ee:	9c06      	ldr	r4, [sp, #24]
 80091f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80091f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f4:	fb02 f204 	mul.w	r2, r2, r4
 80091f8:	1acb      	subs	r3, r1, r3
 80091fa:	920a      	str	r2, [sp, #40]	; 0x28
 80091fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091fe:	9205      	str	r2, [sp, #20]
 8009200:	2000      	movs	r0, #0
 8009202:	b21b      	sxth	r3, r3
 8009204:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009206:	9303      	str	r3, [sp, #12]
 8009208:	9007      	str	r0, [sp, #28]
 800920a:	4603      	mov	r3, r0
 800920c:	fa0f f881 	sxth.w	r8, r1
 8009210:	9204      	str	r2, [sp, #16]
 8009212:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009214:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8009218:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800921c:	4413      	add	r3, r2
 800921e:	f04f 0e00 	mov.w	lr, #0
 8009222:	fb09 f303 	mul.w	r3, r9, r3
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800922c:	4675      	mov	r5, lr
 800922e:	9903      	ldr	r1, [sp, #12]
 8009230:	eddf 7a78 	vldr	s15, [pc, #480]	; 8009414 <pool_func_mp_array_f32+0x2b4>
 8009234:	4588      	cmp	r8, r1
 8009236:	dd24      	ble.n	8009282 <pool_func_mp_array_f32+0x122>
 8009238:	4564      	cmp	r4, ip
 800923a:	dd1e      	ble.n	800927a <pool_func_mp_array_f32+0x11a>
 800923c:	2900      	cmp	r1, #0
 800923e:	fb0a f601 	mul.w	r6, sl, r1
 8009242:	db1a      	blt.n	800927a <pool_func_mp_array_f32+0x11a>
 8009244:	9b00      	ldr	r3, [sp, #0]
 8009246:	4299      	cmp	r1, r3
 8009248:	da17      	bge.n	800927a <pool_func_mp_array_f32+0x11a>
 800924a:	f1bc 0f00 	cmp.w	ip, #0
 800924e:	4663      	mov	r3, ip
 8009250:	db46      	blt.n	80092e0 <pool_func_mp_array_f32+0x180>
 8009252:	18f2      	adds	r2, r6, r3
 8009254:	fb09 5202 	mla	r2, r9, r2, r5
 8009258:	1c58      	adds	r0, r3, #1
 800925a:	459a      	cmp	sl, r3
 800925c:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8009260:	b203      	sxth	r3, r0
 8009262:	dd08      	ble.n	8009276 <pool_func_mp_array_f32+0x116>
 8009264:	ed92 7a00 	vldr	s14, [r2]
 8009268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800926c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009270:	bfb8      	it	lt
 8009272:	eef0 7a47 	vmovlt.f32	s15, s14
 8009276:	429c      	cmp	r4, r3
 8009278:	dceb      	bgt.n	8009252 <pool_func_mp_array_f32+0xf2>
 800927a:	3101      	adds	r1, #1
 800927c:	b209      	sxth	r1, r1
 800927e:	4588      	cmp	r8, r1
 8009280:	dcda      	bgt.n	8009238 <pool_func_mp_array_f32+0xd8>
 8009282:	9b01      	ldr	r3, [sp, #4]
 8009284:	f10e 0e01 	add.w	lr, lr, #1
 8009288:	441d      	add	r5, r3
 800928a:	9b02      	ldr	r3, [sp, #8]
 800928c:	fa0f fe8e 	sxth.w	lr, lr
 8009290:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009294:	45ce      	cmp	lr, r9
 8009296:	edc5 7a00 	vstr	s15, [r5]
 800929a:	4675      	mov	r5, lr
 800929c:	dbc7      	blt.n	800922e <pool_func_mp_array_f32+0xce>
 800929e:	9b07      	ldr	r3, [sp, #28]
 80092a0:	9808      	ldr	r0, [sp, #32]
 80092a2:	3301      	adds	r3, #1
 80092a4:	b219      	sxth	r1, r3
 80092a6:	9b05      	ldr	r3, [sp, #20]
 80092a8:	9107      	str	r1, [sp, #28]
 80092aa:	461a      	mov	r2, r3
 80092ac:	4402      	add	r2, r0
 80092ae:	9b04      	ldr	r3, [sp, #16]
 80092b0:	b292      	uxth	r2, r2
 80092b2:	9205      	str	r2, [sp, #20]
 80092b4:	9a06      	ldr	r2, [sp, #24]
 80092b6:	4403      	add	r3, r0
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	428a      	cmp	r2, r1
 80092bc:	9304      	str	r3, [sp, #16]
 80092be:	460b      	mov	r3, r1
 80092c0:	dca7      	bgt.n	8009212 <pool_func_mp_array_f32+0xb2>
 80092c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092c4:	3301      	adds	r3, #1
 80092c6:	b21a      	sxth	r2, r3
 80092c8:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 80092cc:	440b      	add	r3, r1
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	930c      	str	r3, [sp, #48]	; 0x30
 80092d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092d4:	920e      	str	r2, [sp, #56]	; 0x38
 80092d6:	4293      	cmp	r3, r2
 80092d8:	dc89      	bgt.n	80091ee <pool_func_mp_array_f32+0x8e>
 80092da:	b013      	add	sp, #76	; 0x4c
 80092dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e0:	3301      	adds	r3, #1
 80092e2:	b21b      	sxth	r3, r3
 80092e4:	42bb      	cmp	r3, r7
 80092e6:	dac6      	bge.n	8009276 <pool_func_mp_array_f32+0x116>
 80092e8:	3301      	adds	r3, #1
 80092ea:	b21b      	sxth	r3, r3
 80092ec:	42bb      	cmp	r3, r7
 80092ee:	dbf7      	blt.n	80092e0 <pool_func_mp_array_f32+0x180>
 80092f0:	e7c1      	b.n	8009276 <pool_func_mp_array_f32+0x116>
 80092f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f4:	9a00      	ldr	r2, [sp, #0]
 80092f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80092f8:	1a9a      	subs	r2, r3, r2
 80092fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092fc:	3a01      	subs	r2, #1
 80092fe:	3b01      	subs	r3, #1
 8009300:	fb13 2301 	smlabb	r3, r3, r1, r2
 8009304:	041b      	lsls	r3, r3, #16
 8009306:	f57f af59 	bpl.w	80091bc <pool_func_mp_array_f32+0x5c>
 800930a:	fb0a f309 	mul.w	r3, sl, r9
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 8009314:	930e      	str	r3, [sp, #56]	; 0x38
 8009316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009318:	9001      	str	r0, [sp, #4]
 800931a:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8009324:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009326:	429a      	cmp	r2, r3
 8009328:	ddd7      	ble.n	80092da <pool_func_mp_array_f32+0x17a>
 800932a:	9a00      	ldr	r2, [sp, #0]
 800932c:	9906      	ldr	r1, [sp, #24]
 800932e:	fa0f f882 	sxth.w	r8, r2
 8009332:	2900      	cmp	r1, #0
 8009334:	d062      	beq.n	80093fc <pool_func_mp_array_f32+0x29c>
 8009336:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009338:	fb01 f303 	mul.w	r3, r1, r3
 800933c:	1a12      	subs	r2, r2, r0
 800933e:	9305      	str	r3, [sp, #20]
 8009340:	b213      	sxth	r3, r2
 8009342:	9307      	str	r3, [sp, #28]
 8009344:	f1b9 0f00 	cmp.w	r9, #0
 8009348:	d058      	beq.n	80093fc <pool_func_mp_array_f32+0x29c>
 800934a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800934c:	fb02 f303 	mul.w	r3, r2, r3
 8009350:	2600      	movs	r6, #0
 8009352:	930c      	str	r3, [sp, #48]	; 0x30
 8009354:	9b04      	ldr	r3, [sp, #16]
 8009356:	9303      	str	r3, [sp, #12]
 8009358:	4637      	mov	r7, r6
 800935a:	46b2      	mov	sl, r6
 800935c:	9b05      	ldr	r3, [sp, #20]
 800935e:	9611      	str	r6, [sp, #68]	; 0x44
 8009360:	eb0a 0b03 	add.w	fp, sl, r3
 8009364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009366:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800936a:	b235      	sxth	r5, r6
 800936c:	18eb      	adds	r3, r5, r3
 800936e:	f04f 0a00 	mov.w	sl, #0
 8009372:	fb09 f303 	mul.w	r3, r9, r3
 8009376:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009378:	930a      	str	r3, [sp, #40]	; 0x28
 800937a:	fb09 fb0b 	mul.w	fp, r9, fp
 800937e:	46d6      	mov	lr, sl
 8009380:	9807      	ldr	r0, [sp, #28]
 8009382:	4580      	cmp	r8, r0
 8009384:	dd43      	ble.n	800940e <pool_func_mp_array_f32+0x2ae>
 8009386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009388:	eddf 7a22 	vldr	s15, [pc, #136]	; 8009414 <pool_func_mp_array_f32+0x2b4>
 800938c:	eb0e 0403 	add.w	r4, lr, r3
 8009390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009392:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009396:	42a9      	cmp	r1, r5
 8009398:	dd0f      	ble.n	80093ba <pool_func_mp_array_f32+0x25a>
 800939a:	4622      	mov	r2, r4
 800939c:	462b      	mov	r3, r5
 800939e:	ed92 7a00 	vldr	s14, [r2]
 80093a2:	3301      	adds	r3, #1
 80093a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ac:	b21b      	sxth	r3, r3
 80093ae:	bfb8      	it	lt
 80093b0:	eef0 7a47 	vmovlt.f32	s15, s14
 80093b4:	4299      	cmp	r1, r3
 80093b6:	4462      	add	r2, ip
 80093b8:	d1f1      	bne.n	800939e <pool_func_mp_array_f32+0x23e>
 80093ba:	3001      	adds	r0, #1
 80093bc:	b200      	sxth	r0, r0
 80093be:	4580      	cmp	r8, r0
 80093c0:	4434      	add	r4, r6
 80093c2:	d1e8      	bne.n	8009396 <pool_func_mp_array_f32+0x236>
 80093c4:	f10a 0a01 	add.w	sl, sl, #1
 80093c8:	9a02      	ldr	r2, [sp, #8]
 80093ca:	eb0b 030e 	add.w	r3, fp, lr
 80093ce:	fa0f fa8a 	sxth.w	sl, sl
 80093d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80093d6:	45ca      	cmp	sl, r9
 80093d8:	edc3 7a00 	vstr	s15, [r3]
 80093dc:	46d6      	mov	lr, sl
 80093de:	dbcf      	blt.n	8009380 <pool_func_mp_array_f32+0x220>
 80093e0:	9b03      	ldr	r3, [sp, #12]
 80093e2:	9a08      	ldr	r2, [sp, #32]
 80093e4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80093e6:	4413      	add	r3, r2
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	3701      	adds	r7, #1
 80093ec:	9303      	str	r3, [sp, #12]
 80093ee:	9b06      	ldr	r3, [sp, #24]
 80093f0:	b23f      	sxth	r7, r7
 80093f2:	4416      	add	r6, r2
 80093f4:	42bb      	cmp	r3, r7
 80093f6:	b2b6      	uxth	r6, r6
 80093f8:	46ba      	mov	sl, r7
 80093fa:	dcaf      	bgt.n	800935c <pool_func_mp_array_f32+0x1fc>
 80093fc:	9b00      	ldr	r3, [sp, #0]
 80093fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009400:	4413      	add	r3, r2
 8009402:	b29b      	uxth	r3, r3
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	9b01      	ldr	r3, [sp, #4]
 8009408:	3301      	adds	r3, #1
 800940a:	9301      	str	r3, [sp, #4]
 800940c:	e788      	b.n	8009320 <pool_func_mp_array_f32+0x1c0>
 800940e:	eddf 7a01 	vldr	s15, [pc, #4]	; 8009414 <pool_func_mp_array_f32+0x2b4>
 8009412:	e7d7      	b.n	80093c4 <pool_func_mp_array_f32+0x264>
 8009414:	cf000000 	.word	0xcf000000

08009418 <ai_check_custom_types>:
 8009418:	4b13      	ldr	r3, [pc, #76]	; (8009468 <ai_check_custom_types+0x50>)
 800941a:	b082      	sub	sp, #8
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	b118      	cbz	r0, 800942a <ai_check_custom_types+0x12>
 8009422:	7803      	ldrb	r3, [r0, #0]
 8009424:	2b03      	cmp	r3, #3
 8009426:	d002      	beq.n	800942e <ai_check_custom_types+0x16>
 8009428:	2000      	movs	r0, #0
 800942a:	b002      	add	sp, #8
 800942c:	4770      	bx	lr
 800942e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009432:	4293      	cmp	r3, r2
 8009434:	d004      	beq.n	8009440 <ai_check_custom_types+0x28>
 8009436:	2001      	movs	r0, #1
 8009438:	f080 0001 	eor.w	r0, r0, #1
 800943c:	b002      	add	sp, #8
 800943e:	4770      	bx	lr
 8009440:	7842      	ldrb	r2, [r0, #1]
 8009442:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009446:	429a      	cmp	r2, r3
 8009448:	f100 0001 	add.w	r0, r0, #1
 800944c:	d1f3      	bne.n	8009436 <ai_check_custom_types+0x1e>
 800944e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8009452:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009456:	429a      	cmp	r2, r3
 8009458:	d1ed      	bne.n	8009436 <ai_check_custom_types+0x1e>
 800945a:	7842      	ldrb	r2, [r0, #1]
 800945c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009460:	429a      	cmp	r2, r3
 8009462:	d1e8      	bne.n	8009436 <ai_check_custom_types+0x1e>
 8009464:	2000      	movs	r0, #0
 8009466:	e7e7      	b.n	8009438 <ai_check_custom_types+0x20>
 8009468:	0800c560 	.word	0x0800c560

0800946c <ai_layers_init_all>:
 800946c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800946e:	b17a      	cbz	r2, 8009490 <ai_layers_init_all+0x24>
 8009470:	6913      	ldr	r3, [r2, #16]
 8009472:	60d0      	str	r0, [r2, #12]
 8009474:	429a      	cmp	r2, r3
 8009476:	f04f 0201 	mov.w	r2, #1
 800947a:	d009      	beq.n	8009490 <ai_layers_init_all+0x24>
 800947c:	b143      	cbz	r3, 8009490 <ai_layers_init_all+0x24>
 800947e:	6919      	ldr	r1, [r3, #16]
 8009480:	60d8      	str	r0, [r3, #12]
 8009482:	4299      	cmp	r1, r3
 8009484:	f102 0201 	add.w	r2, r2, #1
 8009488:	d002      	beq.n	8009490 <ai_layers_init_all+0x24>
 800948a:	460b      	mov	r3, r1
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1f6      	bne.n	800947e <ai_layers_init_all+0x12>
 8009490:	4610      	mov	r0, r2
 8009492:	4770      	bx	lr

08009494 <ai_layers_post_init_all>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009498:	b18c      	cbz	r4, 80094be <ai_layers_post_init_all+0x2a>
 800949a:	2500      	movs	r5, #0
 800949c:	6863      	ldr	r3, [r4, #4]
 800949e:	f013 0f01 	tst.w	r3, #1
 80094a2:	4620      	mov	r0, r4
 80094a4:	d003      	beq.n	80094ae <ai_layers_post_init_all+0x1a>
 80094a6:	6a23      	ldr	r3, [r4, #32]
 80094a8:	b10b      	cbz	r3, 80094ae <ai_layers_post_init_all+0x1a>
 80094aa:	4798      	blx	r3
 80094ac:	3501      	adds	r5, #1
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	d002      	beq.n	80094ba <ai_layers_post_init_all+0x26>
 80094b4:	461c      	mov	r4, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1f0      	bne.n	800949c <ai_layers_post_init_all+0x8>
 80094ba:	4628      	mov	r0, r5
 80094bc:	bd38      	pop	{r3, r4, r5, pc}
 80094be:	4625      	mov	r5, r4
 80094c0:	e7fb      	b.n	80094ba <ai_layers_post_init_all+0x26>
 80094c2:	bf00      	nop

080094c4 <ai_layers_forward_all>:
 80094c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c8:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 80094ca:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80094cc:	4604      	mov	r4, r0
 80094ce:	2f00      	cmp	r7, #0
 80094d0:	d02c      	beq.n	800952c <ai_layers_forward_all+0x68>
 80094d2:	2d00      	cmp	r5, #0
 80094d4:	d03f      	beq.n	8009556 <ai_layers_forward_all+0x92>
 80094d6:	6385      	str	r5, [r0, #56]	; 0x38
 80094d8:	4629      	mov	r1, r5
 80094da:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80094dc:	2001      	movs	r0, #1
 80094de:	47b8      	blx	r7
 80094e0:	2600      	movs	r6, #0
 80094e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80094e4:	46b0      	mov	r8, r6
 80094e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80094e8:	2002      	movs	r0, #2
 80094ea:	47b8      	blx	r7
 80094ec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80094ee:	696b      	ldr	r3, [r5, #20]
 80094f0:	4628      	mov	r0, r5
 80094f2:	4798      	blx	r3
 80094f4:	692b      	ldr	r3, [r5, #16]
 80094f6:	429d      	cmp	r5, r3
 80094f8:	f04f 0003 	mov.w	r0, #3
 80094fc:	4619      	mov	r1, r3
 80094fe:	d009      	beq.n	8009514 <ai_layers_forward_all+0x50>
 8009500:	63a3      	str	r3, [r4, #56]	; 0x38
 8009502:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009504:	47b8      	blx	r7
 8009506:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009508:	3601      	adds	r6, #1
 800950a:	2900      	cmp	r1, #0
 800950c:	d1eb      	bne.n	80094e6 <ai_layers_forward_all+0x22>
 800950e:	4630      	mov	r0, r6
 8009510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009514:	2100      	movs	r1, #0
 8009516:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800951a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800951c:	47b8      	blx	r7
 800951e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009520:	3601      	adds	r6, #1
 8009522:	2900      	cmp	r1, #0
 8009524:	d1df      	bne.n	80094e6 <ai_layers_forward_all+0x22>
 8009526:	4630      	mov	r0, r6
 8009528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800952c:	b19d      	cbz	r5, 8009556 <ai_layers_forward_all+0x92>
 800952e:	6385      	str	r5, [r0, #56]	; 0x38
 8009530:	463e      	mov	r6, r7
 8009532:	696b      	ldr	r3, [r5, #20]
 8009534:	4628      	mov	r0, r5
 8009536:	4798      	blx	r3
 8009538:	692b      	ldr	r3, [r5, #16]
 800953a:	42ab      	cmp	r3, r5
 800953c:	f106 0601 	add.w	r6, r6, #1
 8009540:	d004      	beq.n	800954c <ai_layers_forward_all+0x88>
 8009542:	63a3      	str	r3, [r4, #56]	; 0x38
 8009544:	461d      	mov	r5, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1f3      	bne.n	8009532 <ai_layers_forward_all+0x6e>
 800954a:	e7e0      	b.n	800950e <ai_layers_forward_all+0x4a>
 800954c:	2300      	movs	r3, #0
 800954e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009550:	4630      	mov	r0, r6
 8009552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009556:	462e      	mov	r6, r5
 8009558:	4630      	mov	r0, r6
 800955a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800955e:	bf00      	nop

08009560 <ai_layers_destroy_all>:
 8009560:	b538      	push	{r3, r4, r5, lr}
 8009562:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009564:	b18c      	cbz	r4, 800958a <ai_layers_destroy_all+0x2a>
 8009566:	2500      	movs	r5, #0
 8009568:	6863      	ldr	r3, [r4, #4]
 800956a:	f013 0f04 	tst.w	r3, #4
 800956e:	4620      	mov	r0, r4
 8009570:	d003      	beq.n	800957a <ai_layers_destroy_all+0x1a>
 8009572:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009574:	b10b      	cbz	r3, 800957a <ai_layers_destroy_all+0x1a>
 8009576:	4798      	blx	r3
 8009578:	3501      	adds	r5, #1
 800957a:	6923      	ldr	r3, [r4, #16]
 800957c:	42a3      	cmp	r3, r4
 800957e:	d002      	beq.n	8009586 <ai_layers_destroy_all+0x26>
 8009580:	461c      	mov	r4, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1f0      	bne.n	8009568 <ai_layers_destroy_all+0x8>
 8009586:	4628      	mov	r0, r5
 8009588:	bd38      	pop	{r3, r4, r5, pc}
 800958a:	4625      	mov	r5, r4
 800958c:	e7fb      	b.n	8009586 <ai_layers_destroy_all+0x26>
 800958e:	bf00      	nop

08009590 <ai_array_to_buffer_fmt>:
 8009590:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8009594:	2b02      	cmp	r3, #2
 8009596:	d029      	beq.n	80095ec <ai_array_to_buffer_fmt+0x5c>
 8009598:	4a22      	ldr	r2, [pc, #136]	; (8009624 <ai_array_to_buffer_fmt+0x94>)
 800959a:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800959e:	4293      	cmp	r3, r2
 80095a0:	d010      	beq.n	80095c4 <ai_array_to_buffer_fmt+0x34>
 80095a2:	dd13      	ble.n	80095cc <ai_array_to_buffer_fmt+0x3c>
 80095a4:	4a20      	ldr	r2, [pc, #128]	; (8009628 <ai_array_to_buffer_fmt+0x98>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d00c      	beq.n	80095c4 <ai_array_to_buffer_fmt+0x34>
 80095aa:	dc27      	bgt.n	80095fc <ai_array_to_buffer_fmt+0x6c>
 80095ac:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d007      	beq.n	80095c4 <ai_array_to_buffer_fmt+0x34>
 80095b4:	3207      	adds	r2, #7
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d004      	beq.n	80095c4 <ai_array_to_buffer_fmt+0x34>
 80095ba:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 80095be:	4293      	cmp	r3, r2
 80095c0:	d000      	beq.n	80095c4 <ai_array_to_buffer_fmt+0x34>
 80095c2:	2340      	movs	r3, #64	; 0x40
 80095c4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80095c8:	4318      	orrs	r0, r3
 80095ca:	4770      	bx	lr
 80095cc:	4a17      	ldr	r2, [pc, #92]	; (800962c <ai_array_to_buffer_fmt+0x9c>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d0f8      	beq.n	80095c4 <ai_array_to_buffer_fmt+0x34>
 80095d2:	dd1e      	ble.n	8009612 <ai_array_to_buffer_fmt+0x82>
 80095d4:	4a16      	ldr	r2, [pc, #88]	; (8009630 <ai_array_to_buffer_fmt+0xa0>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d0f4      	beq.n	80095c4 <ai_array_to_buffer_fmt+0x34>
 80095da:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 80095de:	4293      	cmp	r3, r2
 80095e0:	d0f0      	beq.n	80095c4 <ai_array_to_buffer_fmt+0x34>
 80095e2:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d1eb      	bne.n	80095c2 <ai_array_to_buffer_fmt+0x32>
 80095ea:	e7eb      	b.n	80095c4 <ai_array_to_buffer_fmt+0x34>
 80095ec:	4b11      	ldr	r3, [pc, #68]	; (8009634 <ai_array_to_buffer_fmt+0xa4>)
 80095ee:	4003      	ands	r3, r0
 80095f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095f4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80095f8:	4318      	orrs	r0, r3
 80095fa:	4770      	bx	lr
 80095fc:	4a0e      	ldr	r2, [pc, #56]	; (8009638 <ai_array_to_buffer_fmt+0xa8>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d0e0      	beq.n	80095c4 <ai_array_to_buffer_fmt+0x34>
 8009602:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8009606:	4293      	cmp	r3, r2
 8009608:	d0dc      	beq.n	80095c4 <ai_array_to_buffer_fmt+0x34>
 800960a:	4a0c      	ldr	r2, [pc, #48]	; (800963c <ai_array_to_buffer_fmt+0xac>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d1d8      	bne.n	80095c2 <ai_array_to_buffer_fmt+0x32>
 8009610:	e7d8      	b.n	80095c4 <ai_array_to_buffer_fmt+0x34>
 8009612:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8009616:	4293      	cmp	r3, r2
 8009618:	d0d4      	beq.n	80095c4 <ai_array_to_buffer_fmt+0x34>
 800961a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800961e:	4293      	cmp	r3, r2
 8009620:	d0d0      	beq.n	80095c4 <ai_array_to_buffer_fmt+0x34>
 8009622:	e7ce      	b.n	80095c2 <ai_array_to_buffer_fmt+0x32>
 8009624:	00060440 	.word	0x00060440
 8009628:	00840840 	.word	0x00840840
 800962c:	00040447 	.word	0x00040447
 8009630:	0004084f 	.word	0x0004084f
 8009634:	00803fff 	.word	0x00803fff
 8009638:	00841040 	.word	0x00841040
 800963c:	0084084f 	.word	0x0084084f

08009640 <ai_array_get_byte_size>:
 8009640:	b1c1      	cbz	r1, 8009674 <ai_array_get_byte_size+0x34>
 8009642:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8009646:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800964a:	4413      	add	r3, r2
 800964c:	fb01 f103 	mul.w	r1, r1, r3
 8009650:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8009654:	3107      	adds	r1, #7
 8009656:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800965a:	f021 0107 	bic.w	r1, r1, #7
 800965e:	2804      	cmp	r0, #4
 8009660:	fa21 f102 	lsr.w	r1, r1, r2
 8009664:	d008      	beq.n	8009678 <ai_array_get_byte_size+0x38>
 8009666:	2808      	cmp	r0, #8
 8009668:	d101      	bne.n	800966e <ai_array_get_byte_size+0x2e>
 800966a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800966e:	3107      	adds	r1, #7
 8009670:	08c8      	lsrs	r0, r1, #3
 8009672:	4770      	bx	lr
 8009674:	4608      	mov	r0, r1
 8009676:	4770      	bx	lr
 8009678:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800967c:	3107      	adds	r1, #7
 800967e:	08c8      	lsrs	r0, r1, #3
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop

08009684 <__errno>:
 8009684:	4b01      	ldr	r3, [pc, #4]	; (800968c <__errno+0x8>)
 8009686:	6818      	ldr	r0, [r3, #0]
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	200008f4 	.word	0x200008f4

08009690 <__libc_init_array>:
 8009690:	b570      	push	{r4, r5, r6, lr}
 8009692:	4d0d      	ldr	r5, [pc, #52]	; (80096c8 <__libc_init_array+0x38>)
 8009694:	4c0d      	ldr	r4, [pc, #52]	; (80096cc <__libc_init_array+0x3c>)
 8009696:	1b64      	subs	r4, r4, r5
 8009698:	10a4      	asrs	r4, r4, #2
 800969a:	2600      	movs	r6, #0
 800969c:	42a6      	cmp	r6, r4
 800969e:	d109      	bne.n	80096b4 <__libc_init_array+0x24>
 80096a0:	4d0b      	ldr	r5, [pc, #44]	; (80096d0 <__libc_init_array+0x40>)
 80096a2:	4c0c      	ldr	r4, [pc, #48]	; (80096d4 <__libc_init_array+0x44>)
 80096a4:	f002 ff46 	bl	800c534 <_init>
 80096a8:	1b64      	subs	r4, r4, r5
 80096aa:	10a4      	asrs	r4, r4, #2
 80096ac:	2600      	movs	r6, #0
 80096ae:	42a6      	cmp	r6, r4
 80096b0:	d105      	bne.n	80096be <__libc_init_array+0x2e>
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
 80096b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096b8:	4798      	blx	r3
 80096ba:	3601      	adds	r6, #1
 80096bc:	e7ee      	b.n	800969c <__libc_init_array+0xc>
 80096be:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c2:	4798      	blx	r3
 80096c4:	3601      	adds	r6, #1
 80096c6:	e7f2      	b.n	80096ae <__libc_init_array+0x1e>
 80096c8:	0800f7ac 	.word	0x0800f7ac
 80096cc:	0800f7ac 	.word	0x0800f7ac
 80096d0:	0800f7ac 	.word	0x0800f7ac
 80096d4:	0800f7b0 	.word	0x0800f7b0

080096d8 <malloc>:
 80096d8:	4b02      	ldr	r3, [pc, #8]	; (80096e4 <malloc+0xc>)
 80096da:	4601      	mov	r1, r0
 80096dc:	6818      	ldr	r0, [r3, #0]
 80096de:	f000 b885 	b.w	80097ec <_malloc_r>
 80096e2:	bf00      	nop
 80096e4:	200008f4 	.word	0x200008f4

080096e8 <memcpy>:
 80096e8:	440a      	add	r2, r1
 80096ea:	4291      	cmp	r1, r2
 80096ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80096f0:	d100      	bne.n	80096f4 <memcpy+0xc>
 80096f2:	4770      	bx	lr
 80096f4:	b510      	push	{r4, lr}
 80096f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096fe:	4291      	cmp	r1, r2
 8009700:	d1f9      	bne.n	80096f6 <memcpy+0xe>
 8009702:	bd10      	pop	{r4, pc}

08009704 <memset>:
 8009704:	4402      	add	r2, r0
 8009706:	4603      	mov	r3, r0
 8009708:	4293      	cmp	r3, r2
 800970a:	d100      	bne.n	800970e <memset+0xa>
 800970c:	4770      	bx	lr
 800970e:	f803 1b01 	strb.w	r1, [r3], #1
 8009712:	e7f9      	b.n	8009708 <memset+0x4>

08009714 <_free_r>:
 8009714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009716:	2900      	cmp	r1, #0
 8009718:	d044      	beq.n	80097a4 <_free_r+0x90>
 800971a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800971e:	9001      	str	r0, [sp, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	f1a1 0404 	sub.w	r4, r1, #4
 8009726:	bfb8      	it	lt
 8009728:	18e4      	addlt	r4, r4, r3
 800972a:	f001 ff4f 	bl	800b5cc <__malloc_lock>
 800972e:	4a1e      	ldr	r2, [pc, #120]	; (80097a8 <_free_r+0x94>)
 8009730:	9801      	ldr	r0, [sp, #4]
 8009732:	6813      	ldr	r3, [r2, #0]
 8009734:	b933      	cbnz	r3, 8009744 <_free_r+0x30>
 8009736:	6063      	str	r3, [r4, #4]
 8009738:	6014      	str	r4, [r2, #0]
 800973a:	b003      	add	sp, #12
 800973c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009740:	f001 bf4a 	b.w	800b5d8 <__malloc_unlock>
 8009744:	42a3      	cmp	r3, r4
 8009746:	d908      	bls.n	800975a <_free_r+0x46>
 8009748:	6825      	ldr	r5, [r4, #0]
 800974a:	1961      	adds	r1, r4, r5
 800974c:	428b      	cmp	r3, r1
 800974e:	bf01      	itttt	eq
 8009750:	6819      	ldreq	r1, [r3, #0]
 8009752:	685b      	ldreq	r3, [r3, #4]
 8009754:	1949      	addeq	r1, r1, r5
 8009756:	6021      	streq	r1, [r4, #0]
 8009758:	e7ed      	b.n	8009736 <_free_r+0x22>
 800975a:	461a      	mov	r2, r3
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	b10b      	cbz	r3, 8009764 <_free_r+0x50>
 8009760:	42a3      	cmp	r3, r4
 8009762:	d9fa      	bls.n	800975a <_free_r+0x46>
 8009764:	6811      	ldr	r1, [r2, #0]
 8009766:	1855      	adds	r5, r2, r1
 8009768:	42a5      	cmp	r5, r4
 800976a:	d10b      	bne.n	8009784 <_free_r+0x70>
 800976c:	6824      	ldr	r4, [r4, #0]
 800976e:	4421      	add	r1, r4
 8009770:	1854      	adds	r4, r2, r1
 8009772:	42a3      	cmp	r3, r4
 8009774:	6011      	str	r1, [r2, #0]
 8009776:	d1e0      	bne.n	800973a <_free_r+0x26>
 8009778:	681c      	ldr	r4, [r3, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	6053      	str	r3, [r2, #4]
 800977e:	4421      	add	r1, r4
 8009780:	6011      	str	r1, [r2, #0]
 8009782:	e7da      	b.n	800973a <_free_r+0x26>
 8009784:	d902      	bls.n	800978c <_free_r+0x78>
 8009786:	230c      	movs	r3, #12
 8009788:	6003      	str	r3, [r0, #0]
 800978a:	e7d6      	b.n	800973a <_free_r+0x26>
 800978c:	6825      	ldr	r5, [r4, #0]
 800978e:	1961      	adds	r1, r4, r5
 8009790:	428b      	cmp	r3, r1
 8009792:	bf04      	itt	eq
 8009794:	6819      	ldreq	r1, [r3, #0]
 8009796:	685b      	ldreq	r3, [r3, #4]
 8009798:	6063      	str	r3, [r4, #4]
 800979a:	bf04      	itt	eq
 800979c:	1949      	addeq	r1, r1, r5
 800979e:	6021      	streq	r1, [r4, #0]
 80097a0:	6054      	str	r4, [r2, #4]
 80097a2:	e7ca      	b.n	800973a <_free_r+0x26>
 80097a4:	b003      	add	sp, #12
 80097a6:	bd30      	pop	{r4, r5, pc}
 80097a8:	20001610 	.word	0x20001610

080097ac <sbrk_aligned>:
 80097ac:	b570      	push	{r4, r5, r6, lr}
 80097ae:	4e0e      	ldr	r6, [pc, #56]	; (80097e8 <sbrk_aligned+0x3c>)
 80097b0:	460c      	mov	r4, r1
 80097b2:	6831      	ldr	r1, [r6, #0]
 80097b4:	4605      	mov	r5, r0
 80097b6:	b911      	cbnz	r1, 80097be <sbrk_aligned+0x12>
 80097b8:	f000 fd84 	bl	800a2c4 <_sbrk_r>
 80097bc:	6030      	str	r0, [r6, #0]
 80097be:	4621      	mov	r1, r4
 80097c0:	4628      	mov	r0, r5
 80097c2:	f000 fd7f 	bl	800a2c4 <_sbrk_r>
 80097c6:	1c43      	adds	r3, r0, #1
 80097c8:	d00a      	beq.n	80097e0 <sbrk_aligned+0x34>
 80097ca:	1cc4      	adds	r4, r0, #3
 80097cc:	f024 0403 	bic.w	r4, r4, #3
 80097d0:	42a0      	cmp	r0, r4
 80097d2:	d007      	beq.n	80097e4 <sbrk_aligned+0x38>
 80097d4:	1a21      	subs	r1, r4, r0
 80097d6:	4628      	mov	r0, r5
 80097d8:	f000 fd74 	bl	800a2c4 <_sbrk_r>
 80097dc:	3001      	adds	r0, #1
 80097de:	d101      	bne.n	80097e4 <sbrk_aligned+0x38>
 80097e0:	f04f 34ff 	mov.w	r4, #4294967295
 80097e4:	4620      	mov	r0, r4
 80097e6:	bd70      	pop	{r4, r5, r6, pc}
 80097e8:	20001614 	.word	0x20001614

080097ec <_malloc_r>:
 80097ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f0:	1ccd      	adds	r5, r1, #3
 80097f2:	f025 0503 	bic.w	r5, r5, #3
 80097f6:	3508      	adds	r5, #8
 80097f8:	2d0c      	cmp	r5, #12
 80097fa:	bf38      	it	cc
 80097fc:	250c      	movcc	r5, #12
 80097fe:	2d00      	cmp	r5, #0
 8009800:	4607      	mov	r7, r0
 8009802:	db01      	blt.n	8009808 <_malloc_r+0x1c>
 8009804:	42a9      	cmp	r1, r5
 8009806:	d905      	bls.n	8009814 <_malloc_r+0x28>
 8009808:	230c      	movs	r3, #12
 800980a:	603b      	str	r3, [r7, #0]
 800980c:	2600      	movs	r6, #0
 800980e:	4630      	mov	r0, r6
 8009810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009814:	4e2e      	ldr	r6, [pc, #184]	; (80098d0 <_malloc_r+0xe4>)
 8009816:	f001 fed9 	bl	800b5cc <__malloc_lock>
 800981a:	6833      	ldr	r3, [r6, #0]
 800981c:	461c      	mov	r4, r3
 800981e:	bb34      	cbnz	r4, 800986e <_malloc_r+0x82>
 8009820:	4629      	mov	r1, r5
 8009822:	4638      	mov	r0, r7
 8009824:	f7ff ffc2 	bl	80097ac <sbrk_aligned>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	4604      	mov	r4, r0
 800982c:	d14d      	bne.n	80098ca <_malloc_r+0xde>
 800982e:	6834      	ldr	r4, [r6, #0]
 8009830:	4626      	mov	r6, r4
 8009832:	2e00      	cmp	r6, #0
 8009834:	d140      	bne.n	80098b8 <_malloc_r+0xcc>
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	4631      	mov	r1, r6
 800983a:	4638      	mov	r0, r7
 800983c:	eb04 0803 	add.w	r8, r4, r3
 8009840:	f000 fd40 	bl	800a2c4 <_sbrk_r>
 8009844:	4580      	cmp	r8, r0
 8009846:	d13a      	bne.n	80098be <_malloc_r+0xd2>
 8009848:	6821      	ldr	r1, [r4, #0]
 800984a:	3503      	adds	r5, #3
 800984c:	1a6d      	subs	r5, r5, r1
 800984e:	f025 0503 	bic.w	r5, r5, #3
 8009852:	3508      	adds	r5, #8
 8009854:	2d0c      	cmp	r5, #12
 8009856:	bf38      	it	cc
 8009858:	250c      	movcc	r5, #12
 800985a:	4629      	mov	r1, r5
 800985c:	4638      	mov	r0, r7
 800985e:	f7ff ffa5 	bl	80097ac <sbrk_aligned>
 8009862:	3001      	adds	r0, #1
 8009864:	d02b      	beq.n	80098be <_malloc_r+0xd2>
 8009866:	6823      	ldr	r3, [r4, #0]
 8009868:	442b      	add	r3, r5
 800986a:	6023      	str	r3, [r4, #0]
 800986c:	e00e      	b.n	800988c <_malloc_r+0xa0>
 800986e:	6822      	ldr	r2, [r4, #0]
 8009870:	1b52      	subs	r2, r2, r5
 8009872:	d41e      	bmi.n	80098b2 <_malloc_r+0xc6>
 8009874:	2a0b      	cmp	r2, #11
 8009876:	d916      	bls.n	80098a6 <_malloc_r+0xba>
 8009878:	1961      	adds	r1, r4, r5
 800987a:	42a3      	cmp	r3, r4
 800987c:	6025      	str	r5, [r4, #0]
 800987e:	bf18      	it	ne
 8009880:	6059      	strne	r1, [r3, #4]
 8009882:	6863      	ldr	r3, [r4, #4]
 8009884:	bf08      	it	eq
 8009886:	6031      	streq	r1, [r6, #0]
 8009888:	5162      	str	r2, [r4, r5]
 800988a:	604b      	str	r3, [r1, #4]
 800988c:	4638      	mov	r0, r7
 800988e:	f104 060b 	add.w	r6, r4, #11
 8009892:	f001 fea1 	bl	800b5d8 <__malloc_unlock>
 8009896:	f026 0607 	bic.w	r6, r6, #7
 800989a:	1d23      	adds	r3, r4, #4
 800989c:	1af2      	subs	r2, r6, r3
 800989e:	d0b6      	beq.n	800980e <_malloc_r+0x22>
 80098a0:	1b9b      	subs	r3, r3, r6
 80098a2:	50a3      	str	r3, [r4, r2]
 80098a4:	e7b3      	b.n	800980e <_malloc_r+0x22>
 80098a6:	6862      	ldr	r2, [r4, #4]
 80098a8:	42a3      	cmp	r3, r4
 80098aa:	bf0c      	ite	eq
 80098ac:	6032      	streq	r2, [r6, #0]
 80098ae:	605a      	strne	r2, [r3, #4]
 80098b0:	e7ec      	b.n	800988c <_malloc_r+0xa0>
 80098b2:	4623      	mov	r3, r4
 80098b4:	6864      	ldr	r4, [r4, #4]
 80098b6:	e7b2      	b.n	800981e <_malloc_r+0x32>
 80098b8:	4634      	mov	r4, r6
 80098ba:	6876      	ldr	r6, [r6, #4]
 80098bc:	e7b9      	b.n	8009832 <_malloc_r+0x46>
 80098be:	230c      	movs	r3, #12
 80098c0:	603b      	str	r3, [r7, #0]
 80098c2:	4638      	mov	r0, r7
 80098c4:	f001 fe88 	bl	800b5d8 <__malloc_unlock>
 80098c8:	e7a1      	b.n	800980e <_malloc_r+0x22>
 80098ca:	6025      	str	r5, [r4, #0]
 80098cc:	e7de      	b.n	800988c <_malloc_r+0xa0>
 80098ce:	bf00      	nop
 80098d0:	20001610 	.word	0x20001610

080098d4 <__cvt>:
 80098d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098d8:	ec55 4b10 	vmov	r4, r5, d0
 80098dc:	2d00      	cmp	r5, #0
 80098de:	460e      	mov	r6, r1
 80098e0:	4619      	mov	r1, r3
 80098e2:	462b      	mov	r3, r5
 80098e4:	bfbb      	ittet	lt
 80098e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80098ea:	461d      	movlt	r5, r3
 80098ec:	2300      	movge	r3, #0
 80098ee:	232d      	movlt	r3, #45	; 0x2d
 80098f0:	700b      	strb	r3, [r1, #0]
 80098f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80098f8:	4691      	mov	r9, r2
 80098fa:	f023 0820 	bic.w	r8, r3, #32
 80098fe:	bfbc      	itt	lt
 8009900:	4622      	movlt	r2, r4
 8009902:	4614      	movlt	r4, r2
 8009904:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009908:	d005      	beq.n	8009916 <__cvt+0x42>
 800990a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800990e:	d100      	bne.n	8009912 <__cvt+0x3e>
 8009910:	3601      	adds	r6, #1
 8009912:	2102      	movs	r1, #2
 8009914:	e000      	b.n	8009918 <__cvt+0x44>
 8009916:	2103      	movs	r1, #3
 8009918:	ab03      	add	r3, sp, #12
 800991a:	9301      	str	r3, [sp, #4]
 800991c:	ab02      	add	r3, sp, #8
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	ec45 4b10 	vmov	d0, r4, r5
 8009924:	4653      	mov	r3, sl
 8009926:	4632      	mov	r2, r6
 8009928:	f000 fe3e 	bl	800a5a8 <_dtoa_r>
 800992c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009930:	4607      	mov	r7, r0
 8009932:	d102      	bne.n	800993a <__cvt+0x66>
 8009934:	f019 0f01 	tst.w	r9, #1
 8009938:	d022      	beq.n	8009980 <__cvt+0xac>
 800993a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800993e:	eb07 0906 	add.w	r9, r7, r6
 8009942:	d110      	bne.n	8009966 <__cvt+0x92>
 8009944:	783b      	ldrb	r3, [r7, #0]
 8009946:	2b30      	cmp	r3, #48	; 0x30
 8009948:	d10a      	bne.n	8009960 <__cvt+0x8c>
 800994a:	2200      	movs	r2, #0
 800994c:	2300      	movs	r3, #0
 800994e:	4620      	mov	r0, r4
 8009950:	4629      	mov	r1, r5
 8009952:	f7f7 f8b9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009956:	b918      	cbnz	r0, 8009960 <__cvt+0x8c>
 8009958:	f1c6 0601 	rsb	r6, r6, #1
 800995c:	f8ca 6000 	str.w	r6, [sl]
 8009960:	f8da 3000 	ldr.w	r3, [sl]
 8009964:	4499      	add	r9, r3
 8009966:	2200      	movs	r2, #0
 8009968:	2300      	movs	r3, #0
 800996a:	4620      	mov	r0, r4
 800996c:	4629      	mov	r1, r5
 800996e:	f7f7 f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8009972:	b108      	cbz	r0, 8009978 <__cvt+0xa4>
 8009974:	f8cd 900c 	str.w	r9, [sp, #12]
 8009978:	2230      	movs	r2, #48	; 0x30
 800997a:	9b03      	ldr	r3, [sp, #12]
 800997c:	454b      	cmp	r3, r9
 800997e:	d307      	bcc.n	8009990 <__cvt+0xbc>
 8009980:	9b03      	ldr	r3, [sp, #12]
 8009982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009984:	1bdb      	subs	r3, r3, r7
 8009986:	4638      	mov	r0, r7
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	b004      	add	sp, #16
 800998c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009990:	1c59      	adds	r1, r3, #1
 8009992:	9103      	str	r1, [sp, #12]
 8009994:	701a      	strb	r2, [r3, #0]
 8009996:	e7f0      	b.n	800997a <__cvt+0xa6>

08009998 <__exponent>:
 8009998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800999a:	4603      	mov	r3, r0
 800999c:	2900      	cmp	r1, #0
 800999e:	bfb8      	it	lt
 80099a0:	4249      	neglt	r1, r1
 80099a2:	f803 2b02 	strb.w	r2, [r3], #2
 80099a6:	bfb4      	ite	lt
 80099a8:	222d      	movlt	r2, #45	; 0x2d
 80099aa:	222b      	movge	r2, #43	; 0x2b
 80099ac:	2909      	cmp	r1, #9
 80099ae:	7042      	strb	r2, [r0, #1]
 80099b0:	dd2a      	ble.n	8009a08 <__exponent+0x70>
 80099b2:	f10d 0407 	add.w	r4, sp, #7
 80099b6:	46a4      	mov	ip, r4
 80099b8:	270a      	movs	r7, #10
 80099ba:	46a6      	mov	lr, r4
 80099bc:	460a      	mov	r2, r1
 80099be:	fb91 f6f7 	sdiv	r6, r1, r7
 80099c2:	fb07 1516 	mls	r5, r7, r6, r1
 80099c6:	3530      	adds	r5, #48	; 0x30
 80099c8:	2a63      	cmp	r2, #99	; 0x63
 80099ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80099ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80099d2:	4631      	mov	r1, r6
 80099d4:	dcf1      	bgt.n	80099ba <__exponent+0x22>
 80099d6:	3130      	adds	r1, #48	; 0x30
 80099d8:	f1ae 0502 	sub.w	r5, lr, #2
 80099dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80099e0:	1c44      	adds	r4, r0, #1
 80099e2:	4629      	mov	r1, r5
 80099e4:	4561      	cmp	r1, ip
 80099e6:	d30a      	bcc.n	80099fe <__exponent+0x66>
 80099e8:	f10d 0209 	add.w	r2, sp, #9
 80099ec:	eba2 020e 	sub.w	r2, r2, lr
 80099f0:	4565      	cmp	r5, ip
 80099f2:	bf88      	it	hi
 80099f4:	2200      	movhi	r2, #0
 80099f6:	4413      	add	r3, r2
 80099f8:	1a18      	subs	r0, r3, r0
 80099fa:	b003      	add	sp, #12
 80099fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a02:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009a06:	e7ed      	b.n	80099e4 <__exponent+0x4c>
 8009a08:	2330      	movs	r3, #48	; 0x30
 8009a0a:	3130      	adds	r1, #48	; 0x30
 8009a0c:	7083      	strb	r3, [r0, #2]
 8009a0e:	70c1      	strb	r1, [r0, #3]
 8009a10:	1d03      	adds	r3, r0, #4
 8009a12:	e7f1      	b.n	80099f8 <__exponent+0x60>

08009a14 <_printf_float>:
 8009a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a18:	ed2d 8b02 	vpush	{d8}
 8009a1c:	b08d      	sub	sp, #52	; 0x34
 8009a1e:	460c      	mov	r4, r1
 8009a20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a24:	4616      	mov	r6, r2
 8009a26:	461f      	mov	r7, r3
 8009a28:	4605      	mov	r5, r0
 8009a2a:	f001 fd63 	bl	800b4f4 <_localeconv_r>
 8009a2e:	f8d0 a000 	ldr.w	sl, [r0]
 8009a32:	4650      	mov	r0, sl
 8009a34:	f7f6 fbcc 	bl	80001d0 <strlen>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	9305      	str	r3, [sp, #20]
 8009a40:	f8d8 3000 	ldr.w	r3, [r8]
 8009a44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009a48:	3307      	adds	r3, #7
 8009a4a:	f023 0307 	bic.w	r3, r3, #7
 8009a4e:	f103 0208 	add.w	r2, r3, #8
 8009a52:	f8c8 2000 	str.w	r2, [r8]
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009a5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009a62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a66:	9307      	str	r3, [sp, #28]
 8009a68:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a6c:	ee08 0a10 	vmov	s16, r0
 8009a70:	4b9f      	ldr	r3, [pc, #636]	; (8009cf0 <_printf_float+0x2dc>)
 8009a72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a76:	f04f 32ff 	mov.w	r2, #4294967295
 8009a7a:	f7f7 f857 	bl	8000b2c <__aeabi_dcmpun>
 8009a7e:	bb88      	cbnz	r0, 8009ae4 <_printf_float+0xd0>
 8009a80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a84:	4b9a      	ldr	r3, [pc, #616]	; (8009cf0 <_printf_float+0x2dc>)
 8009a86:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8a:	f7f7 f831 	bl	8000af0 <__aeabi_dcmple>
 8009a8e:	bb48      	cbnz	r0, 8009ae4 <_printf_float+0xd0>
 8009a90:	2200      	movs	r2, #0
 8009a92:	2300      	movs	r3, #0
 8009a94:	4640      	mov	r0, r8
 8009a96:	4649      	mov	r1, r9
 8009a98:	f7f7 f820 	bl	8000adc <__aeabi_dcmplt>
 8009a9c:	b110      	cbz	r0, 8009aa4 <_printf_float+0x90>
 8009a9e:	232d      	movs	r3, #45	; 0x2d
 8009aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aa4:	4b93      	ldr	r3, [pc, #588]	; (8009cf4 <_printf_float+0x2e0>)
 8009aa6:	4894      	ldr	r0, [pc, #592]	; (8009cf8 <_printf_float+0x2e4>)
 8009aa8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009aac:	bf94      	ite	ls
 8009aae:	4698      	movls	r8, r3
 8009ab0:	4680      	movhi	r8, r0
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	6123      	str	r3, [r4, #16]
 8009ab6:	9b05      	ldr	r3, [sp, #20]
 8009ab8:	f023 0204 	bic.w	r2, r3, #4
 8009abc:	6022      	str	r2, [r4, #0]
 8009abe:	f04f 0900 	mov.w	r9, #0
 8009ac2:	9700      	str	r7, [sp, #0]
 8009ac4:	4633      	mov	r3, r6
 8009ac6:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ac8:	4621      	mov	r1, r4
 8009aca:	4628      	mov	r0, r5
 8009acc:	f000 f9d8 	bl	8009e80 <_printf_common>
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	f040 8090 	bne.w	8009bf6 <_printf_float+0x1e2>
 8009ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8009ada:	b00d      	add	sp, #52	; 0x34
 8009adc:	ecbd 8b02 	vpop	{d8}
 8009ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae4:	4642      	mov	r2, r8
 8009ae6:	464b      	mov	r3, r9
 8009ae8:	4640      	mov	r0, r8
 8009aea:	4649      	mov	r1, r9
 8009aec:	f7f7 f81e 	bl	8000b2c <__aeabi_dcmpun>
 8009af0:	b140      	cbz	r0, 8009b04 <_printf_float+0xf0>
 8009af2:	464b      	mov	r3, r9
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	bfbc      	itt	lt
 8009af8:	232d      	movlt	r3, #45	; 0x2d
 8009afa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009afe:	487f      	ldr	r0, [pc, #508]	; (8009cfc <_printf_float+0x2e8>)
 8009b00:	4b7f      	ldr	r3, [pc, #508]	; (8009d00 <_printf_float+0x2ec>)
 8009b02:	e7d1      	b.n	8009aa8 <_printf_float+0x94>
 8009b04:	6863      	ldr	r3, [r4, #4]
 8009b06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b0a:	9206      	str	r2, [sp, #24]
 8009b0c:	1c5a      	adds	r2, r3, #1
 8009b0e:	d13f      	bne.n	8009b90 <_printf_float+0x17c>
 8009b10:	2306      	movs	r3, #6
 8009b12:	6063      	str	r3, [r4, #4]
 8009b14:	9b05      	ldr	r3, [sp, #20]
 8009b16:	6861      	ldr	r1, [r4, #4]
 8009b18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	9303      	str	r3, [sp, #12]
 8009b20:	ab0a      	add	r3, sp, #40	; 0x28
 8009b22:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b26:	ab09      	add	r3, sp, #36	; 0x24
 8009b28:	ec49 8b10 	vmov	d0, r8, r9
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	6022      	str	r2, [r4, #0]
 8009b30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b34:	4628      	mov	r0, r5
 8009b36:	f7ff fecd 	bl	80098d4 <__cvt>
 8009b3a:	9b06      	ldr	r3, [sp, #24]
 8009b3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b3e:	2b47      	cmp	r3, #71	; 0x47
 8009b40:	4680      	mov	r8, r0
 8009b42:	d108      	bne.n	8009b56 <_printf_float+0x142>
 8009b44:	1cc8      	adds	r0, r1, #3
 8009b46:	db02      	blt.n	8009b4e <_printf_float+0x13a>
 8009b48:	6863      	ldr	r3, [r4, #4]
 8009b4a:	4299      	cmp	r1, r3
 8009b4c:	dd41      	ble.n	8009bd2 <_printf_float+0x1be>
 8009b4e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009b52:	fa5f fb8b 	uxtb.w	fp, fp
 8009b56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b5a:	d820      	bhi.n	8009b9e <_printf_float+0x18a>
 8009b5c:	3901      	subs	r1, #1
 8009b5e:	465a      	mov	r2, fp
 8009b60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b64:	9109      	str	r1, [sp, #36]	; 0x24
 8009b66:	f7ff ff17 	bl	8009998 <__exponent>
 8009b6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b6c:	1813      	adds	r3, r2, r0
 8009b6e:	2a01      	cmp	r2, #1
 8009b70:	4681      	mov	r9, r0
 8009b72:	6123      	str	r3, [r4, #16]
 8009b74:	dc02      	bgt.n	8009b7c <_printf_float+0x168>
 8009b76:	6822      	ldr	r2, [r4, #0]
 8009b78:	07d2      	lsls	r2, r2, #31
 8009b7a:	d501      	bpl.n	8009b80 <_printf_float+0x16c>
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	6123      	str	r3, [r4, #16]
 8009b80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d09c      	beq.n	8009ac2 <_printf_float+0xae>
 8009b88:	232d      	movs	r3, #45	; 0x2d
 8009b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b8e:	e798      	b.n	8009ac2 <_printf_float+0xae>
 8009b90:	9a06      	ldr	r2, [sp, #24]
 8009b92:	2a47      	cmp	r2, #71	; 0x47
 8009b94:	d1be      	bne.n	8009b14 <_printf_float+0x100>
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1bc      	bne.n	8009b14 <_printf_float+0x100>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e7b9      	b.n	8009b12 <_printf_float+0xfe>
 8009b9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009ba2:	d118      	bne.n	8009bd6 <_printf_float+0x1c2>
 8009ba4:	2900      	cmp	r1, #0
 8009ba6:	6863      	ldr	r3, [r4, #4]
 8009ba8:	dd0b      	ble.n	8009bc2 <_printf_float+0x1ae>
 8009baa:	6121      	str	r1, [r4, #16]
 8009bac:	b913      	cbnz	r3, 8009bb4 <_printf_float+0x1a0>
 8009bae:	6822      	ldr	r2, [r4, #0]
 8009bb0:	07d0      	lsls	r0, r2, #31
 8009bb2:	d502      	bpl.n	8009bba <_printf_float+0x1a6>
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	440b      	add	r3, r1
 8009bb8:	6123      	str	r3, [r4, #16]
 8009bba:	65a1      	str	r1, [r4, #88]	; 0x58
 8009bbc:	f04f 0900 	mov.w	r9, #0
 8009bc0:	e7de      	b.n	8009b80 <_printf_float+0x16c>
 8009bc2:	b913      	cbnz	r3, 8009bca <_printf_float+0x1b6>
 8009bc4:	6822      	ldr	r2, [r4, #0]
 8009bc6:	07d2      	lsls	r2, r2, #31
 8009bc8:	d501      	bpl.n	8009bce <_printf_float+0x1ba>
 8009bca:	3302      	adds	r3, #2
 8009bcc:	e7f4      	b.n	8009bb8 <_printf_float+0x1a4>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e7f2      	b.n	8009bb8 <_printf_float+0x1a4>
 8009bd2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd8:	4299      	cmp	r1, r3
 8009bda:	db05      	blt.n	8009be8 <_printf_float+0x1d4>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	6121      	str	r1, [r4, #16]
 8009be0:	07d8      	lsls	r0, r3, #31
 8009be2:	d5ea      	bpl.n	8009bba <_printf_float+0x1a6>
 8009be4:	1c4b      	adds	r3, r1, #1
 8009be6:	e7e7      	b.n	8009bb8 <_printf_float+0x1a4>
 8009be8:	2900      	cmp	r1, #0
 8009bea:	bfd4      	ite	le
 8009bec:	f1c1 0202 	rsble	r2, r1, #2
 8009bf0:	2201      	movgt	r2, #1
 8009bf2:	4413      	add	r3, r2
 8009bf4:	e7e0      	b.n	8009bb8 <_printf_float+0x1a4>
 8009bf6:	6823      	ldr	r3, [r4, #0]
 8009bf8:	055a      	lsls	r2, r3, #21
 8009bfa:	d407      	bmi.n	8009c0c <_printf_float+0x1f8>
 8009bfc:	6923      	ldr	r3, [r4, #16]
 8009bfe:	4642      	mov	r2, r8
 8009c00:	4631      	mov	r1, r6
 8009c02:	4628      	mov	r0, r5
 8009c04:	47b8      	blx	r7
 8009c06:	3001      	adds	r0, #1
 8009c08:	d12c      	bne.n	8009c64 <_printf_float+0x250>
 8009c0a:	e764      	b.n	8009ad6 <_printf_float+0xc2>
 8009c0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c10:	f240 80e0 	bls.w	8009dd4 <_printf_float+0x3c0>
 8009c14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	f7f6 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d034      	beq.n	8009c8e <_printf_float+0x27a>
 8009c24:	4a37      	ldr	r2, [pc, #220]	; (8009d04 <_printf_float+0x2f0>)
 8009c26:	2301      	movs	r3, #1
 8009c28:	4631      	mov	r1, r6
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	47b8      	blx	r7
 8009c2e:	3001      	adds	r0, #1
 8009c30:	f43f af51 	beq.w	8009ad6 <_printf_float+0xc2>
 8009c34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	db02      	blt.n	8009c42 <_printf_float+0x22e>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	07d8      	lsls	r0, r3, #31
 8009c40:	d510      	bpl.n	8009c64 <_printf_float+0x250>
 8009c42:	ee18 3a10 	vmov	r3, s16
 8009c46:	4652      	mov	r2, sl
 8009c48:	4631      	mov	r1, r6
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	47b8      	blx	r7
 8009c4e:	3001      	adds	r0, #1
 8009c50:	f43f af41 	beq.w	8009ad6 <_printf_float+0xc2>
 8009c54:	f04f 0800 	mov.w	r8, #0
 8009c58:	f104 091a 	add.w	r9, r4, #26
 8009c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	4543      	cmp	r3, r8
 8009c62:	dc09      	bgt.n	8009c78 <_printf_float+0x264>
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	079b      	lsls	r3, r3, #30
 8009c68:	f100 8105 	bmi.w	8009e76 <_printf_float+0x462>
 8009c6c:	68e0      	ldr	r0, [r4, #12]
 8009c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c70:	4298      	cmp	r0, r3
 8009c72:	bfb8      	it	lt
 8009c74:	4618      	movlt	r0, r3
 8009c76:	e730      	b.n	8009ada <_printf_float+0xc6>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	464a      	mov	r2, r9
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4628      	mov	r0, r5
 8009c80:	47b8      	blx	r7
 8009c82:	3001      	adds	r0, #1
 8009c84:	f43f af27 	beq.w	8009ad6 <_printf_float+0xc2>
 8009c88:	f108 0801 	add.w	r8, r8, #1
 8009c8c:	e7e6      	b.n	8009c5c <_printf_float+0x248>
 8009c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	dc39      	bgt.n	8009d08 <_printf_float+0x2f4>
 8009c94:	4a1b      	ldr	r2, [pc, #108]	; (8009d04 <_printf_float+0x2f0>)
 8009c96:	2301      	movs	r3, #1
 8009c98:	4631      	mov	r1, r6
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	47b8      	blx	r7
 8009c9e:	3001      	adds	r0, #1
 8009ca0:	f43f af19 	beq.w	8009ad6 <_printf_float+0xc2>
 8009ca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	d102      	bne.n	8009cb2 <_printf_float+0x29e>
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	07d9      	lsls	r1, r3, #31
 8009cb0:	d5d8      	bpl.n	8009c64 <_printf_float+0x250>
 8009cb2:	ee18 3a10 	vmov	r3, s16
 8009cb6:	4652      	mov	r2, sl
 8009cb8:	4631      	mov	r1, r6
 8009cba:	4628      	mov	r0, r5
 8009cbc:	47b8      	blx	r7
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	f43f af09 	beq.w	8009ad6 <_printf_float+0xc2>
 8009cc4:	f04f 0900 	mov.w	r9, #0
 8009cc8:	f104 0a1a 	add.w	sl, r4, #26
 8009ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cce:	425b      	negs	r3, r3
 8009cd0:	454b      	cmp	r3, r9
 8009cd2:	dc01      	bgt.n	8009cd8 <_printf_float+0x2c4>
 8009cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd6:	e792      	b.n	8009bfe <_printf_float+0x1ea>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	4652      	mov	r2, sl
 8009cdc:	4631      	mov	r1, r6
 8009cde:	4628      	mov	r0, r5
 8009ce0:	47b8      	blx	r7
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	f43f aef7 	beq.w	8009ad6 <_printf_float+0xc2>
 8009ce8:	f109 0901 	add.w	r9, r9, #1
 8009cec:	e7ee      	b.n	8009ccc <_printf_float+0x2b8>
 8009cee:	bf00      	nop
 8009cf0:	7fefffff 	.word	0x7fefffff
 8009cf4:	0800f3b8 	.word	0x0800f3b8
 8009cf8:	0800f3bc 	.word	0x0800f3bc
 8009cfc:	0800f3c4 	.word	0x0800f3c4
 8009d00:	0800f3c0 	.word	0x0800f3c0
 8009d04:	0800cac2 	.word	0x0800cac2
 8009d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	bfa8      	it	ge
 8009d10:	461a      	movge	r2, r3
 8009d12:	2a00      	cmp	r2, #0
 8009d14:	4691      	mov	r9, r2
 8009d16:	dc37      	bgt.n	8009d88 <_printf_float+0x374>
 8009d18:	f04f 0b00 	mov.w	fp, #0
 8009d1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d20:	f104 021a 	add.w	r2, r4, #26
 8009d24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d26:	9305      	str	r3, [sp, #20]
 8009d28:	eba3 0309 	sub.w	r3, r3, r9
 8009d2c:	455b      	cmp	r3, fp
 8009d2e:	dc33      	bgt.n	8009d98 <_printf_float+0x384>
 8009d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d34:	429a      	cmp	r2, r3
 8009d36:	db3b      	blt.n	8009db0 <_printf_float+0x39c>
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	07da      	lsls	r2, r3, #31
 8009d3c:	d438      	bmi.n	8009db0 <_printf_float+0x39c>
 8009d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d40:	9a05      	ldr	r2, [sp, #20]
 8009d42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d44:	1a9a      	subs	r2, r3, r2
 8009d46:	eba3 0901 	sub.w	r9, r3, r1
 8009d4a:	4591      	cmp	r9, r2
 8009d4c:	bfa8      	it	ge
 8009d4e:	4691      	movge	r9, r2
 8009d50:	f1b9 0f00 	cmp.w	r9, #0
 8009d54:	dc35      	bgt.n	8009dc2 <_printf_float+0x3ae>
 8009d56:	f04f 0800 	mov.w	r8, #0
 8009d5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d5e:	f104 0a1a 	add.w	sl, r4, #26
 8009d62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d66:	1a9b      	subs	r3, r3, r2
 8009d68:	eba3 0309 	sub.w	r3, r3, r9
 8009d6c:	4543      	cmp	r3, r8
 8009d6e:	f77f af79 	ble.w	8009c64 <_printf_float+0x250>
 8009d72:	2301      	movs	r3, #1
 8009d74:	4652      	mov	r2, sl
 8009d76:	4631      	mov	r1, r6
 8009d78:	4628      	mov	r0, r5
 8009d7a:	47b8      	blx	r7
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	f43f aeaa 	beq.w	8009ad6 <_printf_float+0xc2>
 8009d82:	f108 0801 	add.w	r8, r8, #1
 8009d86:	e7ec      	b.n	8009d62 <_printf_float+0x34e>
 8009d88:	4613      	mov	r3, r2
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	4642      	mov	r2, r8
 8009d8e:	4628      	mov	r0, r5
 8009d90:	47b8      	blx	r7
 8009d92:	3001      	adds	r0, #1
 8009d94:	d1c0      	bne.n	8009d18 <_printf_float+0x304>
 8009d96:	e69e      	b.n	8009ad6 <_printf_float+0xc2>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	4631      	mov	r1, r6
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	9205      	str	r2, [sp, #20]
 8009da0:	47b8      	blx	r7
 8009da2:	3001      	adds	r0, #1
 8009da4:	f43f ae97 	beq.w	8009ad6 <_printf_float+0xc2>
 8009da8:	9a05      	ldr	r2, [sp, #20]
 8009daa:	f10b 0b01 	add.w	fp, fp, #1
 8009dae:	e7b9      	b.n	8009d24 <_printf_float+0x310>
 8009db0:	ee18 3a10 	vmov	r3, s16
 8009db4:	4652      	mov	r2, sl
 8009db6:	4631      	mov	r1, r6
 8009db8:	4628      	mov	r0, r5
 8009dba:	47b8      	blx	r7
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	d1be      	bne.n	8009d3e <_printf_float+0x32a>
 8009dc0:	e689      	b.n	8009ad6 <_printf_float+0xc2>
 8009dc2:	9a05      	ldr	r2, [sp, #20]
 8009dc4:	464b      	mov	r3, r9
 8009dc6:	4442      	add	r2, r8
 8009dc8:	4631      	mov	r1, r6
 8009dca:	4628      	mov	r0, r5
 8009dcc:	47b8      	blx	r7
 8009dce:	3001      	adds	r0, #1
 8009dd0:	d1c1      	bne.n	8009d56 <_printf_float+0x342>
 8009dd2:	e680      	b.n	8009ad6 <_printf_float+0xc2>
 8009dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dd6:	2a01      	cmp	r2, #1
 8009dd8:	dc01      	bgt.n	8009dde <_printf_float+0x3ca>
 8009dda:	07db      	lsls	r3, r3, #31
 8009ddc:	d538      	bpl.n	8009e50 <_printf_float+0x43c>
 8009dde:	2301      	movs	r3, #1
 8009de0:	4642      	mov	r2, r8
 8009de2:	4631      	mov	r1, r6
 8009de4:	4628      	mov	r0, r5
 8009de6:	47b8      	blx	r7
 8009de8:	3001      	adds	r0, #1
 8009dea:	f43f ae74 	beq.w	8009ad6 <_printf_float+0xc2>
 8009dee:	ee18 3a10 	vmov	r3, s16
 8009df2:	4652      	mov	r2, sl
 8009df4:	4631      	mov	r1, r6
 8009df6:	4628      	mov	r0, r5
 8009df8:	47b8      	blx	r7
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	f43f ae6b 	beq.w	8009ad6 <_printf_float+0xc2>
 8009e00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e04:	2200      	movs	r2, #0
 8009e06:	2300      	movs	r3, #0
 8009e08:	f7f6 fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e0c:	b9d8      	cbnz	r0, 8009e46 <_printf_float+0x432>
 8009e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e10:	f108 0201 	add.w	r2, r8, #1
 8009e14:	3b01      	subs	r3, #1
 8009e16:	4631      	mov	r1, r6
 8009e18:	4628      	mov	r0, r5
 8009e1a:	47b8      	blx	r7
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	d10e      	bne.n	8009e3e <_printf_float+0x42a>
 8009e20:	e659      	b.n	8009ad6 <_printf_float+0xc2>
 8009e22:	2301      	movs	r3, #1
 8009e24:	4652      	mov	r2, sl
 8009e26:	4631      	mov	r1, r6
 8009e28:	4628      	mov	r0, r5
 8009e2a:	47b8      	blx	r7
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	f43f ae52 	beq.w	8009ad6 <_printf_float+0xc2>
 8009e32:	f108 0801 	add.w	r8, r8, #1
 8009e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	4543      	cmp	r3, r8
 8009e3c:	dcf1      	bgt.n	8009e22 <_printf_float+0x40e>
 8009e3e:	464b      	mov	r3, r9
 8009e40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e44:	e6dc      	b.n	8009c00 <_printf_float+0x1ec>
 8009e46:	f04f 0800 	mov.w	r8, #0
 8009e4a:	f104 0a1a 	add.w	sl, r4, #26
 8009e4e:	e7f2      	b.n	8009e36 <_printf_float+0x422>
 8009e50:	2301      	movs	r3, #1
 8009e52:	4642      	mov	r2, r8
 8009e54:	e7df      	b.n	8009e16 <_printf_float+0x402>
 8009e56:	2301      	movs	r3, #1
 8009e58:	464a      	mov	r2, r9
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	47b8      	blx	r7
 8009e60:	3001      	adds	r0, #1
 8009e62:	f43f ae38 	beq.w	8009ad6 <_printf_float+0xc2>
 8009e66:	f108 0801 	add.w	r8, r8, #1
 8009e6a:	68e3      	ldr	r3, [r4, #12]
 8009e6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e6e:	1a5b      	subs	r3, r3, r1
 8009e70:	4543      	cmp	r3, r8
 8009e72:	dcf0      	bgt.n	8009e56 <_printf_float+0x442>
 8009e74:	e6fa      	b.n	8009c6c <_printf_float+0x258>
 8009e76:	f04f 0800 	mov.w	r8, #0
 8009e7a:	f104 0919 	add.w	r9, r4, #25
 8009e7e:	e7f4      	b.n	8009e6a <_printf_float+0x456>

08009e80 <_printf_common>:
 8009e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e84:	4616      	mov	r6, r2
 8009e86:	4699      	mov	r9, r3
 8009e88:	688a      	ldr	r2, [r1, #8]
 8009e8a:	690b      	ldr	r3, [r1, #16]
 8009e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e90:	4293      	cmp	r3, r2
 8009e92:	bfb8      	it	lt
 8009e94:	4613      	movlt	r3, r2
 8009e96:	6033      	str	r3, [r6, #0]
 8009e98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e9c:	4607      	mov	r7, r0
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	b10a      	cbz	r2, 8009ea6 <_printf_common+0x26>
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	6033      	str	r3, [r6, #0]
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	0699      	lsls	r1, r3, #26
 8009eaa:	bf42      	ittt	mi
 8009eac:	6833      	ldrmi	r3, [r6, #0]
 8009eae:	3302      	addmi	r3, #2
 8009eb0:	6033      	strmi	r3, [r6, #0]
 8009eb2:	6825      	ldr	r5, [r4, #0]
 8009eb4:	f015 0506 	ands.w	r5, r5, #6
 8009eb8:	d106      	bne.n	8009ec8 <_printf_common+0x48>
 8009eba:	f104 0a19 	add.w	sl, r4, #25
 8009ebe:	68e3      	ldr	r3, [r4, #12]
 8009ec0:	6832      	ldr	r2, [r6, #0]
 8009ec2:	1a9b      	subs	r3, r3, r2
 8009ec4:	42ab      	cmp	r3, r5
 8009ec6:	dc26      	bgt.n	8009f16 <_printf_common+0x96>
 8009ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ecc:	1e13      	subs	r3, r2, #0
 8009ece:	6822      	ldr	r2, [r4, #0]
 8009ed0:	bf18      	it	ne
 8009ed2:	2301      	movne	r3, #1
 8009ed4:	0692      	lsls	r2, r2, #26
 8009ed6:	d42b      	bmi.n	8009f30 <_printf_common+0xb0>
 8009ed8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009edc:	4649      	mov	r1, r9
 8009ede:	4638      	mov	r0, r7
 8009ee0:	47c0      	blx	r8
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	d01e      	beq.n	8009f24 <_printf_common+0xa4>
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	68e5      	ldr	r5, [r4, #12]
 8009eea:	6832      	ldr	r2, [r6, #0]
 8009eec:	f003 0306 	and.w	r3, r3, #6
 8009ef0:	2b04      	cmp	r3, #4
 8009ef2:	bf08      	it	eq
 8009ef4:	1aad      	subeq	r5, r5, r2
 8009ef6:	68a3      	ldr	r3, [r4, #8]
 8009ef8:	6922      	ldr	r2, [r4, #16]
 8009efa:	bf0c      	ite	eq
 8009efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f00:	2500      	movne	r5, #0
 8009f02:	4293      	cmp	r3, r2
 8009f04:	bfc4      	itt	gt
 8009f06:	1a9b      	subgt	r3, r3, r2
 8009f08:	18ed      	addgt	r5, r5, r3
 8009f0a:	2600      	movs	r6, #0
 8009f0c:	341a      	adds	r4, #26
 8009f0e:	42b5      	cmp	r5, r6
 8009f10:	d11a      	bne.n	8009f48 <_printf_common+0xc8>
 8009f12:	2000      	movs	r0, #0
 8009f14:	e008      	b.n	8009f28 <_printf_common+0xa8>
 8009f16:	2301      	movs	r3, #1
 8009f18:	4652      	mov	r2, sl
 8009f1a:	4649      	mov	r1, r9
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	47c0      	blx	r8
 8009f20:	3001      	adds	r0, #1
 8009f22:	d103      	bne.n	8009f2c <_printf_common+0xac>
 8009f24:	f04f 30ff 	mov.w	r0, #4294967295
 8009f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f2c:	3501      	adds	r5, #1
 8009f2e:	e7c6      	b.n	8009ebe <_printf_common+0x3e>
 8009f30:	18e1      	adds	r1, r4, r3
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	2030      	movs	r0, #48	; 0x30
 8009f36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f3a:	4422      	add	r2, r4
 8009f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f44:	3302      	adds	r3, #2
 8009f46:	e7c7      	b.n	8009ed8 <_printf_common+0x58>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	4622      	mov	r2, r4
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	4638      	mov	r0, r7
 8009f50:	47c0      	blx	r8
 8009f52:	3001      	adds	r0, #1
 8009f54:	d0e6      	beq.n	8009f24 <_printf_common+0xa4>
 8009f56:	3601      	adds	r6, #1
 8009f58:	e7d9      	b.n	8009f0e <_printf_common+0x8e>
	...

08009f5c <_printf_i>:
 8009f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f60:	7e0f      	ldrb	r7, [r1, #24]
 8009f62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f64:	2f78      	cmp	r7, #120	; 0x78
 8009f66:	4691      	mov	r9, r2
 8009f68:	4680      	mov	r8, r0
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	469a      	mov	sl, r3
 8009f6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f72:	d807      	bhi.n	8009f84 <_printf_i+0x28>
 8009f74:	2f62      	cmp	r7, #98	; 0x62
 8009f76:	d80a      	bhi.n	8009f8e <_printf_i+0x32>
 8009f78:	2f00      	cmp	r7, #0
 8009f7a:	f000 80d8 	beq.w	800a12e <_printf_i+0x1d2>
 8009f7e:	2f58      	cmp	r7, #88	; 0x58
 8009f80:	f000 80a3 	beq.w	800a0ca <_printf_i+0x16e>
 8009f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f8c:	e03a      	b.n	800a004 <_printf_i+0xa8>
 8009f8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f92:	2b15      	cmp	r3, #21
 8009f94:	d8f6      	bhi.n	8009f84 <_printf_i+0x28>
 8009f96:	a101      	add	r1, pc, #4	; (adr r1, 8009f9c <_printf_i+0x40>)
 8009f98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f9c:	08009ff5 	.word	0x08009ff5
 8009fa0:	0800a009 	.word	0x0800a009
 8009fa4:	08009f85 	.word	0x08009f85
 8009fa8:	08009f85 	.word	0x08009f85
 8009fac:	08009f85 	.word	0x08009f85
 8009fb0:	08009f85 	.word	0x08009f85
 8009fb4:	0800a009 	.word	0x0800a009
 8009fb8:	08009f85 	.word	0x08009f85
 8009fbc:	08009f85 	.word	0x08009f85
 8009fc0:	08009f85 	.word	0x08009f85
 8009fc4:	08009f85 	.word	0x08009f85
 8009fc8:	0800a115 	.word	0x0800a115
 8009fcc:	0800a039 	.word	0x0800a039
 8009fd0:	0800a0f7 	.word	0x0800a0f7
 8009fd4:	08009f85 	.word	0x08009f85
 8009fd8:	08009f85 	.word	0x08009f85
 8009fdc:	0800a137 	.word	0x0800a137
 8009fe0:	08009f85 	.word	0x08009f85
 8009fe4:	0800a039 	.word	0x0800a039
 8009fe8:	08009f85 	.word	0x08009f85
 8009fec:	08009f85 	.word	0x08009f85
 8009ff0:	0800a0ff 	.word	0x0800a0ff
 8009ff4:	682b      	ldr	r3, [r5, #0]
 8009ff6:	1d1a      	adds	r2, r3, #4
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	602a      	str	r2, [r5, #0]
 8009ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a000:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a004:	2301      	movs	r3, #1
 800a006:	e0a3      	b.n	800a150 <_printf_i+0x1f4>
 800a008:	6820      	ldr	r0, [r4, #0]
 800a00a:	6829      	ldr	r1, [r5, #0]
 800a00c:	0606      	lsls	r6, r0, #24
 800a00e:	f101 0304 	add.w	r3, r1, #4
 800a012:	d50a      	bpl.n	800a02a <_printf_i+0xce>
 800a014:	680e      	ldr	r6, [r1, #0]
 800a016:	602b      	str	r3, [r5, #0]
 800a018:	2e00      	cmp	r6, #0
 800a01a:	da03      	bge.n	800a024 <_printf_i+0xc8>
 800a01c:	232d      	movs	r3, #45	; 0x2d
 800a01e:	4276      	negs	r6, r6
 800a020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a024:	485e      	ldr	r0, [pc, #376]	; (800a1a0 <_printf_i+0x244>)
 800a026:	230a      	movs	r3, #10
 800a028:	e019      	b.n	800a05e <_printf_i+0x102>
 800a02a:	680e      	ldr	r6, [r1, #0]
 800a02c:	602b      	str	r3, [r5, #0]
 800a02e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a032:	bf18      	it	ne
 800a034:	b236      	sxthne	r6, r6
 800a036:	e7ef      	b.n	800a018 <_printf_i+0xbc>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	6820      	ldr	r0, [r4, #0]
 800a03c:	1d19      	adds	r1, r3, #4
 800a03e:	6029      	str	r1, [r5, #0]
 800a040:	0601      	lsls	r1, r0, #24
 800a042:	d501      	bpl.n	800a048 <_printf_i+0xec>
 800a044:	681e      	ldr	r6, [r3, #0]
 800a046:	e002      	b.n	800a04e <_printf_i+0xf2>
 800a048:	0646      	lsls	r6, r0, #25
 800a04a:	d5fb      	bpl.n	800a044 <_printf_i+0xe8>
 800a04c:	881e      	ldrh	r6, [r3, #0]
 800a04e:	4854      	ldr	r0, [pc, #336]	; (800a1a0 <_printf_i+0x244>)
 800a050:	2f6f      	cmp	r7, #111	; 0x6f
 800a052:	bf0c      	ite	eq
 800a054:	2308      	moveq	r3, #8
 800a056:	230a      	movne	r3, #10
 800a058:	2100      	movs	r1, #0
 800a05a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a05e:	6865      	ldr	r5, [r4, #4]
 800a060:	60a5      	str	r5, [r4, #8]
 800a062:	2d00      	cmp	r5, #0
 800a064:	bfa2      	ittt	ge
 800a066:	6821      	ldrge	r1, [r4, #0]
 800a068:	f021 0104 	bicge.w	r1, r1, #4
 800a06c:	6021      	strge	r1, [r4, #0]
 800a06e:	b90e      	cbnz	r6, 800a074 <_printf_i+0x118>
 800a070:	2d00      	cmp	r5, #0
 800a072:	d04d      	beq.n	800a110 <_printf_i+0x1b4>
 800a074:	4615      	mov	r5, r2
 800a076:	fbb6 f1f3 	udiv	r1, r6, r3
 800a07a:	fb03 6711 	mls	r7, r3, r1, r6
 800a07e:	5dc7      	ldrb	r7, [r0, r7]
 800a080:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a084:	4637      	mov	r7, r6
 800a086:	42bb      	cmp	r3, r7
 800a088:	460e      	mov	r6, r1
 800a08a:	d9f4      	bls.n	800a076 <_printf_i+0x11a>
 800a08c:	2b08      	cmp	r3, #8
 800a08e:	d10b      	bne.n	800a0a8 <_printf_i+0x14c>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	07de      	lsls	r6, r3, #31
 800a094:	d508      	bpl.n	800a0a8 <_printf_i+0x14c>
 800a096:	6923      	ldr	r3, [r4, #16]
 800a098:	6861      	ldr	r1, [r4, #4]
 800a09a:	4299      	cmp	r1, r3
 800a09c:	bfde      	ittt	le
 800a09e:	2330      	movle	r3, #48	; 0x30
 800a0a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0a8:	1b52      	subs	r2, r2, r5
 800a0aa:	6122      	str	r2, [r4, #16]
 800a0ac:	f8cd a000 	str.w	sl, [sp]
 800a0b0:	464b      	mov	r3, r9
 800a0b2:	aa03      	add	r2, sp, #12
 800a0b4:	4621      	mov	r1, r4
 800a0b6:	4640      	mov	r0, r8
 800a0b8:	f7ff fee2 	bl	8009e80 <_printf_common>
 800a0bc:	3001      	adds	r0, #1
 800a0be:	d14c      	bne.n	800a15a <_printf_i+0x1fe>
 800a0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c4:	b004      	add	sp, #16
 800a0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ca:	4835      	ldr	r0, [pc, #212]	; (800a1a0 <_printf_i+0x244>)
 800a0cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0d0:	6829      	ldr	r1, [r5, #0]
 800a0d2:	6823      	ldr	r3, [r4, #0]
 800a0d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0d8:	6029      	str	r1, [r5, #0]
 800a0da:	061d      	lsls	r5, r3, #24
 800a0dc:	d514      	bpl.n	800a108 <_printf_i+0x1ac>
 800a0de:	07df      	lsls	r7, r3, #31
 800a0e0:	bf44      	itt	mi
 800a0e2:	f043 0320 	orrmi.w	r3, r3, #32
 800a0e6:	6023      	strmi	r3, [r4, #0]
 800a0e8:	b91e      	cbnz	r6, 800a0f2 <_printf_i+0x196>
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	f023 0320 	bic.w	r3, r3, #32
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	2310      	movs	r3, #16
 800a0f4:	e7b0      	b.n	800a058 <_printf_i+0xfc>
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	f043 0320 	orr.w	r3, r3, #32
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	2378      	movs	r3, #120	; 0x78
 800a100:	4828      	ldr	r0, [pc, #160]	; (800a1a4 <_printf_i+0x248>)
 800a102:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a106:	e7e3      	b.n	800a0d0 <_printf_i+0x174>
 800a108:	0659      	lsls	r1, r3, #25
 800a10a:	bf48      	it	mi
 800a10c:	b2b6      	uxthmi	r6, r6
 800a10e:	e7e6      	b.n	800a0de <_printf_i+0x182>
 800a110:	4615      	mov	r5, r2
 800a112:	e7bb      	b.n	800a08c <_printf_i+0x130>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	6826      	ldr	r6, [r4, #0]
 800a118:	6961      	ldr	r1, [r4, #20]
 800a11a:	1d18      	adds	r0, r3, #4
 800a11c:	6028      	str	r0, [r5, #0]
 800a11e:	0635      	lsls	r5, r6, #24
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	d501      	bpl.n	800a128 <_printf_i+0x1cc>
 800a124:	6019      	str	r1, [r3, #0]
 800a126:	e002      	b.n	800a12e <_printf_i+0x1d2>
 800a128:	0670      	lsls	r0, r6, #25
 800a12a:	d5fb      	bpl.n	800a124 <_printf_i+0x1c8>
 800a12c:	8019      	strh	r1, [r3, #0]
 800a12e:	2300      	movs	r3, #0
 800a130:	6123      	str	r3, [r4, #16]
 800a132:	4615      	mov	r5, r2
 800a134:	e7ba      	b.n	800a0ac <_printf_i+0x150>
 800a136:	682b      	ldr	r3, [r5, #0]
 800a138:	1d1a      	adds	r2, r3, #4
 800a13a:	602a      	str	r2, [r5, #0]
 800a13c:	681d      	ldr	r5, [r3, #0]
 800a13e:	6862      	ldr	r2, [r4, #4]
 800a140:	2100      	movs	r1, #0
 800a142:	4628      	mov	r0, r5
 800a144:	f7f6 f84c 	bl	80001e0 <memchr>
 800a148:	b108      	cbz	r0, 800a14e <_printf_i+0x1f2>
 800a14a:	1b40      	subs	r0, r0, r5
 800a14c:	6060      	str	r0, [r4, #4]
 800a14e:	6863      	ldr	r3, [r4, #4]
 800a150:	6123      	str	r3, [r4, #16]
 800a152:	2300      	movs	r3, #0
 800a154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a158:	e7a8      	b.n	800a0ac <_printf_i+0x150>
 800a15a:	6923      	ldr	r3, [r4, #16]
 800a15c:	462a      	mov	r2, r5
 800a15e:	4649      	mov	r1, r9
 800a160:	4640      	mov	r0, r8
 800a162:	47d0      	blx	sl
 800a164:	3001      	adds	r0, #1
 800a166:	d0ab      	beq.n	800a0c0 <_printf_i+0x164>
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	079b      	lsls	r3, r3, #30
 800a16c:	d413      	bmi.n	800a196 <_printf_i+0x23a>
 800a16e:	68e0      	ldr	r0, [r4, #12]
 800a170:	9b03      	ldr	r3, [sp, #12]
 800a172:	4298      	cmp	r0, r3
 800a174:	bfb8      	it	lt
 800a176:	4618      	movlt	r0, r3
 800a178:	e7a4      	b.n	800a0c4 <_printf_i+0x168>
 800a17a:	2301      	movs	r3, #1
 800a17c:	4632      	mov	r2, r6
 800a17e:	4649      	mov	r1, r9
 800a180:	4640      	mov	r0, r8
 800a182:	47d0      	blx	sl
 800a184:	3001      	adds	r0, #1
 800a186:	d09b      	beq.n	800a0c0 <_printf_i+0x164>
 800a188:	3501      	adds	r5, #1
 800a18a:	68e3      	ldr	r3, [r4, #12]
 800a18c:	9903      	ldr	r1, [sp, #12]
 800a18e:	1a5b      	subs	r3, r3, r1
 800a190:	42ab      	cmp	r3, r5
 800a192:	dcf2      	bgt.n	800a17a <_printf_i+0x21e>
 800a194:	e7eb      	b.n	800a16e <_printf_i+0x212>
 800a196:	2500      	movs	r5, #0
 800a198:	f104 0619 	add.w	r6, r4, #25
 800a19c:	e7f5      	b.n	800a18a <_printf_i+0x22e>
 800a19e:	bf00      	nop
 800a1a0:	0800f3c8 	.word	0x0800f3c8
 800a1a4:	0800f3d9 	.word	0x0800f3d9

0800a1a8 <iprintf>:
 800a1a8:	b40f      	push	{r0, r1, r2, r3}
 800a1aa:	4b0a      	ldr	r3, [pc, #40]	; (800a1d4 <iprintf+0x2c>)
 800a1ac:	b513      	push	{r0, r1, r4, lr}
 800a1ae:	681c      	ldr	r4, [r3, #0]
 800a1b0:	b124      	cbz	r4, 800a1bc <iprintf+0x14>
 800a1b2:	69a3      	ldr	r3, [r4, #24]
 800a1b4:	b913      	cbnz	r3, 800a1bc <iprintf+0x14>
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f001 f8fe 	bl	800b3b8 <__sinit>
 800a1bc:	ab05      	add	r3, sp, #20
 800a1be:	9a04      	ldr	r2, [sp, #16]
 800a1c0:	68a1      	ldr	r1, [r4, #8]
 800a1c2:	9301      	str	r3, [sp, #4]
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f001 fdd1 	bl	800bd6c <_vfiprintf_r>
 800a1ca:	b002      	add	sp, #8
 800a1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d0:	b004      	add	sp, #16
 800a1d2:	4770      	bx	lr
 800a1d4:	200008f4 	.word	0x200008f4

0800a1d8 <_puts_r>:
 800a1d8:	b570      	push	{r4, r5, r6, lr}
 800a1da:	460e      	mov	r6, r1
 800a1dc:	4605      	mov	r5, r0
 800a1de:	b118      	cbz	r0, 800a1e8 <_puts_r+0x10>
 800a1e0:	6983      	ldr	r3, [r0, #24]
 800a1e2:	b90b      	cbnz	r3, 800a1e8 <_puts_r+0x10>
 800a1e4:	f001 f8e8 	bl	800b3b8 <__sinit>
 800a1e8:	69ab      	ldr	r3, [r5, #24]
 800a1ea:	68ac      	ldr	r4, [r5, #8]
 800a1ec:	b913      	cbnz	r3, 800a1f4 <_puts_r+0x1c>
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f001 f8e2 	bl	800b3b8 <__sinit>
 800a1f4:	4b2c      	ldr	r3, [pc, #176]	; (800a2a8 <_puts_r+0xd0>)
 800a1f6:	429c      	cmp	r4, r3
 800a1f8:	d120      	bne.n	800a23c <_puts_r+0x64>
 800a1fa:	686c      	ldr	r4, [r5, #4]
 800a1fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1fe:	07db      	lsls	r3, r3, #31
 800a200:	d405      	bmi.n	800a20e <_puts_r+0x36>
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	0598      	lsls	r0, r3, #22
 800a206:	d402      	bmi.n	800a20e <_puts_r+0x36>
 800a208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a20a:	f001 f978 	bl	800b4fe <__retarget_lock_acquire_recursive>
 800a20e:	89a3      	ldrh	r3, [r4, #12]
 800a210:	0719      	lsls	r1, r3, #28
 800a212:	d51d      	bpl.n	800a250 <_puts_r+0x78>
 800a214:	6923      	ldr	r3, [r4, #16]
 800a216:	b1db      	cbz	r3, 800a250 <_puts_r+0x78>
 800a218:	3e01      	subs	r6, #1
 800a21a:	68a3      	ldr	r3, [r4, #8]
 800a21c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a220:	3b01      	subs	r3, #1
 800a222:	60a3      	str	r3, [r4, #8]
 800a224:	bb39      	cbnz	r1, 800a276 <_puts_r+0x9e>
 800a226:	2b00      	cmp	r3, #0
 800a228:	da38      	bge.n	800a29c <_puts_r+0xc4>
 800a22a:	4622      	mov	r2, r4
 800a22c:	210a      	movs	r1, #10
 800a22e:	4628      	mov	r0, r5
 800a230:	f000 f86c 	bl	800a30c <__swbuf_r>
 800a234:	3001      	adds	r0, #1
 800a236:	d011      	beq.n	800a25c <_puts_r+0x84>
 800a238:	250a      	movs	r5, #10
 800a23a:	e011      	b.n	800a260 <_puts_r+0x88>
 800a23c:	4b1b      	ldr	r3, [pc, #108]	; (800a2ac <_puts_r+0xd4>)
 800a23e:	429c      	cmp	r4, r3
 800a240:	d101      	bne.n	800a246 <_puts_r+0x6e>
 800a242:	68ac      	ldr	r4, [r5, #8]
 800a244:	e7da      	b.n	800a1fc <_puts_r+0x24>
 800a246:	4b1a      	ldr	r3, [pc, #104]	; (800a2b0 <_puts_r+0xd8>)
 800a248:	429c      	cmp	r4, r3
 800a24a:	bf08      	it	eq
 800a24c:	68ec      	ldreq	r4, [r5, #12]
 800a24e:	e7d5      	b.n	800a1fc <_puts_r+0x24>
 800a250:	4621      	mov	r1, r4
 800a252:	4628      	mov	r0, r5
 800a254:	f000 f8ac 	bl	800a3b0 <__swsetup_r>
 800a258:	2800      	cmp	r0, #0
 800a25a:	d0dd      	beq.n	800a218 <_puts_r+0x40>
 800a25c:	f04f 35ff 	mov.w	r5, #4294967295
 800a260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a262:	07da      	lsls	r2, r3, #31
 800a264:	d405      	bmi.n	800a272 <_puts_r+0x9a>
 800a266:	89a3      	ldrh	r3, [r4, #12]
 800a268:	059b      	lsls	r3, r3, #22
 800a26a:	d402      	bmi.n	800a272 <_puts_r+0x9a>
 800a26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a26e:	f001 f947 	bl	800b500 <__retarget_lock_release_recursive>
 800a272:	4628      	mov	r0, r5
 800a274:	bd70      	pop	{r4, r5, r6, pc}
 800a276:	2b00      	cmp	r3, #0
 800a278:	da04      	bge.n	800a284 <_puts_r+0xac>
 800a27a:	69a2      	ldr	r2, [r4, #24]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	dc06      	bgt.n	800a28e <_puts_r+0xb6>
 800a280:	290a      	cmp	r1, #10
 800a282:	d004      	beq.n	800a28e <_puts_r+0xb6>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	1c5a      	adds	r2, r3, #1
 800a288:	6022      	str	r2, [r4, #0]
 800a28a:	7019      	strb	r1, [r3, #0]
 800a28c:	e7c5      	b.n	800a21a <_puts_r+0x42>
 800a28e:	4622      	mov	r2, r4
 800a290:	4628      	mov	r0, r5
 800a292:	f000 f83b 	bl	800a30c <__swbuf_r>
 800a296:	3001      	adds	r0, #1
 800a298:	d1bf      	bne.n	800a21a <_puts_r+0x42>
 800a29a:	e7df      	b.n	800a25c <_puts_r+0x84>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	250a      	movs	r5, #10
 800a2a0:	1c5a      	adds	r2, r3, #1
 800a2a2:	6022      	str	r2, [r4, #0]
 800a2a4:	701d      	strb	r5, [r3, #0]
 800a2a6:	e7db      	b.n	800a260 <_puts_r+0x88>
 800a2a8:	0800f49c 	.word	0x0800f49c
 800a2ac:	0800f4bc 	.word	0x0800f4bc
 800a2b0:	0800f47c 	.word	0x0800f47c

0800a2b4 <puts>:
 800a2b4:	4b02      	ldr	r3, [pc, #8]	; (800a2c0 <puts+0xc>)
 800a2b6:	4601      	mov	r1, r0
 800a2b8:	6818      	ldr	r0, [r3, #0]
 800a2ba:	f7ff bf8d 	b.w	800a1d8 <_puts_r>
 800a2be:	bf00      	nop
 800a2c0:	200008f4 	.word	0x200008f4

0800a2c4 <_sbrk_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	4d06      	ldr	r5, [pc, #24]	; (800a2e0 <_sbrk_r+0x1c>)
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	602b      	str	r3, [r5, #0]
 800a2d0:	f7f7 f9a8 	bl	8001624 <_sbrk>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_sbrk_r+0x1a>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_sbrk_r+0x1a>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	2000161c 	.word	0x2000161c

0800a2e4 <strncmp>:
 800a2e4:	b510      	push	{r4, lr}
 800a2e6:	b17a      	cbz	r2, 800a308 <strncmp+0x24>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	3901      	subs	r1, #1
 800a2ec:	1884      	adds	r4, r0, r2
 800a2ee:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a2f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a2f6:	4290      	cmp	r0, r2
 800a2f8:	d101      	bne.n	800a2fe <strncmp+0x1a>
 800a2fa:	42a3      	cmp	r3, r4
 800a2fc:	d101      	bne.n	800a302 <strncmp+0x1e>
 800a2fe:	1a80      	subs	r0, r0, r2
 800a300:	bd10      	pop	{r4, pc}
 800a302:	2800      	cmp	r0, #0
 800a304:	d1f3      	bne.n	800a2ee <strncmp+0xa>
 800a306:	e7fa      	b.n	800a2fe <strncmp+0x1a>
 800a308:	4610      	mov	r0, r2
 800a30a:	e7f9      	b.n	800a300 <strncmp+0x1c>

0800a30c <__swbuf_r>:
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	460e      	mov	r6, r1
 800a310:	4614      	mov	r4, r2
 800a312:	4605      	mov	r5, r0
 800a314:	b118      	cbz	r0, 800a31e <__swbuf_r+0x12>
 800a316:	6983      	ldr	r3, [r0, #24]
 800a318:	b90b      	cbnz	r3, 800a31e <__swbuf_r+0x12>
 800a31a:	f001 f84d 	bl	800b3b8 <__sinit>
 800a31e:	4b21      	ldr	r3, [pc, #132]	; (800a3a4 <__swbuf_r+0x98>)
 800a320:	429c      	cmp	r4, r3
 800a322:	d12b      	bne.n	800a37c <__swbuf_r+0x70>
 800a324:	686c      	ldr	r4, [r5, #4]
 800a326:	69a3      	ldr	r3, [r4, #24]
 800a328:	60a3      	str	r3, [r4, #8]
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	071a      	lsls	r2, r3, #28
 800a32e:	d52f      	bpl.n	800a390 <__swbuf_r+0x84>
 800a330:	6923      	ldr	r3, [r4, #16]
 800a332:	b36b      	cbz	r3, 800a390 <__swbuf_r+0x84>
 800a334:	6923      	ldr	r3, [r4, #16]
 800a336:	6820      	ldr	r0, [r4, #0]
 800a338:	1ac0      	subs	r0, r0, r3
 800a33a:	6963      	ldr	r3, [r4, #20]
 800a33c:	b2f6      	uxtb	r6, r6
 800a33e:	4283      	cmp	r3, r0
 800a340:	4637      	mov	r7, r6
 800a342:	dc04      	bgt.n	800a34e <__swbuf_r+0x42>
 800a344:	4621      	mov	r1, r4
 800a346:	4628      	mov	r0, r5
 800a348:	f000 ffa2 	bl	800b290 <_fflush_r>
 800a34c:	bb30      	cbnz	r0, 800a39c <__swbuf_r+0x90>
 800a34e:	68a3      	ldr	r3, [r4, #8]
 800a350:	3b01      	subs	r3, #1
 800a352:	60a3      	str	r3, [r4, #8]
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	1c5a      	adds	r2, r3, #1
 800a358:	6022      	str	r2, [r4, #0]
 800a35a:	701e      	strb	r6, [r3, #0]
 800a35c:	6963      	ldr	r3, [r4, #20]
 800a35e:	3001      	adds	r0, #1
 800a360:	4283      	cmp	r3, r0
 800a362:	d004      	beq.n	800a36e <__swbuf_r+0x62>
 800a364:	89a3      	ldrh	r3, [r4, #12]
 800a366:	07db      	lsls	r3, r3, #31
 800a368:	d506      	bpl.n	800a378 <__swbuf_r+0x6c>
 800a36a:	2e0a      	cmp	r6, #10
 800a36c:	d104      	bne.n	800a378 <__swbuf_r+0x6c>
 800a36e:	4621      	mov	r1, r4
 800a370:	4628      	mov	r0, r5
 800a372:	f000 ff8d 	bl	800b290 <_fflush_r>
 800a376:	b988      	cbnz	r0, 800a39c <__swbuf_r+0x90>
 800a378:	4638      	mov	r0, r7
 800a37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a37c:	4b0a      	ldr	r3, [pc, #40]	; (800a3a8 <__swbuf_r+0x9c>)
 800a37e:	429c      	cmp	r4, r3
 800a380:	d101      	bne.n	800a386 <__swbuf_r+0x7a>
 800a382:	68ac      	ldr	r4, [r5, #8]
 800a384:	e7cf      	b.n	800a326 <__swbuf_r+0x1a>
 800a386:	4b09      	ldr	r3, [pc, #36]	; (800a3ac <__swbuf_r+0xa0>)
 800a388:	429c      	cmp	r4, r3
 800a38a:	bf08      	it	eq
 800a38c:	68ec      	ldreq	r4, [r5, #12]
 800a38e:	e7ca      	b.n	800a326 <__swbuf_r+0x1a>
 800a390:	4621      	mov	r1, r4
 800a392:	4628      	mov	r0, r5
 800a394:	f000 f80c 	bl	800a3b0 <__swsetup_r>
 800a398:	2800      	cmp	r0, #0
 800a39a:	d0cb      	beq.n	800a334 <__swbuf_r+0x28>
 800a39c:	f04f 37ff 	mov.w	r7, #4294967295
 800a3a0:	e7ea      	b.n	800a378 <__swbuf_r+0x6c>
 800a3a2:	bf00      	nop
 800a3a4:	0800f49c 	.word	0x0800f49c
 800a3a8:	0800f4bc 	.word	0x0800f4bc
 800a3ac:	0800f47c 	.word	0x0800f47c

0800a3b0 <__swsetup_r>:
 800a3b0:	4b32      	ldr	r3, [pc, #200]	; (800a47c <__swsetup_r+0xcc>)
 800a3b2:	b570      	push	{r4, r5, r6, lr}
 800a3b4:	681d      	ldr	r5, [r3, #0]
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	460c      	mov	r4, r1
 800a3ba:	b125      	cbz	r5, 800a3c6 <__swsetup_r+0x16>
 800a3bc:	69ab      	ldr	r3, [r5, #24]
 800a3be:	b913      	cbnz	r3, 800a3c6 <__swsetup_r+0x16>
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	f000 fff9 	bl	800b3b8 <__sinit>
 800a3c6:	4b2e      	ldr	r3, [pc, #184]	; (800a480 <__swsetup_r+0xd0>)
 800a3c8:	429c      	cmp	r4, r3
 800a3ca:	d10f      	bne.n	800a3ec <__swsetup_r+0x3c>
 800a3cc:	686c      	ldr	r4, [r5, #4]
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3d4:	0719      	lsls	r1, r3, #28
 800a3d6:	d42c      	bmi.n	800a432 <__swsetup_r+0x82>
 800a3d8:	06dd      	lsls	r5, r3, #27
 800a3da:	d411      	bmi.n	800a400 <__swsetup_r+0x50>
 800a3dc:	2309      	movs	r3, #9
 800a3de:	6033      	str	r3, [r6, #0]
 800a3e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3e4:	81a3      	strh	r3, [r4, #12]
 800a3e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ea:	e03e      	b.n	800a46a <__swsetup_r+0xba>
 800a3ec:	4b25      	ldr	r3, [pc, #148]	; (800a484 <__swsetup_r+0xd4>)
 800a3ee:	429c      	cmp	r4, r3
 800a3f0:	d101      	bne.n	800a3f6 <__swsetup_r+0x46>
 800a3f2:	68ac      	ldr	r4, [r5, #8]
 800a3f4:	e7eb      	b.n	800a3ce <__swsetup_r+0x1e>
 800a3f6:	4b24      	ldr	r3, [pc, #144]	; (800a488 <__swsetup_r+0xd8>)
 800a3f8:	429c      	cmp	r4, r3
 800a3fa:	bf08      	it	eq
 800a3fc:	68ec      	ldreq	r4, [r5, #12]
 800a3fe:	e7e6      	b.n	800a3ce <__swsetup_r+0x1e>
 800a400:	0758      	lsls	r0, r3, #29
 800a402:	d512      	bpl.n	800a42a <__swsetup_r+0x7a>
 800a404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a406:	b141      	cbz	r1, 800a41a <__swsetup_r+0x6a>
 800a408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a40c:	4299      	cmp	r1, r3
 800a40e:	d002      	beq.n	800a416 <__swsetup_r+0x66>
 800a410:	4630      	mov	r0, r6
 800a412:	f7ff f97f 	bl	8009714 <_free_r>
 800a416:	2300      	movs	r3, #0
 800a418:	6363      	str	r3, [r4, #52]	; 0x34
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a420:	81a3      	strh	r3, [r4, #12]
 800a422:	2300      	movs	r3, #0
 800a424:	6063      	str	r3, [r4, #4]
 800a426:	6923      	ldr	r3, [r4, #16]
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	f043 0308 	orr.w	r3, r3, #8
 800a430:	81a3      	strh	r3, [r4, #12]
 800a432:	6923      	ldr	r3, [r4, #16]
 800a434:	b94b      	cbnz	r3, 800a44a <__swsetup_r+0x9a>
 800a436:	89a3      	ldrh	r3, [r4, #12]
 800a438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a43c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a440:	d003      	beq.n	800a44a <__swsetup_r+0x9a>
 800a442:	4621      	mov	r1, r4
 800a444:	4630      	mov	r0, r6
 800a446:	f001 f881 	bl	800b54c <__smakebuf_r>
 800a44a:	89a0      	ldrh	r0, [r4, #12]
 800a44c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a450:	f010 0301 	ands.w	r3, r0, #1
 800a454:	d00a      	beq.n	800a46c <__swsetup_r+0xbc>
 800a456:	2300      	movs	r3, #0
 800a458:	60a3      	str	r3, [r4, #8]
 800a45a:	6963      	ldr	r3, [r4, #20]
 800a45c:	425b      	negs	r3, r3
 800a45e:	61a3      	str	r3, [r4, #24]
 800a460:	6923      	ldr	r3, [r4, #16]
 800a462:	b943      	cbnz	r3, 800a476 <__swsetup_r+0xc6>
 800a464:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a468:	d1ba      	bne.n	800a3e0 <__swsetup_r+0x30>
 800a46a:	bd70      	pop	{r4, r5, r6, pc}
 800a46c:	0781      	lsls	r1, r0, #30
 800a46e:	bf58      	it	pl
 800a470:	6963      	ldrpl	r3, [r4, #20]
 800a472:	60a3      	str	r3, [r4, #8]
 800a474:	e7f4      	b.n	800a460 <__swsetup_r+0xb0>
 800a476:	2000      	movs	r0, #0
 800a478:	e7f7      	b.n	800a46a <__swsetup_r+0xba>
 800a47a:	bf00      	nop
 800a47c:	200008f4 	.word	0x200008f4
 800a480:	0800f49c 	.word	0x0800f49c
 800a484:	0800f4bc 	.word	0x0800f4bc
 800a488:	0800f47c 	.word	0x0800f47c

0800a48c <quorem>:
 800a48c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a490:	6903      	ldr	r3, [r0, #16]
 800a492:	690c      	ldr	r4, [r1, #16]
 800a494:	42a3      	cmp	r3, r4
 800a496:	4607      	mov	r7, r0
 800a498:	f2c0 8081 	blt.w	800a59e <quorem+0x112>
 800a49c:	3c01      	subs	r4, #1
 800a49e:	f101 0814 	add.w	r8, r1, #20
 800a4a2:	f100 0514 	add.w	r5, r0, #20
 800a4a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4aa:	9301      	str	r3, [sp, #4]
 800a4ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4c4:	d331      	bcc.n	800a52a <quorem+0x9e>
 800a4c6:	f04f 0e00 	mov.w	lr, #0
 800a4ca:	4640      	mov	r0, r8
 800a4cc:	46ac      	mov	ip, r5
 800a4ce:	46f2      	mov	sl, lr
 800a4d0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4d4:	b293      	uxth	r3, r2
 800a4d6:	fb06 e303 	mla	r3, r6, r3, lr
 800a4da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	ebaa 0303 	sub.w	r3, sl, r3
 800a4e4:	f8dc a000 	ldr.w	sl, [ip]
 800a4e8:	0c12      	lsrs	r2, r2, #16
 800a4ea:	fa13 f38a 	uxtah	r3, r3, sl
 800a4ee:	fb06 e202 	mla	r2, r6, r2, lr
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	9b00      	ldr	r3, [sp, #0]
 800a4f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4fa:	b292      	uxth	r2, r2
 800a4fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a504:	f8bd 3000 	ldrh.w	r3, [sp]
 800a508:	4581      	cmp	r9, r0
 800a50a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a50e:	f84c 3b04 	str.w	r3, [ip], #4
 800a512:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a516:	d2db      	bcs.n	800a4d0 <quorem+0x44>
 800a518:	f855 300b 	ldr.w	r3, [r5, fp]
 800a51c:	b92b      	cbnz	r3, 800a52a <quorem+0x9e>
 800a51e:	9b01      	ldr	r3, [sp, #4]
 800a520:	3b04      	subs	r3, #4
 800a522:	429d      	cmp	r5, r3
 800a524:	461a      	mov	r2, r3
 800a526:	d32e      	bcc.n	800a586 <quorem+0xfa>
 800a528:	613c      	str	r4, [r7, #16]
 800a52a:	4638      	mov	r0, r7
 800a52c:	f001 fadc 	bl	800bae8 <__mcmp>
 800a530:	2800      	cmp	r0, #0
 800a532:	db24      	blt.n	800a57e <quorem+0xf2>
 800a534:	3601      	adds	r6, #1
 800a536:	4628      	mov	r0, r5
 800a538:	f04f 0c00 	mov.w	ip, #0
 800a53c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a540:	f8d0 e000 	ldr.w	lr, [r0]
 800a544:	b293      	uxth	r3, r2
 800a546:	ebac 0303 	sub.w	r3, ip, r3
 800a54a:	0c12      	lsrs	r2, r2, #16
 800a54c:	fa13 f38e 	uxtah	r3, r3, lr
 800a550:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a558:	b29b      	uxth	r3, r3
 800a55a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a55e:	45c1      	cmp	r9, r8
 800a560:	f840 3b04 	str.w	r3, [r0], #4
 800a564:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a568:	d2e8      	bcs.n	800a53c <quorem+0xb0>
 800a56a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a56e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a572:	b922      	cbnz	r2, 800a57e <quorem+0xf2>
 800a574:	3b04      	subs	r3, #4
 800a576:	429d      	cmp	r5, r3
 800a578:	461a      	mov	r2, r3
 800a57a:	d30a      	bcc.n	800a592 <quorem+0x106>
 800a57c:	613c      	str	r4, [r7, #16]
 800a57e:	4630      	mov	r0, r6
 800a580:	b003      	add	sp, #12
 800a582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a586:	6812      	ldr	r2, [r2, #0]
 800a588:	3b04      	subs	r3, #4
 800a58a:	2a00      	cmp	r2, #0
 800a58c:	d1cc      	bne.n	800a528 <quorem+0x9c>
 800a58e:	3c01      	subs	r4, #1
 800a590:	e7c7      	b.n	800a522 <quorem+0x96>
 800a592:	6812      	ldr	r2, [r2, #0]
 800a594:	3b04      	subs	r3, #4
 800a596:	2a00      	cmp	r2, #0
 800a598:	d1f0      	bne.n	800a57c <quorem+0xf0>
 800a59a:	3c01      	subs	r4, #1
 800a59c:	e7eb      	b.n	800a576 <quorem+0xea>
 800a59e:	2000      	movs	r0, #0
 800a5a0:	e7ee      	b.n	800a580 <quorem+0xf4>
 800a5a2:	0000      	movs	r0, r0
 800a5a4:	0000      	movs	r0, r0
	...

0800a5a8 <_dtoa_r>:
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	ed2d 8b04 	vpush	{d8-d9}
 800a5b0:	ec57 6b10 	vmov	r6, r7, d0
 800a5b4:	b093      	sub	sp, #76	; 0x4c
 800a5b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a5b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a5bc:	9106      	str	r1, [sp, #24]
 800a5be:	ee10 aa10 	vmov	sl, s0
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5c6:	930c      	str	r3, [sp, #48]	; 0x30
 800a5c8:	46bb      	mov	fp, r7
 800a5ca:	b975      	cbnz	r5, 800a5ea <_dtoa_r+0x42>
 800a5cc:	2010      	movs	r0, #16
 800a5ce:	f7f9 f9eb 	bl	80039a8 <__wrap_malloc>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	6260      	str	r0, [r4, #36]	; 0x24
 800a5d6:	b920      	cbnz	r0, 800a5e2 <_dtoa_r+0x3a>
 800a5d8:	4ba7      	ldr	r3, [pc, #668]	; (800a878 <_dtoa_r+0x2d0>)
 800a5da:	21ea      	movs	r1, #234	; 0xea
 800a5dc:	48a7      	ldr	r0, [pc, #668]	; (800a87c <_dtoa_r+0x2d4>)
 800a5de:	f001 fd4b 	bl	800c078 <__assert_func>
 800a5e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5e6:	6005      	str	r5, [r0, #0]
 800a5e8:	60c5      	str	r5, [r0, #12]
 800a5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5ec:	6819      	ldr	r1, [r3, #0]
 800a5ee:	b151      	cbz	r1, 800a606 <_dtoa_r+0x5e>
 800a5f0:	685a      	ldr	r2, [r3, #4]
 800a5f2:	604a      	str	r2, [r1, #4]
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	4093      	lsls	r3, r2
 800a5f8:	608b      	str	r3, [r1, #8]
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f001 f832 	bl	800b664 <_Bfree>
 800a600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	1e3b      	subs	r3, r7, #0
 800a608:	bfaa      	itet	ge
 800a60a:	2300      	movge	r3, #0
 800a60c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a610:	f8c8 3000 	strge.w	r3, [r8]
 800a614:	4b9a      	ldr	r3, [pc, #616]	; (800a880 <_dtoa_r+0x2d8>)
 800a616:	bfbc      	itt	lt
 800a618:	2201      	movlt	r2, #1
 800a61a:	f8c8 2000 	strlt.w	r2, [r8]
 800a61e:	ea33 030b 	bics.w	r3, r3, fp
 800a622:	d11b      	bne.n	800a65c <_dtoa_r+0xb4>
 800a624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a626:	f242 730f 	movw	r3, #9999	; 0x270f
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a630:	4333      	orrs	r3, r6
 800a632:	f000 8592 	beq.w	800b15a <_dtoa_r+0xbb2>
 800a636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a638:	b963      	cbnz	r3, 800a654 <_dtoa_r+0xac>
 800a63a:	4b92      	ldr	r3, [pc, #584]	; (800a884 <_dtoa_r+0x2dc>)
 800a63c:	e022      	b.n	800a684 <_dtoa_r+0xdc>
 800a63e:	4b92      	ldr	r3, [pc, #584]	; (800a888 <_dtoa_r+0x2e0>)
 800a640:	9301      	str	r3, [sp, #4]
 800a642:	3308      	adds	r3, #8
 800a644:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	9801      	ldr	r0, [sp, #4]
 800a64a:	b013      	add	sp, #76	; 0x4c
 800a64c:	ecbd 8b04 	vpop	{d8-d9}
 800a650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a654:	4b8b      	ldr	r3, [pc, #556]	; (800a884 <_dtoa_r+0x2dc>)
 800a656:	9301      	str	r3, [sp, #4]
 800a658:	3303      	adds	r3, #3
 800a65a:	e7f3      	b.n	800a644 <_dtoa_r+0x9c>
 800a65c:	2200      	movs	r2, #0
 800a65e:	2300      	movs	r3, #0
 800a660:	4650      	mov	r0, sl
 800a662:	4659      	mov	r1, fp
 800a664:	f7f6 fa30 	bl	8000ac8 <__aeabi_dcmpeq>
 800a668:	ec4b ab19 	vmov	d9, sl, fp
 800a66c:	4680      	mov	r8, r0
 800a66e:	b158      	cbz	r0, 800a688 <_dtoa_r+0xe0>
 800a670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a672:	2301      	movs	r3, #1
 800a674:	6013      	str	r3, [r2, #0]
 800a676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 856b 	beq.w	800b154 <_dtoa_r+0xbac>
 800a67e:	4883      	ldr	r0, [pc, #524]	; (800a88c <_dtoa_r+0x2e4>)
 800a680:	6018      	str	r0, [r3, #0]
 800a682:	1e43      	subs	r3, r0, #1
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	e7df      	b.n	800a648 <_dtoa_r+0xa0>
 800a688:	ec4b ab10 	vmov	d0, sl, fp
 800a68c:	aa10      	add	r2, sp, #64	; 0x40
 800a68e:	a911      	add	r1, sp, #68	; 0x44
 800a690:	4620      	mov	r0, r4
 800a692:	f001 facf 	bl	800bc34 <__d2b>
 800a696:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a69a:	ee08 0a10 	vmov	s16, r0
 800a69e:	2d00      	cmp	r5, #0
 800a6a0:	f000 8084 	beq.w	800a7ac <_dtoa_r+0x204>
 800a6a4:	ee19 3a90 	vmov	r3, s19
 800a6a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a6b0:	4656      	mov	r6, sl
 800a6b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a6b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a6be:	4b74      	ldr	r3, [pc, #464]	; (800a890 <_dtoa_r+0x2e8>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	f7f5 fddf 	bl	8000288 <__aeabi_dsub>
 800a6ca:	a365      	add	r3, pc, #404	; (adr r3, 800a860 <_dtoa_r+0x2b8>)
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	f7f5 ff92 	bl	80005f8 <__aeabi_dmul>
 800a6d4:	a364      	add	r3, pc, #400	; (adr r3, 800a868 <_dtoa_r+0x2c0>)
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	f7f5 fdd7 	bl	800028c <__adddf3>
 800a6de:	4606      	mov	r6, r0
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	460f      	mov	r7, r1
 800a6e4:	f7f5 ff1e 	bl	8000524 <__aeabi_i2d>
 800a6e8:	a361      	add	r3, pc, #388	; (adr r3, 800a870 <_dtoa_r+0x2c8>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	f7f5 ff83 	bl	80005f8 <__aeabi_dmul>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	4639      	mov	r1, r7
 800a6fa:	f7f5 fdc7 	bl	800028c <__adddf3>
 800a6fe:	4606      	mov	r6, r0
 800a700:	460f      	mov	r7, r1
 800a702:	f7f6 fa29 	bl	8000b58 <__aeabi_d2iz>
 800a706:	2200      	movs	r2, #0
 800a708:	9000      	str	r0, [sp, #0]
 800a70a:	2300      	movs	r3, #0
 800a70c:	4630      	mov	r0, r6
 800a70e:	4639      	mov	r1, r7
 800a710:	f7f6 f9e4 	bl	8000adc <__aeabi_dcmplt>
 800a714:	b150      	cbz	r0, 800a72c <_dtoa_r+0x184>
 800a716:	9800      	ldr	r0, [sp, #0]
 800a718:	f7f5 ff04 	bl	8000524 <__aeabi_i2d>
 800a71c:	4632      	mov	r2, r6
 800a71e:	463b      	mov	r3, r7
 800a720:	f7f6 f9d2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a724:	b910      	cbnz	r0, 800a72c <_dtoa_r+0x184>
 800a726:	9b00      	ldr	r3, [sp, #0]
 800a728:	3b01      	subs	r3, #1
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	9b00      	ldr	r3, [sp, #0]
 800a72e:	2b16      	cmp	r3, #22
 800a730:	d85a      	bhi.n	800a7e8 <_dtoa_r+0x240>
 800a732:	9a00      	ldr	r2, [sp, #0]
 800a734:	4b57      	ldr	r3, [pc, #348]	; (800a894 <_dtoa_r+0x2ec>)
 800a736:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73e:	ec51 0b19 	vmov	r0, r1, d9
 800a742:	f7f6 f9cb 	bl	8000adc <__aeabi_dcmplt>
 800a746:	2800      	cmp	r0, #0
 800a748:	d050      	beq.n	800a7ec <_dtoa_r+0x244>
 800a74a:	9b00      	ldr	r3, [sp, #0]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	2300      	movs	r3, #0
 800a752:	930b      	str	r3, [sp, #44]	; 0x2c
 800a754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a756:	1b5d      	subs	r5, r3, r5
 800a758:	1e6b      	subs	r3, r5, #1
 800a75a:	9305      	str	r3, [sp, #20]
 800a75c:	bf45      	ittet	mi
 800a75e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a762:	9304      	strmi	r3, [sp, #16]
 800a764:	2300      	movpl	r3, #0
 800a766:	2300      	movmi	r3, #0
 800a768:	bf4c      	ite	mi
 800a76a:	9305      	strmi	r3, [sp, #20]
 800a76c:	9304      	strpl	r3, [sp, #16]
 800a76e:	9b00      	ldr	r3, [sp, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	db3d      	blt.n	800a7f0 <_dtoa_r+0x248>
 800a774:	9b05      	ldr	r3, [sp, #20]
 800a776:	9a00      	ldr	r2, [sp, #0]
 800a778:	920a      	str	r2, [sp, #40]	; 0x28
 800a77a:	4413      	add	r3, r2
 800a77c:	9305      	str	r3, [sp, #20]
 800a77e:	2300      	movs	r3, #0
 800a780:	9307      	str	r3, [sp, #28]
 800a782:	9b06      	ldr	r3, [sp, #24]
 800a784:	2b09      	cmp	r3, #9
 800a786:	f200 8089 	bhi.w	800a89c <_dtoa_r+0x2f4>
 800a78a:	2b05      	cmp	r3, #5
 800a78c:	bfc4      	itt	gt
 800a78e:	3b04      	subgt	r3, #4
 800a790:	9306      	strgt	r3, [sp, #24]
 800a792:	9b06      	ldr	r3, [sp, #24]
 800a794:	f1a3 0302 	sub.w	r3, r3, #2
 800a798:	bfcc      	ite	gt
 800a79a:	2500      	movgt	r5, #0
 800a79c:	2501      	movle	r5, #1
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	f200 8087 	bhi.w	800a8b2 <_dtoa_r+0x30a>
 800a7a4:	e8df f003 	tbb	[pc, r3]
 800a7a8:	59383a2d 	.word	0x59383a2d
 800a7ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a7b0:	441d      	add	r5, r3
 800a7b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a7b6:	2b20      	cmp	r3, #32
 800a7b8:	bfc1      	itttt	gt
 800a7ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a7c2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a7c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a7ca:	bfda      	itte	le
 800a7cc:	f1c3 0320 	rsble	r3, r3, #32
 800a7d0:	fa06 f003 	lslle.w	r0, r6, r3
 800a7d4:	4318      	orrgt	r0, r3
 800a7d6:	f7f5 fe95 	bl	8000504 <__aeabi_ui2d>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4606      	mov	r6, r0
 800a7de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a7e2:	3d01      	subs	r5, #1
 800a7e4:	930e      	str	r3, [sp, #56]	; 0x38
 800a7e6:	e76a      	b.n	800a6be <_dtoa_r+0x116>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e7b2      	b.n	800a752 <_dtoa_r+0x1aa>
 800a7ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7ee:	e7b1      	b.n	800a754 <_dtoa_r+0x1ac>
 800a7f0:	9b04      	ldr	r3, [sp, #16]
 800a7f2:	9a00      	ldr	r2, [sp, #0]
 800a7f4:	1a9b      	subs	r3, r3, r2
 800a7f6:	9304      	str	r3, [sp, #16]
 800a7f8:	4253      	negs	r3, r2
 800a7fa:	9307      	str	r3, [sp, #28]
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a800:	e7bf      	b.n	800a782 <_dtoa_r+0x1da>
 800a802:	2300      	movs	r3, #0
 800a804:	9308      	str	r3, [sp, #32]
 800a806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dc55      	bgt.n	800a8b8 <_dtoa_r+0x310>
 800a80c:	2301      	movs	r3, #1
 800a80e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a812:	461a      	mov	r2, r3
 800a814:	9209      	str	r2, [sp, #36]	; 0x24
 800a816:	e00c      	b.n	800a832 <_dtoa_r+0x28a>
 800a818:	2301      	movs	r3, #1
 800a81a:	e7f3      	b.n	800a804 <_dtoa_r+0x25c>
 800a81c:	2300      	movs	r3, #0
 800a81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a820:	9308      	str	r3, [sp, #32]
 800a822:	9b00      	ldr	r3, [sp, #0]
 800a824:	4413      	add	r3, r2
 800a826:	9302      	str	r3, [sp, #8]
 800a828:	3301      	adds	r3, #1
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	9303      	str	r3, [sp, #12]
 800a82e:	bfb8      	it	lt
 800a830:	2301      	movlt	r3, #1
 800a832:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a834:	2200      	movs	r2, #0
 800a836:	6042      	str	r2, [r0, #4]
 800a838:	2204      	movs	r2, #4
 800a83a:	f102 0614 	add.w	r6, r2, #20
 800a83e:	429e      	cmp	r6, r3
 800a840:	6841      	ldr	r1, [r0, #4]
 800a842:	d93d      	bls.n	800a8c0 <_dtoa_r+0x318>
 800a844:	4620      	mov	r0, r4
 800a846:	f000 fecd 	bl	800b5e4 <_Balloc>
 800a84a:	9001      	str	r0, [sp, #4]
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d13b      	bne.n	800a8c8 <_dtoa_r+0x320>
 800a850:	4b11      	ldr	r3, [pc, #68]	; (800a898 <_dtoa_r+0x2f0>)
 800a852:	4602      	mov	r2, r0
 800a854:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a858:	e6c0      	b.n	800a5dc <_dtoa_r+0x34>
 800a85a:	2301      	movs	r3, #1
 800a85c:	e7df      	b.n	800a81e <_dtoa_r+0x276>
 800a85e:	bf00      	nop
 800a860:	636f4361 	.word	0x636f4361
 800a864:	3fd287a7 	.word	0x3fd287a7
 800a868:	8b60c8b3 	.word	0x8b60c8b3
 800a86c:	3fc68a28 	.word	0x3fc68a28
 800a870:	509f79fb 	.word	0x509f79fb
 800a874:	3fd34413 	.word	0x3fd34413
 800a878:	0800f3f7 	.word	0x0800f3f7
 800a87c:	0800f40e 	.word	0x0800f40e
 800a880:	7ff00000 	.word	0x7ff00000
 800a884:	0800f3f3 	.word	0x0800f3f3
 800a888:	0800f3ea 	.word	0x0800f3ea
 800a88c:	0800cac3 	.word	0x0800cac3
 800a890:	3ff80000 	.word	0x3ff80000
 800a894:	0800f560 	.word	0x0800f560
 800a898:	0800f469 	.word	0x0800f469
 800a89c:	2501      	movs	r5, #1
 800a89e:	2300      	movs	r3, #0
 800a8a0:	9306      	str	r3, [sp, #24]
 800a8a2:	9508      	str	r5, [sp, #32]
 800a8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	2312      	movs	r3, #18
 800a8b0:	e7b0      	b.n	800a814 <_dtoa_r+0x26c>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	9308      	str	r3, [sp, #32]
 800a8b6:	e7f5      	b.n	800a8a4 <_dtoa_r+0x2fc>
 800a8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8be:	e7b8      	b.n	800a832 <_dtoa_r+0x28a>
 800a8c0:	3101      	adds	r1, #1
 800a8c2:	6041      	str	r1, [r0, #4]
 800a8c4:	0052      	lsls	r2, r2, #1
 800a8c6:	e7b8      	b.n	800a83a <_dtoa_r+0x292>
 800a8c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8ca:	9a01      	ldr	r2, [sp, #4]
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	9b03      	ldr	r3, [sp, #12]
 800a8d0:	2b0e      	cmp	r3, #14
 800a8d2:	f200 809d 	bhi.w	800aa10 <_dtoa_r+0x468>
 800a8d6:	2d00      	cmp	r5, #0
 800a8d8:	f000 809a 	beq.w	800aa10 <_dtoa_r+0x468>
 800a8dc:	9b00      	ldr	r3, [sp, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dd32      	ble.n	800a948 <_dtoa_r+0x3a0>
 800a8e2:	4ab7      	ldr	r2, [pc, #732]	; (800abc0 <_dtoa_r+0x618>)
 800a8e4:	f003 030f 	and.w	r3, r3, #15
 800a8e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8f0:	9b00      	ldr	r3, [sp, #0]
 800a8f2:	05d8      	lsls	r0, r3, #23
 800a8f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a8f8:	d516      	bpl.n	800a928 <_dtoa_r+0x380>
 800a8fa:	4bb2      	ldr	r3, [pc, #712]	; (800abc4 <_dtoa_r+0x61c>)
 800a8fc:	ec51 0b19 	vmov	r0, r1, d9
 800a900:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a904:	f7f5 ffa2 	bl	800084c <__aeabi_ddiv>
 800a908:	f007 070f 	and.w	r7, r7, #15
 800a90c:	4682      	mov	sl, r0
 800a90e:	468b      	mov	fp, r1
 800a910:	2503      	movs	r5, #3
 800a912:	4eac      	ldr	r6, [pc, #688]	; (800abc4 <_dtoa_r+0x61c>)
 800a914:	b957      	cbnz	r7, 800a92c <_dtoa_r+0x384>
 800a916:	4642      	mov	r2, r8
 800a918:	464b      	mov	r3, r9
 800a91a:	4650      	mov	r0, sl
 800a91c:	4659      	mov	r1, fp
 800a91e:	f7f5 ff95 	bl	800084c <__aeabi_ddiv>
 800a922:	4682      	mov	sl, r0
 800a924:	468b      	mov	fp, r1
 800a926:	e028      	b.n	800a97a <_dtoa_r+0x3d2>
 800a928:	2502      	movs	r5, #2
 800a92a:	e7f2      	b.n	800a912 <_dtoa_r+0x36a>
 800a92c:	07f9      	lsls	r1, r7, #31
 800a92e:	d508      	bpl.n	800a942 <_dtoa_r+0x39a>
 800a930:	4640      	mov	r0, r8
 800a932:	4649      	mov	r1, r9
 800a934:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a938:	f7f5 fe5e 	bl	80005f8 <__aeabi_dmul>
 800a93c:	3501      	adds	r5, #1
 800a93e:	4680      	mov	r8, r0
 800a940:	4689      	mov	r9, r1
 800a942:	107f      	asrs	r7, r7, #1
 800a944:	3608      	adds	r6, #8
 800a946:	e7e5      	b.n	800a914 <_dtoa_r+0x36c>
 800a948:	f000 809b 	beq.w	800aa82 <_dtoa_r+0x4da>
 800a94c:	9b00      	ldr	r3, [sp, #0]
 800a94e:	4f9d      	ldr	r7, [pc, #628]	; (800abc4 <_dtoa_r+0x61c>)
 800a950:	425e      	negs	r6, r3
 800a952:	4b9b      	ldr	r3, [pc, #620]	; (800abc0 <_dtoa_r+0x618>)
 800a954:	f006 020f 	and.w	r2, r6, #15
 800a958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	ec51 0b19 	vmov	r0, r1, d9
 800a964:	f7f5 fe48 	bl	80005f8 <__aeabi_dmul>
 800a968:	1136      	asrs	r6, r6, #4
 800a96a:	4682      	mov	sl, r0
 800a96c:	468b      	mov	fp, r1
 800a96e:	2300      	movs	r3, #0
 800a970:	2502      	movs	r5, #2
 800a972:	2e00      	cmp	r6, #0
 800a974:	d17a      	bne.n	800aa6c <_dtoa_r+0x4c4>
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1d3      	bne.n	800a922 <_dtoa_r+0x37a>
 800a97a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f000 8082 	beq.w	800aa86 <_dtoa_r+0x4de>
 800a982:	4b91      	ldr	r3, [pc, #580]	; (800abc8 <_dtoa_r+0x620>)
 800a984:	2200      	movs	r2, #0
 800a986:	4650      	mov	r0, sl
 800a988:	4659      	mov	r1, fp
 800a98a:	f7f6 f8a7 	bl	8000adc <__aeabi_dcmplt>
 800a98e:	2800      	cmp	r0, #0
 800a990:	d079      	beq.n	800aa86 <_dtoa_r+0x4de>
 800a992:	9b03      	ldr	r3, [sp, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d076      	beq.n	800aa86 <_dtoa_r+0x4de>
 800a998:	9b02      	ldr	r3, [sp, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	dd36      	ble.n	800aa0c <_dtoa_r+0x464>
 800a99e:	9b00      	ldr	r3, [sp, #0]
 800a9a0:	4650      	mov	r0, sl
 800a9a2:	4659      	mov	r1, fp
 800a9a4:	1e5f      	subs	r7, r3, #1
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	4b88      	ldr	r3, [pc, #544]	; (800abcc <_dtoa_r+0x624>)
 800a9aa:	f7f5 fe25 	bl	80005f8 <__aeabi_dmul>
 800a9ae:	9e02      	ldr	r6, [sp, #8]
 800a9b0:	4682      	mov	sl, r0
 800a9b2:	468b      	mov	fp, r1
 800a9b4:	3501      	adds	r5, #1
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f7f5 fdb4 	bl	8000524 <__aeabi_i2d>
 800a9bc:	4652      	mov	r2, sl
 800a9be:	465b      	mov	r3, fp
 800a9c0:	f7f5 fe1a 	bl	80005f8 <__aeabi_dmul>
 800a9c4:	4b82      	ldr	r3, [pc, #520]	; (800abd0 <_dtoa_r+0x628>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f7f5 fc60 	bl	800028c <__adddf3>
 800a9cc:	46d0      	mov	r8, sl
 800a9ce:	46d9      	mov	r9, fp
 800a9d0:	4682      	mov	sl, r0
 800a9d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a9d6:	2e00      	cmp	r6, #0
 800a9d8:	d158      	bne.n	800aa8c <_dtoa_r+0x4e4>
 800a9da:	4b7e      	ldr	r3, [pc, #504]	; (800abd4 <_dtoa_r+0x62c>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	4640      	mov	r0, r8
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	f7f5 fc51 	bl	8000288 <__aeabi_dsub>
 800a9e6:	4652      	mov	r2, sl
 800a9e8:	465b      	mov	r3, fp
 800a9ea:	4680      	mov	r8, r0
 800a9ec:	4689      	mov	r9, r1
 800a9ee:	f7f6 f893 	bl	8000b18 <__aeabi_dcmpgt>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	f040 8295 	bne.w	800af22 <_dtoa_r+0x97a>
 800a9f8:	4652      	mov	r2, sl
 800a9fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a9fe:	4640      	mov	r0, r8
 800aa00:	4649      	mov	r1, r9
 800aa02:	f7f6 f86b 	bl	8000adc <__aeabi_dcmplt>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	f040 8289 	bne.w	800af1e <_dtoa_r+0x976>
 800aa0c:	ec5b ab19 	vmov	sl, fp, d9
 800aa10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f2c0 8148 	blt.w	800aca8 <_dtoa_r+0x700>
 800aa18:	9a00      	ldr	r2, [sp, #0]
 800aa1a:	2a0e      	cmp	r2, #14
 800aa1c:	f300 8144 	bgt.w	800aca8 <_dtoa_r+0x700>
 800aa20:	4b67      	ldr	r3, [pc, #412]	; (800abc0 <_dtoa_r+0x618>)
 800aa22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa26:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f280 80d5 	bge.w	800abdc <_dtoa_r+0x634>
 800aa32:	9b03      	ldr	r3, [sp, #12]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f300 80d1 	bgt.w	800abdc <_dtoa_r+0x634>
 800aa3a:	f040 826f 	bne.w	800af1c <_dtoa_r+0x974>
 800aa3e:	4b65      	ldr	r3, [pc, #404]	; (800abd4 <_dtoa_r+0x62c>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	4640      	mov	r0, r8
 800aa44:	4649      	mov	r1, r9
 800aa46:	f7f5 fdd7 	bl	80005f8 <__aeabi_dmul>
 800aa4a:	4652      	mov	r2, sl
 800aa4c:	465b      	mov	r3, fp
 800aa4e:	f7f6 f859 	bl	8000b04 <__aeabi_dcmpge>
 800aa52:	9e03      	ldr	r6, [sp, #12]
 800aa54:	4637      	mov	r7, r6
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f040 8245 	bne.w	800aee6 <_dtoa_r+0x93e>
 800aa5c:	9d01      	ldr	r5, [sp, #4]
 800aa5e:	2331      	movs	r3, #49	; 0x31
 800aa60:	f805 3b01 	strb.w	r3, [r5], #1
 800aa64:	9b00      	ldr	r3, [sp, #0]
 800aa66:	3301      	adds	r3, #1
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	e240      	b.n	800aeee <_dtoa_r+0x946>
 800aa6c:	07f2      	lsls	r2, r6, #31
 800aa6e:	d505      	bpl.n	800aa7c <_dtoa_r+0x4d4>
 800aa70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa74:	f7f5 fdc0 	bl	80005f8 <__aeabi_dmul>
 800aa78:	3501      	adds	r5, #1
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	1076      	asrs	r6, r6, #1
 800aa7e:	3708      	adds	r7, #8
 800aa80:	e777      	b.n	800a972 <_dtoa_r+0x3ca>
 800aa82:	2502      	movs	r5, #2
 800aa84:	e779      	b.n	800a97a <_dtoa_r+0x3d2>
 800aa86:	9f00      	ldr	r7, [sp, #0]
 800aa88:	9e03      	ldr	r6, [sp, #12]
 800aa8a:	e794      	b.n	800a9b6 <_dtoa_r+0x40e>
 800aa8c:	9901      	ldr	r1, [sp, #4]
 800aa8e:	4b4c      	ldr	r3, [pc, #304]	; (800abc0 <_dtoa_r+0x618>)
 800aa90:	4431      	add	r1, r6
 800aa92:	910d      	str	r1, [sp, #52]	; 0x34
 800aa94:	9908      	ldr	r1, [sp, #32]
 800aa96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa9e:	2900      	cmp	r1, #0
 800aaa0:	d043      	beq.n	800ab2a <_dtoa_r+0x582>
 800aaa2:	494d      	ldr	r1, [pc, #308]	; (800abd8 <_dtoa_r+0x630>)
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f7f5 fed1 	bl	800084c <__aeabi_ddiv>
 800aaaa:	4652      	mov	r2, sl
 800aaac:	465b      	mov	r3, fp
 800aaae:	f7f5 fbeb 	bl	8000288 <__aeabi_dsub>
 800aab2:	9d01      	ldr	r5, [sp, #4]
 800aab4:	4682      	mov	sl, r0
 800aab6:	468b      	mov	fp, r1
 800aab8:	4649      	mov	r1, r9
 800aaba:	4640      	mov	r0, r8
 800aabc:	f7f6 f84c 	bl	8000b58 <__aeabi_d2iz>
 800aac0:	4606      	mov	r6, r0
 800aac2:	f7f5 fd2f 	bl	8000524 <__aeabi_i2d>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4640      	mov	r0, r8
 800aacc:	4649      	mov	r1, r9
 800aace:	f7f5 fbdb 	bl	8000288 <__aeabi_dsub>
 800aad2:	3630      	adds	r6, #48	; 0x30
 800aad4:	f805 6b01 	strb.w	r6, [r5], #1
 800aad8:	4652      	mov	r2, sl
 800aada:	465b      	mov	r3, fp
 800aadc:	4680      	mov	r8, r0
 800aade:	4689      	mov	r9, r1
 800aae0:	f7f5 fffc 	bl	8000adc <__aeabi_dcmplt>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d163      	bne.n	800abb0 <_dtoa_r+0x608>
 800aae8:	4642      	mov	r2, r8
 800aaea:	464b      	mov	r3, r9
 800aaec:	4936      	ldr	r1, [pc, #216]	; (800abc8 <_dtoa_r+0x620>)
 800aaee:	2000      	movs	r0, #0
 800aaf0:	f7f5 fbca 	bl	8000288 <__aeabi_dsub>
 800aaf4:	4652      	mov	r2, sl
 800aaf6:	465b      	mov	r3, fp
 800aaf8:	f7f5 fff0 	bl	8000adc <__aeabi_dcmplt>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	f040 80b5 	bne.w	800ac6c <_dtoa_r+0x6c4>
 800ab02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab04:	429d      	cmp	r5, r3
 800ab06:	d081      	beq.n	800aa0c <_dtoa_r+0x464>
 800ab08:	4b30      	ldr	r3, [pc, #192]	; (800abcc <_dtoa_r+0x624>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	4650      	mov	r0, sl
 800ab0e:	4659      	mov	r1, fp
 800ab10:	f7f5 fd72 	bl	80005f8 <__aeabi_dmul>
 800ab14:	4b2d      	ldr	r3, [pc, #180]	; (800abcc <_dtoa_r+0x624>)
 800ab16:	4682      	mov	sl, r0
 800ab18:	468b      	mov	fp, r1
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f7f5 fd6a 	bl	80005f8 <__aeabi_dmul>
 800ab24:	4680      	mov	r8, r0
 800ab26:	4689      	mov	r9, r1
 800ab28:	e7c6      	b.n	800aab8 <_dtoa_r+0x510>
 800ab2a:	4650      	mov	r0, sl
 800ab2c:	4659      	mov	r1, fp
 800ab2e:	f7f5 fd63 	bl	80005f8 <__aeabi_dmul>
 800ab32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab34:	9d01      	ldr	r5, [sp, #4]
 800ab36:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab38:	4682      	mov	sl, r0
 800ab3a:	468b      	mov	fp, r1
 800ab3c:	4649      	mov	r1, r9
 800ab3e:	4640      	mov	r0, r8
 800ab40:	f7f6 f80a 	bl	8000b58 <__aeabi_d2iz>
 800ab44:	4606      	mov	r6, r0
 800ab46:	f7f5 fced 	bl	8000524 <__aeabi_i2d>
 800ab4a:	3630      	adds	r6, #48	; 0x30
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	4640      	mov	r0, r8
 800ab52:	4649      	mov	r1, r9
 800ab54:	f7f5 fb98 	bl	8000288 <__aeabi_dsub>
 800ab58:	f805 6b01 	strb.w	r6, [r5], #1
 800ab5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab5e:	429d      	cmp	r5, r3
 800ab60:	4680      	mov	r8, r0
 800ab62:	4689      	mov	r9, r1
 800ab64:	f04f 0200 	mov.w	r2, #0
 800ab68:	d124      	bne.n	800abb4 <_dtoa_r+0x60c>
 800ab6a:	4b1b      	ldr	r3, [pc, #108]	; (800abd8 <_dtoa_r+0x630>)
 800ab6c:	4650      	mov	r0, sl
 800ab6e:	4659      	mov	r1, fp
 800ab70:	f7f5 fb8c 	bl	800028c <__adddf3>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	4640      	mov	r0, r8
 800ab7a:	4649      	mov	r1, r9
 800ab7c:	f7f5 ffcc 	bl	8000b18 <__aeabi_dcmpgt>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d173      	bne.n	800ac6c <_dtoa_r+0x6c4>
 800ab84:	4652      	mov	r2, sl
 800ab86:	465b      	mov	r3, fp
 800ab88:	4913      	ldr	r1, [pc, #76]	; (800abd8 <_dtoa_r+0x630>)
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	f7f5 fb7c 	bl	8000288 <__aeabi_dsub>
 800ab90:	4602      	mov	r2, r0
 800ab92:	460b      	mov	r3, r1
 800ab94:	4640      	mov	r0, r8
 800ab96:	4649      	mov	r1, r9
 800ab98:	f7f5 ffa0 	bl	8000adc <__aeabi_dcmplt>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	f43f af35 	beq.w	800aa0c <_dtoa_r+0x464>
 800aba2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aba4:	1e6b      	subs	r3, r5, #1
 800aba6:	930f      	str	r3, [sp, #60]	; 0x3c
 800aba8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abac:	2b30      	cmp	r3, #48	; 0x30
 800abae:	d0f8      	beq.n	800aba2 <_dtoa_r+0x5fa>
 800abb0:	9700      	str	r7, [sp, #0]
 800abb2:	e049      	b.n	800ac48 <_dtoa_r+0x6a0>
 800abb4:	4b05      	ldr	r3, [pc, #20]	; (800abcc <_dtoa_r+0x624>)
 800abb6:	f7f5 fd1f 	bl	80005f8 <__aeabi_dmul>
 800abba:	4680      	mov	r8, r0
 800abbc:	4689      	mov	r9, r1
 800abbe:	e7bd      	b.n	800ab3c <_dtoa_r+0x594>
 800abc0:	0800f560 	.word	0x0800f560
 800abc4:	0800f538 	.word	0x0800f538
 800abc8:	3ff00000 	.word	0x3ff00000
 800abcc:	40240000 	.word	0x40240000
 800abd0:	401c0000 	.word	0x401c0000
 800abd4:	40140000 	.word	0x40140000
 800abd8:	3fe00000 	.word	0x3fe00000
 800abdc:	9d01      	ldr	r5, [sp, #4]
 800abde:	4656      	mov	r6, sl
 800abe0:	465f      	mov	r7, fp
 800abe2:	4642      	mov	r2, r8
 800abe4:	464b      	mov	r3, r9
 800abe6:	4630      	mov	r0, r6
 800abe8:	4639      	mov	r1, r7
 800abea:	f7f5 fe2f 	bl	800084c <__aeabi_ddiv>
 800abee:	f7f5 ffb3 	bl	8000b58 <__aeabi_d2iz>
 800abf2:	4682      	mov	sl, r0
 800abf4:	f7f5 fc96 	bl	8000524 <__aeabi_i2d>
 800abf8:	4642      	mov	r2, r8
 800abfa:	464b      	mov	r3, r9
 800abfc:	f7f5 fcfc 	bl	80005f8 <__aeabi_dmul>
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	4630      	mov	r0, r6
 800ac06:	4639      	mov	r1, r7
 800ac08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ac0c:	f7f5 fb3c 	bl	8000288 <__aeabi_dsub>
 800ac10:	f805 6b01 	strb.w	r6, [r5], #1
 800ac14:	9e01      	ldr	r6, [sp, #4]
 800ac16:	9f03      	ldr	r7, [sp, #12]
 800ac18:	1bae      	subs	r6, r5, r6
 800ac1a:	42b7      	cmp	r7, r6
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	d135      	bne.n	800ac8e <_dtoa_r+0x6e6>
 800ac22:	f7f5 fb33 	bl	800028c <__adddf3>
 800ac26:	4642      	mov	r2, r8
 800ac28:	464b      	mov	r3, r9
 800ac2a:	4606      	mov	r6, r0
 800ac2c:	460f      	mov	r7, r1
 800ac2e:	f7f5 ff73 	bl	8000b18 <__aeabi_dcmpgt>
 800ac32:	b9d0      	cbnz	r0, 800ac6a <_dtoa_r+0x6c2>
 800ac34:	4642      	mov	r2, r8
 800ac36:	464b      	mov	r3, r9
 800ac38:	4630      	mov	r0, r6
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	f7f5 ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac40:	b110      	cbz	r0, 800ac48 <_dtoa_r+0x6a0>
 800ac42:	f01a 0f01 	tst.w	sl, #1
 800ac46:	d110      	bne.n	800ac6a <_dtoa_r+0x6c2>
 800ac48:	4620      	mov	r0, r4
 800ac4a:	ee18 1a10 	vmov	r1, s16
 800ac4e:	f000 fd09 	bl	800b664 <_Bfree>
 800ac52:	2300      	movs	r3, #0
 800ac54:	9800      	ldr	r0, [sp, #0]
 800ac56:	702b      	strb	r3, [r5, #0]
 800ac58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	6018      	str	r0, [r3, #0]
 800ac5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f43f acf1 	beq.w	800a648 <_dtoa_r+0xa0>
 800ac66:	601d      	str	r5, [r3, #0]
 800ac68:	e4ee      	b.n	800a648 <_dtoa_r+0xa0>
 800ac6a:	9f00      	ldr	r7, [sp, #0]
 800ac6c:	462b      	mov	r3, r5
 800ac6e:	461d      	mov	r5, r3
 800ac70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac74:	2a39      	cmp	r2, #57	; 0x39
 800ac76:	d106      	bne.n	800ac86 <_dtoa_r+0x6de>
 800ac78:	9a01      	ldr	r2, [sp, #4]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d1f7      	bne.n	800ac6e <_dtoa_r+0x6c6>
 800ac7e:	9901      	ldr	r1, [sp, #4]
 800ac80:	2230      	movs	r2, #48	; 0x30
 800ac82:	3701      	adds	r7, #1
 800ac84:	700a      	strb	r2, [r1, #0]
 800ac86:	781a      	ldrb	r2, [r3, #0]
 800ac88:	3201      	adds	r2, #1
 800ac8a:	701a      	strb	r2, [r3, #0]
 800ac8c:	e790      	b.n	800abb0 <_dtoa_r+0x608>
 800ac8e:	4ba6      	ldr	r3, [pc, #664]	; (800af28 <_dtoa_r+0x980>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	f7f5 fcb1 	bl	80005f8 <__aeabi_dmul>
 800ac96:	2200      	movs	r2, #0
 800ac98:	2300      	movs	r3, #0
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460f      	mov	r7, r1
 800ac9e:	f7f5 ff13 	bl	8000ac8 <__aeabi_dcmpeq>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d09d      	beq.n	800abe2 <_dtoa_r+0x63a>
 800aca6:	e7cf      	b.n	800ac48 <_dtoa_r+0x6a0>
 800aca8:	9a08      	ldr	r2, [sp, #32]
 800acaa:	2a00      	cmp	r2, #0
 800acac:	f000 80d7 	beq.w	800ae5e <_dtoa_r+0x8b6>
 800acb0:	9a06      	ldr	r2, [sp, #24]
 800acb2:	2a01      	cmp	r2, #1
 800acb4:	f300 80ba 	bgt.w	800ae2c <_dtoa_r+0x884>
 800acb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acba:	2a00      	cmp	r2, #0
 800acbc:	f000 80b2 	beq.w	800ae24 <_dtoa_r+0x87c>
 800acc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acc4:	9e07      	ldr	r6, [sp, #28]
 800acc6:	9d04      	ldr	r5, [sp, #16]
 800acc8:	9a04      	ldr	r2, [sp, #16]
 800acca:	441a      	add	r2, r3
 800accc:	9204      	str	r2, [sp, #16]
 800acce:	9a05      	ldr	r2, [sp, #20]
 800acd0:	2101      	movs	r1, #1
 800acd2:	441a      	add	r2, r3
 800acd4:	4620      	mov	r0, r4
 800acd6:	9205      	str	r2, [sp, #20]
 800acd8:	f000 fd7c 	bl	800b7d4 <__i2b>
 800acdc:	4607      	mov	r7, r0
 800acde:	2d00      	cmp	r5, #0
 800ace0:	dd0c      	ble.n	800acfc <_dtoa_r+0x754>
 800ace2:	9b05      	ldr	r3, [sp, #20]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	dd09      	ble.n	800acfc <_dtoa_r+0x754>
 800ace8:	42ab      	cmp	r3, r5
 800acea:	9a04      	ldr	r2, [sp, #16]
 800acec:	bfa8      	it	ge
 800acee:	462b      	movge	r3, r5
 800acf0:	1ad2      	subs	r2, r2, r3
 800acf2:	9204      	str	r2, [sp, #16]
 800acf4:	9a05      	ldr	r2, [sp, #20]
 800acf6:	1aed      	subs	r5, r5, r3
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	9305      	str	r3, [sp, #20]
 800acfc:	9b07      	ldr	r3, [sp, #28]
 800acfe:	b31b      	cbz	r3, 800ad48 <_dtoa_r+0x7a0>
 800ad00:	9b08      	ldr	r3, [sp, #32]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 80af 	beq.w	800ae66 <_dtoa_r+0x8be>
 800ad08:	2e00      	cmp	r6, #0
 800ad0a:	dd13      	ble.n	800ad34 <_dtoa_r+0x78c>
 800ad0c:	4639      	mov	r1, r7
 800ad0e:	4632      	mov	r2, r6
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 fe1f 	bl	800b954 <__pow5mult>
 800ad16:	ee18 2a10 	vmov	r2, s16
 800ad1a:	4601      	mov	r1, r0
 800ad1c:	4607      	mov	r7, r0
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f000 fd6e 	bl	800b800 <__multiply>
 800ad24:	ee18 1a10 	vmov	r1, s16
 800ad28:	4680      	mov	r8, r0
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 fc9a 	bl	800b664 <_Bfree>
 800ad30:	ee08 8a10 	vmov	s16, r8
 800ad34:	9b07      	ldr	r3, [sp, #28]
 800ad36:	1b9a      	subs	r2, r3, r6
 800ad38:	d006      	beq.n	800ad48 <_dtoa_r+0x7a0>
 800ad3a:	ee18 1a10 	vmov	r1, s16
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 fe08 	bl	800b954 <__pow5mult>
 800ad44:	ee08 0a10 	vmov	s16, r0
 800ad48:	2101      	movs	r1, #1
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 fd42 	bl	800b7d4 <__i2b>
 800ad50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	4606      	mov	r6, r0
 800ad56:	f340 8088 	ble.w	800ae6a <_dtoa_r+0x8c2>
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	4601      	mov	r1, r0
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f000 fdf8 	bl	800b954 <__pow5mult>
 800ad64:	9b06      	ldr	r3, [sp, #24]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	4606      	mov	r6, r0
 800ad6a:	f340 8081 	ble.w	800ae70 <_dtoa_r+0x8c8>
 800ad6e:	f04f 0800 	mov.w	r8, #0
 800ad72:	6933      	ldr	r3, [r6, #16]
 800ad74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad78:	6918      	ldr	r0, [r3, #16]
 800ad7a:	f000 fcdb 	bl	800b734 <__hi0bits>
 800ad7e:	f1c0 0020 	rsb	r0, r0, #32
 800ad82:	9b05      	ldr	r3, [sp, #20]
 800ad84:	4418      	add	r0, r3
 800ad86:	f010 001f 	ands.w	r0, r0, #31
 800ad8a:	f000 8092 	beq.w	800aeb2 <_dtoa_r+0x90a>
 800ad8e:	f1c0 0320 	rsb	r3, r0, #32
 800ad92:	2b04      	cmp	r3, #4
 800ad94:	f340 808a 	ble.w	800aeac <_dtoa_r+0x904>
 800ad98:	f1c0 001c 	rsb	r0, r0, #28
 800ad9c:	9b04      	ldr	r3, [sp, #16]
 800ad9e:	4403      	add	r3, r0
 800ada0:	9304      	str	r3, [sp, #16]
 800ada2:	9b05      	ldr	r3, [sp, #20]
 800ada4:	4403      	add	r3, r0
 800ada6:	4405      	add	r5, r0
 800ada8:	9305      	str	r3, [sp, #20]
 800adaa:	9b04      	ldr	r3, [sp, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	dd07      	ble.n	800adc0 <_dtoa_r+0x818>
 800adb0:	ee18 1a10 	vmov	r1, s16
 800adb4:	461a      	mov	r2, r3
 800adb6:	4620      	mov	r0, r4
 800adb8:	f000 fe26 	bl	800ba08 <__lshift>
 800adbc:	ee08 0a10 	vmov	s16, r0
 800adc0:	9b05      	ldr	r3, [sp, #20]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	dd05      	ble.n	800add2 <_dtoa_r+0x82a>
 800adc6:	4631      	mov	r1, r6
 800adc8:	461a      	mov	r2, r3
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 fe1c 	bl	800ba08 <__lshift>
 800add0:	4606      	mov	r6, r0
 800add2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800add4:	2b00      	cmp	r3, #0
 800add6:	d06e      	beq.n	800aeb6 <_dtoa_r+0x90e>
 800add8:	ee18 0a10 	vmov	r0, s16
 800addc:	4631      	mov	r1, r6
 800adde:	f000 fe83 	bl	800bae8 <__mcmp>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	da67      	bge.n	800aeb6 <_dtoa_r+0x90e>
 800ade6:	9b00      	ldr	r3, [sp, #0]
 800ade8:	3b01      	subs	r3, #1
 800adea:	ee18 1a10 	vmov	r1, s16
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	220a      	movs	r2, #10
 800adf2:	2300      	movs	r3, #0
 800adf4:	4620      	mov	r0, r4
 800adf6:	f000 fc57 	bl	800b6a8 <__multadd>
 800adfa:	9b08      	ldr	r3, [sp, #32]
 800adfc:	ee08 0a10 	vmov	s16, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 81b1 	beq.w	800b168 <_dtoa_r+0xbc0>
 800ae06:	2300      	movs	r3, #0
 800ae08:	4639      	mov	r1, r7
 800ae0a:	220a      	movs	r2, #10
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f000 fc4b 	bl	800b6a8 <__multadd>
 800ae12:	9b02      	ldr	r3, [sp, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	4607      	mov	r7, r0
 800ae18:	f300 808e 	bgt.w	800af38 <_dtoa_r+0x990>
 800ae1c:	9b06      	ldr	r3, [sp, #24]
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	dc51      	bgt.n	800aec6 <_dtoa_r+0x91e>
 800ae22:	e089      	b.n	800af38 <_dtoa_r+0x990>
 800ae24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae2a:	e74b      	b.n	800acc4 <_dtoa_r+0x71c>
 800ae2c:	9b03      	ldr	r3, [sp, #12]
 800ae2e:	1e5e      	subs	r6, r3, #1
 800ae30:	9b07      	ldr	r3, [sp, #28]
 800ae32:	42b3      	cmp	r3, r6
 800ae34:	bfbf      	itttt	lt
 800ae36:	9b07      	ldrlt	r3, [sp, #28]
 800ae38:	9607      	strlt	r6, [sp, #28]
 800ae3a:	1af2      	sublt	r2, r6, r3
 800ae3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae3e:	bfb6      	itet	lt
 800ae40:	189b      	addlt	r3, r3, r2
 800ae42:	1b9e      	subge	r6, r3, r6
 800ae44:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ae46:	9b03      	ldr	r3, [sp, #12]
 800ae48:	bfb8      	it	lt
 800ae4a:	2600      	movlt	r6, #0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	bfb7      	itett	lt
 800ae50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ae54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ae58:	1a9d      	sublt	r5, r3, r2
 800ae5a:	2300      	movlt	r3, #0
 800ae5c:	e734      	b.n	800acc8 <_dtoa_r+0x720>
 800ae5e:	9e07      	ldr	r6, [sp, #28]
 800ae60:	9d04      	ldr	r5, [sp, #16]
 800ae62:	9f08      	ldr	r7, [sp, #32]
 800ae64:	e73b      	b.n	800acde <_dtoa_r+0x736>
 800ae66:	9a07      	ldr	r2, [sp, #28]
 800ae68:	e767      	b.n	800ad3a <_dtoa_r+0x792>
 800ae6a:	9b06      	ldr	r3, [sp, #24]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	dc18      	bgt.n	800aea2 <_dtoa_r+0x8fa>
 800ae70:	f1ba 0f00 	cmp.w	sl, #0
 800ae74:	d115      	bne.n	800aea2 <_dtoa_r+0x8fa>
 800ae76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae7a:	b993      	cbnz	r3, 800aea2 <_dtoa_r+0x8fa>
 800ae7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae80:	0d1b      	lsrs	r3, r3, #20
 800ae82:	051b      	lsls	r3, r3, #20
 800ae84:	b183      	cbz	r3, 800aea8 <_dtoa_r+0x900>
 800ae86:	9b04      	ldr	r3, [sp, #16]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	9304      	str	r3, [sp, #16]
 800ae8c:	9b05      	ldr	r3, [sp, #20]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	9305      	str	r3, [sp, #20]
 800ae92:	f04f 0801 	mov.w	r8, #1
 800ae96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f47f af6a 	bne.w	800ad72 <_dtoa_r+0x7ca>
 800ae9e:	2001      	movs	r0, #1
 800aea0:	e76f      	b.n	800ad82 <_dtoa_r+0x7da>
 800aea2:	f04f 0800 	mov.w	r8, #0
 800aea6:	e7f6      	b.n	800ae96 <_dtoa_r+0x8ee>
 800aea8:	4698      	mov	r8, r3
 800aeaa:	e7f4      	b.n	800ae96 <_dtoa_r+0x8ee>
 800aeac:	f43f af7d 	beq.w	800adaa <_dtoa_r+0x802>
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	301c      	adds	r0, #28
 800aeb4:	e772      	b.n	800ad9c <_dtoa_r+0x7f4>
 800aeb6:	9b03      	ldr	r3, [sp, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dc37      	bgt.n	800af2c <_dtoa_r+0x984>
 800aebc:	9b06      	ldr	r3, [sp, #24]
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	dd34      	ble.n	800af2c <_dtoa_r+0x984>
 800aec2:	9b03      	ldr	r3, [sp, #12]
 800aec4:	9302      	str	r3, [sp, #8]
 800aec6:	9b02      	ldr	r3, [sp, #8]
 800aec8:	b96b      	cbnz	r3, 800aee6 <_dtoa_r+0x93e>
 800aeca:	4631      	mov	r1, r6
 800aecc:	2205      	movs	r2, #5
 800aece:	4620      	mov	r0, r4
 800aed0:	f000 fbea 	bl	800b6a8 <__multadd>
 800aed4:	4601      	mov	r1, r0
 800aed6:	4606      	mov	r6, r0
 800aed8:	ee18 0a10 	vmov	r0, s16
 800aedc:	f000 fe04 	bl	800bae8 <__mcmp>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	f73f adbb 	bgt.w	800aa5c <_dtoa_r+0x4b4>
 800aee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee8:	9d01      	ldr	r5, [sp, #4]
 800aeea:	43db      	mvns	r3, r3
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	f04f 0800 	mov.w	r8, #0
 800aef2:	4631      	mov	r1, r6
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 fbb5 	bl	800b664 <_Bfree>
 800aefa:	2f00      	cmp	r7, #0
 800aefc:	f43f aea4 	beq.w	800ac48 <_dtoa_r+0x6a0>
 800af00:	f1b8 0f00 	cmp.w	r8, #0
 800af04:	d005      	beq.n	800af12 <_dtoa_r+0x96a>
 800af06:	45b8      	cmp	r8, r7
 800af08:	d003      	beq.n	800af12 <_dtoa_r+0x96a>
 800af0a:	4641      	mov	r1, r8
 800af0c:	4620      	mov	r0, r4
 800af0e:	f000 fba9 	bl	800b664 <_Bfree>
 800af12:	4639      	mov	r1, r7
 800af14:	4620      	mov	r0, r4
 800af16:	f000 fba5 	bl	800b664 <_Bfree>
 800af1a:	e695      	b.n	800ac48 <_dtoa_r+0x6a0>
 800af1c:	2600      	movs	r6, #0
 800af1e:	4637      	mov	r7, r6
 800af20:	e7e1      	b.n	800aee6 <_dtoa_r+0x93e>
 800af22:	9700      	str	r7, [sp, #0]
 800af24:	4637      	mov	r7, r6
 800af26:	e599      	b.n	800aa5c <_dtoa_r+0x4b4>
 800af28:	40240000 	.word	0x40240000
 800af2c:	9b08      	ldr	r3, [sp, #32]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f000 80ca 	beq.w	800b0c8 <_dtoa_r+0xb20>
 800af34:	9b03      	ldr	r3, [sp, #12]
 800af36:	9302      	str	r3, [sp, #8]
 800af38:	2d00      	cmp	r5, #0
 800af3a:	dd05      	ble.n	800af48 <_dtoa_r+0x9a0>
 800af3c:	4639      	mov	r1, r7
 800af3e:	462a      	mov	r2, r5
 800af40:	4620      	mov	r0, r4
 800af42:	f000 fd61 	bl	800ba08 <__lshift>
 800af46:	4607      	mov	r7, r0
 800af48:	f1b8 0f00 	cmp.w	r8, #0
 800af4c:	d05b      	beq.n	800b006 <_dtoa_r+0xa5e>
 800af4e:	6879      	ldr	r1, [r7, #4]
 800af50:	4620      	mov	r0, r4
 800af52:	f000 fb47 	bl	800b5e4 <_Balloc>
 800af56:	4605      	mov	r5, r0
 800af58:	b928      	cbnz	r0, 800af66 <_dtoa_r+0x9be>
 800af5a:	4b87      	ldr	r3, [pc, #540]	; (800b178 <_dtoa_r+0xbd0>)
 800af5c:	4602      	mov	r2, r0
 800af5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af62:	f7ff bb3b 	b.w	800a5dc <_dtoa_r+0x34>
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	3202      	adds	r2, #2
 800af6a:	0092      	lsls	r2, r2, #2
 800af6c:	f107 010c 	add.w	r1, r7, #12
 800af70:	300c      	adds	r0, #12
 800af72:	f7fe fbb9 	bl	80096e8 <memcpy>
 800af76:	2201      	movs	r2, #1
 800af78:	4629      	mov	r1, r5
 800af7a:	4620      	mov	r0, r4
 800af7c:	f000 fd44 	bl	800ba08 <__lshift>
 800af80:	9b01      	ldr	r3, [sp, #4]
 800af82:	f103 0901 	add.w	r9, r3, #1
 800af86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800af8a:	4413      	add	r3, r2
 800af8c:	9305      	str	r3, [sp, #20]
 800af8e:	f00a 0301 	and.w	r3, sl, #1
 800af92:	46b8      	mov	r8, r7
 800af94:	9304      	str	r3, [sp, #16]
 800af96:	4607      	mov	r7, r0
 800af98:	4631      	mov	r1, r6
 800af9a:	ee18 0a10 	vmov	r0, s16
 800af9e:	f7ff fa75 	bl	800a48c <quorem>
 800afa2:	4641      	mov	r1, r8
 800afa4:	9002      	str	r0, [sp, #8]
 800afa6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800afaa:	ee18 0a10 	vmov	r0, s16
 800afae:	f000 fd9b 	bl	800bae8 <__mcmp>
 800afb2:	463a      	mov	r2, r7
 800afb4:	9003      	str	r0, [sp, #12]
 800afb6:	4631      	mov	r1, r6
 800afb8:	4620      	mov	r0, r4
 800afba:	f000 fdb1 	bl	800bb20 <__mdiff>
 800afbe:	68c2      	ldr	r2, [r0, #12]
 800afc0:	f109 3bff 	add.w	fp, r9, #4294967295
 800afc4:	4605      	mov	r5, r0
 800afc6:	bb02      	cbnz	r2, 800b00a <_dtoa_r+0xa62>
 800afc8:	4601      	mov	r1, r0
 800afca:	ee18 0a10 	vmov	r0, s16
 800afce:	f000 fd8b 	bl	800bae8 <__mcmp>
 800afd2:	4602      	mov	r2, r0
 800afd4:	4629      	mov	r1, r5
 800afd6:	4620      	mov	r0, r4
 800afd8:	9207      	str	r2, [sp, #28]
 800afda:	f000 fb43 	bl	800b664 <_Bfree>
 800afde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800afe2:	ea43 0102 	orr.w	r1, r3, r2
 800afe6:	9b04      	ldr	r3, [sp, #16]
 800afe8:	430b      	orrs	r3, r1
 800afea:	464d      	mov	r5, r9
 800afec:	d10f      	bne.n	800b00e <_dtoa_r+0xa66>
 800afee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aff2:	d02a      	beq.n	800b04a <_dtoa_r+0xaa2>
 800aff4:	9b03      	ldr	r3, [sp, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	dd02      	ble.n	800b000 <_dtoa_r+0xa58>
 800affa:	9b02      	ldr	r3, [sp, #8]
 800affc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b000:	f88b a000 	strb.w	sl, [fp]
 800b004:	e775      	b.n	800aef2 <_dtoa_r+0x94a>
 800b006:	4638      	mov	r0, r7
 800b008:	e7ba      	b.n	800af80 <_dtoa_r+0x9d8>
 800b00a:	2201      	movs	r2, #1
 800b00c:	e7e2      	b.n	800afd4 <_dtoa_r+0xa2c>
 800b00e:	9b03      	ldr	r3, [sp, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	db04      	blt.n	800b01e <_dtoa_r+0xa76>
 800b014:	9906      	ldr	r1, [sp, #24]
 800b016:	430b      	orrs	r3, r1
 800b018:	9904      	ldr	r1, [sp, #16]
 800b01a:	430b      	orrs	r3, r1
 800b01c:	d122      	bne.n	800b064 <_dtoa_r+0xabc>
 800b01e:	2a00      	cmp	r2, #0
 800b020:	ddee      	ble.n	800b000 <_dtoa_r+0xa58>
 800b022:	ee18 1a10 	vmov	r1, s16
 800b026:	2201      	movs	r2, #1
 800b028:	4620      	mov	r0, r4
 800b02a:	f000 fced 	bl	800ba08 <__lshift>
 800b02e:	4631      	mov	r1, r6
 800b030:	ee08 0a10 	vmov	s16, r0
 800b034:	f000 fd58 	bl	800bae8 <__mcmp>
 800b038:	2800      	cmp	r0, #0
 800b03a:	dc03      	bgt.n	800b044 <_dtoa_r+0xa9c>
 800b03c:	d1e0      	bne.n	800b000 <_dtoa_r+0xa58>
 800b03e:	f01a 0f01 	tst.w	sl, #1
 800b042:	d0dd      	beq.n	800b000 <_dtoa_r+0xa58>
 800b044:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b048:	d1d7      	bne.n	800affa <_dtoa_r+0xa52>
 800b04a:	2339      	movs	r3, #57	; 0x39
 800b04c:	f88b 3000 	strb.w	r3, [fp]
 800b050:	462b      	mov	r3, r5
 800b052:	461d      	mov	r5, r3
 800b054:	3b01      	subs	r3, #1
 800b056:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b05a:	2a39      	cmp	r2, #57	; 0x39
 800b05c:	d071      	beq.n	800b142 <_dtoa_r+0xb9a>
 800b05e:	3201      	adds	r2, #1
 800b060:	701a      	strb	r2, [r3, #0]
 800b062:	e746      	b.n	800aef2 <_dtoa_r+0x94a>
 800b064:	2a00      	cmp	r2, #0
 800b066:	dd07      	ble.n	800b078 <_dtoa_r+0xad0>
 800b068:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b06c:	d0ed      	beq.n	800b04a <_dtoa_r+0xaa2>
 800b06e:	f10a 0301 	add.w	r3, sl, #1
 800b072:	f88b 3000 	strb.w	r3, [fp]
 800b076:	e73c      	b.n	800aef2 <_dtoa_r+0x94a>
 800b078:	9b05      	ldr	r3, [sp, #20]
 800b07a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b07e:	4599      	cmp	r9, r3
 800b080:	d047      	beq.n	800b112 <_dtoa_r+0xb6a>
 800b082:	ee18 1a10 	vmov	r1, s16
 800b086:	2300      	movs	r3, #0
 800b088:	220a      	movs	r2, #10
 800b08a:	4620      	mov	r0, r4
 800b08c:	f000 fb0c 	bl	800b6a8 <__multadd>
 800b090:	45b8      	cmp	r8, r7
 800b092:	ee08 0a10 	vmov	s16, r0
 800b096:	f04f 0300 	mov.w	r3, #0
 800b09a:	f04f 020a 	mov.w	r2, #10
 800b09e:	4641      	mov	r1, r8
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	d106      	bne.n	800b0b2 <_dtoa_r+0xb0a>
 800b0a4:	f000 fb00 	bl	800b6a8 <__multadd>
 800b0a8:	4680      	mov	r8, r0
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	f109 0901 	add.w	r9, r9, #1
 800b0b0:	e772      	b.n	800af98 <_dtoa_r+0x9f0>
 800b0b2:	f000 faf9 	bl	800b6a8 <__multadd>
 800b0b6:	4639      	mov	r1, r7
 800b0b8:	4680      	mov	r8, r0
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	220a      	movs	r2, #10
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f000 faf2 	bl	800b6a8 <__multadd>
 800b0c4:	4607      	mov	r7, r0
 800b0c6:	e7f1      	b.n	800b0ac <_dtoa_r+0xb04>
 800b0c8:	9b03      	ldr	r3, [sp, #12]
 800b0ca:	9302      	str	r3, [sp, #8]
 800b0cc:	9d01      	ldr	r5, [sp, #4]
 800b0ce:	ee18 0a10 	vmov	r0, s16
 800b0d2:	4631      	mov	r1, r6
 800b0d4:	f7ff f9da 	bl	800a48c <quorem>
 800b0d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b0dc:	9b01      	ldr	r3, [sp, #4]
 800b0de:	f805 ab01 	strb.w	sl, [r5], #1
 800b0e2:	1aea      	subs	r2, r5, r3
 800b0e4:	9b02      	ldr	r3, [sp, #8]
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	dd09      	ble.n	800b0fe <_dtoa_r+0xb56>
 800b0ea:	ee18 1a10 	vmov	r1, s16
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f000 fad8 	bl	800b6a8 <__multadd>
 800b0f8:	ee08 0a10 	vmov	s16, r0
 800b0fc:	e7e7      	b.n	800b0ce <_dtoa_r+0xb26>
 800b0fe:	9b02      	ldr	r3, [sp, #8]
 800b100:	2b00      	cmp	r3, #0
 800b102:	bfc8      	it	gt
 800b104:	461d      	movgt	r5, r3
 800b106:	9b01      	ldr	r3, [sp, #4]
 800b108:	bfd8      	it	le
 800b10a:	2501      	movle	r5, #1
 800b10c:	441d      	add	r5, r3
 800b10e:	f04f 0800 	mov.w	r8, #0
 800b112:	ee18 1a10 	vmov	r1, s16
 800b116:	2201      	movs	r2, #1
 800b118:	4620      	mov	r0, r4
 800b11a:	f000 fc75 	bl	800ba08 <__lshift>
 800b11e:	4631      	mov	r1, r6
 800b120:	ee08 0a10 	vmov	s16, r0
 800b124:	f000 fce0 	bl	800bae8 <__mcmp>
 800b128:	2800      	cmp	r0, #0
 800b12a:	dc91      	bgt.n	800b050 <_dtoa_r+0xaa8>
 800b12c:	d102      	bne.n	800b134 <_dtoa_r+0xb8c>
 800b12e:	f01a 0f01 	tst.w	sl, #1
 800b132:	d18d      	bne.n	800b050 <_dtoa_r+0xaa8>
 800b134:	462b      	mov	r3, r5
 800b136:	461d      	mov	r5, r3
 800b138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b13c:	2a30      	cmp	r2, #48	; 0x30
 800b13e:	d0fa      	beq.n	800b136 <_dtoa_r+0xb8e>
 800b140:	e6d7      	b.n	800aef2 <_dtoa_r+0x94a>
 800b142:	9a01      	ldr	r2, [sp, #4]
 800b144:	429a      	cmp	r2, r3
 800b146:	d184      	bne.n	800b052 <_dtoa_r+0xaaa>
 800b148:	9b00      	ldr	r3, [sp, #0]
 800b14a:	3301      	adds	r3, #1
 800b14c:	9300      	str	r3, [sp, #0]
 800b14e:	2331      	movs	r3, #49	; 0x31
 800b150:	7013      	strb	r3, [r2, #0]
 800b152:	e6ce      	b.n	800aef2 <_dtoa_r+0x94a>
 800b154:	4b09      	ldr	r3, [pc, #36]	; (800b17c <_dtoa_r+0xbd4>)
 800b156:	f7ff ba95 	b.w	800a684 <_dtoa_r+0xdc>
 800b15a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f47f aa6e 	bne.w	800a63e <_dtoa_r+0x96>
 800b162:	4b07      	ldr	r3, [pc, #28]	; (800b180 <_dtoa_r+0xbd8>)
 800b164:	f7ff ba8e 	b.w	800a684 <_dtoa_r+0xdc>
 800b168:	9b02      	ldr	r3, [sp, #8]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	dcae      	bgt.n	800b0cc <_dtoa_r+0xb24>
 800b16e:	9b06      	ldr	r3, [sp, #24]
 800b170:	2b02      	cmp	r3, #2
 800b172:	f73f aea8 	bgt.w	800aec6 <_dtoa_r+0x91e>
 800b176:	e7a9      	b.n	800b0cc <_dtoa_r+0xb24>
 800b178:	0800f469 	.word	0x0800f469
 800b17c:	0800cac2 	.word	0x0800cac2
 800b180:	0800f3ea 	.word	0x0800f3ea

0800b184 <__sflush_r>:
 800b184:	898a      	ldrh	r2, [r1, #12]
 800b186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b18a:	4605      	mov	r5, r0
 800b18c:	0710      	lsls	r0, r2, #28
 800b18e:	460c      	mov	r4, r1
 800b190:	d458      	bmi.n	800b244 <__sflush_r+0xc0>
 800b192:	684b      	ldr	r3, [r1, #4]
 800b194:	2b00      	cmp	r3, #0
 800b196:	dc05      	bgt.n	800b1a4 <__sflush_r+0x20>
 800b198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	dc02      	bgt.n	800b1a4 <__sflush_r+0x20>
 800b19e:	2000      	movs	r0, #0
 800b1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1a6:	2e00      	cmp	r6, #0
 800b1a8:	d0f9      	beq.n	800b19e <__sflush_r+0x1a>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1b0:	682f      	ldr	r7, [r5, #0]
 800b1b2:	602b      	str	r3, [r5, #0]
 800b1b4:	d032      	beq.n	800b21c <__sflush_r+0x98>
 800b1b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1b8:	89a3      	ldrh	r3, [r4, #12]
 800b1ba:	075a      	lsls	r2, r3, #29
 800b1bc:	d505      	bpl.n	800b1ca <__sflush_r+0x46>
 800b1be:	6863      	ldr	r3, [r4, #4]
 800b1c0:	1ac0      	subs	r0, r0, r3
 800b1c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1c4:	b10b      	cbz	r3, 800b1ca <__sflush_r+0x46>
 800b1c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1c8:	1ac0      	subs	r0, r0, r3
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1d0:	6a21      	ldr	r1, [r4, #32]
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	47b0      	blx	r6
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	89a3      	ldrh	r3, [r4, #12]
 800b1da:	d106      	bne.n	800b1ea <__sflush_r+0x66>
 800b1dc:	6829      	ldr	r1, [r5, #0]
 800b1de:	291d      	cmp	r1, #29
 800b1e0:	d82c      	bhi.n	800b23c <__sflush_r+0xb8>
 800b1e2:	4a2a      	ldr	r2, [pc, #168]	; (800b28c <__sflush_r+0x108>)
 800b1e4:	40ca      	lsrs	r2, r1
 800b1e6:	07d6      	lsls	r6, r2, #31
 800b1e8:	d528      	bpl.n	800b23c <__sflush_r+0xb8>
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	6062      	str	r2, [r4, #4]
 800b1ee:	04d9      	lsls	r1, r3, #19
 800b1f0:	6922      	ldr	r2, [r4, #16]
 800b1f2:	6022      	str	r2, [r4, #0]
 800b1f4:	d504      	bpl.n	800b200 <__sflush_r+0x7c>
 800b1f6:	1c42      	adds	r2, r0, #1
 800b1f8:	d101      	bne.n	800b1fe <__sflush_r+0x7a>
 800b1fa:	682b      	ldr	r3, [r5, #0]
 800b1fc:	b903      	cbnz	r3, 800b200 <__sflush_r+0x7c>
 800b1fe:	6560      	str	r0, [r4, #84]	; 0x54
 800b200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b202:	602f      	str	r7, [r5, #0]
 800b204:	2900      	cmp	r1, #0
 800b206:	d0ca      	beq.n	800b19e <__sflush_r+0x1a>
 800b208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b20c:	4299      	cmp	r1, r3
 800b20e:	d002      	beq.n	800b216 <__sflush_r+0x92>
 800b210:	4628      	mov	r0, r5
 800b212:	f7fe fa7f 	bl	8009714 <_free_r>
 800b216:	2000      	movs	r0, #0
 800b218:	6360      	str	r0, [r4, #52]	; 0x34
 800b21a:	e7c1      	b.n	800b1a0 <__sflush_r+0x1c>
 800b21c:	6a21      	ldr	r1, [r4, #32]
 800b21e:	2301      	movs	r3, #1
 800b220:	4628      	mov	r0, r5
 800b222:	47b0      	blx	r6
 800b224:	1c41      	adds	r1, r0, #1
 800b226:	d1c7      	bne.n	800b1b8 <__sflush_r+0x34>
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d0c4      	beq.n	800b1b8 <__sflush_r+0x34>
 800b22e:	2b1d      	cmp	r3, #29
 800b230:	d001      	beq.n	800b236 <__sflush_r+0xb2>
 800b232:	2b16      	cmp	r3, #22
 800b234:	d101      	bne.n	800b23a <__sflush_r+0xb6>
 800b236:	602f      	str	r7, [r5, #0]
 800b238:	e7b1      	b.n	800b19e <__sflush_r+0x1a>
 800b23a:	89a3      	ldrh	r3, [r4, #12]
 800b23c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b240:	81a3      	strh	r3, [r4, #12]
 800b242:	e7ad      	b.n	800b1a0 <__sflush_r+0x1c>
 800b244:	690f      	ldr	r7, [r1, #16]
 800b246:	2f00      	cmp	r7, #0
 800b248:	d0a9      	beq.n	800b19e <__sflush_r+0x1a>
 800b24a:	0793      	lsls	r3, r2, #30
 800b24c:	680e      	ldr	r6, [r1, #0]
 800b24e:	bf08      	it	eq
 800b250:	694b      	ldreq	r3, [r1, #20]
 800b252:	600f      	str	r7, [r1, #0]
 800b254:	bf18      	it	ne
 800b256:	2300      	movne	r3, #0
 800b258:	eba6 0807 	sub.w	r8, r6, r7
 800b25c:	608b      	str	r3, [r1, #8]
 800b25e:	f1b8 0f00 	cmp.w	r8, #0
 800b262:	dd9c      	ble.n	800b19e <__sflush_r+0x1a>
 800b264:	6a21      	ldr	r1, [r4, #32]
 800b266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b268:	4643      	mov	r3, r8
 800b26a:	463a      	mov	r2, r7
 800b26c:	4628      	mov	r0, r5
 800b26e:	47b0      	blx	r6
 800b270:	2800      	cmp	r0, #0
 800b272:	dc06      	bgt.n	800b282 <__sflush_r+0xfe>
 800b274:	89a3      	ldrh	r3, [r4, #12]
 800b276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b27a:	81a3      	strh	r3, [r4, #12]
 800b27c:	f04f 30ff 	mov.w	r0, #4294967295
 800b280:	e78e      	b.n	800b1a0 <__sflush_r+0x1c>
 800b282:	4407      	add	r7, r0
 800b284:	eba8 0800 	sub.w	r8, r8, r0
 800b288:	e7e9      	b.n	800b25e <__sflush_r+0xda>
 800b28a:	bf00      	nop
 800b28c:	20400001 	.word	0x20400001

0800b290 <_fflush_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	690b      	ldr	r3, [r1, #16]
 800b294:	4605      	mov	r5, r0
 800b296:	460c      	mov	r4, r1
 800b298:	b913      	cbnz	r3, 800b2a0 <_fflush_r+0x10>
 800b29a:	2500      	movs	r5, #0
 800b29c:	4628      	mov	r0, r5
 800b29e:	bd38      	pop	{r3, r4, r5, pc}
 800b2a0:	b118      	cbz	r0, 800b2aa <_fflush_r+0x1a>
 800b2a2:	6983      	ldr	r3, [r0, #24]
 800b2a4:	b90b      	cbnz	r3, 800b2aa <_fflush_r+0x1a>
 800b2a6:	f000 f887 	bl	800b3b8 <__sinit>
 800b2aa:	4b14      	ldr	r3, [pc, #80]	; (800b2fc <_fflush_r+0x6c>)
 800b2ac:	429c      	cmp	r4, r3
 800b2ae:	d11b      	bne.n	800b2e8 <_fflush_r+0x58>
 800b2b0:	686c      	ldr	r4, [r5, #4]
 800b2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d0ef      	beq.n	800b29a <_fflush_r+0xa>
 800b2ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2bc:	07d0      	lsls	r0, r2, #31
 800b2be:	d404      	bmi.n	800b2ca <_fflush_r+0x3a>
 800b2c0:	0599      	lsls	r1, r3, #22
 800b2c2:	d402      	bmi.n	800b2ca <_fflush_r+0x3a>
 800b2c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2c6:	f000 f91a 	bl	800b4fe <__retarget_lock_acquire_recursive>
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	f7ff ff59 	bl	800b184 <__sflush_r>
 800b2d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2d4:	07da      	lsls	r2, r3, #31
 800b2d6:	4605      	mov	r5, r0
 800b2d8:	d4e0      	bmi.n	800b29c <_fflush_r+0xc>
 800b2da:	89a3      	ldrh	r3, [r4, #12]
 800b2dc:	059b      	lsls	r3, r3, #22
 800b2de:	d4dd      	bmi.n	800b29c <_fflush_r+0xc>
 800b2e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2e2:	f000 f90d 	bl	800b500 <__retarget_lock_release_recursive>
 800b2e6:	e7d9      	b.n	800b29c <_fflush_r+0xc>
 800b2e8:	4b05      	ldr	r3, [pc, #20]	; (800b300 <_fflush_r+0x70>)
 800b2ea:	429c      	cmp	r4, r3
 800b2ec:	d101      	bne.n	800b2f2 <_fflush_r+0x62>
 800b2ee:	68ac      	ldr	r4, [r5, #8]
 800b2f0:	e7df      	b.n	800b2b2 <_fflush_r+0x22>
 800b2f2:	4b04      	ldr	r3, [pc, #16]	; (800b304 <_fflush_r+0x74>)
 800b2f4:	429c      	cmp	r4, r3
 800b2f6:	bf08      	it	eq
 800b2f8:	68ec      	ldreq	r4, [r5, #12]
 800b2fa:	e7da      	b.n	800b2b2 <_fflush_r+0x22>
 800b2fc:	0800f49c 	.word	0x0800f49c
 800b300:	0800f4bc 	.word	0x0800f4bc
 800b304:	0800f47c 	.word	0x0800f47c

0800b308 <std>:
 800b308:	2300      	movs	r3, #0
 800b30a:	b510      	push	{r4, lr}
 800b30c:	4604      	mov	r4, r0
 800b30e:	e9c0 3300 	strd	r3, r3, [r0]
 800b312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b316:	6083      	str	r3, [r0, #8]
 800b318:	8181      	strh	r1, [r0, #12]
 800b31a:	6643      	str	r3, [r0, #100]	; 0x64
 800b31c:	81c2      	strh	r2, [r0, #14]
 800b31e:	6183      	str	r3, [r0, #24]
 800b320:	4619      	mov	r1, r3
 800b322:	2208      	movs	r2, #8
 800b324:	305c      	adds	r0, #92	; 0x5c
 800b326:	f7fe f9ed 	bl	8009704 <memset>
 800b32a:	4b05      	ldr	r3, [pc, #20]	; (800b340 <std+0x38>)
 800b32c:	6263      	str	r3, [r4, #36]	; 0x24
 800b32e:	4b05      	ldr	r3, [pc, #20]	; (800b344 <std+0x3c>)
 800b330:	62a3      	str	r3, [r4, #40]	; 0x28
 800b332:	4b05      	ldr	r3, [pc, #20]	; (800b348 <std+0x40>)
 800b334:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b336:	4b05      	ldr	r3, [pc, #20]	; (800b34c <std+0x44>)
 800b338:	6224      	str	r4, [r4, #32]
 800b33a:	6323      	str	r3, [r4, #48]	; 0x30
 800b33c:	bd10      	pop	{r4, pc}
 800b33e:	bf00      	nop
 800b340:	0800bfcd 	.word	0x0800bfcd
 800b344:	0800bfef 	.word	0x0800bfef
 800b348:	0800c027 	.word	0x0800c027
 800b34c:	0800c04b 	.word	0x0800c04b

0800b350 <_cleanup_r>:
 800b350:	4901      	ldr	r1, [pc, #4]	; (800b358 <_cleanup_r+0x8>)
 800b352:	f000 b8af 	b.w	800b4b4 <_fwalk_reent>
 800b356:	bf00      	nop
 800b358:	0800b291 	.word	0x0800b291

0800b35c <__sfmoreglue>:
 800b35c:	b570      	push	{r4, r5, r6, lr}
 800b35e:	2268      	movs	r2, #104	; 0x68
 800b360:	1e4d      	subs	r5, r1, #1
 800b362:	4355      	muls	r5, r2
 800b364:	460e      	mov	r6, r1
 800b366:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b36a:	f7fe fa3f 	bl	80097ec <_malloc_r>
 800b36e:	4604      	mov	r4, r0
 800b370:	b140      	cbz	r0, 800b384 <__sfmoreglue+0x28>
 800b372:	2100      	movs	r1, #0
 800b374:	e9c0 1600 	strd	r1, r6, [r0]
 800b378:	300c      	adds	r0, #12
 800b37a:	60a0      	str	r0, [r4, #8]
 800b37c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b380:	f7fe f9c0 	bl	8009704 <memset>
 800b384:	4620      	mov	r0, r4
 800b386:	bd70      	pop	{r4, r5, r6, pc}

0800b388 <__sfp_lock_acquire>:
 800b388:	4801      	ldr	r0, [pc, #4]	; (800b390 <__sfp_lock_acquire+0x8>)
 800b38a:	f000 b8b8 	b.w	800b4fe <__retarget_lock_acquire_recursive>
 800b38e:	bf00      	nop
 800b390:	20001619 	.word	0x20001619

0800b394 <__sfp_lock_release>:
 800b394:	4801      	ldr	r0, [pc, #4]	; (800b39c <__sfp_lock_release+0x8>)
 800b396:	f000 b8b3 	b.w	800b500 <__retarget_lock_release_recursive>
 800b39a:	bf00      	nop
 800b39c:	20001619 	.word	0x20001619

0800b3a0 <__sinit_lock_acquire>:
 800b3a0:	4801      	ldr	r0, [pc, #4]	; (800b3a8 <__sinit_lock_acquire+0x8>)
 800b3a2:	f000 b8ac 	b.w	800b4fe <__retarget_lock_acquire_recursive>
 800b3a6:	bf00      	nop
 800b3a8:	2000161a 	.word	0x2000161a

0800b3ac <__sinit_lock_release>:
 800b3ac:	4801      	ldr	r0, [pc, #4]	; (800b3b4 <__sinit_lock_release+0x8>)
 800b3ae:	f000 b8a7 	b.w	800b500 <__retarget_lock_release_recursive>
 800b3b2:	bf00      	nop
 800b3b4:	2000161a 	.word	0x2000161a

0800b3b8 <__sinit>:
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	f7ff fff0 	bl	800b3a0 <__sinit_lock_acquire>
 800b3c0:	69a3      	ldr	r3, [r4, #24]
 800b3c2:	b11b      	cbz	r3, 800b3cc <__sinit+0x14>
 800b3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3c8:	f7ff bff0 	b.w	800b3ac <__sinit_lock_release>
 800b3cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b3d0:	6523      	str	r3, [r4, #80]	; 0x50
 800b3d2:	4b13      	ldr	r3, [pc, #76]	; (800b420 <__sinit+0x68>)
 800b3d4:	4a13      	ldr	r2, [pc, #76]	; (800b424 <__sinit+0x6c>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3da:	42a3      	cmp	r3, r4
 800b3dc:	bf04      	itt	eq
 800b3de:	2301      	moveq	r3, #1
 800b3e0:	61a3      	streq	r3, [r4, #24]
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f000 f820 	bl	800b428 <__sfp>
 800b3e8:	6060      	str	r0, [r4, #4]
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f000 f81c 	bl	800b428 <__sfp>
 800b3f0:	60a0      	str	r0, [r4, #8]
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f000 f818 	bl	800b428 <__sfp>
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	60e0      	str	r0, [r4, #12]
 800b3fc:	2104      	movs	r1, #4
 800b3fe:	6860      	ldr	r0, [r4, #4]
 800b400:	f7ff ff82 	bl	800b308 <std>
 800b404:	68a0      	ldr	r0, [r4, #8]
 800b406:	2201      	movs	r2, #1
 800b408:	2109      	movs	r1, #9
 800b40a:	f7ff ff7d 	bl	800b308 <std>
 800b40e:	68e0      	ldr	r0, [r4, #12]
 800b410:	2202      	movs	r2, #2
 800b412:	2112      	movs	r1, #18
 800b414:	f7ff ff78 	bl	800b308 <std>
 800b418:	2301      	movs	r3, #1
 800b41a:	61a3      	str	r3, [r4, #24]
 800b41c:	e7d2      	b.n	800b3c4 <__sinit+0xc>
 800b41e:	bf00      	nop
 800b420:	0800f3b4 	.word	0x0800f3b4
 800b424:	0800b351 	.word	0x0800b351

0800b428 <__sfp>:
 800b428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42a:	4607      	mov	r7, r0
 800b42c:	f7ff ffac 	bl	800b388 <__sfp_lock_acquire>
 800b430:	4b1e      	ldr	r3, [pc, #120]	; (800b4ac <__sfp+0x84>)
 800b432:	681e      	ldr	r6, [r3, #0]
 800b434:	69b3      	ldr	r3, [r6, #24]
 800b436:	b913      	cbnz	r3, 800b43e <__sfp+0x16>
 800b438:	4630      	mov	r0, r6
 800b43a:	f7ff ffbd 	bl	800b3b8 <__sinit>
 800b43e:	3648      	adds	r6, #72	; 0x48
 800b440:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b444:	3b01      	subs	r3, #1
 800b446:	d503      	bpl.n	800b450 <__sfp+0x28>
 800b448:	6833      	ldr	r3, [r6, #0]
 800b44a:	b30b      	cbz	r3, 800b490 <__sfp+0x68>
 800b44c:	6836      	ldr	r6, [r6, #0]
 800b44e:	e7f7      	b.n	800b440 <__sfp+0x18>
 800b450:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b454:	b9d5      	cbnz	r5, 800b48c <__sfp+0x64>
 800b456:	4b16      	ldr	r3, [pc, #88]	; (800b4b0 <__sfp+0x88>)
 800b458:	60e3      	str	r3, [r4, #12]
 800b45a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b45e:	6665      	str	r5, [r4, #100]	; 0x64
 800b460:	f000 f84c 	bl	800b4fc <__retarget_lock_init_recursive>
 800b464:	f7ff ff96 	bl	800b394 <__sfp_lock_release>
 800b468:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b46c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b470:	6025      	str	r5, [r4, #0]
 800b472:	61a5      	str	r5, [r4, #24]
 800b474:	2208      	movs	r2, #8
 800b476:	4629      	mov	r1, r5
 800b478:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b47c:	f7fe f942 	bl	8009704 <memset>
 800b480:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b484:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b488:	4620      	mov	r0, r4
 800b48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b48c:	3468      	adds	r4, #104	; 0x68
 800b48e:	e7d9      	b.n	800b444 <__sfp+0x1c>
 800b490:	2104      	movs	r1, #4
 800b492:	4638      	mov	r0, r7
 800b494:	f7ff ff62 	bl	800b35c <__sfmoreglue>
 800b498:	4604      	mov	r4, r0
 800b49a:	6030      	str	r0, [r6, #0]
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d1d5      	bne.n	800b44c <__sfp+0x24>
 800b4a0:	f7ff ff78 	bl	800b394 <__sfp_lock_release>
 800b4a4:	230c      	movs	r3, #12
 800b4a6:	603b      	str	r3, [r7, #0]
 800b4a8:	e7ee      	b.n	800b488 <__sfp+0x60>
 800b4aa:	bf00      	nop
 800b4ac:	0800f3b4 	.word	0x0800f3b4
 800b4b0:	ffff0001 	.word	0xffff0001

0800b4b4 <_fwalk_reent>:
 800b4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b8:	4606      	mov	r6, r0
 800b4ba:	4688      	mov	r8, r1
 800b4bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b4c0:	2700      	movs	r7, #0
 800b4c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4c6:	f1b9 0901 	subs.w	r9, r9, #1
 800b4ca:	d505      	bpl.n	800b4d8 <_fwalk_reent+0x24>
 800b4cc:	6824      	ldr	r4, [r4, #0]
 800b4ce:	2c00      	cmp	r4, #0
 800b4d0:	d1f7      	bne.n	800b4c2 <_fwalk_reent+0xe>
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4d8:	89ab      	ldrh	r3, [r5, #12]
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d907      	bls.n	800b4ee <_fwalk_reent+0x3a>
 800b4de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	d003      	beq.n	800b4ee <_fwalk_reent+0x3a>
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	47c0      	blx	r8
 800b4ec:	4307      	orrs	r7, r0
 800b4ee:	3568      	adds	r5, #104	; 0x68
 800b4f0:	e7e9      	b.n	800b4c6 <_fwalk_reent+0x12>
	...

0800b4f4 <_localeconv_r>:
 800b4f4:	4800      	ldr	r0, [pc, #0]	; (800b4f8 <_localeconv_r+0x4>)
 800b4f6:	4770      	bx	lr
 800b4f8:	20000a48 	.word	0x20000a48

0800b4fc <__retarget_lock_init_recursive>:
 800b4fc:	4770      	bx	lr

0800b4fe <__retarget_lock_acquire_recursive>:
 800b4fe:	4770      	bx	lr

0800b500 <__retarget_lock_release_recursive>:
 800b500:	4770      	bx	lr

0800b502 <__swhatbuf_r>:
 800b502:	b570      	push	{r4, r5, r6, lr}
 800b504:	460e      	mov	r6, r1
 800b506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b50a:	2900      	cmp	r1, #0
 800b50c:	b096      	sub	sp, #88	; 0x58
 800b50e:	4614      	mov	r4, r2
 800b510:	461d      	mov	r5, r3
 800b512:	da08      	bge.n	800b526 <__swhatbuf_r+0x24>
 800b514:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	602a      	str	r2, [r5, #0]
 800b51c:	061a      	lsls	r2, r3, #24
 800b51e:	d410      	bmi.n	800b542 <__swhatbuf_r+0x40>
 800b520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b524:	e00e      	b.n	800b544 <__swhatbuf_r+0x42>
 800b526:	466a      	mov	r2, sp
 800b528:	f000 fde6 	bl	800c0f8 <_fstat_r>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	dbf1      	blt.n	800b514 <__swhatbuf_r+0x12>
 800b530:	9a01      	ldr	r2, [sp, #4]
 800b532:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b536:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b53a:	425a      	negs	r2, r3
 800b53c:	415a      	adcs	r2, r3
 800b53e:	602a      	str	r2, [r5, #0]
 800b540:	e7ee      	b.n	800b520 <__swhatbuf_r+0x1e>
 800b542:	2340      	movs	r3, #64	; 0x40
 800b544:	2000      	movs	r0, #0
 800b546:	6023      	str	r3, [r4, #0]
 800b548:	b016      	add	sp, #88	; 0x58
 800b54a:	bd70      	pop	{r4, r5, r6, pc}

0800b54c <__smakebuf_r>:
 800b54c:	898b      	ldrh	r3, [r1, #12]
 800b54e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b550:	079d      	lsls	r5, r3, #30
 800b552:	4606      	mov	r6, r0
 800b554:	460c      	mov	r4, r1
 800b556:	d507      	bpl.n	800b568 <__smakebuf_r+0x1c>
 800b558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	6123      	str	r3, [r4, #16]
 800b560:	2301      	movs	r3, #1
 800b562:	6163      	str	r3, [r4, #20]
 800b564:	b002      	add	sp, #8
 800b566:	bd70      	pop	{r4, r5, r6, pc}
 800b568:	ab01      	add	r3, sp, #4
 800b56a:	466a      	mov	r2, sp
 800b56c:	f7ff ffc9 	bl	800b502 <__swhatbuf_r>
 800b570:	9900      	ldr	r1, [sp, #0]
 800b572:	4605      	mov	r5, r0
 800b574:	4630      	mov	r0, r6
 800b576:	f7fe f939 	bl	80097ec <_malloc_r>
 800b57a:	b948      	cbnz	r0, 800b590 <__smakebuf_r+0x44>
 800b57c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b580:	059a      	lsls	r2, r3, #22
 800b582:	d4ef      	bmi.n	800b564 <__smakebuf_r+0x18>
 800b584:	f023 0303 	bic.w	r3, r3, #3
 800b588:	f043 0302 	orr.w	r3, r3, #2
 800b58c:	81a3      	strh	r3, [r4, #12]
 800b58e:	e7e3      	b.n	800b558 <__smakebuf_r+0xc>
 800b590:	4b0d      	ldr	r3, [pc, #52]	; (800b5c8 <__smakebuf_r+0x7c>)
 800b592:	62b3      	str	r3, [r6, #40]	; 0x28
 800b594:	89a3      	ldrh	r3, [r4, #12]
 800b596:	6020      	str	r0, [r4, #0]
 800b598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b59c:	81a3      	strh	r3, [r4, #12]
 800b59e:	9b00      	ldr	r3, [sp, #0]
 800b5a0:	6163      	str	r3, [r4, #20]
 800b5a2:	9b01      	ldr	r3, [sp, #4]
 800b5a4:	6120      	str	r0, [r4, #16]
 800b5a6:	b15b      	cbz	r3, 800b5c0 <__smakebuf_r+0x74>
 800b5a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	f000 fdb5 	bl	800c11c <_isatty_r>
 800b5b2:	b128      	cbz	r0, 800b5c0 <__smakebuf_r+0x74>
 800b5b4:	89a3      	ldrh	r3, [r4, #12]
 800b5b6:	f023 0303 	bic.w	r3, r3, #3
 800b5ba:	f043 0301 	orr.w	r3, r3, #1
 800b5be:	81a3      	strh	r3, [r4, #12]
 800b5c0:	89a0      	ldrh	r0, [r4, #12]
 800b5c2:	4305      	orrs	r5, r0
 800b5c4:	81a5      	strh	r5, [r4, #12]
 800b5c6:	e7cd      	b.n	800b564 <__smakebuf_r+0x18>
 800b5c8:	0800b351 	.word	0x0800b351

0800b5cc <__malloc_lock>:
 800b5cc:	4801      	ldr	r0, [pc, #4]	; (800b5d4 <__malloc_lock+0x8>)
 800b5ce:	f7ff bf96 	b.w	800b4fe <__retarget_lock_acquire_recursive>
 800b5d2:	bf00      	nop
 800b5d4:	20001618 	.word	0x20001618

0800b5d8 <__malloc_unlock>:
 800b5d8:	4801      	ldr	r0, [pc, #4]	; (800b5e0 <__malloc_unlock+0x8>)
 800b5da:	f7ff bf91 	b.w	800b500 <__retarget_lock_release_recursive>
 800b5de:	bf00      	nop
 800b5e0:	20001618 	.word	0x20001618

0800b5e4 <_Balloc>:
 800b5e4:	b570      	push	{r4, r5, r6, lr}
 800b5e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	460d      	mov	r5, r1
 800b5ec:	b976      	cbnz	r6, 800b60c <_Balloc+0x28>
 800b5ee:	2010      	movs	r0, #16
 800b5f0:	f7f8 f9da 	bl	80039a8 <__wrap_malloc>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	6260      	str	r0, [r4, #36]	; 0x24
 800b5f8:	b920      	cbnz	r0, 800b604 <_Balloc+0x20>
 800b5fa:	4b18      	ldr	r3, [pc, #96]	; (800b65c <_Balloc+0x78>)
 800b5fc:	4818      	ldr	r0, [pc, #96]	; (800b660 <_Balloc+0x7c>)
 800b5fe:	2166      	movs	r1, #102	; 0x66
 800b600:	f000 fd3a 	bl	800c078 <__assert_func>
 800b604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b608:	6006      	str	r6, [r0, #0]
 800b60a:	60c6      	str	r6, [r0, #12]
 800b60c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b60e:	68f3      	ldr	r3, [r6, #12]
 800b610:	b183      	cbz	r3, 800b634 <_Balloc+0x50>
 800b612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b61a:	b9b8      	cbnz	r0, 800b64c <_Balloc+0x68>
 800b61c:	2101      	movs	r1, #1
 800b61e:	fa01 f605 	lsl.w	r6, r1, r5
 800b622:	1d72      	adds	r2, r6, #5
 800b624:	0092      	lsls	r2, r2, #2
 800b626:	4620      	mov	r0, r4
 800b628:	f000 fb60 	bl	800bcec <_calloc_r>
 800b62c:	b160      	cbz	r0, 800b648 <_Balloc+0x64>
 800b62e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b632:	e00e      	b.n	800b652 <_Balloc+0x6e>
 800b634:	2221      	movs	r2, #33	; 0x21
 800b636:	2104      	movs	r1, #4
 800b638:	4620      	mov	r0, r4
 800b63a:	f000 fb57 	bl	800bcec <_calloc_r>
 800b63e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b640:	60f0      	str	r0, [r6, #12]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1e4      	bne.n	800b612 <_Balloc+0x2e>
 800b648:	2000      	movs	r0, #0
 800b64a:	bd70      	pop	{r4, r5, r6, pc}
 800b64c:	6802      	ldr	r2, [r0, #0]
 800b64e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b652:	2300      	movs	r3, #0
 800b654:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b658:	e7f7      	b.n	800b64a <_Balloc+0x66>
 800b65a:	bf00      	nop
 800b65c:	0800f3f7 	.word	0x0800f3f7
 800b660:	0800f4dc 	.word	0x0800f4dc

0800b664 <_Bfree>:
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b668:	4605      	mov	r5, r0
 800b66a:	460c      	mov	r4, r1
 800b66c:	b976      	cbnz	r6, 800b68c <_Bfree+0x28>
 800b66e:	2010      	movs	r0, #16
 800b670:	f7f8 f99a 	bl	80039a8 <__wrap_malloc>
 800b674:	4602      	mov	r2, r0
 800b676:	6268      	str	r0, [r5, #36]	; 0x24
 800b678:	b920      	cbnz	r0, 800b684 <_Bfree+0x20>
 800b67a:	4b09      	ldr	r3, [pc, #36]	; (800b6a0 <_Bfree+0x3c>)
 800b67c:	4809      	ldr	r0, [pc, #36]	; (800b6a4 <_Bfree+0x40>)
 800b67e:	218a      	movs	r1, #138	; 0x8a
 800b680:	f000 fcfa 	bl	800c078 <__assert_func>
 800b684:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b688:	6006      	str	r6, [r0, #0]
 800b68a:	60c6      	str	r6, [r0, #12]
 800b68c:	b13c      	cbz	r4, 800b69e <_Bfree+0x3a>
 800b68e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b690:	6862      	ldr	r2, [r4, #4]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b698:	6021      	str	r1, [r4, #0]
 800b69a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b69e:	bd70      	pop	{r4, r5, r6, pc}
 800b6a0:	0800f3f7 	.word	0x0800f3f7
 800b6a4:	0800f4dc 	.word	0x0800f4dc

0800b6a8 <__multadd>:
 800b6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ac:	690d      	ldr	r5, [r1, #16]
 800b6ae:	4607      	mov	r7, r0
 800b6b0:	460c      	mov	r4, r1
 800b6b2:	461e      	mov	r6, r3
 800b6b4:	f101 0c14 	add.w	ip, r1, #20
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	f8dc 3000 	ldr.w	r3, [ip]
 800b6be:	b299      	uxth	r1, r3
 800b6c0:	fb02 6101 	mla	r1, r2, r1, r6
 800b6c4:	0c1e      	lsrs	r6, r3, #16
 800b6c6:	0c0b      	lsrs	r3, r1, #16
 800b6c8:	fb02 3306 	mla	r3, r2, r6, r3
 800b6cc:	b289      	uxth	r1, r1
 800b6ce:	3001      	adds	r0, #1
 800b6d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b6d4:	4285      	cmp	r5, r0
 800b6d6:	f84c 1b04 	str.w	r1, [ip], #4
 800b6da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b6de:	dcec      	bgt.n	800b6ba <__multadd+0x12>
 800b6e0:	b30e      	cbz	r6, 800b726 <__multadd+0x7e>
 800b6e2:	68a3      	ldr	r3, [r4, #8]
 800b6e4:	42ab      	cmp	r3, r5
 800b6e6:	dc19      	bgt.n	800b71c <__multadd+0x74>
 800b6e8:	6861      	ldr	r1, [r4, #4]
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	3101      	adds	r1, #1
 800b6ee:	f7ff ff79 	bl	800b5e4 <_Balloc>
 800b6f2:	4680      	mov	r8, r0
 800b6f4:	b928      	cbnz	r0, 800b702 <__multadd+0x5a>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	4b0c      	ldr	r3, [pc, #48]	; (800b72c <__multadd+0x84>)
 800b6fa:	480d      	ldr	r0, [pc, #52]	; (800b730 <__multadd+0x88>)
 800b6fc:	21b5      	movs	r1, #181	; 0xb5
 800b6fe:	f000 fcbb 	bl	800c078 <__assert_func>
 800b702:	6922      	ldr	r2, [r4, #16]
 800b704:	3202      	adds	r2, #2
 800b706:	f104 010c 	add.w	r1, r4, #12
 800b70a:	0092      	lsls	r2, r2, #2
 800b70c:	300c      	adds	r0, #12
 800b70e:	f7fd ffeb 	bl	80096e8 <memcpy>
 800b712:	4621      	mov	r1, r4
 800b714:	4638      	mov	r0, r7
 800b716:	f7ff ffa5 	bl	800b664 <_Bfree>
 800b71a:	4644      	mov	r4, r8
 800b71c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b720:	3501      	adds	r5, #1
 800b722:	615e      	str	r6, [r3, #20]
 800b724:	6125      	str	r5, [r4, #16]
 800b726:	4620      	mov	r0, r4
 800b728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b72c:	0800f469 	.word	0x0800f469
 800b730:	0800f4dc 	.word	0x0800f4dc

0800b734 <__hi0bits>:
 800b734:	0c03      	lsrs	r3, r0, #16
 800b736:	041b      	lsls	r3, r3, #16
 800b738:	b9d3      	cbnz	r3, 800b770 <__hi0bits+0x3c>
 800b73a:	0400      	lsls	r0, r0, #16
 800b73c:	2310      	movs	r3, #16
 800b73e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b742:	bf04      	itt	eq
 800b744:	0200      	lsleq	r0, r0, #8
 800b746:	3308      	addeq	r3, #8
 800b748:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b74c:	bf04      	itt	eq
 800b74e:	0100      	lsleq	r0, r0, #4
 800b750:	3304      	addeq	r3, #4
 800b752:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b756:	bf04      	itt	eq
 800b758:	0080      	lsleq	r0, r0, #2
 800b75a:	3302      	addeq	r3, #2
 800b75c:	2800      	cmp	r0, #0
 800b75e:	db05      	blt.n	800b76c <__hi0bits+0x38>
 800b760:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b764:	f103 0301 	add.w	r3, r3, #1
 800b768:	bf08      	it	eq
 800b76a:	2320      	moveq	r3, #32
 800b76c:	4618      	mov	r0, r3
 800b76e:	4770      	bx	lr
 800b770:	2300      	movs	r3, #0
 800b772:	e7e4      	b.n	800b73e <__hi0bits+0xa>

0800b774 <__lo0bits>:
 800b774:	6803      	ldr	r3, [r0, #0]
 800b776:	f013 0207 	ands.w	r2, r3, #7
 800b77a:	4601      	mov	r1, r0
 800b77c:	d00b      	beq.n	800b796 <__lo0bits+0x22>
 800b77e:	07da      	lsls	r2, r3, #31
 800b780:	d423      	bmi.n	800b7ca <__lo0bits+0x56>
 800b782:	0798      	lsls	r0, r3, #30
 800b784:	bf49      	itett	mi
 800b786:	085b      	lsrmi	r3, r3, #1
 800b788:	089b      	lsrpl	r3, r3, #2
 800b78a:	2001      	movmi	r0, #1
 800b78c:	600b      	strmi	r3, [r1, #0]
 800b78e:	bf5c      	itt	pl
 800b790:	600b      	strpl	r3, [r1, #0]
 800b792:	2002      	movpl	r0, #2
 800b794:	4770      	bx	lr
 800b796:	b298      	uxth	r0, r3
 800b798:	b9a8      	cbnz	r0, 800b7c6 <__lo0bits+0x52>
 800b79a:	0c1b      	lsrs	r3, r3, #16
 800b79c:	2010      	movs	r0, #16
 800b79e:	b2da      	uxtb	r2, r3
 800b7a0:	b90a      	cbnz	r2, 800b7a6 <__lo0bits+0x32>
 800b7a2:	3008      	adds	r0, #8
 800b7a4:	0a1b      	lsrs	r3, r3, #8
 800b7a6:	071a      	lsls	r2, r3, #28
 800b7a8:	bf04      	itt	eq
 800b7aa:	091b      	lsreq	r3, r3, #4
 800b7ac:	3004      	addeq	r0, #4
 800b7ae:	079a      	lsls	r2, r3, #30
 800b7b0:	bf04      	itt	eq
 800b7b2:	089b      	lsreq	r3, r3, #2
 800b7b4:	3002      	addeq	r0, #2
 800b7b6:	07da      	lsls	r2, r3, #31
 800b7b8:	d403      	bmi.n	800b7c2 <__lo0bits+0x4e>
 800b7ba:	085b      	lsrs	r3, r3, #1
 800b7bc:	f100 0001 	add.w	r0, r0, #1
 800b7c0:	d005      	beq.n	800b7ce <__lo0bits+0x5a>
 800b7c2:	600b      	str	r3, [r1, #0]
 800b7c4:	4770      	bx	lr
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	e7e9      	b.n	800b79e <__lo0bits+0x2a>
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	4770      	bx	lr
 800b7ce:	2020      	movs	r0, #32
 800b7d0:	4770      	bx	lr
	...

0800b7d4 <__i2b>:
 800b7d4:	b510      	push	{r4, lr}
 800b7d6:	460c      	mov	r4, r1
 800b7d8:	2101      	movs	r1, #1
 800b7da:	f7ff ff03 	bl	800b5e4 <_Balloc>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	b928      	cbnz	r0, 800b7ee <__i2b+0x1a>
 800b7e2:	4b05      	ldr	r3, [pc, #20]	; (800b7f8 <__i2b+0x24>)
 800b7e4:	4805      	ldr	r0, [pc, #20]	; (800b7fc <__i2b+0x28>)
 800b7e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b7ea:	f000 fc45 	bl	800c078 <__assert_func>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	6144      	str	r4, [r0, #20]
 800b7f2:	6103      	str	r3, [r0, #16]
 800b7f4:	bd10      	pop	{r4, pc}
 800b7f6:	bf00      	nop
 800b7f8:	0800f469 	.word	0x0800f469
 800b7fc:	0800f4dc 	.word	0x0800f4dc

0800b800 <__multiply>:
 800b800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b804:	4691      	mov	r9, r2
 800b806:	690a      	ldr	r2, [r1, #16]
 800b808:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	bfb8      	it	lt
 800b810:	460b      	movlt	r3, r1
 800b812:	460c      	mov	r4, r1
 800b814:	bfbc      	itt	lt
 800b816:	464c      	movlt	r4, r9
 800b818:	4699      	movlt	r9, r3
 800b81a:	6927      	ldr	r7, [r4, #16]
 800b81c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b820:	68a3      	ldr	r3, [r4, #8]
 800b822:	6861      	ldr	r1, [r4, #4]
 800b824:	eb07 060a 	add.w	r6, r7, sl
 800b828:	42b3      	cmp	r3, r6
 800b82a:	b085      	sub	sp, #20
 800b82c:	bfb8      	it	lt
 800b82e:	3101      	addlt	r1, #1
 800b830:	f7ff fed8 	bl	800b5e4 <_Balloc>
 800b834:	b930      	cbnz	r0, 800b844 <__multiply+0x44>
 800b836:	4602      	mov	r2, r0
 800b838:	4b44      	ldr	r3, [pc, #272]	; (800b94c <__multiply+0x14c>)
 800b83a:	4845      	ldr	r0, [pc, #276]	; (800b950 <__multiply+0x150>)
 800b83c:	f240 115d 	movw	r1, #349	; 0x15d
 800b840:	f000 fc1a 	bl	800c078 <__assert_func>
 800b844:	f100 0514 	add.w	r5, r0, #20
 800b848:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b84c:	462b      	mov	r3, r5
 800b84e:	2200      	movs	r2, #0
 800b850:	4543      	cmp	r3, r8
 800b852:	d321      	bcc.n	800b898 <__multiply+0x98>
 800b854:	f104 0314 	add.w	r3, r4, #20
 800b858:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b85c:	f109 0314 	add.w	r3, r9, #20
 800b860:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b864:	9202      	str	r2, [sp, #8]
 800b866:	1b3a      	subs	r2, r7, r4
 800b868:	3a15      	subs	r2, #21
 800b86a:	f022 0203 	bic.w	r2, r2, #3
 800b86e:	3204      	adds	r2, #4
 800b870:	f104 0115 	add.w	r1, r4, #21
 800b874:	428f      	cmp	r7, r1
 800b876:	bf38      	it	cc
 800b878:	2204      	movcc	r2, #4
 800b87a:	9201      	str	r2, [sp, #4]
 800b87c:	9a02      	ldr	r2, [sp, #8]
 800b87e:	9303      	str	r3, [sp, #12]
 800b880:	429a      	cmp	r2, r3
 800b882:	d80c      	bhi.n	800b89e <__multiply+0x9e>
 800b884:	2e00      	cmp	r6, #0
 800b886:	dd03      	ble.n	800b890 <__multiply+0x90>
 800b888:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d05a      	beq.n	800b946 <__multiply+0x146>
 800b890:	6106      	str	r6, [r0, #16]
 800b892:	b005      	add	sp, #20
 800b894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b898:	f843 2b04 	str.w	r2, [r3], #4
 800b89c:	e7d8      	b.n	800b850 <__multiply+0x50>
 800b89e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8a2:	f1ba 0f00 	cmp.w	sl, #0
 800b8a6:	d024      	beq.n	800b8f2 <__multiply+0xf2>
 800b8a8:	f104 0e14 	add.w	lr, r4, #20
 800b8ac:	46a9      	mov	r9, r5
 800b8ae:	f04f 0c00 	mov.w	ip, #0
 800b8b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b8b6:	f8d9 1000 	ldr.w	r1, [r9]
 800b8ba:	fa1f fb82 	uxth.w	fp, r2
 800b8be:	b289      	uxth	r1, r1
 800b8c0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b8c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b8c8:	f8d9 2000 	ldr.w	r2, [r9]
 800b8cc:	4461      	add	r1, ip
 800b8ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8d2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b8d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b8da:	b289      	uxth	r1, r1
 800b8dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8e0:	4577      	cmp	r7, lr
 800b8e2:	f849 1b04 	str.w	r1, [r9], #4
 800b8e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8ea:	d8e2      	bhi.n	800b8b2 <__multiply+0xb2>
 800b8ec:	9a01      	ldr	r2, [sp, #4]
 800b8ee:	f845 c002 	str.w	ip, [r5, r2]
 800b8f2:	9a03      	ldr	r2, [sp, #12]
 800b8f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b8f8:	3304      	adds	r3, #4
 800b8fa:	f1b9 0f00 	cmp.w	r9, #0
 800b8fe:	d020      	beq.n	800b942 <__multiply+0x142>
 800b900:	6829      	ldr	r1, [r5, #0]
 800b902:	f104 0c14 	add.w	ip, r4, #20
 800b906:	46ae      	mov	lr, r5
 800b908:	f04f 0a00 	mov.w	sl, #0
 800b90c:	f8bc b000 	ldrh.w	fp, [ip]
 800b910:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b914:	fb09 220b 	mla	r2, r9, fp, r2
 800b918:	4492      	add	sl, r2
 800b91a:	b289      	uxth	r1, r1
 800b91c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b920:	f84e 1b04 	str.w	r1, [lr], #4
 800b924:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b928:	f8be 1000 	ldrh.w	r1, [lr]
 800b92c:	0c12      	lsrs	r2, r2, #16
 800b92e:	fb09 1102 	mla	r1, r9, r2, r1
 800b932:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b936:	4567      	cmp	r7, ip
 800b938:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b93c:	d8e6      	bhi.n	800b90c <__multiply+0x10c>
 800b93e:	9a01      	ldr	r2, [sp, #4]
 800b940:	50a9      	str	r1, [r5, r2]
 800b942:	3504      	adds	r5, #4
 800b944:	e79a      	b.n	800b87c <__multiply+0x7c>
 800b946:	3e01      	subs	r6, #1
 800b948:	e79c      	b.n	800b884 <__multiply+0x84>
 800b94a:	bf00      	nop
 800b94c:	0800f469 	.word	0x0800f469
 800b950:	0800f4dc 	.word	0x0800f4dc

0800b954 <__pow5mult>:
 800b954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b958:	4615      	mov	r5, r2
 800b95a:	f012 0203 	ands.w	r2, r2, #3
 800b95e:	4606      	mov	r6, r0
 800b960:	460f      	mov	r7, r1
 800b962:	d007      	beq.n	800b974 <__pow5mult+0x20>
 800b964:	4c25      	ldr	r4, [pc, #148]	; (800b9fc <__pow5mult+0xa8>)
 800b966:	3a01      	subs	r2, #1
 800b968:	2300      	movs	r3, #0
 800b96a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b96e:	f7ff fe9b 	bl	800b6a8 <__multadd>
 800b972:	4607      	mov	r7, r0
 800b974:	10ad      	asrs	r5, r5, #2
 800b976:	d03d      	beq.n	800b9f4 <__pow5mult+0xa0>
 800b978:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b97a:	b97c      	cbnz	r4, 800b99c <__pow5mult+0x48>
 800b97c:	2010      	movs	r0, #16
 800b97e:	f7f8 f813 	bl	80039a8 <__wrap_malloc>
 800b982:	4602      	mov	r2, r0
 800b984:	6270      	str	r0, [r6, #36]	; 0x24
 800b986:	b928      	cbnz	r0, 800b994 <__pow5mult+0x40>
 800b988:	4b1d      	ldr	r3, [pc, #116]	; (800ba00 <__pow5mult+0xac>)
 800b98a:	481e      	ldr	r0, [pc, #120]	; (800ba04 <__pow5mult+0xb0>)
 800b98c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b990:	f000 fb72 	bl	800c078 <__assert_func>
 800b994:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b998:	6004      	str	r4, [r0, #0]
 800b99a:	60c4      	str	r4, [r0, #12]
 800b99c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b9a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9a4:	b94c      	cbnz	r4, 800b9ba <__pow5mult+0x66>
 800b9a6:	f240 2171 	movw	r1, #625	; 0x271
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	f7ff ff12 	bl	800b7d4 <__i2b>
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	6003      	str	r3, [r0, #0]
 800b9ba:	f04f 0900 	mov.w	r9, #0
 800b9be:	07eb      	lsls	r3, r5, #31
 800b9c0:	d50a      	bpl.n	800b9d8 <__pow5mult+0x84>
 800b9c2:	4639      	mov	r1, r7
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	f7ff ff1a 	bl	800b800 <__multiply>
 800b9cc:	4639      	mov	r1, r7
 800b9ce:	4680      	mov	r8, r0
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	f7ff fe47 	bl	800b664 <_Bfree>
 800b9d6:	4647      	mov	r7, r8
 800b9d8:	106d      	asrs	r5, r5, #1
 800b9da:	d00b      	beq.n	800b9f4 <__pow5mult+0xa0>
 800b9dc:	6820      	ldr	r0, [r4, #0]
 800b9de:	b938      	cbnz	r0, 800b9f0 <__pow5mult+0x9c>
 800b9e0:	4622      	mov	r2, r4
 800b9e2:	4621      	mov	r1, r4
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	f7ff ff0b 	bl	800b800 <__multiply>
 800b9ea:	6020      	str	r0, [r4, #0]
 800b9ec:	f8c0 9000 	str.w	r9, [r0]
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	e7e4      	b.n	800b9be <__pow5mult+0x6a>
 800b9f4:	4638      	mov	r0, r7
 800b9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9fa:	bf00      	nop
 800b9fc:	0800f628 	.word	0x0800f628
 800ba00:	0800f3f7 	.word	0x0800f3f7
 800ba04:	0800f4dc 	.word	0x0800f4dc

0800ba08 <__lshift>:
 800ba08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba0c:	460c      	mov	r4, r1
 800ba0e:	6849      	ldr	r1, [r1, #4]
 800ba10:	6923      	ldr	r3, [r4, #16]
 800ba12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba16:	68a3      	ldr	r3, [r4, #8]
 800ba18:	4607      	mov	r7, r0
 800ba1a:	4691      	mov	r9, r2
 800ba1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba20:	f108 0601 	add.w	r6, r8, #1
 800ba24:	42b3      	cmp	r3, r6
 800ba26:	db0b      	blt.n	800ba40 <__lshift+0x38>
 800ba28:	4638      	mov	r0, r7
 800ba2a:	f7ff fddb 	bl	800b5e4 <_Balloc>
 800ba2e:	4605      	mov	r5, r0
 800ba30:	b948      	cbnz	r0, 800ba46 <__lshift+0x3e>
 800ba32:	4602      	mov	r2, r0
 800ba34:	4b2a      	ldr	r3, [pc, #168]	; (800bae0 <__lshift+0xd8>)
 800ba36:	482b      	ldr	r0, [pc, #172]	; (800bae4 <__lshift+0xdc>)
 800ba38:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba3c:	f000 fb1c 	bl	800c078 <__assert_func>
 800ba40:	3101      	adds	r1, #1
 800ba42:	005b      	lsls	r3, r3, #1
 800ba44:	e7ee      	b.n	800ba24 <__lshift+0x1c>
 800ba46:	2300      	movs	r3, #0
 800ba48:	f100 0114 	add.w	r1, r0, #20
 800ba4c:	f100 0210 	add.w	r2, r0, #16
 800ba50:	4618      	mov	r0, r3
 800ba52:	4553      	cmp	r3, sl
 800ba54:	db37      	blt.n	800bac6 <__lshift+0xbe>
 800ba56:	6920      	ldr	r0, [r4, #16]
 800ba58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba5c:	f104 0314 	add.w	r3, r4, #20
 800ba60:	f019 091f 	ands.w	r9, r9, #31
 800ba64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ba6c:	d02f      	beq.n	800bace <__lshift+0xc6>
 800ba6e:	f1c9 0e20 	rsb	lr, r9, #32
 800ba72:	468a      	mov	sl, r1
 800ba74:	f04f 0c00 	mov.w	ip, #0
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	fa02 f209 	lsl.w	r2, r2, r9
 800ba7e:	ea42 020c 	orr.w	r2, r2, ip
 800ba82:	f84a 2b04 	str.w	r2, [sl], #4
 800ba86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba8a:	4298      	cmp	r0, r3
 800ba8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ba90:	d8f2      	bhi.n	800ba78 <__lshift+0x70>
 800ba92:	1b03      	subs	r3, r0, r4
 800ba94:	3b15      	subs	r3, #21
 800ba96:	f023 0303 	bic.w	r3, r3, #3
 800ba9a:	3304      	adds	r3, #4
 800ba9c:	f104 0215 	add.w	r2, r4, #21
 800baa0:	4290      	cmp	r0, r2
 800baa2:	bf38      	it	cc
 800baa4:	2304      	movcc	r3, #4
 800baa6:	f841 c003 	str.w	ip, [r1, r3]
 800baaa:	f1bc 0f00 	cmp.w	ip, #0
 800baae:	d001      	beq.n	800bab4 <__lshift+0xac>
 800bab0:	f108 0602 	add.w	r6, r8, #2
 800bab4:	3e01      	subs	r6, #1
 800bab6:	4638      	mov	r0, r7
 800bab8:	612e      	str	r6, [r5, #16]
 800baba:	4621      	mov	r1, r4
 800babc:	f7ff fdd2 	bl	800b664 <_Bfree>
 800bac0:	4628      	mov	r0, r5
 800bac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac6:	f842 0f04 	str.w	r0, [r2, #4]!
 800baca:	3301      	adds	r3, #1
 800bacc:	e7c1      	b.n	800ba52 <__lshift+0x4a>
 800bace:	3904      	subs	r1, #4
 800bad0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bad4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bad8:	4298      	cmp	r0, r3
 800bada:	d8f9      	bhi.n	800bad0 <__lshift+0xc8>
 800badc:	e7ea      	b.n	800bab4 <__lshift+0xac>
 800bade:	bf00      	nop
 800bae0:	0800f469 	.word	0x0800f469
 800bae4:	0800f4dc 	.word	0x0800f4dc

0800bae8 <__mcmp>:
 800bae8:	b530      	push	{r4, r5, lr}
 800baea:	6902      	ldr	r2, [r0, #16]
 800baec:	690c      	ldr	r4, [r1, #16]
 800baee:	1b12      	subs	r2, r2, r4
 800baf0:	d10e      	bne.n	800bb10 <__mcmp+0x28>
 800baf2:	f100 0314 	add.w	r3, r0, #20
 800baf6:	3114      	adds	r1, #20
 800baf8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bafc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb08:	42a5      	cmp	r5, r4
 800bb0a:	d003      	beq.n	800bb14 <__mcmp+0x2c>
 800bb0c:	d305      	bcc.n	800bb1a <__mcmp+0x32>
 800bb0e:	2201      	movs	r2, #1
 800bb10:	4610      	mov	r0, r2
 800bb12:	bd30      	pop	{r4, r5, pc}
 800bb14:	4283      	cmp	r3, r0
 800bb16:	d3f3      	bcc.n	800bb00 <__mcmp+0x18>
 800bb18:	e7fa      	b.n	800bb10 <__mcmp+0x28>
 800bb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb1e:	e7f7      	b.n	800bb10 <__mcmp+0x28>

0800bb20 <__mdiff>:
 800bb20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	460c      	mov	r4, r1
 800bb26:	4606      	mov	r6, r0
 800bb28:	4611      	mov	r1, r2
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	4690      	mov	r8, r2
 800bb2e:	f7ff ffdb 	bl	800bae8 <__mcmp>
 800bb32:	1e05      	subs	r5, r0, #0
 800bb34:	d110      	bne.n	800bb58 <__mdiff+0x38>
 800bb36:	4629      	mov	r1, r5
 800bb38:	4630      	mov	r0, r6
 800bb3a:	f7ff fd53 	bl	800b5e4 <_Balloc>
 800bb3e:	b930      	cbnz	r0, 800bb4e <__mdiff+0x2e>
 800bb40:	4b3a      	ldr	r3, [pc, #232]	; (800bc2c <__mdiff+0x10c>)
 800bb42:	4602      	mov	r2, r0
 800bb44:	f240 2132 	movw	r1, #562	; 0x232
 800bb48:	4839      	ldr	r0, [pc, #228]	; (800bc30 <__mdiff+0x110>)
 800bb4a:	f000 fa95 	bl	800c078 <__assert_func>
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb58:	bfa4      	itt	ge
 800bb5a:	4643      	movge	r3, r8
 800bb5c:	46a0      	movge	r8, r4
 800bb5e:	4630      	mov	r0, r6
 800bb60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb64:	bfa6      	itte	ge
 800bb66:	461c      	movge	r4, r3
 800bb68:	2500      	movge	r5, #0
 800bb6a:	2501      	movlt	r5, #1
 800bb6c:	f7ff fd3a 	bl	800b5e4 <_Balloc>
 800bb70:	b920      	cbnz	r0, 800bb7c <__mdiff+0x5c>
 800bb72:	4b2e      	ldr	r3, [pc, #184]	; (800bc2c <__mdiff+0x10c>)
 800bb74:	4602      	mov	r2, r0
 800bb76:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bb7a:	e7e5      	b.n	800bb48 <__mdiff+0x28>
 800bb7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb80:	6926      	ldr	r6, [r4, #16]
 800bb82:	60c5      	str	r5, [r0, #12]
 800bb84:	f104 0914 	add.w	r9, r4, #20
 800bb88:	f108 0514 	add.w	r5, r8, #20
 800bb8c:	f100 0e14 	add.w	lr, r0, #20
 800bb90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb98:	f108 0210 	add.w	r2, r8, #16
 800bb9c:	46f2      	mov	sl, lr
 800bb9e:	2100      	movs	r1, #0
 800bba0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bba4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bba8:	fa1f f883 	uxth.w	r8, r3
 800bbac:	fa11 f18b 	uxtah	r1, r1, fp
 800bbb0:	0c1b      	lsrs	r3, r3, #16
 800bbb2:	eba1 0808 	sub.w	r8, r1, r8
 800bbb6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bbba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bbbe:	fa1f f888 	uxth.w	r8, r8
 800bbc2:	1419      	asrs	r1, r3, #16
 800bbc4:	454e      	cmp	r6, r9
 800bbc6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bbca:	f84a 3b04 	str.w	r3, [sl], #4
 800bbce:	d8e7      	bhi.n	800bba0 <__mdiff+0x80>
 800bbd0:	1b33      	subs	r3, r6, r4
 800bbd2:	3b15      	subs	r3, #21
 800bbd4:	f023 0303 	bic.w	r3, r3, #3
 800bbd8:	3304      	adds	r3, #4
 800bbda:	3415      	adds	r4, #21
 800bbdc:	42a6      	cmp	r6, r4
 800bbde:	bf38      	it	cc
 800bbe0:	2304      	movcc	r3, #4
 800bbe2:	441d      	add	r5, r3
 800bbe4:	4473      	add	r3, lr
 800bbe6:	469e      	mov	lr, r3
 800bbe8:	462e      	mov	r6, r5
 800bbea:	4566      	cmp	r6, ip
 800bbec:	d30e      	bcc.n	800bc0c <__mdiff+0xec>
 800bbee:	f10c 0203 	add.w	r2, ip, #3
 800bbf2:	1b52      	subs	r2, r2, r5
 800bbf4:	f022 0203 	bic.w	r2, r2, #3
 800bbf8:	3d03      	subs	r5, #3
 800bbfa:	45ac      	cmp	ip, r5
 800bbfc:	bf38      	it	cc
 800bbfe:	2200      	movcc	r2, #0
 800bc00:	441a      	add	r2, r3
 800bc02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bc06:	b17b      	cbz	r3, 800bc28 <__mdiff+0x108>
 800bc08:	6107      	str	r7, [r0, #16]
 800bc0a:	e7a3      	b.n	800bb54 <__mdiff+0x34>
 800bc0c:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc10:	fa11 f288 	uxtah	r2, r1, r8
 800bc14:	1414      	asrs	r4, r2, #16
 800bc16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc1a:	b292      	uxth	r2, r2
 800bc1c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc20:	f84e 2b04 	str.w	r2, [lr], #4
 800bc24:	1421      	asrs	r1, r4, #16
 800bc26:	e7e0      	b.n	800bbea <__mdiff+0xca>
 800bc28:	3f01      	subs	r7, #1
 800bc2a:	e7ea      	b.n	800bc02 <__mdiff+0xe2>
 800bc2c:	0800f469 	.word	0x0800f469
 800bc30:	0800f4dc 	.word	0x0800f4dc

0800bc34 <__d2b>:
 800bc34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc38:	4689      	mov	r9, r1
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	ec57 6b10 	vmov	r6, r7, d0
 800bc40:	4690      	mov	r8, r2
 800bc42:	f7ff fccf 	bl	800b5e4 <_Balloc>
 800bc46:	4604      	mov	r4, r0
 800bc48:	b930      	cbnz	r0, 800bc58 <__d2b+0x24>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	4b25      	ldr	r3, [pc, #148]	; (800bce4 <__d2b+0xb0>)
 800bc4e:	4826      	ldr	r0, [pc, #152]	; (800bce8 <__d2b+0xb4>)
 800bc50:	f240 310a 	movw	r1, #778	; 0x30a
 800bc54:	f000 fa10 	bl	800c078 <__assert_func>
 800bc58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bc5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc60:	bb35      	cbnz	r5, 800bcb0 <__d2b+0x7c>
 800bc62:	2e00      	cmp	r6, #0
 800bc64:	9301      	str	r3, [sp, #4]
 800bc66:	d028      	beq.n	800bcba <__d2b+0x86>
 800bc68:	4668      	mov	r0, sp
 800bc6a:	9600      	str	r6, [sp, #0]
 800bc6c:	f7ff fd82 	bl	800b774 <__lo0bits>
 800bc70:	9900      	ldr	r1, [sp, #0]
 800bc72:	b300      	cbz	r0, 800bcb6 <__d2b+0x82>
 800bc74:	9a01      	ldr	r2, [sp, #4]
 800bc76:	f1c0 0320 	rsb	r3, r0, #32
 800bc7a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc7e:	430b      	orrs	r3, r1
 800bc80:	40c2      	lsrs	r2, r0
 800bc82:	6163      	str	r3, [r4, #20]
 800bc84:	9201      	str	r2, [sp, #4]
 800bc86:	9b01      	ldr	r3, [sp, #4]
 800bc88:	61a3      	str	r3, [r4, #24]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	bf14      	ite	ne
 800bc8e:	2202      	movne	r2, #2
 800bc90:	2201      	moveq	r2, #1
 800bc92:	6122      	str	r2, [r4, #16]
 800bc94:	b1d5      	cbz	r5, 800bccc <__d2b+0x98>
 800bc96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc9a:	4405      	add	r5, r0
 800bc9c:	f8c9 5000 	str.w	r5, [r9]
 800bca0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bca4:	f8c8 0000 	str.w	r0, [r8]
 800bca8:	4620      	mov	r0, r4
 800bcaa:	b003      	add	sp, #12
 800bcac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcb4:	e7d5      	b.n	800bc62 <__d2b+0x2e>
 800bcb6:	6161      	str	r1, [r4, #20]
 800bcb8:	e7e5      	b.n	800bc86 <__d2b+0x52>
 800bcba:	a801      	add	r0, sp, #4
 800bcbc:	f7ff fd5a 	bl	800b774 <__lo0bits>
 800bcc0:	9b01      	ldr	r3, [sp, #4]
 800bcc2:	6163      	str	r3, [r4, #20]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	6122      	str	r2, [r4, #16]
 800bcc8:	3020      	adds	r0, #32
 800bcca:	e7e3      	b.n	800bc94 <__d2b+0x60>
 800bccc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bcd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bcd4:	f8c9 0000 	str.w	r0, [r9]
 800bcd8:	6918      	ldr	r0, [r3, #16]
 800bcda:	f7ff fd2b 	bl	800b734 <__hi0bits>
 800bcde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bce2:	e7df      	b.n	800bca4 <__d2b+0x70>
 800bce4:	0800f469 	.word	0x0800f469
 800bce8:	0800f4dc 	.word	0x0800f4dc

0800bcec <_calloc_r>:
 800bcec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcee:	fba1 2402 	umull	r2, r4, r1, r2
 800bcf2:	b94c      	cbnz	r4, 800bd08 <_calloc_r+0x1c>
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	9201      	str	r2, [sp, #4]
 800bcf8:	f7fd fd78 	bl	80097ec <_malloc_r>
 800bcfc:	9a01      	ldr	r2, [sp, #4]
 800bcfe:	4605      	mov	r5, r0
 800bd00:	b930      	cbnz	r0, 800bd10 <_calloc_r+0x24>
 800bd02:	4628      	mov	r0, r5
 800bd04:	b003      	add	sp, #12
 800bd06:	bd30      	pop	{r4, r5, pc}
 800bd08:	220c      	movs	r2, #12
 800bd0a:	6002      	str	r2, [r0, #0]
 800bd0c:	2500      	movs	r5, #0
 800bd0e:	e7f8      	b.n	800bd02 <_calloc_r+0x16>
 800bd10:	4621      	mov	r1, r4
 800bd12:	f7fd fcf7 	bl	8009704 <memset>
 800bd16:	e7f4      	b.n	800bd02 <_calloc_r+0x16>

0800bd18 <__sfputc_r>:
 800bd18:	6893      	ldr	r3, [r2, #8]
 800bd1a:	3b01      	subs	r3, #1
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	b410      	push	{r4}
 800bd20:	6093      	str	r3, [r2, #8]
 800bd22:	da08      	bge.n	800bd36 <__sfputc_r+0x1e>
 800bd24:	6994      	ldr	r4, [r2, #24]
 800bd26:	42a3      	cmp	r3, r4
 800bd28:	db01      	blt.n	800bd2e <__sfputc_r+0x16>
 800bd2a:	290a      	cmp	r1, #10
 800bd2c:	d103      	bne.n	800bd36 <__sfputc_r+0x1e>
 800bd2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd32:	f7fe baeb 	b.w	800a30c <__swbuf_r>
 800bd36:	6813      	ldr	r3, [r2, #0]
 800bd38:	1c58      	adds	r0, r3, #1
 800bd3a:	6010      	str	r0, [r2, #0]
 800bd3c:	7019      	strb	r1, [r3, #0]
 800bd3e:	4608      	mov	r0, r1
 800bd40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd44:	4770      	bx	lr

0800bd46 <__sfputs_r>:
 800bd46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd48:	4606      	mov	r6, r0
 800bd4a:	460f      	mov	r7, r1
 800bd4c:	4614      	mov	r4, r2
 800bd4e:	18d5      	adds	r5, r2, r3
 800bd50:	42ac      	cmp	r4, r5
 800bd52:	d101      	bne.n	800bd58 <__sfputs_r+0x12>
 800bd54:	2000      	movs	r0, #0
 800bd56:	e007      	b.n	800bd68 <__sfputs_r+0x22>
 800bd58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd5c:	463a      	mov	r2, r7
 800bd5e:	4630      	mov	r0, r6
 800bd60:	f7ff ffda 	bl	800bd18 <__sfputc_r>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d1f3      	bne.n	800bd50 <__sfputs_r+0xa>
 800bd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd6c <_vfiprintf_r>:
 800bd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd70:	460d      	mov	r5, r1
 800bd72:	b09d      	sub	sp, #116	; 0x74
 800bd74:	4614      	mov	r4, r2
 800bd76:	4698      	mov	r8, r3
 800bd78:	4606      	mov	r6, r0
 800bd7a:	b118      	cbz	r0, 800bd84 <_vfiprintf_r+0x18>
 800bd7c:	6983      	ldr	r3, [r0, #24]
 800bd7e:	b90b      	cbnz	r3, 800bd84 <_vfiprintf_r+0x18>
 800bd80:	f7ff fb1a 	bl	800b3b8 <__sinit>
 800bd84:	4b89      	ldr	r3, [pc, #548]	; (800bfac <_vfiprintf_r+0x240>)
 800bd86:	429d      	cmp	r5, r3
 800bd88:	d11b      	bne.n	800bdc2 <_vfiprintf_r+0x56>
 800bd8a:	6875      	ldr	r5, [r6, #4]
 800bd8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd8e:	07d9      	lsls	r1, r3, #31
 800bd90:	d405      	bmi.n	800bd9e <_vfiprintf_r+0x32>
 800bd92:	89ab      	ldrh	r3, [r5, #12]
 800bd94:	059a      	lsls	r2, r3, #22
 800bd96:	d402      	bmi.n	800bd9e <_vfiprintf_r+0x32>
 800bd98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd9a:	f7ff fbb0 	bl	800b4fe <__retarget_lock_acquire_recursive>
 800bd9e:	89ab      	ldrh	r3, [r5, #12]
 800bda0:	071b      	lsls	r3, r3, #28
 800bda2:	d501      	bpl.n	800bda8 <_vfiprintf_r+0x3c>
 800bda4:	692b      	ldr	r3, [r5, #16]
 800bda6:	b9eb      	cbnz	r3, 800bde4 <_vfiprintf_r+0x78>
 800bda8:	4629      	mov	r1, r5
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f7fe fb00 	bl	800a3b0 <__swsetup_r>
 800bdb0:	b1c0      	cbz	r0, 800bde4 <_vfiprintf_r+0x78>
 800bdb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdb4:	07dc      	lsls	r4, r3, #31
 800bdb6:	d50e      	bpl.n	800bdd6 <_vfiprintf_r+0x6a>
 800bdb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbc:	b01d      	add	sp, #116	; 0x74
 800bdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc2:	4b7b      	ldr	r3, [pc, #492]	; (800bfb0 <_vfiprintf_r+0x244>)
 800bdc4:	429d      	cmp	r5, r3
 800bdc6:	d101      	bne.n	800bdcc <_vfiprintf_r+0x60>
 800bdc8:	68b5      	ldr	r5, [r6, #8]
 800bdca:	e7df      	b.n	800bd8c <_vfiprintf_r+0x20>
 800bdcc:	4b79      	ldr	r3, [pc, #484]	; (800bfb4 <_vfiprintf_r+0x248>)
 800bdce:	429d      	cmp	r5, r3
 800bdd0:	bf08      	it	eq
 800bdd2:	68f5      	ldreq	r5, [r6, #12]
 800bdd4:	e7da      	b.n	800bd8c <_vfiprintf_r+0x20>
 800bdd6:	89ab      	ldrh	r3, [r5, #12]
 800bdd8:	0598      	lsls	r0, r3, #22
 800bdda:	d4ed      	bmi.n	800bdb8 <_vfiprintf_r+0x4c>
 800bddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdde:	f7ff fb8f 	bl	800b500 <__retarget_lock_release_recursive>
 800bde2:	e7e9      	b.n	800bdb8 <_vfiprintf_r+0x4c>
 800bde4:	2300      	movs	r3, #0
 800bde6:	9309      	str	r3, [sp, #36]	; 0x24
 800bde8:	2320      	movs	r3, #32
 800bdea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdee:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdf2:	2330      	movs	r3, #48	; 0x30
 800bdf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bfb8 <_vfiprintf_r+0x24c>
 800bdf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdfc:	f04f 0901 	mov.w	r9, #1
 800be00:	4623      	mov	r3, r4
 800be02:	469a      	mov	sl, r3
 800be04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be08:	b10a      	cbz	r2, 800be0e <_vfiprintf_r+0xa2>
 800be0a:	2a25      	cmp	r2, #37	; 0x25
 800be0c:	d1f9      	bne.n	800be02 <_vfiprintf_r+0x96>
 800be0e:	ebba 0b04 	subs.w	fp, sl, r4
 800be12:	d00b      	beq.n	800be2c <_vfiprintf_r+0xc0>
 800be14:	465b      	mov	r3, fp
 800be16:	4622      	mov	r2, r4
 800be18:	4629      	mov	r1, r5
 800be1a:	4630      	mov	r0, r6
 800be1c:	f7ff ff93 	bl	800bd46 <__sfputs_r>
 800be20:	3001      	adds	r0, #1
 800be22:	f000 80aa 	beq.w	800bf7a <_vfiprintf_r+0x20e>
 800be26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be28:	445a      	add	r2, fp
 800be2a:	9209      	str	r2, [sp, #36]	; 0x24
 800be2c:	f89a 3000 	ldrb.w	r3, [sl]
 800be30:	2b00      	cmp	r3, #0
 800be32:	f000 80a2 	beq.w	800bf7a <_vfiprintf_r+0x20e>
 800be36:	2300      	movs	r3, #0
 800be38:	f04f 32ff 	mov.w	r2, #4294967295
 800be3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be40:	f10a 0a01 	add.w	sl, sl, #1
 800be44:	9304      	str	r3, [sp, #16]
 800be46:	9307      	str	r3, [sp, #28]
 800be48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be4c:	931a      	str	r3, [sp, #104]	; 0x68
 800be4e:	4654      	mov	r4, sl
 800be50:	2205      	movs	r2, #5
 800be52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be56:	4858      	ldr	r0, [pc, #352]	; (800bfb8 <_vfiprintf_r+0x24c>)
 800be58:	f7f4 f9c2 	bl	80001e0 <memchr>
 800be5c:	9a04      	ldr	r2, [sp, #16]
 800be5e:	b9d8      	cbnz	r0, 800be98 <_vfiprintf_r+0x12c>
 800be60:	06d1      	lsls	r1, r2, #27
 800be62:	bf44      	itt	mi
 800be64:	2320      	movmi	r3, #32
 800be66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be6a:	0713      	lsls	r3, r2, #28
 800be6c:	bf44      	itt	mi
 800be6e:	232b      	movmi	r3, #43	; 0x2b
 800be70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be74:	f89a 3000 	ldrb.w	r3, [sl]
 800be78:	2b2a      	cmp	r3, #42	; 0x2a
 800be7a:	d015      	beq.n	800bea8 <_vfiprintf_r+0x13c>
 800be7c:	9a07      	ldr	r2, [sp, #28]
 800be7e:	4654      	mov	r4, sl
 800be80:	2000      	movs	r0, #0
 800be82:	f04f 0c0a 	mov.w	ip, #10
 800be86:	4621      	mov	r1, r4
 800be88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be8c:	3b30      	subs	r3, #48	; 0x30
 800be8e:	2b09      	cmp	r3, #9
 800be90:	d94e      	bls.n	800bf30 <_vfiprintf_r+0x1c4>
 800be92:	b1b0      	cbz	r0, 800bec2 <_vfiprintf_r+0x156>
 800be94:	9207      	str	r2, [sp, #28]
 800be96:	e014      	b.n	800bec2 <_vfiprintf_r+0x156>
 800be98:	eba0 0308 	sub.w	r3, r0, r8
 800be9c:	fa09 f303 	lsl.w	r3, r9, r3
 800bea0:	4313      	orrs	r3, r2
 800bea2:	9304      	str	r3, [sp, #16]
 800bea4:	46a2      	mov	sl, r4
 800bea6:	e7d2      	b.n	800be4e <_vfiprintf_r+0xe2>
 800bea8:	9b03      	ldr	r3, [sp, #12]
 800beaa:	1d19      	adds	r1, r3, #4
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	9103      	str	r1, [sp, #12]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	bfbb      	ittet	lt
 800beb4:	425b      	neglt	r3, r3
 800beb6:	f042 0202 	orrlt.w	r2, r2, #2
 800beba:	9307      	strge	r3, [sp, #28]
 800bebc:	9307      	strlt	r3, [sp, #28]
 800bebe:	bfb8      	it	lt
 800bec0:	9204      	strlt	r2, [sp, #16]
 800bec2:	7823      	ldrb	r3, [r4, #0]
 800bec4:	2b2e      	cmp	r3, #46	; 0x2e
 800bec6:	d10c      	bne.n	800bee2 <_vfiprintf_r+0x176>
 800bec8:	7863      	ldrb	r3, [r4, #1]
 800beca:	2b2a      	cmp	r3, #42	; 0x2a
 800becc:	d135      	bne.n	800bf3a <_vfiprintf_r+0x1ce>
 800bece:	9b03      	ldr	r3, [sp, #12]
 800bed0:	1d1a      	adds	r2, r3, #4
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	9203      	str	r2, [sp, #12]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	bfb8      	it	lt
 800beda:	f04f 33ff 	movlt.w	r3, #4294967295
 800bede:	3402      	adds	r4, #2
 800bee0:	9305      	str	r3, [sp, #20]
 800bee2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bfc8 <_vfiprintf_r+0x25c>
 800bee6:	7821      	ldrb	r1, [r4, #0]
 800bee8:	2203      	movs	r2, #3
 800beea:	4650      	mov	r0, sl
 800beec:	f7f4 f978 	bl	80001e0 <memchr>
 800bef0:	b140      	cbz	r0, 800bf04 <_vfiprintf_r+0x198>
 800bef2:	2340      	movs	r3, #64	; 0x40
 800bef4:	eba0 000a 	sub.w	r0, r0, sl
 800bef8:	fa03 f000 	lsl.w	r0, r3, r0
 800befc:	9b04      	ldr	r3, [sp, #16]
 800befe:	4303      	orrs	r3, r0
 800bf00:	3401      	adds	r4, #1
 800bf02:	9304      	str	r3, [sp, #16]
 800bf04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf08:	482c      	ldr	r0, [pc, #176]	; (800bfbc <_vfiprintf_r+0x250>)
 800bf0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf0e:	2206      	movs	r2, #6
 800bf10:	f7f4 f966 	bl	80001e0 <memchr>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d03f      	beq.n	800bf98 <_vfiprintf_r+0x22c>
 800bf18:	4b29      	ldr	r3, [pc, #164]	; (800bfc0 <_vfiprintf_r+0x254>)
 800bf1a:	bb1b      	cbnz	r3, 800bf64 <_vfiprintf_r+0x1f8>
 800bf1c:	9b03      	ldr	r3, [sp, #12]
 800bf1e:	3307      	adds	r3, #7
 800bf20:	f023 0307 	bic.w	r3, r3, #7
 800bf24:	3308      	adds	r3, #8
 800bf26:	9303      	str	r3, [sp, #12]
 800bf28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf2a:	443b      	add	r3, r7
 800bf2c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf2e:	e767      	b.n	800be00 <_vfiprintf_r+0x94>
 800bf30:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf34:	460c      	mov	r4, r1
 800bf36:	2001      	movs	r0, #1
 800bf38:	e7a5      	b.n	800be86 <_vfiprintf_r+0x11a>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	3401      	adds	r4, #1
 800bf3e:	9305      	str	r3, [sp, #20]
 800bf40:	4619      	mov	r1, r3
 800bf42:	f04f 0c0a 	mov.w	ip, #10
 800bf46:	4620      	mov	r0, r4
 800bf48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf4c:	3a30      	subs	r2, #48	; 0x30
 800bf4e:	2a09      	cmp	r2, #9
 800bf50:	d903      	bls.n	800bf5a <_vfiprintf_r+0x1ee>
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d0c5      	beq.n	800bee2 <_vfiprintf_r+0x176>
 800bf56:	9105      	str	r1, [sp, #20]
 800bf58:	e7c3      	b.n	800bee2 <_vfiprintf_r+0x176>
 800bf5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf5e:	4604      	mov	r4, r0
 800bf60:	2301      	movs	r3, #1
 800bf62:	e7f0      	b.n	800bf46 <_vfiprintf_r+0x1da>
 800bf64:	ab03      	add	r3, sp, #12
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	462a      	mov	r2, r5
 800bf6a:	4b16      	ldr	r3, [pc, #88]	; (800bfc4 <_vfiprintf_r+0x258>)
 800bf6c:	a904      	add	r1, sp, #16
 800bf6e:	4630      	mov	r0, r6
 800bf70:	f7fd fd50 	bl	8009a14 <_printf_float>
 800bf74:	4607      	mov	r7, r0
 800bf76:	1c78      	adds	r0, r7, #1
 800bf78:	d1d6      	bne.n	800bf28 <_vfiprintf_r+0x1bc>
 800bf7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf7c:	07d9      	lsls	r1, r3, #31
 800bf7e:	d405      	bmi.n	800bf8c <_vfiprintf_r+0x220>
 800bf80:	89ab      	ldrh	r3, [r5, #12]
 800bf82:	059a      	lsls	r2, r3, #22
 800bf84:	d402      	bmi.n	800bf8c <_vfiprintf_r+0x220>
 800bf86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf88:	f7ff faba 	bl	800b500 <__retarget_lock_release_recursive>
 800bf8c:	89ab      	ldrh	r3, [r5, #12]
 800bf8e:	065b      	lsls	r3, r3, #25
 800bf90:	f53f af12 	bmi.w	800bdb8 <_vfiprintf_r+0x4c>
 800bf94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf96:	e711      	b.n	800bdbc <_vfiprintf_r+0x50>
 800bf98:	ab03      	add	r3, sp, #12
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	462a      	mov	r2, r5
 800bf9e:	4b09      	ldr	r3, [pc, #36]	; (800bfc4 <_vfiprintf_r+0x258>)
 800bfa0:	a904      	add	r1, sp, #16
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	f7fd ffda 	bl	8009f5c <_printf_i>
 800bfa8:	e7e4      	b.n	800bf74 <_vfiprintf_r+0x208>
 800bfaa:	bf00      	nop
 800bfac:	0800f49c 	.word	0x0800f49c
 800bfb0:	0800f4bc 	.word	0x0800f4bc
 800bfb4:	0800f47c 	.word	0x0800f47c
 800bfb8:	0800f634 	.word	0x0800f634
 800bfbc:	0800f63e 	.word	0x0800f63e
 800bfc0:	08009a15 	.word	0x08009a15
 800bfc4:	0800bd47 	.word	0x0800bd47
 800bfc8:	0800f63a 	.word	0x0800f63a

0800bfcc <__sread>:
 800bfcc:	b510      	push	{r4, lr}
 800bfce:	460c      	mov	r4, r1
 800bfd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd4:	f000 f8d6 	bl	800c184 <_read_r>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	bfab      	itete	ge
 800bfdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bfde:	89a3      	ldrhlt	r3, [r4, #12]
 800bfe0:	181b      	addge	r3, r3, r0
 800bfe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bfe6:	bfac      	ite	ge
 800bfe8:	6563      	strge	r3, [r4, #84]	; 0x54
 800bfea:	81a3      	strhlt	r3, [r4, #12]
 800bfec:	bd10      	pop	{r4, pc}

0800bfee <__swrite>:
 800bfee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bff2:	461f      	mov	r7, r3
 800bff4:	898b      	ldrh	r3, [r1, #12]
 800bff6:	05db      	lsls	r3, r3, #23
 800bff8:	4605      	mov	r5, r0
 800bffa:	460c      	mov	r4, r1
 800bffc:	4616      	mov	r6, r2
 800bffe:	d505      	bpl.n	800c00c <__swrite+0x1e>
 800c000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c004:	2302      	movs	r3, #2
 800c006:	2200      	movs	r2, #0
 800c008:	f000 f898 	bl	800c13c <_lseek_r>
 800c00c:	89a3      	ldrh	r3, [r4, #12]
 800c00e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c016:	81a3      	strh	r3, [r4, #12]
 800c018:	4632      	mov	r2, r6
 800c01a:	463b      	mov	r3, r7
 800c01c:	4628      	mov	r0, r5
 800c01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c022:	f000 b817 	b.w	800c054 <_write_r>

0800c026 <__sseek>:
 800c026:	b510      	push	{r4, lr}
 800c028:	460c      	mov	r4, r1
 800c02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c02e:	f000 f885 	bl	800c13c <_lseek_r>
 800c032:	1c43      	adds	r3, r0, #1
 800c034:	89a3      	ldrh	r3, [r4, #12]
 800c036:	bf15      	itete	ne
 800c038:	6560      	strne	r0, [r4, #84]	; 0x54
 800c03a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c03e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c042:	81a3      	strheq	r3, [r4, #12]
 800c044:	bf18      	it	ne
 800c046:	81a3      	strhne	r3, [r4, #12]
 800c048:	bd10      	pop	{r4, pc}

0800c04a <__sclose>:
 800c04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c04e:	f000 b831 	b.w	800c0b4 <_close_r>
	...

0800c054 <_write_r>:
 800c054:	b538      	push	{r3, r4, r5, lr}
 800c056:	4d07      	ldr	r5, [pc, #28]	; (800c074 <_write_r+0x20>)
 800c058:	4604      	mov	r4, r0
 800c05a:	4608      	mov	r0, r1
 800c05c:	4611      	mov	r1, r2
 800c05e:	2200      	movs	r2, #0
 800c060:	602a      	str	r2, [r5, #0]
 800c062:	461a      	mov	r2, r3
 800c064:	f7f7 fc80 	bl	8003968 <_write>
 800c068:	1c43      	adds	r3, r0, #1
 800c06a:	d102      	bne.n	800c072 <_write_r+0x1e>
 800c06c:	682b      	ldr	r3, [r5, #0]
 800c06e:	b103      	cbz	r3, 800c072 <_write_r+0x1e>
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	bd38      	pop	{r3, r4, r5, pc}
 800c074:	2000161c 	.word	0x2000161c

0800c078 <__assert_func>:
 800c078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c07a:	4614      	mov	r4, r2
 800c07c:	461a      	mov	r2, r3
 800c07e:	4b09      	ldr	r3, [pc, #36]	; (800c0a4 <__assert_func+0x2c>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4605      	mov	r5, r0
 800c084:	68d8      	ldr	r0, [r3, #12]
 800c086:	b14c      	cbz	r4, 800c09c <__assert_func+0x24>
 800c088:	4b07      	ldr	r3, [pc, #28]	; (800c0a8 <__assert_func+0x30>)
 800c08a:	9100      	str	r1, [sp, #0]
 800c08c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c090:	4906      	ldr	r1, [pc, #24]	; (800c0ac <__assert_func+0x34>)
 800c092:	462b      	mov	r3, r5
 800c094:	f000 f81e 	bl	800c0d4 <fiprintf>
 800c098:	f000 f893 	bl	800c1c2 <abort>
 800c09c:	4b04      	ldr	r3, [pc, #16]	; (800c0b0 <__assert_func+0x38>)
 800c09e:	461c      	mov	r4, r3
 800c0a0:	e7f3      	b.n	800c08a <__assert_func+0x12>
 800c0a2:	bf00      	nop
 800c0a4:	200008f4 	.word	0x200008f4
 800c0a8:	0800f645 	.word	0x0800f645
 800c0ac:	0800f652 	.word	0x0800f652
 800c0b0:	0800ccea 	.word	0x0800ccea

0800c0b4 <_close_r>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	4d06      	ldr	r5, [pc, #24]	; (800c0d0 <_close_r+0x1c>)
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	4608      	mov	r0, r1
 800c0be:	602b      	str	r3, [r5, #0]
 800c0c0:	f000 f9fe 	bl	800c4c0 <_close>
 800c0c4:	1c43      	adds	r3, r0, #1
 800c0c6:	d102      	bne.n	800c0ce <_close_r+0x1a>
 800c0c8:	682b      	ldr	r3, [r5, #0]
 800c0ca:	b103      	cbz	r3, 800c0ce <_close_r+0x1a>
 800c0cc:	6023      	str	r3, [r4, #0]
 800c0ce:	bd38      	pop	{r3, r4, r5, pc}
 800c0d0:	2000161c 	.word	0x2000161c

0800c0d4 <fiprintf>:
 800c0d4:	b40e      	push	{r1, r2, r3}
 800c0d6:	b503      	push	{r0, r1, lr}
 800c0d8:	4601      	mov	r1, r0
 800c0da:	ab03      	add	r3, sp, #12
 800c0dc:	4805      	ldr	r0, [pc, #20]	; (800c0f4 <fiprintf+0x20>)
 800c0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0e2:	6800      	ldr	r0, [r0, #0]
 800c0e4:	9301      	str	r3, [sp, #4]
 800c0e6:	f7ff fe41 	bl	800bd6c <_vfiprintf_r>
 800c0ea:	b002      	add	sp, #8
 800c0ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0f0:	b003      	add	sp, #12
 800c0f2:	4770      	bx	lr
 800c0f4:	200008f4 	.word	0x200008f4

0800c0f8 <_fstat_r>:
 800c0f8:	b538      	push	{r3, r4, r5, lr}
 800c0fa:	4d07      	ldr	r5, [pc, #28]	; (800c118 <_fstat_r+0x20>)
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	4604      	mov	r4, r0
 800c100:	4608      	mov	r0, r1
 800c102:	4611      	mov	r1, r2
 800c104:	602b      	str	r3, [r5, #0]
 800c106:	f000 f9e3 	bl	800c4d0 <_fstat>
 800c10a:	1c43      	adds	r3, r0, #1
 800c10c:	d102      	bne.n	800c114 <_fstat_r+0x1c>
 800c10e:	682b      	ldr	r3, [r5, #0]
 800c110:	b103      	cbz	r3, 800c114 <_fstat_r+0x1c>
 800c112:	6023      	str	r3, [r4, #0]
 800c114:	bd38      	pop	{r3, r4, r5, pc}
 800c116:	bf00      	nop
 800c118:	2000161c 	.word	0x2000161c

0800c11c <_isatty_r>:
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4d06      	ldr	r5, [pc, #24]	; (800c138 <_isatty_r+0x1c>)
 800c120:	2300      	movs	r3, #0
 800c122:	4604      	mov	r4, r0
 800c124:	4608      	mov	r0, r1
 800c126:	602b      	str	r3, [r5, #0]
 800c128:	f000 f9e2 	bl	800c4f0 <_isatty>
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	d102      	bne.n	800c136 <_isatty_r+0x1a>
 800c130:	682b      	ldr	r3, [r5, #0]
 800c132:	b103      	cbz	r3, 800c136 <_isatty_r+0x1a>
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	bd38      	pop	{r3, r4, r5, pc}
 800c138:	2000161c 	.word	0x2000161c

0800c13c <_lseek_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	4d07      	ldr	r5, [pc, #28]	; (800c15c <_lseek_r+0x20>)
 800c140:	4604      	mov	r4, r0
 800c142:	4608      	mov	r0, r1
 800c144:	4611      	mov	r1, r2
 800c146:	2200      	movs	r2, #0
 800c148:	602a      	str	r2, [r5, #0]
 800c14a:	461a      	mov	r2, r3
 800c14c:	f000 f9e0 	bl	800c510 <_lseek>
 800c150:	1c43      	adds	r3, r0, #1
 800c152:	d102      	bne.n	800c15a <_lseek_r+0x1e>
 800c154:	682b      	ldr	r3, [r5, #0]
 800c156:	b103      	cbz	r3, 800c15a <_lseek_r+0x1e>
 800c158:	6023      	str	r3, [r4, #0]
 800c15a:	bd38      	pop	{r3, r4, r5, pc}
 800c15c:	2000161c 	.word	0x2000161c

0800c160 <__ascii_mbtowc>:
 800c160:	b082      	sub	sp, #8
 800c162:	b901      	cbnz	r1, 800c166 <__ascii_mbtowc+0x6>
 800c164:	a901      	add	r1, sp, #4
 800c166:	b142      	cbz	r2, 800c17a <__ascii_mbtowc+0x1a>
 800c168:	b14b      	cbz	r3, 800c17e <__ascii_mbtowc+0x1e>
 800c16a:	7813      	ldrb	r3, [r2, #0]
 800c16c:	600b      	str	r3, [r1, #0]
 800c16e:	7812      	ldrb	r2, [r2, #0]
 800c170:	1e10      	subs	r0, r2, #0
 800c172:	bf18      	it	ne
 800c174:	2001      	movne	r0, #1
 800c176:	b002      	add	sp, #8
 800c178:	4770      	bx	lr
 800c17a:	4610      	mov	r0, r2
 800c17c:	e7fb      	b.n	800c176 <__ascii_mbtowc+0x16>
 800c17e:	f06f 0001 	mvn.w	r0, #1
 800c182:	e7f8      	b.n	800c176 <__ascii_mbtowc+0x16>

0800c184 <_read_r>:
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4d07      	ldr	r5, [pc, #28]	; (800c1a4 <_read_r+0x20>)
 800c188:	4604      	mov	r4, r0
 800c18a:	4608      	mov	r0, r1
 800c18c:	4611      	mov	r1, r2
 800c18e:	2200      	movs	r2, #0
 800c190:	602a      	str	r2, [r5, #0]
 800c192:	461a      	mov	r2, r3
 800c194:	f000 f9c4 	bl	800c520 <_read>
 800c198:	1c43      	adds	r3, r0, #1
 800c19a:	d102      	bne.n	800c1a2 <_read_r+0x1e>
 800c19c:	682b      	ldr	r3, [r5, #0]
 800c19e:	b103      	cbz	r3, 800c1a2 <_read_r+0x1e>
 800c1a0:	6023      	str	r3, [r4, #0]
 800c1a2:	bd38      	pop	{r3, r4, r5, pc}
 800c1a4:	2000161c 	.word	0x2000161c

0800c1a8 <__ascii_wctomb>:
 800c1a8:	b149      	cbz	r1, 800c1be <__ascii_wctomb+0x16>
 800c1aa:	2aff      	cmp	r2, #255	; 0xff
 800c1ac:	bf85      	ittet	hi
 800c1ae:	238a      	movhi	r3, #138	; 0x8a
 800c1b0:	6003      	strhi	r3, [r0, #0]
 800c1b2:	700a      	strbls	r2, [r1, #0]
 800c1b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1b8:	bf98      	it	ls
 800c1ba:	2001      	movls	r0, #1
 800c1bc:	4770      	bx	lr
 800c1be:	4608      	mov	r0, r1
 800c1c0:	4770      	bx	lr

0800c1c2 <abort>:
 800c1c2:	b508      	push	{r3, lr}
 800c1c4:	2006      	movs	r0, #6
 800c1c6:	f000 f82b 	bl	800c220 <raise>
 800c1ca:	2001      	movs	r0, #1
 800c1cc:	f000 f9b0 	bl	800c530 <_exit>

0800c1d0 <_raise_r>:
 800c1d0:	291f      	cmp	r1, #31
 800c1d2:	b538      	push	{r3, r4, r5, lr}
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	460d      	mov	r5, r1
 800c1d8:	d904      	bls.n	800c1e4 <_raise_r+0x14>
 800c1da:	2316      	movs	r3, #22
 800c1dc:	6003      	str	r3, [r0, #0]
 800c1de:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1e6:	b112      	cbz	r2, 800c1ee <_raise_r+0x1e>
 800c1e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1ec:	b94b      	cbnz	r3, 800c202 <_raise_r+0x32>
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f000 f830 	bl	800c254 <_getpid_r>
 800c1f4:	462a      	mov	r2, r5
 800c1f6:	4601      	mov	r1, r0
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1fe:	f000 b817 	b.w	800c230 <_kill_r>
 800c202:	2b01      	cmp	r3, #1
 800c204:	d00a      	beq.n	800c21c <_raise_r+0x4c>
 800c206:	1c59      	adds	r1, r3, #1
 800c208:	d103      	bne.n	800c212 <_raise_r+0x42>
 800c20a:	2316      	movs	r3, #22
 800c20c:	6003      	str	r3, [r0, #0]
 800c20e:	2001      	movs	r0, #1
 800c210:	e7e7      	b.n	800c1e2 <_raise_r+0x12>
 800c212:	2400      	movs	r4, #0
 800c214:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c218:	4628      	mov	r0, r5
 800c21a:	4798      	blx	r3
 800c21c:	2000      	movs	r0, #0
 800c21e:	e7e0      	b.n	800c1e2 <_raise_r+0x12>

0800c220 <raise>:
 800c220:	4b02      	ldr	r3, [pc, #8]	; (800c22c <raise+0xc>)
 800c222:	4601      	mov	r1, r0
 800c224:	6818      	ldr	r0, [r3, #0]
 800c226:	f7ff bfd3 	b.w	800c1d0 <_raise_r>
 800c22a:	bf00      	nop
 800c22c:	200008f4 	.word	0x200008f4

0800c230 <_kill_r>:
 800c230:	b538      	push	{r3, r4, r5, lr}
 800c232:	4d07      	ldr	r5, [pc, #28]	; (800c250 <_kill_r+0x20>)
 800c234:	2300      	movs	r3, #0
 800c236:	4604      	mov	r4, r0
 800c238:	4608      	mov	r0, r1
 800c23a:	4611      	mov	r1, r2
 800c23c:	602b      	str	r3, [r5, #0]
 800c23e:	f000 f95f 	bl	800c500 <_kill>
 800c242:	1c43      	adds	r3, r0, #1
 800c244:	d102      	bne.n	800c24c <_kill_r+0x1c>
 800c246:	682b      	ldr	r3, [r5, #0]
 800c248:	b103      	cbz	r3, 800c24c <_kill_r+0x1c>
 800c24a:	6023      	str	r3, [r4, #0]
 800c24c:	bd38      	pop	{r3, r4, r5, pc}
 800c24e:	bf00      	nop
 800c250:	2000161c 	.word	0x2000161c

0800c254 <_getpid_r>:
 800c254:	f000 b944 	b.w	800c4e0 <_getpid>

0800c258 <expf>:
 800c258:	b508      	push	{r3, lr}
 800c25a:	ed2d 8b02 	vpush	{d8}
 800c25e:	eef0 8a40 	vmov.f32	s17, s0
 800c262:	f000 f82f 	bl	800c2c4 <__ieee754_expf>
 800c266:	eeb0 8a40 	vmov.f32	s16, s0
 800c26a:	eeb0 0a68 	vmov.f32	s0, s17
 800c26e:	f000 f919 	bl	800c4a4 <finitef>
 800c272:	b160      	cbz	r0, 800c28e <expf+0x36>
 800c274:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800c2b4 <expf+0x5c>
 800c278:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c280:	dd0a      	ble.n	800c298 <expf+0x40>
 800c282:	f7fd f9ff 	bl	8009684 <__errno>
 800c286:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800c2b8 <expf+0x60>
 800c28a:	2322      	movs	r3, #34	; 0x22
 800c28c:	6003      	str	r3, [r0, #0]
 800c28e:	eeb0 0a48 	vmov.f32	s0, s16
 800c292:	ecbd 8b02 	vpop	{d8}
 800c296:	bd08      	pop	{r3, pc}
 800c298:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c2bc <expf+0x64>
 800c29c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a4:	d5f3      	bpl.n	800c28e <expf+0x36>
 800c2a6:	f7fd f9ed 	bl	8009684 <__errno>
 800c2aa:	2322      	movs	r3, #34	; 0x22
 800c2ac:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800c2c0 <expf+0x68>
 800c2b0:	6003      	str	r3, [r0, #0]
 800c2b2:	e7ec      	b.n	800c28e <expf+0x36>
 800c2b4:	42b17180 	.word	0x42b17180
 800c2b8:	7f800000 	.word	0x7f800000
 800c2bc:	c2cff1b5 	.word	0xc2cff1b5
 800c2c0:	00000000 	.word	0x00000000

0800c2c4 <__ieee754_expf>:
 800c2c4:	ee10 2a10 	vmov	r2, s0
 800c2c8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c2cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c2d0:	d902      	bls.n	800c2d8 <__ieee754_expf+0x14>
 800c2d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c2d6:	4770      	bx	lr
 800c2d8:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800c2dc:	d106      	bne.n	800c2ec <__ieee754_expf+0x28>
 800c2de:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800c418 <__ieee754_expf+0x154>
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	bf18      	it	ne
 800c2e6:	eeb0 0a67 	vmovne.f32	s0, s15
 800c2ea:	4770      	bx	lr
 800c2ec:	484b      	ldr	r0, [pc, #300]	; (800c41c <__ieee754_expf+0x158>)
 800c2ee:	4282      	cmp	r2, r0
 800c2f0:	dd02      	ble.n	800c2f8 <__ieee754_expf+0x34>
 800c2f2:	2000      	movs	r0, #0
 800c2f4:	f000 b8d0 	b.w	800c498 <__math_oflowf>
 800c2f8:	2a00      	cmp	r2, #0
 800c2fa:	da05      	bge.n	800c308 <__ieee754_expf+0x44>
 800c2fc:	4a48      	ldr	r2, [pc, #288]	; (800c420 <__ieee754_expf+0x15c>)
 800c2fe:	4291      	cmp	r1, r2
 800c300:	d902      	bls.n	800c308 <__ieee754_expf+0x44>
 800c302:	2000      	movs	r0, #0
 800c304:	f000 b8c2 	b.w	800c48c <__math_uflowf>
 800c308:	4a46      	ldr	r2, [pc, #280]	; (800c424 <__ieee754_expf+0x160>)
 800c30a:	4291      	cmp	r1, r2
 800c30c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c310:	d952      	bls.n	800c3b8 <__ieee754_expf+0xf4>
 800c312:	4a45      	ldr	r2, [pc, #276]	; (800c428 <__ieee754_expf+0x164>)
 800c314:	4291      	cmp	r1, r2
 800c316:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800c31a:	d834      	bhi.n	800c386 <__ieee754_expf+0xc2>
 800c31c:	4943      	ldr	r1, [pc, #268]	; (800c42c <__ieee754_expf+0x168>)
 800c31e:	4411      	add	r1, r2
 800c320:	ed91 7a00 	vldr	s14, [r1]
 800c324:	4942      	ldr	r1, [pc, #264]	; (800c430 <__ieee754_expf+0x16c>)
 800c326:	440a      	add	r2, r1
 800c328:	edd2 7a00 	vldr	s15, [r2]
 800c32c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c330:	f1c3 0201 	rsb	r2, r3, #1
 800c334:	1ad2      	subs	r2, r2, r3
 800c336:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c33a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800c33e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800c434 <__ieee754_expf+0x170>
 800c342:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c438 <__ieee754_expf+0x174>
 800c346:	eee6 6a05 	vfma.f32	s13, s12, s10
 800c34a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800c43c <__ieee754_expf+0x178>
 800c34e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c352:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c440 <__ieee754_expf+0x17c>
 800c356:	eee5 6a06 	vfma.f32	s13, s10, s12
 800c35a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800c444 <__ieee754_expf+0x180>
 800c35e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c362:	eef0 6a40 	vmov.f32	s13, s0
 800c366:	eee5 6a46 	vfms.f32	s13, s10, s12
 800c36a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800c36e:	ee20 5a26 	vmul.f32	s10, s0, s13
 800c372:	bb92      	cbnz	r2, 800c3da <__ieee754_expf+0x116>
 800c374:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c378:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800c37c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c380:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800c384:	4770      	bx	lr
 800c386:	4b30      	ldr	r3, [pc, #192]	; (800c448 <__ieee754_expf+0x184>)
 800c388:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800c44c <__ieee754_expf+0x188>
 800c38c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800c450 <__ieee754_expf+0x18c>
 800c390:	4413      	add	r3, r2
 800c392:	edd3 7a00 	vldr	s15, [r3]
 800c396:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c39a:	eeb0 7a40 	vmov.f32	s14, s0
 800c39e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3a2:	ee17 2a90 	vmov	r2, s15
 800c3a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3aa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c3ae:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c454 <__ieee754_expf+0x190>
 800c3b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c3b6:	e7be      	b.n	800c336 <__ieee754_expf+0x72>
 800c3b8:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800c3bc:	d20b      	bcs.n	800c3d6 <__ieee754_expf+0x112>
 800c3be:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c458 <__ieee754_expf+0x194>
 800c3c2:	ee70 6a26 	vadd.f32	s13, s0, s13
 800c3c6:	eef4 6ae5 	vcmpe.f32	s13, s11
 800c3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ce:	dd02      	ble.n	800c3d6 <__ieee754_expf+0x112>
 800c3d0:	ee30 0a25 	vadd.f32	s0, s0, s11
 800c3d4:	4770      	bx	lr
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	e7af      	b.n	800c33a <__ieee754_expf+0x76>
 800c3da:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c3de:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800c3e2:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800c3e6:	bfb8      	it	lt
 800c3e8:	3264      	addlt	r2, #100	; 0x64
 800c3ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c3ee:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800c3f2:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800c3f6:	ee17 3a90 	vmov	r3, s15
 800c3fa:	bfab      	itete	ge
 800c3fc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800c400:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800c404:	ee00 3a10 	vmovge	s0, r3
 800c408:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800c45c <__ieee754_expf+0x198>
 800c40c:	bfbc      	itt	lt
 800c40e:	ee00 3a10 	vmovlt	s0, r3
 800c412:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800c416:	4770      	bx	lr
 800c418:	00000000 	.word	0x00000000
 800c41c:	42b17217 	.word	0x42b17217
 800c420:	42cff1b5 	.word	0x42cff1b5
 800c424:	3eb17218 	.word	0x3eb17218
 800c428:	3f851591 	.word	0x3f851591
 800c42c:	0800f794 	.word	0x0800f794
 800c430:	0800f79c 	.word	0x0800f79c
 800c434:	3331bb4c 	.word	0x3331bb4c
 800c438:	b5ddea0e 	.word	0xb5ddea0e
 800c43c:	388ab355 	.word	0x388ab355
 800c440:	bb360b61 	.word	0xbb360b61
 800c444:	3e2aaaab 	.word	0x3e2aaaab
 800c448:	0800f78c 	.word	0x0800f78c
 800c44c:	3fb8aa3b 	.word	0x3fb8aa3b
 800c450:	3f317180 	.word	0x3f317180
 800c454:	3717f7d1 	.word	0x3717f7d1
 800c458:	7149f2ca 	.word	0x7149f2ca
 800c45c:	0d800000 	.word	0x0d800000

0800c460 <with_errnof>:
 800c460:	b513      	push	{r0, r1, r4, lr}
 800c462:	4604      	mov	r4, r0
 800c464:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c468:	f7fd f90c 	bl	8009684 <__errno>
 800c46c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c470:	6004      	str	r4, [r0, #0]
 800c472:	b002      	add	sp, #8
 800c474:	bd10      	pop	{r4, pc}

0800c476 <xflowf>:
 800c476:	b130      	cbz	r0, 800c486 <xflowf+0x10>
 800c478:	eef1 7a40 	vneg.f32	s15, s0
 800c47c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c480:	2022      	movs	r0, #34	; 0x22
 800c482:	f7ff bfed 	b.w	800c460 <with_errnof>
 800c486:	eef0 7a40 	vmov.f32	s15, s0
 800c48a:	e7f7      	b.n	800c47c <xflowf+0x6>

0800c48c <__math_uflowf>:
 800c48c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c494 <__math_uflowf+0x8>
 800c490:	f7ff bff1 	b.w	800c476 <xflowf>
 800c494:	10000000 	.word	0x10000000

0800c498 <__math_oflowf>:
 800c498:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c4a0 <__math_oflowf+0x8>
 800c49c:	f7ff bfeb 	b.w	800c476 <xflowf>
 800c4a0:	70000000 	.word	0x70000000

0800c4a4 <finitef>:
 800c4a4:	b082      	sub	sp, #8
 800c4a6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c4aa:	9801      	ldr	r0, [sp, #4]
 800c4ac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c4b0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c4b4:	bfac      	ite	ge
 800c4b6:	2000      	movge	r0, #0
 800c4b8:	2001      	movlt	r0, #1
 800c4ba:	b002      	add	sp, #8
 800c4bc:	4770      	bx	lr
	...

0800c4c0 <_close>:
 800c4c0:	4b02      	ldr	r3, [pc, #8]	; (800c4cc <_close+0xc>)
 800c4c2:	2258      	movs	r2, #88	; 0x58
 800c4c4:	601a      	str	r2, [r3, #0]
 800c4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ca:	4770      	bx	lr
 800c4cc:	2000161c 	.word	0x2000161c

0800c4d0 <_fstat>:
 800c4d0:	4b02      	ldr	r3, [pc, #8]	; (800c4dc <_fstat+0xc>)
 800c4d2:	2258      	movs	r2, #88	; 0x58
 800c4d4:	601a      	str	r2, [r3, #0]
 800c4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4da:	4770      	bx	lr
 800c4dc:	2000161c 	.word	0x2000161c

0800c4e0 <_getpid>:
 800c4e0:	4b02      	ldr	r3, [pc, #8]	; (800c4ec <_getpid+0xc>)
 800c4e2:	2258      	movs	r2, #88	; 0x58
 800c4e4:	601a      	str	r2, [r3, #0]
 800c4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ea:	4770      	bx	lr
 800c4ec:	2000161c 	.word	0x2000161c

0800c4f0 <_isatty>:
 800c4f0:	4b02      	ldr	r3, [pc, #8]	; (800c4fc <_isatty+0xc>)
 800c4f2:	2258      	movs	r2, #88	; 0x58
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	2000      	movs	r0, #0
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	2000161c 	.word	0x2000161c

0800c500 <_kill>:
 800c500:	4b02      	ldr	r3, [pc, #8]	; (800c50c <_kill+0xc>)
 800c502:	2258      	movs	r2, #88	; 0x58
 800c504:	601a      	str	r2, [r3, #0]
 800c506:	f04f 30ff 	mov.w	r0, #4294967295
 800c50a:	4770      	bx	lr
 800c50c:	2000161c 	.word	0x2000161c

0800c510 <_lseek>:
 800c510:	4b02      	ldr	r3, [pc, #8]	; (800c51c <_lseek+0xc>)
 800c512:	2258      	movs	r2, #88	; 0x58
 800c514:	601a      	str	r2, [r3, #0]
 800c516:	f04f 30ff 	mov.w	r0, #4294967295
 800c51a:	4770      	bx	lr
 800c51c:	2000161c 	.word	0x2000161c

0800c520 <_read>:
 800c520:	4b02      	ldr	r3, [pc, #8]	; (800c52c <_read+0xc>)
 800c522:	2258      	movs	r2, #88	; 0x58
 800c524:	601a      	str	r2, [r3, #0]
 800c526:	f04f 30ff 	mov.w	r0, #4294967295
 800c52a:	4770      	bx	lr
 800c52c:	2000161c 	.word	0x2000161c

0800c530 <_exit>:
 800c530:	e7fe      	b.n	800c530 <_exit>
	...

0800c534 <_init>:
 800c534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c536:	bf00      	nop
 800c538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c53a:	bc08      	pop	{r3}
 800c53c:	469e      	mov	lr, r3
 800c53e:	4770      	bx	lr

0800c540 <_fini>:
 800c540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c542:	bf00      	nop
 800c544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c546:	bc08      	pop	{r3}
 800c548:	469e      	mov	lr, r3
 800c54a:	4770      	bx	lr
