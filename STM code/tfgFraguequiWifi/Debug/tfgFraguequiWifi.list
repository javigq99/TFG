
tfgFraguequiWifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014bbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d10  08014d60  08014d60  00024d60  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a70  08017a70  00030a9c  2**0
                  CONTENTS
  4 .ARM          00000008  08017a70  08017a70  00027a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a78  08017a78  00030a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017a78  08017a78  00027a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017a7c  08017a7c  00027a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a9c  20000000  08017a80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004780  20000a9c  0801851c  00030a9c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000521c  0801851c  0003521c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a9c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027b12  00000000  00000000  00030acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005484  00000000  00000000  000585de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d50  00000000  00000000  0005da68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b48  00000000  00000000  0005f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009066  00000000  00000000  00061300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002370c  00000000  00000000  0006a366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107433  00000000  00000000  0008da72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  00194ea5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008dc4  00000000  00000000  00194f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a9c 	.word	0x20000a9c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014d34 	.word	0x08014d34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000aa0 	.word	0x20000aa0
 80001cc:	08014d34 	.word	0x08014d34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb0:	f001 fc8d 	bl	80027ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb4:	f000 f822 	bl	8000efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb8:	f000 f942 	bl	8001140 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000ebc:	f000 f892 	bl	8000fe4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000ec0:	f000 f90e 	bl	80010e0 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000ec4:	f000 f86c 	bl	8000fa0 <MX_CRC_Init>
  MX_SPI3_Init();
 8000ec8:	f000 f8cc 	bl	8001064 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ecc:	f009 fe3e 	bl	800ab4c <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  createNnObjects();
 8000ed0:	f000 fb62 	bl	8001598 <createNnObjects>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <main+0x44>)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <main+0x48>)
 8000eda:	f009 fe81 	bl	800abe0 <osThreadNew>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <main+0x4c>)
 8000ee2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  initSensorsAndNN();
 8000ee4:	f000 fbb8 	bl	8001658 <initSensorsAndNN>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ee8:	f009 fe54 	bl	800ab94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <main+0x40>
 8000eee:	bf00      	nop
 8000ef0:	08015818 	.word	0x08015818
 8000ef4:	08001551 	.word	0x08001551
 8000ef8:	20000c18 	.word	0x20000c18

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b096      	sub	sp, #88	; 0x58
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	2244      	movs	r2, #68	; 0x44
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f010 fe70 	bl	8011bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	463b      	mov	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f22:	f004 f91f 	bl	8005164 <HAL_PWREx_ControlVoltageScaling>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f2c:	f000 fb18 	bl	8001560 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f30:	2310      	movs	r3, #16
 8000f32:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f3c:	2360      	movs	r3, #96	; 0x60
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f40:	2302      	movs	r3, #2
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f44:	2301      	movs	r3, #1
 8000f46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f4c:	2328      	movs	r3, #40	; 0x28
 8000f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f50:	2307      	movs	r3, #7
 8000f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4618      	mov	r0, r3
 8000f62:	f004 f955 	bl	8005210 <HAL_RCC_OscConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f6c:	f000 faf8 	bl	8001560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f70:	230f      	movs	r3, #15
 8000f72:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f74:	2303      	movs	r3, #3
 8000f76:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f84:	463b      	mov	r3, r7
 8000f86:	2104      	movs	r1, #4
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f004 fd1d 	bl	80059c8 <HAL_RCC_ClockConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f94:	f000 fae4 	bl	8001560 <Error_Handler>
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3758      	adds	r7, #88	; 0x58
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <MX_CRC_Init+0x3c>)
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <MX_CRC_Init+0x40>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_CRC_Init+0x3c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <MX_CRC_Init+0x3c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_CRC_Init+0x3c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <MX_CRC_Init+0x3c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_CRC_Init+0x3c>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <MX_CRC_Init+0x3c>)
 8000fca:	f001 fdab 	bl	8002b24 <HAL_CRC_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000fd4:	f000 fac4 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000ab8 	.word	0x20000ab8
 8000fe0:	40023000 	.word	0x40023000

08000fe4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_I2C2_Init+0x74>)
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <MX_I2C2_Init+0x78>)
 8000fec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_I2C2_Init+0x74>)
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <MX_I2C2_Init+0x7c>)
 8000ff2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_I2C2_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_I2C2_Init+0x74>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_I2C2_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_I2C2_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_I2C2_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_I2C2_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_I2C2_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800101e:	480e      	ldr	r0, [pc, #56]	; (8001058 <MX_I2C2_Init+0x74>)
 8001020:	f002 f9de 	bl	80033e0 <HAL_I2C_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800102a:	f000 fa99 	bl	8001560 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800102e:	2100      	movs	r1, #0
 8001030:	4809      	ldr	r0, [pc, #36]	; (8001058 <MX_I2C2_Init+0x74>)
 8001032:	f003 fff1 	bl	8005018 <HAL_I2CEx_ConfigAnalogFilter>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800103c:	f000 fa90 	bl	8001560 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001040:	2100      	movs	r1, #0
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_I2C2_Init+0x74>)
 8001044:	f004 f833 	bl	80050ae <HAL_I2CEx_ConfigDigitalFilter>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800104e:	f000 fa87 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000adc 	.word	0x20000adc
 800105c:	40005800 	.word	0x40005800
 8001060:	10909cec 	.word	0x10909cec

08001064 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_SPI3_Init+0x74>)
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <MX_SPI3_Init+0x78>)
 800106c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_SPI3_Init+0x74>)
 8001070:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001074:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_SPI3_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_SPI3_Init+0x74>)
 800107e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001082:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_SPI3_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_SPI3_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_SPI3_Init+0x74>)
 8001092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001096:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_SPI3_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_SPI3_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_SPI3_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_SPI3_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_SPI3_Init+0x74>)
 80010b2:	2207      	movs	r2, #7
 80010b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_SPI3_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SPI3_Init+0x74>)
 80010be:	2208      	movs	r2, #8
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_SPI3_Init+0x74>)
 80010c4:	f005 fb60 	bl	8006788 <HAL_SPI_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80010ce:	f000 fa47 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000b30 	.word	0x20000b30
 80010dc:	40003c00 	.word	0x40003c00

080010e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_USART1_UART_Init+0x58>)
 80010e6:	4a15      	ldr	r2, [pc, #84]	; (800113c <MX_USART1_UART_Init+0x5c>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_USART1_UART_Init+0x58>)
 80010ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_USART1_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_USART1_UART_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_USART1_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_USART1_UART_Init+0x58>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_USART1_UART_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_USART1_UART_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_USART1_UART_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_USART1_UART_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_USART1_UART_Init+0x58>)
 8001124:	f006 fe61 	bl	8007dea <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800112e:	f000 fa17 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000b94 	.word	0x20000b94
 800113c:	40013800 	.word	0x40013800

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001156:	4bbc      	ldr	r3, [pc, #752]	; (8001448 <MX_GPIO_Init+0x308>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4abb      	ldr	r2, [pc, #748]	; (8001448 <MX_GPIO_Init+0x308>)
 800115c:	f043 0310 	orr.w	r3, r3, #16
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4bb9      	ldr	r3, [pc, #740]	; (8001448 <MX_GPIO_Init+0x308>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	4bb6      	ldr	r3, [pc, #728]	; (8001448 <MX_GPIO_Init+0x308>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4ab5      	ldr	r2, [pc, #724]	; (8001448 <MX_GPIO_Init+0x308>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4bb3      	ldr	r3, [pc, #716]	; (8001448 <MX_GPIO_Init+0x308>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4bb0      	ldr	r3, [pc, #704]	; (8001448 <MX_GPIO_Init+0x308>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4aaf      	ldr	r2, [pc, #700]	; (8001448 <MX_GPIO_Init+0x308>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4bad      	ldr	r3, [pc, #692]	; (8001448 <MX_GPIO_Init+0x308>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	4baa      	ldr	r3, [pc, #680]	; (8001448 <MX_GPIO_Init+0x308>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4aa9      	ldr	r2, [pc, #676]	; (8001448 <MX_GPIO_Init+0x308>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4ba7      	ldr	r3, [pc, #668]	; (8001448 <MX_GPIO_Init+0x308>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b6:	4ba4      	ldr	r3, [pc, #656]	; (8001448 <MX_GPIO_Init+0x308>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4aa3      	ldr	r2, [pc, #652]	; (8001448 <MX_GPIO_Init+0x308>)
 80011bc:	f043 0308 	orr.w	r3, r3, #8
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4ba1      	ldr	r3, [pc, #644]	; (8001448 <MX_GPIO_Init+0x308>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80011d4:	489d      	ldr	r0, [pc, #628]	; (800144c <MX_GPIO_Init+0x30c>)
 80011d6:	f002 f8d3 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f248 1104 	movw	r1, #33028	; 0x8104
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e4:	f002 f8cc 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80011e8:	2200      	movs	r2, #0
 80011ea:	f24f 0114 	movw	r1, #61460	; 0xf014
 80011ee:	4898      	ldr	r0, [pc, #608]	; (8001450 <MX_GPIO_Init+0x310>)
 80011f0:	f002 f8c6 	bl	8003380 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f241 0181 	movw	r1, #4225	; 0x1081
 80011fa:	4896      	ldr	r0, [pc, #600]	; (8001454 <MX_GPIO_Init+0x314>)
 80011fc:	f002 f8c0 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001206:	4893      	ldr	r0, [pc, #588]	; (8001454 <MX_GPIO_Init+0x314>)
 8001208:	f002 f8ba 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001212:	4891      	ldr	r0, [pc, #580]	; (8001458 <MX_GPIO_Init+0x318>)
 8001214:	f002 f8b4 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001218:	2201      	movs	r2, #1
 800121a:	2120      	movs	r1, #32
 800121c:	488c      	ldr	r0, [pc, #560]	; (8001450 <MX_GPIO_Init+0x310>)
 800121e:	f002 f8af 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001222:	2201      	movs	r2, #1
 8001224:	2101      	movs	r1, #1
 8001226:	4889      	ldr	r0, [pc, #548]	; (800144c <MX_GPIO_Init+0x30c>)
 8001228:	f002 f8aa 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800122c:	f240 1315 	movw	r3, #277	; 0x115
 8001230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4881      	ldr	r0, [pc, #516]	; (800144c <MX_GPIO_Init+0x30c>)
 8001246:	f001 fde5 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800124a:	236a      	movs	r3, #106	; 0x6a
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800124e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	487b      	ldr	r0, [pc, #492]	; (800144c <MX_GPIO_Init+0x30c>)
 8001260:	f001 fdd8 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001264:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800126a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4877      	ldr	r0, [pc, #476]	; (8001458 <MX_GPIO_Init+0x318>)
 800127c:	f001 fdca 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001280:	233f      	movs	r3, #63	; 0x3f
 8001282:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001284:	230b      	movs	r3, #11
 8001286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	4871      	ldr	r0, [pc, #452]	; (8001458 <MX_GPIO_Init+0x318>)
 8001294:	f001 fdbe 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001298:	2303      	movs	r3, #3
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012a8:	2308      	movs	r3, #8
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b6:	f001 fdad 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80012ba:	f248 1304 	movw	r3, #33028	; 0x8104
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d6:	f001 fd9d 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80012da:	2308      	movs	r3, #8
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012ea:	2301      	movs	r3, #1
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f8:	f001 fd8c 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80012fc:	2310      	movs	r3, #16
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001300:	230b      	movs	r3, #11
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001312:	f001 fd7f 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001316:	23e0      	movs	r3, #224	; 0xe0
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001326:	2305      	movs	r3, #5
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001334:	f001 fd6e 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001338:	2301      	movs	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800133c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4840      	ldr	r0, [pc, #256]	; (8001450 <MX_GPIO_Init+0x310>)
 800134e:	f001 fd61 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001352:	2302      	movs	r3, #2
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001356:	230b      	movs	r3, #11
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	483a      	ldr	r0, [pc, #232]	; (8001450 <MX_GPIO_Init+0x310>)
 8001366:	f001 fd55 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800136a:	f24f 0334 	movw	r3, #61492	; 0xf034
 800136e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4833      	ldr	r0, [pc, #204]	; (8001450 <MX_GPIO_Init+0x310>)
 8001384:	f001 fd46 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001388:	f44f 7320 	mov.w	r3, #640	; 0x280
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800139a:	2306      	movs	r3, #6
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4829      	ldr	r0, [pc, #164]	; (800144c <MX_GPIO_Init+0x30c>)
 80013a6:	f001 fd35 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80013aa:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80013ae:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80013bc:	230a      	movs	r3, #10
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	4821      	ldr	r0, [pc, #132]	; (800144c <MX_GPIO_Init+0x30c>)
 80013c8:	f001 fd24 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80013cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013de:	2307      	movs	r3, #7
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	481a      	ldr	r0, [pc, #104]	; (8001454 <MX_GPIO_Init+0x314>)
 80013ea:	f001 fd13 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80013ee:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80013f2:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4813      	ldr	r0, [pc, #76]	; (8001454 <MX_GPIO_Init+0x314>)
 8001406:	f001 fd05 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800140a:	f243 0381 	movw	r3, #12417	; 0x3081
 800140e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	480c      	ldr	r0, [pc, #48]	; (8001454 <MX_GPIO_Init+0x314>)
 8001424:	f001 fcf6 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001428:	f44f 7310 	mov.w	r3, #576	; 0x240
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_GPIO_Init+0x318>)
 8001442:	f001 fce7 	bl	8002e14 <HAL_GPIO_Init>
 8001446:	e009      	b.n	800145c <MX_GPIO_Init+0x31c>
 8001448:	40021000 	.word	0x40021000
 800144c:	48001000 	.word	0x48001000
 8001450:	48000400 	.word	0x48000400
 8001454:	48000c00 	.word	0x48000c00
 8001458:	48000800 	.word	0x48000800

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800145c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001462:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	4834      	ldr	r0, [pc, #208]	; (8001544 <MX_GPIO_Init+0x404>)
 8001474:	f001 fcce 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001490:	f001 fcc0 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001494:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014a6:	230a      	movs	r3, #10
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b4:	f001 fcae 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80014b8:	2302      	movs	r3, #2
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014c8:	2305      	movs	r3, #5
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	481d      	ldr	r0, [pc, #116]	; (8001548 <MX_GPIO_Init+0x408>)
 80014d4:	f001 fc9e 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80014d8:	2378      	movs	r3, #120	; 0x78
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e8:	2307      	movs	r3, #7
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4815      	ldr	r0, [pc, #84]	; (8001548 <MX_GPIO_Init+0x408>)
 80014f4:	f001 fc8e 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80014f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800150a:	2304      	movs	r3, #4
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <MX_GPIO_Init+0x40c>)
 8001516:	f001 fc7d 	bl	8002e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2105      	movs	r1, #5
 800151e:	2017      	movs	r0, #23
 8001520:	f001 fac9 	bl	8002ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001524:	2017      	movs	r0, #23
 8001526:	f001 fae2 	bl	8002aee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2105      	movs	r1, #5
 800152e:	2028      	movs	r0, #40	; 0x28
 8001530:	f001 fac1 	bl	8002ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001534:	2028      	movs	r0, #40	; 0x28
 8001536:	f001 fada 	bl	8002aee <HAL_NVIC_EnableIRQ>

}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	48000800 	.word	0x48000800
 8001548:	48000c00 	.word	0x48000c00
 800154c:	48000400 	.word	0x48000400

08001550 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001558:	2001      	movs	r0, #1
 800155a:	f009 fbd3 	bl	800ad04 <osDelay>
 800155e:	e7fb      	b.n	8001558 <StartDefaultTask+0x8>

08001560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001568:	e7fe      	b.n	8001568 <Error_Handler+0x8>
	...

0800156c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001570:	f3bf 8f4f 	dsb	sy
}
 8001574:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <__NVIC_SystemReset+0x24>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800157e:	4904      	ldr	r1, [pc, #16]	; (8001590 <__NVIC_SystemReset+0x24>)
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_SystemReset+0x28>)
 8001582:	4313      	orrs	r3, r2
 8001584:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001586:	f3bf 8f4f 	dsb	sy
}
 800158a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <__NVIC_SystemReset+0x20>
 8001590:	e000ed00 	.word	0xe000ed00
 8001594:	05fa0004 	.word	0x05fa0004

08001598 <createNnObjects>:
/* Allocate data payload for the output tensor */
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

void createNnObjects(){
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0

	uartSemaphoreHandle = xSemaphoreCreateBinary();
 800159c:	2203      	movs	r2, #3
 800159e:	2100      	movs	r1, #0
 80015a0:	2001      	movs	r0, #1
 80015a2:	f009 fd93 	bl	800b0cc <xQueueGenericCreate>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a25      	ldr	r2, [pc, #148]	; (8001640 <createNnObjects+0xa8>)
 80015aa:	6013      	str	r3, [r2, #0]
	inputSemHandle = xSemaphoreCreateBinary();
 80015ac:	2203      	movs	r2, #3
 80015ae:	2100      	movs	r1, #0
 80015b0:	2001      	movs	r0, #1
 80015b2:	f009 fd8b 	bl	800b0cc <xQueueGenericCreate>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4a22      	ldr	r2, [pc, #136]	; (8001644 <createNnObjects+0xac>)
 80015ba:	6013      	str	r3, [r2, #0]
	outputSemHandle = xSemaphoreCreateBinary();
 80015bc:	2203      	movs	r2, #3
 80015be:	2100      	movs	r1, #0
 80015c0:	2001      	movs	r0, #1
 80015c2:	f009 fd83 	bl	800b0cc <xQueueGenericCreate>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <createNnObjects+0xb0>)
 80015ca:	6013      	str	r3, [r2, #0]
	outputQueueHandle = xQueueCreate(1,sizeof(nnOutput)); //Cola que recibe movimiento y ganador
 80015cc:	2200      	movs	r2, #0
 80015ce:	2108      	movs	r1, #8
 80015d0:	2001      	movs	r0, #1
 80015d2:	f009 fd7b 	bl	800b0cc <xQueueGenericCreate>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a1c      	ldr	r2, [pc, #112]	; (800164c <createNnObjects+0xb4>)
 80015da:	6013      	str	r3, [r2, #0]
	I2CBusySem = xSemaphoreCreateBinary();
 80015dc:	2203      	movs	r2, #3
 80015de:	2100      	movs	r1, #0
 80015e0:	2001      	movs	r0, #1
 80015e2:	f009 fd73 	bl	800b0cc <xQueueGenericCreate>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <createNnObjects+0xb8>)
 80015ea:	6013      	str	r3, [r2, #0]
	I2CBufferReadySem = xSemaphoreCreateBinary();
 80015ec:	2203      	movs	r2, #3
 80015ee:	2100      	movs	r1, #0
 80015f0:	2001      	movs	r0, #1
 80015f2:	f009 fd6b 	bl	800b0cc <xQueueGenericCreate>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a16      	ldr	r2, [pc, #88]	; (8001654 <createNnObjects+0xbc>)
 80015fa:	6013      	str	r3, [r2, #0]

	xSemaphoreGive(uartSemaphoreHandle); // UART printf
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <createNnObjects+0xa8>)
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	f009 fdbf 	bl	800b188 <xQueueGenericSend>
	xSemaphoreGive(I2CBusySem);
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <createNnObjects+0xb8>)
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	2300      	movs	r3, #0
 8001610:	2200      	movs	r2, #0
 8001612:	2100      	movs	r1, #0
 8001614:	f009 fdb8 	bl	800b188 <xQueueGenericSend>
	xSemaphoreTake(inputSemHandle,0); //Buffer de entrada
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <createNnObjects+0xac>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f00a f8b8 	bl	800b794 <xQueueSemaphoreTake>
	xSemaphoreTake(outputSemHandle,0); //Buffer de salida
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <createNnObjects+0xb0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f00a f8b2 	bl	800b794 <xQueueSemaphoreTake>
	xSemaphoreTake(I2CBufferReadySem,0);
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <createNnObjects+0xbc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f00a f8ac 	bl	800b794 <xQueueSemaphoreTake>

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000c40 	.word	0x20000c40
 8001644:	20000c38 	.word	0x20000c38
 8001648:	20000c3c 	.word	0x20000c3c
 800164c:	20000c34 	.word	0x20000c34
 8001650:	20000c44 	.word	0x20000c44
 8001654:	20000c48 	.word	0x20000c48

08001658 <initSensorsAndNN>:

void initSensorsAndNN(){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af02      	add	r7, sp, #8

	xTaskCreate(initTask,"initTask",512,NULL,1,&initHandle);
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <initSensorsAndNN+0x24>)
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	2301      	movs	r3, #1
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2300      	movs	r3, #0
 8001668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800166c:	4904      	ldr	r1, [pc, #16]	; (8001680 <initSensorsAndNN+0x28>)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <initSensorsAndNN+0x2c>)
 8001670:	f00a fb7f 	bl	800bd72 <xTaskCreate>
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000c4c 	.word	0x20000c4c
 8001680:	08014d94 	.word	0x08014d94
 8001684:	08001689 	.word	0x08001689

08001688 <initTask>:

void initTask(void * param){
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af02      	add	r7, sp, #8
 800168e:	6078      	str	r0, [r7, #4]

	uint8_t ret;

	ret = initSensors();
 8001690:	f000 fb2e 	bl	8001cf0 <initSensors>
 8001694:	4603      	mov	r3, r0
 8001696:	73fb      	strb	r3, [r7, #15]

	if (ret == 0){
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d114      	bne.n	80016c8 <initTask+0x40>

		printf("Acelerómetro y Giroscopio configurados a una frecuencia de %d Hz en un rango de medida: +- %.2f mg,dps \r\n\n",SENSORS_DATA_RATE,MEASUREMENT_RANGE);
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <initTask+0x70>)
 80016a4:	211a      	movs	r1, #26
 80016a6:	4815      	ldr	r0, [pc, #84]	; (80016fc <initTask+0x74>)
 80016a8:	f010 fff4 	bl	8012694 <iprintf>
		printf("Sensibilidad de los sensores: %.3f ,%.6f \r\n\n",ACEL_SENSIVITY,GIR_SENSIVITY);
 80016ac:	a30e      	add	r3, pc, #56	; (adr r3, 80016e8 <initTask+0x60>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	e9cd 2300 	strd	r2, r3, [sp]
 80016b6:	a30e      	add	r3, pc, #56	; (adr r3, 80016f0 <initTask+0x68>)
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	4810      	ldr	r0, [pc, #64]	; (8001700 <initTask+0x78>)
 80016be:	f010 ffe9 	bl	8012694 <iprintf>

		initNN();
 80016c2:	f000 f947 	bl	8001954 <initNN>
 80016c6:	e004      	b.n	80016d2 <initTask+0x4a>

	}else{

		printf("Ha ocurrido un error iniciando los sensores\r\n");
 80016c8:	480e      	ldr	r0, [pc, #56]	; (8001704 <initTask+0x7c>)
 80016ca:	f011 f869 	bl	80127a0 <puts>
		NVIC_SystemReset();
 80016ce:	f7ff ff4d 	bl	800156c <__NVIC_SystemReset>
	}

	createNnTasks();
 80016d2:	f000 f81b 	bl	800170c <createNnTasks>

	vTaskDelete(initHandle);
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <initTask+0x80>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f00a fca4 	bl	800c028 <vTaskDelete>

}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000000 	.word	0x20000000
 80016ec:	3fb1eb85 	.word	0x3fb1eb85
 80016f0:	60000000 	.word	0x60000000
 80016f4:	3faf3b64 	.word	0x3faf3b64
 80016f8:	409f4000 	.word	0x409f4000
 80016fc:	08014da0 	.word	0x08014da0
 8001700:	08014e0c 	.word	0x08014e0c
 8001704:	08014e3c 	.word	0x08014e3c
 8001708:	20000c4c 	.word	0x20000c4c

0800170c <createNnTasks>:
void createNnTasks()
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af02      	add	r7, sp, #8

	xTaskCreate(processDataTask, "processDataTask",256, NULL,1, &processDataHandle);
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <createNnTasks+0x64>)
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	2301      	movs	r3, #1
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2300      	movs	r3, #0
 800171c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001720:	4914      	ldr	r1, [pc, #80]	; (8001774 <createNnTasks+0x68>)
 8001722:	4815      	ldr	r0, [pc, #84]	; (8001778 <createNnTasks+0x6c>)
 8001724:	f00a fb25 	bl	800bd72 <xTaskCreate>

	xTaskCreate(postProcessTask, "postProcessTask",256, NULL,1, &postProcessHandle);
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <createNnTasks+0x70>)
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	2301      	movs	r3, #1
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2300      	movs	r3, #0
 8001732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001736:	4912      	ldr	r1, [pc, #72]	; (8001780 <createNnTasks+0x74>)
 8001738:	4812      	ldr	r0, [pc, #72]	; (8001784 <createNnTasks+0x78>)
 800173a:	f00a fb1a 	bl	800bd72 <xTaskCreate>

	xTaskCreate(acquireDataTask, "acquireDataTask",256, NULL,1, &acquireDataHandle);
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <createNnTasks+0x7c>)
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	2301      	movs	r3, #1
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2300      	movs	r3, #0
 8001748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800174c:	490f      	ldr	r1, [pc, #60]	; (800178c <createNnTasks+0x80>)
 800174e:	4810      	ldr	r0, [pc, #64]	; (8001790 <createNnTasks+0x84>)
 8001750:	f00a fb0f 	bl	800bd72 <xTaskCreate>

	xTaskCreate(wifiTask, "wifiTask",256, NULL,2, &wifiTaskHandle);
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <createNnTasks+0x88>)
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	2302      	movs	r3, #2
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2300      	movs	r3, #0
 800175e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <createNnTasks+0x8c>)
 8001764:	480d      	ldr	r0, [pc, #52]	; (800179c <createNnTasks+0x90>)
 8001766:	f00a fb04 	bl	800bd72 <xTaskCreate>


}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000c54 	.word	0x20000c54
 8001774:	08014e6c 	.word	0x08014e6c
 8001778:	08001aed 	.word	0x08001aed
 800177c:	20000c58 	.word	0x20000c58
 8001780:	08014e7c 	.word	0x08014e7c
 8001784:	08001b59 	.word	0x08001b59
 8001788:	20000c50 	.word	0x20000c50
 800178c:	08014e8c 	.word	0x08014e8c
 8001790:	080019f9 	.word	0x080019f9
 8001794:	20000c5c 	.word	0x20000c5c
 8001798:	08014e9c 	.word	0x08014e9c
 800179c:	08001be1 	.word	0x08001be1

080017a0 <ai_log_err>:


static void ai_log_err(const ai_error err, const char *fct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 80017b0:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80017b2:	461a      	mov	r2, r3
        err.type, err.code);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80017ba:	6839      	ldr	r1, [r7, #0]
 80017bc:	4806      	ldr	r0, [pc, #24]	; (80017d8 <ai_log_err+0x38>)
 80017be:	f010 ff69 	bl	8012694 <iprintf>
 80017c2:	e008      	b.n	80017d6 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80017c4:	793b      	ldrb	r3, [r7, #4]
 80017c6:	4619      	mov	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80017ce:	461a      	mov	r2, r3
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <ai_log_err+0x3c>)
 80017d2:	f010 ff5f 	bl	8012694 <iprintf>

  do {} while (1);
 80017d6:	e7fe      	b.n	80017d6 <ai_log_err+0x36>
 80017d8:	08014ea8 	.word	0x08014ea8
 80017dc:	08014edc 	.word	0x08014edc

080017e0 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b090      	sub	sp, #64	; 0x40
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80017ea:	2100      	movs	r1, #0
 80017ec:	4838      	ldr	r0, [pc, #224]	; (80018d0 <ai_boostrap+0xf0>)
 80017ee:	f00c fc01 	bl	800dff4 <ai_network_create>
 80017f2:	4603      	mov	r3, r0
 80017f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 80017f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <ai_boostrap+0x2c>
    ai_log_err(err, "ai_network_create");
 80017fe:	4935      	ldr	r1, [pc, #212]	; (80018d4 <ai_boostrap+0xf4>)
 8001800:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001802:	f7ff ffcd 	bl	80017a0 <ai_log_err>
    return -1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	e05c      	b.n	80018c6 <ai_boostrap+0xe6>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 800180c:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <ai_boostrap+0xf8>)
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	2301      	movs	r3, #1
 8001812:	823b      	strh	r3, [r7, #16]
 8001814:	2301      	movs	r3, #1
 8001816:	827b      	strh	r3, [r7, #18]
 8001818:	2301      	movs	r3, #1
 800181a:	82bb      	strh	r3, [r7, #20]
 800181c:	f641 5344 	movw	r3, #7492	; 0x1d44
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
 800182a:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <ai_boostrap+0xfc>)
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
 800182e:	2301      	movs	r3, #1
 8001830:	853b      	strh	r3, [r7, #40]	; 0x28
 8001832:	2301      	movs	r3, #1
 8001834:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001836:	2301      	movs	r3, #1
 8001838:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800183a:	f44f 7350 	mov.w	r3, #832	; 0x340
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) );

  if (!ai_network_init(network, &params)) {
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <ai_boostrap+0xf0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f107 020c 	add.w	r2, r7, #12
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f00c fbf0 	bl	800e038 <ai_network_init>
 8001858:	4603      	mov	r3, r0
 800185a:	f083 0301 	eor.w	r3, r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00d      	beq.n	8001880 <ai_boostrap+0xa0>
      err = ai_network_get_error(network);
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <ai_boostrap+0xf0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f00c fbb7 	bl	800dfdc <ai_network_get_error>
 800186e:	4603      	mov	r3, r0
 8001870:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_network_init");
 8001872:	491b      	ldr	r1, [pc, #108]	; (80018e0 <ai_boostrap+0x100>)
 8001874:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001876:	f7ff ff93 	bl	80017a0 <ai_log_err>
      return -1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e022      	b.n	80018c6 <ai_boostrap+0xe6>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <ai_boostrap+0xf0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4917      	ldr	r1, [pc, #92]	; (80018e4 <ai_boostrap+0x104>)
 8001886:	4618      	mov	r0, r3
 8001888:	f00c fb4a 	bl	800df20 <ai_network_get_info>
 800188c:	4603      	mov	r3, r0
 800188e:	f083 0301 	eor.w	r3, r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d015      	beq.n	80018c4 <ai_boostrap+0xe4>
    err = ai_network_get_error(network);
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <ai_boostrap+0xf0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f00c fb9d 	bl	800dfdc <ai_network_get_error>
 80018a2:	4603      	mov	r3, r0
 80018a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_network_get_error");
 80018a6:	4910      	ldr	r1, [pc, #64]	; (80018e8 <ai_boostrap+0x108>)
 80018a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018aa:	f7ff ff79 	bl	80017a0 <ai_log_err>
    ai_network_destroy(network);
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <ai_boostrap+0xf0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f00c fbb4 	bl	800e020 <ai_network_destroy>
    network = AI_HANDLE_NULL;
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <ai_boostrap+0xf0>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
    return -3;
 80018be:	f06f 0302 	mvn.w	r3, #2
 80018c2:	e000      	b.n	80018c6 <ai_boostrap+0xe6>
  }

  return 0;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3740      	adds	r7, #64	; 0x40
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000c68 	.word	0x20000c68
 80018d4:	08014f0c 	.word	0x08014f0c
 80018d8:	40040440 	.word	0x40040440
 80018dc:	00040440 	.word	0x00040440
 80018e0:	08014f20 	.word	0x08014f20
 80018e4:	20000c6c 	.word	0x20000c6c
 80018e8:	08014f30 	.word	0x08014f30

080018ec <ai_run>:

static int ai_run(void *data_in, void *data_out)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  ai_i32 batch;

  ai_buffer *ai_input = network_info.inputs;
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <ai_run+0x5c>)
 80018f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fa:	617b      	str	r3, [r7, #20]
  ai_buffer *ai_output = network_info.outputs;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <ai_run+0x5c>)
 80018fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001900:	613b      	str	r3, [r7, #16]

  ai_input[0].data = AI_HANDLE_PTR(data_in);
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	611a      	str	r2, [r3, #16]
  ai_output[0].data = AI_HANDLE_PTR(data_out);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	611a      	str	r2, [r3, #16]

  batch = ai_network_run(network, ai_input, ai_output);
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <ai_run+0x60>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	6979      	ldr	r1, [r7, #20]
 8001916:	4618      	mov	r0, r3
 8001918:	f00c fbca 	bl	800e0b0 <ai_network_run>
 800191c:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d00c      	beq.n	800193e <ai_run+0x52>
    ai_log_err(ai_network_get_error(network),
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <ai_run+0x60>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f00c fb57 	bl	800dfdc <ai_network_get_error>
 800192e:	4603      	mov	r3, r0
 8001930:	4907      	ldr	r1, [pc, #28]	; (8001950 <ai_run+0x64>)
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ff34 	bl	80017a0 <ai_log_err>
        "ai_network_run");
    return -1;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
 800193c:	e000      	b.n	8001940 <ai_run+0x54>
  }

  return 0;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000c6c 	.word	0x20000c6c
 800194c:	20000c68 	.word	0x20000c68
 8001950:	08014f48 	.word	0x08014f48

08001954 <initNN>:

void initNN()
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0

	ai_boostrap(ai_network_data_weights_get(), activations);
 800195a:	f00c fbb9 	bl	800e0d0 <ai_network_data_weights_get>
 800195e:	4603      	mov	r3, r0
 8001960:	491b      	ldr	r1, [pc, #108]	; (80019d0 <initNN+0x7c>)
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff3c 	bl	80017e0 <ai_boostrap>

	if (network) {
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <initNN+0x80>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d014      	beq.n	800199a <initNN+0x46>

		if ((network_info.n_inputs != 1) || (network_info.n_outputs != 1)) {
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <initNN+0x84>)
 8001972:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001974:	2b01      	cmp	r3, #1
 8001976:	d103      	bne.n	8001980 <initNN+0x2c>
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <initNN+0x84>)
 800197a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800197c:	2b01      	cmp	r3, #1
 800197e:	d00c      	beq.n	800199a <initNN+0x46>
  			ai_error err = {AI_ERROR_INVALID_PARAM, AI_ERROR_CODE_OUT_OF_RANGE};
 8001980:	2314      	movs	r3, #20
 8001982:	713b      	strb	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2220      	movs	r2, #32
 8001988:	f362 231f 	bfi	r3, r2, #8, #24
 800198c:	607b      	str	r3, [r7, #4]
  			ai_log_err(err, "template code should be updated\r\n to support a model with multiple IO");
 800198e:	4913      	ldr	r1, [pc, #76]	; (80019dc <initNN+0x88>)
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff05 	bl	80017a0 <ai_log_err>
  			NVIC_SystemReset();
 8001996:	f7ff fde9 	bl	800156c <__NVIC_SystemReset>
	/* 1 - Set the I/O data buffer */

	#if AI_NETWORK_INPUTS_IN_ACTIVATIONS
		in_data = network_info.inputs[0].data;
	#else
		in_data = in_data_s;
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <initNN+0x8c>)
 800199c:	4a11      	ldr	r2, [pc, #68]	; (80019e4 <initNN+0x90>)
 800199e:	601a      	str	r2, [r3, #0]
	#endif

	#if AI_NETWORK_OUTPUTS_IN_ACTIVATIONS
		out_data = network_info.outputs[0].data;
	#else
		out_data = out_data_s;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <initNN+0x94>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <initNN+0x98>)
 80019a4:	601a      	str	r2, [r3, #0]
	#endif

	if ((!in_data) || (!out_data)) {
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <initNN+0x8c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <initNN+0x62>
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <initNN+0x94>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d104      	bne.n	80019c0 <initNN+0x6c>
		printf("TEMPLATE - I/O buffers are invalid\r\n");
 80019b6:	480e      	ldr	r0, [pc, #56]	; (80019f0 <initNN+0x9c>)
 80019b8:	f010 fef2 	bl	80127a0 <puts>
		NVIC_SystemReset(); //Reset al dispositivo
 80019bc:	f7ff fdd6 	bl	800156c <__NVIC_SystemReset>
	}


	printf("\r\nRed neuronal inicializada\r\n\n");
 80019c0:	480c      	ldr	r0, [pc, #48]	; (80019f4 <initNN+0xa0>)
 80019c2:	f010 feed 	bl	80127a0 <puts>


}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000ce0 	.word	0x20000ce0
 80019d4:	20000c68 	.word	0x20000c68
 80019d8:	20000c6c 	.word	0x20000c6c
 80019dc:	08014f58 	.word	0x08014f58
 80019e0:	20000c60 	.word	0x20000c60
 80019e4:	20001020 	.word	0x20001020
 80019e8:	20000c64 	.word	0x20000c64
 80019ec:	20001290 	.word	0x20001290
 80019f0:	08014fa0 	.word	0x08014fa0
 80019f4:	08014fc4 	.word	0x08014fc4

080019f8 <acquireDataTask>:


void acquireDataTask(void * param)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

	uint8_t i;

	for(;;){
		for(i = 0; i < AI_NETWORK_IN_1_SIZE; i += 6){
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e05d      	b.n	8001ac2 <acquireDataTask+0xca>
			readSensorsIT();
 8001a06:	f000 f9bf 	bl	8001d88 <readSensorsIT>
			((ai_float *)in_data)[i] = (ai_float)(acelBuff[0]/MEASUREMENT_RANGE); //2000
 8001a0a:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <acquireDataTask+0xe0>)
 8001a0c:	ed93 7a00 	vldr	s14, [r3]
 8001a10:	4b32      	ldr	r3, [pc, #200]	; (8001adc <acquireDataTask+0xe4>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001ae0 <acquireDataTask+0xe8>
 8001a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a22:	edc3 7a00 	vstr	s15, [r3]
			((ai_float *)in_data)[i+1] = (ai_float)(acelBuff[1]/MEASUREMENT_RANGE);
 8001a26:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <acquireDataTask+0xe0>)
 8001a28:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <acquireDataTask+0xe4>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	3301      	adds	r3, #1
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001ae0 <acquireDataTask+0xe8>
 8001a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a40:	edc3 7a00 	vstr	s15, [r3]
			((ai_float *)in_data)[i+2] = (ai_float)(acelBuff[2]/MEASUREMENT_RANGE);
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <acquireDataTask+0xe0>)
 8001a46:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <acquireDataTask+0xe4>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	3302      	adds	r3, #2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001ae0 <acquireDataTask+0xe8>
 8001a5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a5e:	edc3 7a00 	vstr	s15, [r3]
			((ai_float *)in_data)[i+3] = (ai_float)(girBuff[0]/MEASUREMENT_RANGE);
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <acquireDataTask+0xec>)
 8001a64:	ed93 7a00 	vldr	s14, [r3]
 8001a68:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <acquireDataTask+0xe4>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	3303      	adds	r3, #3
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001ae0 <acquireDataTask+0xe8>
 8001a78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7c:	edc3 7a00 	vstr	s15, [r3]
			((ai_float *)in_data)[i+4] = (ai_float)(girBuff[1]/MEASUREMENT_RANGE);
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <acquireDataTask+0xec>)
 8001a82:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <acquireDataTask+0xe4>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001ae0 <acquireDataTask+0xe8>
 8001a96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a9a:	edc3 7a00 	vstr	s15, [r3]
			((ai_float *)in_data)[i+5] = (ai_float)(girBuff[2]/MEASUREMENT_RANGE);
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <acquireDataTask+0xec>)
 8001aa0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <acquireDataTask+0xe4>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	3305      	adds	r3, #5
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001ae0 <acquireDataTask+0xe8>
 8001ab4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab8:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < AI_NETWORK_IN_1_SIZE; i += 6){
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	3306      	adds	r3, #6
 8001ac0:	73fb      	strb	r3, [r7, #15]
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	2b9b      	cmp	r3, #155	; 0x9b
 8001ac6:	d99e      	bls.n	8001a06 <acquireDataTask+0xe>
		}

		xSemaphoreGive(inputSemHandle);
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <acquireDataTask+0xf0>)
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	2300      	movs	r3, #0
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	f009 fb59 	bl	800b188 <xQueueGenericSend>
		for(i = 0; i < AI_NETWORK_IN_1_SIZE; i += 6){
 8001ad6:	e793      	b.n	8001a00 <acquireDataTask+0x8>
 8001ad8:	20000c1c 	.word	0x20000c1c
 8001adc:	20000c60 	.word	0x20000c60
 8001ae0:	44fa0000 	.word	0x44fa0000
 8001ae4:	20000c28 	.word	0x20000c28
 8001ae8:	20000c38 	.word	0x20000c38

08001aec <processDataTask>:
	}

}

void processDataTask(void * param)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

	int res;

	for(;;){

		xSemaphoreTake(inputSemHandle,portMAX_DELAY);
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <processDataTask+0x58>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	4618      	mov	r0, r3
 8001afe:	f009 fe49 	bl	800b794 <xQueueSemaphoreTake>

		res = ai_run(in_data,out_data); //Inferencia
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <processDataTask+0x5c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <processDataTask+0x60>)
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff feed 	bl	80018ec <ai_run>
 8001b12:	60f8      	str	r0, [r7, #12]


		if (res) {
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00c      	beq.n	8001b34 <processDataTask+0x48>

			ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8001b1a:	2311      	movs	r3, #17
 8001b1c:	723b      	strb	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2210      	movs	r2, #16
 8001b22:	f362 231f 	bfi	r3, r2, #8, #24
 8001b26:	60bb      	str	r3, [r7, #8]
		    ai_log_err(err, "Process has FAILED");
 8001b28:	4909      	ldr	r1, [pc, #36]	; (8001b50 <processDataTask+0x64>)
 8001b2a:	68b8      	ldr	r0, [r7, #8]
 8001b2c:	f7ff fe38 	bl	80017a0 <ai_log_err>
		    NVIC_SystemReset();
 8001b30:	f7ff fd1c 	bl	800156c <__NVIC_SystemReset>

		}else{

			xSemaphoreGive(outputSemHandle);
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <processDataTask+0x68>)
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	f009 fb23 	bl	800b188 <xQueueGenericSend>
		xSemaphoreTake(inputSemHandle,portMAX_DELAY);
 8001b42:	e7d7      	b.n	8001af4 <processDataTask+0x8>
 8001b44:	20000c38 	.word	0x20000c38
 8001b48:	20000c60 	.word	0x20000c60
 8001b4c:	20000c64 	.word	0x20000c64
 8001b50:	08014fe4 	.word	0x08014fe4
 8001b54:	20000c3c 	.word	0x20000c3c

08001b58 <postProcessTask>:

	}
}

void postProcessTask(void * param)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	nnOutput send;

	for(;;){

		xSemaphoreTake(outputSemHandle,portMAX_DELAY);
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <postProcessTask+0x7c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f009 fe13 	bl	800b794 <xQueueSemaphoreTake>
		maxIndex = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	75fb      	strb	r3, [r7, #23]
		for(i = 1; i < AI_NETWORK_OUT_1_SIZE; i++){ // Nos quedamos con la posición del elemento mayor
 8001b72:	2301      	movs	r3, #1
 8001b74:	75bb      	strb	r3, [r7, #22]
 8001b76:	e017      	b.n	8001ba8 <postProcessTask+0x50>
				if(((float*)out_data)[i] > ((float*)out_data)[maxIndex]){
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <postProcessTask+0x80>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	7dbb      	ldrb	r3, [r7, #22]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	ed93 7a00 	vldr	s14, [r3]
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <postProcessTask+0x80>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9c:	dd01      	ble.n	8001ba2 <postProcessTask+0x4a>
					maxIndex = i;
 8001b9e:	7dbb      	ldrb	r3, [r7, #22]
 8001ba0:	75fb      	strb	r3, [r7, #23]
		for(i = 1; i < AI_NETWORK_OUT_1_SIZE; i++){ // Nos quedamos con la posición del elemento mayor
 8001ba2:	7dbb      	ldrb	r3, [r7, #22]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	75bb      	strb	r3, [r7, #22]
 8001ba8:	7dbb      	ldrb	r3, [r7, #22]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d9e4      	bls.n	8001b78 <postProcessTask+0x20>
				}
		}
		send.movement = maxIndex;
 8001bae:	7dfb      	ldrb	r3, [r7, #23]
 8001bb0:	733b      	strb	r3, [r7, #12]
		send.accuracy = ((float*)out_data)[maxIndex];
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <postProcessTask+0x80>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	613b      	str	r3, [r7, #16]
		xQueueSend(outputQueueHandle,&send,portMAX_DELAY);
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <postProcessTask+0x84>)
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	f107 010c 	add.w	r1, r7, #12
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f04f 32ff 	mov.w	r2, #4294967295
 8001bce:	f009 fadb 	bl	800b188 <xQueueGenericSend>
		xSemaphoreTake(outputSemHandle,portMAX_DELAY);
 8001bd2:	e7c5      	b.n	8001b60 <postProcessTask+0x8>
 8001bd4:	20000c3c 	.word	0x20000c3c
 8001bd8:	20000c64 	.word	0x20000c64
 8001bdc:	20000c34 	.word	0x20000c34

08001be0 <wifiTask>:

	}
}

void wifiTask(void * param)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

	if(wifi_server() == -1){
 8001be8:	f000 fcb6 	bl	8002558 <wifi_server>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf2:	d101      	bne.n	8001bf8 <wifiTask+0x18>
		NVIC_SystemReset();
 8001bf4:	f7ff fcba 	bl	800156c <__NVIC_SystemReset>
	}
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback( I2C_HandleTypeDef *hi2c) // ISR
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

    BaseType_t hasWaken;

    xSemaphoreGiveFromISR(I2CBusySem,&hasWaken); // liberamos los semáforos y avisamos al planificador
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_I2C_MemRxCpltCallback+0x48>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f107 020c 	add.w	r2, r7, #12
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f009 fc51 	bl	800b4ba <xQueueGiveFromISR>

    xSemaphoreGiveFromISR(I2CBufferReadySem,&hasWaken);
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_I2C_MemRxCpltCallback+0x4c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f107 020c 	add.w	r2, r7, #12
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f009 fc49 	bl	800b4ba <xQueueGiveFromISR>

    portYIELD_FROM_ISR(hasWaken);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_I2C_MemRxCpltCallback+0x3e>
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_I2C_MemRxCpltCallback+0x50>)
 8001c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	f3bf 8f4f 	dsb	sy
 8001c3a:	f3bf 8f6f 	isb	sy


}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000c44 	.word	0x20000c44
 8001c4c:	20000c48 	.word	0x20000c48
 8001c50:	e000ed04 	.word	0xe000ed04

08001c54 <getNNoutput>:

nnOutput getNNoutput()
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

	nnOutput out; //struct de 2 campos (movimiento, precisión)
	xQueueReceive(outputQueueHandle, &out, portMAX_DELAY);
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <getNNoutput+0x34>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f107 0108 	add.w	r1, r7, #8
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f009 fcb3 	bl	800b5d4 <xQueueReceive>
	return out;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	461a      	mov	r2, r3
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c7a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000c34 	.word	0x20000c34

08001c8c <ReadI2C_IT>:

void ReadI2C_IT(uint8_t *buffer,uint16_t addr, uint8_t len)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	707b      	strb	r3, [r7, #1]

	xSemaphoreTake(I2CBusySem, portMAX_DELAY);
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <ReadI2C_IT+0x58>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f009 fd75 	bl	800b794 <xQueueSemaphoreTake>

	HAL_I2C_Mem_Read_IT(&hi2c2, 0xD5, addr,I2C_MEMADD_SIZE_8BIT, buffer, len);
 8001caa:	787b      	ldrb	r3, [r7, #1]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	9301      	str	r3, [sp, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	21d5      	movs	r1, #213	; 0xd5
 8001cba:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <ReadI2C_IT+0x5c>)
 8001cbc:	f001 fd34 	bl	8003728 <HAL_I2C_Mem_Read_IT>

	xSemaphoreTake(I2CBufferReadySem, portMAX_DELAY); // Espero al semaforo hasta que lo libere la ISR
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <ReadI2C_IT+0x60>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f009 fd63 	bl	800b794 <xQueueSemaphoreTake>

	xSemaphoreTake(I2CBufferReadySem, 0); //Se pone en rojo
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <ReadI2C_IT+0x60>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f009 fd5d 	bl	800b794 <xQueueSemaphoreTake>

}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000c44 	.word	0x20000c44
 8001ce8:	20000adc 	.word	0x20000adc
 8001cec:	20000c48 	.word	0x20000c48

08001cf0 <initSensors>:

uint8_t initSensors()
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af04      	add	r7, sp, #16

	uint8_t acelConfig [1] = {0x20}; //contenido del registro con la configuracion adecuada
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	713b      	strb	r3, [r7, #4]
	uint8_t girConfig [1] = {0x2C}; // 26Hz 2000mg, 2000dps
 8001cfa:	232c      	movs	r3, #44	; 0x2c
 8001cfc:	703b      	strb	r3, [r7, #0]
	uint8_t ret;

	ret = HAL_I2C_Mem_Write(&hi2c2, WRITE_ADDR, GIR_CONTROL_REG, I2C_MEMADD_SIZE_8BIT, girConfig, 1, 100);
 8001cfe:	2364      	movs	r3, #100	; 0x64
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	2301      	movs	r3, #1
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	463b      	mov	r3, r7
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	2211      	movs	r2, #17
 8001d0e:	21d4      	movs	r1, #212	; 0xd4
 8001d10:	4819      	ldr	r0, [pc, #100]	; (8001d78 <initSensors+0x88>)
 8001d12:	f001 fbf5 	bl	8003500 <HAL_I2C_Mem_Write>
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]

	ret |= HAL_I2C_Mem_Write(&hi2c2, WRITE_ADDR, ACEL_CONTROL_REG, I2C_MEMADD_SIZE_8BIT, acelConfig, 1, 100);
 8001d1a:	2364      	movs	r3, #100	; 0x64
 8001d1c:	9302      	str	r3, [sp, #8]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2301      	movs	r3, #1
 8001d28:	2210      	movs	r2, #16
 8001d2a:	21d4      	movs	r1, #212	; 0xd4
 8001d2c:	4812      	ldr	r0, [pc, #72]	; (8001d78 <initSensors+0x88>)
 8001d2e:	f001 fbe7 	bl	8003500 <HAL_I2C_Mem_Write>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	71fb      	strb	r3, [r7, #7]

	printf("Acelerómetro y Giroscopio configurados en un rango de medida: +- %.2f mg,dps \r\n",MEASUREMENT_RANGE);
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <initSensors+0x8c>)
 8001d42:	480f      	ldr	r0, [pc, #60]	; (8001d80 <initSensors+0x90>)
 8001d44:	f010 fca6 	bl	8012694 <iprintf>
	printf("Sensibilidad de los sensores: %.3f ,%.6f \r\n\n",ACEL_SENSIVITY,GIR_SENSIVITY);
 8001d48:	a307      	add	r3, pc, #28	; (adr r3, 8001d68 <initSensors+0x78>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	e9cd 2300 	strd	r2, r3, [sp]
 8001d52:	a307      	add	r3, pc, #28	; (adr r3, 8001d70 <initSensors+0x80>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	480a      	ldr	r0, [pc, #40]	; (8001d84 <initSensors+0x94>)
 8001d5a:	f010 fc9b 	bl	8012694 <iprintf>

	return ret;
 8001d5e:	79fb      	ldrb	r3, [r7, #7]

}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	3fb1eb85 	.word	0x3fb1eb85
 8001d70:	60000000 	.word	0x60000000
 8001d74:	3faf3b64 	.word	0x3faf3b64
 8001d78:	20000adc 	.word	0x20000adc
 8001d7c:	409f4000 	.word	0x409f4000
 8001d80:	08014ff8 	.word	0x08014ff8
 8001d84:	08014e0c 	.word	0x08014e0c

08001d88 <readSensorsIT>:

void readSensorsIT()
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0

	uint8_t i2cBuffer[12];
	uint8_t i;

	ReadI2C_IT(i2cBuffer, REG_STATUS, 1);
 8001d8e:	463b      	mov	r3, r7
 8001d90:	2201      	movs	r2, #1
 8001d92:	211e      	movs	r1, #30
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff79 	bl	8001c8c <ReadI2C_IT>

	while((i2cBuffer[0] & 0x03) != 0x03){ // Polling a los bits que indican cuando hay datos nuevos
 8001d9a:	e005      	b.n	8001da8 <readSensorsIT+0x20>

		ReadI2C_IT(i2cBuffer, REG_STATUS, 1);
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	2201      	movs	r2, #1
 8001da0:	211e      	movs	r1, #30
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff72 	bl	8001c8c <ReadI2C_IT>
	while((i2cBuffer[0] & 0x03) != 0x03){ // Polling a los bits que indican cuando hay datos nuevos
 8001da8:	783b      	ldrb	r3, [r7, #0]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d1f4      	bne.n	8001d9c <readSensorsIT+0x14>

	}

	ReadI2C_IT(i2cBuffer, REG_GIR, 12); // 0x22 reg acel y 0x28, al estar consecutivos podemos
 8001db2:	463b      	mov	r3, r7
 8001db4:	220c      	movs	r2, #12
 8001db6:	2122      	movs	r1, #34	; 0x22
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff67 	bl	8001c8c <ReadI2C_IT>
									    // leer los 2 sensores de una sola transferencia
	for(i = 0; i < 3; i++){
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	73fb      	strb	r3, [r7, #15]
 8001dc2:	e041      	b.n	8001e48 <readSensorsIT+0xc0>

		girBuff[i] = (float) ((int16_t) (i2cBuffer[2*i+1] << 8) | i2cBuffer[2*i]) * GIR_SENSIVITY;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	3301      	adds	r3, #1
 8001dca:	3310      	adds	r3, #16
 8001dcc:	443b      	add	r3, r7
 8001dce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	3310      	adds	r3, #16
 8001dde:	443b      	add	r3, r7
 8001de0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001e58 <readSensorsIT+0xd0>
 8001df4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df8:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <readSensorsIT+0xd4>)
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	edc3 7a00 	vstr	s15, [r3]

		acelBuff[i] = (float) ((int16_t) (i2cBuffer[(2*i+1)+6] << 8) | i2cBuffer[(2*i)+6]) * ACEL_SENSIVITY;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	3307      	adds	r3, #7
 8001e08:	3310      	adds	r3, #16
 8001e0a:	443b      	add	r3, r7
 8001e0c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	3303      	adds	r3, #3
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	3310      	adds	r3, #16
 8001e1e:	443b      	add	r3, r7
 8001e20:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001e60 <readSensorsIT+0xd8>
 8001e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e38:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <readSensorsIT+0xdc>)
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0; i < 3; i++){
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	3301      	adds	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d9ba      	bls.n	8001dc4 <readSensorsIT+0x3c>

		//0.14  0.29  0.43  0.58
	}

}
 8001e4e:	bf00      	nop
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	3d8f5c29 	.word	0x3d8f5c29
 8001e5c:	20000c28 	.word	0x20000c28
 8001e60:	3d79db23 	.word	0x3d79db23
 8001e64:	20000c1c 	.word	0x20000c1c

08001e68 <HAL_UART_TxCpltCallback>:

extern UART_HandleTypeDef huart1;
extern SemaphoreHandle_t uartSemaphoreHandle;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	static signed long xHigherPriorityTaskWoken = pdFALSE;

	xSemaphoreGiveFromISR(uartSemaphoreHandle, &xHigherPriorityTaskWoken);
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_UART_TxCpltCallback+0x34>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	490a      	ldr	r1, [pc, #40]	; (8001ea0 <HAL_UART_TxCpltCallback+0x38>)
 8001e76:	4618      	mov	r0, r3
 8001e78:	f009 fb1f 	bl	800b4ba <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_UART_TxCpltCallback+0x38>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <HAL_UART_TxCpltCallback+0x2c>
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_UART_TxCpltCallback+0x3c>)
 8001e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	f3bf 8f4f 	dsb	sy
 8001e90:	f3bf 8f6f 	isb	sy

}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000c40 	.word	0x20000c40
 8001ea0:	200012a0 	.word	0x200012a0
 8001ea4:	e000ed04 	.word	0xe000ed04

08001ea8 <__io_putchar>:

int __io_putchar(int ch)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(uartSemaphoreHandle, 0xffff);
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <__io_putchar+0x2c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f009 fc6b 	bl	800b794 <xQueueSemaphoreTake>

	HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ch, 1);
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <__io_putchar+0x30>)
 8001ec6:	f006 f8af 	bl	8008028 <HAL_UART_Transmit_IT>

	//while(HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 30000))
	//{
	//	;
	//}
	return ch;
 8001eca:	687b      	ldr	r3, [r7, #4]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000c40 	.word	0x20000c40
 8001ed8:	20000b94 	.word	0x20000b94

08001edc <__io_getchar>:

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

int __io_getchar(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	71fb      	strb	r3, [r7, #7]

	//while(HAL_OK != HAL_UART_Receive(&huart1, &ch, 1, 30000))
	//{
	//	;
	//}
	HAL_UART_Receive(&huart1, &ch, 1, 0);
 8001ee6:	1df9      	adds	r1, r7, #7
 8001ee8:	2300      	movs	r3, #0
 8001eea:	2201      	movs	r2, #1
 8001eec:	4803      	ldr	r0, [pc, #12]	; (8001efc <__io_getchar+0x20>)
 8001eee:	f005 ffca 	bl	8007e86 <HAL_UART_Receive>

	return ch;
 8001ef2:	79fb      	ldrb	r3, [r7, #7]


}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000b94 	.word	0x20000b94

08001f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6613      	str	r3, [r2, #96]	; 0x60
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6593      	str	r3, [r2, #88]	; 0x58
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	210f      	movs	r1, #15
 8001f3a:	f06f 0001 	mvn.w	r0, #1
 8001f3e:	f000 fdba 	bl	8002ab6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000

08001f50 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <HAL_CRC_MspInit+0x38>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d10b      	bne.n	8001f7a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_CRC_MspInit+0x3c>)
 8001f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <HAL_CRC_MspInit+0x3c>)
 8001f68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f6c:	6493      	str	r3, [r2, #72]	; 0x48
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <HAL_CRC_MspInit+0x3c>)
 8001f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40023000 	.word	0x40023000
 8001f8c:	40021000 	.word	0x40021000

08001f90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b0ac      	sub	sp, #176	; 0xb0
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	2288      	movs	r2, #136	; 0x88
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f00f fe1d 	bl	8011bf0 <memset>
  if(hi2c->Instance==I2C2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a25      	ldr	r2, [pc, #148]	; (8002050 <HAL_I2C_MspInit+0xc0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d143      	bne.n	8002048 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 ff1f 	bl	8005e10 <HAL_RCCEx_PeriphCLKConfig>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001fd8:	f7ff fac2 	bl	8001560 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_I2C_MspInit+0xc4>)
 8001fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe0:	4a1c      	ldr	r2, [pc, #112]	; (8002054 <HAL_I2C_MspInit+0xc4>)
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_I2C_MspInit+0xc4>)
 8001fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001ff4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ff8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ffc:	2312      	movs	r3, #18
 8001ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800200e:	2304      	movs	r3, #4
 8002010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002018:	4619      	mov	r1, r3
 800201a:	480f      	ldr	r0, [pc, #60]	; (8002058 <HAL_I2C_MspInit+0xc8>)
 800201c:	f000 fefa 	bl	8002e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_I2C_MspInit+0xc4>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <HAL_I2C_MspInit+0xc4>)
 8002026:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800202a:	6593      	str	r3, [r2, #88]	; 0x58
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_I2C_MspInit+0xc4>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8002038:	2200      	movs	r2, #0
 800203a:	2105      	movs	r1, #5
 800203c:	2021      	movs	r0, #33	; 0x21
 800203e:	f000 fd3a 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002042:	2021      	movs	r0, #33	; 0x21
 8002044:	f000 fd53 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002048:	bf00      	nop
 800204a:	37b0      	adds	r7, #176	; 0xb0
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40005800 	.word	0x40005800
 8002054:	40021000 	.word	0x40021000
 8002058:	48000400 	.word	0x48000400

0800205c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <HAL_SPI_MspInit+0x7c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d128      	bne.n	80020d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800207e:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_SPI_MspInit+0x80>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	4a16      	ldr	r2, [pc, #88]	; (80020dc <HAL_SPI_MspInit+0x80>)
 8002084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002088:	6593      	str	r3, [r2, #88]	; 0x58
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_SPI_MspInit+0x80>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_SPI_MspInit+0x80>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	4a10      	ldr	r2, [pc, #64]	; (80020dc <HAL_SPI_MspInit+0x80>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_SPI_MspInit+0x80>)
 80020a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80020ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80020b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020c0:	2306      	movs	r3, #6
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4619      	mov	r1, r3
 80020ca:	4805      	ldr	r0, [pc, #20]	; (80020e0 <HAL_SPI_MspInit+0x84>)
 80020cc:	f000 fea2 	bl	8002e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020d0:	bf00      	nop
 80020d2:	3728      	adds	r7, #40	; 0x28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40003c00 	.word	0x40003c00
 80020dc:	40021000 	.word	0x40021000
 80020e0:	48000800 	.word	0x48000800

080020e4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a08      	ldr	r2, [pc, #32]	; (8002114 <HAL_SPI_MspDeInit+0x30>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d10a      	bne.n	800210c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_SPI_MspDeInit+0x34>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	4a07      	ldr	r2, [pc, #28]	; (8002118 <HAL_SPI_MspDeInit+0x34>)
 80020fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002100:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8002102:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002106:	4805      	ldr	r0, [pc, #20]	; (800211c <HAL_SPI_MspDeInit+0x38>)
 8002108:	f001 f82e 	bl	8003168 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40003c00 	.word	0x40003c00
 8002118:	40021000 	.word	0x40021000
 800211c:	48000800 	.word	0x48000800

08002120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b0ac      	sub	sp, #176	; 0xb0
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	2288      	movs	r2, #136	; 0x88
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f00f fd55 	bl	8011bf0 <memset>
  if(huart->Instance==USART1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a25      	ldr	r2, [pc, #148]	; (80021e0 <HAL_UART_MspInit+0xc0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d142      	bne.n	80021d6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002150:	2301      	movs	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002154:	2300      	movs	r3, #0
 8002156:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fe57 	bl	8005e10 <HAL_RCCEx_PeriphCLKConfig>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002168:	f7ff f9fa 	bl	8001560 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_UART_MspInit+0xc4>)
 800216e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <HAL_UART_MspInit+0xc4>)
 8002172:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002176:	6613      	str	r3, [r2, #96]	; 0x60
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_UART_MspInit+0xc4>)
 800217a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002184:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <HAL_UART_MspInit+0xc4>)
 8002186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002188:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <HAL_UART_MspInit+0xc4>)
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HAL_UART_MspInit+0xc4>)
 8002192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800219c:	23c0      	movs	r3, #192	; 0xc0
 800219e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021b4:	2307      	movs	r3, #7
 80021b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021be:	4619      	mov	r1, r3
 80021c0:	4809      	ldr	r0, [pc, #36]	; (80021e8 <HAL_UART_MspInit+0xc8>)
 80021c2:	f000 fe27 	bl	8002e14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2105      	movs	r1, #5
 80021ca:	2025      	movs	r0, #37	; 0x25
 80021cc:	f000 fc73 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021d0:	2025      	movs	r0, #37	; 0x25
 80021d2:	f000 fc8c 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021d6:	bf00      	nop
 80021d8:	37b0      	adds	r7, #176	; 0xb0
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40013800 	.word	0x40013800
 80021e4:	40021000 	.word	0x40021000
 80021e8:	48000400 	.word	0x48000400

080021ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <NMI_Handler+0x4>

080021f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f6:	e7fe      	b.n	80021f6 <HardFault_Handler+0x4>

080021f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <MemManage_Handler+0x4>

080021fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002202:	e7fe      	b.n	8002202 <BusFault_Handler+0x4>

08002204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <UsageFault_Handler+0x4>

0800220a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800221c:	f000 fb2c 	bl	8002878 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002220:	f00a fc04 	bl	800ca2c <xTaskGetSchedulerState>
 8002224:	4603      	mov	r3, r0
 8002226:	2b01      	cmp	r3, #1
 8002228:	d001      	beq.n	800222e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800222a:	f00b faed 	bl	800d808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}

08002232 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002236:	2020      	movs	r0, #32
 8002238:	f001 f8ba 	bl	80033b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800223c:	2040      	movs	r0, #64	; 0x40
 800223e:	f001 f8b7 	bl	80033b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002242:	2080      	movs	r0, #128	; 0x80
 8002244:	f001 f8b4 	bl	80033b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002248:	f44f 7080 	mov.w	r0, #256	; 0x100
 800224c:	f001 f8b0 	bl	80033b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}

08002254 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <I2C2_EV_IRQHandler+0x10>)
 800225a:	f001 faeb 	bl	8003834 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000adc 	.word	0x20000adc

08002268 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <USART1_IRQHandler+0x10>)
 800226e:	f005 ff49 	bl	8008104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000b94 	.word	0x20000b94

0800227c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002280:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002284:	f001 f894 	bl	80033b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002288:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800228c:	f001 f890 	bl	80033b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002290:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002294:	f001 f88c 	bl	80033b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002298:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800229c:	f001 f888 	bl	80033b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80022a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80022a4:	f001 f884 	bl	80033b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}

080022ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
	return 1;
 80022b0:	2301      	movs	r3, #1
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <_kill>:

int _kill(int pid, int sig)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022c6:	f00f fb59 	bl	801197c <__errno>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2216      	movs	r2, #22
 80022ce:	601a      	str	r2, [r3, #0]
	return -1;
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <_exit>:

void _exit (int status)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022e4:	f04f 31ff 	mov.w	r1, #4294967295
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ffe7 	bl	80022bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80022ee:	e7fe      	b.n	80022ee <_exit+0x12>

080022f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	e00a      	b.n	8002318 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002302:	f7ff fdeb 	bl	8001edc <__io_getchar>
 8002306:	4601      	mov	r1, r0
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	60ba      	str	r2, [r7, #8]
 800230e:	b2ca      	uxtb	r2, r1
 8002310:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3301      	adds	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	dbf0      	blt.n	8002302 <_read+0x12>
	}

return len;
 8002320:	687b      	ldr	r3, [r7, #4]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e009      	b.n	8002350 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	60ba      	str	r2, [r7, #8]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fdaf 	bl	8001ea8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	dbf1      	blt.n	800233c <_write+0x12>
	}
	return len;
 8002358:	687b      	ldr	r3, [r7, #4]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <_close>:

int _close(int file)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
	return -1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800238a:	605a      	str	r2, [r3, #4]
	return 0;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_isatty>:

int _isatty(int file)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
	return 1;
 80023a2:	2301      	movs	r3, #1
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
	return 0;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d4:	4a14      	ldr	r2, [pc, #80]	; (8002428 <_sbrk+0x5c>)
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <_sbrk+0x60>)
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <_sbrk+0x64>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <_sbrk+0x64>)
 80023ea:	4a12      	ldr	r2, [pc, #72]	; (8002434 <_sbrk+0x68>)
 80023ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d207      	bcs.n	800240c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023fc:	f00f fabe 	bl	801197c <__errno>
 8002400:	4603      	mov	r3, r0
 8002402:	220c      	movs	r2, #12
 8002404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002406:	f04f 33ff 	mov.w	r3, #4294967295
 800240a:	e009      	b.n	8002420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <_sbrk+0x64>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002412:	4b07      	ldr	r3, [pc, #28]	; (8002430 <_sbrk+0x64>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <_sbrk+0x64>)
 800241c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800241e:	68fb      	ldr	r3, [r7, #12]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20018000 	.word	0x20018000
 800242c:	00000800 	.word	0x00000800
 8002430:	200012a4 	.word	0x200012a4
 8002434:	20005220 	.word	0x20005220

08002438 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <SystemInit+0x20>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	4a05      	ldr	r2, [pc, #20]	; (8002458 <SystemInit+0x20>)
 8002444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <wifi_start>:
static void WebServerProcess(void);



static int wifi_start(void)
{
 800245c:	b5b0      	push	{r4, r5, r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8002462:	f008 fa13 	bl	800a88c <WIFI_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d123      	bne.n	80024b4 <wifi_start+0x58>
  {
    LOG(("ES-WIFI Initialized.\n"));
 800246c:	4814      	ldr	r0, [pc, #80]	; (80024c0 <wifi_start+0x64>)
 800246e:	f010 f997 	bl	80127a0 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8002472:	463b      	mov	r3, r7
 8002474:	4618      	mov	r0, r3
 8002476:	f008 fa57 	bl	800a928 <WIFI_GetMAC_Address>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d113      	bne.n	80024a8 <wifi_start+0x4c>
    {
      LOG(("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8002480:	783b      	ldrb	r3, [r7, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	461c      	mov	r4, r3
 8002488:	78bb      	ldrb	r3, [r7, #2]
 800248a:	461d      	mov	r5, r3
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	793a      	ldrb	r2, [r7, #4]
 8002490:	7979      	ldrb	r1, [r7, #5]
 8002492:	9102      	str	r1, [sp, #8]
 8002494:	9201      	str	r2, [sp, #4]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	462b      	mov	r3, r5
 800249a:	4622      	mov	r2, r4
 800249c:	4601      	mov	r1, r0
 800249e:	4809      	ldr	r0, [pc, #36]	; (80024c4 <wifi_start+0x68>)
 80024a0:	f010 f8f8 	bl	8012694 <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e007      	b.n	80024b8 <wifi_start+0x5c>
      LOG(("> ERROR : CANNOT get MAC address\n"));
 80024a8:	4807      	ldr	r0, [pc, #28]	; (80024c8 <wifi_start+0x6c>)
 80024aa:	f010 f979 	bl	80127a0 <puts>
      return -1;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
 80024b2:	e001      	b.n	80024b8 <wifi_start+0x5c>
    return -1;
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bdb0      	pop	{r4, r5, r7, pc}
 80024c0:	0801504c 	.word	0x0801504c
 80024c4:	08015064 	.word	0x08015064
 80024c8:	08015098 	.word	0x08015098

080024cc <wifi_connect>:



int wifi_connect(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af02      	add	r7, sp, #8

  wifi_start();
 80024d2:	f7ff ffc3 	bl	800245c <wifi_start>

  LOG(("\nConnecting to %s , %s\r\n",SSID,PASSWORD));
 80024d6:	4a19      	ldr	r2, [pc, #100]	; (800253c <wifi_connect+0x70>)
 80024d8:	4919      	ldr	r1, [pc, #100]	; (8002540 <wifi_connect+0x74>)
 80024da:	481a      	ldr	r0, [pc, #104]	; (8002544 <wifi_connect+0x78>)
 80024dc:	f010 f8da 	bl	8012694 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 80024e0:	2203      	movs	r2, #3
 80024e2:	4916      	ldr	r1, [pc, #88]	; (800253c <wifi_connect+0x70>)
 80024e4:	4816      	ldr	r0, [pc, #88]	; (8002540 <wifi_connect+0x74>)
 80024e6:	f008 f9fd 	bl	800a8e4 <WIFI_Connect>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d11d      	bne.n	800252c <wifi_connect+0x60>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 80024f0:	4815      	ldr	r0, [pc, #84]	; (8002548 <wifi_connect+0x7c>)
 80024f2:	f008 fa2f 	bl	800a954 <WIFI_GetIP_Address>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d111      	bne.n	8002520 <wifi_connect+0x54>
    {
      LOG(("> es-wifi module connected: got IP Address : %d.%d.%d.%d\r\n",
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <wifi_connect+0x7c>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <wifi_connect+0x7c>)
 8002504:	785b      	ldrb	r3, [r3, #1]
 8002506:	461a      	mov	r2, r3
 8002508:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <wifi_connect+0x7c>)
 800250a:	789b      	ldrb	r3, [r3, #2]
 800250c:	4618      	mov	r0, r3
 800250e:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <wifi_connect+0x7c>)
 8002510:	78db      	ldrb	r3, [r3, #3]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	4603      	mov	r3, r0
 8002516:	480d      	ldr	r0, [pc, #52]	; (800254c <wifi_connect+0x80>)
 8002518:	f010 f8bc 	bl	8012694 <iprintf>
  else
  {
		 LOG(("ERROR : es-wifi module NOT connected\r\n"));
     return -1;
  }
  return 0;
 800251c:	2300      	movs	r3, #0
 800251e:	e00a      	b.n	8002536 <wifi_connect+0x6a>
		  LOG((" ERROR : es-wifi module CANNOT get IP address\r\n"));
 8002520:	480b      	ldr	r0, [pc, #44]	; (8002550 <wifi_connect+0x84>)
 8002522:	f010 f93d 	bl	80127a0 <puts>
      return -1;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	e004      	b.n	8002536 <wifi_connect+0x6a>
		 LOG(("ERROR : es-wifi module NOT connected\r\n"));
 800252c:	4809      	ldr	r0, [pc, #36]	; (8002554 <wifi_connect+0x88>)
 800252e:	f010 f937 	bl	80127a0 <puts>
     return -1;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	080150bc 	.word	0x080150bc
 8002540:	080150c8 	.word	0x080150c8
 8002544:	080150d0 	.word	0x080150d0
 8002548:	200012b8 	.word	0x200012b8
 800254c:	080150ec 	.word	0x080150ec
 8002550:	08015128 	.word	0x08015128
 8002554:	08015158 	.word	0x08015158

08002558 <wifi_server>:

int wifi_server(void)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b085      	sub	sp, #20
 800255c:	af02      	add	r7, sp, #8

  LOG(("\nRunning Server \r\n"));
 800255e:	4832      	ldr	r0, [pc, #200]	; (8002628 <wifi_server+0xd0>)
 8002560:	f010 f91e 	bl	80127a0 <puts>
  if (wifi_connect()!=0) return -1;
 8002564:	f7ff ffb2 	bl	80024cc <wifi_connect>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <wifi_server+0x1c>
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
 8002572:	e055      	b.n	8002620 <wifi_server+0xc8>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 8002574:	f640 33b9 	movw	r3, #3001	; 0xbb9
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	4b2c      	ldr	r3, [pc, #176]	; (800262c <wifi_server+0xd4>)
 800257c:	2201      	movs	r2, #1
 800257e:	2100      	movs	r1, #0
 8002580:	2000      	movs	r0, #0
 8002582:	f008 fa03 	bl	800a98c <WIFI_StartServer>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <wifi_server+0x3a>
  {
    LOG(("ERROR: Cannot start server.\n"));
 800258c:	4828      	ldr	r0, [pc, #160]	; (8002630 <wifi_server+0xd8>)
 800258e:	f010 f907 	bl	80127a0 <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\r\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8002592:	4b28      	ldr	r3, [pc, #160]	; (8002634 <wifi_server+0xdc>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	4619      	mov	r1, r3
 8002598:	4b26      	ldr	r3, [pc, #152]	; (8002634 <wifi_server+0xdc>)
 800259a:	785b      	ldrb	r3, [r3, #1]
 800259c:	461a      	mov	r2, r3
 800259e:	4b25      	ldr	r3, [pc, #148]	; (8002634 <wifi_server+0xdc>)
 80025a0:	789b      	ldrb	r3, [r3, #2]
 80025a2:	4618      	mov	r0, r3
 80025a4:	4b23      	ldr	r3, [pc, #140]	; (8002634 <wifi_server+0xdc>)
 80025a6:	78db      	ldrb	r3, [r3, #3]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	4603      	mov	r3, r0
 80025ac:	4822      	ldr	r0, [pc, #136]	; (8002638 <wifi_server+0xe0>)
 80025ae:	f010 f871 	bl	8012694 <iprintf>
  {
    uint8_t RemoteIP[4];
    uint16_t RemotePort;


    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 80025b2:	e00f      	b.n	80025d4 <wifi_server+0x7c>
    {
        LOG(("Waiting connection to  %d.%d.%d.%d\r\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 80025b4:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <wifi_server+0xdc>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	4619      	mov	r1, r3
 80025ba:	4b1e      	ldr	r3, [pc, #120]	; (8002634 <wifi_server+0xdc>)
 80025bc:	785b      	ldrb	r3, [r3, #1]
 80025be:	461a      	mov	r2, r3
 80025c0:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <wifi_server+0xdc>)
 80025c2:	789b      	ldrb	r3, [r3, #2]
 80025c4:	4618      	mov	r0, r3
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <wifi_server+0xdc>)
 80025c8:	78db      	ldrb	r3, [r3, #3]
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	4603      	mov	r3, r0
 80025ce:	481b      	ldr	r0, [pc, #108]	; (800263c <wifi_server+0xe4>)
 80025d0:	f010 f860 	bl	8012694 <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 80025d4:	1cbb      	adds	r3, r7, #2
 80025d6:	1d3a      	adds	r2, r7, #4
 80025d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025dc:	2000      	movs	r0, #0
 80025de:	f008 fa05 	bl	800a9ec <WIFI_WaitServerConnection>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1e5      	bne.n	80025b4 <wifi_server+0x5c>

    }

    LOG(("Client connected %d.%d.%d.%d:%d\r\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 80025e8:	793b      	ldrb	r3, [r7, #4]
 80025ea:	4619      	mov	r1, r3
 80025ec:	797b      	ldrb	r3, [r7, #5]
 80025ee:	4618      	mov	r0, r3
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	461c      	mov	r4, r3
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	887a      	ldrh	r2, [r7, #2]
 80025f8:	9201      	str	r2, [sp, #4]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	4623      	mov	r3, r4
 80025fe:	4602      	mov	r2, r0
 8002600:	480f      	ldr	r0, [pc, #60]	; (8002640 <wifi_server+0xe8>)
 8002602:	f010 f847 	bl	8012694 <iprintf>

    WebServerProcess();
 8002606:	f000 f81f 	bl	8002648 <WebServerProcess>

    if(WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 800260a:	2000      	movs	r0, #0
 800260c:	f008 fa32 	bl	800aa74 <WIFI_CloseServerConnection>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0cd      	beq.n	80025b2 <wifi_server+0x5a>
    {
      LOG(("ERROR: failed to close current Server connection\n"));
 8002616:	480b      	ldr	r0, [pc, #44]	; (8002644 <wifi_server+0xec>)
 8002618:	f010 f8c2 	bl	80127a0 <puts>
      return -1;
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
  while(1);

}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bd90      	pop	{r4, r7, pc}
 8002628:	08015180 	.word	0x08015180
 800262c:	08015194 	.word	0x08015194
 8002630:	08015198 	.word	0x08015198
 8002634:	200012b8 	.word	0x200012b8
 8002638:	080151b4 	.word	0x080151b4
 800263c:	08015204 	.word	0x08015204
 8002640:	0801522c 	.word	0x0801522c
 8002644:	08015250 	.word	0x08015250

08002648 <WebServerProcess>:


static void WebServerProcess(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0

  bool stop = true;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
  while(stop){
 8002652:	e027      	b.n	80026a4 <WebServerProcess+0x5c>

	  nnOutput nnOut = getNNoutput(); //Esperamos la cola con los datos de la tarea que procesa la salida de la red
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fafc 	bl	8001c54 <getNNoutput>

	  if (nnOut.accuracy <= 0.50f){
 800265c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002660:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	d801      	bhi.n	8002672 <WebServerProcess+0x2a>
		  nnOut.movement = 4;
 800266e:	2304      	movs	r3, #4
 8002670:	713b      	strb	r3, [r7, #4]
	  }

	  if(SendWebPage(nnOut) != WIFI_STATUS_OK){
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002678:	f000 f822 	bl	80026c0 <SendWebPage>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <WebServerProcess+0x46>
	         LOG(("> ERROR : No se pueden enviar los datos\r\n"));
 8002682:	480c      	ldr	r0, [pc, #48]	; (80026b4 <WebServerProcess+0x6c>)
 8002684:	f010 f88c 	bl	80127a0 <puts>
	         stop = false;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]
 800268c:	e00a      	b.n	80026a4 <WebServerProcess+0x5c>
	  }
	  else{
	         LOG(("Enviando datos: %d --> %s\r\n",nnOut.movement,movements[nnOut.movement]));
 800268e:	793b      	ldrb	r3, [r7, #4]
 8002690:	4619      	mov	r1, r3
 8002692:	793b      	ldrb	r3, [r7, #4]
 8002694:	461a      	mov	r2, r3
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <WebServerProcess+0x70>)
 8002698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269c:	461a      	mov	r2, r3
 800269e:	4807      	ldr	r0, [pc, #28]	; (80026bc <WebServerProcess+0x74>)
 80026a0:	f00f fff8 	bl	8012694 <iprintf>
  while(stop){
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1d4      	bne.n	8002654 <WebServerProcess+0xc>
	  }
  }


 }
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	08015284 	.word	0x08015284
 80026b8:	20000000 	.word	0x20000000
 80026bc:	080152b0 	.word	0x080152b0

080026c0 <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(nnOutput data)
{
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	463b      	mov	r3, r7
 80026c8:	e883 0003 	stmia.w	r3, {r0, r1}

  uint16_t SentDataLength;
  WIFI_Status_t ret;

  sprintf((char *)resp, (char *)"%d,%.2f",data.movement,data.accuracy);
 80026cc:	783b      	ldrb	r3, [r7, #0]
 80026ce:	461c      	mov	r4, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ff38 	bl	8000548 <__aeabi_f2d>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	e9cd 2300 	strd	r2, r3, [sp]
 80026e0:	4622      	mov	r2, r4
 80026e2:	4913      	ldr	r1, [pc, #76]	; (8002730 <SendWebPage+0x70>)
 80026e4:	4813      	ldr	r0, [pc, #76]	; (8002734 <SendWebPage+0x74>)
 80026e6:	f010 f8dd 	bl	80128a4 <siprintf>

  ret = WIFI_SendData(0, (uint8_t *)resp, strlen((char *)resp), &SentDataLength, WIFI_WRITE_TIMEOUT);
 80026ea:	4812      	ldr	r0, [pc, #72]	; (8002734 <SendWebPage+0x74>)
 80026ec:	f7fd fd70 	bl	80001d0 <strlen>
 80026f0:	4603      	mov	r3, r0
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	f242 7110 	movw	r1, #10000	; 0x2710
 80026fc:	9100      	str	r1, [sp, #0]
 80026fe:	490d      	ldr	r1, [pc, #52]	; (8002734 <SendWebPage+0x74>)
 8002700:	2000      	movs	r0, #0
 8002702:	f008 f9cd 	bl	800aaa0 <WIFI_SendData>
 8002706:	4603      	mov	r3, r0
 8002708:	73fb      	strb	r3, [r7, #15]

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)resp)))
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d109      	bne.n	8002724 <SendWebPage+0x64>
 8002710:	89bb      	ldrh	r3, [r7, #12]
 8002712:	461c      	mov	r4, r3
 8002714:	4807      	ldr	r0, [pc, #28]	; (8002734 <SendWebPage+0x74>)
 8002716:	f7fd fd5b 	bl	80001d0 <strlen>
 800271a:	4603      	mov	r3, r0
 800271c:	429c      	cmp	r4, r3
 800271e:	d001      	beq.n	8002724 <SendWebPage+0x64>
  {
    ret = WIFI_STATUS_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bd90      	pop	{r4, r7, pc}
 800272e:	bf00      	nop
 8002730:	080152cc 	.word	0x080152cc
 8002734:	200012a8 	.word	0x200012a8

08002738 <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800273c:	2002      	movs	r0, #2
 800273e:	f000 fe37 	bl	80033b0 <HAL_GPIO_EXTI_IRQHandler>
 portYIELD_FROM_ISR(pdFALSE);
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d102      	bne.n	800275c <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8002756:	f008 f889 	bl	800a86c <SPI_WIFI_ISR>
      break;
 800275a:	e000      	b.n	800275e <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 800275c:	bf00      	nop
    }
  }
  portYIELD_FROM_ISR(pdFALSE);
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <SPI3_IRQHandler>:
  * @param  None
  * @retval None
  */
extern  SPI_HandleTypeDef hspi;
void SPI3_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <SPI3_IRQHandler+0x10>)
 800276e:	f004 fe07 	bl	8007380 <HAL_SPI_IRQHandler>
  portYIELD_FROM_ISR(pdFALSE);
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200012c0 	.word	0x200012c0

0800277c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800277c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002780:	f7ff fe5a 	bl	8002438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002784:	480c      	ldr	r0, [pc, #48]	; (80027b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002786:	490d      	ldr	r1, [pc, #52]	; (80027bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002788:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <LoopForever+0xe>)
  movs r3, #0
 800278a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800278c:	e002      	b.n	8002794 <LoopCopyDataInit>

0800278e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800278e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002792:	3304      	adds	r3, #4

08002794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002798:	d3f9      	bcc.n	800278e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800279a:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800279c:	4c0a      	ldr	r4, [pc, #40]	; (80027c8 <LoopForever+0x16>)
  movs r3, #0
 800279e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a0:	e001      	b.n	80027a6 <LoopFillZerobss>

080027a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a4:	3204      	adds	r2, #4

080027a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a8:	d3fb      	bcc.n	80027a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027aa:	f00f f9e3 	bl	8011b74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027ae:	f7fe fb7d 	bl	8000eac <main>

080027b2 <LoopForever>:

LoopForever:
    b LoopForever
 80027b2:	e7fe      	b.n	80027b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027bc:	20000a9c 	.word	0x20000a9c
  ldr r2, =_sidata
 80027c0:	08017a80 	.word	0x08017a80
  ldr r2, =_sbss
 80027c4:	20000a9c 	.word	0x20000a9c
  ldr r4, =_ebss
 80027c8:	2000521c 	.word	0x2000521c

080027cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027cc:	e7fe      	b.n	80027cc <ADC1_2_IRQHandler>

080027ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d8:	2003      	movs	r0, #3
 80027da:	f000 f961 	bl	8002aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027de:	200f      	movs	r0, #15
 80027e0:	f000 f80e 	bl	8002800 <HAL_InitTick>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	71fb      	strb	r3, [r7, #7]
 80027ee:	e001      	b.n	80027f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027f0:	f7ff fb86 	bl	8001f00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027f4:	79fb      	ldrb	r3, [r7, #7]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800280c:	4b17      	ldr	r3, [pc, #92]	; (800286c <HAL_InitTick+0x6c>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d023      	beq.n	800285c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002814:	4b16      	ldr	r3, [pc, #88]	; (8002870 <HAL_InitTick+0x70>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <HAL_InitTick+0x6c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4619      	mov	r1, r3
 800281e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002822:	fbb3 f3f1 	udiv	r3, r3, r1
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f96d 	bl	8002b0a <HAL_SYSTICK_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10f      	bne.n	8002856 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b0f      	cmp	r3, #15
 800283a:	d809      	bhi.n	8002850 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800283c:	2200      	movs	r2, #0
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	f04f 30ff 	mov.w	r0, #4294967295
 8002844:	f000 f937 	bl	8002ab6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002848:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <HAL_InitTick+0x74>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e007      	b.n	8002860 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	e004      	b.n	8002860 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	e001      	b.n	8002860 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	2000001c 	.word	0x2000001c
 8002870:	20000014 	.word	0x20000014
 8002874:	20000018 	.word	0x20000018

08002878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_IncTick+0x20>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_IncTick+0x24>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4413      	add	r3, r2
 8002888:	4a04      	ldr	r2, [pc, #16]	; (800289c <HAL_IncTick+0x24>)
 800288a:	6013      	str	r3, [r2, #0]
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	2000001c 	.word	0x2000001c
 800289c:	200012bc 	.word	0x200012bc

080028a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return uwTick;
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_GetTick+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	200012bc 	.word	0x200012bc

080028b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c0:	f7ff ffee 	bl	80028a0 <HAL_GetTick>
 80028c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d005      	beq.n	80028de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028d2:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_Delay+0x44>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028de:	bf00      	nop
 80028e0:	f7ff ffde 	bl	80028a0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d8f7      	bhi.n	80028e0 <HAL_Delay+0x28>
  {
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	2000001c 	.word	0x2000001c

08002900 <__NVIC_SetPriorityGrouping>:
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800291c:	4013      	ands	r3, r2
 800291e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800292c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002932:	4a04      	ldr	r2, [pc, #16]	; (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	60d3      	str	r3, [r2, #12]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_GetPriorityGrouping>:
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <__NVIC_GetPriorityGrouping+0x18>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	f003 0307 	and.w	r3, r3, #7
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_EnableIRQ>:
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	2b00      	cmp	r3, #0
 8002974:	db0b      	blt.n	800298e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	f003 021f 	and.w	r2, r3, #31
 800297c:	4907      	ldr	r1, [pc, #28]	; (800299c <__NVIC_EnableIRQ+0x38>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	2001      	movs	r0, #1
 8002986:	fa00 f202 	lsl.w	r2, r0, r2
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000e100 	.word	0xe000e100

080029a0 <__NVIC_SetPriority>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	db0a      	blt.n	80029ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	490c      	ldr	r1, [pc, #48]	; (80029ec <__NVIC_SetPriority+0x4c>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	0112      	lsls	r2, r2, #4
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	440b      	add	r3, r1
 80029c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029c8:	e00a      	b.n	80029e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4908      	ldr	r1, [pc, #32]	; (80029f0 <__NVIC_SetPriority+0x50>)
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	3b04      	subs	r3, #4
 80029d8:	0112      	lsls	r2, r2, #4
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	440b      	add	r3, r1
 80029de:	761a      	strb	r2, [r3, #24]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000e100 	.word	0xe000e100
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <NVIC_EncodePriority>:
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	; 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f1c3 0307 	rsb	r3, r3, #7
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	bf28      	it	cs
 8002a12:	2304      	movcs	r3, #4
 8002a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d902      	bls.n	8002a24 <NVIC_EncodePriority+0x30>
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3b03      	subs	r3, #3
 8002a22:	e000      	b.n	8002a26 <NVIC_EncodePriority+0x32>
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43da      	mvns	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	401a      	ands	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	43d9      	mvns	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a4c:	4313      	orrs	r3, r2
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a6c:	d301      	bcc.n	8002a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e00f      	b.n	8002a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <SysTick_Config+0x40>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7a:	210f      	movs	r1, #15
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a80:	f7ff ff8e 	bl	80029a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <SysTick_Config+0x40>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <SysTick_Config+0x40>)
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	e000e010 	.word	0xe000e010

08002aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff29 	bl	8002900 <__NVIC_SetPriorityGrouping>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac8:	f7ff ff3e 	bl	8002948 <__NVIC_GetPriorityGrouping>
 8002acc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	6978      	ldr	r0, [r7, #20]
 8002ad4:	f7ff ff8e 	bl	80029f4 <NVIC_EncodePriority>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff5d 	bl	80029a0 <__NVIC_SetPriority>
}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff31 	bl	8002964 <__NVIC_EnableIRQ>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ffa2 	bl	8002a5c <SysTick_Config>
 8002b18:	4603      	mov	r3, r0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e054      	b.n	8002be0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	7f5b      	ldrb	r3, [r3, #29]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff fa02 	bl	8001f50 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	791b      	ldrb	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10c      	bne.n	8002b74 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a22      	ldr	r2, [pc, #136]	; (8002be8 <HAL_CRC_Init+0xc4>)
 8002b60:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0218 	bic.w	r2, r2, #24
 8002b70:	609a      	str	r2, [r3, #8]
 8002b72:	e00c      	b.n	8002b8e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6899      	ldr	r1, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f834 	bl	8002bec <HAL_CRCEx_Polynomial_Set>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e028      	b.n	8002be0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	795b      	ldrb	r3, [r3, #5]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d105      	bne.n	8002ba2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9e:	611a      	str	r2, [r3, #16]
 8002ba0:	e004      	b.n	8002bac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6912      	ldr	r2, [r2, #16]
 8002baa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	04c11db7 	.word	0x04c11db7

08002bec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002bfc:	231f      	movs	r3, #31
 8002bfe:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002c00:	bf00      	nop
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1e5a      	subs	r2, r3, #1
 8002c06:	613a      	str	r2, [r7, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d009      	beq.n	8002c20 <HAL_CRCEx_Polynomial_Set+0x34>
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f003 031f 	and.w	r3, r3, #31
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b18      	cmp	r3, #24
 8002c24:	d846      	bhi.n	8002cb4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002c26:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002cbb 	.word	0x08002cbb
 8002c30:	08002cb5 	.word	0x08002cb5
 8002c34:	08002cb5 	.word	0x08002cb5
 8002c38:	08002cb5 	.word	0x08002cb5
 8002c3c:	08002cb5 	.word	0x08002cb5
 8002c40:	08002cb5 	.word	0x08002cb5
 8002c44:	08002cb5 	.word	0x08002cb5
 8002c48:	08002cb5 	.word	0x08002cb5
 8002c4c:	08002ca9 	.word	0x08002ca9
 8002c50:	08002cb5 	.word	0x08002cb5
 8002c54:	08002cb5 	.word	0x08002cb5
 8002c58:	08002cb5 	.word	0x08002cb5
 8002c5c:	08002cb5 	.word	0x08002cb5
 8002c60:	08002cb5 	.word	0x08002cb5
 8002c64:	08002cb5 	.word	0x08002cb5
 8002c68:	08002cb5 	.word	0x08002cb5
 8002c6c:	08002c9d 	.word	0x08002c9d
 8002c70:	08002cb5 	.word	0x08002cb5
 8002c74:	08002cb5 	.word	0x08002cb5
 8002c78:	08002cb5 	.word	0x08002cb5
 8002c7c:	08002cb5 	.word	0x08002cb5
 8002c80:	08002cb5 	.word	0x08002cb5
 8002c84:	08002cb5 	.word	0x08002cb5
 8002c88:	08002cb5 	.word	0x08002cb5
 8002c8c:	08002c91 	.word	0x08002c91
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2b06      	cmp	r3, #6
 8002c94:	d913      	bls.n	8002cbe <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c9a:	e010      	b.n	8002cbe <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	2b07      	cmp	r3, #7
 8002ca0:	d90f      	bls.n	8002cc2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002ca6:	e00c      	b.n	8002cc2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b0f      	cmp	r3, #15
 8002cac:	d90b      	bls.n	8002cc6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002cb2:	e008      	b.n	8002cc6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cb8:	e006      	b.n	8002cc8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e004      	b.n	8002cc8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e002      	b.n	8002cc8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002cc6:	bf00      	nop
  }
  if (status == HAL_OK)
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10d      	bne.n	8002cea <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 0118 	bic.w	r1, r3, #24
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d008      	beq.n	8002d22 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2204      	movs	r2, #4
 8002d14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e022      	b.n	8002d68 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 020e 	bic.w	r2, r2, #14
 8002d30:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0201 	bic.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f003 021c 	and.w	r2, r3, #28
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	2101      	movs	r1, #1
 8002d50:	fa01 f202 	lsl.w	r2, r1, r2
 8002d54:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d005      	beq.n	8002d98 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2204      	movs	r2, #4
 8002d90:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
 8002d96:	e029      	b.n	8002dec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 020e 	bic.w	r2, r2, #14
 8002da6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbc:	f003 021c 	and.w	r2, r3, #28
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dca:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
    }
  }
  return status;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e04:	b2db      	uxtb	r3, r3
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e22:	e17f      	b.n	8003124 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	2101      	movs	r1, #1
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8171 	beq.w	800311e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d005      	beq.n	8002e54 <HAL_GPIO_Init+0x40>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d130      	bne.n	8002eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	091b      	lsrs	r3, r3, #4
 8002ea0:	f003 0201 	and.w	r2, r3, #1
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d118      	bne.n	8002ef4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ec8:	2201      	movs	r2, #1
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	08db      	lsrs	r3, r3, #3
 8002ede:	f003 0201 	and.w	r2, r3, #1
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d017      	beq.n	8002f30 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d123      	bne.n	8002f84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	08da      	lsrs	r2, r3, #3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3208      	adds	r2, #8
 8002f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	220f      	movs	r2, #15
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	08da      	lsrs	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3208      	adds	r2, #8
 8002f7e:	6939      	ldr	r1, [r7, #16]
 8002f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	2203      	movs	r2, #3
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0203 	and.w	r2, r3, #3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80ac 	beq.w	800311e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc6:	4b5f      	ldr	r3, [pc, #380]	; (8003144 <HAL_GPIO_Init+0x330>)
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fca:	4a5e      	ldr	r2, [pc, #376]	; (8003144 <HAL_GPIO_Init+0x330>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6613      	str	r3, [r2, #96]	; 0x60
 8002fd2:	4b5c      	ldr	r3, [pc, #368]	; (8003144 <HAL_GPIO_Init+0x330>)
 8002fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fde:	4a5a      	ldr	r2, [pc, #360]	; (8003148 <HAL_GPIO_Init+0x334>)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	220f      	movs	r2, #15
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4013      	ands	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003008:	d025      	beq.n	8003056 <HAL_GPIO_Init+0x242>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4f      	ldr	r2, [pc, #316]	; (800314c <HAL_GPIO_Init+0x338>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d01f      	beq.n	8003052 <HAL_GPIO_Init+0x23e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4e      	ldr	r2, [pc, #312]	; (8003150 <HAL_GPIO_Init+0x33c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d019      	beq.n	800304e <HAL_GPIO_Init+0x23a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a4d      	ldr	r2, [pc, #308]	; (8003154 <HAL_GPIO_Init+0x340>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_GPIO_Init+0x236>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a4c      	ldr	r2, [pc, #304]	; (8003158 <HAL_GPIO_Init+0x344>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00d      	beq.n	8003046 <HAL_GPIO_Init+0x232>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a4b      	ldr	r2, [pc, #300]	; (800315c <HAL_GPIO_Init+0x348>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d007      	beq.n	8003042 <HAL_GPIO_Init+0x22e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a4a      	ldr	r2, [pc, #296]	; (8003160 <HAL_GPIO_Init+0x34c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d101      	bne.n	800303e <HAL_GPIO_Init+0x22a>
 800303a:	2306      	movs	r3, #6
 800303c:	e00c      	b.n	8003058 <HAL_GPIO_Init+0x244>
 800303e:	2307      	movs	r3, #7
 8003040:	e00a      	b.n	8003058 <HAL_GPIO_Init+0x244>
 8003042:	2305      	movs	r3, #5
 8003044:	e008      	b.n	8003058 <HAL_GPIO_Init+0x244>
 8003046:	2304      	movs	r3, #4
 8003048:	e006      	b.n	8003058 <HAL_GPIO_Init+0x244>
 800304a:	2303      	movs	r3, #3
 800304c:	e004      	b.n	8003058 <HAL_GPIO_Init+0x244>
 800304e:	2302      	movs	r3, #2
 8003050:	e002      	b.n	8003058 <HAL_GPIO_Init+0x244>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_GPIO_Init+0x244>
 8003056:	2300      	movs	r3, #0
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	f002 0203 	and.w	r2, r2, #3
 800305e:	0092      	lsls	r2, r2, #2
 8003060:	4093      	lsls	r3, r2
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003068:	4937      	ldr	r1, [pc, #220]	; (8003148 <HAL_GPIO_Init+0x334>)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	089b      	lsrs	r3, r3, #2
 800306e:	3302      	adds	r3, #2
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003076:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <HAL_GPIO_Init+0x350>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	43db      	mvns	r3, r3
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800309a:	4a32      	ldr	r2, [pc, #200]	; (8003164 <HAL_GPIO_Init+0x350>)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030a0:	4b30      	ldr	r3, [pc, #192]	; (8003164 <HAL_GPIO_Init+0x350>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030c4:	4a27      	ldr	r2, [pc, #156]	; (8003164 <HAL_GPIO_Init+0x350>)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030ca:	4b26      	ldr	r3, [pc, #152]	; (8003164 <HAL_GPIO_Init+0x350>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	43db      	mvns	r3, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030ee:	4a1d      	ldr	r2, [pc, #116]	; (8003164 <HAL_GPIO_Init+0x350>)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030f4:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <HAL_GPIO_Init+0x350>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003118:	4a12      	ldr	r2, [pc, #72]	; (8003164 <HAL_GPIO_Init+0x350>)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	3301      	adds	r3, #1
 8003122:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa22 f303 	lsr.w	r3, r2, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	f47f ae78 	bne.w	8002e24 <HAL_GPIO_Init+0x10>
  }
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000
 8003148:	40010000 	.word	0x40010000
 800314c:	48000400 	.word	0x48000400
 8003150:	48000800 	.word	0x48000800
 8003154:	48000c00 	.word	0x48000c00
 8003158:	48001000 	.word	0x48001000
 800315c:	48001400 	.word	0x48001400
 8003160:	48001800 	.word	0x48001800
 8003164:	40010400 	.word	0x40010400

08003168 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003176:	e0cd      	b.n	8003314 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003178:	2201      	movs	r2, #1
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80c0 	beq.w	800330e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800318e:	4a68      	ldr	r2, [pc, #416]	; (8003330 <HAL_GPIO_DeInit+0x1c8>)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	3302      	adds	r3, #2
 8003196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	220f      	movs	r2, #15
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4013      	ands	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031b6:	d025      	beq.n	8003204 <HAL_GPIO_DeInit+0x9c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a5e      	ldr	r2, [pc, #376]	; (8003334 <HAL_GPIO_DeInit+0x1cc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d01f      	beq.n	8003200 <HAL_GPIO_DeInit+0x98>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a5d      	ldr	r2, [pc, #372]	; (8003338 <HAL_GPIO_DeInit+0x1d0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d019      	beq.n	80031fc <HAL_GPIO_DeInit+0x94>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a5c      	ldr	r2, [pc, #368]	; (800333c <HAL_GPIO_DeInit+0x1d4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d013      	beq.n	80031f8 <HAL_GPIO_DeInit+0x90>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a5b      	ldr	r2, [pc, #364]	; (8003340 <HAL_GPIO_DeInit+0x1d8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00d      	beq.n	80031f4 <HAL_GPIO_DeInit+0x8c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a5a      	ldr	r2, [pc, #360]	; (8003344 <HAL_GPIO_DeInit+0x1dc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d007      	beq.n	80031f0 <HAL_GPIO_DeInit+0x88>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a59      	ldr	r2, [pc, #356]	; (8003348 <HAL_GPIO_DeInit+0x1e0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d101      	bne.n	80031ec <HAL_GPIO_DeInit+0x84>
 80031e8:	2306      	movs	r3, #6
 80031ea:	e00c      	b.n	8003206 <HAL_GPIO_DeInit+0x9e>
 80031ec:	2307      	movs	r3, #7
 80031ee:	e00a      	b.n	8003206 <HAL_GPIO_DeInit+0x9e>
 80031f0:	2305      	movs	r3, #5
 80031f2:	e008      	b.n	8003206 <HAL_GPIO_DeInit+0x9e>
 80031f4:	2304      	movs	r3, #4
 80031f6:	e006      	b.n	8003206 <HAL_GPIO_DeInit+0x9e>
 80031f8:	2303      	movs	r3, #3
 80031fa:	e004      	b.n	8003206 <HAL_GPIO_DeInit+0x9e>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e002      	b.n	8003206 <HAL_GPIO_DeInit+0x9e>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <HAL_GPIO_DeInit+0x9e>
 8003204:	2300      	movs	r3, #0
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	f002 0203 	and.w	r2, r2, #3
 800320c:	0092      	lsls	r2, r2, #2
 800320e:	4093      	lsls	r3, r2
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	429a      	cmp	r2, r3
 8003214:	d132      	bne.n	800327c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003216:	4b4d      	ldr	r3, [pc, #308]	; (800334c <HAL_GPIO_DeInit+0x1e4>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	43db      	mvns	r3, r3
 800321e:	494b      	ldr	r1, [pc, #300]	; (800334c <HAL_GPIO_DeInit+0x1e4>)
 8003220:	4013      	ands	r3, r2
 8003222:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003224:	4b49      	ldr	r3, [pc, #292]	; (800334c <HAL_GPIO_DeInit+0x1e4>)
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	4947      	ldr	r1, [pc, #284]	; (800334c <HAL_GPIO_DeInit+0x1e4>)
 800322e:	4013      	ands	r3, r2
 8003230:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003232:	4b46      	ldr	r3, [pc, #280]	; (800334c <HAL_GPIO_DeInit+0x1e4>)
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	43db      	mvns	r3, r3
 800323a:	4944      	ldr	r1, [pc, #272]	; (800334c <HAL_GPIO_DeInit+0x1e4>)
 800323c:	4013      	ands	r3, r2
 800323e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003240:	4b42      	ldr	r3, [pc, #264]	; (800334c <HAL_GPIO_DeInit+0x1e4>)
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	43db      	mvns	r3, r3
 8003248:	4940      	ldr	r1, [pc, #256]	; (800334c <HAL_GPIO_DeInit+0x1e4>)
 800324a:	4013      	ands	r3, r2
 800324c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	220f      	movs	r2, #15
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800325e:	4a34      	ldr	r2, [pc, #208]	; (8003330 <HAL_GPIO_DeInit+0x1c8>)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	089b      	lsrs	r3, r3, #2
 8003264:	3302      	adds	r3, #2
 8003266:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	43da      	mvns	r2, r3
 800326e:	4830      	ldr	r0, [pc, #192]	; (8003330 <HAL_GPIO_DeInit+0x1c8>)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	400a      	ands	r2, r1
 8003276:	3302      	adds	r3, #2
 8003278:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	2103      	movs	r1, #3
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	08da      	lsrs	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3208      	adds	r2, #8
 8003298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	220f      	movs	r2, #15
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	08d2      	lsrs	r2, r2, #3
 80032b0:	4019      	ands	r1, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3208      	adds	r2, #8
 80032b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2103      	movs	r1, #3
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	401a      	ands	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	2101      	movs	r1, #1
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	fa01 f303 	lsl.w	r3, r1, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	401a      	ands	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	2103      	movs	r1, #3
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	401a      	ands	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fe:	2101      	movs	r1, #1
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	401a      	ands	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	3301      	adds	r3, #1
 8003312:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	f47f af2b 	bne.w	8003178 <HAL_GPIO_DeInit+0x10>
  }
}
 8003322:	bf00      	nop
 8003324:	bf00      	nop
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40010000 	.word	0x40010000
 8003334:	48000400 	.word	0x48000400
 8003338:	48000800 	.word	0x48000800
 800333c:	48000c00 	.word	0x48000c00
 8003340:	48001000 	.word	0x48001000
 8003344:	48001400 	.word	0x48001400
 8003348:	48001800 	.word	0x48001800
 800334c:	40010400 	.word	0x40010400

08003350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	887b      	ldrh	r3, [r7, #2]
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
 800336c:	e001      	b.n	8003372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800336e:	2300      	movs	r3, #0
 8003370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003372:	7bfb      	ldrb	r3, [r7, #15]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	807b      	strh	r3, [r7, #2]
 800338c:	4613      	mov	r3, r2
 800338e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003390:	787b      	ldrb	r3, [r7, #1]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003396:	887a      	ldrh	r2, [r7, #2]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800339c:	e002      	b.n	80033a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800339e:	887a      	ldrh	r2, [r7, #2]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033ba:	4b08      	ldr	r3, [pc, #32]	; (80033dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033c6:	4a05      	ldr	r2, [pc, #20]	; (80033dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff f9b9 	bl	8002746 <HAL_GPIO_EXTI_Callback>
  }
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40010400 	.word	0x40010400

080033e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e081      	b.n	80034f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fe fdc2 	bl	8001f90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2224      	movs	r2, #36	; 0x24
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003430:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003440:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d107      	bne.n	800345a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	e006      	b.n	8003468 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003466:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d104      	bne.n	800347a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003478:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800348c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800349c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69d9      	ldr	r1, [r3, #28]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1a      	ldr	r2, [r3, #32]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	4608      	mov	r0, r1
 800350a:	4611      	mov	r1, r2
 800350c:	461a      	mov	r2, r3
 800350e:	4603      	mov	r3, r0
 8003510:	817b      	strh	r3, [r7, #10]
 8003512:	460b      	mov	r3, r1
 8003514:	813b      	strh	r3, [r7, #8]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b20      	cmp	r3, #32
 8003524:	f040 80f9 	bne.w	800371a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_I2C_Mem_Write+0x34>
 800352e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003530:	2b00      	cmp	r3, #0
 8003532:	d105      	bne.n	8003540 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0ed      	b.n	800371c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_I2C_Mem_Write+0x4e>
 800354a:	2302      	movs	r3, #2
 800354c:	e0e6      	b.n	800371c <HAL_I2C_Mem_Write+0x21c>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003556:	f7ff f9a3 	bl	80028a0 <HAL_GetTick>
 800355a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2319      	movs	r3, #25
 8003562:	2201      	movs	r2, #1
 8003564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f001 fab2 	bl	8004ad2 <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0d1      	b.n	800371c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2221      	movs	r2, #33	; 0x21
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2240      	movs	r2, #64	; 0x40
 8003584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003598:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035a0:	88f8      	ldrh	r0, [r7, #6]
 80035a2:	893a      	ldrh	r2, [r7, #8]
 80035a4:	8979      	ldrh	r1, [r7, #10]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	4603      	mov	r3, r0
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fdb7 	bl	8004124 <I2C_RequestMemoryWrite>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0a9      	b.n	800371c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2bff      	cmp	r3, #255	; 0xff
 80035d0:	d90e      	bls.n	80035f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	22ff      	movs	r2, #255	; 0xff
 80035d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	8979      	ldrh	r1, [r7, #10]
 80035e0:	2300      	movs	r3, #0
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f001 fc1b 	bl	8004e24 <I2C_TransferConfig>
 80035ee:	e00f      	b.n	8003610 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	8979      	ldrh	r1, [r7, #10]
 8003602:	2300      	movs	r3, #0
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f001 fc0a 	bl	8004e24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f001 fa9c 	bl	8004b52 <I2C_WaitOnTXISFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e07b      	b.n	800371c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	781a      	ldrb	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d034      	beq.n	80036c8 <HAL_I2C_Mem_Write+0x1c8>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003662:	2b00      	cmp	r3, #0
 8003664:	d130      	bne.n	80036c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366c:	2200      	movs	r2, #0
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f001 fa2e 	bl	8004ad2 <I2C_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e04d      	b.n	800371c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2bff      	cmp	r3, #255	; 0xff
 8003688:	d90e      	bls.n	80036a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	22ff      	movs	r2, #255	; 0xff
 800368e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	b2da      	uxtb	r2, r3
 8003696:	8979      	ldrh	r1, [r7, #10]
 8003698:	2300      	movs	r3, #0
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f001 fbbf 	bl	8004e24 <I2C_TransferConfig>
 80036a6:	e00f      	b.n	80036c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	8979      	ldrh	r1, [r7, #10]
 80036ba:	2300      	movs	r3, #0
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f001 fbae 	bl	8004e24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d19e      	bne.n	8003610 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f001 fa7b 	bl	8004bd2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e01a      	b.n	800371c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2220      	movs	r2, #32
 80036ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <HAL_I2C_Mem_Write+0x224>)
 80036fa:	400b      	ands	r3, r1
 80036fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	e000      	b.n	800371c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800371a:	2302      	movs	r3, #2
  }
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	fe00e800 	.word	0xfe00e800

08003728 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	461a      	mov	r2, r3
 8003736:	4603      	mov	r3, r0
 8003738:	817b      	strh	r3, [r7, #10]
 800373a:	460b      	mov	r3, r1
 800373c:	813b      	strh	r3, [r7, #8]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b20      	cmp	r3, #32
 800374c:	d166      	bne.n	800381c <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_I2C_Mem_Read_IT+0x32>
 8003754:	8bbb      	ldrh	r3, [r7, #28]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d105      	bne.n	8003766 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e05b      	b.n	800381e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003774:	d101      	bne.n	800377a <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8003776:	2302      	movs	r3, #2
 8003778:	e051      	b.n	800381e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_I2C_Mem_Read_IT+0x60>
 8003784:	2302      	movs	r3, #2
 8003786:	e04a      	b.n	800381e <HAL_I2C_Mem_Read_IT+0xf6>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2222      	movs	r2, #34	; 0x22
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2240      	movs	r2, #64	; 0x40
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8bba      	ldrh	r2, [r7, #28]
 80037b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <HAL_I2C_Mem_Read_IT+0x100>)
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a1c      	ldr	r2, [pc, #112]	; (800382c <HAL_I2C_Mem_Read_IT+0x104>)
 80037bc:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80037be:	897a      	ldrh	r2, [r7, #10]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d109      	bne.n	80037de <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037ca:	893b      	ldrh	r3, [r7, #8]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f04f 32ff 	mov.w	r2, #4294967295
 80037da:	651a      	str	r2, [r3, #80]	; 0x50
 80037dc:	e00b      	b.n	80037f6 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80037de:	893b      	ldrh	r3, [r7, #8]
 80037e0:	0a1b      	lsrs	r3, r3, #8
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80037ec:	893b      	ldrh	r3, [r7, #8]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	8979      	ldrh	r1, [r7, #10]
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <HAL_I2C_Mem_Read_IT+0x108>)
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2300      	movs	r3, #0
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f001 fb0e 	bl	8004e24 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, (I2C_XFER_TX_IT | I2C_XFER_RX_IT));
 8003810:	2103      	movs	r1, #3
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f001 fb38 	bl	8004e88 <I2C_Enable_IRQ>

    return HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	e000      	b.n	800381e <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800381c:	2302      	movs	r3, #2
  }
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	ffff0000 	.word	0xffff0000
 800382c:	08003925 	.word	0x08003925
 8003830:	80002000 	.word	0x80002000

08003834 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	68f9      	ldr	r1, [r7, #12]
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
  }
}
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	70fb      	strb	r3, [r7, #3]
 80038c4:	4613      	mov	r3, r2
 80038c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003930:	4b8f      	ldr	r3, [pc, #572]	; (8003b70 <I2C_Mem_ISR_IT+0x24c>)
 8003932:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <I2C_Mem_ISR_IT+0x22>
 8003942:	2302      	movs	r3, #2
 8003944:	e110      	b.n	8003b68 <I2C_Mem_ISR_IT+0x244>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d013      	beq.n	8003982 <I2C_Mem_ISR_IT+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <I2C_Mem_ISR_IT+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2210      	movs	r2, #16
 800396c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	f043 0204 	orr.w	r2, r3, #4
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f001 f867 	bl	8004a4e <I2C_Flush_TXDR>
 8003980:	e0dd      	b.n	8003b3e <I2C_Mem_ISR_IT+0x21a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d023      	beq.n	80039d6 <I2C_Mem_ISR_IT+0xb2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	089b      	lsrs	r3, r3, #2
 8003992:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01d      	beq.n	80039d6 <I2C_Mem_ISR_IT+0xb2>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f023 0304 	bic.w	r3, r3, #4
 80039a0:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039d4:	e0b3      	b.n	8003b3e <I2C_Mem_ISR_IT+0x21a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	085b      	lsrs	r3, r3, #1
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d02d      	beq.n	8003a3e <I2C_Mem_ISR_IT+0x11a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d027      	beq.n	8003a3e <I2C_Mem_ISR_IT+0x11a>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d118      	bne.n	8003a2a <I2C_Mem_ISR_IT+0x106>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003a28:	e089      	b.n	8003b3e <I2C_Mem_ISR_IT+0x21a>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3a:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003a3c:	e07f      	b.n	8003b3e <I2C_Mem_ISR_IT+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	09db      	lsrs	r3, r3, #7
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d03d      	beq.n	8003ac6 <I2C_Mem_ISR_IT+0x1a2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d037      	beq.n	8003ac6 <I2C_Mem_ISR_IT+0x1a2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d02c      	beq.n	8003aba <I2C_Mem_ISR_IT+0x196>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d128      	bne.n	8003aba <I2C_Mem_ISR_IT+0x196>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2bff      	cmp	r3, #255	; 0xff
 8003a70:	d910      	bls.n	8003a94 <I2C_Mem_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	22ff      	movs	r2, #255	; 0xff
 8003a76:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7c:	b299      	uxth	r1, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	2300      	movs	r3, #0
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f001 f9c9 	bl	8004e24 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a92:	e017      	b.n	8003ac4 <I2C_Mem_ISR_IT+0x1a0>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa2:	b299      	uxth	r1, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	2300      	movs	r3, #0
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f001 f9b6 	bl	8004e24 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab8:	e004      	b.n	8003ac4 <I2C_Mem_ISR_IT+0x1a0>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003aba:	2140      	movs	r1, #64	; 0x40
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fecf 	bl	8004860 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ac2:	e03c      	b.n	8003b3e <I2C_Mem_ISR_IT+0x21a>
 8003ac4:	e03b      	b.n	8003b3e <I2C_Mem_ISR_IT+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	099b      	lsrs	r3, r3, #6
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d035      	beq.n	8003b3e <I2C_Mem_ISR_IT+0x21a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	099b      	lsrs	r3, r3, #6
 8003ad6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d02f      	beq.n	8003b3e <I2C_Mem_ISR_IT+0x21a>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b22      	cmp	r3, #34	; 0x22
 8003ae8:	d101      	bne.n	8003aee <I2C_Mem_ISR_IT+0x1ca>
    {
      direction = I2C_GENERATE_START_READ;
 8003aea:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <I2C_Mem_ISR_IT+0x250>)
 8003aec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2bff      	cmp	r3, #255	; 0xff
 8003af6:	d910      	bls.n	8003b1a <I2C_Mem_ISR_IT+0x1f6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	22ff      	movs	r2, #255	; 0xff
 8003afc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b02:	b299      	uxth	r1, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f001 f986 	bl	8004e24 <I2C_TransferConfig>
 8003b18:	e011      	b.n	8003b3e <I2C_Mem_ISR_IT+0x21a>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b28:	b299      	uxth	r1, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f001 f973 	bl	8004e24 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d009      	beq.n	8003b5e <I2C_Mem_ISR_IT+0x23a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <I2C_Mem_ISR_IT+0x23a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003b56:	6939      	ldr	r1, [r7, #16]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fc57 	bl	800440c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	80002000 	.word	0x80002000
 8003b74:	80002400 	.word	0x80002400

08003b78 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <I2C_Slave_ISR_IT+0x24>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e0ec      	b.n	8003d76 <I2C_Slave_ISR_IT+0x1fe>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d009      	beq.n	8003bc4 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003bbc:	6939      	ldr	r1, [r7, #16]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fcee 	bl	80045a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	091b      	lsrs	r3, r3, #4
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d04d      	beq.n	8003c6c <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	091b      	lsrs	r3, r3, #4
 8003bd4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d047      	beq.n	8003c6c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d128      	bne.n	8003c38 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b28      	cmp	r3, #40	; 0x28
 8003bf0:	d108      	bne.n	8003c04 <I2C_Slave_ISR_IT+0x8c>
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bf8:	d104      	bne.n	8003c04 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003bfa:	6939      	ldr	r1, [r7, #16]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 fdd9 	bl	80047b4 <I2C_ITListenCplt>
 8003c02:	e032      	b.n	8003c6a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b29      	cmp	r3, #41	; 0x29
 8003c0e:	d10e      	bne.n	8003c2e <I2C_Slave_ISR_IT+0xb6>
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c16:	d00a      	beq.n	8003c2e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2210      	movs	r2, #16
 8003c1e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 ff14 	bl	8004a4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fb91 	bl	800434e <I2C_ITSlaveSeqCplt>
 8003c2c:	e01d      	b.n	8003c6a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2210      	movs	r2, #16
 8003c34:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003c36:	e096      	b.n	8003d66 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2210      	movs	r2, #16
 8003c3e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c44:	f043 0204 	orr.w	r2, r3, #4
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d004      	beq.n	8003c5c <I2C_Slave_ISR_IT+0xe4>
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c58:	f040 8085 	bne.w	8003d66 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c60:	4619      	mov	r1, r3
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fdfc 	bl	8004860 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003c68:	e07d      	b.n	8003d66 <I2C_Slave_ISR_IT+0x1ee>
 8003c6a:	e07c      	b.n	8003d66 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d030      	beq.n	8003cda <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	089b      	lsrs	r3, r3, #2
 8003c7c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d02a      	beq.n	8003cda <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d018      	beq.n	8003cc0 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d14f      	bne.n	8003d6a <I2C_Slave_ISR_IT+0x1f2>
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cd0:	d04b      	beq.n	8003d6a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fb3b 	bl	800434e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003cd8:	e047      	b.n	8003d6a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	08db      	lsrs	r3, r3, #3
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	08db      	lsrs	r3, r3, #3
 8003cea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d004      	beq.n	8003cfc <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003cf2:	6939      	ldr	r1, [r7, #16]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fa69 	bl	80041cc <I2C_ITAddrCplt>
 8003cfa:	e037      	b.n	8003d6c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	085b      	lsrs	r3, r3, #1
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d031      	beq.n	8003d6c <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d02b      	beq.n	8003d6c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d018      	beq.n	8003d50 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	781a      	ldrb	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	851a      	strh	r2, [r3, #40]	; 0x28
 8003d4e:	e00d      	b.n	8003d6c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d56:	d002      	beq.n	8003d5e <I2C_Slave_ISR_IT+0x1e6>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 faf5 	bl	800434e <I2C_ITSlaveSeqCplt>
 8003d64:	e002      	b.n	8003d6c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003d66:	bf00      	nop
 8003d68:	e000      	b.n	8003d6c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003d6a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b088      	sub	sp, #32
 8003d82:	af02      	add	r7, sp, #8
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <I2C_Master_ISR_DMA+0x1a>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e0e1      	b.n	8003f5c <I2C_Master_ISR_DMA+0x1de>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d017      	beq.n	8003ddc <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	091b      	lsrs	r3, r3, #4
 8003db0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d011      	beq.n	8003ddc <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2210      	movs	r2, #16
 8003dbe:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc4:	f043 0204 	orr.w	r2, r3, #4
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003dcc:	2120      	movs	r1, #32
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f001 f85a 	bl	8004e88 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 fe3a 	bl	8004a4e <I2C_Flush_TXDR>
 8003dda:	e0ba      	b.n	8003f52 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	09db      	lsrs	r3, r3, #7
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d072      	beq.n	8003ece <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	099b      	lsrs	r3, r3, #6
 8003dec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d06c      	beq.n	8003ece <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e02:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d04e      	beq.n	8003eac <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e1a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2bff      	cmp	r3, #255	; 0xff
 8003e24:	d906      	bls.n	8003e34 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	22ff      	movs	r2, #255	; 0xff
 8003e2a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003e2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	e010      	b.n	8003e56 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e46:	d003      	beq.n	8003e50 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e002      	b.n	8003e56 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003e50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e54:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	8a79      	ldrh	r1, [r7, #18]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 ffdd 	bl	8004e24 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b22      	cmp	r3, #34	; 0x22
 8003e86:	d108      	bne.n	8003e9a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e96:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003e98:	e05b      	b.n	8003f52 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003eaa:	e052      	b.n	8003f52 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eba:	d003      	beq.n	8003ec4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fa09 	bl	80042d4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003ec2:	e046      	b.n	8003f52 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ec4:	2140      	movs	r1, #64	; 0x40
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fcca 	bl	8004860 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003ecc:	e041      	b.n	8003f52 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	099b      	lsrs	r3, r3, #6
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d029      	beq.n	8003f2e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	099b      	lsrs	r3, r3, #6
 8003ede:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d023      	beq.n	8003f2e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d119      	bne.n	8003f24 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003efe:	d027      	beq.n	8003f50 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f08:	d108      	bne.n	8003f1c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f18:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003f1a:	e019      	b.n	8003f50 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f9d9 	bl	80042d4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003f22:	e015      	b.n	8003f50 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f24:	2140      	movs	r1, #64	; 0x40
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fc9a 	bl	8004860 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f2c:	e010      	b.n	8003f50 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 fa5f 	bl	800440c <I2C_ITMasterCplt>
 8003f4e:	e000      	b.n	8003f52 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003f50:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <I2C_Slave_ISR_DMA+0x24>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e0c9      	b.n	800411c <I2C_Slave_ISR_DMA+0x1b8>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d009      	beq.n	8003fb0 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 faf8 	bl	80045a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	091b      	lsrs	r3, r3, #4
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 809a 	beq.w	80040f2 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 8093 	beq.w	80040f2 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	0b9b      	lsrs	r3, r3, #14
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	0bdb      	lsrs	r3, r3, #15
 8003fdc:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d07f      	beq.n	80040e4 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00d      	beq.n	8004008 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	0bdb      	lsrs	r3, r3, #15
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d007      	beq.n	8004008 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004004:	2301      	movs	r3, #1
 8004006:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00d      	beq.n	800402c <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	0b9b      	lsrs	r3, r3, #14
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8004028:	2301      	movs	r3, #1
 800402a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d128      	bne.n	8004084 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b28      	cmp	r3, #40	; 0x28
 800403c:	d108      	bne.n	8004050 <I2C_Slave_ISR_DMA+0xec>
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004044:	d104      	bne.n	8004050 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fbb3 	bl	80047b4 <I2C_ITListenCplt>
 800404e:	e048      	b.n	80040e2 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b29      	cmp	r3, #41	; 0x29
 800405a:	d10e      	bne.n	800407a <I2C_Slave_ISR_DMA+0x116>
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004062:	d00a      	beq.n	800407a <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2210      	movs	r2, #16
 800406a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fcee 	bl	8004a4e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f96b 	bl	800434e <I2C_ITSlaveSeqCplt>
 8004078:	e033      	b.n	80040e2 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2210      	movs	r2, #16
 8004080:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004082:	e034      	b.n	80040ee <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2210      	movs	r2, #16
 800408a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004090:	f043 0204 	orr.w	r2, r3, #4
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800409e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <I2C_Slave_ISR_DMA+0x14a>
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040ac:	d11f      	bne.n	80040ee <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040ae:	7dfb      	ldrb	r3, [r7, #23]
 80040b0:	2b21      	cmp	r3, #33	; 0x21
 80040b2:	d002      	beq.n	80040ba <I2C_Slave_ISR_DMA+0x156>
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	2b29      	cmp	r3, #41	; 0x29
 80040b8:	d103      	bne.n	80040c2 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2221      	movs	r2, #33	; 0x21
 80040be:	631a      	str	r2, [r3, #48]	; 0x30
 80040c0:	e008      	b.n	80040d4 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
 80040c4:	2b22      	cmp	r3, #34	; 0x22
 80040c6:	d002      	beq.n	80040ce <I2C_Slave_ISR_DMA+0x16a>
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	2b2a      	cmp	r3, #42	; 0x2a
 80040cc:	d102      	bne.n	80040d4 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2222      	movs	r2, #34	; 0x22
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d8:	4619      	mov	r1, r3
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fbc0 	bl	8004860 <I2C_ITError>
      if (treatdmanack == 1U)
 80040e0:	e005      	b.n	80040ee <I2C_Slave_ISR_DMA+0x18a>
 80040e2:	e004      	b.n	80040ee <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2210      	movs	r2, #16
 80040ea:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80040ec:	e011      	b.n	8004112 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80040ee:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80040f0:	e00f      	b.n	8004112 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	08db      	lsrs	r3, r3, #3
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d009      	beq.n	8004112 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	08db      	lsrs	r3, r3, #3
 8004102:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f85d 	bl	80041cc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3720      	adds	r7, #32
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	4608      	mov	r0, r1
 800412e:	4611      	mov	r1, r2
 8004130:	461a      	mov	r2, r3
 8004132:	4603      	mov	r3, r0
 8004134:	817b      	strh	r3, [r7, #10]
 8004136:	460b      	mov	r3, r1
 8004138:	813b      	strh	r3, [r7, #8]
 800413a:	4613      	mov	r3, r2
 800413c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	b2da      	uxtb	r2, r3
 8004142:	8979      	ldrh	r1, [r7, #10]
 8004144:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <I2C_RequestMemoryWrite+0xa4>)
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fe69 	bl	8004e24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	69b9      	ldr	r1, [r7, #24]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 fcfb 	bl	8004b52 <I2C_WaitOnTXISFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e02c      	b.n	80041c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d105      	bne.n	8004178 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800416c:	893b      	ldrh	r3, [r7, #8]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	629a      	str	r2, [r3, #40]	; 0x28
 8004176:	e015      	b.n	80041a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004178:	893b      	ldrh	r3, [r7, #8]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	b29b      	uxth	r3, r3
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	69b9      	ldr	r1, [r7, #24]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fce1 	bl	8004b52 <I2C_WaitOnTXISFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e012      	b.n	80041c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800419a:	893b      	ldrh	r3, [r7, #8]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2200      	movs	r2, #0
 80041ac:	2180      	movs	r1, #128	; 0x80
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fc8f 	bl	8004ad2 <I2C_WaitOnFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	80002000 	.word	0x80002000

080041cc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041e2:	2b28      	cmp	r3, #40	; 0x28
 80041e4:	d16a      	bne.n	80042bc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	0c1b      	lsrs	r3, r3, #16
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	0c1b      	lsrs	r3, r3, #16
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004204:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	b29b      	uxth	r3, r3
 800420e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004212:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	b29b      	uxth	r3, r3
 800421c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004220:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d138      	bne.n	800429c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800422a:	897b      	ldrh	r3, [r7, #10]
 800422c:	09db      	lsrs	r3, r3, #7
 800422e:	b29a      	uxth	r2, r3
 8004230:	89bb      	ldrh	r3, [r7, #12]
 8004232:	4053      	eors	r3, r2
 8004234:	b29b      	uxth	r3, r3
 8004236:	f003 0306 	and.w	r3, r3, #6
 800423a:	2b00      	cmp	r3, #0
 800423c:	d11c      	bne.n	8004278 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800423e:	897b      	ldrh	r3, [r7, #10]
 8004240:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004250:	2b02      	cmp	r3, #2
 8004252:	d13b      	bne.n	80042cc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2208      	movs	r2, #8
 8004260:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800426a:	89ba      	ldrh	r2, [r7, #12]
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	4619      	mov	r1, r3
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff fb21 	bl	80038b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004276:	e029      	b.n	80042cc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004278:	893b      	ldrh	r3, [r7, #8]
 800427a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800427c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fe6b 	bl	8004f5c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800428e:	89ba      	ldrh	r2, [r7, #12]
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	4619      	mov	r1, r3
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff fb0f 	bl	80038b8 <HAL_I2C_AddrCallback>
}
 800429a:	e017      	b.n	80042cc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800429c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fe5b 	bl	8004f5c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80042ae:	89ba      	ldrh	r2, [r7, #12]
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	4619      	mov	r1, r3
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff faff 	bl	80038b8 <HAL_I2C_AddrCallback>
}
 80042ba:	e007      	b.n	80042cc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2208      	movs	r2, #8
 80042c2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80042cc:	bf00      	nop
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b21      	cmp	r3, #33	; 0x21
 80042ee:	d115      	bne.n	800431c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2211      	movs	r2, #17
 80042fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004304:	2101      	movs	r1, #1
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fe28 	bl	8004f5c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff faa7 	bl	8003868 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800431a:	e014      	b.n	8004346 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2212      	movs	r2, #18
 8004328:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004330:	2102      	movs	r1, #2
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fe12 	bl	8004f5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff fa9b 	bl	800387c <HAL_I2C_MasterRxCpltCallback>
}
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	0b9b      	lsrs	r3, r3, #14
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	e00d      	b.n	80043a0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	0bdb      	lsrs	r3, r3, #15
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800439e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b29      	cmp	r3, #41	; 0x29
 80043aa:	d112      	bne.n	80043d2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2228      	movs	r2, #40	; 0x28
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2221      	movs	r2, #33	; 0x21
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80043ba:	2101      	movs	r1, #1
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fdcd 	bl	8004f5c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fa60 	bl	8003890 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80043d0:	e017      	b.n	8004402 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b2a      	cmp	r3, #42	; 0x2a
 80043dc:	d111      	bne.n	8004402 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2228      	movs	r2, #40	; 0x28
 80043e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2222      	movs	r2, #34	; 0x22
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80043ec:	2102      	movs	r1, #2
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fdb4 	bl	8004f5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff fa51 	bl	80038a4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2220      	movs	r2, #32
 8004420:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b21      	cmp	r3, #33	; 0x21
 800442c:	d107      	bne.n	800443e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800442e:	2101      	movs	r1, #1
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fd93 	bl	8004f5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2211      	movs	r2, #17
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
 800443c:	e00c      	b.n	8004458 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b22      	cmp	r3, #34	; 0x22
 8004448:	d106      	bne.n	8004458 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800444a:	2102      	movs	r1, #2
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fd85 	bl	8004f5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2212      	movs	r2, #18
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b4d      	ldr	r3, [pc, #308]	; (8004598 <I2C_ITMasterCplt+0x18c>)
 8004464:	400b      	ands	r3, r1
 8004466:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a4a      	ldr	r2, [pc, #296]	; (800459c <I2C_ITMasterCplt+0x190>)
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	091b      	lsrs	r3, r3, #4
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d009      	beq.n	8004494 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2210      	movs	r2, #16
 8004486:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f043 0204 	orr.w	r2, r3, #4
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b60      	cmp	r3, #96	; 0x60
 800449e:	d10b      	bne.n	80044b8 <I2C_ITMasterCplt+0xac>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	089b      	lsrs	r3, r3, #2
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80044b6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fac8 	bl	8004a4e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b60      	cmp	r3, #96	; 0x60
 80044ce:	d002      	beq.n	80044d6 <I2C_ITMasterCplt+0xca>
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d006      	beq.n	80044e4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	4619      	mov	r1, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f9bf 	bl	8004860 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80044e2:	e054      	b.n	800458e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b21      	cmp	r3, #33	; 0x21
 80044ee:	d124      	bne.n	800453a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b40      	cmp	r3, #64	; 0x40
 8004508:	d10b      	bne.n	8004522 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7ff f9e4 	bl	80038e8 <HAL_I2C_MemTxCpltCallback>
}
 8004520:	e035      	b.n	800458e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff f998 	bl	8003868 <HAL_I2C_MasterTxCpltCallback>
}
 8004538:	e029      	b.n	800458e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b22      	cmp	r3, #34	; 0x22
 8004544:	d123      	bne.n	800458e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b40      	cmp	r3, #64	; 0x40
 800455e:	d10b      	bne.n	8004578 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7fd fb45 	bl	8001c00 <HAL_I2C_MemRxCpltCallback>
}
 8004576:	e00a      	b.n	800458e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff f977 	bl	800387c <HAL_I2C_MasterRxCpltCallback>
}
 800458e:	bf00      	nop
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	fe00e800 	.word	0xfe00e800
 800459c:	ffff0000 	.word	0xffff0000

080045a0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045bc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2220      	movs	r2, #32
 80045c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	2b21      	cmp	r3, #33	; 0x21
 80045ca:	d002      	beq.n	80045d2 <I2C_ITSlaveCplt+0x32>
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	2b29      	cmp	r3, #41	; 0x29
 80045d0:	d108      	bne.n	80045e4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80045d2:	f248 0101 	movw	r1, #32769	; 0x8001
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fcc0 	bl	8004f5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2221      	movs	r2, #33	; 0x21
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
 80045e2:	e00d      	b.n	8004600 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b22      	cmp	r3, #34	; 0x22
 80045e8:	d002      	beq.n	80045f0 <I2C_ITSlaveCplt+0x50>
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	2b2a      	cmp	r3, #42	; 0x2a
 80045ee:	d107      	bne.n	8004600 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80045f0:	f248 0102 	movw	r1, #32770	; 0x8002
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fcb1 	bl	8004f5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2222      	movs	r2, #34	; 0x22
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800460e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6859      	ldr	r1, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b64      	ldr	r3, [pc, #400]	; (80047ac <I2C_ITSlaveCplt+0x20c>)
 800461c:	400b      	ands	r3, r1
 800461e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fa14 	bl	8004a4e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	0b9b      	lsrs	r3, r3, #14
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d013      	beq.n	800465a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004640:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004646:	2b00      	cmp	r3, #0
 8004648:	d020      	beq.n	800468c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	b29a      	uxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004658:	e018      	b.n	800468c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	0bdb      	lsrs	r3, r3, #15
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d012      	beq.n	800468c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004674:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467a:	2b00      	cmp	r3, #0
 800467c:	d006      	beq.n	800468c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	b29a      	uxth	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	089b      	lsrs	r3, r3, #2
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d020      	beq.n	80046da <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f023 0304 	bic.w	r3, r3, #4
 800469e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00c      	beq.n	80046da <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e8:	f043 0204 	orr.w	r2, r3, #4
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	2b00      	cmp	r3, #0
 8004704:	d010      	beq.n	8004728 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470a:	4619      	mov	r1, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f8a7 	bl	8004860 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b28      	cmp	r3, #40	; 0x28
 800471c:	d141      	bne.n	80047a2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800471e:	6979      	ldr	r1, [r7, #20]
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f847 	bl	80047b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004726:	e03c      	b.n	80047a2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004730:	d014      	beq.n	800475c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff fe0b 	bl	800434e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a1d      	ldr	r2, [pc, #116]	; (80047b0 <I2C_ITSlaveCplt+0x210>)
 800473c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff f8bd 	bl	80038d4 <HAL_I2C_ListenCpltCallback>
}
 800475a:	e022      	b.n	80047a2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b22      	cmp	r3, #34	; 0x22
 8004766:	d10e      	bne.n	8004786 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff f890 	bl	80038a4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004784:	e00d      	b.n	80047a2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff f877 	bl	8003890 <HAL_I2C_SlaveTxCpltCallback>
}
 80047a2:	bf00      	nop
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	fe00e800 	.word	0xfe00e800
 80047b0:	ffff0000 	.word	0xffff0000

080047b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a26      	ldr	r2, [pc, #152]	; (800485c <I2C_ITListenCplt+0xa8>)
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d022      	beq.n	8004832 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004808:	2b00      	cmp	r3, #0
 800480a:	d012      	beq.n	8004832 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	f043 0204 	orr.w	r2, r3, #4
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004832:	f248 0103 	movw	r1, #32771	; 0x8003
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fb90 	bl	8004f5c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2210      	movs	r2, #16
 8004842:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff f841 	bl	80038d4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	ffff0000 	.word	0xffff0000

08004860 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004870:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a5d      	ldr	r2, [pc, #372]	; (80049f4 <I2C_ITError+0x194>)
 800487e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b28      	cmp	r3, #40	; 0x28
 8004896:	d005      	beq.n	80048a4 <I2C_ITError+0x44>
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	2b29      	cmp	r3, #41	; 0x29
 800489c:	d002      	beq.n	80048a4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2b2a      	cmp	r3, #42	; 0x2a
 80048a2:	d10b      	bne.n	80048bc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048a4:	2103      	movs	r1, #3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fb58 	bl	8004f5c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2228      	movs	r2, #40	; 0x28
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a50      	ldr	r2, [pc, #320]	; (80049f8 <I2C_ITError+0x198>)
 80048b8:	635a      	str	r2, [r3, #52]	; 0x34
 80048ba:	e011      	b.n	80048e0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048bc:	f248 0103 	movw	r1, #32771	; 0x8003
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fb4b 	bl	8004f5c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b60      	cmp	r3, #96	; 0x60
 80048d0:	d003      	beq.n	80048da <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d039      	beq.n	8004962 <I2C_ITError+0x102>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b11      	cmp	r3, #17
 80048f2:	d002      	beq.n	80048fa <I2C_ITError+0x9a>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b21      	cmp	r3, #33	; 0x21
 80048f8:	d133      	bne.n	8004962 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004908:	d107      	bne.n	800491a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004918:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe fa69 	bl	8002df6 <HAL_DMA_GetState>
 8004924:	4603      	mov	r3, r0
 8004926:	2b01      	cmp	r3, #1
 8004928:	d017      	beq.n	800495a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	4a33      	ldr	r2, [pc, #204]	; (80049fc <I2C_ITError+0x19c>)
 8004930:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	4618      	mov	r0, r3
 8004940:	f7fe fa18 	bl	8002d74 <HAL_DMA_Abort_IT>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d04d      	beq.n	80049e6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004954:	4610      	mov	r0, r2
 8004956:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004958:	e045      	b.n	80049e6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f850 	bl	8004a00 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004960:	e041      	b.n	80049e6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d039      	beq.n	80049de <I2C_ITError+0x17e>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b12      	cmp	r3, #18
 800496e:	d002      	beq.n	8004976 <I2C_ITError+0x116>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b22      	cmp	r3, #34	; 0x22
 8004974:	d133      	bne.n	80049de <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004984:	d107      	bne.n	8004996 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004994:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe fa2b 	bl	8002df6 <HAL_DMA_GetState>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d017      	beq.n	80049d6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049aa:	4a14      	ldr	r2, [pc, #80]	; (80049fc <I2C_ITError+0x19c>)
 80049ac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe f9da 	bl	8002d74 <HAL_DMA_Abort_IT>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d011      	beq.n	80049ea <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049d0:	4610      	mov	r0, r2
 80049d2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049d4:	e009      	b.n	80049ea <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f812 	bl	8004a00 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049dc:	e005      	b.n	80049ea <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f80e 	bl	8004a00 <I2C_TreatErrorCallback>
  }
}
 80049e4:	e002      	b.n	80049ec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049e6:	bf00      	nop
 80049e8:	e000      	b.n	80049ec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049ea:	bf00      	nop
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	ffff0000 	.word	0xffff0000
 80049f8:	08003b79 	.word	0x08003b79
 80049fc:	08004a97 	.word	0x08004a97

08004a00 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b60      	cmp	r3, #96	; 0x60
 8004a12:	d10e      	bne.n	8004a32 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fe ff70 	bl	8003910 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a30:	e009      	b.n	8004a46 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7fe ff5b 	bl	80038fc <HAL_I2C_ErrorCallback>
}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d103      	bne.n	8004a6c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d007      	beq.n	8004a8a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699a      	ldr	r2, [r3, #24]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0201 	orr.w	r2, r2, #1
 8004a88:	619a      	str	r2, [r3, #24]
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7ff ff9b 	bl	8004a00 <I2C_TreatErrorCallback>
}
 8004aca:	bf00      	nop
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	603b      	str	r3, [r7, #0]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ae2:	e022      	b.n	8004b2a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aea:	d01e      	beq.n	8004b2a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aec:	f7fd fed8 	bl	80028a0 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d302      	bcc.n	8004b02 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d113      	bne.n	8004b2a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	f043 0220 	orr.w	r2, r3, #32
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e00f      	b.n	8004b4a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699a      	ldr	r2, [r3, #24]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4013      	ands	r3, r2
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	bf0c      	ite	eq
 8004b3a:	2301      	moveq	r3, #1
 8004b3c:	2300      	movne	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	461a      	mov	r2, r3
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d0cd      	beq.n	8004ae4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b5e:	e02c      	b.n	8004bba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f871 	bl	8004c4c <I2C_IsErrorOccurred>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e02a      	b.n	8004bca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d01e      	beq.n	8004bba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7c:	f7fd fe90 	bl	80028a0 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d302      	bcc.n	8004b92 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d113      	bne.n	8004bba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	f043 0220 	orr.w	r2, r3, #32
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e007      	b.n	8004bca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d1cb      	bne.n	8004b60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bde:	e028      	b.n	8004c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f831 	bl	8004c4c <I2C_IsErrorOccurred>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e026      	b.n	8004c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf4:	f7fd fe54 	bl	80028a0 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d302      	bcc.n	8004c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d113      	bne.n	8004c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0e:	f043 0220 	orr.w	r2, r3, #32
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e007      	b.n	8004c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d1cf      	bne.n	8004be0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08a      	sub	sp, #40	; 0x28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d075      	beq.n	8004d64 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2210      	movs	r2, #16
 8004c7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c80:	e056      	b.n	8004d30 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c88:	d052      	beq.n	8004d30 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c8a:	f7fd fe09 	bl	80028a0 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d302      	bcc.n	8004ca0 <I2C_IsErrorOccurred+0x54>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d147      	bne.n	8004d30 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004caa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc2:	d12e      	bne.n	8004d22 <I2C_IsErrorOccurred+0xd6>
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cca:	d02a      	beq.n	8004d22 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004ccc:	7cfb      	ldrb	r3, [r7, #19]
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d027      	beq.n	8004d22 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ce0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ce2:	f7fd fddd 	bl	80028a0 <HAL_GetTick>
 8004ce6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ce8:	e01b      	b.n	8004d22 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004cea:	f7fd fdd9 	bl	80028a0 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b19      	cmp	r3, #25
 8004cf6:	d914      	bls.n	8004d22 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d1dc      	bne.n	8004cea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b20      	cmp	r3, #32
 8004d3c:	d003      	beq.n	8004d46 <I2C_IsErrorOccurred+0xfa>
 8004d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d09d      	beq.n	8004c82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d103      	bne.n	8004d56 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2220      	movs	r2, #32
 8004d54:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	f043 0304 	orr.w	r3, r3, #4
 8004d5c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	f043 0301 	orr.w	r3, r3, #1
 8004d7c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00b      	beq.n	8004db0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	f043 0308 	orr.w	r3, r3, #8
 8004d9e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004da8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00b      	beq.n	8004dd2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	f043 0302 	orr.w	r3, r3, #2
 8004dc0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01c      	beq.n	8004e14 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7ff fe37 	bl	8004a4e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6859      	ldr	r1, [r3, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <I2C_IsErrorOccurred+0x1d4>)
 8004dec:	400b      	ands	r3, r1
 8004dee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3728      	adds	r7, #40	; 0x28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	fe00e800 	.word	0xfe00e800

08004e24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	817b      	strh	r3, [r7, #10]
 8004e32:	4613      	mov	r3, r2
 8004e34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e36:	897b      	ldrh	r3, [r7, #10]
 8004e38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e3c:	7a7b      	ldrb	r3, [r7, #9]
 8004e3e:	041b      	lsls	r3, r3, #16
 8004e40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	0d5b      	lsrs	r3, r3, #21
 8004e5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004e62:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <I2C_TransferConfig+0x60>)
 8004e64:	430b      	orrs	r3, r1
 8004e66:	43db      	mvns	r3, r3
 8004e68:	ea02 0103 	and.w	r1, r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	03ff63ff 	.word	0x03ff63ff

08004e88 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9c:	4a2d      	ldr	r2, [pc, #180]	; (8004f54 <I2C_Enable_IRQ+0xcc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004ea6:	4a2c      	ldr	r2, [pc, #176]	; (8004f58 <I2C_Enable_IRQ+0xd0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d11d      	bne.n	8004ee8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004eac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	da03      	bge.n	8004ebc <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004eba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004ebc:	887b      	ldrh	r3, [r7, #2]
 8004ebe:	2b10      	cmp	r3, #16
 8004ec0:	d103      	bne.n	8004eca <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004ec8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004eca:	887b      	ldrh	r3, [r7, #2]
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	d103      	bne.n	8004ed8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ed6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004ed8:	887b      	ldrh	r3, [r7, #2]
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	d12c      	bne.n	8004f38 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ee4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004ee6:	e027      	b.n	8004f38 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004ee8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	da03      	bge.n	8004ef8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004ef6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004ef8:	887b      	ldrh	r3, [r7, #2]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004f08:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004f0a:	887b      	ldrh	r3, [r7, #2]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004f1a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004f1c:	887b      	ldrh	r3, [r7, #2]
 8004f1e:	2b10      	cmp	r3, #16
 8004f20:	d103      	bne.n	8004f2a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004f28:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004f2a:	887b      	ldrh	r3, [r7, #2]
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d103      	bne.n	8004f38 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f043 0320 	orr.w	r3, r3, #32
 8004f36:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6819      	ldr	r1, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
}
 8004f48:	bf00      	nop
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	08003d7f 	.word	0x08003d7f
 8004f58:	08003f65 	.word	0x08003f65

08004f5c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004f6c:	887b      	ldrh	r3, [r7, #2]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00f      	beq.n	8004f96 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004f7c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f8a:	2b28      	cmp	r3, #40	; 0x28
 8004f8c:	d003      	beq.n	8004f96 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004f94:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004f96:	887b      	ldrh	r3, [r7, #2]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00f      	beq.n	8004fc0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004fa6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fb4:	2b28      	cmp	r3, #40	; 0x28
 8004fb6:	d003      	beq.n	8004fc0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004fbe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004fc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	da03      	bge.n	8004fd0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004fce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004fd0:	887b      	ldrh	r3, [r7, #2]
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d103      	bne.n	8004fde <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004fdc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004fde:	887b      	ldrh	r3, [r7, #2]
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d103      	bne.n	8004fec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f043 0320 	orr.w	r3, r3, #32
 8004fea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004fec:	887b      	ldrh	r3, [r7, #2]
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d103      	bne.n	8004ffa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6819      	ldr	r1, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	43da      	mvns	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	400a      	ands	r2, r1
 800500a:	601a      	str	r2, [r3, #0]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b20      	cmp	r3, #32
 800502c:	d138      	bne.n	80050a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005038:	2302      	movs	r3, #2
 800503a:	e032      	b.n	80050a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2224      	movs	r2, #36	; 0x24
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0201 	bic.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800506a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6819      	ldr	r1, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	e000      	b.n	80050a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050a0:	2302      	movs	r3, #2
  }
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b085      	sub	sp, #20
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d139      	bne.n	8005138 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e033      	b.n	800513a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2224      	movs	r2, #36	; 0x24
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0201 	bic.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005100:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	e000      	b.n	800513a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005138:	2302      	movs	r3, #2
  }
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800514c:	4b04      	ldr	r3, [pc, #16]	; (8005160 <HAL_PWREx_GetVoltageRange+0x18>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005154:	4618      	mov	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40007000 	.word	0x40007000

08005164 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005172:	d130      	bne.n	80051d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005174:	4b23      	ldr	r3, [pc, #140]	; (8005204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800517c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005180:	d038      	beq.n	80051f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005182:	4b20      	ldr	r3, [pc, #128]	; (8005204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800518a:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800518c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005190:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005192:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2232      	movs	r2, #50	; 0x32
 8005198:	fb02 f303 	mul.w	r3, r2, r3
 800519c:	4a1b      	ldr	r2, [pc, #108]	; (800520c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	0c9b      	lsrs	r3, r3, #18
 80051a4:	3301      	adds	r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051a8:	e002      	b.n	80051b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051b0:	4b14      	ldr	r3, [pc, #80]	; (8005204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051bc:	d102      	bne.n	80051c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f2      	bne.n	80051aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051c4:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d0:	d110      	bne.n	80051f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e00f      	b.n	80051f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e2:	d007      	beq.n	80051f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051e4:	4b07      	ldr	r3, [pc, #28]	; (8005204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051ec:	4a05      	ldr	r2, [pc, #20]	; (8005204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40007000 	.word	0x40007000
 8005208:	20000014 	.word	0x20000014
 800520c:	431bde83 	.word	0x431bde83

08005210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e3ca      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005222:	4b97      	ldr	r3, [pc, #604]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800522c:	4b94      	ldr	r3, [pc, #592]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80e4 	beq.w	800540c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d007      	beq.n	800525a <HAL_RCC_OscConfig+0x4a>
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b0c      	cmp	r3, #12
 800524e:	f040 808b 	bne.w	8005368 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b01      	cmp	r3, #1
 8005256:	f040 8087 	bne.w	8005368 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800525a:	4b89      	ldr	r3, [pc, #548]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <HAL_RCC_OscConfig+0x62>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e3a2      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1a      	ldr	r2, [r3, #32]
 8005276:	4b82      	ldr	r3, [pc, #520]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	2b00      	cmp	r3, #0
 8005280:	d004      	beq.n	800528c <HAL_RCC_OscConfig+0x7c>
 8005282:	4b7f      	ldr	r3, [pc, #508]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800528a:	e005      	b.n	8005298 <HAL_RCC_OscConfig+0x88>
 800528c:	4b7c      	ldr	r3, [pc, #496]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 800528e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005292:	091b      	lsrs	r3, r3, #4
 8005294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005298:	4293      	cmp	r3, r2
 800529a:	d223      	bcs.n	80052e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fd55 	bl	8005d50 <RCC_SetFlashLatencyFromMSIRange>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e383      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052b0:	4b73      	ldr	r3, [pc, #460]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a72      	ldr	r2, [pc, #456]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80052b6:	f043 0308 	orr.w	r3, r3, #8
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4b70      	ldr	r3, [pc, #448]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	496d      	ldr	r1, [pc, #436]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ce:	4b6c      	ldr	r3, [pc, #432]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	4968      	ldr	r1, [pc, #416]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	604b      	str	r3, [r1, #4]
 80052e2:	e025      	b.n	8005330 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052e4:	4b66      	ldr	r3, [pc, #408]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a65      	ldr	r2, [pc, #404]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80052ea:	f043 0308 	orr.w	r3, r3, #8
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	4b63      	ldr	r3, [pc, #396]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	4960      	ldr	r1, [pc, #384]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005302:	4b5f      	ldr	r3, [pc, #380]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	495b      	ldr	r1, [pc, #364]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 8005312:	4313      	orrs	r3, r2
 8005314:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d109      	bne.n	8005330 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fd15 	bl	8005d50 <RCC_SetFlashLatencyFromMSIRange>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e343      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005330:	f000 fc4a 	bl	8005bc8 <HAL_RCC_GetSysClockFreq>
 8005334:	4602      	mov	r2, r0
 8005336:	4b52      	ldr	r3, [pc, #328]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	091b      	lsrs	r3, r3, #4
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	4950      	ldr	r1, [pc, #320]	; (8005484 <HAL_RCC_OscConfig+0x274>)
 8005342:	5ccb      	ldrb	r3, [r1, r3]
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	fa22 f303 	lsr.w	r3, r2, r3
 800534c:	4a4e      	ldr	r2, [pc, #312]	; (8005488 <HAL_RCC_OscConfig+0x278>)
 800534e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005350:	4b4e      	ldr	r3, [pc, #312]	; (800548c <HAL_RCC_OscConfig+0x27c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f7fd fa53 	bl	8002800 <HAL_InitTick>
 800535a:	4603      	mov	r3, r0
 800535c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d052      	beq.n	800540a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	e327      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d032      	beq.n	80053d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005370:	4b43      	ldr	r3, [pc, #268]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a42      	ldr	r2, [pc, #264]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800537c:	f7fd fa90 	bl	80028a0 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005384:	f7fd fa8c 	bl	80028a0 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e310      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005396:	4b3a      	ldr	r3, [pc, #232]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053a2:	4b37      	ldr	r3, [pc, #220]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a36      	ldr	r2, [pc, #216]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80053a8:	f043 0308 	orr.w	r3, r3, #8
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	4b34      	ldr	r3, [pc, #208]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	4931      	ldr	r1, [pc, #196]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053c0:	4b2f      	ldr	r3, [pc, #188]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	492c      	ldr	r1, [pc, #176]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	604b      	str	r3, [r1, #4]
 80053d4:	e01a      	b.n	800540c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053d6:	4b2a      	ldr	r3, [pc, #168]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a29      	ldr	r2, [pc, #164]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053e2:	f7fd fa5d 	bl	80028a0 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053ea:	f7fd fa59 	bl	80028a0 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e2dd      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053fc:	4b20      	ldr	r3, [pc, #128]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1f0      	bne.n	80053ea <HAL_RCC_OscConfig+0x1da>
 8005408:	e000      	b.n	800540c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800540a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d074      	beq.n	8005502 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	2b08      	cmp	r3, #8
 800541c:	d005      	beq.n	800542a <HAL_RCC_OscConfig+0x21a>
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	2b0c      	cmp	r3, #12
 8005422:	d10e      	bne.n	8005442 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d10b      	bne.n	8005442 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800542a:	4b15      	ldr	r3, [pc, #84]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d064      	beq.n	8005500 <HAL_RCC_OscConfig+0x2f0>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d160      	bne.n	8005500 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e2ba      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544a:	d106      	bne.n	800545a <HAL_RCC_OscConfig+0x24a>
 800544c:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0b      	ldr	r2, [pc, #44]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 8005452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	e026      	b.n	80054a8 <HAL_RCC_OscConfig+0x298>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005462:	d115      	bne.n	8005490 <HAL_RCC_OscConfig+0x280>
 8005464:	4b06      	ldr	r3, [pc, #24]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a05      	ldr	r2, [pc, #20]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 800546a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	4b03      	ldr	r3, [pc, #12]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a02      	ldr	r2, [pc, #8]	; (8005480 <HAL_RCC_OscConfig+0x270>)
 8005476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	e014      	b.n	80054a8 <HAL_RCC_OscConfig+0x298>
 800547e:	bf00      	nop
 8005480:	40021000 	.word	0x40021000
 8005484:	0801583c 	.word	0x0801583c
 8005488:	20000014 	.word	0x20000014
 800548c:	20000018 	.word	0x20000018
 8005490:	4ba0      	ldr	r3, [pc, #640]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a9f      	ldr	r2, [pc, #636]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 8005496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	4b9d      	ldr	r3, [pc, #628]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a9c      	ldr	r2, [pc, #624]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 80054a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d013      	beq.n	80054d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fd f9f6 	bl	80028a0 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b8:	f7fd f9f2 	bl	80028a0 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b64      	cmp	r3, #100	; 0x64
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e276      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ca:	4b92      	ldr	r3, [pc, #584]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f0      	beq.n	80054b8 <HAL_RCC_OscConfig+0x2a8>
 80054d6:	e014      	b.n	8005502 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d8:	f7fd f9e2 	bl	80028a0 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054e0:	f7fd f9de 	bl	80028a0 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b64      	cmp	r3, #100	; 0x64
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e262      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054f2:	4b88      	ldr	r3, [pc, #544]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f0      	bne.n	80054e0 <HAL_RCC_OscConfig+0x2d0>
 80054fe:	e000      	b.n	8005502 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d060      	beq.n	80055d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b04      	cmp	r3, #4
 8005512:	d005      	beq.n	8005520 <HAL_RCC_OscConfig+0x310>
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2b0c      	cmp	r3, #12
 8005518:	d119      	bne.n	800554e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d116      	bne.n	800554e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005520:	4b7c      	ldr	r3, [pc, #496]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <HAL_RCC_OscConfig+0x328>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e23f      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005538:	4b76      	ldr	r3, [pc, #472]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	061b      	lsls	r3, r3, #24
 8005546:	4973      	ldr	r1, [pc, #460]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 8005548:	4313      	orrs	r3, r2
 800554a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800554c:	e040      	b.n	80055d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d023      	beq.n	800559e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005556:	4b6f      	ldr	r3, [pc, #444]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a6e      	ldr	r2, [pc, #440]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 800555c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005562:	f7fd f99d 	bl	80028a0 <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800556a:	f7fd f999 	bl	80028a0 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e21d      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800557c:	4b65      	ldr	r3, [pc, #404]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0f0      	beq.n	800556a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005588:	4b62      	ldr	r3, [pc, #392]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	061b      	lsls	r3, r3, #24
 8005596:	495f      	ldr	r1, [pc, #380]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 8005598:	4313      	orrs	r3, r2
 800559a:	604b      	str	r3, [r1, #4]
 800559c:	e018      	b.n	80055d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800559e:	4b5d      	ldr	r3, [pc, #372]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a5c      	ldr	r2, [pc, #368]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 80055a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055aa:	f7fd f979 	bl	80028a0 <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b2:	f7fd f975 	bl	80028a0 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e1f9      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055c4:	4b53      	ldr	r3, [pc, #332]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1f0      	bne.n	80055b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d03c      	beq.n	8005656 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01c      	beq.n	800561e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e4:	4b4b      	ldr	r3, [pc, #300]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 80055e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ea:	4a4a      	ldr	r2, [pc, #296]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 80055ec:	f043 0301 	orr.w	r3, r3, #1
 80055f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f4:	f7fd f954 	bl	80028a0 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055fc:	f7fd f950 	bl	80028a0 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e1d4      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800560e:	4b41      	ldr	r3, [pc, #260]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 8005610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0ef      	beq.n	80055fc <HAL_RCC_OscConfig+0x3ec>
 800561c:	e01b      	b.n	8005656 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800561e:	4b3d      	ldr	r3, [pc, #244]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 8005620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005624:	4a3b      	ldr	r2, [pc, #236]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562e:	f7fd f937 	bl	80028a0 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005636:	f7fd f933 	bl	80028a0 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e1b7      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005648:	4b32      	ldr	r3, [pc, #200]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 800564a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1ef      	bne.n	8005636 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 80a6 	beq.w	80057b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005664:	2300      	movs	r3, #0
 8005666:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005668:	4b2a      	ldr	r3, [pc, #168]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 800566a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10d      	bne.n	8005690 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005674:	4b27      	ldr	r3, [pc, #156]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 8005676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005678:	4a26      	ldr	r2, [pc, #152]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 800567a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567e:	6593      	str	r3, [r2, #88]	; 0x58
 8005680:	4b24      	ldr	r3, [pc, #144]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 8005682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800568c:	2301      	movs	r3, #1
 800568e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005690:	4b21      	ldr	r3, [pc, #132]	; (8005718 <HAL_RCC_OscConfig+0x508>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005698:	2b00      	cmp	r3, #0
 800569a:	d118      	bne.n	80056ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800569c:	4b1e      	ldr	r3, [pc, #120]	; (8005718 <HAL_RCC_OscConfig+0x508>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1d      	ldr	r2, [pc, #116]	; (8005718 <HAL_RCC_OscConfig+0x508>)
 80056a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056a8:	f7fd f8fa 	bl	80028a0 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b0:	f7fd f8f6 	bl	80028a0 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e17a      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056c2:	4b15      	ldr	r3, [pc, #84]	; (8005718 <HAL_RCC_OscConfig+0x508>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f0      	beq.n	80056b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d108      	bne.n	80056e8 <HAL_RCC_OscConfig+0x4d8>
 80056d6:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 80056d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056dc:	4a0d      	ldr	r2, [pc, #52]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056e6:	e029      	b.n	800573c <HAL_RCC_OscConfig+0x52c>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	2b05      	cmp	r3, #5
 80056ee:	d115      	bne.n	800571c <HAL_RCC_OscConfig+0x50c>
 80056f0:	4b08      	ldr	r3, [pc, #32]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f6:	4a07      	ldr	r2, [pc, #28]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 80056f8:	f043 0304 	orr.w	r3, r3, #4
 80056fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005700:	4b04      	ldr	r3, [pc, #16]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 8005702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005706:	4a03      	ldr	r2, [pc, #12]	; (8005714 <HAL_RCC_OscConfig+0x504>)
 8005708:	f043 0301 	orr.w	r3, r3, #1
 800570c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005710:	e014      	b.n	800573c <HAL_RCC_OscConfig+0x52c>
 8005712:	bf00      	nop
 8005714:	40021000 	.word	0x40021000
 8005718:	40007000 	.word	0x40007000
 800571c:	4b9c      	ldr	r3, [pc, #624]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005722:	4a9b      	ldr	r2, [pc, #620]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 8005724:	f023 0301 	bic.w	r3, r3, #1
 8005728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800572c:	4b98      	ldr	r3, [pc, #608]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 800572e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005732:	4a97      	ldr	r2, [pc, #604]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 8005734:	f023 0304 	bic.w	r3, r3, #4
 8005738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d016      	beq.n	8005772 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005744:	f7fd f8ac 	bl	80028a0 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800574a:	e00a      	b.n	8005762 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574c:	f7fd f8a8 	bl	80028a0 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	f241 3288 	movw	r2, #5000	; 0x1388
 800575a:	4293      	cmp	r3, r2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e12a      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005762:	4b8b      	ldr	r3, [pc, #556]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 8005764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0ed      	beq.n	800574c <HAL_RCC_OscConfig+0x53c>
 8005770:	e015      	b.n	800579e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005772:	f7fd f895 	bl	80028a0 <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005778:	e00a      	b.n	8005790 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577a:	f7fd f891 	bl	80028a0 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	f241 3288 	movw	r2, #5000	; 0x1388
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e113      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005790:	4b7f      	ldr	r3, [pc, #508]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1ed      	bne.n	800577a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800579e:	7ffb      	ldrb	r3, [r7, #31]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d105      	bne.n	80057b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a4:	4b7a      	ldr	r3, [pc, #488]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 80057a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a8:	4a79      	ldr	r2, [pc, #484]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 80057aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80fe 	beq.w	80059b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	2b02      	cmp	r3, #2
 80057c0:	f040 80d0 	bne.w	8005964 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80057c4:	4b72      	ldr	r3, [pc, #456]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f003 0203 	and.w	r2, r3, #3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d130      	bne.n	800583a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	3b01      	subs	r3, #1
 80057e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d127      	bne.n	800583a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d11f      	bne.n	800583a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005804:	2a07      	cmp	r2, #7
 8005806:	bf14      	ite	ne
 8005808:	2201      	movne	r2, #1
 800580a:	2200      	moveq	r2, #0
 800580c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800580e:	4293      	cmp	r3, r2
 8005810:	d113      	bne.n	800583a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581c:	085b      	lsrs	r3, r3, #1
 800581e:	3b01      	subs	r3, #1
 8005820:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d109      	bne.n	800583a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	3b01      	subs	r3, #1
 8005834:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005836:	429a      	cmp	r2, r3
 8005838:	d06e      	beq.n	8005918 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b0c      	cmp	r3, #12
 800583e:	d069      	beq.n	8005914 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005840:	4b53      	ldr	r3, [pc, #332]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d105      	bne.n	8005858 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800584c:	4b50      	ldr	r3, [pc, #320]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0ad      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800585c:	4b4c      	ldr	r3, [pc, #304]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a4b      	ldr	r2, [pc, #300]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 8005862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005866:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005868:	f7fd f81a 	bl	80028a0 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005870:	f7fd f816 	bl	80028a0 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e09a      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005882:	4b43      	ldr	r3, [pc, #268]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800588e:	4b40      	ldr	r3, [pc, #256]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	4b40      	ldr	r3, [pc, #256]	; (8005994 <HAL_RCC_OscConfig+0x784>)
 8005894:	4013      	ands	r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800589e:	3a01      	subs	r2, #1
 80058a0:	0112      	lsls	r2, r2, #4
 80058a2:	4311      	orrs	r1, r2
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058a8:	0212      	lsls	r2, r2, #8
 80058aa:	4311      	orrs	r1, r2
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058b0:	0852      	lsrs	r2, r2, #1
 80058b2:	3a01      	subs	r2, #1
 80058b4:	0552      	lsls	r2, r2, #21
 80058b6:	4311      	orrs	r1, r2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058bc:	0852      	lsrs	r2, r2, #1
 80058be:	3a01      	subs	r2, #1
 80058c0:	0652      	lsls	r2, r2, #25
 80058c2:	4311      	orrs	r1, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058c8:	0912      	lsrs	r2, r2, #4
 80058ca:	0452      	lsls	r2, r2, #17
 80058cc:	430a      	orrs	r2, r1
 80058ce:	4930      	ldr	r1, [pc, #192]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80058d4:	4b2e      	ldr	r3, [pc, #184]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a2d      	ldr	r2, [pc, #180]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 80058da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058e0:	4b2b      	ldr	r3, [pc, #172]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	4a2a      	ldr	r2, [pc, #168]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 80058e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058ec:	f7fc ffd8 	bl	80028a0 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f4:	f7fc ffd4 	bl	80028a0 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e058      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005906:	4b22      	ldr	r3, [pc, #136]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f0      	beq.n	80058f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005912:	e050      	b.n	80059b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e04f      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005918:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d148      	bne.n	80059b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005924:	4b1a      	ldr	r3, [pc, #104]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a19      	ldr	r2, [pc, #100]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 800592a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800592e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005930:	4b17      	ldr	r3, [pc, #92]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4a16      	ldr	r2, [pc, #88]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 8005936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800593a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800593c:	f7fc ffb0 	bl	80028a0 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005944:	f7fc ffac 	bl	80028a0 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e030      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005956:	4b0e      	ldr	r3, [pc, #56]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCC_OscConfig+0x734>
 8005962:	e028      	b.n	80059b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	2b0c      	cmp	r3, #12
 8005968:	d023      	beq.n	80059b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800596a:	4b09      	ldr	r3, [pc, #36]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a08      	ldr	r2, [pc, #32]	; (8005990 <HAL_RCC_OscConfig+0x780>)
 8005970:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005976:	f7fc ff93 	bl	80028a0 <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800597c:	e00c      	b.n	8005998 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800597e:	f7fc ff8f 	bl	80028a0 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d905      	bls.n	8005998 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e013      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
 8005990:	40021000 	.word	0x40021000
 8005994:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005998:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <HAL_RCC_OscConfig+0x7b0>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1ec      	bne.n	800597e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80059a4:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <HAL_RCC_OscConfig+0x7b0>)
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	4905      	ldr	r1, [pc, #20]	; (80059c0 <HAL_RCC_OscConfig+0x7b0>)
 80059aa:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <HAL_RCC_OscConfig+0x7b4>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	60cb      	str	r3, [r1, #12]
 80059b0:	e001      	b.n	80059b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3720      	adds	r7, #32
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40021000 	.word	0x40021000
 80059c4:	feeefffc 	.word	0xfeeefffc

080059c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e0e7      	b.n	8005bac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059dc:	4b75      	ldr	r3, [pc, #468]	; (8005bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d910      	bls.n	8005a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ea:	4b72      	ldr	r3, [pc, #456]	; (8005bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f023 0207 	bic.w	r2, r3, #7
 80059f2:	4970      	ldr	r1, [pc, #448]	; (8005bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059fa:	4b6e      	ldr	r3, [pc, #440]	; (8005bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d001      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e0cf      	b.n	8005bac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d010      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	4b66      	ldr	r3, [pc, #408]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d908      	bls.n	8005a3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a28:	4b63      	ldr	r3, [pc, #396]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	4960      	ldr	r1, [pc, #384]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d04c      	beq.n	8005ae0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d107      	bne.n	8005a5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a4e:	4b5a      	ldr	r3, [pc, #360]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d121      	bne.n	8005a9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e0a6      	b.n	8005bac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d107      	bne.n	8005a76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a66:	4b54      	ldr	r3, [pc, #336]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d115      	bne.n	8005a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e09a      	b.n	8005bac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d107      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a7e:	4b4e      	ldr	r3, [pc, #312]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d109      	bne.n	8005a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e08e      	b.n	8005bac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a8e:	4b4a      	ldr	r3, [pc, #296]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e086      	b.n	8005bac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a9e:	4b46      	ldr	r3, [pc, #280]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f023 0203 	bic.w	r2, r3, #3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	4943      	ldr	r1, [pc, #268]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab0:	f7fc fef6 	bl	80028a0 <HAL_GetTick>
 8005ab4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab6:	e00a      	b.n	8005ace <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab8:	f7fc fef2 	bl	80028a0 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e06e      	b.n	8005bac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ace:	4b3a      	ldr	r3, [pc, #232]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 020c 	and.w	r2, r3, #12
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d1eb      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d010      	beq.n	8005b0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	4b31      	ldr	r3, [pc, #196]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d208      	bcs.n	8005b0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005afc:	4b2e      	ldr	r3, [pc, #184]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	492b      	ldr	r1, [pc, #172]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b0e:	4b29      	ldr	r3, [pc, #164]	; (8005bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d210      	bcs.n	8005b3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1c:	4b25      	ldr	r3, [pc, #148]	; (8005bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f023 0207 	bic.w	r2, r3, #7
 8005b24:	4923      	ldr	r1, [pc, #140]	; (8005bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b2c:	4b21      	ldr	r3, [pc, #132]	; (8005bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d001      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e036      	b.n	8005bac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d008      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b4a:	4b1b      	ldr	r3, [pc, #108]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	4918      	ldr	r1, [pc, #96]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0308 	and.w	r3, r3, #8
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d009      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b68:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	4910      	ldr	r1, [pc, #64]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b7c:	f000 f824 	bl	8005bc8 <HAL_RCC_GetSysClockFreq>
 8005b80:	4602      	mov	r2, r0
 8005b82:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	091b      	lsrs	r3, r3, #4
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	490b      	ldr	r1, [pc, #44]	; (8005bbc <HAL_RCC_ClockConfig+0x1f4>)
 8005b8e:	5ccb      	ldrb	r3, [r1, r3]
 8005b90:	f003 031f 	and.w	r3, r3, #31
 8005b94:	fa22 f303 	lsr.w	r3, r2, r3
 8005b98:	4a09      	ldr	r2, [pc, #36]	; (8005bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8005b9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b9c:	4b09      	ldr	r3, [pc, #36]	; (8005bc4 <HAL_RCC_ClockConfig+0x1fc>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fc fe2d 	bl	8002800 <HAL_InitTick>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	72fb      	strb	r3, [r7, #11]

  return status;
 8005baa:	7afb      	ldrb	r3, [r7, #11]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40022000 	.word	0x40022000
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	0801583c 	.word	0x0801583c
 8005bc0:	20000014 	.word	0x20000014
 8005bc4:	20000018 	.word	0x20000018

08005bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b089      	sub	sp, #36	; 0x24
 8005bcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bd6:	4b3e      	ldr	r3, [pc, #248]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 030c 	and.w	r3, r3, #12
 8005bde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005be0:	4b3b      	ldr	r3, [pc, #236]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <HAL_RCC_GetSysClockFreq+0x34>
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	2b0c      	cmp	r3, #12
 8005bf4:	d121      	bne.n	8005c3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d11e      	bne.n	8005c3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005bfc:	4b34      	ldr	r3, [pc, #208]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d107      	bne.n	8005c18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c08:	4b31      	ldr	r3, [pc, #196]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c0e:	0a1b      	lsrs	r3, r3, #8
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	61fb      	str	r3, [r7, #28]
 8005c16:	e005      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c18:	4b2d      	ldr	r3, [pc, #180]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	091b      	lsrs	r3, r3, #4
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c24:	4a2b      	ldr	r2, [pc, #172]	; (8005cd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10d      	bne.n	8005c50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c38:	e00a      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d102      	bne.n	8005c46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c40:	4b25      	ldr	r3, [pc, #148]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c42:	61bb      	str	r3, [r7, #24]
 8005c44:	e004      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d101      	bne.n	8005c50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c4c:	4b23      	ldr	r3, [pc, #140]	; (8005cdc <HAL_RCC_GetSysClockFreq+0x114>)
 8005c4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b0c      	cmp	r3, #12
 8005c54:	d134      	bne.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c56:	4b1e      	ldr	r3, [pc, #120]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d003      	beq.n	8005c6e <HAL_RCC_GetSysClockFreq+0xa6>
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d003      	beq.n	8005c74 <HAL_RCC_GetSysClockFreq+0xac>
 8005c6c:	e005      	b.n	8005c7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c6e:	4b1a      	ldr	r3, [pc, #104]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c70:	617b      	str	r3, [r7, #20]
      break;
 8005c72:	e005      	b.n	8005c80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c74:	4b19      	ldr	r3, [pc, #100]	; (8005cdc <HAL_RCC_GetSysClockFreq+0x114>)
 8005c76:	617b      	str	r3, [r7, #20]
      break;
 8005c78:	e002      	b.n	8005c80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	617b      	str	r3, [r7, #20]
      break;
 8005c7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c80:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	091b      	lsrs	r3, r3, #4
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c8e:	4b10      	ldr	r3, [pc, #64]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	0a1b      	lsrs	r3, r3, #8
 8005c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	fb03 f202 	mul.w	r2, r3, r2
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ca6:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	0e5b      	lsrs	r3, r3, #25
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005cc0:	69bb      	ldr	r3, [r7, #24]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3724      	adds	r7, #36	; 0x24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	08015854 	.word	0x08015854
 8005cd8:	00f42400 	.word	0x00f42400
 8005cdc:	007a1200 	.word	0x007a1200

08005ce0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ce4:	4b03      	ldr	r3, [pc, #12]	; (8005cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20000014 	.word	0x20000014

08005cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005cfc:	f7ff fff0 	bl	8005ce0 <HAL_RCC_GetHCLKFreq>
 8005d00:	4602      	mov	r2, r0
 8005d02:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	0a1b      	lsrs	r3, r3, #8
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	4904      	ldr	r1, [pc, #16]	; (8005d20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d0e:	5ccb      	ldrb	r3, [r1, r3]
 8005d10:	f003 031f 	and.w	r3, r3, #31
 8005d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40021000 	.word	0x40021000
 8005d20:	0801584c 	.word	0x0801584c

08005d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d28:	f7ff ffda 	bl	8005ce0 <HAL_RCC_GetHCLKFreq>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	0adb      	lsrs	r3, r3, #11
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	4904      	ldr	r1, [pc, #16]	; (8005d4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d3a:	5ccb      	ldrb	r3, [r1, r3]
 8005d3c:	f003 031f 	and.w	r3, r3, #31
 8005d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	0801584c 	.word	0x0801584c

08005d50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d58:	2300      	movs	r3, #0
 8005d5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d5c:	4b2a      	ldr	r3, [pc, #168]	; (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d68:	f7ff f9ee 	bl	8005148 <HAL_PWREx_GetVoltageRange>
 8005d6c:	6178      	str	r0, [r7, #20]
 8005d6e:	e014      	b.n	8005d9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d70:	4b25      	ldr	r3, [pc, #148]	; (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d74:	4a24      	ldr	r2, [pc, #144]	; (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d7c:	4b22      	ldr	r3, [pc, #136]	; (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d88:	f7ff f9de 	bl	8005148 <HAL_PWREx_GetVoltageRange>
 8005d8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d8e:	4b1e      	ldr	r3, [pc, #120]	; (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d92:	4a1d      	ldr	r2, [pc, #116]	; (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da0:	d10b      	bne.n	8005dba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b80      	cmp	r3, #128	; 0x80
 8005da6:	d919      	bls.n	8005ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2ba0      	cmp	r3, #160	; 0xa0
 8005dac:	d902      	bls.n	8005db4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dae:	2302      	movs	r3, #2
 8005db0:	613b      	str	r3, [r7, #16]
 8005db2:	e013      	b.n	8005ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005db4:	2301      	movs	r3, #1
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	e010      	b.n	8005ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b80      	cmp	r3, #128	; 0x80
 8005dbe:	d902      	bls.n	8005dc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	e00a      	b.n	8005ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b80      	cmp	r3, #128	; 0x80
 8005dca:	d102      	bne.n	8005dd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dcc:	2302      	movs	r3, #2
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	e004      	b.n	8005ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b70      	cmp	r3, #112	; 0x70
 8005dd6:	d101      	bne.n	8005ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dd8:	2301      	movs	r3, #1
 8005dda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f023 0207 	bic.w	r2, r3, #7
 8005de4:	4909      	ldr	r1, [pc, #36]	; (8005e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005dec:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0307 	and.w	r3, r3, #7
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d001      	beq.n	8005dfe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e000      	b.n	8005e00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	40022000 	.word	0x40022000

08005e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e18:	2300      	movs	r3, #0
 8005e1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d041      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e34:	d02a      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005e36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e3a:	d824      	bhi.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e40:	d008      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e46:	d81e      	bhi.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e50:	d010      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e52:	e018      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e54:	4b86      	ldr	r3, [pc, #536]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	4a85      	ldr	r2, [pc, #532]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e5e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e60:	e015      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	3304      	adds	r3, #4
 8005e66:	2100      	movs	r1, #0
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 fabb 	bl	80063e4 <RCCEx_PLLSAI1_Config>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e72:	e00c      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3320      	adds	r3, #32
 8005e78:	2100      	movs	r1, #0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fba6 	bl	80065cc <RCCEx_PLLSAI2_Config>
 8005e80:	4603      	mov	r3, r0
 8005e82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e84:	e003      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	74fb      	strb	r3, [r7, #19]
      break;
 8005e8a:	e000      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e8e:	7cfb      	ldrb	r3, [r7, #19]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10b      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e94:	4b76      	ldr	r3, [pc, #472]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ea2:	4973      	ldr	r1, [pc, #460]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005eaa:	e001      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eac:	7cfb      	ldrb	r3, [r7, #19]
 8005eae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d041      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ec0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ec4:	d02a      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005ec6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005eca:	d824      	bhi.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ed0:	d008      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ed2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ed6:	d81e      	bhi.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ee0:	d010      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005ee2:	e018      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ee4:	4b62      	ldr	r3, [pc, #392]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	4a61      	ldr	r2, [pc, #388]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ef0:	e015      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 fa73 	bl	80063e4 <RCCEx_PLLSAI1_Config>
 8005efe:	4603      	mov	r3, r0
 8005f00:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f02:	e00c      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3320      	adds	r3, #32
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fb5e 	bl	80065cc <RCCEx_PLLSAI2_Config>
 8005f10:	4603      	mov	r3, r0
 8005f12:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f14:	e003      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	74fb      	strb	r3, [r7, #19]
      break;
 8005f1a:	e000      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f1e:	7cfb      	ldrb	r3, [r7, #19]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10b      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f24:	4b52      	ldr	r3, [pc, #328]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f32:	494f      	ldr	r1, [pc, #316]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005f3a:	e001      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3c:	7cfb      	ldrb	r3, [r7, #19]
 8005f3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80a0 	beq.w	800608e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f52:	4b47      	ldr	r3, [pc, #284]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005f62:	2300      	movs	r3, #0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00d      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f68:	4b41      	ldr	r3, [pc, #260]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6c:	4a40      	ldr	r2, [pc, #256]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f72:	6593      	str	r3, [r2, #88]	; 0x58
 8005f74:	4b3e      	ldr	r3, [pc, #248]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7c:	60bb      	str	r3, [r7, #8]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f80:	2301      	movs	r3, #1
 8005f82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f84:	4b3b      	ldr	r3, [pc, #236]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a3a      	ldr	r2, [pc, #232]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f90:	f7fc fc86 	bl	80028a0 <HAL_GetTick>
 8005f94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f96:	e009      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f98:	f7fc fc82 	bl	80028a0 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d902      	bls.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	74fb      	strb	r3, [r7, #19]
        break;
 8005faa:	e005      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005fac:	4b31      	ldr	r3, [pc, #196]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0ef      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005fb8:	7cfb      	ldrb	r3, [r7, #19]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d15c      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fbe:	4b2c      	ldr	r3, [pc, #176]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fc8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01f      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d019      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fdc:	4b24      	ldr	r3, [pc, #144]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fe8:	4b21      	ldr	r3, [pc, #132]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fee:	4a20      	ldr	r2, [pc, #128]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ff8:	4b1d      	ldr	r3, [pc, #116]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffe:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006008:	4a19      	ldr	r2, [pc, #100]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d016      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601a:	f7fc fc41 	bl	80028a0 <HAL_GetTick>
 800601e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006020:	e00b      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006022:	f7fc fc3d 	bl	80028a0 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006030:	4293      	cmp	r3, r2
 8006032:	d902      	bls.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	74fb      	strb	r3, [r7, #19]
            break;
 8006038:	e006      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800603a:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800603c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0ec      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006048:	7cfb      	ldrb	r3, [r7, #19]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10c      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800604e:	4b08      	ldr	r3, [pc, #32]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800605e:	4904      	ldr	r1, [pc, #16]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006060:	4313      	orrs	r3, r2
 8006062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006066:	e009      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006068:	7cfb      	ldrb	r3, [r7, #19]
 800606a:	74bb      	strb	r3, [r7, #18]
 800606c:	e006      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800606e:	bf00      	nop
 8006070:	40021000 	.word	0x40021000
 8006074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006078:	7cfb      	ldrb	r3, [r7, #19]
 800607a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800607c:	7c7b      	ldrb	r3, [r7, #17]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d105      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006082:	4b9e      	ldr	r3, [pc, #632]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006086:	4a9d      	ldr	r2, [pc, #628]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800608c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800609a:	4b98      	ldr	r3, [pc, #608]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800609c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a0:	f023 0203 	bic.w	r2, r3, #3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	4994      	ldr	r1, [pc, #592]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00a      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060bc:	4b8f      	ldr	r3, [pc, #572]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c2:	f023 020c 	bic.w	r2, r3, #12
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	498c      	ldr	r1, [pc, #560]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060de:	4b87      	ldr	r3, [pc, #540]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	4983      	ldr	r1, [pc, #524]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0308 	and.w	r3, r3, #8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006100:	4b7e      	ldr	r3, [pc, #504]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006106:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610e:	497b      	ldr	r1, [pc, #492]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006110:	4313      	orrs	r3, r2
 8006112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0310 	and.w	r3, r3, #16
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006122:	4b76      	ldr	r3, [pc, #472]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006130:	4972      	ldr	r1, [pc, #456]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0320 	and.w	r3, r3, #32
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00a      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006144:	4b6d      	ldr	r3, [pc, #436]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006152:	496a      	ldr	r1, [pc, #424]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006154:	4313      	orrs	r3, r2
 8006156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006166:	4b65      	ldr	r3, [pc, #404]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006174:	4961      	ldr	r1, [pc, #388]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00a      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006188:	4b5c      	ldr	r3, [pc, #368]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800618a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006196:	4959      	ldr	r1, [pc, #356]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006198:	4313      	orrs	r3, r2
 800619a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061aa:	4b54      	ldr	r3, [pc, #336]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b8:	4950      	ldr	r1, [pc, #320]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00a      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061cc:	4b4b      	ldr	r3, [pc, #300]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061da:	4948      	ldr	r1, [pc, #288]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00a      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061ee:	4b43      	ldr	r3, [pc, #268]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fc:	493f      	ldr	r1, [pc, #252]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d028      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006210:	4b3a      	ldr	r3, [pc, #232]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006216:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800621e:	4937      	ldr	r1, [pc, #220]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006220:	4313      	orrs	r3, r2
 8006222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800622a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800622e:	d106      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006230:	4b32      	ldr	r3, [pc, #200]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	4a31      	ldr	r2, [pc, #196]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800623a:	60d3      	str	r3, [r2, #12]
 800623c:	e011      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006242:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006246:	d10c      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3304      	adds	r3, #4
 800624c:	2101      	movs	r1, #1
 800624e:	4618      	mov	r0, r3
 8006250:	f000 f8c8 	bl	80063e4 <RCCEx_PLLSAI1_Config>
 8006254:	4603      	mov	r3, r0
 8006256:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006258:	7cfb      	ldrb	r3, [r7, #19]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800625e:	7cfb      	ldrb	r3, [r7, #19]
 8006260:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d028      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800626e:	4b23      	ldr	r3, [pc, #140]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006274:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627c:	491f      	ldr	r1, [pc, #124]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800627e:	4313      	orrs	r3, r2
 8006280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800628c:	d106      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800628e:	4b1b      	ldr	r3, [pc, #108]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	4a1a      	ldr	r2, [pc, #104]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006298:	60d3      	str	r3, [r2, #12]
 800629a:	e011      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062a4:	d10c      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3304      	adds	r3, #4
 80062aa:	2101      	movs	r1, #1
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 f899 	bl	80063e4 <RCCEx_PLLSAI1_Config>
 80062b2:	4603      	mov	r3, r0
 80062b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062b6:	7cfb      	ldrb	r3, [r7, #19]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80062bc:	7cfb      	ldrb	r3, [r7, #19]
 80062be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d02b      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062cc:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062da:	4908      	ldr	r1, [pc, #32]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062ea:	d109      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062ec:	4b03      	ldr	r3, [pc, #12]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	4a02      	ldr	r2, [pc, #8]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062f6:	60d3      	str	r3, [r2, #12]
 80062f8:	e014      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80062fa:	bf00      	nop
 80062fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006308:	d10c      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3304      	adds	r3, #4
 800630e:	2101      	movs	r1, #1
 8006310:	4618      	mov	r0, r3
 8006312:	f000 f867 	bl	80063e4 <RCCEx_PLLSAI1_Config>
 8006316:	4603      	mov	r3, r0
 8006318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800631a:	7cfb      	ldrb	r3, [r7, #19]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006320:	7cfb      	ldrb	r3, [r7, #19]
 8006322:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d02f      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006330:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006336:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800633e:	4928      	ldr	r1, [pc, #160]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006340:	4313      	orrs	r3, r2
 8006342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800634a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800634e:	d10d      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3304      	adds	r3, #4
 8006354:	2102      	movs	r1, #2
 8006356:	4618      	mov	r0, r3
 8006358:	f000 f844 	bl	80063e4 <RCCEx_PLLSAI1_Config>
 800635c:	4603      	mov	r3, r0
 800635e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006360:	7cfb      	ldrb	r3, [r7, #19]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d014      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006366:	7cfb      	ldrb	r3, [r7, #19]
 8006368:	74bb      	strb	r3, [r7, #18]
 800636a:	e011      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006374:	d10c      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	3320      	adds	r3, #32
 800637a:	2102      	movs	r1, #2
 800637c:	4618      	mov	r0, r3
 800637e:	f000 f925 	bl	80065cc <RCCEx_PLLSAI2_Config>
 8006382:	4603      	mov	r3, r0
 8006384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006386:	7cfb      	ldrb	r3, [r7, #19]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800638c:	7cfb      	ldrb	r3, [r7, #19]
 800638e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00a      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800639c:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800639e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063aa:	490d      	ldr	r1, [pc, #52]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00b      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063be:	4b08      	ldr	r3, [pc, #32]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ce:	4904      	ldr	r1, [pc, #16]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80063d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40021000 	.word	0x40021000

080063e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063f2:	4b75      	ldr	r3, [pc, #468]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d018      	beq.n	8006430 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063fe:	4b72      	ldr	r3, [pc, #456]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f003 0203 	and.w	r2, r3, #3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d10d      	bne.n	800642a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
       ||
 8006412:	2b00      	cmp	r3, #0
 8006414:	d009      	beq.n	800642a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006416:	4b6c      	ldr	r3, [pc, #432]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	091b      	lsrs	r3, r3, #4
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
       ||
 8006426:	429a      	cmp	r2, r3
 8006428:	d047      	beq.n	80064ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	73fb      	strb	r3, [r7, #15]
 800642e:	e044      	b.n	80064ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b03      	cmp	r3, #3
 8006436:	d018      	beq.n	800646a <RCCEx_PLLSAI1_Config+0x86>
 8006438:	2b03      	cmp	r3, #3
 800643a:	d825      	bhi.n	8006488 <RCCEx_PLLSAI1_Config+0xa4>
 800643c:	2b01      	cmp	r3, #1
 800643e:	d002      	beq.n	8006446 <RCCEx_PLLSAI1_Config+0x62>
 8006440:	2b02      	cmp	r3, #2
 8006442:	d009      	beq.n	8006458 <RCCEx_PLLSAI1_Config+0x74>
 8006444:	e020      	b.n	8006488 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006446:	4b60      	ldr	r3, [pc, #384]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d11d      	bne.n	800648e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006456:	e01a      	b.n	800648e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006458:	4b5b      	ldr	r3, [pc, #364]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006460:	2b00      	cmp	r3, #0
 8006462:	d116      	bne.n	8006492 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006468:	e013      	b.n	8006492 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800646a:	4b57      	ldr	r3, [pc, #348]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10f      	bne.n	8006496 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006476:	4b54      	ldr	r3, [pc, #336]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d109      	bne.n	8006496 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006486:	e006      	b.n	8006496 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	73fb      	strb	r3, [r7, #15]
      break;
 800648c:	e004      	b.n	8006498 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800648e:	bf00      	nop
 8006490:	e002      	b.n	8006498 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006492:	bf00      	nop
 8006494:	e000      	b.n	8006498 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006496:	bf00      	nop
    }

    if(status == HAL_OK)
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10d      	bne.n	80064ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800649e:	4b4a      	ldr	r3, [pc, #296]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6819      	ldr	r1, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	430b      	orrs	r3, r1
 80064b4:	4944      	ldr	r1, [pc, #272]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d17d      	bne.n	80065bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064c0:	4b41      	ldr	r3, [pc, #260]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a40      	ldr	r2, [pc, #256]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064cc:	f7fc f9e8 	bl	80028a0 <HAL_GetTick>
 80064d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064d2:	e009      	b.n	80064e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064d4:	f7fc f9e4 	bl	80028a0 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d902      	bls.n	80064e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	73fb      	strb	r3, [r7, #15]
        break;
 80064e6:	e005      	b.n	80064f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064e8:	4b37      	ldr	r3, [pc, #220]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1ef      	bne.n	80064d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d160      	bne.n	80065bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d111      	bne.n	8006524 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006500:	4b31      	ldr	r3, [pc, #196]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6892      	ldr	r2, [r2, #8]
 8006510:	0211      	lsls	r1, r2, #8
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	68d2      	ldr	r2, [r2, #12]
 8006516:	0912      	lsrs	r2, r2, #4
 8006518:	0452      	lsls	r2, r2, #17
 800651a:	430a      	orrs	r2, r1
 800651c:	492a      	ldr	r1, [pc, #168]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800651e:	4313      	orrs	r3, r2
 8006520:	610b      	str	r3, [r1, #16]
 8006522:	e027      	b.n	8006574 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d112      	bne.n	8006550 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800652a:	4b27      	ldr	r3, [pc, #156]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006532:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6892      	ldr	r2, [r2, #8]
 800653a:	0211      	lsls	r1, r2, #8
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	6912      	ldr	r2, [r2, #16]
 8006540:	0852      	lsrs	r2, r2, #1
 8006542:	3a01      	subs	r2, #1
 8006544:	0552      	lsls	r2, r2, #21
 8006546:	430a      	orrs	r2, r1
 8006548:	491f      	ldr	r1, [pc, #124]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800654a:	4313      	orrs	r3, r2
 800654c:	610b      	str	r3, [r1, #16]
 800654e:	e011      	b.n	8006574 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006550:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006558:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6892      	ldr	r2, [r2, #8]
 8006560:	0211      	lsls	r1, r2, #8
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6952      	ldr	r2, [r2, #20]
 8006566:	0852      	lsrs	r2, r2, #1
 8006568:	3a01      	subs	r2, #1
 800656a:	0652      	lsls	r2, r2, #25
 800656c:	430a      	orrs	r2, r1
 800656e:	4916      	ldr	r1, [pc, #88]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006570:	4313      	orrs	r3, r2
 8006572:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006574:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a13      	ldr	r2, [pc, #76]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800657a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800657e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006580:	f7fc f98e 	bl	80028a0 <HAL_GetTick>
 8006584:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006586:	e009      	b.n	800659c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006588:	f7fc f98a 	bl	80028a0 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d902      	bls.n	800659c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	73fb      	strb	r3, [r7, #15]
          break;
 800659a:	e005      	b.n	80065a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800659c:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0ef      	beq.n	8006588 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80065ae:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065b0:	691a      	ldr	r2, [r3, #16]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	4904      	ldr	r1, [pc, #16]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	40021000 	.word	0x40021000

080065cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065da:	4b6a      	ldr	r3, [pc, #424]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d018      	beq.n	8006618 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80065e6:	4b67      	ldr	r3, [pc, #412]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f003 0203 	and.w	r2, r3, #3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d10d      	bne.n	8006612 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
       ||
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d009      	beq.n	8006612 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80065fe:	4b61      	ldr	r3, [pc, #388]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	091b      	lsrs	r3, r3, #4
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
       ||
 800660e:	429a      	cmp	r2, r3
 8006610:	d047      	beq.n	80066a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	73fb      	strb	r3, [r7, #15]
 8006616:	e044      	b.n	80066a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b03      	cmp	r3, #3
 800661e:	d018      	beq.n	8006652 <RCCEx_PLLSAI2_Config+0x86>
 8006620:	2b03      	cmp	r3, #3
 8006622:	d825      	bhi.n	8006670 <RCCEx_PLLSAI2_Config+0xa4>
 8006624:	2b01      	cmp	r3, #1
 8006626:	d002      	beq.n	800662e <RCCEx_PLLSAI2_Config+0x62>
 8006628:	2b02      	cmp	r3, #2
 800662a:	d009      	beq.n	8006640 <RCCEx_PLLSAI2_Config+0x74>
 800662c:	e020      	b.n	8006670 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800662e:	4b55      	ldr	r3, [pc, #340]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d11d      	bne.n	8006676 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800663e:	e01a      	b.n	8006676 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006640:	4b50      	ldr	r3, [pc, #320]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006648:	2b00      	cmp	r3, #0
 800664a:	d116      	bne.n	800667a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006650:	e013      	b.n	800667a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006652:	4b4c      	ldr	r3, [pc, #304]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10f      	bne.n	800667e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800665e:	4b49      	ldr	r3, [pc, #292]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d109      	bne.n	800667e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800666e:	e006      	b.n	800667e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	73fb      	strb	r3, [r7, #15]
      break;
 8006674:	e004      	b.n	8006680 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006676:	bf00      	nop
 8006678:	e002      	b.n	8006680 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800667a:	bf00      	nop
 800667c:	e000      	b.n	8006680 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800667e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006680:	7bfb      	ldrb	r3, [r7, #15]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10d      	bne.n	80066a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006686:	4b3f      	ldr	r3, [pc, #252]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6819      	ldr	r1, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	3b01      	subs	r3, #1
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	430b      	orrs	r3, r1
 800669c:	4939      	ldr	r1, [pc, #228]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d167      	bne.n	8006778 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80066a8:	4b36      	ldr	r3, [pc, #216]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a35      	ldr	r2, [pc, #212]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066b4:	f7fc f8f4 	bl	80028a0 <HAL_GetTick>
 80066b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066ba:	e009      	b.n	80066d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066bc:	f7fc f8f0 	bl	80028a0 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d902      	bls.n	80066d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	73fb      	strb	r3, [r7, #15]
        break;
 80066ce:	e005      	b.n	80066dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066d0:	4b2c      	ldr	r3, [pc, #176]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1ef      	bne.n	80066bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d14a      	bne.n	8006778 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d111      	bne.n	800670c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066e8:	4b26      	ldr	r3, [pc, #152]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80066f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6892      	ldr	r2, [r2, #8]
 80066f8:	0211      	lsls	r1, r2, #8
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	68d2      	ldr	r2, [r2, #12]
 80066fe:	0912      	lsrs	r2, r2, #4
 8006700:	0452      	lsls	r2, r2, #17
 8006702:	430a      	orrs	r2, r1
 8006704:	491f      	ldr	r1, [pc, #124]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006706:	4313      	orrs	r3, r2
 8006708:	614b      	str	r3, [r1, #20]
 800670a:	e011      	b.n	8006730 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800670c:	4b1d      	ldr	r3, [pc, #116]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006714:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6892      	ldr	r2, [r2, #8]
 800671c:	0211      	lsls	r1, r2, #8
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	6912      	ldr	r2, [r2, #16]
 8006722:	0852      	lsrs	r2, r2, #1
 8006724:	3a01      	subs	r2, #1
 8006726:	0652      	lsls	r2, r2, #25
 8006728:	430a      	orrs	r2, r1
 800672a:	4916      	ldr	r1, [pc, #88]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 800672c:	4313      	orrs	r3, r2
 800672e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006730:	4b14      	ldr	r3, [pc, #80]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a13      	ldr	r2, [pc, #76]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800673a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673c:	f7fc f8b0 	bl	80028a0 <HAL_GetTick>
 8006740:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006742:	e009      	b.n	8006758 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006744:	f7fc f8ac 	bl	80028a0 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d902      	bls.n	8006758 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	73fb      	strb	r3, [r7, #15]
          break;
 8006756:	e005      	b.n	8006764 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006758:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0ef      	beq.n	8006744 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800676a:	4b06      	ldr	r3, [pc, #24]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 800676c:	695a      	ldr	r2, [r3, #20]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	4904      	ldr	r1, [pc, #16]	; (8006784 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006774:	4313      	orrs	r3, r2
 8006776:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006778:	7bfb      	ldrb	r3, [r7, #15]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	40021000 	.word	0x40021000

08006788 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e095      	b.n	80068c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d108      	bne.n	80067b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067aa:	d009      	beq.n	80067c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	61da      	str	r2, [r3, #28]
 80067b2:	e005      	b.n	80067c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d106      	bne.n	80067e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7fb fc3e 	bl	800205c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006800:	d902      	bls.n	8006808 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	e002      	b.n	800680e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800680c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006816:	d007      	beq.n	8006828 <HAL_SPI_Init+0xa0>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006820:	d002      	beq.n	8006828 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006838:	431a      	orrs	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	431a      	orrs	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686a:	ea42 0103 	orr.w	r1, r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006872:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	0c1b      	lsrs	r3, r3, #16
 8006884:	f003 0204 	and.w	r2, r3, #4
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006896:	f003 0308 	and.w	r3, r3, #8
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80068a4:	ea42 0103 	orr.w	r1, r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b082      	sub	sp, #8
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e01a      	b.n	8006916 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068f6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7fb fbf3 	bl	80020e4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b088      	sub	sp, #32
 8006922:	af02      	add	r7, sp, #8
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	603b      	str	r3, [r7, #0]
 800692a:	4613      	mov	r3, r2
 800692c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800693a:	d112      	bne.n	8006962 <HAL_SPI_Receive+0x44>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10e      	bne.n	8006962 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2204      	movs	r2, #4
 8006948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800694c:	88fa      	ldrh	r2, [r7, #6]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	4613      	mov	r3, r2
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 f910 	bl	8006b7e <HAL_SPI_TransmitReceive>
 800695e:	4603      	mov	r3, r0
 8006960:	e109      	b.n	8006b76 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006968:	2b01      	cmp	r3, #1
 800696a:	d101      	bne.n	8006970 <HAL_SPI_Receive+0x52>
 800696c:	2302      	movs	r3, #2
 800696e:	e102      	b.n	8006b76 <HAL_SPI_Receive+0x258>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006978:	f7fb ff92 	bl	80028a0 <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b01      	cmp	r3, #1
 8006988:	d002      	beq.n	8006990 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800698a:	2302      	movs	r3, #2
 800698c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800698e:	e0e9      	b.n	8006b64 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d002      	beq.n	800699c <HAL_SPI_Receive+0x7e>
 8006996:	88fb      	ldrh	r3, [r7, #6]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d102      	bne.n	80069a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069a0:	e0e0      	b.n	8006b64 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2204      	movs	r2, #4
 80069a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	88fa      	ldrh	r2, [r7, #6]
 80069ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	88fa      	ldrh	r2, [r7, #6]
 80069c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069ec:	d908      	bls.n	8006a00 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069fc:	605a      	str	r2, [r3, #4]
 80069fe:	e007      	b.n	8006a10 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a0e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a18:	d10f      	bne.n	8006a3a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d007      	beq.n	8006a58 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a60:	d867      	bhi.n	8006b32 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006a62:	e030      	b.n	8006ac6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d117      	bne.n	8006aa2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f103 020c 	add.w	r2, r3, #12
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	7812      	ldrb	r2, [r2, #0]
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006aa0:	e011      	b.n	8006ac6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aa2:	f7fb fefd 	bl	80028a0 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d803      	bhi.n	8006aba <HAL_SPI_Receive+0x19c>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab8:	d102      	bne.n	8006ac0 <HAL_SPI_Receive+0x1a2>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d102      	bne.n	8006ac6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006ac4:	e04e      	b.n	8006b64 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1c8      	bne.n	8006a64 <HAL_SPI_Receive+0x146>
 8006ad2:	e034      	b.n	8006b3e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d115      	bne.n	8006b0e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aec:	b292      	uxth	r2, r2
 8006aee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	1c9a      	adds	r2, r3, #2
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006b0c:	e011      	b.n	8006b32 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b0e:	f7fb fec7 	bl	80028a0 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d803      	bhi.n	8006b26 <HAL_SPI_Receive+0x208>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b24:	d102      	bne.n	8006b2c <HAL_SPI_Receive+0x20e>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d102      	bne.n	8006b32 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b30:	e018      	b.n	8006b64 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1ca      	bne.n	8006ad4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f001 f802 	bl	8007b4c <SPI_EndRxTransaction>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2220      	movs	r2, #32
 8006b52:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]
 8006b60:	e000      	b.n	8006b64 <HAL_SPI_Receive+0x246>
  }

error :
 8006b62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b08a      	sub	sp, #40	; 0x28
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	607a      	str	r2, [r7, #4]
 8006b8a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_SPI_TransmitReceive+0x26>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e1fb      	b.n	8006f9c <HAL_SPI_TransmitReceive+0x41e>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bac:	f7fb fe78 	bl	80028a0 <HAL_GetTick>
 8006bb0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006bb8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006bc0:	887b      	ldrh	r3, [r7, #2]
 8006bc2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006bc4:	887b      	ldrh	r3, [r7, #2]
 8006bc6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006bc8:	7efb      	ldrb	r3, [r7, #27]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d00e      	beq.n	8006bec <HAL_SPI_TransmitReceive+0x6e>
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bd4:	d106      	bne.n	8006be4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d102      	bne.n	8006be4 <HAL_SPI_TransmitReceive+0x66>
 8006bde:	7efb      	ldrb	r3, [r7, #27]
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d003      	beq.n	8006bec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006be4:	2302      	movs	r3, #2
 8006be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006bea:	e1cd      	b.n	8006f88 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d005      	beq.n	8006bfe <HAL_SPI_TransmitReceive+0x80>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <HAL_SPI_TransmitReceive+0x80>
 8006bf8:	887b      	ldrh	r3, [r7, #2]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006c04:	e1c0      	b.n	8006f88 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d003      	beq.n	8006c1a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2205      	movs	r2, #5
 8006c16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	887a      	ldrh	r2, [r7, #2]
 8006c2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	887a      	ldrh	r2, [r7, #2]
 8006c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	887a      	ldrh	r2, [r7, #2]
 8006c40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	887a      	ldrh	r2, [r7, #2]
 8006c46:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c5c:	d802      	bhi.n	8006c64 <HAL_SPI_TransmitReceive+0xe6>
 8006c5e:	8a3b      	ldrh	r3, [r7, #16]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d908      	bls.n	8006c76 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c72:	605a      	str	r2, [r3, #4]
 8006c74:	e007      	b.n	8006c86 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c84:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c90:	2b40      	cmp	r3, #64	; 0x40
 8006c92:	d007      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ca2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cac:	d97c      	bls.n	8006da8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <HAL_SPI_TransmitReceive+0x13e>
 8006cb6:	8a7b      	ldrh	r3, [r7, #18]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d169      	bne.n	8006d90 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	881a      	ldrh	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	1c9a      	adds	r2, r3, #2
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ce0:	e056      	b.n	8006d90 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d11b      	bne.n	8006d28 <HAL_SPI_TransmitReceive+0x1aa>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d016      	beq.n	8006d28 <HAL_SPI_TransmitReceive+0x1aa>
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d113      	bne.n	8006d28 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d04:	881a      	ldrh	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d10:	1c9a      	adds	r2, r3, #2
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d11c      	bne.n	8006d70 <HAL_SPI_TransmitReceive+0x1f2>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d016      	beq.n	8006d70 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68da      	ldr	r2, [r3, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4c:	b292      	uxth	r2, r2
 8006d4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d54:	1c9a      	adds	r2, r3, #2
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d70:	f7fb fd96 	bl	80028a0 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d807      	bhi.n	8006d90 <HAL_SPI_TransmitReceive+0x212>
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d86:	d003      	beq.n	8006d90 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006d8e:	e0fb      	b.n	8006f88 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1a3      	bne.n	8006ce2 <HAL_SPI_TransmitReceive+0x164>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d19d      	bne.n	8006ce2 <HAL_SPI_TransmitReceive+0x164>
 8006da6:	e0df      	b.n	8006f68 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <HAL_SPI_TransmitReceive+0x23a>
 8006db0:	8a7b      	ldrh	r3, [r7, #18]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	f040 80cb 	bne.w	8006f4e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d912      	bls.n	8006de8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc6:	881a      	ldrh	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd2:	1c9a      	adds	r2, r3, #2
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	3b02      	subs	r3, #2
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006de6:	e0b2      	b.n	8006f4e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	330c      	adds	r3, #12
 8006df2:	7812      	ldrb	r2, [r2, #0]
 8006df4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e0e:	e09e      	b.n	8006f4e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d134      	bne.n	8006e88 <HAL_SPI_TransmitReceive+0x30a>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d02f      	beq.n	8006e88 <HAL_SPI_TransmitReceive+0x30a>
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d12c      	bne.n	8006e88 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d912      	bls.n	8006e5e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	881a      	ldrh	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e48:	1c9a      	adds	r2, r3, #2
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	3b02      	subs	r3, #2
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e5c:	e012      	b.n	8006e84 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	330c      	adds	r3, #12
 8006e68:	7812      	ldrb	r2, [r2, #0]
 8006e6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d148      	bne.n	8006f28 <HAL_SPI_TransmitReceive+0x3aa>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d042      	beq.n	8006f28 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d923      	bls.n	8006ef6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	b292      	uxth	r2, r2
 8006eba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec0:	1c9a      	adds	r2, r3, #2
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	3b02      	subs	r3, #2
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d81f      	bhi.n	8006f24 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ef2:	605a      	str	r2, [r3, #4]
 8006ef4:	e016      	b.n	8006f24 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f103 020c 	add.w	r2, r3, #12
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	7812      	ldrb	r2, [r2, #0]
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f24:	2301      	movs	r3, #1
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f28:	f7fb fcba 	bl	80028a0 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d803      	bhi.n	8006f40 <HAL_SPI_TransmitReceive+0x3c2>
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3e:	d102      	bne.n	8006f46 <HAL_SPI_TransmitReceive+0x3c8>
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d103      	bne.n	8006f4e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006f4c:	e01c      	b.n	8006f88 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f47f af5b 	bne.w	8006e10 <HAL_SPI_TransmitReceive+0x292>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f47f af54 	bne.w	8006e10 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 fe45 	bl	8007bfc <SPI_EndRxTxTransaction>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d006      	beq.n	8006f86 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2220      	movs	r2, #32
 8006f82:	661a      	str	r2, [r3, #96]	; 0x60
 8006f84:	e000      	b.n	8006f88 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006f86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3728      	adds	r7, #40	; 0x28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d101      	bne.n	8006fc4 <HAL_SPI_Transmit_IT+0x20>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e072      	b.n	80070aa <HAL_SPI_Transmit_IT+0x106>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <HAL_SPI_Transmit_IT+0x34>
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d102      	bne.n	8006fde <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fdc:	e060      	b.n	80070a0 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d002      	beq.n	8006ff0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8006fea:	2302      	movs	r3, #2
 8006fec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fee:	e057      	b.n	80070a0 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2203      	movs	r2, #3
 8006ff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	88fa      	ldrh	r2, [r7, #6]
 8007008:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	88fa      	ldrh	r2, [r7, #6]
 800700e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007034:	d903      	bls.n	800703e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4a1f      	ldr	r2, [pc, #124]	; (80070b8 <HAL_SPI_Transmit_IT+0x114>)
 800703a:	651a      	str	r2, [r3, #80]	; 0x50
 800703c:	e002      	b.n	8007044 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4a1e      	ldr	r2, [pc, #120]	; (80070bc <HAL_SPI_Transmit_IT+0x118>)
 8007042:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800704c:	d10f      	bne.n	800706e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800705c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800706c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800707c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007088:	2b40      	cmp	r3, #64	; 0x40
 800708a:	d008      	beq.n	800709e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	e000      	b.n	80070a0 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800709e:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80070a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	080078cb 	.word	0x080078cb
 80070bc:	08007885 	.word	0x08007885

080070c0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	4613      	mov	r3, r2
 80070cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d110      	bne.n	80070fc <HAL_SPI_Receive_IT+0x3c>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070e2:	d10b      	bne.n	80070fc <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2204      	movs	r2, #4
 80070e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80070ec:	88fb      	ldrh	r3, [r7, #6]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	68b9      	ldr	r1, [r7, #8]
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 f894 	bl	8007220 <HAL_SPI_TransmitReceive_IT>
 80070f8:	4603      	mov	r3, r0
 80070fa:	e089      	b.n	8007210 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007102:	2b01      	cmp	r3, #1
 8007104:	d101      	bne.n	800710a <HAL_SPI_Receive_IT+0x4a>
 8007106:	2302      	movs	r3, #2
 8007108:	e082      	b.n	8007210 <HAL_SPI_Receive_IT+0x150>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b01      	cmp	r3, #1
 800711c:	d002      	beq.n	8007124 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800711e:	2302      	movs	r3, #2
 8007120:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007122:	e070      	b.n	8007206 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <HAL_SPI_Receive_IT+0x70>
 800712a:	88fb      	ldrh	r3, [r7, #6]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d102      	bne.n	8007136 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007134:	e067      	b.n	8007206 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2204      	movs	r2, #4
 800713a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	88fa      	ldrh	r2, [r7, #6]
 800714e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	88fa      	ldrh	r2, [r7, #6]
 8007156:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800717a:	d90b      	bls.n	8007194 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800718a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4a22      	ldr	r2, [pc, #136]	; (8007218 <HAL_SPI_Receive_IT+0x158>)
 8007190:	64da      	str	r2, [r3, #76]	; 0x4c
 8007192:	e00a      	b.n	80071aa <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071a2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4a1d      	ldr	r2, [pc, #116]	; (800721c <HAL_SPI_Receive_IT+0x15c>)
 80071a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b2:	d10f      	bne.n	80071d4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071d2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80071e2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ee:	2b40      	cmp	r3, #64	; 0x40
 80071f0:	d008      	beq.n	8007204 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	e000      	b.n	8007206 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8007204:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800720e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	08007839 	.word	0x08007839
 800721c:	080077e9 	.word	0x080077e9

08007220 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_SPI_TransmitReceive_IT+0x20>
 800723c:	2302      	movs	r3, #2
 800723e:	e091      	b.n	8007364 <HAL_SPI_TransmitReceive_IT+0x144>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800724e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007256:	7dbb      	ldrb	r3, [r7, #22]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d00d      	beq.n	8007278 <HAL_SPI_TransmitReceive_IT+0x58>
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007262:	d106      	bne.n	8007272 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d102      	bne.n	8007272 <HAL_SPI_TransmitReceive_IT+0x52>
 800726c:	7dbb      	ldrb	r3, [r7, #22]
 800726e:	2b04      	cmp	r3, #4
 8007270:	d002      	beq.n	8007278 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007272:	2302      	movs	r3, #2
 8007274:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007276:	e070      	b.n	800735a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <HAL_SPI_TransmitReceive_IT+0x6a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <HAL_SPI_TransmitReceive_IT+0x6a>
 8007284:	887b      	ldrh	r3, [r7, #2]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d102      	bne.n	8007290 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800728e:	e064      	b.n	800735a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b04      	cmp	r3, #4
 800729a:	d003      	beq.n	80072a4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2205      	movs	r2, #5
 80072a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	887a      	ldrh	r2, [r7, #2]
 80072b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	887a      	ldrh	r2, [r7, #2]
 80072ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	887a      	ldrh	r2, [r7, #2]
 80072c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	887a      	ldrh	r2, [r7, #2]
 80072ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072da:	d906      	bls.n	80072ea <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4a24      	ldr	r2, [pc, #144]	; (8007370 <HAL_SPI_TransmitReceive_IT+0x150>)
 80072e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4a23      	ldr	r2, [pc, #140]	; (8007374 <HAL_SPI_TransmitReceive_IT+0x154>)
 80072e6:	651a      	str	r2, [r3, #80]	; 0x50
 80072e8:	e005      	b.n	80072f6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4a22      	ldr	r2, [pc, #136]	; (8007378 <HAL_SPI_TransmitReceive_IT+0x158>)
 80072ee:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4a22      	ldr	r2, [pc, #136]	; (800737c <HAL_SPI_TransmitReceive_IT+0x15c>)
 80072f4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072fe:	d802      	bhi.n	8007306 <HAL_SPI_TransmitReceive_IT+0xe6>
 8007300:	887b      	ldrh	r3, [r7, #2]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d908      	bls.n	8007318 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007314:	605a      	str	r2, [r3, #4]
 8007316:	e007      	b.n	8007328 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007326:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007336:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	d008      	beq.n	8007358 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	e000      	b.n	800735a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8007358:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007362:	7dfb      	ldrb	r3, [r7, #23]
}
 8007364:	4618      	mov	r0, r3
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	08007723 	.word	0x08007723
 8007374:	08007789 	.word	0x08007789
 8007378:	080075d3 	.word	0x080075d3
 800737c:	08007691 	.word	0x08007691

08007380 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b088      	sub	sp, #32
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	099b      	lsrs	r3, r3, #6
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10f      	bne.n	80073c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	099b      	lsrs	r3, r3, #6
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d004      	beq.n	80073c4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	4798      	blx	r3
    return;
 80073c2:	e0d7      	b.n	8007574 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	085b      	lsrs	r3, r3, #1
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00a      	beq.n	80073e6 <HAL_SPI_IRQHandler+0x66>
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	09db      	lsrs	r3, r3, #7
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d004      	beq.n	80073e6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	4798      	blx	r3
    return;
 80073e4:	e0c6      	b.n	8007574 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	095b      	lsrs	r3, r3, #5
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10c      	bne.n	800740c <HAL_SPI_IRQHandler+0x8c>
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	099b      	lsrs	r3, r3, #6
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d106      	bne.n	800740c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	0a1b      	lsrs	r3, r3, #8
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 80b4 	beq.w	8007574 <HAL_SPI_IRQHandler+0x1f4>
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 80ad 	beq.w	8007574 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	099b      	lsrs	r3, r3, #6
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d023      	beq.n	800746e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b03      	cmp	r3, #3
 8007430:	d011      	beq.n	8007456 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007436:	f043 0204 	orr.w	r2, r3, #4
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	617b      	str	r3, [r7, #20]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	e00b      	b.n	800746e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007456:	2300      	movs	r3, #0
 8007458:	613b      	str	r3, [r7, #16]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	613b      	str	r3, [r7, #16]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	613b      	str	r3, [r7, #16]
 800746a:	693b      	ldr	r3, [r7, #16]
        return;
 800746c:	e082      	b.n	8007574 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	095b      	lsrs	r3, r3, #5
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d014      	beq.n	80074a4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800747e:	f043 0201 	orr.w	r2, r3, #1
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007486:	2300      	movs	r3, #0
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	0a1b      	lsrs	r3, r3, #8
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00c      	beq.n	80074ca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b4:	f043 0208 	orr.w	r2, r3, #8
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80074bc:	2300      	movs	r3, #0
 80074be:	60bb      	str	r3, [r7, #8]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	60bb      	str	r3, [r7, #8]
 80074c8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d04f      	beq.n	8007572 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074e0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d104      	bne.n	80074fe <HAL_SPI_IRQHandler+0x17e>
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d034      	beq.n	8007568 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 0203 	bic.w	r2, r2, #3
 800750c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007512:	2b00      	cmp	r3, #0
 8007514:	d011      	beq.n	800753a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751a:	4a18      	ldr	r2, [pc, #96]	; (800757c <HAL_SPI_IRQHandler+0x1fc>)
 800751c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007522:	4618      	mov	r0, r3
 8007524:	f7fb fc26 	bl	8002d74 <HAL_DMA_Abort_IT>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d005      	beq.n	800753a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007532:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753e:	2b00      	cmp	r3, #0
 8007540:	d016      	beq.n	8007570 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007546:	4a0d      	ldr	r2, [pc, #52]	; (800757c <HAL_SPI_IRQHandler+0x1fc>)
 8007548:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754e:	4618      	mov	r0, r3
 8007550:	f7fb fc10 	bl	8002d74 <HAL_DMA_Abort_IT>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007566:	e003      	b.n	8007570 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f813 	bl	8007594 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800756e:	e000      	b.n	8007572 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007570:	bf00      	nop
    return;
 8007572:	bf00      	nop
  }
}
 8007574:	3720      	adds	r7, #32
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	080075a9 	.word	0x080075a9

08007580 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f7ff ffe5 	bl	8007594 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80075ca:	bf00      	nop
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d923      	bls.n	800762e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68da      	ldr	r2, [r3, #12]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f0:	b292      	uxth	r2, r2
 80075f2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f8:	1c9a      	adds	r2, r3, #2
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b02      	subs	r3, #2
 8007608:	b29a      	uxth	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007616:	b29b      	uxth	r3, r3
 8007618:	2b01      	cmp	r3, #1
 800761a:	d11f      	bne.n	800765c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800762a:	605a      	str	r2, [r3, #4]
 800762c:	e016      	b.n	800765c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f103 020c 	add.w	r2, r3, #12
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	7812      	ldrb	r2, [r2, #0]
 800763c:	b2d2      	uxtb	r2, r2
 800763e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007650:	b29b      	uxth	r3, r3
 8007652:	3b01      	subs	r3, #1
 8007654:	b29a      	uxth	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007662:	b29b      	uxth	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10f      	bne.n	8007688 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007676:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fb00 	bl	8007c88 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d912      	bls.n	80076c8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	881a      	ldrh	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	1c9a      	adds	r2, r3, #2
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b02      	subs	r3, #2
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076c6:	e012      	b.n	80076ee <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	330c      	adds	r3, #12
 80076d2:	7812      	ldrb	r2, [r2, #0]
 80076d4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d110      	bne.n	800771a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007706:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d102      	bne.n	800771a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fab7 	bl	8007c88 <SPI_CloseRxTx_ISR>
    }
  }
}
 800771a:	bf00      	nop
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b082      	sub	sp, #8
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007734:	b292      	uxth	r2, r2
 8007736:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773c:	1c9a      	adds	r2, r3, #2
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007748:	b29b      	uxth	r3, r3
 800774a:	3b01      	subs	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10f      	bne.n	8007780 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800776e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007774:	b29b      	uxth	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d102      	bne.n	8007780 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa84 	bl	8007c88 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007794:	881a      	ldrh	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a0:	1c9a      	adds	r2, r3, #2
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d110      	bne.n	80077e0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077cc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fa54 	bl	8007c88 <SPI_CloseRxTx_ISR>
    }
  }
}
 80077e0:	bf00      	nop
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f103 020c 	add.w	r2, r3, #12
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	7812      	ldrb	r2, [r2, #0]
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007812:	b29b      	uxth	r3, r3
 8007814:	3b01      	subs	r3, #1
 8007816:	b29a      	uxth	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d102      	bne.n	8007830 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fa6e 	bl	8007d0c <SPI_CloseRx_ISR>
  }
}
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	b292      	uxth	r2, r2
 800784c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	1c9a      	adds	r2, r3, #2
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800785e:	b29b      	uxth	r3, r3
 8007860:	3b01      	subs	r3, #1
 8007862:	b29a      	uxth	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007870:	b29b      	uxth	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d102      	bne.n	800787c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fa48 	bl	8007d0c <SPI_CloseRx_ISR>
  }
}
 800787c:	bf00      	nop
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	330c      	adds	r3, #12
 8007896:	7812      	ldrb	r2, [r2, #0]
 8007898:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d102      	bne.n	80078c2 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fa55 	bl	8007d6c <SPI_CloseTx_ISR>
  }
}
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	881a      	ldrh	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e2:	1c9a      	adds	r2, r3, #2
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3b01      	subs	r3, #1
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fa33 	bl	8007d6c <SPI_CloseTx_ISR>
  }
}
 8007906:	bf00      	nop
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
	...

08007910 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	603b      	str	r3, [r7, #0]
 800791c:	4613      	mov	r3, r2
 800791e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007920:	f7fa ffbe 	bl	80028a0 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	1a9b      	subs	r3, r3, r2
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	4413      	add	r3, r2
 800792e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007930:	f7fa ffb6 	bl	80028a0 <HAL_GetTick>
 8007934:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007936:	4b39      	ldr	r3, [pc, #228]	; (8007a1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	015b      	lsls	r3, r3, #5
 800793c:	0d1b      	lsrs	r3, r3, #20
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	fb02 f303 	mul.w	r3, r2, r3
 8007944:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007946:	e054      	b.n	80079f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794e:	d050      	beq.n	80079f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007950:	f7fa ffa6 	bl	80028a0 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	69fa      	ldr	r2, [r7, #28]
 800795c:	429a      	cmp	r2, r3
 800795e:	d902      	bls.n	8007966 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d13d      	bne.n	80079e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007974:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800797e:	d111      	bne.n	80079a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007988:	d004      	beq.n	8007994 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007992:	d107      	bne.n	80079a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ac:	d10f      	bne.n	80079ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e017      	b.n	8007a12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689a      	ldr	r2, [r3, #8]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	4013      	ands	r3, r2
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	bf0c      	ite	eq
 8007a02:	2301      	moveq	r3, #1
 8007a04:	2300      	movne	r3, #0
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	461a      	mov	r2, r3
 8007a0a:	79fb      	ldrb	r3, [r7, #7]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d19b      	bne.n	8007948 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3720      	adds	r7, #32
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000014 	.word	0x20000014

08007a20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08a      	sub	sp, #40	; 0x28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007a32:	f7fa ff35 	bl	80028a0 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	1a9b      	subs	r3, r3, r2
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	4413      	add	r3, r2
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007a42:	f7fa ff2d 	bl	80028a0 <HAL_GetTick>
 8007a46:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	330c      	adds	r3, #12
 8007a4e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a50:	4b3d      	ldr	r3, [pc, #244]	; (8007b48 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	00da      	lsls	r2, r3, #3
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	0d1b      	lsrs	r3, r3, #20
 8007a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a62:	fb02 f303 	mul.w	r3, r2, r3
 8007a66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007a68:	e060      	b.n	8007b2c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007a70:	d107      	bne.n	8007a82 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d104      	bne.n	8007a82 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a88:	d050      	beq.n	8007b2c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a8a:	f7fa ff09 	bl	80028a0 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d902      	bls.n	8007aa0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d13d      	bne.n	8007b1c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007aae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ab8:	d111      	bne.n	8007ade <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ac2:	d004      	beq.n	8007ace <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007acc:	d107      	bne.n	8007ade <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007adc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ae6:	d10f      	bne.n	8007b08 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e010      	b.n	8007b3e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689a      	ldr	r2, [r3, #8]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	4013      	ands	r3, r2
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d196      	bne.n	8007a6a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3728      	adds	r7, #40	; 0x28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000014 	.word	0x20000014

08007b4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af02      	add	r7, sp, #8
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b60:	d111      	bne.n	8007b86 <SPI_EndRxTransaction+0x3a>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b6a:	d004      	beq.n	8007b76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b74:	d107      	bne.n	8007b86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b84:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	2180      	movs	r1, #128	; 0x80
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f7ff febd 	bl	8007910 <SPI_WaitFlagStateUntilTimeout>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d007      	beq.n	8007bac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ba0:	f043 0220 	orr.w	r2, r3, #32
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e023      	b.n	8007bf4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bb4:	d11d      	bne.n	8007bf2 <SPI_EndRxTransaction+0xa6>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bbe:	d004      	beq.n	8007bca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bc8:	d113      	bne.n	8007bf2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f7ff ff22 	bl	8007a20 <SPI_WaitFifoStateUntilTimeout>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d007      	beq.n	8007bf2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be6:	f043 0220 	orr.w	r2, r3, #32
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e000      	b.n	8007bf4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f7ff ff03 	bl	8007a20 <SPI_WaitFifoStateUntilTimeout>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d007      	beq.n	8007c30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c24:	f043 0220 	orr.w	r2, r3, #32
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e027      	b.n	8007c80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	2180      	movs	r1, #128	; 0x80
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f7ff fe68 	bl	8007910 <SPI_WaitFlagStateUntilTimeout>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d007      	beq.n	8007c56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c4a:	f043 0220 	orr.w	r2, r3, #32
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e014      	b.n	8007c80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f7ff fedc 	bl	8007a20 <SPI_WaitFifoStateUntilTimeout>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d007      	beq.n	8007c7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c72:	f043 0220 	orr.w	r2, r3, #32
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e000      	b.n	8007c80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c90:	f7fa fe06 	bl	80028a0 <HAL_GetTick>
 8007c94:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0220 	bic.w	r2, r2, #32
 8007ca4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	2164      	movs	r1, #100	; 0x64
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff ffa6 	bl	8007bfc <SPI_EndRxTxTransaction>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d005      	beq.n	8007cc2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cba:	f043 0220 	orr.w	r2, r3, #32
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d115      	bne.n	8007cf6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b04      	cmp	r3, #4
 8007cd4:	d107      	bne.n	8007ce6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f002 fd9c 	bl	800a81c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007ce4:	e00e      	b.n	8007d04 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7ff fc46 	bl	8007580 <HAL_SPI_TxRxCpltCallback>
}
 8007cf4:	e006      	b.n	8007d04 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff fc48 	bl	8007594 <HAL_SPI_ErrorCallback>
}
 8007d04:	bf00      	nop
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007d22:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007d24:	f7fa fdbc 	bl	80028a0 <HAL_GetTick>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	2164      	movs	r1, #100	; 0x64
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7ff ff0c 	bl	8007b4c <SPI_EndRxTransaction>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d005      	beq.n	8007d46 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d3e:	f043 0220 	orr.w	r2, r3, #32
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d103      	bne.n	8007d5e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f002 fd60 	bl	800a81c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007d5c:	e002      	b.n	8007d64 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff fc18 	bl	8007594 <HAL_SPI_ErrorCallback>
}
 8007d64:	bf00      	nop
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d74:	f7fa fd94 	bl	80028a0 <HAL_GetTick>
 8007d78:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d88:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	2164      	movs	r1, #100	; 0x64
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7ff ff34 	bl	8007bfc <SPI_EndRxTxTransaction>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d005      	beq.n	8007da6 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d9e:	f043 0220 	orr.w	r2, r3, #32
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10a      	bne.n	8007dc4 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dae:	2300      	movs	r3, #0
 8007db0:	60bb      	str	r3, [r7, #8]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	60bb      	str	r3, [r7, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	60bb      	str	r3, [r7, #8]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7ff fbdd 	bl	8007594 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007dda:	e002      	b.n	8007de2 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f002 fd31 	bl	800a844 <HAL_SPI_TxCpltCallback>
}
 8007de2:	bf00      	nop
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b082      	sub	sp, #8
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e040      	b.n	8007e7e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d106      	bne.n	8007e12 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7fa f987 	bl	8002120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2224      	movs	r2, #36	; 0x24
 8007e16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0201 	bic.w	r2, r2, #1
 8007e26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fc63 	bl	80086f4 <UART_SetConfig>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d101      	bne.n	8007e38 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e022      	b.n	8007e7e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 ff0f 	bl	8008c64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689a      	ldr	r2, [r3, #8]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f042 0201 	orr.w	r2, r2, #1
 8007e74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 ff96 	bl	8008da8 <UART_CheckIdleState>
 8007e7c:	4603      	mov	r3, r0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b08a      	sub	sp, #40	; 0x28
 8007e8a:	af02      	add	r7, sp, #8
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	603b      	str	r3, [r7, #0]
 8007e92:	4613      	mov	r3, r2
 8007e94:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	f040 80bf 	bne.w	800801e <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d002      	beq.n	8007eac <HAL_UART_Receive+0x26>
 8007ea6:	88fb      	ldrh	r3, [r7, #6]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e0b7      	b.n	8008020 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d101      	bne.n	8007ebe <HAL_UART_Receive+0x38>
 8007eba:	2302      	movs	r3, #2
 8007ebc:	e0b0      	b.n	8008020 <HAL_UART_Receive+0x19a>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2222      	movs	r2, #34	; 0x22
 8007ed2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007eda:	f7fa fce1 	bl	80028a0 <HAL_GetTick>
 8007ede:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	88fa      	ldrh	r2, [r7, #6]
 8007ee4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	88fa      	ldrh	r2, [r7, #6]
 8007eec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef8:	d10e      	bne.n	8007f18 <HAL_UART_Receive+0x92>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d105      	bne.n	8007f0e <HAL_UART_Receive+0x88>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007f08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f0c:	e02d      	b.n	8007f6a <HAL_UART_Receive+0xe4>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	22ff      	movs	r2, #255	; 0xff
 8007f12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f16:	e028      	b.n	8007f6a <HAL_UART_Receive+0xe4>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10d      	bne.n	8007f3c <HAL_UART_Receive+0xb6>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d104      	bne.n	8007f32 <HAL_UART_Receive+0xac>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	22ff      	movs	r2, #255	; 0xff
 8007f2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f30:	e01b      	b.n	8007f6a <HAL_UART_Receive+0xe4>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	227f      	movs	r2, #127	; 0x7f
 8007f36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f3a:	e016      	b.n	8007f6a <HAL_UART_Receive+0xe4>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f44:	d10d      	bne.n	8007f62 <HAL_UART_Receive+0xdc>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d104      	bne.n	8007f58 <HAL_UART_Receive+0xd2>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	227f      	movs	r2, #127	; 0x7f
 8007f52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f56:	e008      	b.n	8007f6a <HAL_UART_Receive+0xe4>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	223f      	movs	r2, #63	; 0x3f
 8007f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f60:	e003      	b.n	8007f6a <HAL_UART_Receive+0xe4>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f70:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7a:	d108      	bne.n	8007f8e <HAL_UART_Receive+0x108>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d104      	bne.n	8007f8e <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8007f84:	2300      	movs	r3, #0
 8007f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	61bb      	str	r3, [r7, #24]
 8007f8c:	e003      	b.n	8007f96 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007f9e:	e033      	b.n	8008008 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	2120      	movs	r1, #32
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 ff45 	bl	8008e3a <UART_WaitOnFlagUntilTimeout>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e032      	b.n	8008020 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10c      	bne.n	8007fda <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	8a7b      	ldrh	r3, [r7, #18]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	3302      	adds	r3, #2
 8007fd6:	61bb      	str	r3, [r7, #24]
 8007fd8:	e00d      	b.n	8007ff6 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	8a7b      	ldrh	r3, [r7, #18]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	4013      	ands	r3, r2
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	3b01      	subs	r3, #1
 8008000:	b29a      	uxth	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800800e:	b29b      	uxth	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1c5      	bne.n	8007fa0 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2220      	movs	r2, #32
 8008018:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	e000      	b.n	8008020 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800801e:	2302      	movs	r3, #2
  }
}
 8008020:	4618      	mov	r0, r3
 8008022:	3720      	adds	r7, #32
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008028:	b480      	push	{r7}
 800802a:	b08b      	sub	sp, #44	; 0x2c
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800803a:	2b20      	cmp	r3, #32
 800803c:	d156      	bne.n	80080ec <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d002      	beq.n	800804a <HAL_UART_Transmit_IT+0x22>
 8008044:	88fb      	ldrh	r3, [r7, #6]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e04f      	b.n	80080ee <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008054:	2b01      	cmp	r3, #1
 8008056:	d101      	bne.n	800805c <HAL_UART_Transmit_IT+0x34>
 8008058:	2302      	movs	r3, #2
 800805a:	e048      	b.n	80080ee <HAL_UART_Transmit_IT+0xc6>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	88fa      	ldrh	r2, [r7, #6]
 800806e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	88fa      	ldrh	r2, [r7, #6]
 8008076:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2221      	movs	r2, #33	; 0x21
 800808c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008096:	d107      	bne.n	80080a8 <HAL_UART_Transmit_IT+0x80>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d103      	bne.n	80080a8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4a16      	ldr	r2, [pc, #88]	; (80080fc <HAL_UART_Transmit_IT+0xd4>)
 80080a4:	669a      	str	r2, [r3, #104]	; 0x68
 80080a6:	e002      	b.n	80080ae <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4a15      	ldr	r2, [pc, #84]	; (8008100 <HAL_UART_Transmit_IT+0xd8>)
 80080ac:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	e853 3f00 	ldrex	r3, [r3]
 80080c2:	613b      	str	r3, [r7, #16]
   return(result);
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	461a      	mov	r2, r3
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	623b      	str	r3, [r7, #32]
 80080d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d8:	69f9      	ldr	r1, [r7, #28]
 80080da:	6a3a      	ldr	r2, [r7, #32]
 80080dc:	e841 2300 	strex	r3, r2, [r1]
 80080e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e6      	bne.n	80080b6 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	e000      	b.n	80080ee <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80080ec:	2302      	movs	r3, #2
  }
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	372c      	adds	r7, #44	; 0x2c
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	0800916d 	.word	0x0800916d
 8008100:	080090b5 	.word	0x080090b5

08008104 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b0ba      	sub	sp, #232	; 0xe8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800812a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800812e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008132:	4013      	ands	r3, r2
 8008134:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008138:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800813c:	2b00      	cmp	r3, #0
 800813e:	d115      	bne.n	800816c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008144:	f003 0320 	and.w	r3, r3, #32
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00f      	beq.n	800816c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800814c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008150:	f003 0320 	and.w	r3, r3, #32
 8008154:	2b00      	cmp	r3, #0
 8008156:	d009      	beq.n	800816c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 82a6 	beq.w	80086ae <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	4798      	blx	r3
      }
      return;
 800816a:	e2a0      	b.n	80086ae <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800816c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 8117 	beq.w	80083a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	d106      	bne.n	8008190 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008182:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008186:	4b85      	ldr	r3, [pc, #532]	; (800839c <HAL_UART_IRQHandler+0x298>)
 8008188:	4013      	ands	r3, r2
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 810a 	beq.w	80083a4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	d011      	beq.n	80081c0 <HAL_UART_IRQHandler+0xbc>
 800819c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00b      	beq.n	80081c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2201      	movs	r2, #1
 80081ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081b6:	f043 0201 	orr.w	r2, r3, #1
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d011      	beq.n	80081f0 <HAL_UART_IRQHandler+0xec>
 80081cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00b      	beq.n	80081f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2202      	movs	r2, #2
 80081de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081e6:	f043 0204 	orr.w	r2, r3, #4
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d011      	beq.n	8008220 <HAL_UART_IRQHandler+0x11c>
 80081fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00b      	beq.n	8008220 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2204      	movs	r2, #4
 800820e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008216:	f043 0202 	orr.w	r2, r3, #2
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008224:	f003 0308 	and.w	r3, r3, #8
 8008228:	2b00      	cmp	r3, #0
 800822a:	d017      	beq.n	800825c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800822c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008230:	f003 0320 	and.w	r3, r3, #32
 8008234:	2b00      	cmp	r3, #0
 8008236:	d105      	bne.n	8008244 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800823c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00b      	beq.n	800825c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2208      	movs	r2, #8
 800824a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008252:	f043 0208 	orr.w	r2, r3, #8
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800825c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008264:	2b00      	cmp	r3, #0
 8008266:	d012      	beq.n	800828e <HAL_UART_IRQHandler+0x18a>
 8008268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800826c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00c      	beq.n	800828e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800827c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008284:	f043 0220 	orr.w	r2, r3, #32
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 820c 	beq.w	80086b2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800829a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800829e:	f003 0320 	and.w	r3, r3, #32
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00d      	beq.n	80082c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80082a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d007      	beq.n	80082c2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d6:	2b40      	cmp	r3, #64	; 0x40
 80082d8:	d005      	beq.n	80082e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d04f      	beq.n	8008386 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fe6b 	bl	8008fc2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f6:	2b40      	cmp	r3, #64	; 0x40
 80082f8:	d141      	bne.n	800837e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3308      	adds	r3, #8
 8008300:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008308:	e853 3f00 	ldrex	r3, [r3]
 800830c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3308      	adds	r3, #8
 8008322:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008326:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800832a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008332:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800833e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1d9      	bne.n	80082fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834a:	2b00      	cmp	r3, #0
 800834c:	d013      	beq.n	8008376 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008352:	4a13      	ldr	r2, [pc, #76]	; (80083a0 <HAL_UART_IRQHandler+0x29c>)
 8008354:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835a:	4618      	mov	r0, r3
 800835c:	f7fa fd0a 	bl	8002d74 <HAL_DMA_Abort_IT>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d017      	beq.n	8008396 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008370:	4610      	mov	r0, r2
 8008372:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008374:	e00f      	b.n	8008396 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f9a6 	bl	80086c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800837c:	e00b      	b.n	8008396 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f9a2 	bl	80086c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008384:	e007      	b.n	8008396 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f99e 	bl	80086c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008394:	e18d      	b.n	80086b2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008396:	bf00      	nop
    return;
 8008398:	e18b      	b.n	80086b2 <HAL_UART_IRQHandler+0x5ae>
 800839a:	bf00      	nop
 800839c:	04000120 	.word	0x04000120
 80083a0:	08009089 	.word	0x08009089

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	f040 8146 	bne.w	800863a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80083ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b2:	f003 0310 	and.w	r3, r3, #16
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 813f 	beq.w	800863a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80083bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083c0:	f003 0310 	and.w	r3, r3, #16
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 8138 	beq.w	800863a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2210      	movs	r2, #16
 80083d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083dc:	2b40      	cmp	r3, #64	; 0x40
 80083de:	f040 80b4 	bne.w	800854a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 815f 	beq.w	80086b6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008402:	429a      	cmp	r2, r3
 8008404:	f080 8157 	bcs.w	80086b6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800840e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b00      	cmp	r3, #0
 8008420:	f040 8085 	bne.w	800852e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008438:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800843c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	461a      	mov	r2, r3
 800844a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800844e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008452:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008456:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800845a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1da      	bne.n	8008424 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3308      	adds	r3, #8
 8008474:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800847e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008480:	f023 0301 	bic.w	r3, r3, #1
 8008484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3308      	adds	r3, #8
 800848e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008492:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008496:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008498:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800849a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800849e:	e841 2300 	strex	r3, r2, [r1]
 80084a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1e1      	bne.n	800846e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3308      	adds	r3, #8
 80084b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084b4:	e853 3f00 	ldrex	r3, [r3]
 80084b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3308      	adds	r3, #8
 80084ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084d6:	e841 2300 	strex	r3, r2, [r1]
 80084da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1e3      	bne.n	80084aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2220      	movs	r2, #32
 80084e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f6:	e853 3f00 	ldrex	r3, [r3]
 80084fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084fe:	f023 0310 	bic.w	r3, r3, #16
 8008502:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008510:	65bb      	str	r3, [r7, #88]	; 0x58
 8008512:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008514:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008516:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008518:	e841 2300 	strex	r3, r2, [r1]
 800851c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800851e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1e4      	bne.n	80084ee <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008528:	4618      	mov	r0, r3
 800852a:	f7fa fbe5 	bl	8002cf8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800853a:	b29b      	uxth	r3, r3
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	b29b      	uxth	r3, r3
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f8ca 	bl	80086dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008548:	e0b5      	b.n	80086b6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008556:	b29b      	uxth	r3, r3
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008564:	b29b      	uxth	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 80a7 	beq.w	80086ba <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800856c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 80a2 	beq.w	80086ba <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857e:	e853 3f00 	ldrex	r3, [r3]
 8008582:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008586:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800858a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008598:	647b      	str	r3, [r7, #68]	; 0x44
 800859a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800859e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e4      	bne.n	8008576 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3308      	adds	r3, #8
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	623b      	str	r3, [r7, #32]
   return(result);
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	f023 0301 	bic.w	r3, r3, #1
 80085c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3308      	adds	r3, #8
 80085cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085d0:	633a      	str	r2, [r7, #48]	; 0x30
 80085d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d8:	e841 2300 	strex	r3, r2, [r1]
 80085dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1e3      	bne.n	80085ac <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2220      	movs	r2, #32
 80085e8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	60fb      	str	r3, [r7, #12]
   return(result);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0310 	bic.w	r3, r3, #16
 800860a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008618:	61fb      	str	r3, [r7, #28]
 800861a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861c:	69b9      	ldr	r1, [r7, #24]
 800861e:	69fa      	ldr	r2, [r7, #28]
 8008620:	e841 2300 	strex	r3, r2, [r1]
 8008624:	617b      	str	r3, [r7, #20]
   return(result);
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e4      	bne.n	80085f6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800862c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008630:	4619      	mov	r1, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f852 	bl	80086dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008638:	e03f      	b.n	80086ba <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800863a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800863e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00e      	beq.n	8008664 <HAL_UART_IRQHandler+0x560>
 8008646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800864a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d008      	beq.n	8008664 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800865a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fe0f 	bl	8009280 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008662:	e02d      	b.n	80086c0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00e      	beq.n	800868e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008678:	2b00      	cmp	r3, #0
 800867a:	d008      	beq.n	800868e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008680:	2b00      	cmp	r3, #0
 8008682:	d01c      	beq.n	80086be <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	4798      	blx	r3
    }
    return;
 800868c:	e017      	b.n	80086be <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800868e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	d012      	beq.n	80086c0 <HAL_UART_IRQHandler+0x5bc>
 800869a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800869e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00c      	beq.n	80086c0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fdc0 	bl	800922c <UART_EndTransmit_IT>
    return;
 80086ac:	e008      	b.n	80086c0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80086ae:	bf00      	nop
 80086b0:	e006      	b.n	80086c0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80086b2:	bf00      	nop
 80086b4:	e004      	b.n	80086c0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80086b6:	bf00      	nop
 80086b8:	e002      	b.n	80086c0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80086ba:	bf00      	nop
 80086bc:	e000      	b.n	80086c0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80086be:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80086c0:	37e8      	adds	r7, #232	; 0xe8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop

080086c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086f8:	b08a      	sub	sp, #40	; 0x28
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	689a      	ldr	r2, [r3, #8]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	431a      	orrs	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	431a      	orrs	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	4313      	orrs	r3, r2
 800871a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	4ba4      	ldr	r3, [pc, #656]	; (80089b4 <UART_SetConfig+0x2c0>)
 8008724:	4013      	ands	r3, r2
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	6812      	ldr	r2, [r2, #0]
 800872a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800872c:	430b      	orrs	r3, r1
 800872e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a99      	ldr	r2, [pc, #612]	; (80089b8 <UART_SetConfig+0x2c4>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d004      	beq.n	8008760 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875c:	4313      	orrs	r3, r2
 800875e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008770:	430a      	orrs	r2, r1
 8008772:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a90      	ldr	r2, [pc, #576]	; (80089bc <UART_SetConfig+0x2c8>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d126      	bne.n	80087cc <UART_SetConfig+0xd8>
 800877e:	4b90      	ldr	r3, [pc, #576]	; (80089c0 <UART_SetConfig+0x2cc>)
 8008780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008784:	f003 0303 	and.w	r3, r3, #3
 8008788:	2b03      	cmp	r3, #3
 800878a:	d81b      	bhi.n	80087c4 <UART_SetConfig+0xd0>
 800878c:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <UART_SetConfig+0xa0>)
 800878e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008792:	bf00      	nop
 8008794:	080087a5 	.word	0x080087a5
 8008798:	080087b5 	.word	0x080087b5
 800879c:	080087ad 	.word	0x080087ad
 80087a0:	080087bd 	.word	0x080087bd
 80087a4:	2301      	movs	r3, #1
 80087a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087aa:	e116      	b.n	80089da <UART_SetConfig+0x2e6>
 80087ac:	2302      	movs	r3, #2
 80087ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087b2:	e112      	b.n	80089da <UART_SetConfig+0x2e6>
 80087b4:	2304      	movs	r3, #4
 80087b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ba:	e10e      	b.n	80089da <UART_SetConfig+0x2e6>
 80087bc:	2308      	movs	r3, #8
 80087be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087c2:	e10a      	b.n	80089da <UART_SetConfig+0x2e6>
 80087c4:	2310      	movs	r3, #16
 80087c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ca:	e106      	b.n	80089da <UART_SetConfig+0x2e6>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a7c      	ldr	r2, [pc, #496]	; (80089c4 <UART_SetConfig+0x2d0>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d138      	bne.n	8008848 <UART_SetConfig+0x154>
 80087d6:	4b7a      	ldr	r3, [pc, #488]	; (80089c0 <UART_SetConfig+0x2cc>)
 80087d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087dc:	f003 030c 	and.w	r3, r3, #12
 80087e0:	2b0c      	cmp	r3, #12
 80087e2:	d82d      	bhi.n	8008840 <UART_SetConfig+0x14c>
 80087e4:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <UART_SetConfig+0xf8>)
 80087e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ea:	bf00      	nop
 80087ec:	08008821 	.word	0x08008821
 80087f0:	08008841 	.word	0x08008841
 80087f4:	08008841 	.word	0x08008841
 80087f8:	08008841 	.word	0x08008841
 80087fc:	08008831 	.word	0x08008831
 8008800:	08008841 	.word	0x08008841
 8008804:	08008841 	.word	0x08008841
 8008808:	08008841 	.word	0x08008841
 800880c:	08008829 	.word	0x08008829
 8008810:	08008841 	.word	0x08008841
 8008814:	08008841 	.word	0x08008841
 8008818:	08008841 	.word	0x08008841
 800881c:	08008839 	.word	0x08008839
 8008820:	2300      	movs	r3, #0
 8008822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008826:	e0d8      	b.n	80089da <UART_SetConfig+0x2e6>
 8008828:	2302      	movs	r3, #2
 800882a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800882e:	e0d4      	b.n	80089da <UART_SetConfig+0x2e6>
 8008830:	2304      	movs	r3, #4
 8008832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008836:	e0d0      	b.n	80089da <UART_SetConfig+0x2e6>
 8008838:	2308      	movs	r3, #8
 800883a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800883e:	e0cc      	b.n	80089da <UART_SetConfig+0x2e6>
 8008840:	2310      	movs	r3, #16
 8008842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008846:	e0c8      	b.n	80089da <UART_SetConfig+0x2e6>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a5e      	ldr	r2, [pc, #376]	; (80089c8 <UART_SetConfig+0x2d4>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d125      	bne.n	800889e <UART_SetConfig+0x1aa>
 8008852:	4b5b      	ldr	r3, [pc, #364]	; (80089c0 <UART_SetConfig+0x2cc>)
 8008854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008858:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800885c:	2b30      	cmp	r3, #48	; 0x30
 800885e:	d016      	beq.n	800888e <UART_SetConfig+0x19a>
 8008860:	2b30      	cmp	r3, #48	; 0x30
 8008862:	d818      	bhi.n	8008896 <UART_SetConfig+0x1a2>
 8008864:	2b20      	cmp	r3, #32
 8008866:	d00a      	beq.n	800887e <UART_SetConfig+0x18a>
 8008868:	2b20      	cmp	r3, #32
 800886a:	d814      	bhi.n	8008896 <UART_SetConfig+0x1a2>
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <UART_SetConfig+0x182>
 8008870:	2b10      	cmp	r3, #16
 8008872:	d008      	beq.n	8008886 <UART_SetConfig+0x192>
 8008874:	e00f      	b.n	8008896 <UART_SetConfig+0x1a2>
 8008876:	2300      	movs	r3, #0
 8008878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800887c:	e0ad      	b.n	80089da <UART_SetConfig+0x2e6>
 800887e:	2302      	movs	r3, #2
 8008880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008884:	e0a9      	b.n	80089da <UART_SetConfig+0x2e6>
 8008886:	2304      	movs	r3, #4
 8008888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800888c:	e0a5      	b.n	80089da <UART_SetConfig+0x2e6>
 800888e:	2308      	movs	r3, #8
 8008890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008894:	e0a1      	b.n	80089da <UART_SetConfig+0x2e6>
 8008896:	2310      	movs	r3, #16
 8008898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800889c:	e09d      	b.n	80089da <UART_SetConfig+0x2e6>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a4a      	ldr	r2, [pc, #296]	; (80089cc <UART_SetConfig+0x2d8>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d125      	bne.n	80088f4 <UART_SetConfig+0x200>
 80088a8:	4b45      	ldr	r3, [pc, #276]	; (80089c0 <UART_SetConfig+0x2cc>)
 80088aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80088b2:	2bc0      	cmp	r3, #192	; 0xc0
 80088b4:	d016      	beq.n	80088e4 <UART_SetConfig+0x1f0>
 80088b6:	2bc0      	cmp	r3, #192	; 0xc0
 80088b8:	d818      	bhi.n	80088ec <UART_SetConfig+0x1f8>
 80088ba:	2b80      	cmp	r3, #128	; 0x80
 80088bc:	d00a      	beq.n	80088d4 <UART_SetConfig+0x1e0>
 80088be:	2b80      	cmp	r3, #128	; 0x80
 80088c0:	d814      	bhi.n	80088ec <UART_SetConfig+0x1f8>
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <UART_SetConfig+0x1d8>
 80088c6:	2b40      	cmp	r3, #64	; 0x40
 80088c8:	d008      	beq.n	80088dc <UART_SetConfig+0x1e8>
 80088ca:	e00f      	b.n	80088ec <UART_SetConfig+0x1f8>
 80088cc:	2300      	movs	r3, #0
 80088ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088d2:	e082      	b.n	80089da <UART_SetConfig+0x2e6>
 80088d4:	2302      	movs	r3, #2
 80088d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088da:	e07e      	b.n	80089da <UART_SetConfig+0x2e6>
 80088dc:	2304      	movs	r3, #4
 80088de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088e2:	e07a      	b.n	80089da <UART_SetConfig+0x2e6>
 80088e4:	2308      	movs	r3, #8
 80088e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ea:	e076      	b.n	80089da <UART_SetConfig+0x2e6>
 80088ec:	2310      	movs	r3, #16
 80088ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088f2:	e072      	b.n	80089da <UART_SetConfig+0x2e6>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a35      	ldr	r2, [pc, #212]	; (80089d0 <UART_SetConfig+0x2dc>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d12a      	bne.n	8008954 <UART_SetConfig+0x260>
 80088fe:	4b30      	ldr	r3, [pc, #192]	; (80089c0 <UART_SetConfig+0x2cc>)
 8008900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800890c:	d01a      	beq.n	8008944 <UART_SetConfig+0x250>
 800890e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008912:	d81b      	bhi.n	800894c <UART_SetConfig+0x258>
 8008914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008918:	d00c      	beq.n	8008934 <UART_SetConfig+0x240>
 800891a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800891e:	d815      	bhi.n	800894c <UART_SetConfig+0x258>
 8008920:	2b00      	cmp	r3, #0
 8008922:	d003      	beq.n	800892c <UART_SetConfig+0x238>
 8008924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008928:	d008      	beq.n	800893c <UART_SetConfig+0x248>
 800892a:	e00f      	b.n	800894c <UART_SetConfig+0x258>
 800892c:	2300      	movs	r3, #0
 800892e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008932:	e052      	b.n	80089da <UART_SetConfig+0x2e6>
 8008934:	2302      	movs	r3, #2
 8008936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800893a:	e04e      	b.n	80089da <UART_SetConfig+0x2e6>
 800893c:	2304      	movs	r3, #4
 800893e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008942:	e04a      	b.n	80089da <UART_SetConfig+0x2e6>
 8008944:	2308      	movs	r3, #8
 8008946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800894a:	e046      	b.n	80089da <UART_SetConfig+0x2e6>
 800894c:	2310      	movs	r3, #16
 800894e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008952:	e042      	b.n	80089da <UART_SetConfig+0x2e6>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a17      	ldr	r2, [pc, #92]	; (80089b8 <UART_SetConfig+0x2c4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d13a      	bne.n	80089d4 <UART_SetConfig+0x2e0>
 800895e:	4b18      	ldr	r3, [pc, #96]	; (80089c0 <UART_SetConfig+0x2cc>)
 8008960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008964:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008968:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800896c:	d01a      	beq.n	80089a4 <UART_SetConfig+0x2b0>
 800896e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008972:	d81b      	bhi.n	80089ac <UART_SetConfig+0x2b8>
 8008974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008978:	d00c      	beq.n	8008994 <UART_SetConfig+0x2a0>
 800897a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800897e:	d815      	bhi.n	80089ac <UART_SetConfig+0x2b8>
 8008980:	2b00      	cmp	r3, #0
 8008982:	d003      	beq.n	800898c <UART_SetConfig+0x298>
 8008984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008988:	d008      	beq.n	800899c <UART_SetConfig+0x2a8>
 800898a:	e00f      	b.n	80089ac <UART_SetConfig+0x2b8>
 800898c:	2300      	movs	r3, #0
 800898e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008992:	e022      	b.n	80089da <UART_SetConfig+0x2e6>
 8008994:	2302      	movs	r3, #2
 8008996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800899a:	e01e      	b.n	80089da <UART_SetConfig+0x2e6>
 800899c:	2304      	movs	r3, #4
 800899e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089a2:	e01a      	b.n	80089da <UART_SetConfig+0x2e6>
 80089a4:	2308      	movs	r3, #8
 80089a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089aa:	e016      	b.n	80089da <UART_SetConfig+0x2e6>
 80089ac:	2310      	movs	r3, #16
 80089ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089b2:	e012      	b.n	80089da <UART_SetConfig+0x2e6>
 80089b4:	efff69f3 	.word	0xefff69f3
 80089b8:	40008000 	.word	0x40008000
 80089bc:	40013800 	.word	0x40013800
 80089c0:	40021000 	.word	0x40021000
 80089c4:	40004400 	.word	0x40004400
 80089c8:	40004800 	.word	0x40004800
 80089cc:	40004c00 	.word	0x40004c00
 80089d0:	40005000 	.word	0x40005000
 80089d4:	2310      	movs	r3, #16
 80089d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a9f      	ldr	r2, [pc, #636]	; (8008c5c <UART_SetConfig+0x568>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d17a      	bne.n	8008ada <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089e8:	2b08      	cmp	r3, #8
 80089ea:	d824      	bhi.n	8008a36 <UART_SetConfig+0x342>
 80089ec:	a201      	add	r2, pc, #4	; (adr r2, 80089f4 <UART_SetConfig+0x300>)
 80089ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f2:	bf00      	nop
 80089f4:	08008a19 	.word	0x08008a19
 80089f8:	08008a37 	.word	0x08008a37
 80089fc:	08008a21 	.word	0x08008a21
 8008a00:	08008a37 	.word	0x08008a37
 8008a04:	08008a27 	.word	0x08008a27
 8008a08:	08008a37 	.word	0x08008a37
 8008a0c:	08008a37 	.word	0x08008a37
 8008a10:	08008a37 	.word	0x08008a37
 8008a14:	08008a2f 	.word	0x08008a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a18:	f7fd f96e 	bl	8005cf8 <HAL_RCC_GetPCLK1Freq>
 8008a1c:	61f8      	str	r0, [r7, #28]
        break;
 8008a1e:	e010      	b.n	8008a42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a20:	4b8f      	ldr	r3, [pc, #572]	; (8008c60 <UART_SetConfig+0x56c>)
 8008a22:	61fb      	str	r3, [r7, #28]
        break;
 8008a24:	e00d      	b.n	8008a42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a26:	f7fd f8cf 	bl	8005bc8 <HAL_RCC_GetSysClockFreq>
 8008a2a:	61f8      	str	r0, [r7, #28]
        break;
 8008a2c:	e009      	b.n	8008a42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a32:	61fb      	str	r3, [r7, #28]
        break;
 8008a34:	e005      	b.n	8008a42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008a36:	2300      	movs	r3, #0
 8008a38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 80fb 	beq.w	8008c40 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	005b      	lsls	r3, r3, #1
 8008a52:	4413      	add	r3, r2
 8008a54:	69fa      	ldr	r2, [r7, #28]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d305      	bcc.n	8008a66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a60:	69fa      	ldr	r2, [r7, #28]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d903      	bls.n	8008a6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a6c:	e0e8      	b.n	8008c40 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	2200      	movs	r2, #0
 8008a72:	461c      	mov	r4, r3
 8008a74:	4615      	mov	r5, r2
 8008a76:	f04f 0200 	mov.w	r2, #0
 8008a7a:	f04f 0300 	mov.w	r3, #0
 8008a7e:	022b      	lsls	r3, r5, #8
 8008a80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008a84:	0222      	lsls	r2, r4, #8
 8008a86:	68f9      	ldr	r1, [r7, #12]
 8008a88:	6849      	ldr	r1, [r1, #4]
 8008a8a:	0849      	lsrs	r1, r1, #1
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	4688      	mov	r8, r1
 8008a90:	4681      	mov	r9, r0
 8008a92:	eb12 0a08 	adds.w	sl, r2, r8
 8008a96:	eb43 0b09 	adc.w	fp, r3, r9
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	603b      	str	r3, [r7, #0]
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aa8:	4650      	mov	r0, sl
 8008aaa:	4659      	mov	r1, fp
 8008aac:	f7f8 f87c 	bl	8000ba8 <__aeabi_uldivmod>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008abe:	d308      	bcc.n	8008ad2 <UART_SetConfig+0x3de>
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ac6:	d204      	bcs.n	8008ad2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	60da      	str	r2, [r3, #12]
 8008ad0:	e0b6      	b.n	8008c40 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008ad8:	e0b2      	b.n	8008c40 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	69db      	ldr	r3, [r3, #28]
 8008ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ae2:	d15e      	bne.n	8008ba2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008ae4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ae8:	2b08      	cmp	r3, #8
 8008aea:	d828      	bhi.n	8008b3e <UART_SetConfig+0x44a>
 8008aec:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <UART_SetConfig+0x400>)
 8008aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af2:	bf00      	nop
 8008af4:	08008b19 	.word	0x08008b19
 8008af8:	08008b21 	.word	0x08008b21
 8008afc:	08008b29 	.word	0x08008b29
 8008b00:	08008b3f 	.word	0x08008b3f
 8008b04:	08008b2f 	.word	0x08008b2f
 8008b08:	08008b3f 	.word	0x08008b3f
 8008b0c:	08008b3f 	.word	0x08008b3f
 8008b10:	08008b3f 	.word	0x08008b3f
 8008b14:	08008b37 	.word	0x08008b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b18:	f7fd f8ee 	bl	8005cf8 <HAL_RCC_GetPCLK1Freq>
 8008b1c:	61f8      	str	r0, [r7, #28]
        break;
 8008b1e:	e014      	b.n	8008b4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b20:	f7fd f900 	bl	8005d24 <HAL_RCC_GetPCLK2Freq>
 8008b24:	61f8      	str	r0, [r7, #28]
        break;
 8008b26:	e010      	b.n	8008b4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b28:	4b4d      	ldr	r3, [pc, #308]	; (8008c60 <UART_SetConfig+0x56c>)
 8008b2a:	61fb      	str	r3, [r7, #28]
        break;
 8008b2c:	e00d      	b.n	8008b4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b2e:	f7fd f84b 	bl	8005bc8 <HAL_RCC_GetSysClockFreq>
 8008b32:	61f8      	str	r0, [r7, #28]
        break;
 8008b34:	e009      	b.n	8008b4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b3a:	61fb      	str	r3, [r7, #28]
        break;
 8008b3c:	e005      	b.n	8008b4a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d077      	beq.n	8008c40 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	005a      	lsls	r2, r3, #1
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	085b      	lsrs	r3, r3, #1
 8008b5a:	441a      	add	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	2b0f      	cmp	r3, #15
 8008b6a:	d916      	bls.n	8008b9a <UART_SetConfig+0x4a6>
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b72:	d212      	bcs.n	8008b9a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	f023 030f 	bic.w	r3, r3, #15
 8008b7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	085b      	lsrs	r3, r3, #1
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	f003 0307 	and.w	r3, r3, #7
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	8afb      	ldrh	r3, [r7, #22]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	8afa      	ldrh	r2, [r7, #22]
 8008b96:	60da      	str	r2, [r3, #12]
 8008b98:	e052      	b.n	8008c40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008ba0:	e04e      	b.n	8008c40 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ba2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ba6:	2b08      	cmp	r3, #8
 8008ba8:	d827      	bhi.n	8008bfa <UART_SetConfig+0x506>
 8008baa:	a201      	add	r2, pc, #4	; (adr r2, 8008bb0 <UART_SetConfig+0x4bc>)
 8008bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb0:	08008bd5 	.word	0x08008bd5
 8008bb4:	08008bdd 	.word	0x08008bdd
 8008bb8:	08008be5 	.word	0x08008be5
 8008bbc:	08008bfb 	.word	0x08008bfb
 8008bc0:	08008beb 	.word	0x08008beb
 8008bc4:	08008bfb 	.word	0x08008bfb
 8008bc8:	08008bfb 	.word	0x08008bfb
 8008bcc:	08008bfb 	.word	0x08008bfb
 8008bd0:	08008bf3 	.word	0x08008bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bd4:	f7fd f890 	bl	8005cf8 <HAL_RCC_GetPCLK1Freq>
 8008bd8:	61f8      	str	r0, [r7, #28]
        break;
 8008bda:	e014      	b.n	8008c06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bdc:	f7fd f8a2 	bl	8005d24 <HAL_RCC_GetPCLK2Freq>
 8008be0:	61f8      	str	r0, [r7, #28]
        break;
 8008be2:	e010      	b.n	8008c06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008be4:	4b1e      	ldr	r3, [pc, #120]	; (8008c60 <UART_SetConfig+0x56c>)
 8008be6:	61fb      	str	r3, [r7, #28]
        break;
 8008be8:	e00d      	b.n	8008c06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bea:	f7fc ffed 	bl	8005bc8 <HAL_RCC_GetSysClockFreq>
 8008bee:	61f8      	str	r0, [r7, #28]
        break;
 8008bf0:	e009      	b.n	8008c06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bf6:	61fb      	str	r3, [r7, #28]
        break;
 8008bf8:	e005      	b.n	8008c06 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008c04:	bf00      	nop
    }

    if (pclk != 0U)
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d019      	beq.n	8008c40 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	085a      	lsrs	r2, r3, #1
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	441a      	add	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c1e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	2b0f      	cmp	r3, #15
 8008c24:	d909      	bls.n	8008c3a <UART_SetConfig+0x546>
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c2c:	d205      	bcs.n	8008c3a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	60da      	str	r2, [r3, #12]
 8008c38:	e002      	b.n	8008c40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008c4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3728      	adds	r7, #40	; 0x28
 8008c54:	46bd      	mov	sp, r7
 8008c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c5a:	bf00      	nop
 8008c5c:	40008000 	.word	0x40008000
 8008c60:	00f42400 	.word	0x00f42400

08008c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00a      	beq.n	8008c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00a      	beq.n	8008cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	430a      	orrs	r2, r1
 8008cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb4:	f003 0304 	and.w	r3, r3, #4
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00a      	beq.n	8008cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	f003 0308 	and.w	r3, r3, #8
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00a      	beq.n	8008cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf8:	f003 0310 	and.w	r3, r3, #16
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00a      	beq.n	8008d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	430a      	orrs	r2, r1
 8008d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1a:	f003 0320 	and.w	r3, r3, #32
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00a      	beq.n	8008d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	430a      	orrs	r2, r1
 8008d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d01a      	beq.n	8008d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	430a      	orrs	r2, r1
 8008d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d62:	d10a      	bne.n	8008d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00a      	beq.n	8008d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	605a      	str	r2, [r3, #4]
  }
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af02      	add	r7, sp, #8
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008db8:	f7f9 fd72 	bl	80028a0 <HAL_GetTick>
 8008dbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 0308 	and.w	r3, r3, #8
 8008dc8:	2b08      	cmp	r3, #8
 8008dca:	d10e      	bne.n	8008dea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f82d 	bl	8008e3a <UART_WaitOnFlagUntilTimeout>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e023      	b.n	8008e32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0304 	and.w	r3, r3, #4
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d10e      	bne.n	8008e16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f817 	bl	8008e3a <UART_WaitOnFlagUntilTimeout>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e00d      	b.n	8008e32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b09c      	sub	sp, #112	; 0x70
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	60f8      	str	r0, [r7, #12]
 8008e42:	60b9      	str	r1, [r7, #8]
 8008e44:	603b      	str	r3, [r7, #0]
 8008e46:	4613      	mov	r3, r2
 8008e48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e4a:	e0a5      	b.n	8008f98 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e52:	f000 80a1 	beq.w	8008f98 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e56:	f7f9 fd23 	bl	80028a0 <HAL_GetTick>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d302      	bcc.n	8008e6c <UART_WaitOnFlagUntilTimeout+0x32>
 8008e66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d13e      	bne.n	8008eea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e80:	667b      	str	r3, [r7, #100]	; 0x64
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e8c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e6      	bne.n	8008e6c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb0:	f023 0301 	bic.w	r3, r3, #1
 8008eb4:	663b      	str	r3, [r7, #96]	; 0x60
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3308      	adds	r3, #8
 8008ebc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ebe:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ec0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1e5      	bne.n	8008e9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2220      	movs	r2, #32
 8008ed6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2220      	movs	r2, #32
 8008edc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e067      	b.n	8008fba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0304 	and.w	r3, r3, #4
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d04f      	beq.n	8008f98 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f06:	d147      	bne.n	8008f98 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f10:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1a:	e853 3f00 	ldrex	r3, [r3]
 8008f1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f30:	637b      	str	r3, [r7, #52]	; 0x34
 8008f32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f38:	e841 2300 	strex	r3, r2, [r1]
 8008f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1e6      	bne.n	8008f12 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	3308      	adds	r3, #8
 8008f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	e853 3f00 	ldrex	r3, [r3]
 8008f52:	613b      	str	r3, [r7, #16]
   return(result);
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f023 0301 	bic.w	r3, r3, #1
 8008f5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3308      	adds	r3, #8
 8008f62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f64:	623a      	str	r2, [r7, #32]
 8008f66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f68:	69f9      	ldr	r1, [r7, #28]
 8008f6a:	6a3a      	ldr	r2, [r7, #32]
 8008f6c:	e841 2300 	strex	r3, r2, [r1]
 8008f70:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1e5      	bne.n	8008f44 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2220      	movs	r2, #32
 8008f7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2220      	movs	r2, #32
 8008f82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2220      	movs	r2, #32
 8008f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e010      	b.n	8008fba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	69da      	ldr	r2, [r3, #28]
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	bf0c      	ite	eq
 8008fa8:	2301      	moveq	r3, #1
 8008faa:	2300      	movne	r3, #0
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	461a      	mov	r2, r3
 8008fb0:	79fb      	ldrb	r3, [r7, #7]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	f43f af4a 	beq.w	8008e4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3770      	adds	r7, #112	; 0x70
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	b095      	sub	sp, #84	; 0x54
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd2:	e853 3f00 	ldrex	r3, [r3]
 8008fd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8008fea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ff0:	e841 2300 	strex	r3, r2, [r1]
 8008ff4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e6      	bne.n	8008fca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3308      	adds	r3, #8
 8009002:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	e853 3f00 	ldrex	r3, [r3]
 800900a:	61fb      	str	r3, [r7, #28]
   return(result);
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	f023 0301 	bic.w	r3, r3, #1
 8009012:	64bb      	str	r3, [r7, #72]	; 0x48
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3308      	adds	r3, #8
 800901a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800901c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800901e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009024:	e841 2300 	strex	r3, r2, [r1]
 8009028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e5      	bne.n	8008ffc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009034:	2b01      	cmp	r3, #1
 8009036:	d118      	bne.n	800906a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	e853 3f00 	ldrex	r3, [r3]
 8009044:	60bb      	str	r3, [r7, #8]
   return(result);
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f023 0310 	bic.w	r3, r3, #16
 800904c:	647b      	str	r3, [r7, #68]	; 0x44
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009056:	61bb      	str	r3, [r7, #24]
 8009058:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905a:	6979      	ldr	r1, [r7, #20]
 800905c:	69ba      	ldr	r2, [r7, #24]
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	613b      	str	r3, [r7, #16]
   return(result);
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e6      	bne.n	8009038 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2220      	movs	r2, #32
 800906e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800907c:	bf00      	nop
 800907e:	3754      	adds	r7, #84	; 0x54
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009094:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f7ff fb0e 	bl	80086c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090ac:	bf00      	nop
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b08f      	sub	sp, #60	; 0x3c
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090c0:	2b21      	cmp	r3, #33	; 0x21
 80090c2:	d14d      	bne.n	8009160 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d132      	bne.n	8009136 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090e4:	637b      	str	r3, [r7, #52]	; 0x34
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090f0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1e6      	bne.n	80090d0 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	e853 3f00 	ldrex	r3, [r3]
 800910e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009116:	633b      	str	r3, [r7, #48]	; 0x30
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	461a      	mov	r2, r3
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	61bb      	str	r3, [r7, #24]
 8009122:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	6979      	ldr	r1, [r7, #20]
 8009126:	69ba      	ldr	r2, [r7, #24]
 8009128:	e841 2300 	strex	r3, r2, [r1]
 800912c:	613b      	str	r3, [r7, #16]
   return(result);
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e6      	bne.n	8009102 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009134:	e014      	b.n	8009160 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800913a:	781a      	ldrb	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	b292      	uxth	r2, r2
 8009142:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009154:	b29b      	uxth	r3, r3
 8009156:	3b01      	subs	r3, #1
 8009158:	b29a      	uxth	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009160:	bf00      	nop
 8009162:	373c      	adds	r7, #60	; 0x3c
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800916c:	b480      	push	{r7}
 800916e:	b091      	sub	sp, #68	; 0x44
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009178:	2b21      	cmp	r3, #33	; 0x21
 800917a:	d151      	bne.n	8009220 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009182:	b29b      	uxth	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	d132      	bne.n	80091ee <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009190:	e853 3f00 	ldrex	r3, [r3]
 8009194:	623b      	str	r3, [r7, #32]
   return(result);
 8009196:	6a3b      	ldr	r3, [r7, #32]
 8009198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800919c:	63bb      	str	r3, [r7, #56]	; 0x38
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	633b      	str	r3, [r7, #48]	; 0x30
 80091a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ae:	e841 2300 	strex	r3, r2, [r1]
 80091b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1e6      	bne.n	8009188 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	e853 3f00 	ldrex	r3, [r3]
 80091c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ce:	637b      	str	r3, [r7, #52]	; 0x34
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	461a      	mov	r2, r3
 80091d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d8:	61fb      	str	r3, [r7, #28]
 80091da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091dc:	69b9      	ldr	r1, [r7, #24]
 80091de:	69fa      	ldr	r2, [r7, #28]
 80091e0:	e841 2300 	strex	r3, r2, [r1]
 80091e4:	617b      	str	r3, [r7, #20]
   return(result);
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1e6      	bne.n	80091ba <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80091ec:	e018      	b.n	8009220 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80091f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f6:	881a      	ldrh	r2, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009200:	b292      	uxth	r2, r2
 8009202:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009208:	1c9a      	adds	r2, r3, #2
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009214:	b29b      	uxth	r3, r3
 8009216:	3b01      	subs	r3, #1
 8009218:	b29a      	uxth	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009220:	bf00      	nop
 8009222:	3744      	adds	r7, #68	; 0x44
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b088      	sub	sp, #32
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	e853 3f00 	ldrex	r3, [r3]
 8009240:	60bb      	str	r3, [r7, #8]
   return(result);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009248:	61fb      	str	r3, [r7, #28]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	61bb      	str	r3, [r7, #24]
 8009254:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	6979      	ldr	r1, [r7, #20]
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	613b      	str	r3, [r7, #16]
   return(result);
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e6      	bne.n	8009234 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2220      	movs	r2, #32
 800926a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7f8 fdf8 	bl	8001e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009278:	bf00      	nop
 800927a:	3720      	adds	r7, #32
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800929e:	79fb      	ldrb	r3, [r7, #7]
 80092a0:	2b2f      	cmp	r3, #47	; 0x2f
 80092a2:	d906      	bls.n	80092b2 <Hex2Num+0x1e>
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	2b39      	cmp	r3, #57	; 0x39
 80092a8:	d803      	bhi.n	80092b2 <Hex2Num+0x1e>
        return a - '0';
 80092aa:	79fb      	ldrb	r3, [r7, #7]
 80092ac:	3b30      	subs	r3, #48	; 0x30
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	e014      	b.n	80092dc <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	2b60      	cmp	r3, #96	; 0x60
 80092b6:	d906      	bls.n	80092c6 <Hex2Num+0x32>
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	2b66      	cmp	r3, #102	; 0x66
 80092bc:	d803      	bhi.n	80092c6 <Hex2Num+0x32>
        return (a - 'a') + 10;
 80092be:	79fb      	ldrb	r3, [r7, #7]
 80092c0:	3b57      	subs	r3, #87	; 0x57
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	e00a      	b.n	80092dc <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80092c6:	79fb      	ldrb	r3, [r7, #7]
 80092c8:	2b40      	cmp	r3, #64	; 0x40
 80092ca:	d906      	bls.n	80092da <Hex2Num+0x46>
 80092cc:	79fb      	ldrb	r3, [r7, #7]
 80092ce:	2b46      	cmp	r3, #70	; 0x46
 80092d0:	d803      	bhi.n	80092da <Hex2Num+0x46>
        return (a - 'A') + 10;
 80092d2:	79fb      	ldrb	r3, [r7, #7]
 80092d4:	3b37      	subs	r3, #55	; 0x37
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	e000      	b.n	80092dc <Hex2Num+0x48>
    }

    return 0;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80092fa:	e012      	b.n	8009322 <ParseHexNumber+0x3a>
        sum <<= 4;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	011b      	lsls	r3, r3, #4
 8009300:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	4618      	mov	r0, r3
 8009308:	f7ff ffc4 	bl	8009294 <Hex2Num>
 800930c:	4603      	mov	r3, r0
 800930e:	461a      	mov	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	60fb      	str	r3, [r7, #12]
        ptr++;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	3301      	adds	r3, #1
 800931a:	607b      	str	r3, [r7, #4]
        i++;
 800931c:	7afb      	ldrb	r3, [r7, #11]
 800931e:	3301      	adds	r3, #1
 8009320:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	2b2f      	cmp	r3, #47	; 0x2f
 8009328:	d903      	bls.n	8009332 <ParseHexNumber+0x4a>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	2b39      	cmp	r3, #57	; 0x39
 8009330:	d9e4      	bls.n	80092fc <ParseHexNumber+0x14>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	2b60      	cmp	r3, #96	; 0x60
 8009338:	d903      	bls.n	8009342 <ParseHexNumber+0x5a>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b66      	cmp	r3, #102	; 0x66
 8009340:	d9dc      	bls.n	80092fc <ParseHexNumber+0x14>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	2b40      	cmp	r3, #64	; 0x40
 8009348:	d903      	bls.n	8009352 <ParseHexNumber+0x6a>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	2b46      	cmp	r3, #70	; 0x46
 8009350:	d9d4      	bls.n	80092fc <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <ParseHexNumber+0x76>
        *cnt = i;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	7afa      	ldrb	r2, [r7, #11]
 800935c:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 800935e:	68fb      	ldr	r3, [r7, #12]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	73fb      	strb	r3, [r7, #15]
 8009376:	2300      	movs	r3, #0
 8009378:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 800937a:	2300      	movs	r3, #0
 800937c:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	2b2d      	cmp	r3, #45	; 0x2d
 8009384:	d119      	bne.n	80093ba <ParseNumber+0x52>
        minus = 1;
 8009386:	2301      	movs	r3, #1
 8009388:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	3301      	adds	r3, #1
 800938e:	607b      	str	r3, [r7, #4]
        i++;
 8009390:	7bbb      	ldrb	r3, [r7, #14]
 8009392:	3301      	adds	r3, #1
 8009394:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009396:	e010      	b.n	80093ba <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	4613      	mov	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	461a      	mov	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	3b30      	subs	r3, #48	; 0x30
 80093aa:	4413      	add	r3, r2
 80093ac:	60bb      	str	r3, [r7, #8]
        ptr++;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	3301      	adds	r3, #1
 80093b2:	607b      	str	r3, [r7, #4]
        i++;
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
 80093b6:	3301      	adds	r3, #1
 80093b8:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	2b2f      	cmp	r3, #47	; 0x2f
 80093c0:	d903      	bls.n	80093ca <ParseNumber+0x62>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	2b39      	cmp	r3, #57	; 0x39
 80093c8:	d9e6      	bls.n	8009398 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d002      	beq.n	80093d6 <ParseNumber+0x6e>
        *cnt = i;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	7bba      	ldrb	r2, [r7, #14]
 80093d4:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d002      	beq.n	80093e2 <ParseNumber+0x7a>
        return 0 - sum;
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	425b      	negs	r3, r3
 80093e0:	e000      	b.n	80093e4 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 80093e2:	68bb      	ldr	r3, [r7, #8]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80093fa:	2300      	movs	r3, #0
 80093fc:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80093fe:	e019      	b.n	8009434 <ParseMAC+0x44>
    hexcnt = 1;
 8009400:	2301      	movs	r3, #1
 8009402:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2b3a      	cmp	r3, #58	; 0x3a
 800940a:	d00e      	beq.n	800942a <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 800940c:	f107 030e 	add.w	r3, r7, #14
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7ff ff68 	bl	80092e8 <ParseHexNumber>
 8009418:	4601      	mov	r1, r0
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	1c5a      	adds	r2, r3, #1
 800941e:	73fa      	strb	r2, [r7, #15]
 8009420:	461a      	mov	r2, r3
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	4413      	add	r3, r2
 8009426:	b2ca      	uxtb	r2, r1
 8009428:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800942a:	7bbb      	ldrb	r3, [r7, #14]
 800942c:	461a      	mov	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4413      	add	r3, r2
 8009432:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1e1      	bne.n	8009400 <ParseMAC+0x10>
  }
}
 800943c:	bf00      	nop
 800943e:	bf00      	nop
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009450:	2300      	movs	r3, #0
 8009452:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009454:	e019      	b.n	800948a <ParseIP+0x44>
    hexcnt = 1;
 8009456:	2301      	movs	r3, #1
 8009458:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	2b2e      	cmp	r3, #46	; 0x2e
 8009460:	d00e      	beq.n	8009480 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8009462:	f107 030e 	add.w	r3, r7, #14
 8009466:	4619      	mov	r1, r3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f7ff ff7d 	bl	8009368 <ParseNumber>
 800946e:	4601      	mov	r1, r0
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	1c5a      	adds	r2, r3, #1
 8009474:	73fa      	strb	r2, [r7, #15]
 8009476:	461a      	mov	r2, r3
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	4413      	add	r3, r2
 800947c:	b2ca      	uxtb	r2, r1
 800947e:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	461a      	mov	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4413      	add	r3, r2
 8009488:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1e1      	bne.n	8009456 <ParseIP+0x10>
  }
}
 8009492:	bf00      	nop
 8009494:	bf00      	nop
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 80094a6:	2300      	movs	r3, #0
 80094a8:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	3302      	adds	r3, #2
 80094ae:	4934      	ldr	r1, [pc, #208]	; (8009580 <AT_ParseInfo+0xe4>)
 80094b0:	4618      	mov	r0, r3
 80094b2:	f009 fa97 	bl	80129e4 <strtok>
 80094b6:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 80094b8:	e05a      	b.n	8009570 <AT_ParseInfo+0xd4>
    switch (num++) {
 80094ba:	7afb      	ldrb	r3, [r7, #11]
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	72fa      	strb	r2, [r7, #11]
 80094c0:	2b06      	cmp	r3, #6
 80094c2:	d84f      	bhi.n	8009564 <AT_ParseInfo+0xc8>
 80094c4:	a201      	add	r2, pc, #4	; (adr r2, 80094cc <AT_ParseInfo+0x30>)
 80094c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ca:	bf00      	nop
 80094cc:	080094e9 	.word	0x080094e9
 80094d0:	080094f7 	.word	0x080094f7
 80094d4:	08009507 	.word	0x08009507
 80094d8:	08009517 	.word	0x08009517
 80094dc:	08009527 	.word	0x08009527
 80094e0:	08009537 	.word	0x08009537
 80094e4:	0800954b 	.word	0x0800954b
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2220      	movs	r2, #32
 80094ec:	68f9      	ldr	r1, [r7, #12]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f009 fa4f 	bl	8012992 <strncpy>
      break;
 80094f4:	e037      	b.n	8009566 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	3320      	adds	r3, #32
 80094fa:	2218      	movs	r2, #24
 80094fc:	68f9      	ldr	r1, [r7, #12]
 80094fe:	4618      	mov	r0, r3
 8009500:	f009 fa47 	bl	8012992 <strncpy>
      break;
 8009504:	e02f      	b.n	8009566 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	3338      	adds	r3, #56	; 0x38
 800950a:	2210      	movs	r2, #16
 800950c:	68f9      	ldr	r1, [r7, #12]
 800950e:	4618      	mov	r0, r3
 8009510:	f009 fa3f 	bl	8012992 <strncpy>
      break;
 8009514:	e027      	b.n	8009566 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3348      	adds	r3, #72	; 0x48
 800951a:	2210      	movs	r2, #16
 800951c:	68f9      	ldr	r1, [r7, #12]
 800951e:	4618      	mov	r0, r3
 8009520:	f009 fa37 	bl	8012992 <strncpy>
      break;
 8009524:	e01f      	b.n	8009566 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	3358      	adds	r3, #88	; 0x58
 800952a:	2210      	movs	r2, #16
 800952c:	68f9      	ldr	r1, [r7, #12]
 800952e:	4618      	mov	r0, r3
 8009530:	f009 fa2f 	bl	8012992 <strncpy>
      break;
 8009534:	e017      	b.n	8009566 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8009536:	2100      	movs	r1, #0
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f7ff ff15 	bl	8009368 <ParseNumber>
 800953e:	4603      	mov	r3, r0
 8009540:	461a      	mov	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8009548:	e00d      	b.n	8009566 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800954a:	490e      	ldr	r1, [pc, #56]	; (8009584 <AT_ParseInfo+0xe8>)
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f009 fa49 	bl	80129e4 <strtok>
 8009552:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	3368      	adds	r3, #104	; 0x68
 8009558:	2220      	movs	r2, #32
 800955a:	68f9      	ldr	r1, [r7, #12]
 800955c:	4618      	mov	r0, r3
 800955e:	f009 fa18 	bl	8012992 <strncpy>
      break;
 8009562:	e000      	b.n	8009566 <AT_ParseInfo+0xca>

    default: break;
 8009564:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8009566:	4906      	ldr	r1, [pc, #24]	; (8009580 <AT_ParseInfo+0xe4>)
 8009568:	2000      	movs	r0, #0
 800956a:	f009 fa3b 	bl	80129e4 <strtok>
 800956e:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1a1      	bne.n	80094ba <AT_ParseInfo+0x1e>
  }
}
 8009576:	bf00      	nop
 8009578:	bf00      	nop
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	08015304 	.word	0x08015304
 8009584:	08015308 	.word	0x08015308

08009588 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	3302      	adds	r3, #2
 800959a:	4952      	ldr	r1, [pc, #328]	; (80096e4 <AT_ParseConnSettings+0x15c>)
 800959c:	4618      	mov	r0, r3
 800959e:	f009 fa21 	bl	80129e4 <strtok>
 80095a2:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 80095a4:	e095      	b.n	80096d2 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 80095a6:	7bfb      	ldrb	r3, [r7, #15]
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	73fa      	strb	r2, [r7, #15]
 80095ac:	2b0b      	cmp	r3, #11
 80095ae:	d87f      	bhi.n	80096b0 <AT_ParseConnSettings+0x128>
 80095b0:	a201      	add	r2, pc, #4	; (adr r2, 80095b8 <AT_ParseConnSettings+0x30>)
 80095b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b6:	bf00      	nop
 80095b8:	080095e9 	.word	0x080095e9
 80095bc:	080095f7 	.word	0x080095f7
 80095c0:	08009607 	.word	0x08009607
 80095c4:	0800961b 	.word	0x0800961b
 80095c8:	0800962f 	.word	0x0800962f
 80095cc:	08009643 	.word	0x08009643
 80095d0:	08009651 	.word	0x08009651
 80095d4:	0800965f 	.word	0x0800965f
 80095d8:	0800966d 	.word	0x0800966d
 80095dc:	0800967b 	.word	0x0800967b
 80095e0:	08009689 	.word	0x08009689
 80095e4:	0800969d 	.word	0x0800969d
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2221      	movs	r2, #33	; 0x21
 80095ec:	68b9      	ldr	r1, [r7, #8]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f009 f9cf 	bl	8012992 <strncpy>
      break;
 80095f4:	e05d      	b.n	80096b2 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	3321      	adds	r3, #33	; 0x21
 80095fa:	2221      	movs	r2, #33	; 0x21
 80095fc:	68b9      	ldr	r1, [r7, #8]
 80095fe:	4618      	mov	r0, r3
 8009600:	f009 f9c7 	bl	8012992 <strncpy>
      break;
 8009604:	e055      	b.n	80096b2 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8009606:	2100      	movs	r1, #0
 8009608:	68b8      	ldr	r0, [r7, #8]
 800960a:	f7ff fead 	bl	8009368 <ParseNumber>
 800960e:	4603      	mov	r3, r0
 8009610:	b2da      	uxtb	r2, r3
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8009618:	e04b      	b.n	80096b2 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800961a:	2100      	movs	r1, #0
 800961c:	68b8      	ldr	r0, [r7, #8]
 800961e:	f7ff fea3 	bl	8009368 <ParseNumber>
 8009622:	4603      	mov	r3, r0
 8009624:	b2da      	uxtb	r2, r3
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 800962c:	e041      	b.n	80096b2 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800962e:	2100      	movs	r1, #0
 8009630:	68b8      	ldr	r0, [r7, #8]
 8009632:	f7ff fe99 	bl	8009368 <ParseNumber>
 8009636:	4603      	mov	r3, r0
 8009638:	b2da      	uxtb	r2, r3
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8009640:	e037      	b.n	80096b2 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	3348      	adds	r3, #72	; 0x48
 8009646:	4619      	mov	r1, r3
 8009648:	68b8      	ldr	r0, [r7, #8]
 800964a:	f7ff fefc 	bl	8009446 <ParseIP>
      break;
 800964e:	e030      	b.n	80096b2 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	334c      	adds	r3, #76	; 0x4c
 8009654:	4619      	mov	r1, r3
 8009656:	68b8      	ldr	r0, [r7, #8]
 8009658:	f7ff fef5 	bl	8009446 <ParseIP>
      break;
 800965c:	e029      	b.n	80096b2 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	3350      	adds	r3, #80	; 0x50
 8009662:	4619      	mov	r1, r3
 8009664:	68b8      	ldr	r0, [r7, #8]
 8009666:	f7ff feee 	bl	8009446 <ParseIP>
      break;
 800966a:	e022      	b.n	80096b2 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	3354      	adds	r3, #84	; 0x54
 8009670:	4619      	mov	r1, r3
 8009672:	68b8      	ldr	r0, [r7, #8]
 8009674:	f7ff fee7 	bl	8009446 <ParseIP>
      break;
 8009678:	e01b      	b.n	80096b2 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	3358      	adds	r3, #88	; 0x58
 800967e:	4619      	mov	r1, r3
 8009680:	68b8      	ldr	r0, [r7, #8]
 8009682:	f7ff fee0 	bl	8009446 <ParseIP>
      break;
 8009686:	e014      	b.n	80096b2 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8009688:	2100      	movs	r1, #0
 800968a:	68b8      	ldr	r0, [r7, #8]
 800968c:	f7ff fe6c 	bl	8009368 <ParseNumber>
 8009690:	4603      	mov	r3, r0
 8009692:	b2da      	uxtb	r2, r3
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800969a:	e00a      	b.n	80096b2 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 800969c:	2100      	movs	r1, #0
 800969e:	68b8      	ldr	r0, [r7, #8]
 80096a0:	f7ff fe62 	bl	8009368 <ParseNumber>
 80096a4:	4603      	mov	r3, r0
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 80096ae:	e000      	b.n	80096b2 <AT_ParseConnSettings+0x12a>

    default:
      break;
 80096b0:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80096b2:	490c      	ldr	r1, [pc, #48]	; (80096e4 <AT_ParseConnSettings+0x15c>)
 80096b4:	2000      	movs	r0, #0
 80096b6:	f009 f995 	bl	80129e4 <strtok>
 80096ba:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d007      	beq.n	80096d2 <AT_ParseConnSettings+0x14a>
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	3b01      	subs	r3, #1
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	2b2c      	cmp	r3, #44	; 0x2c
 80096ca:	d102      	bne.n	80096d2 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	3301      	adds	r3, #1
 80096d0:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f47f af66 	bne.w	80095a6 <AT_ParseConnSettings+0x1e>
    }
  }
}
 80096da:	bf00      	nop
 80096dc:	bf00      	nop
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	08015304 	.word	0x08015304

080096e8 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3302      	adds	r3, #2
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b31      	cmp	r3, #49	; 0x31
 80096fa:	bf0c      	ite	eq
 80096fc:	2301      	moveq	r3, #1
 80096fe:	2300      	movne	r3, #0
 8009700:	b2db      	uxtb	r3, r3
 8009702:	461a      	mov	r2, r3
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	701a      	strb	r2, [r3, #0]
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8009714:	b590      	push	{r4, r7, lr}
 8009716:	b087      	sub	sp, #28
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8009720:	2300      	movs	r3, #0
 8009722:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8009724:	2300      	movs	r3, #0
 8009726:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800972e:	68b8      	ldr	r0, [r7, #8]
 8009730:	f7f6 fd4e 	bl	80001d0 <strlen>
 8009734:	4603      	mov	r3, r0
 8009736:	b299      	uxth	r1, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800973e:	461a      	mov	r2, r3
 8009740:	68b8      	ldr	r0, [r7, #8]
 8009742:	47a0      	blx	r4
 8009744:	4603      	mov	r3, r0
 8009746:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	dd3e      	ble.n	80097cc <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800975a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	4798      	blx	r3
 8009762:	4603      	mov	r3, r0
 8009764:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8009766:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800976a:	2b00      	cmp	r3, #0
 800976c:	dd27      	ble.n	80097be <AT_ExecuteCommand+0xaa>
 800976e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009772:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009776:	dc22      	bgt.n	80097be <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8009778:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800977c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009780:	d105      	bne.n	800978e <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8009782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009786:	b29b      	uxth	r3, r3
 8009788:	3b01      	subs	r3, #1
 800978a:	b29b      	uxth	r3, r3
 800978c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800978e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	4413      	add	r3, r2
 8009796:	2200      	movs	r2, #0
 8009798:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 800979a:	490f      	ldr	r1, [pc, #60]	; (80097d8 <AT_ExecuteCommand+0xc4>)
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f009 f90b 	bl	80129b8 <strstr>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	e010      	b.n	80097ce <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80097ac:	490b      	ldr	r1, [pc, #44]	; (80097dc <AT_ExecuteCommand+0xc8>)
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f009 f902 	bl	80129b8 <strstr>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80097ba:	2305      	movs	r3, #5
 80097bc:	e007      	b.n	80097ce <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80097be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80097c2:	f113 0f04 	cmn.w	r3, #4
 80097c6:	d101      	bne.n	80097cc <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 80097c8:	2306      	movs	r3, #6
 80097ca:	e000      	b.n	80097ce <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80097cc:	2304      	movs	r3, #4
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	371c      	adds	r7, #28
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd90      	pop	{r4, r7, pc}
 80097d6:	bf00      	nop
 80097d8:	08015318 	.word	0x08015318
 80097dc:	08015324 	.word	0x08015324

080097e0 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
 80097ec:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80097f2:	2300      	movs	r3, #0
 80097f4:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 80097fa:	68b8      	ldr	r0, [r7, #8]
 80097fc:	f7f6 fce8 	bl	80001d0 <strlen>
 8009800:	4603      	mov	r3, r0
 8009802:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8009804:	8a7b      	ldrh	r3, [r7, #18]
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <AT_RequestSendData+0x32>
 800980e:	2302      	movs	r3, #2
 8009810:	e053      	b.n	80098ba <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800981e:	8a79      	ldrh	r1, [r7, #18]
 8009820:	68b8      	ldr	r0, [r7, #8]
 8009822:	4798      	blx	r3
 8009824:	4603      	mov	r3, r0
 8009826:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8009828:	8a3a      	ldrh	r2, [r7, #16]
 800982a:	8a7b      	ldrh	r3, [r7, #18]
 800982c:	429a      	cmp	r2, r3
 800982e:	d143      	bne.n	80098b8 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800983c:	8879      	ldrh	r1, [r7, #2]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	4798      	blx	r3
 8009842:	4603      	mov	r3, r0
 8009844:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8009846:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800984a:	887b      	ldrh	r3, [r7, #2]
 800984c:	429a      	cmp	r2, r3
 800984e:	d131      	bne.n	80098b4 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800985c:	2100      	movs	r1, #0
 800985e:	6a38      	ldr	r0, [r7, #32]
 8009860:	4798      	blx	r3
 8009862:	4603      	mov	r3, r0
 8009864:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8009866:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800986a:	2b00      	cmp	r3, #0
 800986c:	dd19      	ble.n	80098a2 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 800986e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009872:	6a3a      	ldr	r2, [r7, #32]
 8009874:	4413      	add	r3, r2
 8009876:	2200      	movs	r2, #0
 8009878:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800987a:	4912      	ldr	r1, [pc, #72]	; (80098c4 <AT_RequestSendData+0xe4>)
 800987c:	6a38      	ldr	r0, [r7, #32]
 800987e:	f009 f89b 	bl	80129b8 <strstr>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	e016      	b.n	80098ba <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800988c:	490e      	ldr	r1, [pc, #56]	; (80098c8 <AT_RequestSendData+0xe8>)
 800988e:	6a38      	ldr	r0, [r7, #32]
 8009890:	f009 f892 	bl	80129b8 <strstr>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800989a:	2305      	movs	r3, #5
 800989c:	e00d      	b.n	80098ba <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800989e:	2302      	movs	r3, #2
 80098a0:	e00b      	b.n	80098ba <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80098a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80098a6:	f113 0f04 	cmn.w	r3, #4
 80098aa:	d101      	bne.n	80098b0 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 80098ac:	2306      	movs	r3, #6
 80098ae:	e004      	b.n	80098ba <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 80098b0:	2302      	movs	r3, #2
 80098b2:	e002      	b.n	80098ba <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80098b4:	2302      	movs	r3, #2
 80098b6:	e000      	b.n	80098ba <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80098b8:	2304      	movs	r3, #4
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3718      	adds	r7, #24
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	08015318 	.word	0x08015318
 80098c8:	08015324 	.word	0x08015324

080098cc <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80098d4:	2302      	movs	r3, #2
 80098d6:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f247 5230 	movw	r2, #30000	; 0x7530
 80098de:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80098e8:	2000      	movs	r0, #0
 80098ea:	4798      	blx	r3
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d113      	bne.n	800991a <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80098f8:	461a      	mov	r2, r3
 80098fa:	490a      	ldr	r1, [pc, #40]	; (8009924 <ES_WIFI_Init+0x58>)
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7ff ff09 	bl	8009714 <AT_ExecuteCommand>
 8009902:	4603      	mov	r3, r0
 8009904:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8009906:	7bfb      	ldrb	r3, [r7, #15]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d106      	bne.n	800991a <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7ff fdc1 	bl	800949c <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800991a:	7bfb      	ldrb	r3, [r7, #15]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	08015334 	.word	0x08015334

08009928 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
 8009934:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00b      	beq.n	8009954 <ES_WIFI_RegisterBusIO+0x2c>
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d008      	beq.n	8009954 <ES_WIFI_RegisterBusIO+0x2c>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d005      	beq.n	8009954 <ES_WIFI_RegisterBusIO+0x2c>
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d002      	beq.n	8009954 <ES_WIFI_RegisterBusIO+0x2c>
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8009954:	2302      	movs	r3, #2
 8009956:	e014      	b.n	8009982 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	69ba      	ldr	r2, [r7, #24]
 800996c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	69fa      	ldr	r2, [r7, #28]
 8009974:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
	...

08009990 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
 800999c:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	4932      	ldr	r1, [pc, #200]	; (8009a70 <ES_WIFI_Connect+0xe0>)
 80099a8:	4618      	mov	r0, r3
 80099aa:	f008 ff7b 	bl	80128a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80099ba:	461a      	mov	r2, r3
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f7ff fea9 	bl	8009714 <AT_ExecuteCommand>
 80099c2:	4603      	mov	r3, r0
 80099c4:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80099c6:	7dfb      	ldrb	r3, [r7, #23]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d14b      	bne.n	8009a64 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	4927      	ldr	r1, [pc, #156]	; (8009a74 <ES_WIFI_Connect+0xe4>)
 80099d6:	4618      	mov	r0, r3
 80099d8:	f008 ff64 	bl	80128a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80099e8:	461a      	mov	r2, r3
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f7ff fe92 	bl	8009714 <AT_ExecuteCommand>
 80099f0:	4603      	mov	r3, r0
 80099f2:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 80099f4:	7dfb      	ldrb	r3, [r7, #23]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d134      	bne.n	8009a64 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	78fa      	ldrb	r2, [r7, #3]
 80099fe:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009a08:	78fa      	ldrb	r2, [r7, #3]
 8009a0a:	491b      	ldr	r1, [pc, #108]	; (8009a78 <ES_WIFI_Connect+0xe8>)
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f008 ff49 	bl	80128a4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009a1e:	461a      	mov	r2, r3
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f7ff fe77 	bl	8009714 <AT_ExecuteCommand>
 8009a26:	4603      	mov	r3, r0
 8009a28:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8009a2a:	7dfb      	ldrb	r3, [r7, #23]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d119      	bne.n	8009a64 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009a36:	4911      	ldr	r1, [pc, #68]	; (8009a7c <ES_WIFI_Connect+0xec>)
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f008 ff33 	bl	80128a4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f7ff fe61 	bl	8009714 <AT_ExecuteCommand>
 8009a52:	4603      	mov	r3, r0
 8009a54:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8009a56:	7dfb      	ldrb	r3, [r7, #23]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d103      	bne.n	8009a64 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8009a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3718      	adds	r7, #24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	0801534c 	.word	0x0801534c
 8009a74:	08015354 	.word	0x08015354
 8009a78:	0801535c 	.word	0x0801535c
 8009a7c:	08015364 	.word	0x08015364

08009a80 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009a8e:	4911      	ldr	r1, [pc, #68]	; (8009ad4 <ES_WIFI_IsConnected+0x54>)
 8009a90:	4618      	mov	r0, r3
 8009a92:	f008 ff07 	bl	80128a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7ff fe35 	bl	8009714 <AT_ExecuteCommand>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d108      	bne.n	8009ac6 <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	33d2      	adds	r3, #210	; 0xd2
 8009abe:	4619      	mov	r1, r3
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	f7ff fe11 	bl	80096e8 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	08015368 	.word	0x08015368

08009ad8 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009ae6:	4910      	ldr	r1, [pc, #64]	; (8009b28 <ES_WIFI_GetNetworkSettings+0x50>)
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f008 fedb 	bl	80128a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009afa:	461a      	mov	r2, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff fe09 	bl	8009714 <AT_ExecuteCommand>
 8009b02:	4603      	mov	r3, r0
 8009b04:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d108      	bne.n	8009b1e <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	338d      	adds	r3, #141	; 0x8d
 8009b16:	4619      	mov	r1, r3
 8009b18:	4610      	mov	r0, r2
 8009b1a:	f7ff fd35 	bl	8009588 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8009b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	08015370 	.word	0x08015370

08009b2c <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009b3c:	4912      	ldr	r1, [pc, #72]	; (8009b88 <ES_WIFI_GetMACAddress+0x5c>)
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f008 feb0 	bl	80128a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009b50:	461a      	mov	r2, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff fdde 	bl	8009714 <AT_ExecuteCommand>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10c      	bne.n	8009b7c <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009b68:	3302      	adds	r3, #2
 8009b6a:	4908      	ldr	r1, [pc, #32]	; (8009b8c <ES_WIFI_GetMACAddress+0x60>)
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f008 ff39 	bl	80129e4 <strtok>
 8009b72:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	68b8      	ldr	r0, [r7, #8]
 8009b78:	f7ff fc3a 	bl	80093f0 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	080153cc 	.word	0x080153cc
 8009b8c:	080153d0 	.word	0x080153d0

08009b90 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	785b      	ldrb	r3, [r3, #1]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	4949      	ldr	r1, [pc, #292]	; (8009cd0 <ES_WIFI_StartServerSingleConn+0x140>)
 8009bac:	f008 fe7a 	bl	80128a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff fda8 	bl	8009714 <AT_ExecuteCommand>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	e079      	b.n	8009cc6 <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d016      	beq.n	8009c08 <ES_WIFI_StartServerSingleConn+0x78>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d012      	beq.n	8009c08 <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009be8:	493a      	ldr	r1, [pc, #232]	; (8009cd4 <ES_WIFI_StartServerSingleConn+0x144>)
 8009bea:	4618      	mov	r0, r3
 8009bec:	f008 fe5a 	bl	80128a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7ff fd88 	bl	8009714 <AT_ExecuteCommand>
 8009c04:	4603      	mov	r3, r0
 8009c06:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == ES_WIFI_STATUS_OK)
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d15a      	bne.n	8009cc4 <ES_WIFI_StartServerSingleConn+0x134>
  {
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	492f      	ldr	r1, [pc, #188]	; (8009cd8 <ES_WIFI_StartServerSingleConn+0x148>)
 8009c1c:	f008 fe42 	bl	80128a4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7ff fd70 	bl	8009714 <AT_ExecuteCommand>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73fb      	strb	r3, [r7, #15]
      if(ret == ES_WIFI_STATUS_OK)
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d142      	bne.n	8009cc4 <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	7c1b      	ldrb	r3, [r3, #16]
 8009c48:	461a      	mov	r2, r3
 8009c4a:	4924      	ldr	r1, [pc, #144]	; (8009cdc <ES_WIFI_StartServerSingleConn+0x14c>)
 8009c4c:	f008 fe2a 	bl	80128a4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff fd58 	bl	8009714 <AT_ExecuteCommand>
 8009c64:	4603      	mov	r3, r0
 8009c66:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d12a      	bne.n	8009cc4 <ES_WIFI_StartServerSingleConn+0x134>
		    {
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	889b      	ldrh	r3, [r3, #4]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	4919      	ldr	r1, [pc, #100]	; (8009ce0 <ES_WIFI_StartServerSingleConn+0x150>)
 8009c7c:	f008 fe12 	bl	80128a4 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff fd40 	bl	8009714 <AT_ExecuteCommand>
 8009c94:	4603      	mov	r3, r0
 8009c96:	73fb      	strb	r3, [r7, #15]
          if (ret == ES_WIFI_STATUS_OK)
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d112      	bne.n	8009cc4 <ES_WIFI_StartServerSingleConn+0x134>
          {
            // multi accept mode
            sprintf((char*)Obj->CmdData,"P5=11\r");
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009ca4:	490f      	ldr	r1, [pc, #60]	; (8009ce4 <ES_WIFI_StartServerSingleConn+0x154>)
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f008 fdfc 	bl	80128a4 <siprintf>
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009cb8:	461a      	mov	r2, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7ff fd2a 	bl	8009714 <AT_ExecuteCommand>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73fb      	strb	r3, [r7, #15]
          }
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	08015434 	.word	0x08015434
 8009cd4:	0801547c 	.word	0x0801547c
 8009cd8:	0801543c 	.word	0x0801543c
 8009cdc:	08015488 	.word	0x08015488
 8009ce0:	08015444 	.word	0x08015444
 8009ce4:	08015490 	.word	0x08015490

08009ce8 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b08a      	sub	sp, #40	; 0x28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart=HAL_GetTick();
 8009cfa:	f7f8 fdd1 	bl	80028a0 <HAL_GetTick>
 8009cfe:	6278      	str	r0, [r7, #36]	; 0x24
  tlast=tstart+timeout;
 8009d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	4413      	add	r3, r2
 8009d06:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart )
 8009d08:	69fa      	ldr	r2, [r7, #28]
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d201      	bcs.n	8009d14 <ES_WIFI_WaitServerConnection+0x2c>
  {
	   tstart=0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    // mandatory to flush MR async messages
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009d1a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009d1e:	2100      	movs	r1, #0
 8009d20:	4618      	mov	r0, r3
 8009d22:	f007 ff65 	bl	8011bf0 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009d2c:	4972      	ldr	r1, [pc, #456]	; (8009ef8 <ES_WIFI_WaitServerConnection+0x210>)
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f008 fdb8 	bl	80128a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009d40:	461a      	mov	r2, r3
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f7ff fce6 	bl	8009714 <AT_ExecuteCommand>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(ret == ES_WIFI_STATUS_OK)
 8009d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d136      	bne.n	8009dc4 <ES_WIFI_WaitServerConnection+0xdc>
    {
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009d5c:	4967      	ldr	r1, [pc, #412]	; (8009efc <ES_WIFI_WaitServerConnection+0x214>)
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f008 fe2a 	bl	80129b8 <strstr>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d03b      	beq.n	8009de2 <ES_WIFI_WaitServerConnection+0xfa>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009d70:	4963      	ldr	r1, [pc, #396]	; (8009f00 <ES_WIFI_WaitServerConnection+0x218>)
 8009d72:	4618      	mov	r0, r3
 8009d74:	f008 fe20 	bl	80129b8 <strstr>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d031      	beq.n	8009de2 <ES_WIFI_WaitServerConnection+0xfa>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009d84:	495f      	ldr	r1, [pc, #380]	; (8009f04 <ES_WIFI_WaitServerConnection+0x21c>)
 8009d86:	4618      	mov	r0, r3
 8009d88:	f008 fe16 	bl	80129b8 <strstr>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d127      	bne.n	8009de2 <ES_WIFI_WaitServerConnection+0xfa>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009d98:	495b      	ldr	r1, [pc, #364]	; (8009f08 <ES_WIFI_WaitServerConnection+0x220>)
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f008 fe0c 	bl	80129b8 <strstr>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d11d      	bne.n	8009de2 <ES_WIFI_WaitServerConnection+0xfa>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
 8009da6:	f240 7241 	movw	r2, #1857	; 0x741
 8009daa:	4958      	ldr	r1, [pc, #352]	; (8009f0c <ES_WIFI_WaitServerConnection+0x224>)
 8009dac:	4858      	ldr	r0, [pc, #352]	; (8009f10 <ES_WIFI_WaitServerConnection+0x228>)
 8009dae:	f008 fc71 	bl	8012694 <iprintf>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009db8:	4619      	mov	r1, r3
 8009dba:	4856      	ldr	r0, [pc, #344]	; (8009f14 <ES_WIFI_WaitServerConnection+0x22c>)
 8009dbc:	f008 fc6a 	bl	8012694 <iprintf>
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	e095      	b.n	8009ef0 <ES_WIFI_WaitServerConnection+0x208>
        }
      }
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
 8009dc4:	f240 7249 	movw	r2, #1865	; 0x749
 8009dc8:	4950      	ldr	r1, [pc, #320]	; (8009f0c <ES_WIFI_WaitServerConnection+0x224>)
 8009dca:	4851      	ldr	r0, [pc, #324]	; (8009f10 <ES_WIFI_WaitServerConnection+0x228>)
 8009dcc:	f008 fc62 	bl	8012694 <iprintf>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	484f      	ldr	r0, [pc, #316]	; (8009f18 <ES_WIFI_WaitServerConnection+0x230>)
 8009dda:	f008 fc5b 	bl	8012694 <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 8009dde:	2302      	movs	r3, #2
 8009de0:	e086      	b.n	8009ef0 <ES_WIFI_WaitServerConnection+0x208>
    }
#endif

    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009de8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009dec:	2100      	movs	r1, #0
 8009dee:	4618      	mov	r0, r3
 8009df0:	f007 fefe 	bl	8011bf0 <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009dfa:	4948      	ldr	r1, [pc, #288]	; (8009f1c <ES_WIFI_WaitServerConnection+0x234>)
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f008 fd51 	bl	80128a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009e0e:	461a      	mov	r2, r3
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f7ff fc7f 	bl	8009714 <AT_ExecuteCommand>
 8009e16:	4603      	mov	r3, r0
 8009e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(ret == ES_WIFI_STATUS_OK)
 8009e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d13f      	bne.n	8009ea4 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009e2a:	220c      	movs	r2, #12
 8009e2c:	493c      	ldr	r1, [pc, #240]	; (8009f20 <ES_WIFI_WaitServerConnection+0x238>)
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f008 fd9b 	bl	801296a <strncmp>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d043      	beq.n	8009ec2 <ES_WIFI_WaitServerConnection+0x1da>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009e40:	3302      	adds	r3, #2
 8009e42:	4938      	ldr	r1, [pc, #224]	; (8009f24 <ES_WIFI_WaitServerConnection+0x23c>)
 8009e44:	4618      	mov	r0, r3
 8009e46:	f008 fdcd 	bl	80129e4 <strtok>
 8009e4a:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //port
 8009e4c:	4935      	ldr	r1, [pc, #212]	; (8009f24 <ES_WIFI_WaitServerConnection+0x23c>)
 8009e4e:	2000      	movs	r0, #0
 8009e50:	f008 fdc8 	bl	80129e4 <strtok>
 8009e54:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3306      	adds	r3, #6
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6978      	ldr	r0, [r7, #20]
 8009e5e:	f7ff faf2 	bl	8009446 <ParseIP>
        ptr = strtok(0, ","); //port
 8009e62:	4930      	ldr	r1, [pc, #192]	; (8009f24 <ES_WIFI_WaitServerConnection+0x23c>)
 8009e64:	2000      	movs	r0, #0
 8009e66:	f008 fdbd 	bl	80129e4 <strtok>
 8009e6a:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	6978      	ldr	r0, [r7, #20]
 8009e70:	f7ff fa7a 	bl	8009368 <ParseNumber>
 8009e74:	4603      	mov	r3, r0
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	809a      	strh	r2, [r3, #4]
        ptr = strtok(0, ","); //ip
 8009e7c:	4929      	ldr	r1, [pc, #164]	; (8009f24 <ES_WIFI_WaitServerConnection+0x23c>)
 8009e7e:	2000      	movs	r0, #0
 8009e80:	f008 fdb0 	bl	80129e4 <strtok>
 8009e84:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //remote port
 8009e86:	4927      	ldr	r1, [pc, #156]	; (8009f24 <ES_WIFI_WaitServerConnection+0x23c>)
 8009e88:	2000      	movs	r0, #0
 8009e8a:	f008 fdab 	bl	80129e4 <strtok>
 8009e8e:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 8009e90:	2100      	movs	r1, #0
 8009e92:	6978      	ldr	r0, [r7, #20]
 8009e94:	f7ff fa68 	bl	8009368 <ParseNumber>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	805a      	strh	r2, [r3, #2]
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	e025      	b.n	8009ef0 <ES_WIFI_WaitServerConnection+0x208>
      }
    }
    else
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);
 8009ea4:	f240 7264 	movw	r2, #1892	; 0x764
 8009ea8:	4918      	ldr	r1, [pc, #96]	; (8009f0c <ES_WIFI_WaitServerConnection+0x224>)
 8009eaa:	4819      	ldr	r0, [pc, #100]	; (8009f10 <ES_WIFI_WaitServerConnection+0x228>)
 8009eac:	f008 fbf2 	bl	8012694 <iprintf>
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	481b      	ldr	r0, [pc, #108]	; (8009f28 <ES_WIFI_WaitServerConnection+0x240>)
 8009eba:	f008 fbeb 	bl	8012694 <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	e016      	b.n	8009ef0 <ES_WIFI_WaitServerConnection+0x208>
    }

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009ec8:	2064      	movs	r0, #100	; 0x64
 8009eca:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 8009ecc:	f7f8 fce8 	bl	80028a0 <HAL_GetTick>
 8009ed0:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f43f af1d 	beq.w	8009d14 <ES_WIFI_WaitServerConnection+0x2c>
 8009eda:	69ba      	ldr	r2, [r7, #24]
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	f4ff af18 	bcc.w	8009d14 <ES_WIFI_WaitServerConnection+0x2c>
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	f4ff af13 	bcc.w	8009d14 <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 8009eee:	2303      	movs	r3, #3
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3728      	adds	r7, #40	; 0x28
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	08015344 	.word	0x08015344
 8009efc:	08015498 	.word	0x08015498
 8009f00:	080154a0 	.word	0x080154a0
 8009f04:	080154a8 	.word	0x080154a8
 8009f08:	080154b4 	.word	0x080154b4
 8009f0c:	080154c4 	.word	0x080154c4
 8009f10:	080154e0 	.word	0x080154e0
 8009f14:	080154e8 	.word	0x080154e8
 8009f18:	08015500 	.word	0x08015500
 8009f1c:	08015518 	.word	0x08015518
 8009f20:	0801551c 	.word	0x0801551c
 8009f24:	08015304 	.word	0x08015304
 8009f28:	0801552c 	.word	0x0801552c

08009f2c <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009f3c:	683a      	ldr	r2, [r7, #0]
 8009f3e:	4925      	ldr	r1, [pc, #148]	; (8009fd4 <ES_WIFI_CloseServerConnection+0xa8>)
 8009f40:	4618      	mov	r0, r3
 8009f42:	f008 fcaf 	bl	80128a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009f52:	461a      	mov	r2, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7ff fbdd 	bl	8009714 <AT_ExecuteCommand>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00e      	beq.n	8009f82 <ES_WIFI_CloseServerConnection+0x56>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
 8009f64:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8009f68:	491b      	ldr	r1, [pc, #108]	; (8009fd8 <ES_WIFI_CloseServerConnection+0xac>)
 8009f6a:	481c      	ldr	r0, [pc, #112]	; (8009fdc <ES_WIFI_CloseServerConnection+0xb0>)
 8009f6c:	f008 fb92 	bl	8012694 <iprintf>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009f76:	4619      	mov	r1, r3
 8009f78:	4819      	ldr	r0, [pc, #100]	; (8009fe0 <ES_WIFI_CloseServerConnection+0xb4>)
 8009f7a:	f008 fb8b 	bl	8012694 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
 8009f80:	e023      	b.n	8009fca <ES_WIFI_CloseServerConnection+0x9e>
  }

  sprintf((char*)Obj->CmdData,"P5=10\r");
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009f88:	4916      	ldr	r1, [pc, #88]	; (8009fe4 <ES_WIFI_CloseServerConnection+0xb8>)
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f008 fc8a 	bl	80128a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7ff fbb8 	bl	8009714 <AT_ExecuteCommand>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00c      	beq.n	8009fc8 <ES_WIFI_CloseServerConnection+0x9c>
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 8009fae:	f240 7289 	movw	r2, #1929	; 0x789
 8009fb2:	4909      	ldr	r1, [pc, #36]	; (8009fd8 <ES_WIFI_CloseServerConnection+0xac>)
 8009fb4:	4809      	ldr	r0, [pc, #36]	; (8009fdc <ES_WIFI_CloseServerConnection+0xb0>)
 8009fb6:	f008 fb6d 	bl	8012694 <iprintf>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4809      	ldr	r0, [pc, #36]	; (8009fe8 <ES_WIFI_CloseServerConnection+0xbc>)
 8009fc4:	f008 fb66 	bl	8012694 <iprintf>
  }

  UNLOCK_WIFI();
  return ret;
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	08015434 	.word	0x08015434
 8009fd8:	080154c4 	.word	0x080154c4
 8009fdc:	080154e0 	.word	0x080154e0
 8009fe0:	08015544 	.word	0x08015544
 8009fe4:	08015560 	.word	0x08015560
 8009fe8:	08015568 	.word	0x08015568

08009fec <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b088      	sub	sp, #32
 8009ff0:	af02      	add	r7, sp, #8
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	607a      	str	r2, [r7, #4]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	72fb      	strb	r3, [r7, #11]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a000:	2302      	movs	r3, #2
 800a002:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	2b00      	cmp	r3, #0
 800a008:	d102      	bne.n	800a010 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800a00a:	2301      	movs	r3, #1
 800a00c:	617b      	str	r3, [r7, #20]
 800a00e:	e001      	b.n	800a014 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 800a014:	893b      	ldrh	r3, [r7, #8]
 800a016:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800a01a:	d302      	bcc.n	800a022 <ES_WIFI_SendData+0x36>
 800a01c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800a020:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	893a      	ldrh	r2, [r7, #8]
 800a026:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a02e:	7afa      	ldrb	r2, [r7, #11]
 800a030:	4942      	ldr	r1, [pc, #264]	; (800a13c <ES_WIFI_SendData+0x150>)
 800a032:	4618      	mov	r0, r3
 800a034:	f008 fc36 	bl	80128a4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a044:	461a      	mov	r2, r3
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f7ff fb64 	bl	8009714 <AT_ExecuteCommand>
 800a04c:	4603      	mov	r3, r0
 800a04e:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 800a050:	7cfb      	ldrb	r3, [r7, #19]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d15e      	bne.n	800a114 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	4938      	ldr	r1, [pc, #224]	; (800a140 <ES_WIFI_SendData+0x154>)
 800a060:	4618      	mov	r0, r3
 800a062:	f008 fc1f 	bl	80128a4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a072:	461a      	mov	r2, r3
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f7ff fb4d 	bl	8009714 <AT_ExecuteCommand>
 800a07a:	4603      	mov	r3, r0
 800a07c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800a07e:	7cfb      	ldrb	r3, [r7, #19]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d13d      	bne.n	800a100 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a08a:	893a      	ldrh	r2, [r7, #8]
 800a08c:	492d      	ldr	r1, [pc, #180]	; (800a144 <ES_WIFI_SendData+0x158>)
 800a08e:	4618      	mov	r0, r3
 800a090:	f008 fc08 	bl	80128a4 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a0a0:	893a      	ldrh	r2, [r7, #8]
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f7ff fb99 	bl	80097e0 <AT_RequestSendData>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800a0b2:	7cfb      	ldrb	r3, [r7, #19]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d119      	bne.n	800a0ec <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a0be:	4922      	ldr	r1, [pc, #136]	; (800a148 <ES_WIFI_SendData+0x15c>)
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f008 fc79 	bl	80129b8 <strstr>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d02c      	beq.n	800a126 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800a0cc:	f640 025c 	movw	r2, #2140	; 0x85c
 800a0d0:	491e      	ldr	r1, [pc, #120]	; (800a14c <ES_WIFI_SendData+0x160>)
 800a0d2:	481f      	ldr	r0, [pc, #124]	; (800a150 <ES_WIFI_SendData+0x164>)
 800a0d4:	f008 fade 	bl	8012694 <iprintf>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a0de:	4619      	mov	r1, r3
 800a0e0:	481c      	ldr	r0, [pc, #112]	; (800a154 <ES_WIFI_SendData+0x168>)
 800a0e2:	f008 fad7 	bl	8012694 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	74fb      	strb	r3, [r7, #19]
 800a0ea:	e01c      	b.n	800a126 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800a0ec:	f640 0262 	movw	r2, #2146	; 0x862
 800a0f0:	4916      	ldr	r1, [pc, #88]	; (800a14c <ES_WIFI_SendData+0x160>)
 800a0f2:	4817      	ldr	r0, [pc, #92]	; (800a150 <ES_WIFI_SendData+0x164>)
 800a0f4:	f008 face 	bl	8012694 <iprintf>
 800a0f8:	4817      	ldr	r0, [pc, #92]	; (800a158 <ES_WIFI_SendData+0x16c>)
 800a0fa:	f008 fb51 	bl	80127a0 <puts>
 800a0fe:	e012      	b.n	800a126 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 800a100:	f640 0267 	movw	r2, #2151	; 0x867
 800a104:	4911      	ldr	r1, [pc, #68]	; (800a14c <ES_WIFI_SendData+0x160>)
 800a106:	4812      	ldr	r0, [pc, #72]	; (800a150 <ES_WIFI_SendData+0x164>)
 800a108:	f008 fac4 	bl	8012694 <iprintf>
 800a10c:	4813      	ldr	r0, [pc, #76]	; (800a15c <ES_WIFI_SendData+0x170>)
 800a10e:	f008 fb47 	bl	80127a0 <puts>
 800a112:	e008      	b.n	800a126 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 800a114:	f640 026c 	movw	r2, #2156	; 0x86c
 800a118:	490c      	ldr	r1, [pc, #48]	; (800a14c <ES_WIFI_SendData+0x160>)
 800a11a:	480d      	ldr	r0, [pc, #52]	; (800a150 <ES_WIFI_SendData+0x164>)
 800a11c:	f008 faba 	bl	8012694 <iprintf>
 800a120:	480f      	ldr	r0, [pc, #60]	; (800a160 <ES_WIFI_SendData+0x174>)
 800a122:	f008 fb3d 	bl	80127a0 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800a126:	7cfb      	ldrb	r3, [r7, #19]
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d102      	bne.n	800a132 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800a12c:	6a3b      	ldr	r3, [r7, #32]
 800a12e:	2200      	movs	r2, #0
 800a130:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 800a132:	7cfb      	ldrb	r3, [r7, #19]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	08015434 	.word	0x08015434
 800a140:	080155ec 	.word	0x080155ec
 800a144:	080155f4 	.word	0x080155f4
 800a148:	08015600 	.word	0x08015600
 800a14c:	080154c4 	.word	0x080154c4
 800a150:	080154e0 	.word	0x080154e0
 800a154:	08015608 	.word	0x08015608
 800a158:	08015624 	.word	0x08015624
 800a15c:	08015640 	.word	0x08015640
 800a160:	08015654 	.word	0x08015654

0800a164 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b08c      	sub	sp, #48	; 0x30
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800a16c:	4b57      	ldr	r3, [pc, #348]	; (800a2cc <SPI_WIFI_MspInit+0x168>)
 800a16e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a170:	4a56      	ldr	r2, [pc, #344]	; (800a2cc <SPI_WIFI_MspInit+0x168>)
 800a172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a176:	6593      	str	r3, [r2, #88]	; 0x58
 800a178:	4b54      	ldr	r3, [pc, #336]	; (800a2cc <SPI_WIFI_MspInit+0x168>)
 800a17a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a17c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a180:	61bb      	str	r3, [r7, #24]
 800a182:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a184:	4b51      	ldr	r3, [pc, #324]	; (800a2cc <SPI_WIFI_MspInit+0x168>)
 800a186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a188:	4a50      	ldr	r2, [pc, #320]	; (800a2cc <SPI_WIFI_MspInit+0x168>)
 800a18a:	f043 0302 	orr.w	r3, r3, #2
 800a18e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a190:	4b4e      	ldr	r3, [pc, #312]	; (800a2cc <SPI_WIFI_MspInit+0x168>)
 800a192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a194:	f003 0302 	and.w	r3, r3, #2
 800a198:	617b      	str	r3, [r7, #20]
 800a19a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a19c:	4b4b      	ldr	r3, [pc, #300]	; (800a2cc <SPI_WIFI_MspInit+0x168>)
 800a19e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1a0:	4a4a      	ldr	r2, [pc, #296]	; (800a2cc <SPI_WIFI_MspInit+0x168>)
 800a1a2:	f043 0304 	orr.w	r3, r3, #4
 800a1a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a1a8:	4b48      	ldr	r3, [pc, #288]	; (800a2cc <SPI_WIFI_MspInit+0x168>)
 800a1aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ac:	f003 0304 	and.w	r3, r3, #4
 800a1b0:	613b      	str	r3, [r7, #16]
 800a1b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a1b4:	4b45      	ldr	r3, [pc, #276]	; (800a2cc <SPI_WIFI_MspInit+0x168>)
 800a1b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1b8:	4a44      	ldr	r2, [pc, #272]	; (800a2cc <SPI_WIFI_MspInit+0x168>)
 800a1ba:	f043 0310 	orr.w	r3, r3, #16
 800a1be:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a1c0:	4b42      	ldr	r3, [pc, #264]	; (800a2cc <SPI_WIFI_MspInit+0x168>)
 800a1c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1c4:	f003 0310 	and.w	r3, r3, #16
 800a1c8:	60fb      	str	r3, [r7, #12]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a1d2:	483f      	ldr	r0, [pc, #252]	; (800a2d0 <SPI_WIFI_MspInit+0x16c>)
 800a1d4:	f7f9 f8d4 	bl	8003380 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800a1d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a1dc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800a1ea:	f107 031c 	add.w	r3, r7, #28
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	4837      	ldr	r0, [pc, #220]	; (800a2d0 <SPI_WIFI_MspInit+0x16c>)
 800a1f2:	f7f8 fe0f 	bl	8002e14 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800a1fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800a1fe:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a200:	2300      	movs	r3, #0
 800a202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a204:	2300      	movs	r3, #0
 800a206:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800a208:	f107 031c 	add.w	r3, r7, #28
 800a20c:	4619      	mov	r1, r3
 800a20e:	4831      	ldr	r0, [pc, #196]	; (800a2d4 <SPI_WIFI_MspInit+0x170>)
 800a210:	f7f8 fe00 	bl	8002e14 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800a214:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a218:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a21a:	2301      	movs	r3, #1
 800a21c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a21e:	2300      	movs	r3, #0
 800a220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a222:	2300      	movs	r3, #0
 800a224:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800a226:	2300      	movs	r3, #0
 800a228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800a22a:	f107 031c 	add.w	r3, r7, #28
 800a22e:	4619      	mov	r1, r3
 800a230:	4828      	ldr	r0, [pc, #160]	; (800a2d4 <SPI_WIFI_MspInit+0x170>)
 800a232:	f7f8 fdef 	bl	8002e14 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800a236:	2201      	movs	r2, #1
 800a238:	2101      	movs	r1, #1
 800a23a:	4826      	ldr	r0, [pc, #152]	; (800a2d4 <SPI_WIFI_MspInit+0x170>)
 800a23c:	f7f9 f8a0 	bl	8003380 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800a240:	2301      	movs	r3, #1
 800a242:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a244:	2301      	movs	r3, #1
 800a246:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a248:	2300      	movs	r3, #0
 800a24a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a24c:	2301      	movs	r3, #1
 800a24e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800a250:	f107 031c 	add.w	r3, r7, #28
 800a254:	4619      	mov	r1, r3
 800a256:	481f      	ldr	r0, [pc, #124]	; (800a2d4 <SPI_WIFI_MspInit+0x170>)
 800a258:	f7f8 fddc 	bl	8002e14 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800a25c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a260:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a262:	2302      	movs	r3, #2
 800a264:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a266:	2300      	movs	r3, #0
 800a268:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a26a:	2301      	movs	r3, #1
 800a26c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a26e:	2306      	movs	r3, #6
 800a270:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800a272:	f107 031c 	add.w	r3, r7, #28
 800a276:	4619      	mov	r1, r3
 800a278:	4817      	ldr	r0, [pc, #92]	; (800a2d8 <SPI_WIFI_MspInit+0x174>)
 800a27a:	f7f8 fdcb 	bl	8002e14 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800a27e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a282:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a284:	2302      	movs	r3, #2
 800a286:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a28c:	2301      	movs	r3, #1
 800a28e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a290:	2306      	movs	r3, #6
 800a292:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800a294:	f107 031c 	add.w	r3, r7, #28
 800a298:	4619      	mov	r1, r3
 800a29a:	480f      	ldr	r0, [pc, #60]	; (800a2d8 <SPI_WIFI_MspInit+0x174>)
 800a29c:	f7f8 fdba 	bl	8002e14 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800a2a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2a4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a2b2:	2306      	movs	r3, #6
 800a2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800a2b6:	f107 031c 	add.w	r3, r7, #28
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	4806      	ldr	r0, [pc, #24]	; (800a2d8 <SPI_WIFI_MspInit+0x174>)
 800a2be:	f7f8 fda9 	bl	8002e14 <HAL_GPIO_Init>
}
 800a2c2:	bf00      	nop
 800a2c4:	3730      	adds	r7, #48	; 0x30
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	40021000 	.word	0x40021000
 800a2d0:	48000400 	.word	0x48000400
 800a2d4:	48001000 	.word	0x48001000
 800a2d8:	48000800 	.word	0x48000800

0800a2dc <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800a2ea:	88fb      	ldrh	r3, [r7, #6]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d145      	bne.n	800a37c <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800a2f0:	4b27      	ldr	r3, [pc, #156]	; (800a390 <SPI_WIFI_Init+0xb4>)
 800a2f2:	4a28      	ldr	r2, [pc, #160]	; (800a394 <SPI_WIFI_Init+0xb8>)
 800a2f4:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800a2f6:	4826      	ldr	r0, [pc, #152]	; (800a390 <SPI_WIFI_Init+0xb4>)
 800a2f8:	f7ff ff34 	bl	800a164 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800a2fc:	4b24      	ldr	r3, [pc, #144]	; (800a390 <SPI_WIFI_Init+0xb4>)
 800a2fe:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a302:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800a304:	4b22      	ldr	r3, [pc, #136]	; (800a390 <SPI_WIFI_Init+0xb4>)
 800a306:	2200      	movs	r2, #0
 800a308:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800a30a:	4b21      	ldr	r3, [pc, #132]	; (800a390 <SPI_WIFI_Init+0xb4>)
 800a30c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800a310:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800a312:	4b1f      	ldr	r3, [pc, #124]	; (800a390 <SPI_WIFI_Init+0xb4>)
 800a314:	2200      	movs	r2, #0
 800a316:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800a318:	4b1d      	ldr	r3, [pc, #116]	; (800a390 <SPI_WIFI_Init+0xb4>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800a31e:	4b1c      	ldr	r3, [pc, #112]	; (800a390 <SPI_WIFI_Init+0xb4>)
 800a320:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a324:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800a326:	4b1a      	ldr	r3, [pc, #104]	; (800a390 <SPI_WIFI_Init+0xb4>)
 800a328:	2210      	movs	r2, #16
 800a32a:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800a32c:	4b18      	ldr	r3, [pc, #96]	; (800a390 <SPI_WIFI_Init+0xb4>)
 800a32e:	2200      	movs	r2, #0
 800a330:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800a332:	4b17      	ldr	r3, [pc, #92]	; (800a390 <SPI_WIFI_Init+0xb4>)
 800a334:	2200      	movs	r2, #0
 800a336:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800a338:	4b15      	ldr	r3, [pc, #84]	; (800a390 <SPI_WIFI_Init+0xb4>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800a33e:	4b14      	ldr	r3, [pc, #80]	; (800a390 <SPI_WIFI_Init+0xb4>)
 800a340:	2200      	movs	r2, #0
 800a342:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800a344:	4812      	ldr	r0, [pc, #72]	; (800a390 <SPI_WIFI_Init+0xb4>)
 800a346:	f7fc fa1f 	bl	8006788 <HAL_SPI_Init>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800a350:	f04f 33ff 	mov.w	r3, #4294967295
 800a354:	e018      	b.n	800a388 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800a356:	2200      	movs	r2, #0
 800a358:	2100      	movs	r1, #0
 800a35a:	2007      	movs	r0, #7
 800a35c:	f7f8 fbab 	bl	8002ab6 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800a360:	2007      	movs	r0, #7
 800a362:	f7f8 fbc4 	bl	8002aee <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800a366:	2200      	movs	r2, #0
 800a368:	2100      	movs	r1, #0
 800a36a:	2033      	movs	r0, #51	; 0x33
 800a36c:	f7f8 fba3 	bl	8002ab6 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800a370:	2033      	movs	r0, #51	; 0x33
 800a372:	f7f8 fbbc 	bl	8002aee <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800a376:	200a      	movs	r0, #10
 800a378:	f000 f9fe 	bl	800a778 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800a37c:	f000 f80c 	bl	800a398 <SPI_WIFI_ResetModule>
 800a380:	4603      	mov	r3, r0
 800a382:	73fb      	strb	r3, [r7, #15]

  return rc;
 800a384:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3710      	adds	r7, #16
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	200012c0 	.word	0x200012c0
 800a394:	40003c00 	.word	0x40003c00

0800a398 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800a39e:	f7f8 fa7f 	bl	80028a0 <HAL_GetTick>
 800a3a2:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a3ae:	4830      	ldr	r0, [pc, #192]	; (800a470 <SPI_WIFI_ResetModule+0xd8>)
 800a3b0:	f7f8 ffe6 	bl	8003380 <HAL_GPIO_WritePin>
 800a3b4:	200a      	movs	r0, #10
 800a3b6:	f7f8 fa7f 	bl	80028b8 <HAL_Delay>
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a3c0:	482b      	ldr	r0, [pc, #172]	; (800a470 <SPI_WIFI_ResetModule+0xd8>)
 800a3c2:	f7f8 ffdd 	bl	8003380 <HAL_GPIO_WritePin>
 800a3c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a3ca:	f7f8 fa75 	bl	80028b8 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	4827      	ldr	r0, [pc, #156]	; (800a470 <SPI_WIFI_ResetModule+0xd8>)
 800a3d4:	f7f8 ffd4 	bl	8003380 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800a3d8:	200f      	movs	r0, #15
 800a3da:	f000 f9cd 	bl	800a778 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800a3de:	e020      	b.n	800a422 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
 800a3e2:	463a      	mov	r2, r7
 800a3e4:	18d1      	adds	r1, r2, r3
 800a3e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	4821      	ldr	r0, [pc, #132]	; (800a474 <SPI_WIFI_ResetModule+0xdc>)
 800a3ee:	f7fc fa96 	bl	800691e <HAL_SPI_Receive>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800a3f6:	7bfb      	ldrb	r3, [r7, #15]
 800a3f8:	3302      	adds	r3, #2
 800a3fa:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800a3fc:	f7f8 fa50 	bl	80028a0 <HAL_GetTick>
 800a400:	4602      	mov	r2, r0
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	1ad3      	subs	r3, r2, r3
 800a406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a40a:	d202      	bcs.n	800a412 <SPI_WIFI_ResetModule+0x7a>
 800a40c:	79fb      	ldrb	r3, [r7, #7]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d007      	beq.n	800a422 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800a412:	2201      	movs	r2, #1
 800a414:	2101      	movs	r1, #1
 800a416:	4816      	ldr	r0, [pc, #88]	; (800a470 <SPI_WIFI_ResetModule+0xd8>)
 800a418:	f7f8 ffb2 	bl	8003380 <HAL_GPIO_WritePin>
      return -1;
 800a41c:	f04f 33ff 	mov.w	r3, #4294967295
 800a420:	e021      	b.n	800a466 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800a422:	2102      	movs	r1, #2
 800a424:	4812      	ldr	r0, [pc, #72]	; (800a470 <SPI_WIFI_ResetModule+0xd8>)
 800a426:	f7f8 ff93 	bl	8003350 <HAL_GPIO_ReadPin>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d0d7      	beq.n	800a3e0 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800a430:	2201      	movs	r2, #1
 800a432:	2101      	movs	r1, #1
 800a434:	480e      	ldr	r0, [pc, #56]	; (800a470 <SPI_WIFI_ResetModule+0xd8>)
 800a436:	f7f8 ffa3 	bl	8003380 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800a43a:	783b      	ldrb	r3, [r7, #0]
 800a43c:	2b15      	cmp	r3, #21
 800a43e:	d10e      	bne.n	800a45e <SPI_WIFI_ResetModule+0xc6>
 800a440:	787b      	ldrb	r3, [r7, #1]
 800a442:	2b15      	cmp	r3, #21
 800a444:	d10b      	bne.n	800a45e <SPI_WIFI_ResetModule+0xc6>
 800a446:	78bb      	ldrb	r3, [r7, #2]
 800a448:	2b0d      	cmp	r3, #13
 800a44a:	d108      	bne.n	800a45e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800a44c:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800a44e:	2b0a      	cmp	r3, #10
 800a450:	d105      	bne.n	800a45e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800a452:	793b      	ldrb	r3, [r7, #4]
 800a454:	2b3e      	cmp	r3, #62	; 0x3e
 800a456:	d102      	bne.n	800a45e <SPI_WIFI_ResetModule+0xc6>
 800a458:	797b      	ldrb	r3, [r7, #5]
 800a45a:	2b20      	cmp	r3, #32
 800a45c:	d002      	beq.n	800a464 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800a45e:	f04f 33ff 	mov.w	r3, #4294967295
 800a462:	e000      	b.n	800a466 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	48001000 	.word	0x48001000
 800a474:	200012c0 	.word	0x200012c0

0800a478 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800a47c:	4802      	ldr	r0, [pc, #8]	; (800a488 <SPI_WIFI_DeInit+0x10>)
 800a47e:	f7fc fa26 	bl	80068ce <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	bd80      	pop	{r7, pc}
 800a488:	200012c0 	.word	0x200012c0

0800a48c <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 800a494:	f7f8 fa04 	bl	80028a0 <HAL_GetTick>
 800a498:	4603      	mov	r3, r0
 800a49a:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800a49c:	e00a      	b.n	800a4b4 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800a49e:	f7f8 f9ff 	bl	80028a0 <HAL_GetTick>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	1ad2      	subs	r2, r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d902      	bls.n	800a4b4 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800a4ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b2:	e007      	b.n	800a4c4 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 800a4b4:	2102      	movs	r1, #2
 800a4b6:	4805      	ldr	r0, [pc, #20]	; (800a4cc <wait_cmddata_rdy_high+0x40>)
 800a4b8:	f7f8 ff4a 	bl	8003350 <HAL_GPIO_ReadPin>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d1ed      	bne.n	800a49e <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	48001000 	.word	0x48001000

0800a4d0 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800a4d8:	f7f8 f9e2 	bl	80028a0 <HAL_GetTick>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800a4e0:	e00a      	b.n	800a4f8 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800a4e2:	f7f8 f9dd 	bl	80028a0 <HAL_GetTick>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	1ad2      	subs	r2, r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d902      	bls.n	800a4f8 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800a4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f6:	e004      	b.n	800a502 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 800a4f8:	4b04      	ldr	r3, [pc, #16]	; (800a50c <wait_cmddata_rdy_rising_event+0x3c>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d0f0      	beq.n	800a4e2 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800a500:	2300      	movs	r3, #0
#endif
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	2000132c 	.word	0x2000132c

0800a510 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800a518:	f7f8 f9c2 	bl	80028a0 <HAL_GetTick>
 800a51c:	4603      	mov	r3, r0
 800a51e:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800a520:	e00a      	b.n	800a538 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800a522:	f7f8 f9bd 	bl	80028a0 <HAL_GetTick>
 800a526:	4602      	mov	r2, r0
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	1ad2      	subs	r2, r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d902      	bls.n	800a538 <wait_spi_rx_event+0x28>
    {
      return -1;
 800a532:	f04f 33ff 	mov.w	r3, #4294967295
 800a536:	e004      	b.n	800a542 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 800a538:	4b04      	ldr	r3, [pc, #16]	; (800a54c <wait_spi_rx_event+0x3c>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d0f0      	beq.n	800a522 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800a540:	2300      	movs	r3, #0
#endif
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20001324 	.word	0x20001324

0800a550 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800a558:	f7f8 f9a2 	bl	80028a0 <HAL_GetTick>
 800a55c:	4603      	mov	r3, r0
 800a55e:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800a560:	e00a      	b.n	800a578 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800a562:	f7f8 f99d 	bl	80028a0 <HAL_GetTick>
 800a566:	4602      	mov	r2, r0
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	1ad2      	subs	r2, r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d902      	bls.n	800a578 <wait_spi_tx_event+0x28>
    {
      return -1;
 800a572:	f04f 33ff 	mov.w	r3, #4294967295
 800a576:	e004      	b.n	800a582 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 800a578:	4b04      	ldr	r3, [pc, #16]	; (800a58c <wait_spi_tx_event+0x3c>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d0f0      	beq.n	800a562 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800a580:	2300      	movs	r3, #0
#endif
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	20001328 	.word	0x20001328

0800a590 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	460b      	mov	r3, r1
 800a59a:	607a      	str	r2, [r7, #4]
 800a59c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	2101      	movs	r1, #1
 800a5a6:	4834      	ldr	r0, [pc, #208]	; (800a678 <SPI_WIFI_ReceiveData+0xe8>)
 800a5a8:	f7f8 feea 	bl	8003380 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800a5ac:	2003      	movs	r0, #3
 800a5ae:	f000 f8e3 	bl	800a778 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7ff ff8b 	bl	800a4d0 <wait_cmddata_rdy_rising_event>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	da02      	bge.n	800a5c6 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800a5c0:	f06f 0302 	mvn.w	r3, #2
 800a5c4:	e054      	b.n	800a670 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	482b      	ldr	r0, [pc, #172]	; (800a678 <SPI_WIFI_ReceiveData+0xe8>)
 800a5cc:	f7f8 fed8 	bl	8003380 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800a5d0:	200f      	movs	r0, #15
 800a5d2:	f000 f8d1 	bl	800a778 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800a5d6:	e03d      	b.n	800a654 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800a5d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a5dc:	897b      	ldrh	r3, [r7, #10]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	db02      	blt.n	800a5e8 <SPI_WIFI_ReceiveData+0x58>
 800a5e2:	897b      	ldrh	r3, [r7, #10]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d13c      	bne.n	800a662 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 800a5e8:	4b24      	ldr	r3, [pc, #144]	; (800a67c <SPI_WIFI_ReceiveData+0xec>)
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800a5ee:	f107 0314 	add.w	r3, r7, #20
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	4822      	ldr	r0, [pc, #136]	; (800a680 <SPI_WIFI_ReceiveData+0xf0>)
 800a5f8:	f7fc fd62 	bl	80070c0 <HAL_SPI_Receive_IT>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d007      	beq.n	800a612 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800a602:	2201      	movs	r2, #1
 800a604:	2101      	movs	r1, #1
 800a606:	481c      	ldr	r0, [pc, #112]	; (800a678 <SPI_WIFI_ReceiveData+0xe8>)
 800a608:	f7f8 feba 	bl	8003380 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800a60c:	f04f 33ff 	mov.w	r3, #4294967295
 800a610:	e02e      	b.n	800a670 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4618      	mov	r0, r3
 800a616:	f7ff ff7b 	bl	800a510 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800a61a:	7d3a      	ldrb	r2, [r7, #20]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	3301      	adds	r3, #1
 800a624:	7d7a      	ldrb	r2, [r7, #21]
 800a626:	701a      	strb	r2, [r3, #0]
      length += 2;
 800a628:	8afb      	ldrh	r3, [r7, #22]
 800a62a:	3302      	adds	r3, #2
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	3302      	adds	r3, #2
 800a634:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800a636:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a63a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a63e:	db09      	blt.n	800a654 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800a640:	2201      	movs	r2, #1
 800a642:	2101      	movs	r1, #1
 800a644:	480c      	ldr	r0, [pc, #48]	; (800a678 <SPI_WIFI_ReceiveData+0xe8>)
 800a646:	f7f8 fe9b 	bl	8003380 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800a64a:	f7ff fea5 	bl	800a398 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800a64e:	f06f 0303 	mvn.w	r3, #3
 800a652:	e00d      	b.n	800a670 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800a654:	2102      	movs	r1, #2
 800a656:	4808      	ldr	r0, [pc, #32]	; (800a678 <SPI_WIFI_ReceiveData+0xe8>)
 800a658:	f7f8 fe7a 	bl	8003350 <HAL_GPIO_ReadPin>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d0ba      	beq.n	800a5d8 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800a662:	2201      	movs	r2, #1
 800a664:	2101      	movs	r1, #1
 800a666:	4804      	ldr	r0, [pc, #16]	; (800a678 <SPI_WIFI_ReceiveData+0xe8>)
 800a668:	f7f8 fe8a 	bl	8003380 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800a66c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3718      	adds	r7, #24
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	48001000 	.word	0x48001000
 800a67c:	20001324 	.word	0x20001324
 800a680:	200012c0 	.word	0x200012c0

0800a684 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	460b      	mov	r3, r1
 800a68e:	607a      	str	r2, [r7, #4]
 800a690:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff fef9 	bl	800a48c <wait_cmddata_rdy_high>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	da02      	bge.n	800a6a6 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800a6a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a4:	e04f      	b.n	800a746 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800a6a6:	4b2a      	ldr	r3, [pc, #168]	; (800a750 <SPI_WIFI_SendData+0xcc>)
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2101      	movs	r1, #1
 800a6b0:	4828      	ldr	r0, [pc, #160]	; (800a754 <SPI_WIFI_SendData+0xd0>)
 800a6b2:	f7f8 fe65 	bl	8003380 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800a6b6:	200f      	movs	r0, #15
 800a6b8:	f000 f85e 	bl	800a778 <SPI_WIFI_DelayUs>
  if (len > 1)
 800a6bc:	897b      	ldrh	r3, [r7, #10]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d919      	bls.n	800a6f6 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 800a6c2:	4b25      	ldr	r3, [pc, #148]	; (800a758 <SPI_WIFI_SendData+0xd4>)
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800a6c8:	897b      	ldrh	r3, [r7, #10]
 800a6ca:	085b      	lsrs	r3, r3, #1
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	68f9      	ldr	r1, [r7, #12]
 800a6d2:	4822      	ldr	r0, [pc, #136]	; (800a75c <SPI_WIFI_SendData+0xd8>)
 800a6d4:	f7fc fc66 	bl	8006fa4 <HAL_SPI_Transmit_IT>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d007      	beq.n	800a6ee <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800a6de:	2201      	movs	r2, #1
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	481c      	ldr	r0, [pc, #112]	; (800a754 <SPI_WIFI_SendData+0xd0>)
 800a6e4:	f7f8 fe4c 	bl	8003380 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800a6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ec:	e02b      	b.n	800a746 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7ff ff2d 	bl	800a550 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800a6f6:	897b      	ldrh	r3, [r7, #10]
 800a6f8:	f003 0301 	and.w	r3, r3, #1
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d020      	beq.n	800a742 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800a700:	897b      	ldrh	r3, [r7, #10]
 800a702:	3b01      	subs	r3, #1
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800a70c:	230a      	movs	r3, #10
 800a70e:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800a710:	4b11      	ldr	r3, [pc, #68]	; (800a758 <SPI_WIFI_SendData+0xd4>)
 800a712:	2201      	movs	r2, #1
 800a714:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800a716:	f107 0314 	add.w	r3, r7, #20
 800a71a:	2201      	movs	r2, #1
 800a71c:	4619      	mov	r1, r3
 800a71e:	480f      	ldr	r0, [pc, #60]	; (800a75c <SPI_WIFI_SendData+0xd8>)
 800a720:	f7fc fc40 	bl	8006fa4 <HAL_SPI_Transmit_IT>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d007      	beq.n	800a73a <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800a72a:	2201      	movs	r2, #1
 800a72c:	2101      	movs	r1, #1
 800a72e:	4809      	ldr	r0, [pc, #36]	; (800a754 <SPI_WIFI_SendData+0xd0>)
 800a730:	f7f8 fe26 	bl	8003380 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800a734:	f04f 33ff 	mov.w	r3, #4294967295
 800a738:	e005      	b.n	800a746 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7ff ff07 	bl	800a550 <wait_spi_tx_event>
    
  }
  return len;
 800a742:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	2000132c 	.word	0x2000132c
 800a754:	48001000 	.word	0x48001000
 800a758:	20001328 	.word	0x20001328
 800a75c:	200012c0 	.word	0x200012c0

0800a760 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f7f8 f8a5 	bl	80028b8 <HAL_Delay>
}
 800a76e:	bf00      	nop
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
	...

0800a778 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 800a788:	4b20      	ldr	r3, [pc, #128]	; (800a80c <SPI_WIFI_DelayUs+0x94>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d122      	bne.n	800a7d6 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 800a790:	4b1f      	ldr	r3, [pc, #124]	; (800a810 <SPI_WIFI_DelayUs+0x98>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a1f      	ldr	r2, [pc, #124]	; (800a814 <SPI_WIFI_DelayUs+0x9c>)
 800a796:	fba2 2303 	umull	r2, r3, r2, r3
 800a79a:	099b      	lsrs	r3, r3, #6
 800a79c:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 800a7a6:	f7f8 f87b 	bl	80028a0 <HAL_GetTick>
 800a7aa:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800a7ac:	e002      	b.n	800a7b4 <SPI_WIFI_DelayUs+0x3c>
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	60bb      	str	r3, [r7, #8]
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1f9      	bne.n	800a7ae <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800a7ba:	f7f8 f871 	bl	80028a0 <HAL_GetTick>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	4a11      	ldr	r2, [pc, #68]	; (800a80c <SPI_WIFI_DelayUs+0x94>)
 800a7c6:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800a7c8:	4b10      	ldr	r3, [pc, #64]	; (800a80c <SPI_WIFI_DelayUs+0x94>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d102      	bne.n	800a7d6 <SPI_WIFI_DelayUs+0x5e>
 800a7d0:	4b0e      	ldr	r3, [pc, #56]	; (800a80c <SPI_WIFI_DelayUs+0x94>)
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800a7d6:	4b0e      	ldr	r3, [pc, #56]	; (800a810 <SPI_WIFI_DelayUs+0x98>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a0f      	ldr	r2, [pc, #60]	; (800a818 <SPI_WIFI_DelayUs+0xa0>)
 800a7dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a7e0:	0c9a      	lsrs	r2, r3, #18
 800a7e2:	4b0a      	ldr	r3, [pc, #40]	; (800a80c <SPI_WIFI_DelayUs+0x94>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ea:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	fb02 f303 	mul.w	r3, r2, r3
 800a7f4:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800a7f6:	e002      	b.n	800a7fe <SPI_WIFI_DelayUs+0x86>
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	60bb      	str	r3, [r7, #8]
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1f9      	bne.n	800a7f8 <SPI_WIFI_DelayUs+0x80>
  return;
 800a804:	bf00      	nop
}
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	20001330 	.word	0x20001330
 800a810:	20000014 	.word	0x20000014
 800a814:	10624dd3 	.word	0x10624dd3
 800a818:	431bde83 	.word	0x431bde83

0800a81c <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800a824:	4b06      	ldr	r3, [pc, #24]	; (800a840 <HAL_SPI_RxCpltCallback+0x24>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d002      	beq.n	800a832 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800a82c:	4b04      	ldr	r3, [pc, #16]	; (800a840 <HAL_SPI_RxCpltCallback+0x24>)
 800a82e:	2200      	movs	r2, #0
 800a830:	601a      	str	r2, [r3, #0]
  }
}
 800a832:	bf00      	nop
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	20001324 	.word	0x20001324

0800a844 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800a84c:	4b06      	ldr	r3, [pc, #24]	; (800a868 <HAL_SPI_TxCpltCallback+0x24>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d002      	beq.n	800a85a <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800a854:	4b04      	ldr	r3, [pc, #16]	; (800a868 <HAL_SPI_TxCpltCallback+0x24>)
 800a856:	2200      	movs	r2, #0
 800a858:	601a      	str	r2, [r3, #0]
  }
}
 800a85a:	bf00      	nop
 800a85c:	370c      	adds	r7, #12
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	20001328 	.word	0x20001328

0800a86c <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800a86c:	b480      	push	{r7}
 800a86e:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800a870:	4b05      	ldr	r3, [pc, #20]	; (800a888 <SPI_WIFI_ISR+0x1c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d102      	bne.n	800a87e <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800a878:	4b03      	ldr	r3, [pc, #12]	; (800a888 <SPI_WIFI_ISR+0x1c>)
 800a87a:	2200      	movs	r2, #0
 800a87c:	601a      	str	r2, [r3, #0]
   }
}
 800a87e:	bf00      	nop
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	2000132c 	.word	0x2000132c

0800a88c <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800a896:	4b0d      	ldr	r3, [pc, #52]	; (800a8cc <WIFI_Init+0x40>)
 800a898:	9301      	str	r3, [sp, #4]
 800a89a:	4b0d      	ldr	r3, [pc, #52]	; (800a8d0 <WIFI_Init+0x44>)
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	4b0d      	ldr	r3, [pc, #52]	; (800a8d4 <WIFI_Init+0x48>)
 800a8a0:	4a0d      	ldr	r2, [pc, #52]	; (800a8d8 <WIFI_Init+0x4c>)
 800a8a2:	490e      	ldr	r1, [pc, #56]	; (800a8dc <WIFI_Init+0x50>)
 800a8a4:	480e      	ldr	r0, [pc, #56]	; (800a8e0 <WIFI_Init+0x54>)
 800a8a6:	f7ff f83f 	bl	8009928 <ES_WIFI_RegisterBusIO>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d107      	bne.n	800a8c0 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800a8b0:	480b      	ldr	r0, [pc, #44]	; (800a8e0 <WIFI_Init+0x54>)
 800a8b2:	f7ff f80b 	bl	80098cc <ES_WIFI_Init>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800a8c0:	79fb      	ldrb	r3, [r7, #7]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	0800a591 	.word	0x0800a591
 800a8d0:	0800a685 	.word	0x0800a685
 800a8d4:	0800a761 	.word	0x0800a761
 800a8d8:	0800a479 	.word	0x0800a479
 800a8dc:	0800a2dd 	.word	0x0800a2dd
 800a8e0:	20001334 	.word	0x20001334

0800a8e4 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800a8f6:	79fb      	ldrb	r3, [r7, #7]
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	68f9      	ldr	r1, [r7, #12]
 800a8fc:	4809      	ldr	r0, [pc, #36]	; (800a924 <WIFI_Connect+0x40>)
 800a8fe:	f7ff f847 	bl	8009990 <ES_WIFI_Connect>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d107      	bne.n	800a918 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800a908:	4806      	ldr	r0, [pc, #24]	; (800a924 <WIFI_Connect+0x40>)
 800a90a:	f7ff f8e5 	bl	8009ad8 <ES_WIFI_GetNetworkSettings>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800a918:	7dfb      	ldrb	r3, [r7, #23]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3718      	adds	r7, #24
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20001334 	.word	0x20001334

0800a928 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800a934:	6879      	ldr	r1, [r7, #4]
 800a936:	4806      	ldr	r0, [pc, #24]	; (800a950 <WIFI_GetMAC_Address+0x28>)
 800a938:	f7ff f8f8 	bl	8009b2c <ES_WIFI_GetMACAddress>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800a942:	2300      	movs	r3, #0
 800a944:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800a946:	7bfb      	ldrb	r3, [r7, #15]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	20001334 	.word	0x20001334

0800a954 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800a960:	4809      	ldr	r0, [pc, #36]	; (800a988 <WIFI_GetIP_Address+0x34>)
 800a962:	f7ff f88d 	bl	8009a80 <ES_WIFI_IsConnected>
 800a966:	4603      	mov	r3, r0
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d107      	bne.n	800a97c <WIFI_GetIP_Address+0x28>
 800a96c:	4b06      	ldr	r3, [pc, #24]	; (800a988 <WIFI_GetIP_Address+0x34>)
 800a96e:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800a972:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	20001334 	.word	0x20001334

0800a98c <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name, uint16_t port)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08a      	sub	sp, #40	; 0x28
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	607b      	str	r3, [r7, #4]
 800a996:	460b      	mov	r3, r1
 800a998:	72fb      	strb	r3, [r7, #11]
 800a99a:	4613      	mov	r3, r2
 800a99c:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 800a9aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a9ac:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800a9ae:	7afb      	ldrb	r3, [r7, #11]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	bf14      	ite	ne
 800a9b4:	2301      	movne	r3, #1
 800a9b6:	2300      	moveq	r3, #0
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 800a9bc:	893b      	ldrh	r3, [r7, #8]
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	f887 3020 	strb.w	r3, [r7, #32]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800a9c4:	f107 0310 	add.w	r3, r7, #16
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	4807      	ldr	r0, [pc, #28]	; (800a9e8 <WIFI_StartServer+0x5c>)
 800a9cc:	f7ff f8e0 	bl	8009b90 <ES_WIFI_StartServerSingleConn>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d102      	bne.n	800a9dc <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800a9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3728      	adds	r7, #40	; 0x28
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	20001334 	.word	0x20001334

0800a9ec <WIFI_WaitServerConnection>:
  * @brief  Wait for a client connection to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(int socket,uint32_t Timeout,uint8_t *RemoteIp,uint16_t *RemotePort)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b08a      	sub	sp, #40	; 0x28
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
 800a9f8:	603b      	str	r3, [r7, #0]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;
  
  conn.Number = socket;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	747b      	strb	r3, [r7, #17]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 800aa00:	f107 0310 	add.w	r3, r7, #16
 800aa04:	461a      	mov	r2, r3
 800aa06:	68b9      	ldr	r1, [r7, #8]
 800aa08:	4819      	ldr	r0, [pc, #100]	; (800aa70 <WIFI_WaitServerConnection+0x84>)
 800aa0a:	f7ff f96d 	bl	8009ce8 <ES_WIFI_WaitServerConnection>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 800aa14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10f      	bne.n	800aa3c <WIFI_WaitServerConnection+0x50>
  {
    if (RemotePort) *RemotePort=conn.RemotePort;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d002      	beq.n	800aa28 <WIFI_WaitServerConnection+0x3c>
 800aa22:	8a7a      	ldrh	r2, [r7, #18]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d004      	beq.n	800aa38 <WIFI_WaitServerConnection+0x4c>
 800aa2e:	f8d7 3016 	ldr.w	r3, [r7, #22]
 800aa32:	461a      	mov	r2, r3
    {
      memcpy(RemoteIp,conn.RemoteIP,sizeof(conn.RemoteIP));
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	e014      	b.n	800aa66 <WIFI_WaitServerConnection+0x7a>
  }
  
  if (ES_WIFI_STATUS_TIMEOUT ==ret)
 800aa3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d10f      	bne.n	800aa64 <WIFI_WaitServerConnection+0x78>
  {
    if (RemotePort) *RemotePort=0;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d002      	beq.n	800aa50 <WIFI_WaitServerConnection+0x64>
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d004      	beq.n	800aa60 <WIFI_WaitServerConnection+0x74>
    {
      memset(RemoteIp,0,sizeof(conn.RemoteIP));
 800aa56:	2204      	movs	r2, #4
 800aa58:	2100      	movs	r1, #0
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f007 f8c8 	bl	8011bf0 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 800aa60:	2305      	movs	r3, #5
 800aa62:	e000      	b.n	800aa66 <WIFI_WaitServerConnection+0x7a>
  }

  return WIFI_STATUS_ERROR;
 800aa64:	2301      	movs	r3, #1
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3728      	adds	r7, #40	; 0x28
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	20001334 	.word	0x20001334

0800aa74 <WIFI_CloseServerConnection>:
/**
  * @brief  Close current connection from a client  to the server
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(int socket)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	73fb      	strb	r3, [r7, #15]
  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj,socket))
 800aa80:	6879      	ldr	r1, [r7, #4]
 800aa82:	4806      	ldr	r0, [pc, #24]	; (800aa9c <WIFI_CloseServerConnection+0x28>)
 800aa84:	f7ff fa52 	bl	8009f2c <ES_WIFI_CloseServerConnection>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <WIFI_CloseServerConnection+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800aa92:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	20001334 	.word	0x20001334

0800aaa0 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b088      	sub	sp, #32
 800aaa4:	af02      	add	r7, sp, #8
 800aaa6:	60b9      	str	r1, [r7, #8]
 800aaa8:	607b      	str	r3, [r7, #4]
 800aaaa:	4603      	mov	r3, r0
 800aaac:	73fb      	strb	r3, [r7, #15]
 800aaae:	4613      	mov	r3, r2
 800aab0:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800aab6:	89ba      	ldrh	r2, [r7, #12]
 800aab8:	7bf9      	ldrb	r1, [r7, #15]
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	9301      	str	r3, [sp, #4]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	4613      	mov	r3, r2
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	4806      	ldr	r0, [pc, #24]	; (800aae0 <WIFI_SendData+0x40>)
 800aac8:	f7ff fa90 	bl	8009fec <ES_WIFI_SendData>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3718      	adds	r7, #24
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	20001334 	.word	0x20001334

0800aae4 <__NVIC_SetPriority>:
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	6039      	str	r1, [r7, #0]
 800aaee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aaf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	db0a      	blt.n	800ab0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	b2da      	uxtb	r2, r3
 800aafc:	490c      	ldr	r1, [pc, #48]	; (800ab30 <__NVIC_SetPriority+0x4c>)
 800aafe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab02:	0112      	lsls	r2, r2, #4
 800ab04:	b2d2      	uxtb	r2, r2
 800ab06:	440b      	add	r3, r1
 800ab08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ab0c:	e00a      	b.n	800ab24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	b2da      	uxtb	r2, r3
 800ab12:	4908      	ldr	r1, [pc, #32]	; (800ab34 <__NVIC_SetPriority+0x50>)
 800ab14:	79fb      	ldrb	r3, [r7, #7]
 800ab16:	f003 030f 	and.w	r3, r3, #15
 800ab1a:	3b04      	subs	r3, #4
 800ab1c:	0112      	lsls	r2, r2, #4
 800ab1e:	b2d2      	uxtb	r2, r2
 800ab20:	440b      	add	r3, r1
 800ab22:	761a      	strb	r2, [r3, #24]
}
 800ab24:	bf00      	nop
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr
 800ab30:	e000e100 	.word	0xe000e100
 800ab34:	e000ed00 	.word	0xe000ed00

0800ab38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	f06f 0004 	mvn.w	r0, #4
 800ab42:	f7ff ffcf 	bl	800aae4 <__NVIC_SetPriority>
#endif
}
 800ab46:	bf00      	nop
 800ab48:	bd80      	pop	{r7, pc}
	...

0800ab4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab52:	f3ef 8305 	mrs	r3, IPSR
 800ab56:	603b      	str	r3, [r7, #0]
  return(result);
 800ab58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ab5e:	f06f 0305 	mvn.w	r3, #5
 800ab62:	607b      	str	r3, [r7, #4]
 800ab64:	e00c      	b.n	800ab80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ab66:	4b0a      	ldr	r3, [pc, #40]	; (800ab90 <osKernelInitialize+0x44>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d105      	bne.n	800ab7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ab6e:	4b08      	ldr	r3, [pc, #32]	; (800ab90 <osKernelInitialize+0x44>)
 800ab70:	2201      	movs	r2, #1
 800ab72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ab74:	2300      	movs	r3, #0
 800ab76:	607b      	str	r3, [r7, #4]
 800ab78:	e002      	b.n	800ab80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ab7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab80:	687b      	ldr	r3, [r7, #4]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	370c      	adds	r7, #12
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	20001c34 	.word	0x20001c34

0800ab94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab9a:	f3ef 8305 	mrs	r3, IPSR
 800ab9e:	603b      	str	r3, [r7, #0]
  return(result);
 800aba0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d003      	beq.n	800abae <osKernelStart+0x1a>
    stat = osErrorISR;
 800aba6:	f06f 0305 	mvn.w	r3, #5
 800abaa:	607b      	str	r3, [r7, #4]
 800abac:	e010      	b.n	800abd0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800abae:	4b0b      	ldr	r3, [pc, #44]	; (800abdc <osKernelStart+0x48>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d109      	bne.n	800abca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800abb6:	f7ff ffbf 	bl	800ab38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800abba:	4b08      	ldr	r3, [pc, #32]	; (800abdc <osKernelStart+0x48>)
 800abbc:	2202      	movs	r2, #2
 800abbe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800abc0:	f001 fad8 	bl	800c174 <vTaskStartScheduler>
      stat = osOK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	607b      	str	r3, [r7, #4]
 800abc8:	e002      	b.n	800abd0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800abca:	f04f 33ff 	mov.w	r3, #4294967295
 800abce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800abd0:	687b      	ldr	r3, [r7, #4]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	20001c34 	.word	0x20001c34

0800abe0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b08e      	sub	sp, #56	; 0x38
 800abe4:	af04      	add	r7, sp, #16
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800abec:	2300      	movs	r3, #0
 800abee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abf0:	f3ef 8305 	mrs	r3, IPSR
 800abf4:	617b      	str	r3, [r7, #20]
  return(result);
 800abf6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d17e      	bne.n	800acfa <osThreadNew+0x11a>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d07b      	beq.n	800acfa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ac02:	2380      	movs	r3, #128	; 0x80
 800ac04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ac06:	2318      	movs	r3, #24
 800ac08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ac0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d045      	beq.n	800aca6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d002      	beq.n	800ac28 <osThreadNew+0x48>
        name = attr->name;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	699b      	ldr	r3, [r3, #24]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d008      	beq.n	800ac4e <osThreadNew+0x6e>
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	2b38      	cmp	r3, #56	; 0x38
 800ac40:	d805      	bhi.n	800ac4e <osThreadNew+0x6e>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	f003 0301 	and.w	r3, r3, #1
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <osThreadNew+0x72>
        return (NULL);
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e054      	b.n	800acfc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	695b      	ldr	r3, [r3, #20]
 800ac5e:	089b      	lsrs	r3, r3, #2
 800ac60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00e      	beq.n	800ac88 <osThreadNew+0xa8>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	2bbb      	cmp	r3, #187	; 0xbb
 800ac70:	d90a      	bls.n	800ac88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d006      	beq.n	800ac88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d002      	beq.n	800ac88 <osThreadNew+0xa8>
        mem = 1;
 800ac82:	2301      	movs	r3, #1
 800ac84:	61bb      	str	r3, [r7, #24]
 800ac86:	e010      	b.n	800acaa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10c      	bne.n	800acaa <osThreadNew+0xca>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d108      	bne.n	800acaa <osThreadNew+0xca>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d104      	bne.n	800acaa <osThreadNew+0xca>
          mem = 0;
 800aca0:	2300      	movs	r3, #0
 800aca2:	61bb      	str	r3, [r7, #24]
 800aca4:	e001      	b.n	800acaa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	2b01      	cmp	r3, #1
 800acae:	d110      	bne.n	800acd2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800acb8:	9202      	str	r2, [sp, #8]
 800acba:	9301      	str	r3, [sp, #4]
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	6a3a      	ldr	r2, [r7, #32]
 800acc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f000 fff6 	bl	800bcb8 <xTaskCreateStatic>
 800accc:	4603      	mov	r3, r0
 800acce:	613b      	str	r3, [r7, #16]
 800acd0:	e013      	b.n	800acfa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d110      	bne.n	800acfa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800acd8:	6a3b      	ldr	r3, [r7, #32]
 800acda:	b29a      	uxth	r2, r3
 800acdc:	f107 0310 	add.w	r3, r7, #16
 800ace0:	9301      	str	r3, [sp, #4]
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f001 f841 	bl	800bd72 <xTaskCreate>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d001      	beq.n	800acfa <osThreadNew+0x11a>
            hTask = NULL;
 800acf6:	2300      	movs	r3, #0
 800acf8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800acfa:	693b      	ldr	r3, [r7, #16]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3728      	adds	r7, #40	; 0x28
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad0c:	f3ef 8305 	mrs	r3, IPSR
 800ad10:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d003      	beq.n	800ad20 <osDelay+0x1c>
    stat = osErrorISR;
 800ad18:	f06f 0305 	mvn.w	r3, #5
 800ad1c:	60fb      	str	r3, [r7, #12]
 800ad1e:	e007      	b.n	800ad30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f001 f9ee 	bl	800c10c <vTaskDelay>
    }
  }

  return (stat);
 800ad30:	68fb      	ldr	r3, [r7, #12]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
	...

0800ad3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	4a07      	ldr	r2, [pc, #28]	; (800ad68 <vApplicationGetIdleTaskMemory+0x2c>)
 800ad4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	4a06      	ldr	r2, [pc, #24]	; (800ad6c <vApplicationGetIdleTaskMemory+0x30>)
 800ad52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2280      	movs	r2, #128	; 0x80
 800ad58:	601a      	str	r2, [r3, #0]
}
 800ad5a:	bf00      	nop
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	20001c38 	.word	0x20001c38
 800ad6c:	20001cf4 	.word	0x20001cf4

0800ad70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	4a07      	ldr	r2, [pc, #28]	; (800ad9c <vApplicationGetTimerTaskMemory+0x2c>)
 800ad80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	4a06      	ldr	r2, [pc, #24]	; (800ada0 <vApplicationGetTimerTaskMemory+0x30>)
 800ad86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad8e:	601a      	str	r2, [r3, #0]
}
 800ad90:	bf00      	nop
 800ad92:	3714      	adds	r7, #20
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr
 800ad9c:	20001ef4 	.word	0x20001ef4
 800ada0:	20001fb0 	.word	0x20001fb0

0800ada4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f103 0208 	add.w	r2, r3, #8
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f04f 32ff 	mov.w	r2, #4294967295
 800adbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f103 0208 	add.w	r2, r3, #8
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f103 0208 	add.w	r2, r3, #8
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800adf2:	bf00      	nop
 800adf4:	370c      	adds	r7, #12
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adfe:	b480      	push	{r7}
 800ae00:	b085      	sub	sp, #20
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	689a      	ldr	r2, [r3, #8]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	1c5a      	adds	r2, r3, #1
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	601a      	str	r2, [r3, #0]
}
 800ae3a:	bf00      	nop
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae46:	b480      	push	{r7}
 800ae48:	b085      	sub	sp, #20
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
 800ae4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae5c:	d103      	bne.n	800ae66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	60fb      	str	r3, [r7, #12]
 800ae64:	e00c      	b.n	800ae80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	3308      	adds	r3, #8
 800ae6a:	60fb      	str	r3, [r7, #12]
 800ae6c:	e002      	b.n	800ae74 <vListInsert+0x2e>
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	60fb      	str	r3, [r7, #12]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d2f6      	bcs.n	800ae6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	685a      	ldr	r2, [r3, #4]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	683a      	ldr	r2, [r7, #0]
 800ae9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	1c5a      	adds	r2, r3, #1
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	601a      	str	r2, [r3, #0]
}
 800aeac:	bf00      	nop
 800aeae:	3714      	adds	r7, #20
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	691b      	ldr	r3, [r3, #16]
 800aec4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	6892      	ldr	r2, [r2, #8]
 800aece:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	6852      	ldr	r2, [r2, #4]
 800aed8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d103      	bne.n	800aeec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	1e5a      	subs	r2, r3, #1
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3714      	adds	r7, #20
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10a      	bne.n	800af36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800af20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800af32:	bf00      	nop
 800af34:	e7fe      	b.n	800af34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800af36:	f002 fbd5 	bl	800d6e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af42:	68f9      	ldr	r1, [r7, #12]
 800af44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af46:	fb01 f303 	mul.w	r3, r1, r3
 800af4a:	441a      	add	r2, r3
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2200      	movs	r2, #0
 800af54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af66:	3b01      	subs	r3, #1
 800af68:	68f9      	ldr	r1, [r7, #12]
 800af6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af6c:	fb01 f303 	mul.w	r3, r1, r3
 800af70:	441a      	add	r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	22ff      	movs	r2, #255	; 0xff
 800af7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	22ff      	movs	r2, #255	; 0xff
 800af82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d114      	bne.n	800afb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d01a      	beq.n	800afca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	3310      	adds	r3, #16
 800af98:	4618      	mov	r0, r3
 800af9a:	f001 fb85 	bl	800c6a8 <xTaskRemoveFromEventList>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d012      	beq.n	800afca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800afa4:	4b0c      	ldr	r3, [pc, #48]	; (800afd8 <xQueueGenericReset+0xcc>)
 800afa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afaa:	601a      	str	r2, [r3, #0]
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	e009      	b.n	800afca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	3310      	adds	r3, #16
 800afba:	4618      	mov	r0, r3
 800afbc:	f7ff fef2 	bl	800ada4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	3324      	adds	r3, #36	; 0x24
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7ff feed 	bl	800ada4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800afca:	f002 fbbb 	bl	800d744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800afce:	2301      	movs	r3, #1
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	e000ed04 	.word	0xe000ed04

0800afdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b08e      	sub	sp, #56	; 0x38
 800afe0:	af02      	add	r7, sp, #8
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
 800afe8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d10a      	bne.n	800b006 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800aff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b002:	bf00      	nop
 800b004:	e7fe      	b.n	800b004 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10a      	bne.n	800b022 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b01e:	bf00      	nop
 800b020:	e7fe      	b.n	800b020 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <xQueueGenericCreateStatic+0x52>
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <xQueueGenericCreateStatic+0x56>
 800b02e:	2301      	movs	r3, #1
 800b030:	e000      	b.n	800b034 <xQueueGenericCreateStatic+0x58>
 800b032:	2300      	movs	r3, #0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10a      	bne.n	800b04e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	623b      	str	r3, [r7, #32]
}
 800b04a:	bf00      	nop
 800b04c:	e7fe      	b.n	800b04c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d102      	bne.n	800b05a <xQueueGenericCreateStatic+0x7e>
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d101      	bne.n	800b05e <xQueueGenericCreateStatic+0x82>
 800b05a:	2301      	movs	r3, #1
 800b05c:	e000      	b.n	800b060 <xQueueGenericCreateStatic+0x84>
 800b05e:	2300      	movs	r3, #0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10a      	bne.n	800b07a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b068:	f383 8811 	msr	BASEPRI, r3
 800b06c:	f3bf 8f6f 	isb	sy
 800b070:	f3bf 8f4f 	dsb	sy
 800b074:	61fb      	str	r3, [r7, #28]
}
 800b076:	bf00      	nop
 800b078:	e7fe      	b.n	800b078 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b07a:	2350      	movs	r3, #80	; 0x50
 800b07c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	2b50      	cmp	r3, #80	; 0x50
 800b082:	d00a      	beq.n	800b09a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b088:	f383 8811 	msr	BASEPRI, r3
 800b08c:	f3bf 8f6f 	isb	sy
 800b090:	f3bf 8f4f 	dsb	sy
 800b094:	61bb      	str	r3, [r7, #24]
}
 800b096:	bf00      	nop
 800b098:	e7fe      	b.n	800b098 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b09a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00d      	beq.n	800b0c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b0ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	68b9      	ldr	r1, [r7, #8]
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f000 f83f 	bl	800b140 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3730      	adds	r7, #48	; 0x30
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b08a      	sub	sp, #40	; 0x28
 800b0d0:	af02      	add	r7, sp, #8
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10a      	bne.n	800b0f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e4:	f383 8811 	msr	BASEPRI, r3
 800b0e8:	f3bf 8f6f 	isb	sy
 800b0ec:	f3bf 8f4f 	dsb	sy
 800b0f0:	613b      	str	r3, [r7, #16]
}
 800b0f2:	bf00      	nop
 800b0f4:	e7fe      	b.n	800b0f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	fb02 f303 	mul.w	r3, r2, r3
 800b0fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	3350      	adds	r3, #80	; 0x50
 800b104:	4618      	mov	r0, r3
 800b106:	f002 fc0f 	bl	800d928 <pvPortMalloc>
 800b10a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d011      	beq.n	800b136 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	3350      	adds	r3, #80	; 0x50
 800b11a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b124:	79fa      	ldrb	r2, [r7, #7]
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	4613      	mov	r3, r2
 800b12c:	697a      	ldr	r2, [r7, #20]
 800b12e:	68b9      	ldr	r1, [r7, #8]
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f000 f805 	bl	800b140 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b136:	69bb      	ldr	r3, [r7, #24]
	}
 800b138:	4618      	mov	r0, r3
 800b13a:	3720      	adds	r7, #32
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
 800b14c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d103      	bne.n	800b15c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	69ba      	ldr	r2, [r7, #24]
 800b158:	601a      	str	r2, [r3, #0]
 800b15a:	e002      	b.n	800b162 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	68ba      	ldr	r2, [r7, #8]
 800b16c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b16e:	2101      	movs	r1, #1
 800b170:	69b8      	ldr	r0, [r7, #24]
 800b172:	f7ff fecb 	bl	800af0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	78fa      	ldrb	r2, [r7, #3]
 800b17a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b17e:	bf00      	nop
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
	...

0800b188 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08e      	sub	sp, #56	; 0x38
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b196:	2300      	movs	r3, #0
 800b198:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10a      	bne.n	800b1ba <xQueueGenericSend+0x32>
	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b1b6:	bf00      	nop
 800b1b8:	e7fe      	b.n	800b1b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d103      	bne.n	800b1c8 <xQueueGenericSend+0x40>
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d101      	bne.n	800b1cc <xQueueGenericSend+0x44>
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e000      	b.n	800b1ce <xQueueGenericSend+0x46>
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10a      	bne.n	800b1e8 <xQueueGenericSend+0x60>
	__asm volatile
 800b1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b1e4:	bf00      	nop
 800b1e6:	e7fe      	b.n	800b1e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d103      	bne.n	800b1f6 <xQueueGenericSend+0x6e>
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d101      	bne.n	800b1fa <xQueueGenericSend+0x72>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e000      	b.n	800b1fc <xQueueGenericSend+0x74>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10a      	bne.n	800b216 <xQueueGenericSend+0x8e>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	623b      	str	r3, [r7, #32]
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b216:	f001 fc09 	bl	800ca2c <xTaskGetSchedulerState>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d102      	bne.n	800b226 <xQueueGenericSend+0x9e>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d101      	bne.n	800b22a <xQueueGenericSend+0xa2>
 800b226:	2301      	movs	r3, #1
 800b228:	e000      	b.n	800b22c <xQueueGenericSend+0xa4>
 800b22a:	2300      	movs	r3, #0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10a      	bne.n	800b246 <xQueueGenericSend+0xbe>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	61fb      	str	r3, [r7, #28]
}
 800b242:	bf00      	nop
 800b244:	e7fe      	b.n	800b244 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b246:	f002 fa4d 	bl	800d6e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b252:	429a      	cmp	r2, r3
 800b254:	d302      	bcc.n	800b25c <xQueueGenericSend+0xd4>
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d129      	bne.n	800b2b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	68b9      	ldr	r1, [r7, #8]
 800b260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b262:	f000 fbbb 	bl	800b9dc <prvCopyDataToQueue>
 800b266:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d010      	beq.n	800b292 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b272:	3324      	adds	r3, #36	; 0x24
 800b274:	4618      	mov	r0, r3
 800b276:	f001 fa17 	bl	800c6a8 <xTaskRemoveFromEventList>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d013      	beq.n	800b2a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b280:	4b3f      	ldr	r3, [pc, #252]	; (800b380 <xQueueGenericSend+0x1f8>)
 800b282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	e00a      	b.n	800b2a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b294:	2b00      	cmp	r3, #0
 800b296:	d007      	beq.n	800b2a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b298:	4b39      	ldr	r3, [pc, #228]	; (800b380 <xQueueGenericSend+0x1f8>)
 800b29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b29e:	601a      	str	r2, [r3, #0]
 800b2a0:	f3bf 8f4f 	dsb	sy
 800b2a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b2a8:	f002 fa4c 	bl	800d744 <vPortExitCritical>
				return pdPASS;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e063      	b.n	800b378 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d103      	bne.n	800b2be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b2b6:	f002 fa45 	bl	800d744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	e05c      	b.n	800b378 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d106      	bne.n	800b2d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b2c4:	f107 0314 	add.w	r3, r7, #20
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f001 fa51 	bl	800c770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b2d2:	f002 fa37 	bl	800d744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b2d6:	f000 ffbd 	bl	800c254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2da:	f002 fa03 	bl	800d6e4 <vPortEnterCritical>
 800b2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2e4:	b25b      	sxtb	r3, r3
 800b2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ea:	d103      	bne.n	800b2f4 <xQueueGenericSend+0x16c>
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2fa:	b25b      	sxtb	r3, r3
 800b2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b300:	d103      	bne.n	800b30a <xQueueGenericSend+0x182>
 800b302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b304:	2200      	movs	r2, #0
 800b306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b30a:	f002 fa1b 	bl	800d744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b30e:	1d3a      	adds	r2, r7, #4
 800b310:	f107 0314 	add.w	r3, r7, #20
 800b314:	4611      	mov	r1, r2
 800b316:	4618      	mov	r0, r3
 800b318:	f001 fa40 	bl	800c79c <xTaskCheckForTimeOut>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d124      	bne.n	800b36c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b324:	f000 fc52 	bl	800bbcc <prvIsQueueFull>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d018      	beq.n	800b360 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b330:	3310      	adds	r3, #16
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	4611      	mov	r1, r2
 800b336:	4618      	mov	r0, r3
 800b338:	f001 f966 	bl	800c608 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b33c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b33e:	f000 fbdd 	bl	800bafc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b342:	f000 ff95 	bl	800c270 <xTaskResumeAll>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	f47f af7c 	bne.w	800b246 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b34e:	4b0c      	ldr	r3, [pc, #48]	; (800b380 <xQueueGenericSend+0x1f8>)
 800b350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b354:	601a      	str	r2, [r3, #0]
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	f3bf 8f6f 	isb	sy
 800b35e:	e772      	b.n	800b246 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b362:	f000 fbcb 	bl	800bafc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b366:	f000 ff83 	bl	800c270 <xTaskResumeAll>
 800b36a:	e76c      	b.n	800b246 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b36c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b36e:	f000 fbc5 	bl	800bafc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b372:	f000 ff7d 	bl	800c270 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b376:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3738      	adds	r7, #56	; 0x38
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	e000ed04 	.word	0xe000ed04

0800b384 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b090      	sub	sp, #64	; 0x40
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	607a      	str	r2, [r7, #4]
 800b390:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10a      	bne.n	800b3b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a0:	f383 8811 	msr	BASEPRI, r3
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b3ae:	bf00      	nop
 800b3b0:	e7fe      	b.n	800b3b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d103      	bne.n	800b3c0 <xQueueGenericSendFromISR+0x3c>
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <xQueueGenericSendFromISR+0x40>
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e000      	b.n	800b3c6 <xQueueGenericSendFromISR+0x42>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d10a      	bne.n	800b3e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b3dc:	bf00      	nop
 800b3de:	e7fe      	b.n	800b3de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	d103      	bne.n	800b3ee <xQueueGenericSendFromISR+0x6a>
 800b3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d101      	bne.n	800b3f2 <xQueueGenericSendFromISR+0x6e>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e000      	b.n	800b3f4 <xQueueGenericSendFromISR+0x70>
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10a      	bne.n	800b40e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	623b      	str	r3, [r7, #32]
}
 800b40a:	bf00      	nop
 800b40c:	e7fe      	b.n	800b40c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b40e:	f002 fa4b 	bl	800d8a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b412:	f3ef 8211 	mrs	r2, BASEPRI
 800b416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41a:	f383 8811 	msr	BASEPRI, r3
 800b41e:	f3bf 8f6f 	isb	sy
 800b422:	f3bf 8f4f 	dsb	sy
 800b426:	61fa      	str	r2, [r7, #28]
 800b428:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b42a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b42c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b436:	429a      	cmp	r2, r3
 800b438:	d302      	bcc.n	800b440 <xQueueGenericSendFromISR+0xbc>
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	d12f      	bne.n	800b4a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b450:	683a      	ldr	r2, [r7, #0]
 800b452:	68b9      	ldr	r1, [r7, #8]
 800b454:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b456:	f000 fac1 	bl	800b9dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b45a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b462:	d112      	bne.n	800b48a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d016      	beq.n	800b49a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46e:	3324      	adds	r3, #36	; 0x24
 800b470:	4618      	mov	r0, r3
 800b472:	f001 f919 	bl	800c6a8 <xTaskRemoveFromEventList>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00e      	beq.n	800b49a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00b      	beq.n	800b49a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	e007      	b.n	800b49a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b48a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b48e:	3301      	adds	r3, #1
 800b490:	b2db      	uxtb	r3, r3
 800b492:	b25a      	sxtb	r2, r3
 800b494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b49a:	2301      	movs	r3, #1
 800b49c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b49e:	e001      	b.n	800b4a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b4ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3740      	adds	r7, #64	; 0x40
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b08e      	sub	sp, #56	; 0x38
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
 800b4c2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d10a      	bne.n	800b4e4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d2:	f383 8811 	msr	BASEPRI, r3
 800b4d6:	f3bf 8f6f 	isb	sy
 800b4da:	f3bf 8f4f 	dsb	sy
 800b4de:	623b      	str	r3, [r7, #32]
}
 800b4e0:	bf00      	nop
 800b4e2:	e7fe      	b.n	800b4e2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00a      	beq.n	800b502 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f0:	f383 8811 	msr	BASEPRI, r3
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	61fb      	str	r3, [r7, #28]
}
 800b4fe:	bf00      	nop
 800b500:	e7fe      	b.n	800b500 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d103      	bne.n	800b512 <xQueueGiveFromISR+0x58>
 800b50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d101      	bne.n	800b516 <xQueueGiveFromISR+0x5c>
 800b512:	2301      	movs	r3, #1
 800b514:	e000      	b.n	800b518 <xQueueGiveFromISR+0x5e>
 800b516:	2300      	movs	r3, #0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10a      	bne.n	800b532 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	61bb      	str	r3, [r7, #24]
}
 800b52e:	bf00      	nop
 800b530:	e7fe      	b.n	800b530 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b532:	f002 f9b9 	bl	800d8a8 <vPortValidateInterruptPriority>
	__asm volatile
 800b536:	f3ef 8211 	mrs	r2, BASEPRI
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	617a      	str	r2, [r7, #20]
 800b54c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b54e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b550:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b556:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b55c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b55e:	429a      	cmp	r2, r3
 800b560:	d22b      	bcs.n	800b5ba <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56e:	1c5a      	adds	r2, r3, #1
 800b570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b572:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b574:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b57c:	d112      	bne.n	800b5a4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b582:	2b00      	cmp	r3, #0
 800b584:	d016      	beq.n	800b5b4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b588:	3324      	adds	r3, #36	; 0x24
 800b58a:	4618      	mov	r0, r3
 800b58c:	f001 f88c 	bl	800c6a8 <xTaskRemoveFromEventList>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00e      	beq.n	800b5b4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00b      	beq.n	800b5b4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	601a      	str	r2, [r3, #0]
 800b5a2:	e007      	b.n	800b5b4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	b25a      	sxtb	r2, r3
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	637b      	str	r3, [r7, #52]	; 0x34
 800b5b8:	e001      	b.n	800b5be <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	637b      	str	r3, [r7, #52]	; 0x34
 800b5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f383 8811 	msr	BASEPRI, r3
}
 800b5c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3738      	adds	r7, #56	; 0x38
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b08c      	sub	sp, #48	; 0x30
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10a      	bne.n	800b604 <xQueueReceive+0x30>
	__asm volatile
 800b5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f2:	f383 8811 	msr	BASEPRI, r3
 800b5f6:	f3bf 8f6f 	isb	sy
 800b5fa:	f3bf 8f4f 	dsb	sy
 800b5fe:	623b      	str	r3, [r7, #32]
}
 800b600:	bf00      	nop
 800b602:	e7fe      	b.n	800b602 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d103      	bne.n	800b612 <xQueueReceive+0x3e>
 800b60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <xQueueReceive+0x42>
 800b612:	2301      	movs	r3, #1
 800b614:	e000      	b.n	800b618 <xQueueReceive+0x44>
 800b616:	2300      	movs	r3, #0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10a      	bne.n	800b632 <xQueueReceive+0x5e>
	__asm volatile
 800b61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	61fb      	str	r3, [r7, #28]
}
 800b62e:	bf00      	nop
 800b630:	e7fe      	b.n	800b630 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b632:	f001 f9fb 	bl	800ca2c <xTaskGetSchedulerState>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d102      	bne.n	800b642 <xQueueReceive+0x6e>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d101      	bne.n	800b646 <xQueueReceive+0x72>
 800b642:	2301      	movs	r3, #1
 800b644:	e000      	b.n	800b648 <xQueueReceive+0x74>
 800b646:	2300      	movs	r3, #0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10a      	bne.n	800b662 <xQueueReceive+0x8e>
	__asm volatile
 800b64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b650:	f383 8811 	msr	BASEPRI, r3
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	61bb      	str	r3, [r7, #24]
}
 800b65e:	bf00      	nop
 800b660:	e7fe      	b.n	800b660 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b662:	f002 f83f 	bl	800d6e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b66a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d01f      	beq.n	800b6b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b672:	68b9      	ldr	r1, [r7, #8]
 800b674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b676:	f000 fa1b 	bl	800bab0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67c:	1e5a      	subs	r2, r3, #1
 800b67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b680:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00f      	beq.n	800b6aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68c:	3310      	adds	r3, #16
 800b68e:	4618      	mov	r0, r3
 800b690:	f001 f80a 	bl	800c6a8 <xTaskRemoveFromEventList>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d007      	beq.n	800b6aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b69a:	4b3d      	ldr	r3, [pc, #244]	; (800b790 <xQueueReceive+0x1bc>)
 800b69c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6a0:	601a      	str	r2, [r3, #0]
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6aa:	f002 f84b 	bl	800d744 <vPortExitCritical>
				return pdPASS;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e069      	b.n	800b786 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d103      	bne.n	800b6c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6b8:	f002 f844 	bl	800d744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	e062      	b.n	800b786 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d106      	bne.n	800b6d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6c6:	f107 0310 	add.w	r3, r7, #16
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f001 f850 	bl	800c770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6d4:	f002 f836 	bl	800d744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6d8:	f000 fdbc 	bl	800c254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6dc:	f002 f802 	bl	800d6e4 <vPortEnterCritical>
 800b6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6e6:	b25b      	sxtb	r3, r3
 800b6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ec:	d103      	bne.n	800b6f6 <xQueueReceive+0x122>
 800b6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6fc:	b25b      	sxtb	r3, r3
 800b6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b702:	d103      	bne.n	800b70c <xQueueReceive+0x138>
 800b704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b706:	2200      	movs	r2, #0
 800b708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b70c:	f002 f81a 	bl	800d744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b710:	1d3a      	adds	r2, r7, #4
 800b712:	f107 0310 	add.w	r3, r7, #16
 800b716:	4611      	mov	r1, r2
 800b718:	4618      	mov	r0, r3
 800b71a:	f001 f83f 	bl	800c79c <xTaskCheckForTimeOut>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d123      	bne.n	800b76c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b726:	f000 fa3b 	bl	800bba0 <prvIsQueueEmpty>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d017      	beq.n	800b760 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b732:	3324      	adds	r3, #36	; 0x24
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	4611      	mov	r1, r2
 800b738:	4618      	mov	r0, r3
 800b73a:	f000 ff65 	bl	800c608 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b73e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b740:	f000 f9dc 	bl	800bafc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b744:	f000 fd94 	bl	800c270 <xTaskResumeAll>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d189      	bne.n	800b662 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b74e:	4b10      	ldr	r3, [pc, #64]	; (800b790 <xQueueReceive+0x1bc>)
 800b750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b754:	601a      	str	r2, [r3, #0]
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	e780      	b.n	800b662 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b762:	f000 f9cb 	bl	800bafc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b766:	f000 fd83 	bl	800c270 <xTaskResumeAll>
 800b76a:	e77a      	b.n	800b662 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b76c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b76e:	f000 f9c5 	bl	800bafc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b772:	f000 fd7d 	bl	800c270 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b778:	f000 fa12 	bl	800bba0 <prvIsQueueEmpty>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f43f af6f 	beq.w	800b662 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b784:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b786:	4618      	mov	r0, r3
 800b788:	3730      	adds	r7, #48	; 0x30
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	e000ed04 	.word	0xe000ed04

0800b794 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b08e      	sub	sp, #56	; 0x38
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10a      	bne.n	800b7c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	623b      	str	r3, [r7, #32]
}
 800b7c2:	bf00      	nop
 800b7c4:	e7fe      	b.n	800b7c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00a      	beq.n	800b7e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	61fb      	str	r3, [r7, #28]
}
 800b7e0:	bf00      	nop
 800b7e2:	e7fe      	b.n	800b7e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7e4:	f001 f922 	bl	800ca2c <xTaskGetSchedulerState>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d102      	bne.n	800b7f4 <xQueueSemaphoreTake+0x60>
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <xQueueSemaphoreTake+0x64>
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e000      	b.n	800b7fa <xQueueSemaphoreTake+0x66>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10a      	bne.n	800b814 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	61bb      	str	r3, [r7, #24]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b814:	f001 ff66 	bl	800d6e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b81c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b820:	2b00      	cmp	r3, #0
 800b822:	d024      	beq.n	800b86e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b826:	1e5a      	subs	r2, r3, #1
 800b828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d104      	bne.n	800b83e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b834:	f001 fa70 	bl	800cd18 <pvTaskIncrementMutexHeldCount>
 800b838:	4602      	mov	r2, r0
 800b83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00f      	beq.n	800b866 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b848:	3310      	adds	r3, #16
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 ff2c 	bl	800c6a8 <xTaskRemoveFromEventList>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d007      	beq.n	800b866 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b856:	4b54      	ldr	r3, [pc, #336]	; (800b9a8 <xQueueSemaphoreTake+0x214>)
 800b858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b85c:	601a      	str	r2, [r3, #0]
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b866:	f001 ff6d 	bl	800d744 <vPortExitCritical>
				return pdPASS;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e097      	b.n	800b99e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d111      	bne.n	800b898 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00a      	beq.n	800b890 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87e:	f383 8811 	msr	BASEPRI, r3
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	617b      	str	r3, [r7, #20]
}
 800b88c:	bf00      	nop
 800b88e:	e7fe      	b.n	800b88e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b890:	f001 ff58 	bl	800d744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b894:	2300      	movs	r3, #0
 800b896:	e082      	b.n	800b99e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d106      	bne.n	800b8ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b89e:	f107 030c 	add.w	r3, r7, #12
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 ff64 	bl	800c770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8ac:	f001 ff4a 	bl	800d744 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8b0:	f000 fcd0 	bl	800c254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8b4:	f001 ff16 	bl	800d6e4 <vPortEnterCritical>
 800b8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8be:	b25b      	sxtb	r3, r3
 800b8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c4:	d103      	bne.n	800b8ce <xQueueSemaphoreTake+0x13a>
 800b8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8d4:	b25b      	sxtb	r3, r3
 800b8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8da:	d103      	bne.n	800b8e4 <xQueueSemaphoreTake+0x150>
 800b8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8e4:	f001 ff2e 	bl	800d744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8e8:	463a      	mov	r2, r7
 800b8ea:	f107 030c 	add.w	r3, r7, #12
 800b8ee:	4611      	mov	r1, r2
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f000 ff53 	bl	800c79c <xTaskCheckForTimeOut>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d132      	bne.n	800b962 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8fe:	f000 f94f 	bl	800bba0 <prvIsQueueEmpty>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d026      	beq.n	800b956 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d109      	bne.n	800b924 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b910:	f001 fee8 	bl	800d6e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	4618      	mov	r0, r3
 800b91a:	f001 f8a5 	bl	800ca68 <xTaskPriorityInherit>
 800b91e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b920:	f001 ff10 	bl	800d744 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b926:	3324      	adds	r3, #36	; 0x24
 800b928:	683a      	ldr	r2, [r7, #0]
 800b92a:	4611      	mov	r1, r2
 800b92c:	4618      	mov	r0, r3
 800b92e:	f000 fe6b 	bl	800c608 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b932:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b934:	f000 f8e2 	bl	800bafc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b938:	f000 fc9a 	bl	800c270 <xTaskResumeAll>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f47f af68 	bne.w	800b814 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b944:	4b18      	ldr	r3, [pc, #96]	; (800b9a8 <xQueueSemaphoreTake+0x214>)
 800b946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b94a:	601a      	str	r2, [r3, #0]
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	e75e      	b.n	800b814 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b956:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b958:	f000 f8d0 	bl	800bafc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b95c:	f000 fc88 	bl	800c270 <xTaskResumeAll>
 800b960:	e758      	b.n	800b814 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b964:	f000 f8ca 	bl	800bafc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b968:	f000 fc82 	bl	800c270 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b96c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b96e:	f000 f917 	bl	800bba0 <prvIsQueueEmpty>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	f43f af4d 	beq.w	800b814 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00d      	beq.n	800b99c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b980:	f001 feb0 	bl	800d6e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b986:	f000 f811 	bl	800b9ac <prvGetDisinheritPriorityAfterTimeout>
 800b98a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b992:	4618      	mov	r0, r3
 800b994:	f001 f93e 	bl	800cc14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b998:	f001 fed4 	bl	800d744 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b99c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3738      	adds	r7, #56	; 0x38
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	e000ed04 	.word	0xe000ed04

0800b9ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d006      	beq.n	800b9ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b9c6:	60fb      	str	r3, [r7, #12]
 800b9c8:	e001      	b.n	800b9ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
	}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b086      	sub	sp, #24
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10d      	bne.n	800ba16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d14d      	bne.n	800ba9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	4618      	mov	r0, r3
 800ba08:	f001 f896 	bl	800cb38 <xTaskPriorityDisinherit>
 800ba0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2200      	movs	r2, #0
 800ba12:	609a      	str	r2, [r3, #8]
 800ba14:	e043      	b.n	800ba9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d119      	bne.n	800ba50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6858      	ldr	r0, [r3, #4]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba24:	461a      	mov	r2, r3
 800ba26:	68b9      	ldr	r1, [r7, #8]
 800ba28:	f006 f8d4 	bl	8011bd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	685a      	ldr	r2, [r3, #4]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba34:	441a      	add	r2, r3
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	685a      	ldr	r2, [r3, #4]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d32b      	bcc.n	800ba9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	605a      	str	r2, [r3, #4]
 800ba4e:	e026      	b.n	800ba9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	68d8      	ldr	r0, [r3, #12]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba58:	461a      	mov	r2, r3
 800ba5a:	68b9      	ldr	r1, [r7, #8]
 800ba5c:	f006 f8ba 	bl	8011bd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	68da      	ldr	r2, [r3, #12]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba68:	425b      	negs	r3, r3
 800ba6a:	441a      	add	r2, r3
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	68da      	ldr	r2, [r3, #12]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d207      	bcs.n	800ba8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	689a      	ldr	r2, [r3, #8]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba84:	425b      	negs	r3, r3
 800ba86:	441a      	add	r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d105      	bne.n	800ba9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d002      	beq.n	800ba9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	1c5a      	adds	r2, r3, #1
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800baa6:	697b      	ldr	r3, [r7, #20]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3718      	adds	r7, #24
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d018      	beq.n	800baf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	68da      	ldr	r2, [r3, #12]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baca:	441a      	add	r2, r3
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	68da      	ldr	r2, [r3, #12]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d303      	bcc.n	800bae4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	68d9      	ldr	r1, [r3, #12]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baec:	461a      	mov	r2, r3
 800baee:	6838      	ldr	r0, [r7, #0]
 800baf0:	f006 f870 	bl	8011bd4 <memcpy>
	}
}
 800baf4:	bf00      	nop
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bb04:	f001 fdee 	bl	800d6e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb10:	e011      	b.n	800bb36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d012      	beq.n	800bb40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	3324      	adds	r3, #36	; 0x24
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f000 fdc2 	bl	800c6a8 <xTaskRemoveFromEventList>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d001      	beq.n	800bb2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bb2a:	f000 fe99 	bl	800c860 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bb2e:	7bfb      	ldrb	r3, [r7, #15]
 800bb30:	3b01      	subs	r3, #1
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	dce9      	bgt.n	800bb12 <prvUnlockQueue+0x16>
 800bb3e:	e000      	b.n	800bb42 <prvUnlockQueue+0x46>
					break;
 800bb40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	22ff      	movs	r2, #255	; 0xff
 800bb46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bb4a:	f001 fdfb 	bl	800d744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bb4e:	f001 fdc9 	bl	800d6e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb5a:	e011      	b.n	800bb80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d012      	beq.n	800bb8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	3310      	adds	r3, #16
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 fd9d 	bl	800c6a8 <xTaskRemoveFromEventList>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bb74:	f000 fe74 	bl	800c860 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bb78:	7bbb      	ldrb	r3, [r7, #14]
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	dce9      	bgt.n	800bb5c <prvUnlockQueue+0x60>
 800bb88:	e000      	b.n	800bb8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bb8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	22ff      	movs	r2, #255	; 0xff
 800bb90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bb94:	f001 fdd6 	bl	800d744 <vPortExitCritical>
}
 800bb98:	bf00      	nop
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bba8:	f001 fd9c 	bl	800d6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d102      	bne.n	800bbba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	60fb      	str	r3, [r7, #12]
 800bbb8:	e001      	b.n	800bbbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bbbe:	f001 fdc1 	bl	800d744 <vPortExitCritical>

	return xReturn;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bbd4:	f001 fd86 	bl	800d6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d102      	bne.n	800bbea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	60fb      	str	r3, [r7, #12]
 800bbe8:	e001      	b.n	800bbee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bbea:	2300      	movs	r3, #0
 800bbec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bbee:	f001 fda9 	bl	800d744 <vPortExitCritical>

	return xReturn;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc06:	2300      	movs	r3, #0
 800bc08:	60fb      	str	r3, [r7, #12]
 800bc0a:	e014      	b.n	800bc36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bc0c:	4a0f      	ldr	r2, [pc, #60]	; (800bc4c <vQueueAddToRegistry+0x50>)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10b      	bne.n	800bc30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bc18:	490c      	ldr	r1, [pc, #48]	; (800bc4c <vQueueAddToRegistry+0x50>)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	683a      	ldr	r2, [r7, #0]
 800bc1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bc22:	4a0a      	ldr	r2, [pc, #40]	; (800bc4c <vQueueAddToRegistry+0x50>)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	00db      	lsls	r3, r3, #3
 800bc28:	4413      	add	r3, r2
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bc2e:	e006      	b.n	800bc3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	3301      	adds	r3, #1
 800bc34:	60fb      	str	r3, [r7, #12]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2b07      	cmp	r3, #7
 800bc3a:	d9e7      	bls.n	800bc0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bc3c:	bf00      	nop
 800bc3e:	bf00      	nop
 800bc40:	3714      	adds	r7, #20
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	200023b0 	.word	0x200023b0

0800bc50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bc60:	f001 fd40 	bl	800d6e4 <vPortEnterCritical>
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc6a:	b25b      	sxtb	r3, r3
 800bc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc70:	d103      	bne.n	800bc7a <vQueueWaitForMessageRestricted+0x2a>
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	2200      	movs	r2, #0
 800bc76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc80:	b25b      	sxtb	r3, r3
 800bc82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc86:	d103      	bne.n	800bc90 <vQueueWaitForMessageRestricted+0x40>
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc90:	f001 fd58 	bl	800d744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d106      	bne.n	800bcaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	3324      	adds	r3, #36	; 0x24
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	68b9      	ldr	r1, [r7, #8]
 800bca4:	4618      	mov	r0, r3
 800bca6:	f000 fcd3 	bl	800c650 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bcaa:	6978      	ldr	r0, [r7, #20]
 800bcac:	f7ff ff26 	bl	800bafc <prvUnlockQueue>
	}
 800bcb0:	bf00      	nop
 800bcb2:	3718      	adds	r7, #24
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b08e      	sub	sp, #56	; 0x38
 800bcbc:	af04      	add	r7, sp, #16
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
 800bcc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bcc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10a      	bne.n	800bce2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd0:	f383 8811 	msr	BASEPRI, r3
 800bcd4:	f3bf 8f6f 	isb	sy
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	623b      	str	r3, [r7, #32]
}
 800bcde:	bf00      	nop
 800bce0:	e7fe      	b.n	800bce0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <xTaskCreateStatic+0x46>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	61fb      	str	r3, [r7, #28]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bcfe:	23bc      	movs	r3, #188	; 0xbc
 800bd00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	2bbc      	cmp	r3, #188	; 0xbc
 800bd06:	d00a      	beq.n	800bd1e <xTaskCreateStatic+0x66>
	__asm volatile
 800bd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0c:	f383 8811 	msr	BASEPRI, r3
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	61bb      	str	r3, [r7, #24]
}
 800bd1a:	bf00      	nop
 800bd1c:	e7fe      	b.n	800bd1c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bd1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d01e      	beq.n	800bd64 <xTaskCreateStatic+0xac>
 800bd26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d01b      	beq.n	800bd64 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd38:	2202      	movs	r2, #2
 800bd3a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bd3e:	2300      	movs	r3, #0
 800bd40:	9303      	str	r3, [sp, #12]
 800bd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd44:	9302      	str	r3, [sp, #8]
 800bd46:	f107 0314 	add.w	r3, r7, #20
 800bd4a:	9301      	str	r3, [sp, #4]
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	68b9      	ldr	r1, [r7, #8]
 800bd56:	68f8      	ldr	r0, [r7, #12]
 800bd58:	f000 f850 	bl	800bdfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd5e:	f000 f8f3 	bl	800bf48 <prvAddNewTaskToReadyList>
 800bd62:	e001      	b.n	800bd68 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bd64:	2300      	movs	r3, #0
 800bd66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bd68:	697b      	ldr	r3, [r7, #20]
	}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3728      	adds	r7, #40	; 0x28
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b08c      	sub	sp, #48	; 0x30
 800bd76:	af04      	add	r7, sp, #16
 800bd78:	60f8      	str	r0, [r7, #12]
 800bd7a:	60b9      	str	r1, [r7, #8]
 800bd7c:	603b      	str	r3, [r7, #0]
 800bd7e:	4613      	mov	r3, r2
 800bd80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd82:	88fb      	ldrh	r3, [r7, #6]
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	4618      	mov	r0, r3
 800bd88:	f001 fdce 	bl	800d928 <pvPortMalloc>
 800bd8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00e      	beq.n	800bdb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd94:	20bc      	movs	r0, #188	; 0xbc
 800bd96:	f001 fdc7 	bl	800d928 <pvPortMalloc>
 800bd9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d003      	beq.n	800bdaa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	697a      	ldr	r2, [r7, #20]
 800bda6:	631a      	str	r2, [r3, #48]	; 0x30
 800bda8:	e005      	b.n	800bdb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bdaa:	6978      	ldr	r0, [r7, #20]
 800bdac:	f001 fe88 	bl	800dac0 <vPortFree>
 800bdb0:	e001      	b.n	800bdb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bdb6:	69fb      	ldr	r3, [r7, #28]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d017      	beq.n	800bdec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bdc4:	88fa      	ldrh	r2, [r7, #6]
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	9303      	str	r3, [sp, #12]
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	9302      	str	r3, [sp, #8]
 800bdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd0:	9301      	str	r3, [sp, #4]
 800bdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	68b9      	ldr	r1, [r7, #8]
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 f80e 	bl	800bdfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bde0:	69f8      	ldr	r0, [r7, #28]
 800bde2:	f000 f8b1 	bl	800bf48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bde6:	2301      	movs	r3, #1
 800bde8:	61bb      	str	r3, [r7, #24]
 800bdea:	e002      	b.n	800bdf2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bdec:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bdf2:	69bb      	ldr	r3, [r7, #24]
	}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3720      	adds	r7, #32
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b088      	sub	sp, #32
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
 800be08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800be0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	461a      	mov	r2, r3
 800be14:	21a5      	movs	r1, #165	; 0xa5
 800be16:	f005 feeb 	bl	8011bf0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800be1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800be24:	3b01      	subs	r3, #1
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4413      	add	r3, r2
 800be2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	f023 0307 	bic.w	r3, r3, #7
 800be32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	f003 0307 	and.w	r3, r3, #7
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00a      	beq.n	800be54 <prvInitialiseNewTask+0x58>
	__asm volatile
 800be3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be42:	f383 8811 	msr	BASEPRI, r3
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	617b      	str	r3, [r7, #20]
}
 800be50:	bf00      	nop
 800be52:	e7fe      	b.n	800be52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d01f      	beq.n	800be9a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be5a:	2300      	movs	r3, #0
 800be5c:	61fb      	str	r3, [r7, #28]
 800be5e:	e012      	b.n	800be86 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	4413      	add	r3, r2
 800be66:	7819      	ldrb	r1, [r3, #0]
 800be68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	4413      	add	r3, r2
 800be6e:	3334      	adds	r3, #52	; 0x34
 800be70:	460a      	mov	r2, r1
 800be72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	4413      	add	r3, r2
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d006      	beq.n	800be8e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be80:	69fb      	ldr	r3, [r7, #28]
 800be82:	3301      	adds	r3, #1
 800be84:	61fb      	str	r3, [r7, #28]
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	2b0f      	cmp	r3, #15
 800be8a:	d9e9      	bls.n	800be60 <prvInitialiseNewTask+0x64>
 800be8c:	e000      	b.n	800be90 <prvInitialiseNewTask+0x94>
			{
				break;
 800be8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be92:	2200      	movs	r2, #0
 800be94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800be98:	e003      	b.n	800bea2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9c:	2200      	movs	r2, #0
 800be9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea4:	2b37      	cmp	r3, #55	; 0x37
 800bea6:	d901      	bls.n	800beac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bea8:	2337      	movs	r3, #55	; 0x37
 800beaa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800beac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800beb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beba:	2200      	movs	r2, #0
 800bebc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	3304      	adds	r3, #4
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7fe ff8e 	bl	800ade4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beca:	3318      	adds	r3, #24
 800becc:	4618      	mov	r0, r3
 800bece:	f7fe ff89 	bl	800ade4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bed6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bee6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beea:	2200      	movs	r2, #0
 800beec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef2:	2200      	movs	r2, #0
 800bef4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befa:	3354      	adds	r3, #84	; 0x54
 800befc:	2260      	movs	r2, #96	; 0x60
 800befe:	2100      	movs	r1, #0
 800bf00:	4618      	mov	r0, r3
 800bf02:	f005 fe75 	bl	8011bf0 <memset>
 800bf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf08:	4a0c      	ldr	r2, [pc, #48]	; (800bf3c <prvInitialiseNewTask+0x140>)
 800bf0a:	659a      	str	r2, [r3, #88]	; 0x58
 800bf0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0e:	4a0c      	ldr	r2, [pc, #48]	; (800bf40 <prvInitialiseNewTask+0x144>)
 800bf10:	65da      	str	r2, [r3, #92]	; 0x5c
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	4a0b      	ldr	r2, [pc, #44]	; (800bf44 <prvInitialiseNewTask+0x148>)
 800bf16:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf18:	683a      	ldr	r2, [r7, #0]
 800bf1a:	68f9      	ldr	r1, [r7, #12]
 800bf1c:	69b8      	ldr	r0, [r7, #24]
 800bf1e:	f001 fab1 	bl	800d484 <pxPortInitialiseStack>
 800bf22:	4602      	mov	r2, r0
 800bf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d002      	beq.n	800bf34 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf34:	bf00      	nop
 800bf36:	3720      	adds	r7, #32
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	08017640 	.word	0x08017640
 800bf40:	08017660 	.word	0x08017660
 800bf44:	08017620 	.word	0x08017620

0800bf48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bf50:	f001 fbc8 	bl	800d6e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bf54:	4b2d      	ldr	r3, [pc, #180]	; (800c00c <prvAddNewTaskToReadyList+0xc4>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	4a2c      	ldr	r2, [pc, #176]	; (800c00c <prvAddNewTaskToReadyList+0xc4>)
 800bf5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bf5e:	4b2c      	ldr	r3, [pc, #176]	; (800c010 <prvAddNewTaskToReadyList+0xc8>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d109      	bne.n	800bf7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bf66:	4a2a      	ldr	r2, [pc, #168]	; (800c010 <prvAddNewTaskToReadyList+0xc8>)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf6c:	4b27      	ldr	r3, [pc, #156]	; (800c00c <prvAddNewTaskToReadyList+0xc4>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d110      	bne.n	800bf96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bf74:	f000 fc98 	bl	800c8a8 <prvInitialiseTaskLists>
 800bf78:	e00d      	b.n	800bf96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bf7a:	4b26      	ldr	r3, [pc, #152]	; (800c014 <prvAddNewTaskToReadyList+0xcc>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d109      	bne.n	800bf96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf82:	4b23      	ldr	r3, [pc, #140]	; (800c010 <prvAddNewTaskToReadyList+0xc8>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d802      	bhi.n	800bf96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf90:	4a1f      	ldr	r2, [pc, #124]	; (800c010 <prvAddNewTaskToReadyList+0xc8>)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf96:	4b20      	ldr	r3, [pc, #128]	; (800c018 <prvAddNewTaskToReadyList+0xd0>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	4a1e      	ldr	r2, [pc, #120]	; (800c018 <prvAddNewTaskToReadyList+0xd0>)
 800bf9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bfa0:	4b1d      	ldr	r3, [pc, #116]	; (800c018 <prvAddNewTaskToReadyList+0xd0>)
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfac:	4b1b      	ldr	r3, [pc, #108]	; (800c01c <prvAddNewTaskToReadyList+0xd4>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d903      	bls.n	800bfbc <prvAddNewTaskToReadyList+0x74>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb8:	4a18      	ldr	r2, [pc, #96]	; (800c01c <prvAddNewTaskToReadyList+0xd4>)
 800bfba:	6013      	str	r3, [r2, #0]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4413      	add	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4a15      	ldr	r2, [pc, #84]	; (800c020 <prvAddNewTaskToReadyList+0xd8>)
 800bfca:	441a      	add	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	3304      	adds	r3, #4
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	4610      	mov	r0, r2
 800bfd4:	f7fe ff13 	bl	800adfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bfd8:	f001 fbb4 	bl	800d744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bfdc:	4b0d      	ldr	r3, [pc, #52]	; (800c014 <prvAddNewTaskToReadyList+0xcc>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00e      	beq.n	800c002 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bfe4:	4b0a      	ldr	r3, [pc, #40]	; (800c010 <prvAddNewTaskToReadyList+0xc8>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d207      	bcs.n	800c002 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bff2:	4b0c      	ldr	r3, [pc, #48]	; (800c024 <prvAddNewTaskToReadyList+0xdc>)
 800bff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bff8:	601a      	str	r2, [r3, #0]
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c002:	bf00      	nop
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	200028c4 	.word	0x200028c4
 800c010:	200023f0 	.word	0x200023f0
 800c014:	200028d0 	.word	0x200028d0
 800c018:	200028e0 	.word	0x200028e0
 800c01c:	200028cc 	.word	0x200028cc
 800c020:	200023f4 	.word	0x200023f4
 800c024:	e000ed04 	.word	0xe000ed04

0800c028 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c030:	f001 fb58 	bl	800d6e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d102      	bne.n	800c040 <vTaskDelete+0x18>
 800c03a:	4b2c      	ldr	r3, [pc, #176]	; (800c0ec <vTaskDelete+0xc4>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	e000      	b.n	800c042 <vTaskDelete+0x1a>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	3304      	adds	r3, #4
 800c048:	4618      	mov	r0, r3
 800c04a:	f7fe ff35 	bl	800aeb8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c052:	2b00      	cmp	r3, #0
 800c054:	d004      	beq.n	800c060 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	3318      	adds	r3, #24
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fe ff2c 	bl	800aeb8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c060:	4b23      	ldr	r3, [pc, #140]	; (800c0f0 <vTaskDelete+0xc8>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3301      	adds	r3, #1
 800c066:	4a22      	ldr	r2, [pc, #136]	; (800c0f0 <vTaskDelete+0xc8>)
 800c068:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c06a:	4b20      	ldr	r3, [pc, #128]	; (800c0ec <vTaskDelete+0xc4>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	68fa      	ldr	r2, [r7, #12]
 800c070:	429a      	cmp	r2, r3
 800c072:	d10b      	bne.n	800c08c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	3304      	adds	r3, #4
 800c078:	4619      	mov	r1, r3
 800c07a:	481e      	ldr	r0, [pc, #120]	; (800c0f4 <vTaskDelete+0xcc>)
 800c07c:	f7fe febf 	bl	800adfe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c080:	4b1d      	ldr	r3, [pc, #116]	; (800c0f8 <vTaskDelete+0xd0>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	3301      	adds	r3, #1
 800c086:	4a1c      	ldr	r2, [pc, #112]	; (800c0f8 <vTaskDelete+0xd0>)
 800c088:	6013      	str	r3, [r2, #0]
 800c08a:	e009      	b.n	800c0a0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c08c:	4b1b      	ldr	r3, [pc, #108]	; (800c0fc <vTaskDelete+0xd4>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	3b01      	subs	r3, #1
 800c092:	4a1a      	ldr	r2, [pc, #104]	; (800c0fc <vTaskDelete+0xd4>)
 800c094:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f000 fc74 	bl	800c984 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c09c:	f000 fca6 	bl	800c9ec <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800c0a0:	f001 fb50 	bl	800d744 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c0a4:	4b16      	ldr	r3, [pc, #88]	; (800c100 <vTaskDelete+0xd8>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d01b      	beq.n	800c0e4 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800c0ac:	4b0f      	ldr	r3, [pc, #60]	; (800c0ec <vTaskDelete+0xc4>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d116      	bne.n	800c0e4 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c0b6:	4b13      	ldr	r3, [pc, #76]	; (800c104 <vTaskDelete+0xdc>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00a      	beq.n	800c0d4 <vTaskDelete+0xac>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	60bb      	str	r3, [r7, #8]
}
 800c0d0:	bf00      	nop
 800c0d2:	e7fe      	b.n	800c0d2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800c0d4:	4b0c      	ldr	r3, [pc, #48]	; (800c108 <vTaskDelete+0xe0>)
 800c0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0da:	601a      	str	r2, [r3, #0]
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c0e4:	bf00      	nop
 800c0e6:	3710      	adds	r7, #16
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	200023f0 	.word	0x200023f0
 800c0f0:	200028e0 	.word	0x200028e0
 800c0f4:	20002898 	.word	0x20002898
 800c0f8:	200028ac 	.word	0x200028ac
 800c0fc:	200028c4 	.word	0x200028c4
 800c100:	200028d0 	.word	0x200028d0
 800c104:	200028ec 	.word	0x200028ec
 800c108:	e000ed04 	.word	0xe000ed04

0800c10c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c114:	2300      	movs	r3, #0
 800c116:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d017      	beq.n	800c14e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c11e:	4b13      	ldr	r3, [pc, #76]	; (800c16c <vTaskDelay+0x60>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d00a      	beq.n	800c13c <vTaskDelay+0x30>
	__asm volatile
 800c126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f3bf 8f4f 	dsb	sy
 800c136:	60bb      	str	r3, [r7, #8]
}
 800c138:	bf00      	nop
 800c13a:	e7fe      	b.n	800c13a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c13c:	f000 f88a 	bl	800c254 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c140:	2100      	movs	r1, #0
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 fdfc 	bl	800cd40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c148:	f000 f892 	bl	800c270 <xTaskResumeAll>
 800c14c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d107      	bne.n	800c164 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c154:	4b06      	ldr	r3, [pc, #24]	; (800c170 <vTaskDelay+0x64>)
 800c156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c15a:	601a      	str	r2, [r3, #0]
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c164:	bf00      	nop
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	200028ec 	.word	0x200028ec
 800c170:	e000ed04 	.word	0xe000ed04

0800c174 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b08a      	sub	sp, #40	; 0x28
 800c178:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c17a:	2300      	movs	r3, #0
 800c17c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c17e:	2300      	movs	r3, #0
 800c180:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c182:	463a      	mov	r2, r7
 800c184:	1d39      	adds	r1, r7, #4
 800c186:	f107 0308 	add.w	r3, r7, #8
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fe fdd6 	bl	800ad3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c190:	6839      	ldr	r1, [r7, #0]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	9202      	str	r2, [sp, #8]
 800c198:	9301      	str	r3, [sp, #4]
 800c19a:	2300      	movs	r3, #0
 800c19c:	9300      	str	r3, [sp, #0]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	460a      	mov	r2, r1
 800c1a2:	4924      	ldr	r1, [pc, #144]	; (800c234 <vTaskStartScheduler+0xc0>)
 800c1a4:	4824      	ldr	r0, [pc, #144]	; (800c238 <vTaskStartScheduler+0xc4>)
 800c1a6:	f7ff fd87 	bl	800bcb8 <xTaskCreateStatic>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	4a23      	ldr	r2, [pc, #140]	; (800c23c <vTaskStartScheduler+0xc8>)
 800c1ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c1b0:	4b22      	ldr	r3, [pc, #136]	; (800c23c <vTaskStartScheduler+0xc8>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d002      	beq.n	800c1be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	617b      	str	r3, [r7, #20]
 800c1bc:	e001      	b.n	800c1c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d102      	bne.n	800c1ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c1c8:	f000 fe0e 	bl	800cde8 <xTimerCreateTimerTask>
 800c1cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d11b      	bne.n	800c20c <vTaskStartScheduler+0x98>
	__asm volatile
 800c1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d8:	f383 8811 	msr	BASEPRI, r3
 800c1dc:	f3bf 8f6f 	isb	sy
 800c1e0:	f3bf 8f4f 	dsb	sy
 800c1e4:	613b      	str	r3, [r7, #16]
}
 800c1e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c1e8:	4b15      	ldr	r3, [pc, #84]	; (800c240 <vTaskStartScheduler+0xcc>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	3354      	adds	r3, #84	; 0x54
 800c1ee:	4a15      	ldr	r2, [pc, #84]	; (800c244 <vTaskStartScheduler+0xd0>)
 800c1f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c1f2:	4b15      	ldr	r3, [pc, #84]	; (800c248 <vTaskStartScheduler+0xd4>)
 800c1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c1fa:	4b14      	ldr	r3, [pc, #80]	; (800c24c <vTaskStartScheduler+0xd8>)
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c200:	4b13      	ldr	r3, [pc, #76]	; (800c250 <vTaskStartScheduler+0xdc>)
 800c202:	2200      	movs	r2, #0
 800c204:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c206:	f001 f9cb 	bl	800d5a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c20a:	e00e      	b.n	800c22a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c212:	d10a      	bne.n	800c22a <vTaskStartScheduler+0xb6>
	__asm volatile
 800c214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	60fb      	str	r3, [r7, #12]
}
 800c226:	bf00      	nop
 800c228:	e7fe      	b.n	800c228 <vTaskStartScheduler+0xb4>
}
 800c22a:	bf00      	nop
 800c22c:	3718      	adds	r7, #24
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	08015798 	.word	0x08015798
 800c238:	0800c879 	.word	0x0800c879
 800c23c:	200028e8 	.word	0x200028e8
 800c240:	200023f0 	.word	0x200023f0
 800c244:	200008cc 	.word	0x200008cc
 800c248:	200028e4 	.word	0x200028e4
 800c24c:	200028d0 	.word	0x200028d0
 800c250:	200028c8 	.word	0x200028c8

0800c254 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c254:	b480      	push	{r7}
 800c256:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c258:	4b04      	ldr	r3, [pc, #16]	; (800c26c <vTaskSuspendAll+0x18>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3301      	adds	r3, #1
 800c25e:	4a03      	ldr	r2, [pc, #12]	; (800c26c <vTaskSuspendAll+0x18>)
 800c260:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c262:	bf00      	nop
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr
 800c26c:	200028ec 	.word	0x200028ec

0800c270 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c276:	2300      	movs	r3, #0
 800c278:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c27a:	2300      	movs	r3, #0
 800c27c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c27e:	4b42      	ldr	r3, [pc, #264]	; (800c388 <xTaskResumeAll+0x118>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10a      	bne.n	800c29c <xTaskResumeAll+0x2c>
	__asm volatile
 800c286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	603b      	str	r3, [r7, #0]
}
 800c298:	bf00      	nop
 800c29a:	e7fe      	b.n	800c29a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c29c:	f001 fa22 	bl	800d6e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c2a0:	4b39      	ldr	r3, [pc, #228]	; (800c388 <xTaskResumeAll+0x118>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3b01      	subs	r3, #1
 800c2a6:	4a38      	ldr	r2, [pc, #224]	; (800c388 <xTaskResumeAll+0x118>)
 800c2a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2aa:	4b37      	ldr	r3, [pc, #220]	; (800c388 <xTaskResumeAll+0x118>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d162      	bne.n	800c378 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c2b2:	4b36      	ldr	r3, [pc, #216]	; (800c38c <xTaskResumeAll+0x11c>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d05e      	beq.n	800c378 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2ba:	e02f      	b.n	800c31c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2bc:	4b34      	ldr	r3, [pc, #208]	; (800c390 <xTaskResumeAll+0x120>)
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	3318      	adds	r3, #24
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7fe fdf5 	bl	800aeb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	3304      	adds	r3, #4
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fe fdf0 	bl	800aeb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2dc:	4b2d      	ldr	r3, [pc, #180]	; (800c394 <xTaskResumeAll+0x124>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d903      	bls.n	800c2ec <xTaskResumeAll+0x7c>
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e8:	4a2a      	ldr	r2, [pc, #168]	; (800c394 <xTaskResumeAll+0x124>)
 800c2ea:	6013      	str	r3, [r2, #0]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4413      	add	r3, r2
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	4a27      	ldr	r2, [pc, #156]	; (800c398 <xTaskResumeAll+0x128>)
 800c2fa:	441a      	add	r2, r3
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	3304      	adds	r3, #4
 800c300:	4619      	mov	r1, r3
 800c302:	4610      	mov	r0, r2
 800c304:	f7fe fd7b 	bl	800adfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c30c:	4b23      	ldr	r3, [pc, #140]	; (800c39c <xTaskResumeAll+0x12c>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c312:	429a      	cmp	r2, r3
 800c314:	d302      	bcc.n	800c31c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c316:	4b22      	ldr	r3, [pc, #136]	; (800c3a0 <xTaskResumeAll+0x130>)
 800c318:	2201      	movs	r2, #1
 800c31a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c31c:	4b1c      	ldr	r3, [pc, #112]	; (800c390 <xTaskResumeAll+0x120>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1cb      	bne.n	800c2bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d001      	beq.n	800c32e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c32a:	f000 fb5f 	bl	800c9ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c32e:	4b1d      	ldr	r3, [pc, #116]	; (800c3a4 <xTaskResumeAll+0x134>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d010      	beq.n	800c35c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c33a:	f000 f847 	bl	800c3cc <xTaskIncrementTick>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d002      	beq.n	800c34a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c344:	4b16      	ldr	r3, [pc, #88]	; (800c3a0 <xTaskResumeAll+0x130>)
 800c346:	2201      	movs	r2, #1
 800c348:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	3b01      	subs	r3, #1
 800c34e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1f1      	bne.n	800c33a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c356:	4b13      	ldr	r3, [pc, #76]	; (800c3a4 <xTaskResumeAll+0x134>)
 800c358:	2200      	movs	r2, #0
 800c35a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c35c:	4b10      	ldr	r3, [pc, #64]	; (800c3a0 <xTaskResumeAll+0x130>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d009      	beq.n	800c378 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c364:	2301      	movs	r3, #1
 800c366:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c368:	4b0f      	ldr	r3, [pc, #60]	; (800c3a8 <xTaskResumeAll+0x138>)
 800c36a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c36e:	601a      	str	r2, [r3, #0]
 800c370:	f3bf 8f4f 	dsb	sy
 800c374:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c378:	f001 f9e4 	bl	800d744 <vPortExitCritical>

	return xAlreadyYielded;
 800c37c:	68bb      	ldr	r3, [r7, #8]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	200028ec 	.word	0x200028ec
 800c38c:	200028c4 	.word	0x200028c4
 800c390:	20002884 	.word	0x20002884
 800c394:	200028cc 	.word	0x200028cc
 800c398:	200023f4 	.word	0x200023f4
 800c39c:	200023f0 	.word	0x200023f0
 800c3a0:	200028d8 	.word	0x200028d8
 800c3a4:	200028d4 	.word	0x200028d4
 800c3a8:	e000ed04 	.word	0xe000ed04

0800c3ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c3b2:	4b05      	ldr	r3, [pc, #20]	; (800c3c8 <xTaskGetTickCount+0x1c>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c3b8:	687b      	ldr	r3, [r7, #4]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	370c      	adds	r7, #12
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	200028c8 	.word	0x200028c8

0800c3cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3d6:	4b4f      	ldr	r3, [pc, #316]	; (800c514 <xTaskIncrementTick+0x148>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f040 808f 	bne.w	800c4fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c3e0:	4b4d      	ldr	r3, [pc, #308]	; (800c518 <xTaskIncrementTick+0x14c>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c3e8:	4a4b      	ldr	r2, [pc, #300]	; (800c518 <xTaskIncrementTick+0x14c>)
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d120      	bne.n	800c436 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c3f4:	4b49      	ldr	r3, [pc, #292]	; (800c51c <xTaskIncrementTick+0x150>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00a      	beq.n	800c414 <xTaskIncrementTick+0x48>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	603b      	str	r3, [r7, #0]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <xTaskIncrementTick+0x46>
 800c414:	4b41      	ldr	r3, [pc, #260]	; (800c51c <xTaskIncrementTick+0x150>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	60fb      	str	r3, [r7, #12]
 800c41a:	4b41      	ldr	r3, [pc, #260]	; (800c520 <xTaskIncrementTick+0x154>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a3f      	ldr	r2, [pc, #252]	; (800c51c <xTaskIncrementTick+0x150>)
 800c420:	6013      	str	r3, [r2, #0]
 800c422:	4a3f      	ldr	r2, [pc, #252]	; (800c520 <xTaskIncrementTick+0x154>)
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	6013      	str	r3, [r2, #0]
 800c428:	4b3e      	ldr	r3, [pc, #248]	; (800c524 <xTaskIncrementTick+0x158>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3301      	adds	r3, #1
 800c42e:	4a3d      	ldr	r2, [pc, #244]	; (800c524 <xTaskIncrementTick+0x158>)
 800c430:	6013      	str	r3, [r2, #0]
 800c432:	f000 fadb 	bl	800c9ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c436:	4b3c      	ldr	r3, [pc, #240]	; (800c528 <xTaskIncrementTick+0x15c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	693a      	ldr	r2, [r7, #16]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d349      	bcc.n	800c4d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c440:	4b36      	ldr	r3, [pc, #216]	; (800c51c <xTaskIncrementTick+0x150>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d104      	bne.n	800c454 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c44a:	4b37      	ldr	r3, [pc, #220]	; (800c528 <xTaskIncrementTick+0x15c>)
 800c44c:	f04f 32ff 	mov.w	r2, #4294967295
 800c450:	601a      	str	r2, [r3, #0]
					break;
 800c452:	e03f      	b.n	800c4d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c454:	4b31      	ldr	r3, [pc, #196]	; (800c51c <xTaskIncrementTick+0x150>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c464:	693a      	ldr	r2, [r7, #16]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d203      	bcs.n	800c474 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c46c:	4a2e      	ldr	r2, [pc, #184]	; (800c528 <xTaskIncrementTick+0x15c>)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c472:	e02f      	b.n	800c4d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	3304      	adds	r3, #4
 800c478:	4618      	mov	r0, r3
 800c47a:	f7fe fd1d 	bl	800aeb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c482:	2b00      	cmp	r3, #0
 800c484:	d004      	beq.n	800c490 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	3318      	adds	r3, #24
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fe fd14 	bl	800aeb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c494:	4b25      	ldr	r3, [pc, #148]	; (800c52c <xTaskIncrementTick+0x160>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d903      	bls.n	800c4a4 <xTaskIncrementTick+0xd8>
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a0:	4a22      	ldr	r2, [pc, #136]	; (800c52c <xTaskIncrementTick+0x160>)
 800c4a2:	6013      	str	r3, [r2, #0]
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4a1f      	ldr	r2, [pc, #124]	; (800c530 <xTaskIncrementTick+0x164>)
 800c4b2:	441a      	add	r2, r3
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	4610      	mov	r0, r2
 800c4bc:	f7fe fc9f 	bl	800adfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c4:	4b1b      	ldr	r3, [pc, #108]	; (800c534 <xTaskIncrementTick+0x168>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d3b8      	bcc.n	800c440 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4d2:	e7b5      	b.n	800c440 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c4d4:	4b17      	ldr	r3, [pc, #92]	; (800c534 <xTaskIncrementTick+0x168>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4da:	4915      	ldr	r1, [pc, #84]	; (800c530 <xTaskIncrementTick+0x164>)
 800c4dc:	4613      	mov	r3, r2
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	4413      	add	r3, r2
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	440b      	add	r3, r1
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d901      	bls.n	800c4f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c4f0:	4b11      	ldr	r3, [pc, #68]	; (800c538 <xTaskIncrementTick+0x16c>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d007      	beq.n	800c508 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	617b      	str	r3, [r7, #20]
 800c4fc:	e004      	b.n	800c508 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c4fe:	4b0f      	ldr	r3, [pc, #60]	; (800c53c <xTaskIncrementTick+0x170>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	3301      	adds	r3, #1
 800c504:	4a0d      	ldr	r2, [pc, #52]	; (800c53c <xTaskIncrementTick+0x170>)
 800c506:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c508:	697b      	ldr	r3, [r7, #20]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3718      	adds	r7, #24
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	200028ec 	.word	0x200028ec
 800c518:	200028c8 	.word	0x200028c8
 800c51c:	2000287c 	.word	0x2000287c
 800c520:	20002880 	.word	0x20002880
 800c524:	200028dc 	.word	0x200028dc
 800c528:	200028e4 	.word	0x200028e4
 800c52c:	200028cc 	.word	0x200028cc
 800c530:	200023f4 	.word	0x200023f4
 800c534:	200023f0 	.word	0x200023f0
 800c538:	200028d8 	.word	0x200028d8
 800c53c:	200028d4 	.word	0x200028d4

0800c540 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c546:	4b2a      	ldr	r3, [pc, #168]	; (800c5f0 <vTaskSwitchContext+0xb0>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d003      	beq.n	800c556 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c54e:	4b29      	ldr	r3, [pc, #164]	; (800c5f4 <vTaskSwitchContext+0xb4>)
 800c550:	2201      	movs	r2, #1
 800c552:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c554:	e046      	b.n	800c5e4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c556:	4b27      	ldr	r3, [pc, #156]	; (800c5f4 <vTaskSwitchContext+0xb4>)
 800c558:	2200      	movs	r2, #0
 800c55a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c55c:	4b26      	ldr	r3, [pc, #152]	; (800c5f8 <vTaskSwitchContext+0xb8>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	60fb      	str	r3, [r7, #12]
 800c562:	e010      	b.n	800c586 <vTaskSwitchContext+0x46>
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10a      	bne.n	800c580 <vTaskSwitchContext+0x40>
	__asm volatile
 800c56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56e:	f383 8811 	msr	BASEPRI, r3
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	607b      	str	r3, [r7, #4]
}
 800c57c:	bf00      	nop
 800c57e:	e7fe      	b.n	800c57e <vTaskSwitchContext+0x3e>
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	3b01      	subs	r3, #1
 800c584:	60fb      	str	r3, [r7, #12]
 800c586:	491d      	ldr	r1, [pc, #116]	; (800c5fc <vTaskSwitchContext+0xbc>)
 800c588:	68fa      	ldr	r2, [r7, #12]
 800c58a:	4613      	mov	r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	4413      	add	r3, r2
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	440b      	add	r3, r1
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d0e4      	beq.n	800c564 <vTaskSwitchContext+0x24>
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	4613      	mov	r3, r2
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	4413      	add	r3, r2
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	4a15      	ldr	r2, [pc, #84]	; (800c5fc <vTaskSwitchContext+0xbc>)
 800c5a6:	4413      	add	r3, r2
 800c5a8:	60bb      	str	r3, [r7, #8]
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	685a      	ldr	r2, [r3, #4]
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	605a      	str	r2, [r3, #4]
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	685a      	ldr	r2, [r3, #4]
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	3308      	adds	r3, #8
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d104      	bne.n	800c5ca <vTaskSwitchContext+0x8a>
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	685a      	ldr	r2, [r3, #4]
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	605a      	str	r2, [r3, #4]
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	4a0b      	ldr	r2, [pc, #44]	; (800c600 <vTaskSwitchContext+0xc0>)
 800c5d2:	6013      	str	r3, [r2, #0]
 800c5d4:	4a08      	ldr	r2, [pc, #32]	; (800c5f8 <vTaskSwitchContext+0xb8>)
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c5da:	4b09      	ldr	r3, [pc, #36]	; (800c600 <vTaskSwitchContext+0xc0>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	3354      	adds	r3, #84	; 0x54
 800c5e0:	4a08      	ldr	r2, [pc, #32]	; (800c604 <vTaskSwitchContext+0xc4>)
 800c5e2:	6013      	str	r3, [r2, #0]
}
 800c5e4:	bf00      	nop
 800c5e6:	3714      	adds	r7, #20
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr
 800c5f0:	200028ec 	.word	0x200028ec
 800c5f4:	200028d8 	.word	0x200028d8
 800c5f8:	200028cc 	.word	0x200028cc
 800c5fc:	200023f4 	.word	0x200023f4
 800c600:	200023f0 	.word	0x200023f0
 800c604:	200008cc 	.word	0x200008cc

0800c608 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d10a      	bne.n	800c62e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	60fb      	str	r3, [r7, #12]
}
 800c62a:	bf00      	nop
 800c62c:	e7fe      	b.n	800c62c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c62e:	4b07      	ldr	r3, [pc, #28]	; (800c64c <vTaskPlaceOnEventList+0x44>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	3318      	adds	r3, #24
 800c634:	4619      	mov	r1, r3
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f7fe fc05 	bl	800ae46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c63c:	2101      	movs	r1, #1
 800c63e:	6838      	ldr	r0, [r7, #0]
 800c640:	f000 fb7e 	bl	800cd40 <prvAddCurrentTaskToDelayedList>
}
 800c644:	bf00      	nop
 800c646:	3710      	adds	r7, #16
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	200023f0 	.word	0x200023f0

0800c650 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d10a      	bne.n	800c678 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c666:	f383 8811 	msr	BASEPRI, r3
 800c66a:	f3bf 8f6f 	isb	sy
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	617b      	str	r3, [r7, #20]
}
 800c674:	bf00      	nop
 800c676:	e7fe      	b.n	800c676 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c678:	4b0a      	ldr	r3, [pc, #40]	; (800c6a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	3318      	adds	r3, #24
 800c67e:	4619      	mov	r1, r3
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f7fe fbbc 	bl	800adfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d002      	beq.n	800c692 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c68c:	f04f 33ff 	mov.w	r3, #4294967295
 800c690:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c692:	6879      	ldr	r1, [r7, #4]
 800c694:	68b8      	ldr	r0, [r7, #8]
 800c696:	f000 fb53 	bl	800cd40 <prvAddCurrentTaskToDelayedList>
	}
 800c69a:	bf00      	nop
 800c69c:	3718      	adds	r7, #24
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	200023f0 	.word	0x200023f0

0800c6a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10a      	bne.n	800c6d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	60fb      	str	r3, [r7, #12]
}
 800c6d0:	bf00      	nop
 800c6d2:	e7fe      	b.n	800c6d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	3318      	adds	r3, #24
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7fe fbed 	bl	800aeb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6de:	4b1e      	ldr	r3, [pc, #120]	; (800c758 <xTaskRemoveFromEventList+0xb0>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d11d      	bne.n	800c722 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fe fbe4 	bl	800aeb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6f4:	4b19      	ldr	r3, [pc, #100]	; (800c75c <xTaskRemoveFromEventList+0xb4>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d903      	bls.n	800c704 <xTaskRemoveFromEventList+0x5c>
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c700:	4a16      	ldr	r2, [pc, #88]	; (800c75c <xTaskRemoveFromEventList+0xb4>)
 800c702:	6013      	str	r3, [r2, #0]
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c708:	4613      	mov	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4413      	add	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	4a13      	ldr	r2, [pc, #76]	; (800c760 <xTaskRemoveFromEventList+0xb8>)
 800c712:	441a      	add	r2, r3
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	3304      	adds	r3, #4
 800c718:	4619      	mov	r1, r3
 800c71a:	4610      	mov	r0, r2
 800c71c:	f7fe fb6f 	bl	800adfe <vListInsertEnd>
 800c720:	e005      	b.n	800c72e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	3318      	adds	r3, #24
 800c726:	4619      	mov	r1, r3
 800c728:	480e      	ldr	r0, [pc, #56]	; (800c764 <xTaskRemoveFromEventList+0xbc>)
 800c72a:	f7fe fb68 	bl	800adfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c732:	4b0d      	ldr	r3, [pc, #52]	; (800c768 <xTaskRemoveFromEventList+0xc0>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c738:	429a      	cmp	r2, r3
 800c73a:	d905      	bls.n	800c748 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c73c:	2301      	movs	r3, #1
 800c73e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c740:	4b0a      	ldr	r3, [pc, #40]	; (800c76c <xTaskRemoveFromEventList+0xc4>)
 800c742:	2201      	movs	r2, #1
 800c744:	601a      	str	r2, [r3, #0]
 800c746:	e001      	b.n	800c74c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c748:	2300      	movs	r3, #0
 800c74a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c74c:	697b      	ldr	r3, [r7, #20]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3718      	adds	r7, #24
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	200028ec 	.word	0x200028ec
 800c75c:	200028cc 	.word	0x200028cc
 800c760:	200023f4 	.word	0x200023f4
 800c764:	20002884 	.word	0x20002884
 800c768:	200023f0 	.word	0x200023f0
 800c76c:	200028d8 	.word	0x200028d8

0800c770 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c778:	4b06      	ldr	r3, [pc, #24]	; (800c794 <vTaskInternalSetTimeOutState+0x24>)
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c780:	4b05      	ldr	r3, [pc, #20]	; (800c798 <vTaskInternalSetTimeOutState+0x28>)
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	605a      	str	r2, [r3, #4]
}
 800c788:	bf00      	nop
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr
 800c794:	200028dc 	.word	0x200028dc
 800c798:	200028c8 	.word	0x200028c8

0800c79c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b088      	sub	sp, #32
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10a      	bne.n	800c7c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	613b      	str	r3, [r7, #16]
}
 800c7be:	bf00      	nop
 800c7c0:	e7fe      	b.n	800c7c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10a      	bne.n	800c7de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7cc:	f383 8811 	msr	BASEPRI, r3
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	f3bf 8f4f 	dsb	sy
 800c7d8:	60fb      	str	r3, [r7, #12]
}
 800c7da:	bf00      	nop
 800c7dc:	e7fe      	b.n	800c7dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c7de:	f000 ff81 	bl	800d6e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c7e2:	4b1d      	ldr	r3, [pc, #116]	; (800c858 <xTaskCheckForTimeOut+0xbc>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	69ba      	ldr	r2, [r7, #24]
 800c7ee:	1ad3      	subs	r3, r2, r3
 800c7f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7fa:	d102      	bne.n	800c802 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	61fb      	str	r3, [r7, #28]
 800c800:	e023      	b.n	800c84a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	4b15      	ldr	r3, [pc, #84]	; (800c85c <xTaskCheckForTimeOut+0xc0>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d007      	beq.n	800c81e <xTaskCheckForTimeOut+0x82>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	69ba      	ldr	r2, [r7, #24]
 800c814:	429a      	cmp	r2, r3
 800c816:	d302      	bcc.n	800c81e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c818:	2301      	movs	r3, #1
 800c81a:	61fb      	str	r3, [r7, #28]
 800c81c:	e015      	b.n	800c84a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	697a      	ldr	r2, [r7, #20]
 800c824:	429a      	cmp	r2, r3
 800c826:	d20b      	bcs.n	800c840 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	1ad2      	subs	r2, r2, r3
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7ff ff9b 	bl	800c770 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c83a:	2300      	movs	r3, #0
 800c83c:	61fb      	str	r3, [r7, #28]
 800c83e:	e004      	b.n	800c84a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	2200      	movs	r2, #0
 800c844:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c846:	2301      	movs	r3, #1
 800c848:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c84a:	f000 ff7b 	bl	800d744 <vPortExitCritical>

	return xReturn;
 800c84e:	69fb      	ldr	r3, [r7, #28]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3720      	adds	r7, #32
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	200028c8 	.word	0x200028c8
 800c85c:	200028dc 	.word	0x200028dc

0800c860 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c860:	b480      	push	{r7}
 800c862:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c864:	4b03      	ldr	r3, [pc, #12]	; (800c874 <vTaskMissedYield+0x14>)
 800c866:	2201      	movs	r2, #1
 800c868:	601a      	str	r2, [r3, #0]
}
 800c86a:	bf00      	nop
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr
 800c874:	200028d8 	.word	0x200028d8

0800c878 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c880:	f000 f852 	bl	800c928 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c884:	4b06      	ldr	r3, [pc, #24]	; (800c8a0 <prvIdleTask+0x28>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d9f9      	bls.n	800c880 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c88c:	4b05      	ldr	r3, [pc, #20]	; (800c8a4 <prvIdleTask+0x2c>)
 800c88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c892:	601a      	str	r2, [r3, #0]
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c89c:	e7f0      	b.n	800c880 <prvIdleTask+0x8>
 800c89e:	bf00      	nop
 800c8a0:	200023f4 	.word	0x200023f4
 800c8a4:	e000ed04 	.word	0xe000ed04

0800c8a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	607b      	str	r3, [r7, #4]
 800c8b2:	e00c      	b.n	800c8ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4413      	add	r3, r2
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	4a12      	ldr	r2, [pc, #72]	; (800c908 <prvInitialiseTaskLists+0x60>)
 800c8c0:	4413      	add	r3, r2
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fe fa6e 	bl	800ada4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	607b      	str	r3, [r7, #4]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b37      	cmp	r3, #55	; 0x37
 800c8d2:	d9ef      	bls.n	800c8b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c8d4:	480d      	ldr	r0, [pc, #52]	; (800c90c <prvInitialiseTaskLists+0x64>)
 800c8d6:	f7fe fa65 	bl	800ada4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c8da:	480d      	ldr	r0, [pc, #52]	; (800c910 <prvInitialiseTaskLists+0x68>)
 800c8dc:	f7fe fa62 	bl	800ada4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c8e0:	480c      	ldr	r0, [pc, #48]	; (800c914 <prvInitialiseTaskLists+0x6c>)
 800c8e2:	f7fe fa5f 	bl	800ada4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c8e6:	480c      	ldr	r0, [pc, #48]	; (800c918 <prvInitialiseTaskLists+0x70>)
 800c8e8:	f7fe fa5c 	bl	800ada4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c8ec:	480b      	ldr	r0, [pc, #44]	; (800c91c <prvInitialiseTaskLists+0x74>)
 800c8ee:	f7fe fa59 	bl	800ada4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c8f2:	4b0b      	ldr	r3, [pc, #44]	; (800c920 <prvInitialiseTaskLists+0x78>)
 800c8f4:	4a05      	ldr	r2, [pc, #20]	; (800c90c <prvInitialiseTaskLists+0x64>)
 800c8f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c8f8:	4b0a      	ldr	r3, [pc, #40]	; (800c924 <prvInitialiseTaskLists+0x7c>)
 800c8fa:	4a05      	ldr	r2, [pc, #20]	; (800c910 <prvInitialiseTaskLists+0x68>)
 800c8fc:	601a      	str	r2, [r3, #0]
}
 800c8fe:	bf00      	nop
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	200023f4 	.word	0x200023f4
 800c90c:	20002854 	.word	0x20002854
 800c910:	20002868 	.word	0x20002868
 800c914:	20002884 	.word	0x20002884
 800c918:	20002898 	.word	0x20002898
 800c91c:	200028b0 	.word	0x200028b0
 800c920:	2000287c 	.word	0x2000287c
 800c924:	20002880 	.word	0x20002880

0800c928 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c92e:	e019      	b.n	800c964 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c930:	f000 fed8 	bl	800d6e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c934:	4b10      	ldr	r3, [pc, #64]	; (800c978 <prvCheckTasksWaitingTermination+0x50>)
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	3304      	adds	r3, #4
 800c940:	4618      	mov	r0, r3
 800c942:	f7fe fab9 	bl	800aeb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c946:	4b0d      	ldr	r3, [pc, #52]	; (800c97c <prvCheckTasksWaitingTermination+0x54>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	3b01      	subs	r3, #1
 800c94c:	4a0b      	ldr	r2, [pc, #44]	; (800c97c <prvCheckTasksWaitingTermination+0x54>)
 800c94e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c950:	4b0b      	ldr	r3, [pc, #44]	; (800c980 <prvCheckTasksWaitingTermination+0x58>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	3b01      	subs	r3, #1
 800c956:	4a0a      	ldr	r2, [pc, #40]	; (800c980 <prvCheckTasksWaitingTermination+0x58>)
 800c958:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c95a:	f000 fef3 	bl	800d744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f810 	bl	800c984 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c964:	4b06      	ldr	r3, [pc, #24]	; (800c980 <prvCheckTasksWaitingTermination+0x58>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d1e1      	bne.n	800c930 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c96c:	bf00      	nop
 800c96e:	bf00      	nop
 800c970:	3708      	adds	r7, #8
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	20002898 	.word	0x20002898
 800c97c:	200028c4 	.word	0x200028c4
 800c980:	200028ac 	.word	0x200028ac

0800c984 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	3354      	adds	r3, #84	; 0x54
 800c990:	4618      	mov	r0, r3
 800c992:	f005 ff1b 	bl	80127cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d108      	bne.n	800c9b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f001 f88b 	bl	800dac0 <vPortFree>
				vPortFree( pxTCB );
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f001 f888 	bl	800dac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c9b0:	e018      	b.n	800c9e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d103      	bne.n	800c9c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f001 f87f 	bl	800dac0 <vPortFree>
	}
 800c9c2:	e00f      	b.n	800c9e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c9ca:	2b02      	cmp	r3, #2
 800c9cc:	d00a      	beq.n	800c9e4 <prvDeleteTCB+0x60>
	__asm volatile
 800c9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	60fb      	str	r3, [r7, #12]
}
 800c9e0:	bf00      	nop
 800c9e2:	e7fe      	b.n	800c9e2 <prvDeleteTCB+0x5e>
	}
 800c9e4:	bf00      	nop
 800c9e6:	3710      	adds	r7, #16
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9f2:	4b0c      	ldr	r3, [pc, #48]	; (800ca24 <prvResetNextTaskUnblockTime+0x38>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d104      	bne.n	800ca06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ca28 <prvResetNextTaskUnblockTime+0x3c>)
 800c9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800ca02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ca04:	e008      	b.n	800ca18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca06:	4b07      	ldr	r3, [pc, #28]	; (800ca24 <prvResetNextTaskUnblockTime+0x38>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	68db      	ldr	r3, [r3, #12]
 800ca0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	4a04      	ldr	r2, [pc, #16]	; (800ca28 <prvResetNextTaskUnblockTime+0x3c>)
 800ca16:	6013      	str	r3, [r2, #0]
}
 800ca18:	bf00      	nop
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	2000287c 	.word	0x2000287c
 800ca28:	200028e4 	.word	0x200028e4

0800ca2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca32:	4b0b      	ldr	r3, [pc, #44]	; (800ca60 <xTaskGetSchedulerState+0x34>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d102      	bne.n	800ca40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	607b      	str	r3, [r7, #4]
 800ca3e:	e008      	b.n	800ca52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca40:	4b08      	ldr	r3, [pc, #32]	; (800ca64 <xTaskGetSchedulerState+0x38>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d102      	bne.n	800ca4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca48:	2302      	movs	r3, #2
 800ca4a:	607b      	str	r3, [r7, #4]
 800ca4c:	e001      	b.n	800ca52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca52:	687b      	ldr	r3, [r7, #4]
	}
 800ca54:	4618      	mov	r0, r3
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr
 800ca60:	200028d0 	.word	0x200028d0
 800ca64:	200028ec 	.word	0x200028ec

0800ca68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ca74:	2300      	movs	r3, #0
 800ca76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d051      	beq.n	800cb22 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca82:	4b2a      	ldr	r3, [pc, #168]	; (800cb2c <xTaskPriorityInherit+0xc4>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d241      	bcs.n	800cb10 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	699b      	ldr	r3, [r3, #24]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	db06      	blt.n	800caa2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca94:	4b25      	ldr	r3, [pc, #148]	; (800cb2c <xTaskPriorityInherit+0xc4>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	6959      	ldr	r1, [r3, #20]
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caaa:	4613      	mov	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	4413      	add	r3, r2
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4a1f      	ldr	r2, [pc, #124]	; (800cb30 <xTaskPriorityInherit+0xc8>)
 800cab4:	4413      	add	r3, r2
 800cab6:	4299      	cmp	r1, r3
 800cab8:	d122      	bne.n	800cb00 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	3304      	adds	r3, #4
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fe f9fa 	bl	800aeb8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cac4:	4b19      	ldr	r3, [pc, #100]	; (800cb2c <xTaskPriorityInherit+0xc4>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad2:	4b18      	ldr	r3, [pc, #96]	; (800cb34 <xTaskPriorityInherit+0xcc>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d903      	bls.n	800cae2 <xTaskPriorityInherit+0x7a>
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cade:	4a15      	ldr	r2, [pc, #84]	; (800cb34 <xTaskPriorityInherit+0xcc>)
 800cae0:	6013      	str	r3, [r2, #0]
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae6:	4613      	mov	r3, r2
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	4413      	add	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4a10      	ldr	r2, [pc, #64]	; (800cb30 <xTaskPriorityInherit+0xc8>)
 800caf0:	441a      	add	r2, r3
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	3304      	adds	r3, #4
 800caf6:	4619      	mov	r1, r3
 800caf8:	4610      	mov	r0, r2
 800cafa:	f7fe f980 	bl	800adfe <vListInsertEnd>
 800cafe:	e004      	b.n	800cb0a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cb00:	4b0a      	ldr	r3, [pc, #40]	; (800cb2c <xTaskPriorityInherit+0xc4>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	60fb      	str	r3, [r7, #12]
 800cb0e:	e008      	b.n	800cb22 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb14:	4b05      	ldr	r3, [pc, #20]	; (800cb2c <xTaskPriorityInherit+0xc4>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d201      	bcs.n	800cb22 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb22:	68fb      	ldr	r3, [r7, #12]
	}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	200023f0 	.word	0x200023f0
 800cb30:	200023f4 	.word	0x200023f4
 800cb34:	200028cc 	.word	0x200028cc

0800cb38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b086      	sub	sp, #24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cb44:	2300      	movs	r3, #0
 800cb46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d056      	beq.n	800cbfc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cb4e:	4b2e      	ldr	r3, [pc, #184]	; (800cc08 <xTaskPriorityDisinherit+0xd0>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	693a      	ldr	r2, [r7, #16]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d00a      	beq.n	800cb6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5c:	f383 8811 	msr	BASEPRI, r3
 800cb60:	f3bf 8f6f 	isb	sy
 800cb64:	f3bf 8f4f 	dsb	sy
 800cb68:	60fb      	str	r3, [r7, #12]
}
 800cb6a:	bf00      	nop
 800cb6c:	e7fe      	b.n	800cb6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d10a      	bne.n	800cb8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7a:	f383 8811 	msr	BASEPRI, r3
 800cb7e:	f3bf 8f6f 	isb	sy
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	60bb      	str	r3, [r7, #8]
}
 800cb88:	bf00      	nop
 800cb8a:	e7fe      	b.n	800cb8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb90:	1e5a      	subs	r2, r3, #1
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d02c      	beq.n	800cbfc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d128      	bne.n	800cbfc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	3304      	adds	r3, #4
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fe f982 	bl	800aeb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbcc:	4b0f      	ldr	r3, [pc, #60]	; (800cc0c <xTaskPriorityDisinherit+0xd4>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d903      	bls.n	800cbdc <xTaskPriorityDisinherit+0xa4>
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd8:	4a0c      	ldr	r2, [pc, #48]	; (800cc0c <xTaskPriorityDisinherit+0xd4>)
 800cbda:	6013      	str	r3, [r2, #0]
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4a09      	ldr	r2, [pc, #36]	; (800cc10 <xTaskPriorityDisinherit+0xd8>)
 800cbea:	441a      	add	r2, r3
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	4610      	mov	r0, r2
 800cbf4:	f7fe f903 	bl	800adfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cbfc:	697b      	ldr	r3, [r7, #20]
	}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3718      	adds	r7, #24
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	200023f0 	.word	0x200023f0
 800cc0c:	200028cc 	.word	0x200028cc
 800cc10:	200023f4 	.word	0x200023f4

0800cc14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b088      	sub	sp, #32
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cc22:	2301      	movs	r3, #1
 800cc24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d06a      	beq.n	800cd02 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cc2c:	69bb      	ldr	r3, [r7, #24]
 800cc2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10a      	bne.n	800cc4a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	60fb      	str	r3, [r7, #12]
}
 800cc46:	bf00      	nop
 800cc48:	e7fe      	b.n	800cc48 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cc4a:	69bb      	ldr	r3, [r7, #24]
 800cc4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d902      	bls.n	800cc5a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	61fb      	str	r3, [r7, #28]
 800cc58:	e002      	b.n	800cc60 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc5e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cc60:	69bb      	ldr	r3, [r7, #24]
 800cc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc64:	69fa      	ldr	r2, [r7, #28]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d04b      	beq.n	800cd02 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d146      	bne.n	800cd02 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cc74:	4b25      	ldr	r3, [pc, #148]	; (800cd0c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	69ba      	ldr	r2, [r7, #24]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d10a      	bne.n	800cc94 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc82:	f383 8811 	msr	BASEPRI, r3
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	60bb      	str	r3, [r7, #8]
}
 800cc90:	bf00      	nop
 800cc92:	e7fe      	b.n	800cc92 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	69fa      	ldr	r2, [r7, #28]
 800cc9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cca0:	69bb      	ldr	r3, [r7, #24]
 800cca2:	699b      	ldr	r3, [r3, #24]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	db04      	blt.n	800ccb2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	6959      	ldr	r1, [r3, #20]
 800ccb6:	693a      	ldr	r2, [r7, #16]
 800ccb8:	4613      	mov	r3, r2
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	4413      	add	r3, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	4a13      	ldr	r2, [pc, #76]	; (800cd10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ccc2:	4413      	add	r3, r2
 800ccc4:	4299      	cmp	r1, r3
 800ccc6:	d11c      	bne.n	800cd02 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	3304      	adds	r3, #4
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7fe f8f3 	bl	800aeb8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd6:	4b0f      	ldr	r3, [pc, #60]	; (800cd14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d903      	bls.n	800cce6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce2:	4a0c      	ldr	r2, [pc, #48]	; (800cd14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cce4:	6013      	str	r3, [r2, #0]
 800cce6:	69bb      	ldr	r3, [r7, #24]
 800cce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccea:	4613      	mov	r3, r2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4413      	add	r3, r2
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	4a07      	ldr	r2, [pc, #28]	; (800cd10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ccf4:	441a      	add	r2, r3
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	3304      	adds	r3, #4
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	4610      	mov	r0, r2
 800ccfe:	f7fe f87e 	bl	800adfe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd02:	bf00      	nop
 800cd04:	3720      	adds	r7, #32
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	200023f0 	.word	0x200023f0
 800cd10:	200023f4 	.word	0x200023f4
 800cd14:	200028cc 	.word	0x200028cc

0800cd18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cd18:	b480      	push	{r7}
 800cd1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cd1c:	4b07      	ldr	r3, [pc, #28]	; (800cd3c <pvTaskIncrementMutexHeldCount+0x24>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d004      	beq.n	800cd2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cd24:	4b05      	ldr	r3, [pc, #20]	; (800cd3c <pvTaskIncrementMutexHeldCount+0x24>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd2a:	3201      	adds	r2, #1
 800cd2c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800cd2e:	4b03      	ldr	r3, [pc, #12]	; (800cd3c <pvTaskIncrementMutexHeldCount+0x24>)
 800cd30:	681b      	ldr	r3, [r3, #0]
	}
 800cd32:	4618      	mov	r0, r3
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	200023f0 	.word	0x200023f0

0800cd40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cd4a:	4b21      	ldr	r3, [pc, #132]	; (800cdd0 <prvAddCurrentTaskToDelayedList+0x90>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd50:	4b20      	ldr	r3, [pc, #128]	; (800cdd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	3304      	adds	r3, #4
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fe f8ae 	bl	800aeb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd62:	d10a      	bne.n	800cd7a <prvAddCurrentTaskToDelayedList+0x3a>
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d007      	beq.n	800cd7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd6a:	4b1a      	ldr	r3, [pc, #104]	; (800cdd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	4619      	mov	r1, r3
 800cd72:	4819      	ldr	r0, [pc, #100]	; (800cdd8 <prvAddCurrentTaskToDelayedList+0x98>)
 800cd74:	f7fe f843 	bl	800adfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cd78:	e026      	b.n	800cdc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4413      	add	r3, r2
 800cd80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cd82:	4b14      	ldr	r3, [pc, #80]	; (800cdd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cd8a:	68ba      	ldr	r2, [r7, #8]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d209      	bcs.n	800cda6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd92:	4b12      	ldr	r3, [pc, #72]	; (800cddc <prvAddCurrentTaskToDelayedList+0x9c>)
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	4b0f      	ldr	r3, [pc, #60]	; (800cdd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	3304      	adds	r3, #4
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	4610      	mov	r0, r2
 800cda0:	f7fe f851 	bl	800ae46 <vListInsert>
}
 800cda4:	e010      	b.n	800cdc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cda6:	4b0e      	ldr	r3, [pc, #56]	; (800cde0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	4b0a      	ldr	r3, [pc, #40]	; (800cdd4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	3304      	adds	r3, #4
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	4610      	mov	r0, r2
 800cdb4:	f7fe f847 	bl	800ae46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cdb8:	4b0a      	ldr	r3, [pc, #40]	; (800cde4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	68ba      	ldr	r2, [r7, #8]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d202      	bcs.n	800cdc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cdc2:	4a08      	ldr	r2, [pc, #32]	; (800cde4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	6013      	str	r3, [r2, #0]
}
 800cdc8:	bf00      	nop
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	200028c8 	.word	0x200028c8
 800cdd4:	200023f0 	.word	0x200023f0
 800cdd8:	200028b0 	.word	0x200028b0
 800cddc:	20002880 	.word	0x20002880
 800cde0:	2000287c 	.word	0x2000287c
 800cde4:	200028e4 	.word	0x200028e4

0800cde8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b08a      	sub	sp, #40	; 0x28
 800cdec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cdf2:	f000 fb07 	bl	800d404 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cdf6:	4b1c      	ldr	r3, [pc, #112]	; (800ce68 <xTimerCreateTimerTask+0x80>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d021      	beq.n	800ce42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ce02:	2300      	movs	r3, #0
 800ce04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ce06:	1d3a      	adds	r2, r7, #4
 800ce08:	f107 0108 	add.w	r1, r7, #8
 800ce0c:	f107 030c 	add.w	r3, r7, #12
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fd ffad 	bl	800ad70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ce16:	6879      	ldr	r1, [r7, #4]
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	9202      	str	r2, [sp, #8]
 800ce1e:	9301      	str	r3, [sp, #4]
 800ce20:	2302      	movs	r3, #2
 800ce22:	9300      	str	r3, [sp, #0]
 800ce24:	2300      	movs	r3, #0
 800ce26:	460a      	mov	r2, r1
 800ce28:	4910      	ldr	r1, [pc, #64]	; (800ce6c <xTimerCreateTimerTask+0x84>)
 800ce2a:	4811      	ldr	r0, [pc, #68]	; (800ce70 <xTimerCreateTimerTask+0x88>)
 800ce2c:	f7fe ff44 	bl	800bcb8 <xTaskCreateStatic>
 800ce30:	4603      	mov	r3, r0
 800ce32:	4a10      	ldr	r2, [pc, #64]	; (800ce74 <xTimerCreateTimerTask+0x8c>)
 800ce34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ce36:	4b0f      	ldr	r3, [pc, #60]	; (800ce74 <xTimerCreateTimerTask+0x8c>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d001      	beq.n	800ce42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d10a      	bne.n	800ce5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ce48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4c:	f383 8811 	msr	BASEPRI, r3
 800ce50:	f3bf 8f6f 	isb	sy
 800ce54:	f3bf 8f4f 	dsb	sy
 800ce58:	613b      	str	r3, [r7, #16]
}
 800ce5a:	bf00      	nop
 800ce5c:	e7fe      	b.n	800ce5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ce5e:	697b      	ldr	r3, [r7, #20]
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3718      	adds	r7, #24
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	20002920 	.word	0x20002920
 800ce6c:	080157a0 	.word	0x080157a0
 800ce70:	0800cfad 	.word	0x0800cfad
 800ce74:	20002924 	.word	0x20002924

0800ce78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b08a      	sub	sp, #40	; 0x28
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
 800ce84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ce86:	2300      	movs	r3, #0
 800ce88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d10a      	bne.n	800cea6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ce90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce94:	f383 8811 	msr	BASEPRI, r3
 800ce98:	f3bf 8f6f 	isb	sy
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	623b      	str	r3, [r7, #32]
}
 800cea2:	bf00      	nop
 800cea4:	e7fe      	b.n	800cea4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cea6:	4b1a      	ldr	r3, [pc, #104]	; (800cf10 <xTimerGenericCommand+0x98>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d02a      	beq.n	800cf04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	2b05      	cmp	r3, #5
 800cebe:	dc18      	bgt.n	800cef2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cec0:	f7ff fdb4 	bl	800ca2c <xTaskGetSchedulerState>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b02      	cmp	r3, #2
 800cec8:	d109      	bne.n	800cede <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ceca:	4b11      	ldr	r3, [pc, #68]	; (800cf10 <xTimerGenericCommand+0x98>)
 800cecc:	6818      	ldr	r0, [r3, #0]
 800cece:	f107 0110 	add.w	r1, r7, #16
 800ced2:	2300      	movs	r3, #0
 800ced4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ced6:	f7fe f957 	bl	800b188 <xQueueGenericSend>
 800ceda:	6278      	str	r0, [r7, #36]	; 0x24
 800cedc:	e012      	b.n	800cf04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cede:	4b0c      	ldr	r3, [pc, #48]	; (800cf10 <xTimerGenericCommand+0x98>)
 800cee0:	6818      	ldr	r0, [r3, #0]
 800cee2:	f107 0110 	add.w	r1, r7, #16
 800cee6:	2300      	movs	r3, #0
 800cee8:	2200      	movs	r2, #0
 800ceea:	f7fe f94d 	bl	800b188 <xQueueGenericSend>
 800ceee:	6278      	str	r0, [r7, #36]	; 0x24
 800cef0:	e008      	b.n	800cf04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cef2:	4b07      	ldr	r3, [pc, #28]	; (800cf10 <xTimerGenericCommand+0x98>)
 800cef4:	6818      	ldr	r0, [r3, #0]
 800cef6:	f107 0110 	add.w	r1, r7, #16
 800cefa:	2300      	movs	r3, #0
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	f7fe fa41 	bl	800b384 <xQueueGenericSendFromISR>
 800cf02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3728      	adds	r7, #40	; 0x28
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	20002920 	.word	0x20002920

0800cf14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b088      	sub	sp, #32
 800cf18:	af02      	add	r7, sp, #8
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf1e:	4b22      	ldr	r3, [pc, #136]	; (800cfa8 <prvProcessExpiredTimer+0x94>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	68db      	ldr	r3, [r3, #12]
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	3304      	adds	r3, #4
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fd ffc3 	bl	800aeb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf38:	f003 0304 	and.w	r3, r3, #4
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d022      	beq.n	800cf86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	699a      	ldr	r2, [r3, #24]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	18d1      	adds	r1, r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	683a      	ldr	r2, [r7, #0]
 800cf4c:	6978      	ldr	r0, [r7, #20]
 800cf4e:	f000 f8d1 	bl	800d0f4 <prvInsertTimerInActiveList>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d01f      	beq.n	800cf98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf58:	2300      	movs	r3, #0
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	2100      	movs	r1, #0
 800cf62:	6978      	ldr	r0, [r7, #20]
 800cf64:	f7ff ff88 	bl	800ce78 <xTimerGenericCommand>
 800cf68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d113      	bne.n	800cf98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf74:	f383 8811 	msr	BASEPRI, r3
 800cf78:	f3bf 8f6f 	isb	sy
 800cf7c:	f3bf 8f4f 	dsb	sy
 800cf80:	60fb      	str	r3, [r7, #12]
}
 800cf82:	bf00      	nop
 800cf84:	e7fe      	b.n	800cf84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf8c:	f023 0301 	bic.w	r3, r3, #1
 800cf90:	b2da      	uxtb	r2, r3
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	6a1b      	ldr	r3, [r3, #32]
 800cf9c:	6978      	ldr	r0, [r7, #20]
 800cf9e:	4798      	blx	r3
}
 800cfa0:	bf00      	nop
 800cfa2:	3718      	adds	r7, #24
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	20002918 	.word	0x20002918

0800cfac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cfb4:	f107 0308 	add.w	r3, r7, #8
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f000 f857 	bl	800d06c <prvGetNextExpireTime>
 800cfbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f000 f803 	bl	800cfd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cfca:	f000 f8d5 	bl	800d178 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cfce:	e7f1      	b.n	800cfb4 <prvTimerTask+0x8>

0800cfd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cfda:	f7ff f93b 	bl	800c254 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cfde:	f107 0308 	add.w	r3, r7, #8
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f000 f866 	bl	800d0b4 <prvSampleTimeNow>
 800cfe8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d130      	bne.n	800d052 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d10a      	bne.n	800d00c <prvProcessTimerOrBlockTask+0x3c>
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d806      	bhi.n	800d00c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cffe:	f7ff f937 	bl	800c270 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d002:	68f9      	ldr	r1, [r7, #12]
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f7ff ff85 	bl	800cf14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d00a:	e024      	b.n	800d056 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d008      	beq.n	800d024 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d012:	4b13      	ldr	r3, [pc, #76]	; (800d060 <prvProcessTimerOrBlockTask+0x90>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d101      	bne.n	800d020 <prvProcessTimerOrBlockTask+0x50>
 800d01c:	2301      	movs	r3, #1
 800d01e:	e000      	b.n	800d022 <prvProcessTimerOrBlockTask+0x52>
 800d020:	2300      	movs	r3, #0
 800d022:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d024:	4b0f      	ldr	r3, [pc, #60]	; (800d064 <prvProcessTimerOrBlockTask+0x94>)
 800d026:	6818      	ldr	r0, [r3, #0]
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	683a      	ldr	r2, [r7, #0]
 800d030:	4619      	mov	r1, r3
 800d032:	f7fe fe0d 	bl	800bc50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d036:	f7ff f91b 	bl	800c270 <xTaskResumeAll>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d10a      	bne.n	800d056 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d040:	4b09      	ldr	r3, [pc, #36]	; (800d068 <prvProcessTimerOrBlockTask+0x98>)
 800d042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d046:	601a      	str	r2, [r3, #0]
 800d048:	f3bf 8f4f 	dsb	sy
 800d04c:	f3bf 8f6f 	isb	sy
}
 800d050:	e001      	b.n	800d056 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d052:	f7ff f90d 	bl	800c270 <xTaskResumeAll>
}
 800d056:	bf00      	nop
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	2000291c 	.word	0x2000291c
 800d064:	20002920 	.word	0x20002920
 800d068:	e000ed04 	.word	0xe000ed04

0800d06c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d06c:	b480      	push	{r7}
 800d06e:	b085      	sub	sp, #20
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d074:	4b0e      	ldr	r3, [pc, #56]	; (800d0b0 <prvGetNextExpireTime+0x44>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d101      	bne.n	800d082 <prvGetNextExpireTime+0x16>
 800d07e:	2201      	movs	r2, #1
 800d080:	e000      	b.n	800d084 <prvGetNextExpireTime+0x18>
 800d082:	2200      	movs	r2, #0
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d105      	bne.n	800d09c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d090:	4b07      	ldr	r3, [pc, #28]	; (800d0b0 <prvGetNextExpireTime+0x44>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	60fb      	str	r3, [r7, #12]
 800d09a:	e001      	b.n	800d0a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d09c:	2300      	movs	r3, #0
 800d09e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3714      	adds	r7, #20
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	20002918 	.word	0x20002918

0800d0b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d0bc:	f7ff f976 	bl	800c3ac <xTaskGetTickCount>
 800d0c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d0c2:	4b0b      	ldr	r3, [pc, #44]	; (800d0f0 <prvSampleTimeNow+0x3c>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	68fa      	ldr	r2, [r7, #12]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d205      	bcs.n	800d0d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d0cc:	f000 f936 	bl	800d33c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	601a      	str	r2, [r3, #0]
 800d0d6:	e002      	b.n	800d0de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d0de:	4a04      	ldr	r2, [pc, #16]	; (800d0f0 <prvSampleTimeNow+0x3c>)
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3710      	adds	r7, #16
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	20002928 	.word	0x20002928

0800d0f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b086      	sub	sp, #24
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	607a      	str	r2, [r7, #4]
 800d100:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d102:	2300      	movs	r3, #0
 800d104:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d112:	68ba      	ldr	r2, [r7, #8]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	429a      	cmp	r2, r3
 800d118:	d812      	bhi.n	800d140 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	1ad2      	subs	r2, r2, r3
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	699b      	ldr	r3, [r3, #24]
 800d124:	429a      	cmp	r2, r3
 800d126:	d302      	bcc.n	800d12e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d128:	2301      	movs	r3, #1
 800d12a:	617b      	str	r3, [r7, #20]
 800d12c:	e01b      	b.n	800d166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d12e:	4b10      	ldr	r3, [pc, #64]	; (800d170 <prvInsertTimerInActiveList+0x7c>)
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	3304      	adds	r3, #4
 800d136:	4619      	mov	r1, r3
 800d138:	4610      	mov	r0, r2
 800d13a:	f7fd fe84 	bl	800ae46 <vListInsert>
 800d13e:	e012      	b.n	800d166 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	429a      	cmp	r2, r3
 800d146:	d206      	bcs.n	800d156 <prvInsertTimerInActiveList+0x62>
 800d148:	68ba      	ldr	r2, [r7, #8]
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d302      	bcc.n	800d156 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d150:	2301      	movs	r3, #1
 800d152:	617b      	str	r3, [r7, #20]
 800d154:	e007      	b.n	800d166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d156:	4b07      	ldr	r3, [pc, #28]	; (800d174 <prvInsertTimerInActiveList+0x80>)
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	3304      	adds	r3, #4
 800d15e:	4619      	mov	r1, r3
 800d160:	4610      	mov	r0, r2
 800d162:	f7fd fe70 	bl	800ae46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d166:	697b      	ldr	r3, [r7, #20]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3718      	adds	r7, #24
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	2000291c 	.word	0x2000291c
 800d174:	20002918 	.word	0x20002918

0800d178 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b08e      	sub	sp, #56	; 0x38
 800d17c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d17e:	e0ca      	b.n	800d316 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	da18      	bge.n	800d1b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d186:	1d3b      	adds	r3, r7, #4
 800d188:	3304      	adds	r3, #4
 800d18a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d10a      	bne.n	800d1a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d196:	f383 8811 	msr	BASEPRI, r3
 800d19a:	f3bf 8f6f 	isb	sy
 800d19e:	f3bf 8f4f 	dsb	sy
 800d1a2:	61fb      	str	r3, [r7, #28]
}
 800d1a4:	bf00      	nop
 800d1a6:	e7fe      	b.n	800d1a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1ae:	6850      	ldr	r0, [r2, #4]
 800d1b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1b2:	6892      	ldr	r2, [r2, #8]
 800d1b4:	4611      	mov	r1, r2
 800d1b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f2c0 80aa 	blt.w	800d314 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d004      	beq.n	800d1d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ce:	3304      	adds	r3, #4
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7fd fe71 	bl	800aeb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d1d6:	463b      	mov	r3, r7
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7ff ff6b 	bl	800d0b4 <prvSampleTimeNow>
 800d1de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2b09      	cmp	r3, #9
 800d1e4:	f200 8097 	bhi.w	800d316 <prvProcessReceivedCommands+0x19e>
 800d1e8:	a201      	add	r2, pc, #4	; (adr r2, 800d1f0 <prvProcessReceivedCommands+0x78>)
 800d1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ee:	bf00      	nop
 800d1f0:	0800d219 	.word	0x0800d219
 800d1f4:	0800d219 	.word	0x0800d219
 800d1f8:	0800d219 	.word	0x0800d219
 800d1fc:	0800d28d 	.word	0x0800d28d
 800d200:	0800d2a1 	.word	0x0800d2a1
 800d204:	0800d2eb 	.word	0x0800d2eb
 800d208:	0800d219 	.word	0x0800d219
 800d20c:	0800d219 	.word	0x0800d219
 800d210:	0800d28d 	.word	0x0800d28d
 800d214:	0800d2a1 	.word	0x0800d2a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d21e:	f043 0301 	orr.w	r3, r3, #1
 800d222:	b2da      	uxtb	r2, r3
 800d224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d22a:	68ba      	ldr	r2, [r7, #8]
 800d22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22e:	699b      	ldr	r3, [r3, #24]
 800d230:	18d1      	adds	r1, r2, r3
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d238:	f7ff ff5c 	bl	800d0f4 <prvInsertTimerInActiveList>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d069      	beq.n	800d316 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d244:	6a1b      	ldr	r3, [r3, #32]
 800d246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d248:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d250:	f003 0304 	and.w	r3, r3, #4
 800d254:	2b00      	cmp	r3, #0
 800d256:	d05e      	beq.n	800d316 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d258:	68ba      	ldr	r2, [r7, #8]
 800d25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25c:	699b      	ldr	r3, [r3, #24]
 800d25e:	441a      	add	r2, r3
 800d260:	2300      	movs	r3, #0
 800d262:	9300      	str	r3, [sp, #0]
 800d264:	2300      	movs	r3, #0
 800d266:	2100      	movs	r1, #0
 800d268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d26a:	f7ff fe05 	bl	800ce78 <xTimerGenericCommand>
 800d26e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d270:	6a3b      	ldr	r3, [r7, #32]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d14f      	bne.n	800d316 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27a:	f383 8811 	msr	BASEPRI, r3
 800d27e:	f3bf 8f6f 	isb	sy
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	61bb      	str	r3, [r7, #24]
}
 800d288:	bf00      	nop
 800d28a:	e7fe      	b.n	800d28a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d292:	f023 0301 	bic.w	r3, r3, #1
 800d296:	b2da      	uxtb	r2, r3
 800d298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d29e:	e03a      	b.n	800d316 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2a6:	f043 0301 	orr.w	r3, r3, #1
 800d2aa:	b2da      	uxtb	r2, r3
 800d2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d2b2:	68ba      	ldr	r2, [r7, #8]
 800d2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ba:	699b      	ldr	r3, [r3, #24]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d10a      	bne.n	800d2d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c4:	f383 8811 	msr	BASEPRI, r3
 800d2c8:	f3bf 8f6f 	isb	sy
 800d2cc:	f3bf 8f4f 	dsb	sy
 800d2d0:	617b      	str	r3, [r7, #20]
}
 800d2d2:	bf00      	nop
 800d2d4:	e7fe      	b.n	800d2d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d8:	699a      	ldr	r2, [r3, #24]
 800d2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2dc:	18d1      	adds	r1, r2, r3
 800d2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2e4:	f7ff ff06 	bl	800d0f4 <prvInsertTimerInActiveList>
					break;
 800d2e8:	e015      	b.n	800d316 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2f0:	f003 0302 	and.w	r3, r3, #2
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d103      	bne.n	800d300 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d2f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2fa:	f000 fbe1 	bl	800dac0 <vPortFree>
 800d2fe:	e00a      	b.n	800d316 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d306:	f023 0301 	bic.w	r3, r3, #1
 800d30a:	b2da      	uxtb	r2, r3
 800d30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d312:	e000      	b.n	800d316 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d314:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d316:	4b08      	ldr	r3, [pc, #32]	; (800d338 <prvProcessReceivedCommands+0x1c0>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	1d39      	adds	r1, r7, #4
 800d31c:	2200      	movs	r2, #0
 800d31e:	4618      	mov	r0, r3
 800d320:	f7fe f958 	bl	800b5d4 <xQueueReceive>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	f47f af2a 	bne.w	800d180 <prvProcessReceivedCommands+0x8>
	}
}
 800d32c:	bf00      	nop
 800d32e:	bf00      	nop
 800d330:	3730      	adds	r7, #48	; 0x30
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	20002920 	.word	0x20002920

0800d33c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b088      	sub	sp, #32
 800d340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d342:	e048      	b.n	800d3d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d344:	4b2d      	ldr	r3, [pc, #180]	; (800d3fc <prvSwitchTimerLists+0xc0>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d34e:	4b2b      	ldr	r3, [pc, #172]	; (800d3fc <prvSwitchTimerLists+0xc0>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	68db      	ldr	r3, [r3, #12]
 800d356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	3304      	adds	r3, #4
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7fd fdab 	bl	800aeb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	6a1b      	ldr	r3, [r3, #32]
 800d366:	68f8      	ldr	r0, [r7, #12]
 800d368:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d370:	f003 0304 	and.w	r3, r3, #4
 800d374:	2b00      	cmp	r3, #0
 800d376:	d02e      	beq.n	800d3d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	699b      	ldr	r3, [r3, #24]
 800d37c:	693a      	ldr	r2, [r7, #16]
 800d37e:	4413      	add	r3, r2
 800d380:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d382:	68ba      	ldr	r2, [r7, #8]
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	429a      	cmp	r2, r3
 800d388:	d90e      	bls.n	800d3a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	68ba      	ldr	r2, [r7, #8]
 800d38e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d396:	4b19      	ldr	r3, [pc, #100]	; (800d3fc <prvSwitchTimerLists+0xc0>)
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	3304      	adds	r3, #4
 800d39e:	4619      	mov	r1, r3
 800d3a0:	4610      	mov	r0, r2
 800d3a2:	f7fd fd50 	bl	800ae46 <vListInsert>
 800d3a6:	e016      	b.n	800d3d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	9300      	str	r3, [sp, #0]
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	2100      	movs	r1, #0
 800d3b2:	68f8      	ldr	r0, [r7, #12]
 800d3b4:	f7ff fd60 	bl	800ce78 <xTimerGenericCommand>
 800d3b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d10a      	bne.n	800d3d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c4:	f383 8811 	msr	BASEPRI, r3
 800d3c8:	f3bf 8f6f 	isb	sy
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	603b      	str	r3, [r7, #0]
}
 800d3d2:	bf00      	nop
 800d3d4:	e7fe      	b.n	800d3d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3d6:	4b09      	ldr	r3, [pc, #36]	; (800d3fc <prvSwitchTimerLists+0xc0>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1b1      	bne.n	800d344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d3e0:	4b06      	ldr	r3, [pc, #24]	; (800d3fc <prvSwitchTimerLists+0xc0>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d3e6:	4b06      	ldr	r3, [pc, #24]	; (800d400 <prvSwitchTimerLists+0xc4>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4a04      	ldr	r2, [pc, #16]	; (800d3fc <prvSwitchTimerLists+0xc0>)
 800d3ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d3ee:	4a04      	ldr	r2, [pc, #16]	; (800d400 <prvSwitchTimerLists+0xc4>)
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	6013      	str	r3, [r2, #0]
}
 800d3f4:	bf00      	nop
 800d3f6:	3718      	adds	r7, #24
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	20002918 	.word	0x20002918
 800d400:	2000291c 	.word	0x2000291c

0800d404 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d40a:	f000 f96b 	bl	800d6e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d40e:	4b15      	ldr	r3, [pc, #84]	; (800d464 <prvCheckForValidListAndQueue+0x60>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d120      	bne.n	800d458 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d416:	4814      	ldr	r0, [pc, #80]	; (800d468 <prvCheckForValidListAndQueue+0x64>)
 800d418:	f7fd fcc4 	bl	800ada4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d41c:	4813      	ldr	r0, [pc, #76]	; (800d46c <prvCheckForValidListAndQueue+0x68>)
 800d41e:	f7fd fcc1 	bl	800ada4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d422:	4b13      	ldr	r3, [pc, #76]	; (800d470 <prvCheckForValidListAndQueue+0x6c>)
 800d424:	4a10      	ldr	r2, [pc, #64]	; (800d468 <prvCheckForValidListAndQueue+0x64>)
 800d426:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d428:	4b12      	ldr	r3, [pc, #72]	; (800d474 <prvCheckForValidListAndQueue+0x70>)
 800d42a:	4a10      	ldr	r2, [pc, #64]	; (800d46c <prvCheckForValidListAndQueue+0x68>)
 800d42c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d42e:	2300      	movs	r3, #0
 800d430:	9300      	str	r3, [sp, #0]
 800d432:	4b11      	ldr	r3, [pc, #68]	; (800d478 <prvCheckForValidListAndQueue+0x74>)
 800d434:	4a11      	ldr	r2, [pc, #68]	; (800d47c <prvCheckForValidListAndQueue+0x78>)
 800d436:	2110      	movs	r1, #16
 800d438:	200a      	movs	r0, #10
 800d43a:	f7fd fdcf 	bl	800afdc <xQueueGenericCreateStatic>
 800d43e:	4603      	mov	r3, r0
 800d440:	4a08      	ldr	r2, [pc, #32]	; (800d464 <prvCheckForValidListAndQueue+0x60>)
 800d442:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d444:	4b07      	ldr	r3, [pc, #28]	; (800d464 <prvCheckForValidListAndQueue+0x60>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d005      	beq.n	800d458 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d44c:	4b05      	ldr	r3, [pc, #20]	; (800d464 <prvCheckForValidListAndQueue+0x60>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	490b      	ldr	r1, [pc, #44]	; (800d480 <prvCheckForValidListAndQueue+0x7c>)
 800d452:	4618      	mov	r0, r3
 800d454:	f7fe fbd2 	bl	800bbfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d458:	f000 f974 	bl	800d744 <vPortExitCritical>
}
 800d45c:	bf00      	nop
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	20002920 	.word	0x20002920
 800d468:	200028f0 	.word	0x200028f0
 800d46c:	20002904 	.word	0x20002904
 800d470:	20002918 	.word	0x20002918
 800d474:	2000291c 	.word	0x2000291c
 800d478:	200029cc 	.word	0x200029cc
 800d47c:	2000292c 	.word	0x2000292c
 800d480:	080157a8 	.word	0x080157a8

0800d484 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d484:	b480      	push	{r7}
 800d486:	b085      	sub	sp, #20
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	3b04      	subs	r3, #4
 800d494:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d49c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	3b04      	subs	r3, #4
 800d4a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	f023 0201 	bic.w	r2, r3, #1
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	3b04      	subs	r3, #4
 800d4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d4b4:	4a0c      	ldr	r2, [pc, #48]	; (800d4e8 <pxPortInitialiseStack+0x64>)
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	3b14      	subs	r3, #20
 800d4be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	3b04      	subs	r3, #4
 800d4ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f06f 0202 	mvn.w	r2, #2
 800d4d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	3b20      	subs	r3, #32
 800d4d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d4da:	68fb      	ldr	r3, [r7, #12]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3714      	adds	r7, #20
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr
 800d4e8:	0800d4ed 	.word	0x0800d4ed

0800d4ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b085      	sub	sp, #20
 800d4f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d4f6:	4b12      	ldr	r3, [pc, #72]	; (800d540 <prvTaskExitError+0x54>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4fe:	d00a      	beq.n	800d516 <prvTaskExitError+0x2a>
	__asm volatile
 800d500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	60fb      	str	r3, [r7, #12]
}
 800d512:	bf00      	nop
 800d514:	e7fe      	b.n	800d514 <prvTaskExitError+0x28>
	__asm volatile
 800d516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51a:	f383 8811 	msr	BASEPRI, r3
 800d51e:	f3bf 8f6f 	isb	sy
 800d522:	f3bf 8f4f 	dsb	sy
 800d526:	60bb      	str	r3, [r7, #8]
}
 800d528:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d52a:	bf00      	nop
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d0fc      	beq.n	800d52c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d532:	bf00      	nop
 800d534:	bf00      	nop
 800d536:	3714      	adds	r7, #20
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr
 800d540:	20000020 	.word	0x20000020
	...

0800d550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d550:	4b07      	ldr	r3, [pc, #28]	; (800d570 <pxCurrentTCBConst2>)
 800d552:	6819      	ldr	r1, [r3, #0]
 800d554:	6808      	ldr	r0, [r1, #0]
 800d556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d55a:	f380 8809 	msr	PSP, r0
 800d55e:	f3bf 8f6f 	isb	sy
 800d562:	f04f 0000 	mov.w	r0, #0
 800d566:	f380 8811 	msr	BASEPRI, r0
 800d56a:	4770      	bx	lr
 800d56c:	f3af 8000 	nop.w

0800d570 <pxCurrentTCBConst2>:
 800d570:	200023f0 	.word	0x200023f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d574:	bf00      	nop
 800d576:	bf00      	nop

0800d578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d578:	4808      	ldr	r0, [pc, #32]	; (800d59c <prvPortStartFirstTask+0x24>)
 800d57a:	6800      	ldr	r0, [r0, #0]
 800d57c:	6800      	ldr	r0, [r0, #0]
 800d57e:	f380 8808 	msr	MSP, r0
 800d582:	f04f 0000 	mov.w	r0, #0
 800d586:	f380 8814 	msr	CONTROL, r0
 800d58a:	b662      	cpsie	i
 800d58c:	b661      	cpsie	f
 800d58e:	f3bf 8f4f 	dsb	sy
 800d592:	f3bf 8f6f 	isb	sy
 800d596:	df00      	svc	0
 800d598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d59a:	bf00      	nop
 800d59c:	e000ed08 	.word	0xe000ed08

0800d5a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b086      	sub	sp, #24
 800d5a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d5a6:	4b46      	ldr	r3, [pc, #280]	; (800d6c0 <xPortStartScheduler+0x120>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a46      	ldr	r2, [pc, #280]	; (800d6c4 <xPortStartScheduler+0x124>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d10a      	bne.n	800d5c6 <xPortStartScheduler+0x26>
	__asm volatile
 800d5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b4:	f383 8811 	msr	BASEPRI, r3
 800d5b8:	f3bf 8f6f 	isb	sy
 800d5bc:	f3bf 8f4f 	dsb	sy
 800d5c0:	613b      	str	r3, [r7, #16]
}
 800d5c2:	bf00      	nop
 800d5c4:	e7fe      	b.n	800d5c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d5c6:	4b3e      	ldr	r3, [pc, #248]	; (800d6c0 <xPortStartScheduler+0x120>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4a3f      	ldr	r2, [pc, #252]	; (800d6c8 <xPortStartScheduler+0x128>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d10a      	bne.n	800d5e6 <xPortStartScheduler+0x46>
	__asm volatile
 800d5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d4:	f383 8811 	msr	BASEPRI, r3
 800d5d8:	f3bf 8f6f 	isb	sy
 800d5dc:	f3bf 8f4f 	dsb	sy
 800d5e0:	60fb      	str	r3, [r7, #12]
}
 800d5e2:	bf00      	nop
 800d5e4:	e7fe      	b.n	800d5e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d5e6:	4b39      	ldr	r3, [pc, #228]	; (800d6cc <xPortStartScheduler+0x12c>)
 800d5e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	22ff      	movs	r2, #255	; 0xff
 800d5f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d600:	78fb      	ldrb	r3, [r7, #3]
 800d602:	b2db      	uxtb	r3, r3
 800d604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d608:	b2da      	uxtb	r2, r3
 800d60a:	4b31      	ldr	r3, [pc, #196]	; (800d6d0 <xPortStartScheduler+0x130>)
 800d60c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d60e:	4b31      	ldr	r3, [pc, #196]	; (800d6d4 <xPortStartScheduler+0x134>)
 800d610:	2207      	movs	r2, #7
 800d612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d614:	e009      	b.n	800d62a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d616:	4b2f      	ldr	r3, [pc, #188]	; (800d6d4 <xPortStartScheduler+0x134>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	3b01      	subs	r3, #1
 800d61c:	4a2d      	ldr	r2, [pc, #180]	; (800d6d4 <xPortStartScheduler+0x134>)
 800d61e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d620:	78fb      	ldrb	r3, [r7, #3]
 800d622:	b2db      	uxtb	r3, r3
 800d624:	005b      	lsls	r3, r3, #1
 800d626:	b2db      	uxtb	r3, r3
 800d628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d62a:	78fb      	ldrb	r3, [r7, #3]
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d632:	2b80      	cmp	r3, #128	; 0x80
 800d634:	d0ef      	beq.n	800d616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d636:	4b27      	ldr	r3, [pc, #156]	; (800d6d4 <xPortStartScheduler+0x134>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f1c3 0307 	rsb	r3, r3, #7
 800d63e:	2b04      	cmp	r3, #4
 800d640:	d00a      	beq.n	800d658 <xPortStartScheduler+0xb8>
	__asm volatile
 800d642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	60bb      	str	r3, [r7, #8]
}
 800d654:	bf00      	nop
 800d656:	e7fe      	b.n	800d656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d658:	4b1e      	ldr	r3, [pc, #120]	; (800d6d4 <xPortStartScheduler+0x134>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	021b      	lsls	r3, r3, #8
 800d65e:	4a1d      	ldr	r2, [pc, #116]	; (800d6d4 <xPortStartScheduler+0x134>)
 800d660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d662:	4b1c      	ldr	r3, [pc, #112]	; (800d6d4 <xPortStartScheduler+0x134>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d66a:	4a1a      	ldr	r2, [pc, #104]	; (800d6d4 <xPortStartScheduler+0x134>)
 800d66c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	b2da      	uxtb	r2, r3
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d676:	4b18      	ldr	r3, [pc, #96]	; (800d6d8 <xPortStartScheduler+0x138>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a17      	ldr	r2, [pc, #92]	; (800d6d8 <xPortStartScheduler+0x138>)
 800d67c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d682:	4b15      	ldr	r3, [pc, #84]	; (800d6d8 <xPortStartScheduler+0x138>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	4a14      	ldr	r2, [pc, #80]	; (800d6d8 <xPortStartScheduler+0x138>)
 800d688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d68c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d68e:	f000 f8dd 	bl	800d84c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d692:	4b12      	ldr	r3, [pc, #72]	; (800d6dc <xPortStartScheduler+0x13c>)
 800d694:	2200      	movs	r2, #0
 800d696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d698:	f000 f8fc 	bl	800d894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d69c:	4b10      	ldr	r3, [pc, #64]	; (800d6e0 <xPortStartScheduler+0x140>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a0f      	ldr	r2, [pc, #60]	; (800d6e0 <xPortStartScheduler+0x140>)
 800d6a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d6a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d6a8:	f7ff ff66 	bl	800d578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d6ac:	f7fe ff48 	bl	800c540 <vTaskSwitchContext>
	prvTaskExitError();
 800d6b0:	f7ff ff1c 	bl	800d4ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d6b4:	2300      	movs	r3, #0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3718      	adds	r7, #24
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	e000ed00 	.word	0xe000ed00
 800d6c4:	410fc271 	.word	0x410fc271
 800d6c8:	410fc270 	.word	0x410fc270
 800d6cc:	e000e400 	.word	0xe000e400
 800d6d0:	20002a1c 	.word	0x20002a1c
 800d6d4:	20002a20 	.word	0x20002a20
 800d6d8:	e000ed20 	.word	0xe000ed20
 800d6dc:	20000020 	.word	0x20000020
 800d6e0:	e000ef34 	.word	0xe000ef34

0800d6e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
	__asm volatile
 800d6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ee:	f383 8811 	msr	BASEPRI, r3
 800d6f2:	f3bf 8f6f 	isb	sy
 800d6f6:	f3bf 8f4f 	dsb	sy
 800d6fa:	607b      	str	r3, [r7, #4]
}
 800d6fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d6fe:	4b0f      	ldr	r3, [pc, #60]	; (800d73c <vPortEnterCritical+0x58>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	3301      	adds	r3, #1
 800d704:	4a0d      	ldr	r2, [pc, #52]	; (800d73c <vPortEnterCritical+0x58>)
 800d706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d708:	4b0c      	ldr	r3, [pc, #48]	; (800d73c <vPortEnterCritical+0x58>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d10f      	bne.n	800d730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d710:	4b0b      	ldr	r3, [pc, #44]	; (800d740 <vPortEnterCritical+0x5c>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	b2db      	uxtb	r3, r3
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00a      	beq.n	800d730 <vPortEnterCritical+0x4c>
	__asm volatile
 800d71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	603b      	str	r3, [r7, #0]
}
 800d72c:	bf00      	nop
 800d72e:	e7fe      	b.n	800d72e <vPortEnterCritical+0x4a>
	}
}
 800d730:	bf00      	nop
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr
 800d73c:	20000020 	.word	0x20000020
 800d740:	e000ed04 	.word	0xe000ed04

0800d744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d74a:	4b12      	ldr	r3, [pc, #72]	; (800d794 <vPortExitCritical+0x50>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d10a      	bne.n	800d768 <vPortExitCritical+0x24>
	__asm volatile
 800d752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d756:	f383 8811 	msr	BASEPRI, r3
 800d75a:	f3bf 8f6f 	isb	sy
 800d75e:	f3bf 8f4f 	dsb	sy
 800d762:	607b      	str	r3, [r7, #4]
}
 800d764:	bf00      	nop
 800d766:	e7fe      	b.n	800d766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d768:	4b0a      	ldr	r3, [pc, #40]	; (800d794 <vPortExitCritical+0x50>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	3b01      	subs	r3, #1
 800d76e:	4a09      	ldr	r2, [pc, #36]	; (800d794 <vPortExitCritical+0x50>)
 800d770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d772:	4b08      	ldr	r3, [pc, #32]	; (800d794 <vPortExitCritical+0x50>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d105      	bne.n	800d786 <vPortExitCritical+0x42>
 800d77a:	2300      	movs	r3, #0
 800d77c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	f383 8811 	msr	BASEPRI, r3
}
 800d784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d786:	bf00      	nop
 800d788:	370c      	adds	r7, #12
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	20000020 	.word	0x20000020
	...

0800d7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d7a0:	f3ef 8009 	mrs	r0, PSP
 800d7a4:	f3bf 8f6f 	isb	sy
 800d7a8:	4b15      	ldr	r3, [pc, #84]	; (800d800 <pxCurrentTCBConst>)
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	f01e 0f10 	tst.w	lr, #16
 800d7b0:	bf08      	it	eq
 800d7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ba:	6010      	str	r0, [r2, #0]
 800d7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d7c4:	f380 8811 	msr	BASEPRI, r0
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	f7fe feb6 	bl	800c540 <vTaskSwitchContext>
 800d7d4:	f04f 0000 	mov.w	r0, #0
 800d7d8:	f380 8811 	msr	BASEPRI, r0
 800d7dc:	bc09      	pop	{r0, r3}
 800d7de:	6819      	ldr	r1, [r3, #0]
 800d7e0:	6808      	ldr	r0, [r1, #0]
 800d7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e6:	f01e 0f10 	tst.w	lr, #16
 800d7ea:	bf08      	it	eq
 800d7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d7f0:	f380 8809 	msr	PSP, r0
 800d7f4:	f3bf 8f6f 	isb	sy
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	f3af 8000 	nop.w

0800d800 <pxCurrentTCBConst>:
 800d800:	200023f0 	.word	0x200023f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d804:	bf00      	nop
 800d806:	bf00      	nop

0800d808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
	__asm volatile
 800d80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d812:	f383 8811 	msr	BASEPRI, r3
 800d816:	f3bf 8f6f 	isb	sy
 800d81a:	f3bf 8f4f 	dsb	sy
 800d81e:	607b      	str	r3, [r7, #4]
}
 800d820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d822:	f7fe fdd3 	bl	800c3cc <xTaskIncrementTick>
 800d826:	4603      	mov	r3, r0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d003      	beq.n	800d834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d82c:	4b06      	ldr	r3, [pc, #24]	; (800d848 <xPortSysTickHandler+0x40>)
 800d82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d832:	601a      	str	r2, [r3, #0]
 800d834:	2300      	movs	r3, #0
 800d836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	f383 8811 	msr	BASEPRI, r3
}
 800d83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d840:	bf00      	nop
 800d842:	3708      	adds	r7, #8
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}
 800d848:	e000ed04 	.word	0xe000ed04

0800d84c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d84c:	b480      	push	{r7}
 800d84e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d850:	4b0b      	ldr	r3, [pc, #44]	; (800d880 <vPortSetupTimerInterrupt+0x34>)
 800d852:	2200      	movs	r2, #0
 800d854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d856:	4b0b      	ldr	r3, [pc, #44]	; (800d884 <vPortSetupTimerInterrupt+0x38>)
 800d858:	2200      	movs	r2, #0
 800d85a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d85c:	4b0a      	ldr	r3, [pc, #40]	; (800d888 <vPortSetupTimerInterrupt+0x3c>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a0a      	ldr	r2, [pc, #40]	; (800d88c <vPortSetupTimerInterrupt+0x40>)
 800d862:	fba2 2303 	umull	r2, r3, r2, r3
 800d866:	099b      	lsrs	r3, r3, #6
 800d868:	4a09      	ldr	r2, [pc, #36]	; (800d890 <vPortSetupTimerInterrupt+0x44>)
 800d86a:	3b01      	subs	r3, #1
 800d86c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d86e:	4b04      	ldr	r3, [pc, #16]	; (800d880 <vPortSetupTimerInterrupt+0x34>)
 800d870:	2207      	movs	r2, #7
 800d872:	601a      	str	r2, [r3, #0]
}
 800d874:	bf00      	nop
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop
 800d880:	e000e010 	.word	0xe000e010
 800d884:	e000e018 	.word	0xe000e018
 800d888:	20000014 	.word	0x20000014
 800d88c:	10624dd3 	.word	0x10624dd3
 800d890:	e000e014 	.word	0xe000e014

0800d894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d8a4 <vPortEnableVFP+0x10>
 800d898:	6801      	ldr	r1, [r0, #0]
 800d89a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d89e:	6001      	str	r1, [r0, #0]
 800d8a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d8a2:	bf00      	nop
 800d8a4:	e000ed88 	.word	0xe000ed88

0800d8a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d8ae:	f3ef 8305 	mrs	r3, IPSR
 800d8b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2b0f      	cmp	r3, #15
 800d8b8:	d914      	bls.n	800d8e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d8ba:	4a17      	ldr	r2, [pc, #92]	; (800d918 <vPortValidateInterruptPriority+0x70>)
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	4413      	add	r3, r2
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d8c4:	4b15      	ldr	r3, [pc, #84]	; (800d91c <vPortValidateInterruptPriority+0x74>)
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	7afa      	ldrb	r2, [r7, #11]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d20a      	bcs.n	800d8e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	607b      	str	r3, [r7, #4]
}
 800d8e0:	bf00      	nop
 800d8e2:	e7fe      	b.n	800d8e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d8e4:	4b0e      	ldr	r3, [pc, #56]	; (800d920 <vPortValidateInterruptPriority+0x78>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d8ec:	4b0d      	ldr	r3, [pc, #52]	; (800d924 <vPortValidateInterruptPriority+0x7c>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d90a      	bls.n	800d90a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f8:	f383 8811 	msr	BASEPRI, r3
 800d8fc:	f3bf 8f6f 	isb	sy
 800d900:	f3bf 8f4f 	dsb	sy
 800d904:	603b      	str	r3, [r7, #0]
}
 800d906:	bf00      	nop
 800d908:	e7fe      	b.n	800d908 <vPortValidateInterruptPriority+0x60>
	}
 800d90a:	bf00      	nop
 800d90c:	3714      	adds	r7, #20
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	e000e3f0 	.word	0xe000e3f0
 800d91c:	20002a1c 	.word	0x20002a1c
 800d920:	e000ed0c 	.word	0xe000ed0c
 800d924:	20002a20 	.word	0x20002a20

0800d928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b08a      	sub	sp, #40	; 0x28
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d930:	2300      	movs	r3, #0
 800d932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d934:	f7fe fc8e 	bl	800c254 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d938:	4b5b      	ldr	r3, [pc, #364]	; (800daa8 <pvPortMalloc+0x180>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d101      	bne.n	800d944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d940:	f000 f920 	bl	800db84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d944:	4b59      	ldr	r3, [pc, #356]	; (800daac <pvPortMalloc+0x184>)
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4013      	ands	r3, r2
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f040 8093 	bne.w	800da78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d01d      	beq.n	800d994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d958:	2208      	movs	r2, #8
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	4413      	add	r3, r2
 800d95e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f003 0307 	and.w	r3, r3, #7
 800d966:	2b00      	cmp	r3, #0
 800d968:	d014      	beq.n	800d994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f023 0307 	bic.w	r3, r3, #7
 800d970:	3308      	adds	r3, #8
 800d972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f003 0307 	and.w	r3, r3, #7
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d00a      	beq.n	800d994 <pvPortMalloc+0x6c>
	__asm volatile
 800d97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d982:	f383 8811 	msr	BASEPRI, r3
 800d986:	f3bf 8f6f 	isb	sy
 800d98a:	f3bf 8f4f 	dsb	sy
 800d98e:	617b      	str	r3, [r7, #20]
}
 800d990:	bf00      	nop
 800d992:	e7fe      	b.n	800d992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d06e      	beq.n	800da78 <pvPortMalloc+0x150>
 800d99a:	4b45      	ldr	r3, [pc, #276]	; (800dab0 <pvPortMalloc+0x188>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d869      	bhi.n	800da78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d9a4:	4b43      	ldr	r3, [pc, #268]	; (800dab4 <pvPortMalloc+0x18c>)
 800d9a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d9a8:	4b42      	ldr	r3, [pc, #264]	; (800dab4 <pvPortMalloc+0x18c>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9ae:	e004      	b.n	800d9ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d903      	bls.n	800d9cc <pvPortMalloc+0xa4>
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d1f1      	bne.n	800d9b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d9cc:	4b36      	ldr	r3, [pc, #216]	; (800daa8 <pvPortMalloc+0x180>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d050      	beq.n	800da78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d9d6:	6a3b      	ldr	r3, [r7, #32]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	2208      	movs	r2, #8
 800d9dc:	4413      	add	r3, r2
 800d9de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	6a3b      	ldr	r3, [r7, #32]
 800d9e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ea:	685a      	ldr	r2, [r3, #4]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	1ad2      	subs	r2, r2, r3
 800d9f0:	2308      	movs	r3, #8
 800d9f2:	005b      	lsls	r3, r3, #1
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d91f      	bls.n	800da38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da00:	69bb      	ldr	r3, [r7, #24]
 800da02:	f003 0307 	and.w	r3, r3, #7
 800da06:	2b00      	cmp	r3, #0
 800da08:	d00a      	beq.n	800da20 <pvPortMalloc+0xf8>
	__asm volatile
 800da0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	613b      	str	r3, [r7, #16]
}
 800da1c:	bf00      	nop
 800da1e:	e7fe      	b.n	800da1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da22:	685a      	ldr	r2, [r3, #4]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	1ad2      	subs	r2, r2, r3
 800da28:	69bb      	ldr	r3, [r7, #24]
 800da2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da32:	69b8      	ldr	r0, [r7, #24]
 800da34:	f000 f908 	bl	800dc48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da38:	4b1d      	ldr	r3, [pc, #116]	; (800dab0 <pvPortMalloc+0x188>)
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	1ad3      	subs	r3, r2, r3
 800da42:	4a1b      	ldr	r2, [pc, #108]	; (800dab0 <pvPortMalloc+0x188>)
 800da44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da46:	4b1a      	ldr	r3, [pc, #104]	; (800dab0 <pvPortMalloc+0x188>)
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	4b1b      	ldr	r3, [pc, #108]	; (800dab8 <pvPortMalloc+0x190>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d203      	bcs.n	800da5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da52:	4b17      	ldr	r3, [pc, #92]	; (800dab0 <pvPortMalloc+0x188>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a18      	ldr	r2, [pc, #96]	; (800dab8 <pvPortMalloc+0x190>)
 800da58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5c:	685a      	ldr	r2, [r3, #4]
 800da5e:	4b13      	ldr	r3, [pc, #76]	; (800daac <pvPortMalloc+0x184>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	431a      	orrs	r2, r3
 800da64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6a:	2200      	movs	r2, #0
 800da6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800da6e:	4b13      	ldr	r3, [pc, #76]	; (800dabc <pvPortMalloc+0x194>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	3301      	adds	r3, #1
 800da74:	4a11      	ldr	r2, [pc, #68]	; (800dabc <pvPortMalloc+0x194>)
 800da76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da78:	f7fe fbfa 	bl	800c270 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	f003 0307 	and.w	r3, r3, #7
 800da82:	2b00      	cmp	r3, #0
 800da84:	d00a      	beq.n	800da9c <pvPortMalloc+0x174>
	__asm volatile
 800da86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8a:	f383 8811 	msr	BASEPRI, r3
 800da8e:	f3bf 8f6f 	isb	sy
 800da92:	f3bf 8f4f 	dsb	sy
 800da96:	60fb      	str	r3, [r7, #12]
}
 800da98:	bf00      	nop
 800da9a:	e7fe      	b.n	800da9a <pvPortMalloc+0x172>
	return pvReturn;
 800da9c:	69fb      	ldr	r3, [r7, #28]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3728      	adds	r7, #40	; 0x28
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	2000513c 	.word	0x2000513c
 800daac:	20005150 	.word	0x20005150
 800dab0:	20005140 	.word	0x20005140
 800dab4:	20005134 	.word	0x20005134
 800dab8:	20005144 	.word	0x20005144
 800dabc:	20005148 	.word	0x20005148

0800dac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b086      	sub	sp, #24
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d04d      	beq.n	800db6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dad2:	2308      	movs	r3, #8
 800dad4:	425b      	negs	r3, r3
 800dad6:	697a      	ldr	r2, [r7, #20]
 800dad8:	4413      	add	r3, r2
 800dada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	685a      	ldr	r2, [r3, #4]
 800dae4:	4b24      	ldr	r3, [pc, #144]	; (800db78 <vPortFree+0xb8>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4013      	ands	r3, r2
 800daea:	2b00      	cmp	r3, #0
 800daec:	d10a      	bne.n	800db04 <vPortFree+0x44>
	__asm volatile
 800daee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf2:	f383 8811 	msr	BASEPRI, r3
 800daf6:	f3bf 8f6f 	isb	sy
 800dafa:	f3bf 8f4f 	dsb	sy
 800dafe:	60fb      	str	r3, [r7, #12]
}
 800db00:	bf00      	nop
 800db02:	e7fe      	b.n	800db02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d00a      	beq.n	800db22 <vPortFree+0x62>
	__asm volatile
 800db0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db10:	f383 8811 	msr	BASEPRI, r3
 800db14:	f3bf 8f6f 	isb	sy
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	60bb      	str	r3, [r7, #8]
}
 800db1e:	bf00      	nop
 800db20:	e7fe      	b.n	800db20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	685a      	ldr	r2, [r3, #4]
 800db26:	4b14      	ldr	r3, [pc, #80]	; (800db78 <vPortFree+0xb8>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4013      	ands	r3, r2
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d01e      	beq.n	800db6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d11a      	bne.n	800db6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	685a      	ldr	r2, [r3, #4]
 800db3c:	4b0e      	ldr	r3, [pc, #56]	; (800db78 <vPortFree+0xb8>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	43db      	mvns	r3, r3
 800db42:	401a      	ands	r2, r3
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800db48:	f7fe fb84 	bl	800c254 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	685a      	ldr	r2, [r3, #4]
 800db50:	4b0a      	ldr	r3, [pc, #40]	; (800db7c <vPortFree+0xbc>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4413      	add	r3, r2
 800db56:	4a09      	ldr	r2, [pc, #36]	; (800db7c <vPortFree+0xbc>)
 800db58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db5a:	6938      	ldr	r0, [r7, #16]
 800db5c:	f000 f874 	bl	800dc48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800db60:	4b07      	ldr	r3, [pc, #28]	; (800db80 <vPortFree+0xc0>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	3301      	adds	r3, #1
 800db66:	4a06      	ldr	r2, [pc, #24]	; (800db80 <vPortFree+0xc0>)
 800db68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800db6a:	f7fe fb81 	bl	800c270 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db6e:	bf00      	nop
 800db70:	3718      	adds	r7, #24
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	20005150 	.word	0x20005150
 800db7c:	20005140 	.word	0x20005140
 800db80:	2000514c 	.word	0x2000514c

0800db84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db84:	b480      	push	{r7}
 800db86:	b085      	sub	sp, #20
 800db88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db8a:	f242 7310 	movw	r3, #10000	; 0x2710
 800db8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800db90:	4b27      	ldr	r3, [pc, #156]	; (800dc30 <prvHeapInit+0xac>)
 800db92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f003 0307 	and.w	r3, r3, #7
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d00c      	beq.n	800dbb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	3307      	adds	r3, #7
 800dba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f023 0307 	bic.w	r3, r3, #7
 800dbaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dbac:	68ba      	ldr	r2, [r7, #8]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	1ad3      	subs	r3, r2, r3
 800dbb2:	4a1f      	ldr	r2, [pc, #124]	; (800dc30 <prvHeapInit+0xac>)
 800dbb4:	4413      	add	r3, r2
 800dbb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dbbc:	4a1d      	ldr	r2, [pc, #116]	; (800dc34 <prvHeapInit+0xb0>)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dbc2:	4b1c      	ldr	r3, [pc, #112]	; (800dc34 <prvHeapInit+0xb0>)
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	68ba      	ldr	r2, [r7, #8]
 800dbcc:	4413      	add	r3, r2
 800dbce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dbd0:	2208      	movs	r2, #8
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	1a9b      	subs	r3, r3, r2
 800dbd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f023 0307 	bic.w	r3, r3, #7
 800dbde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	4a15      	ldr	r2, [pc, #84]	; (800dc38 <prvHeapInit+0xb4>)
 800dbe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dbe6:	4b14      	ldr	r3, [pc, #80]	; (800dc38 <prvHeapInit+0xb4>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2200      	movs	r2, #0
 800dbec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dbee:	4b12      	ldr	r3, [pc, #72]	; (800dc38 <prvHeapInit+0xb4>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	68fa      	ldr	r2, [r7, #12]
 800dbfe:	1ad2      	subs	r2, r2, r3
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc04:	4b0c      	ldr	r3, [pc, #48]	; (800dc38 <prvHeapInit+0xb4>)
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	4a0a      	ldr	r2, [pc, #40]	; (800dc3c <prvHeapInit+0xb8>)
 800dc12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	4a09      	ldr	r2, [pc, #36]	; (800dc40 <prvHeapInit+0xbc>)
 800dc1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc1c:	4b09      	ldr	r3, [pc, #36]	; (800dc44 <prvHeapInit+0xc0>)
 800dc1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc22:	601a      	str	r2, [r3, #0]
}
 800dc24:	bf00      	nop
 800dc26:	3714      	adds	r7, #20
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr
 800dc30:	20002a24 	.word	0x20002a24
 800dc34:	20005134 	.word	0x20005134
 800dc38:	2000513c 	.word	0x2000513c
 800dc3c:	20005144 	.word	0x20005144
 800dc40:	20005140 	.word	0x20005140
 800dc44:	20005150 	.word	0x20005150

0800dc48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc50:	4b28      	ldr	r3, [pc, #160]	; (800dcf4 <prvInsertBlockIntoFreeList+0xac>)
 800dc52:	60fb      	str	r3, [r7, #12]
 800dc54:	e002      	b.n	800dc5c <prvInsertBlockIntoFreeList+0x14>
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	60fb      	str	r3, [r7, #12]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d8f7      	bhi.n	800dc56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	685b      	ldr	r3, [r3, #4]
 800dc6e:	68ba      	ldr	r2, [r7, #8]
 800dc70:	4413      	add	r3, r2
 800dc72:	687a      	ldr	r2, [r7, #4]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d108      	bne.n	800dc8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	685a      	ldr	r2, [r3, #4]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	441a      	add	r2, r3
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	685b      	ldr	r3, [r3, #4]
 800dc92:	68ba      	ldr	r2, [r7, #8]
 800dc94:	441a      	add	r2, r3
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d118      	bne.n	800dcd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	4b15      	ldr	r3, [pc, #84]	; (800dcf8 <prvInsertBlockIntoFreeList+0xb0>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d00d      	beq.n	800dcc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	685a      	ldr	r2, [r3, #4]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	441a      	add	r2, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	601a      	str	r2, [r3, #0]
 800dcc4:	e008      	b.n	800dcd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dcc6:	4b0c      	ldr	r3, [pc, #48]	; (800dcf8 <prvInsertBlockIntoFreeList+0xb0>)
 800dcc8:	681a      	ldr	r2, [r3, #0]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	601a      	str	r2, [r3, #0]
 800dcce:	e003      	b.n	800dcd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681a      	ldr	r2, [r3, #0]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dcd8:	68fa      	ldr	r2, [r7, #12]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d002      	beq.n	800dce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dce6:	bf00      	nop
 800dce8:	3714      	adds	r7, #20
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	20005134 	.word	0x20005134
 800dcf8:	2000513c 	.word	0x2000513c

0800dcfc <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 800dd06:	2300      	movs	r3, #0
 800dd08:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 800dd0a:	f107 030c 	add.w	r3, r7, #12
 800dd0e:	683a      	ldr	r2, [r7, #0]
 800dd10:	2101      	movs	r1, #1
 800dd12:	4618      	mov	r0, r3
 800dd14:	f000 fa1e 	bl	800e154 <ai_platform_get_activations_map>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d03f      	beq.n	800dd9e <network_configure_activations+0xa2>
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800dd1e:	4b22      	ldr	r3, [pc, #136]	; (800dda8 <network_configure_activations+0xac>)
 800dd20:	2200      	movs	r2, #0
 800dd22:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800dd24:	4b20      	ldr	r3, [pc, #128]	; (800dda8 <network_configure_activations+0xac>)
 800dd26:	2200      	movs	r2, #0
 800dd28:	60da      	str	r2, [r3, #12]
    conv1d_output_array.data = AI_PTR(activations_map[0] + 128);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	3380      	adds	r3, #128	; 0x80
 800dd2e:	4a1f      	ldr	r2, [pc, #124]	; (800ddac <network_configure_activations+0xb0>)
 800dd30:	6093      	str	r3, [r2, #8]
    conv1d_output_array.data_start = AI_PTR(activations_map[0] + 128);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	3380      	adds	r3, #128	; 0x80
 800dd36:	4a1d      	ldr	r2, [pc, #116]	; (800ddac <network_configure_activations+0xb0>)
 800dd38:	60d3      	str	r3, [r2, #12]
    conv1d_1_output_array.data = AI_PTR(activations_map[0] + 64);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	3340      	adds	r3, #64	; 0x40
 800dd3e:	4a1c      	ldr	r2, [pc, #112]	; (800ddb0 <network_configure_activations+0xb4>)
 800dd40:	6093      	str	r3, [r2, #8]
    conv1d_1_output_array.data_start = AI_PTR(activations_map[0] + 64);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	3340      	adds	r3, #64	; 0x40
 800dd46:	4a1a      	ldr	r2, [pc, #104]	; (800ddb0 <network_configure_activations+0xb4>)
 800dd48:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(activations_map[0] + 160);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	33a0      	adds	r3, #160	; 0xa0
 800dd4e:	4a19      	ldr	r2, [pc, #100]	; (800ddb4 <network_configure_activations+0xb8>)
 800dd50:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations_map[0] + 160);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	33a0      	adds	r3, #160	; 0xa0
 800dd56:	4a17      	ldr	r2, [pc, #92]	; (800ddb4 <network_configure_activations+0xb8>)
 800dd58:	60d3      	str	r3, [r2, #12]
    dense_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	4a16      	ldr	r2, [pc, #88]	; (800ddb8 <network_configure_activations+0xbc>)
 800dd5e:	6093      	str	r3, [r2, #8]
    dense_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	4a15      	ldr	r2, [pc, #84]	; (800ddb8 <network_configure_activations+0xbc>)
 800dd64:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations_map[0] + 100);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	3364      	adds	r3, #100	; 0x64
 800dd6a:	4a14      	ldr	r2, [pc, #80]	; (800ddbc <network_configure_activations+0xc0>)
 800dd6c:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations_map[0] + 100);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	3364      	adds	r3, #100	; 0x64
 800dd72:	4a12      	ldr	r2, [pc, #72]	; (800ddbc <network_configure_activations+0xc0>)
 800dd74:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(NULL);
 800dd76:	4b12      	ldr	r3, [pc, #72]	; (800ddc0 <network_configure_activations+0xc4>)
 800dd78:	2200      	movs	r2, #0
 800dd7a:	609a      	str	r2, [r3, #8]
    dense_1_nl_output_array.data_start = AI_PTR(NULL);
 800dd7c:	4b10      	ldr	r3, [pc, #64]	; (800ddc0 <network_configure_activations+0xc4>)
 800dd7e:	2200      	movs	r2, #0
 800dd80:	60da      	str	r2, [r3, #12]
    conv1d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	4a0f      	ldr	r2, [pc, #60]	; (800ddc4 <network_configure_activations+0xc8>)
 800dd86:	6093      	str	r3, [r2, #8]
    conv1d_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	4a0e      	ldr	r2, [pc, #56]	; (800ddc4 <network_configure_activations+0xc8>)
 800dd8c:	60d3      	str	r3, [r2, #12]
    conv1d_1_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	4a0d      	ldr	r2, [pc, #52]	; (800ddc8 <network_configure_activations+0xcc>)
 800dd92:	6093      	str	r3, [r2, #8]
    conv1d_1_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	4a0c      	ldr	r2, [pc, #48]	; (800ddc8 <network_configure_activations+0xcc>)
 800dd98:	60d3      	str	r3, [r2, #12]
    
    return true;
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	e000      	b.n	800dda0 <network_configure_activations+0xa4>
  }
  return false;
 800dd9e:	2300      	movs	r3, #0
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3710      	adds	r7, #16
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	20000024 	.word	0x20000024
 800ddac:	20000034 	.word	0x20000034
 800ddb0:	20000044 	.word	0x20000044
 800ddb4:	20000054 	.word	0x20000054
 800ddb8:	20000064 	.word	0x20000064
 800ddbc:	20000074 	.word	0x20000074
 800ddc0:	20000084 	.word	0x20000084
 800ddc4:	20000114 	.word	0x20000114
 800ddc8:	20000124 	.word	0x20000124

0800ddcc <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b084      	sub	sp, #16
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 800ddda:	f107 030c 	add.w	r3, r7, #12
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	2101      	movs	r1, #1
 800dde2:	4618      	mov	r0, r3
 800dde4:	f000 f982 	bl	800e0ec <ai_platform_get_weights_map>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	f000 8082 	beq.w	800def4 <network_configure_weights+0x128>
    /* Updating weights with array addresses */
    
    conv1d_weights_array.format |= AI_FMT_FLAG_CONST;
 800ddf0:	4b43      	ldr	r3, [pc, #268]	; (800df00 <network_configure_weights+0x134>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddf8:	4a41      	ldr	r2, [pc, #260]	; (800df00 <network_configure_weights+0x134>)
 800ddfa:	6013      	str	r3, [r2, #0]
    conv1d_weights_array.data = AI_PTR(weights_map[0] + 0);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	4a40      	ldr	r2, [pc, #256]	; (800df00 <network_configure_weights+0x134>)
 800de00:	6093      	str	r3, [r2, #8]
    conv1d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	4a3e      	ldr	r2, [pc, #248]	; (800df00 <network_configure_weights+0x134>)
 800de06:	60d3      	str	r3, [r2, #12]
    conv1d_bias_array.format |= AI_FMT_FLAG_CONST;
 800de08:	4b3e      	ldr	r3, [pc, #248]	; (800df04 <network_configure_weights+0x138>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de10:	4a3c      	ldr	r2, [pc, #240]	; (800df04 <network_configure_weights+0x138>)
 800de12:	6013      	str	r3, [r2, #0]
    conv1d_bias_array.data = AI_PTR(weights_map[0] + 1920);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 800de1a:	4a3a      	ldr	r2, [pc, #232]	; (800df04 <network_configure_weights+0x138>)
 800de1c:	6093      	str	r3, [r2, #8]
    conv1d_bias_array.data_start = AI_PTR(weights_map[0] + 1920);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 800de24:	4a37      	ldr	r2, [pc, #220]	; (800df04 <network_configure_weights+0x138>)
 800de26:	60d3      	str	r3, [r2, #12]
    conv1d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800de28:	4b37      	ldr	r3, [pc, #220]	; (800df08 <network_configure_weights+0x13c>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de30:	4a35      	ldr	r2, [pc, #212]	; (800df08 <network_configure_weights+0x13c>)
 800de32:	6013      	str	r3, [r2, #0]
    conv1d_1_weights_array.data = AI_PTR(weights_map[0] + 1984);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800de3a:	4a33      	ldr	r2, [pc, #204]	; (800df08 <network_configure_weights+0x13c>)
 800de3c:	6093      	str	r3, [r2, #8]
    conv1d_1_weights_array.data_start = AI_PTR(weights_map[0] + 1984);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800de44:	4a30      	ldr	r2, [pc, #192]	; (800df08 <network_configure_weights+0x13c>)
 800de46:	60d3      	str	r3, [r2, #12]
    conv1d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800de48:	4b30      	ldr	r3, [pc, #192]	; (800df0c <network_configure_weights+0x140>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de50:	4a2e      	ldr	r2, [pc, #184]	; (800df0c <network_configure_weights+0x140>)
 800de52:	6013      	str	r3, [r2, #0]
    conv1d_1_bias_array.data = AI_PTR(weights_map[0] + 4544);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 800de5a:	4a2c      	ldr	r2, [pc, #176]	; (800df0c <network_configure_weights+0x140>)
 800de5c:	6093      	str	r3, [r2, #8]
    conv1d_1_bias_array.data_start = AI_PTR(weights_map[0] + 4544);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 800de64:	4a29      	ldr	r2, [pc, #164]	; (800df0c <network_configure_weights+0x140>)
 800de66:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800de68:	4b29      	ldr	r3, [pc, #164]	; (800df10 <network_configure_weights+0x144>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de70:	4a27      	ldr	r2, [pc, #156]	; (800df10 <network_configure_weights+0x144>)
 800de72:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights_map[0] + 4576);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 800de7a:	4a25      	ldr	r2, [pc, #148]	; (800df10 <network_configure_weights+0x144>)
 800de7c:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights_map[0] + 4576);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 800de84:	4a22      	ldr	r2, [pc, #136]	; (800df10 <network_configure_weights+0x144>)
 800de86:	60d3      	str	r3, [r2, #12]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800de88:	4b22      	ldr	r3, [pc, #136]	; (800df14 <network_configure_weights+0x148>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de90:	4a20      	ldr	r2, [pc, #128]	; (800df14 <network_configure_weights+0x148>)
 800de92:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights_map[0] + 6976);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 800de9a:	4a1e      	ldr	r2, [pc, #120]	; (800df14 <network_configure_weights+0x148>)
 800de9c:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights_map[0] + 6976);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 800dea4:	4a1b      	ldr	r2, [pc, #108]	; (800df14 <network_configure_weights+0x148>)
 800dea6:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800dea8:	4b1b      	ldr	r3, [pc, #108]	; (800df18 <network_configure_weights+0x14c>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800deb0:	4a19      	ldr	r2, [pc, #100]	; (800df18 <network_configure_weights+0x14c>)
 800deb2:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights_map[0] + 7076);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 800deba:	3304      	adds	r3, #4
 800debc:	4a16      	ldr	r2, [pc, #88]	; (800df18 <network_configure_weights+0x14c>)
 800debe:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights_map[0] + 7076);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 800dec6:	3304      	adds	r3, #4
 800dec8:	4a13      	ldr	r2, [pc, #76]	; (800df18 <network_configure_weights+0x14c>)
 800deca:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800decc:	4b13      	ldr	r3, [pc, #76]	; (800df1c <network_configure_weights+0x150>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ded4:	4a11      	ldr	r2, [pc, #68]	; (800df1c <network_configure_weights+0x150>)
 800ded6:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 7476);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800dede:	3314      	adds	r3, #20
 800dee0:	4a0e      	ldr	r2, [pc, #56]	; (800df1c <network_configure_weights+0x150>)
 800dee2:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights_map[0] + 7476);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f503 53e9 	add.w	r3, r3, #7456	; 0x1d20
 800deea:	3314      	adds	r3, #20
 800deec:	4a0b      	ldr	r2, [pc, #44]	; (800df1c <network_configure_weights+0x150>)
 800deee:	60d3      	str	r3, [r2, #12]
    return true;
 800def0:	2301      	movs	r3, #1
 800def2:	e000      	b.n	800def6 <network_configure_weights+0x12a>
  }
  return false;
 800def4:	2300      	movs	r3, #0
}
 800def6:	4618      	mov	r0, r3
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	20000094 	.word	0x20000094
 800df04:	200000a4 	.word	0x200000a4
 800df08:	200000b4 	.word	0x200000b4
 800df0c:	200000c4 	.word	0x200000c4
 800df10:	200000d4 	.word	0x200000d4
 800df14:	200000e4 	.word	0x200000e4
 800df18:	200000f4 	.word	0x200000f4
 800df1c:	20000104 	.word	0x20000104

0800df20 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/
AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b0a0      	sub	sp, #128	; 0x80
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 fa72 	bl	800e414 <ai_platform_context_acquire>
 800df30:	67f8      	str	r0, [r7, #124]	; 0x7c

  if (report && net_ctx)
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d041      	beq.n	800dfbc <ai_network_get_info+0x9c>
 800df38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d03e      	beq.n	800dfbc <ai_network_get_info+0x9c>
  {
    ai_network_report r = {
 800df3e:	f107 0308 	add.w	r3, r7, #8
 800df42:	2274      	movs	r2, #116	; 0x74
 800df44:	2100      	movs	r1, #0
 800df46:	4618      	mov	r0, r3
 800df48:	f003 fe52 	bl	8011bf0 <memset>
 800df4c:	4b1e      	ldr	r3, [pc, #120]	; (800dfc8 <ai_network_get_info+0xa8>)
 800df4e:	60bb      	str	r3, [r7, #8]
 800df50:	4b1e      	ldr	r3, [pc, #120]	; (800dfcc <ai_network_get_info+0xac>)
 800df52:	60fb      	str	r3, [r7, #12]
 800df54:	4b1e      	ldr	r3, [pc, #120]	; (800dfd0 <ai_network_get_info+0xb0>)
 800df56:	613b      	str	r3, [r7, #16]
 800df58:	4b1e      	ldr	r3, [pc, #120]	; (800dfd4 <ai_network_get_info+0xb4>)
 800df5a:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800df5c:	f000 f92e 	bl	800e1bc <ai_platform_runtime_get_revision>
 800df60:	4603      	mov	r3, r0
    ai_network_report r = {
 800df62:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 800df64:	f000 f96c 	bl	800e240 <ai_platform_runtime_get_version>
 800df68:	4603      	mov	r3, r0
 800df6a:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 800df6c:	4b1a      	ldr	r3, [pc, #104]	; (800dfd8 <ai_network_get_info+0xb8>)
 800df6e:	623b      	str	r3, [r7, #32]
 800df70:	2307      	movs	r3, #7
 800df72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 800df76:	f000 f9a5 	bl	800e2c4 <ai_platform_api_get_version>
 800df7a:	4603      	mov	r3, r0
 800df7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800df7e:	f000 f9f5 	bl	800e36c <ai_platform_interface_api_get_version>
 800df82:	4603      	mov	r3, r0
 800df84:	633b      	str	r3, [r7, #48]	; 0x30
    ai_network_report r = {
 800df86:	f244 132e 	movw	r3, #16686	; 0x412e
 800df8a:	637b      	str	r3, [r7, #52]	; 0x34
      .activations       = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800df8c:	f107 0308 	add.w	r3, r7, #8
 800df90:	4619      	mov	r1, r3
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 fb00 	bl	800e598 <ai_platform_api_get_network_report>
 800df98:	4603      	mov	r3, r0
 800df9a:	f083 0301 	eor.w	r3, r3, #1
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d001      	beq.n	800dfa8 <ai_network_get_info+0x88>
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	e00a      	b.n	800dfbe <ai_network_get_info+0x9e>

    *report = r;
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f107 0308 	add.w	r3, r7, #8
 800dfb0:	2274      	movs	r2, #116	; 0x74
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	f003 fe0e 	bl	8011bd4 <memcpy>
    return true;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	e000      	b.n	800dfbe <ai_network_get_info+0x9e>
  }
  return false;
 800dfbc:	2300      	movs	r3, #0
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3780      	adds	r7, #128	; 0x80
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	080157b0 	.word	0x080157b0
 800dfcc:	080157b8 	.word	0x080157b8
 800dfd0:	080157dc 	.word	0x080157dc
 800dfd4:	080157f8 	.word	0x080157f8
 800dfd8:	08015810 	.word	0x08015810

0800dfdc <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f000 fa5d 	bl	800e4a4 <ai_platform_network_get_error>
 800dfea:	4603      	mov	r3, r0
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3708      	adds	r7, #8
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af02      	add	r7, sp, #8
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800dffe:	2300      	movs	r3, #0
 800e000:	9301      	str	r3, [sp, #4]
 800e002:	2304      	movs	r3, #4
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	2301      	movs	r3, #1
 800e008:	4a04      	ldr	r2, [pc, #16]	; (800e01c <ai_network_create+0x28>)
 800e00a:	6839      	ldr	r1, [r7, #0]
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 fd65 	bl	800eadc <ai_platform_network_create>
 800e012:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800e014:	4618      	mov	r0, r3
 800e016:	3708      	adds	r7, #8
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	20000884 	.word	0x20000884

0800e020 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f000 fe2d 	bl	800ec88 <ai_platform_network_destroy>
 800e02e:	4603      	mov	r3, r0
}
 800e030:	4618      	mov	r0, r3
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800e042:	6839      	ldr	r1, [r7, #0]
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f000 fe97 	bl	800ed78 <ai_platform_network_init>
 800e04a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d101      	bne.n	800e056 <ai_network_init+0x1e>
 800e052:	2300      	movs	r3, #0
 800e054:	e028      	b.n	800e0a8 <ai_network_init+0x70>

  ai_bool ok = true;
 800e056:	2301      	movs	r3, #1
 800e058:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 800e05a:	6839      	ldr	r1, [r7, #0]
 800e05c:	68f8      	ldr	r0, [r7, #12]
 800e05e:	f7ff feb5 	bl	800ddcc <network_configure_weights>
 800e062:	4603      	mov	r3, r0
 800e064:	461a      	mov	r2, r3
 800e066:	7afb      	ldrb	r3, [r7, #11]
 800e068:	4013      	ands	r3, r2
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	bf14      	ite	ne
 800e06e:	2301      	movne	r3, #1
 800e070:	2300      	moveq	r3, #0
 800e072:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800e074:	6839      	ldr	r1, [r7, #0]
 800e076:	68f8      	ldr	r0, [r7, #12]
 800e078:	f7ff fe40 	bl	800dcfc <network_configure_activations>
 800e07c:	4603      	mov	r3, r0
 800e07e:	461a      	mov	r2, r3
 800e080:	7afb      	ldrb	r3, [r7, #11]
 800e082:	4013      	ands	r3, r2
 800e084:	2b00      	cmp	r3, #0
 800e086:	bf14      	ite	ne
 800e088:	2301      	movne	r3, #1
 800e08a:	2300      	moveq	r3, #0
 800e08c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 ff84 	bl	800ef9c <ai_platform_network_post_init>
 800e094:	4603      	mov	r3, r0
 800e096:	461a      	mov	r2, r3
 800e098:	7afb      	ldrb	r3, [r7, #11]
 800e09a:	4013      	ands	r3, r2
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	bf14      	ite	ne
 800e0a0:	2301      	movne	r3, #1
 800e0a2:	2300      	moveq	r3, #0
 800e0a4:	72fb      	strb	r3, [r7, #11]

  return ok;
 800e0a6:	7afb      	ldrb	r3, [r7, #11]
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3710      	adds	r7, #16
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	68b9      	ldr	r1, [r7, #8]
 800e0c0:	68f8      	ldr	r0, [r7, #12]
 800e0c2:	f000 ffff 	bl	800f0c4 <ai_platform_network_process>
 800e0c6:	4603      	mov	r3, r0
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3710      	adds	r7, #16
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_network_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_map);
 800e0d4:	4b02      	ldr	r3, [pc, #8]	; (800e0e0 <ai_network_data_weights_get+0x10>)

}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr
 800e0e0:	08017608 	.word	0x08017608

0800e0e4 <_ai_platform_acquire_crc>:
 800e0e4:	2001      	movs	r0, #1
 800e0e6:	4770      	bx	lr

0800e0e8 <_ai_platform_release_crc>:
 800e0e8:	4770      	bx	lr
 800e0ea:	bf00      	nop

0800e0ec <ai_platform_get_weights_map>:
 800e0ec:	b132      	cbz	r2, 800e0fc <ai_platform_get_weights_map+0x10>
 800e0ee:	6912      	ldr	r2, [r2, #16]
 800e0f0:	b122      	cbz	r2, 800e0fc <ai_platform_get_weights_map+0x10>
 800e0f2:	b110      	cbz	r0, 800e0fa <ai_platform_get_weights_map+0xe>
 800e0f4:	b921      	cbnz	r1, 800e100 <ai_platform_get_weights_map+0x14>
 800e0f6:	4608      	mov	r0, r1
 800e0f8:	4770      	bx	lr
 800e0fa:	4770      	bx	lr
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	4770      	bx	lr
 800e100:	b470      	push	{r4, r5, r6}
 800e102:	4b13      	ldr	r3, [pc, #76]	; (800e150 <ai_platform_get_weights_map+0x64>)
 800e104:	6815      	ldr	r5, [r2, #0]
 800e106:	429d      	cmp	r5, r3
 800e108:	d007      	beq.n	800e11a <ai_platform_get_weights_map+0x2e>
 800e10a:	6002      	str	r2, [r0, #0]
 800e10c:	f1a1 0001 	sub.w	r0, r1, #1
 800e110:	fab0 f080 	clz	r0, r0
 800e114:	0940      	lsrs	r0, r0, #5
 800e116:	bc70      	pop	{r4, r5, r6}
 800e118:	4770      	bx	lr
 800e11a:	6854      	ldr	r4, [r2, #4]
 800e11c:	42ac      	cmp	r4, r5
 800e11e:	f102 0204 	add.w	r2, r2, #4
 800e122:	d011      	beq.n	800e148 <ai_platform_get_weights_map+0x5c>
 800e124:	1f03      	subs	r3, r0, #4
 800e126:	4616      	mov	r6, r2
 800e128:	2000      	movs	r0, #0
 800e12a:	e003      	b.n	800e134 <ai_platform_get_weights_map+0x48>
 800e12c:	f856 4f04 	ldr.w	r4, [r6, #4]!
 800e130:	42ac      	cmp	r4, r5
 800e132:	d009      	beq.n	800e148 <ai_platform_get_weights_map+0x5c>
 800e134:	3001      	adds	r0, #1
 800e136:	4281      	cmp	r1, r0
 800e138:	f843 4f04 	str.w	r4, [r3, #4]!
 800e13c:	d1f6      	bne.n	800e12c <ai_platform_get_weights_map+0x40>
 800e13e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e142:	4b03      	ldr	r3, [pc, #12]	; (800e150 <ai_platform_get_weights_map+0x64>)
 800e144:	429a      	cmp	r2, r3
 800e146:	d001      	beq.n	800e14c <ai_platform_get_weights_map+0x60>
 800e148:	2000      	movs	r0, #0
 800e14a:	e7e4      	b.n	800e116 <ai_platform_get_weights_map+0x2a>
 800e14c:	2001      	movs	r0, #1
 800e14e:	e7e2      	b.n	800e116 <ai_platform_get_weights_map+0x2a>
 800e150:	a1facade 	.word	0xa1facade

0800e154 <ai_platform_get_activations_map>:
 800e154:	b132      	cbz	r2, 800e164 <ai_platform_get_activations_map+0x10>
 800e156:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800e158:	b122      	cbz	r2, 800e164 <ai_platform_get_activations_map+0x10>
 800e15a:	b110      	cbz	r0, 800e162 <ai_platform_get_activations_map+0xe>
 800e15c:	b921      	cbnz	r1, 800e168 <ai_platform_get_activations_map+0x14>
 800e15e:	4608      	mov	r0, r1
 800e160:	4770      	bx	lr
 800e162:	4770      	bx	lr
 800e164:	4610      	mov	r0, r2
 800e166:	4770      	bx	lr
 800e168:	b470      	push	{r4, r5, r6}
 800e16a:	4b13      	ldr	r3, [pc, #76]	; (800e1b8 <ai_platform_get_activations_map+0x64>)
 800e16c:	6815      	ldr	r5, [r2, #0]
 800e16e:	429d      	cmp	r5, r3
 800e170:	d007      	beq.n	800e182 <ai_platform_get_activations_map+0x2e>
 800e172:	6002      	str	r2, [r0, #0]
 800e174:	f1a1 0001 	sub.w	r0, r1, #1
 800e178:	fab0 f080 	clz	r0, r0
 800e17c:	0940      	lsrs	r0, r0, #5
 800e17e:	bc70      	pop	{r4, r5, r6}
 800e180:	4770      	bx	lr
 800e182:	6854      	ldr	r4, [r2, #4]
 800e184:	42ac      	cmp	r4, r5
 800e186:	f102 0204 	add.w	r2, r2, #4
 800e18a:	d011      	beq.n	800e1b0 <ai_platform_get_activations_map+0x5c>
 800e18c:	1f03      	subs	r3, r0, #4
 800e18e:	4616      	mov	r6, r2
 800e190:	2000      	movs	r0, #0
 800e192:	e003      	b.n	800e19c <ai_platform_get_activations_map+0x48>
 800e194:	f856 4f04 	ldr.w	r4, [r6, #4]!
 800e198:	42ac      	cmp	r4, r5
 800e19a:	d009      	beq.n	800e1b0 <ai_platform_get_activations_map+0x5c>
 800e19c:	3001      	adds	r0, #1
 800e19e:	4281      	cmp	r1, r0
 800e1a0:	f843 4f04 	str.w	r4, [r3, #4]!
 800e1a4:	d1f6      	bne.n	800e194 <ai_platform_get_activations_map+0x40>
 800e1a6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e1aa:	4b03      	ldr	r3, [pc, #12]	; (800e1b8 <ai_platform_get_activations_map+0x64>)
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d001      	beq.n	800e1b4 <ai_platform_get_activations_map+0x60>
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	e7e4      	b.n	800e17e <ai_platform_get_activations_map+0x2a>
 800e1b4:	2001      	movs	r0, #1
 800e1b6:	e7e2      	b.n	800e17e <ai_platform_get_activations_map+0x2a>
 800e1b8:	a1facade 	.word	0xa1facade

0800e1bc <ai_platform_runtime_get_revision>:
 800e1bc:	b508      	push	{r3, lr}
 800e1be:	4a17      	ldr	r2, [pc, #92]	; (800e21c <ai_platform_runtime_get_revision+0x60>)
 800e1c0:	6813      	ldr	r3, [r2, #0]
 800e1c2:	f023 0301 	bic.w	r3, r3, #1
 800e1c6:	6013      	str	r3, [r2, #0]
 800e1c8:	f7ff ff8c 	bl	800e0e4 <_ai_platform_acquire_crc>
 800e1cc:	4b14      	ldr	r3, [pc, #80]	; (800e220 <ai_platform_runtime_get_revision+0x64>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e1d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1d8:	d00d      	beq.n	800e1f6 <ai_platform_runtime_get_revision+0x3a>
 800e1da:	4b12      	ldr	r3, [pc, #72]	; (800e224 <ai_platform_runtime_get_revision+0x68>)
 800e1dc:	2201      	movs	r2, #1
 800e1de:	601a      	str	r2, [r3, #0]
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	2a00      	cmp	r2, #0
 800e1e4:	d1fc      	bne.n	800e1e0 <ai_platform_runtime_get_revision+0x24>
 800e1e6:	4b10      	ldr	r3, [pc, #64]	; (800e228 <ai_platform_runtime_get_revision+0x6c>)
 800e1e8:	4a10      	ldr	r2, [pc, #64]	; (800e22c <ai_platform_runtime_get_revision+0x70>)
 800e1ea:	601a      	str	r2, [r3, #0]
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	4b10      	ldr	r3, [pc, #64]	; (800e230 <ai_platform_runtime_get_revision+0x74>)
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d00e      	beq.n	800e212 <ai_platform_runtime_get_revision+0x56>
 800e1f4:	e7fe      	b.n	800e1f4 <ai_platform_runtime_get_revision+0x38>
 800e1f6:	4b0f      	ldr	r3, [pc, #60]	; (800e234 <ai_platform_runtime_get_revision+0x78>)
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	601a      	str	r2, [r3, #0]
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	2a00      	cmp	r2, #0
 800e200:	d1fc      	bne.n	800e1fc <ai_platform_runtime_get_revision+0x40>
 800e202:	4b0d      	ldr	r3, [pc, #52]	; (800e238 <ai_platform_runtime_get_revision+0x7c>)
 800e204:	4a09      	ldr	r2, [pc, #36]	; (800e22c <ai_platform_runtime_get_revision+0x70>)
 800e206:	601a      	str	r2, [r3, #0]
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	4b09      	ldr	r3, [pc, #36]	; (800e230 <ai_platform_runtime_get_revision+0x74>)
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d000      	beq.n	800e212 <ai_platform_runtime_get_revision+0x56>
 800e210:	e7fe      	b.n	800e210 <ai_platform_runtime_get_revision+0x54>
 800e212:	f7ff ff69 	bl	800e0e8 <_ai_platform_release_crc>
 800e216:	4809      	ldr	r0, [pc, #36]	; (800e23c <ai_platform_runtime_get_revision+0x80>)
 800e218:	bd08      	pop	{r3, pc}
 800e21a:	bf00      	nop
 800e21c:	e0002000 	.word	0xe0002000
 800e220:	e0042000 	.word	0xe0042000
 800e224:	58024c08 	.word	0x58024c08
 800e228:	58024c00 	.word	0x58024c00
 800e22c:	f407a5c2 	.word	0xf407a5c2
 800e230:	b5e8b5cd 	.word	0xb5e8b5cd
 800e234:	40023008 	.word	0x40023008
 800e238:	40023000 	.word	0x40023000
 800e23c:	08017614 	.word	0x08017614

0800e240 <ai_platform_runtime_get_version>:
 800e240:	b500      	push	{lr}
 800e242:	4a18      	ldr	r2, [pc, #96]	; (800e2a4 <ai_platform_runtime_get_version+0x64>)
 800e244:	6813      	ldr	r3, [r2, #0]
 800e246:	f023 0301 	bic.w	r3, r3, #1
 800e24a:	6013      	str	r3, [r2, #0]
 800e24c:	b083      	sub	sp, #12
 800e24e:	f7ff ff49 	bl	800e0e4 <_ai_platform_acquire_crc>
 800e252:	4b15      	ldr	r3, [pc, #84]	; (800e2a8 <ai_platform_runtime_get_version+0x68>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e25a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e25e:	d00d      	beq.n	800e27c <ai_platform_runtime_get_version+0x3c>
 800e260:	4b12      	ldr	r3, [pc, #72]	; (800e2ac <ai_platform_runtime_get_version+0x6c>)
 800e262:	2201      	movs	r2, #1
 800e264:	601a      	str	r2, [r3, #0]
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	2a00      	cmp	r2, #0
 800e26a:	d1fc      	bne.n	800e266 <ai_platform_runtime_get_version+0x26>
 800e26c:	4b10      	ldr	r3, [pc, #64]	; (800e2b0 <ai_platform_runtime_get_version+0x70>)
 800e26e:	4a11      	ldr	r2, [pc, #68]	; (800e2b4 <ai_platform_runtime_get_version+0x74>)
 800e270:	601a      	str	r2, [r3, #0]
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	4b10      	ldr	r3, [pc, #64]	; (800e2b8 <ai_platform_runtime_get_version+0x78>)
 800e276:	429a      	cmp	r2, r3
 800e278:	d00e      	beq.n	800e298 <ai_platform_runtime_get_version+0x58>
 800e27a:	e7fe      	b.n	800e27a <ai_platform_runtime_get_version+0x3a>
 800e27c:	4b0f      	ldr	r3, [pc, #60]	; (800e2bc <ai_platform_runtime_get_version+0x7c>)
 800e27e:	2201      	movs	r2, #1
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	2a00      	cmp	r2, #0
 800e286:	d1fc      	bne.n	800e282 <ai_platform_runtime_get_version+0x42>
 800e288:	4b0d      	ldr	r3, [pc, #52]	; (800e2c0 <ai_platform_runtime_get_version+0x80>)
 800e28a:	4a0a      	ldr	r2, [pc, #40]	; (800e2b4 <ai_platform_runtime_get_version+0x74>)
 800e28c:	601a      	str	r2, [r3, #0]
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	4b09      	ldr	r3, [pc, #36]	; (800e2b8 <ai_platform_runtime_get_version+0x78>)
 800e292:	429a      	cmp	r2, r3
 800e294:	d000      	beq.n	800e298 <ai_platform_runtime_get_version+0x58>
 800e296:	e7fe      	b.n	800e296 <ai_platform_runtime_get_version+0x56>
 800e298:	f7ff ff26 	bl	800e0e8 <_ai_platform_release_crc>
 800e29c:	2007      	movs	r0, #7
 800e29e:	b003      	add	sp, #12
 800e2a0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e2a4:	e0002000 	.word	0xe0002000
 800e2a8:	e0042000 	.word	0xe0042000
 800e2ac:	58024c08 	.word	0x58024c08
 800e2b0:	58024c00 	.word	0x58024c00
 800e2b4:	f407a5c2 	.word	0xf407a5c2
 800e2b8:	b5e8b5cd 	.word	0xb5e8b5cd
 800e2bc:	40023008 	.word	0x40023008
 800e2c0:	40023000 	.word	0x40023000

0800e2c4 <ai_platform_api_get_version>:
 800e2c4:	b500      	push	{lr}
 800e2c6:	4a20      	ldr	r2, [pc, #128]	; (800e348 <ai_platform_api_get_version+0x84>)
 800e2c8:	6813      	ldr	r3, [r2, #0]
 800e2ca:	f023 0301 	bic.w	r3, r3, #1
 800e2ce:	6013      	str	r3, [r2, #0]
 800e2d0:	b083      	sub	sp, #12
 800e2d2:	f7ff ff07 	bl	800e0e4 <_ai_platform_acquire_crc>
 800e2d6:	4b1d      	ldr	r3, [pc, #116]	; (800e34c <ai_platform_api_get_version+0x88>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e2de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2e2:	d00d      	beq.n	800e300 <ai_platform_api_get_version+0x3c>
 800e2e4:	4b1a      	ldr	r3, [pc, #104]	; (800e350 <ai_platform_api_get_version+0x8c>)
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	601a      	str	r2, [r3, #0]
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	2a00      	cmp	r2, #0
 800e2ee:	d1fc      	bne.n	800e2ea <ai_platform_api_get_version+0x26>
 800e2f0:	4b18      	ldr	r3, [pc, #96]	; (800e354 <ai_platform_api_get_version+0x90>)
 800e2f2:	4a19      	ldr	r2, [pc, #100]	; (800e358 <ai_platform_api_get_version+0x94>)
 800e2f4:	601a      	str	r2, [r3, #0]
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	4b18      	ldr	r3, [pc, #96]	; (800e35c <ai_platform_api_get_version+0x98>)
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d00e      	beq.n	800e31c <ai_platform_api_get_version+0x58>
 800e2fe:	e7fe      	b.n	800e2fe <ai_platform_api_get_version+0x3a>
 800e300:	4b17      	ldr	r3, [pc, #92]	; (800e360 <ai_platform_api_get_version+0x9c>)
 800e302:	2201      	movs	r2, #1
 800e304:	601a      	str	r2, [r3, #0]
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	2a00      	cmp	r2, #0
 800e30a:	d1fc      	bne.n	800e306 <ai_platform_api_get_version+0x42>
 800e30c:	4b15      	ldr	r3, [pc, #84]	; (800e364 <ai_platform_api_get_version+0xa0>)
 800e30e:	4a12      	ldr	r2, [pc, #72]	; (800e358 <ai_platform_api_get_version+0x94>)
 800e310:	601a      	str	r2, [r3, #0]
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	4b11      	ldr	r3, [pc, #68]	; (800e35c <ai_platform_api_get_version+0x98>)
 800e316:	429a      	cmp	r2, r3
 800e318:	d000      	beq.n	800e31c <ai_platform_api_get_version+0x58>
 800e31a:	e7fe      	b.n	800e31a <ai_platform_api_get_version+0x56>
 800e31c:	f7ff fee4 	bl	800e0e8 <_ai_platform_release_crc>
 800e320:	4b11      	ldr	r3, [pc, #68]	; (800e368 <ai_platform_api_get_version+0xa4>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2000      	movs	r0, #0
 800e326:	b2da      	uxtb	r2, r3
 800e328:	f362 0007 	bfi	r0, r2, #0, #8
 800e32c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e330:	f362 200f 	bfi	r0, r2, #8, #8
 800e334:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e338:	f362 4017 	bfi	r0, r2, #16, #8
 800e33c:	0e1b      	lsrs	r3, r3, #24
 800e33e:	f363 601f 	bfi	r0, r3, #24, #8
 800e342:	b003      	add	sp, #12
 800e344:	f85d fb04 	ldr.w	pc, [sp], #4
 800e348:	e0002000 	.word	0xe0002000
 800e34c:	e0042000 	.word	0xe0042000
 800e350:	58024c08 	.word	0x58024c08
 800e354:	58024c00 	.word	0x58024c00
 800e358:	f407a5c2 	.word	0xf407a5c2
 800e35c:	b5e8b5cd 	.word	0xb5e8b5cd
 800e360:	40023008 	.word	0x40023008
 800e364:	40023000 	.word	0x40023000
 800e368:	08017618 	.word	0x08017618

0800e36c <ai_platform_interface_api_get_version>:
 800e36c:	b500      	push	{lr}
 800e36e:	4a20      	ldr	r2, [pc, #128]	; (800e3f0 <ai_platform_interface_api_get_version+0x84>)
 800e370:	6813      	ldr	r3, [r2, #0]
 800e372:	f023 0301 	bic.w	r3, r3, #1
 800e376:	6013      	str	r3, [r2, #0]
 800e378:	b083      	sub	sp, #12
 800e37a:	f7ff feb3 	bl	800e0e4 <_ai_platform_acquire_crc>
 800e37e:	4b1d      	ldr	r3, [pc, #116]	; (800e3f4 <ai_platform_interface_api_get_version+0x88>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e38a:	d00d      	beq.n	800e3a8 <ai_platform_interface_api_get_version+0x3c>
 800e38c:	4b1a      	ldr	r3, [pc, #104]	; (800e3f8 <ai_platform_interface_api_get_version+0x8c>)
 800e38e:	2201      	movs	r2, #1
 800e390:	601a      	str	r2, [r3, #0]
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	2a00      	cmp	r2, #0
 800e396:	d1fc      	bne.n	800e392 <ai_platform_interface_api_get_version+0x26>
 800e398:	4b18      	ldr	r3, [pc, #96]	; (800e3fc <ai_platform_interface_api_get_version+0x90>)
 800e39a:	4a19      	ldr	r2, [pc, #100]	; (800e400 <ai_platform_interface_api_get_version+0x94>)
 800e39c:	601a      	str	r2, [r3, #0]
 800e39e:	681a      	ldr	r2, [r3, #0]
 800e3a0:	4b18      	ldr	r3, [pc, #96]	; (800e404 <ai_platform_interface_api_get_version+0x98>)
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d00e      	beq.n	800e3c4 <ai_platform_interface_api_get_version+0x58>
 800e3a6:	e7fe      	b.n	800e3a6 <ai_platform_interface_api_get_version+0x3a>
 800e3a8:	4b17      	ldr	r3, [pc, #92]	; (800e408 <ai_platform_interface_api_get_version+0x9c>)
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	601a      	str	r2, [r3, #0]
 800e3ae:	681a      	ldr	r2, [r3, #0]
 800e3b0:	2a00      	cmp	r2, #0
 800e3b2:	d1fc      	bne.n	800e3ae <ai_platform_interface_api_get_version+0x42>
 800e3b4:	4b15      	ldr	r3, [pc, #84]	; (800e40c <ai_platform_interface_api_get_version+0xa0>)
 800e3b6:	4a12      	ldr	r2, [pc, #72]	; (800e400 <ai_platform_interface_api_get_version+0x94>)
 800e3b8:	601a      	str	r2, [r3, #0]
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	4b11      	ldr	r3, [pc, #68]	; (800e404 <ai_platform_interface_api_get_version+0x98>)
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d000      	beq.n	800e3c4 <ai_platform_interface_api_get_version+0x58>
 800e3c2:	e7fe      	b.n	800e3c2 <ai_platform_interface_api_get_version+0x56>
 800e3c4:	f7ff fe90 	bl	800e0e8 <_ai_platform_release_crc>
 800e3c8:	4b11      	ldr	r3, [pc, #68]	; (800e410 <ai_platform_interface_api_get_version+0xa4>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	b2da      	uxtb	r2, r3
 800e3d0:	f362 0007 	bfi	r0, r2, #0, #8
 800e3d4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e3d8:	f362 200f 	bfi	r0, r2, #8, #8
 800e3dc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e3e0:	f362 4017 	bfi	r0, r2, #16, #8
 800e3e4:	0e1b      	lsrs	r3, r3, #24
 800e3e6:	f363 601f 	bfi	r0, r3, #24, #8
 800e3ea:	b003      	add	sp, #12
 800e3ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800e3f0:	e0002000 	.word	0xe0002000
 800e3f4:	e0042000 	.word	0xe0042000
 800e3f8:	58024c08 	.word	0x58024c08
 800e3fc:	58024c00 	.word	0x58024c00
 800e400:	f407a5c2 	.word	0xf407a5c2
 800e404:	b5e8b5cd 	.word	0xb5e8b5cd
 800e408:	40023008 	.word	0x40023008
 800e40c:	40023000 	.word	0x40023000
 800e410:	0801761c 	.word	0x0801761c

0800e414 <ai_platform_context_acquire>:
 800e414:	b510      	push	{r4, lr}
 800e416:	4604      	mov	r4, r0
 800e418:	b120      	cbz	r0, 800e424 <ai_platform_context_acquire+0x10>
 800e41a:	4b19      	ldr	r3, [pc, #100]	; (800e480 <ai_platform_context_acquire+0x6c>)
 800e41c:	6802      	ldr	r2, [r0, #0]
 800e41e:	429a      	cmp	r2, r3
 800e420:	bf18      	it	ne
 800e422:	2400      	movne	r4, #0
 800e424:	4a17      	ldr	r2, [pc, #92]	; (800e484 <ai_platform_context_acquire+0x70>)
 800e426:	6813      	ldr	r3, [r2, #0]
 800e428:	f023 0301 	bic.w	r3, r3, #1
 800e42c:	6013      	str	r3, [r2, #0]
 800e42e:	f7ff fe59 	bl	800e0e4 <_ai_platform_acquire_crc>
 800e432:	4b15      	ldr	r3, [pc, #84]	; (800e488 <ai_platform_context_acquire+0x74>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e43a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e43e:	d00d      	beq.n	800e45c <ai_platform_context_acquire+0x48>
 800e440:	4b12      	ldr	r3, [pc, #72]	; (800e48c <ai_platform_context_acquire+0x78>)
 800e442:	2201      	movs	r2, #1
 800e444:	601a      	str	r2, [r3, #0]
 800e446:	681a      	ldr	r2, [r3, #0]
 800e448:	2a00      	cmp	r2, #0
 800e44a:	d1fc      	bne.n	800e446 <ai_platform_context_acquire+0x32>
 800e44c:	4b10      	ldr	r3, [pc, #64]	; (800e490 <ai_platform_context_acquire+0x7c>)
 800e44e:	4a11      	ldr	r2, [pc, #68]	; (800e494 <ai_platform_context_acquire+0x80>)
 800e450:	601a      	str	r2, [r3, #0]
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	4b10      	ldr	r3, [pc, #64]	; (800e498 <ai_platform_context_acquire+0x84>)
 800e456:	429a      	cmp	r2, r3
 800e458:	d00e      	beq.n	800e478 <ai_platform_context_acquire+0x64>
 800e45a:	e7fe      	b.n	800e45a <ai_platform_context_acquire+0x46>
 800e45c:	4b0f      	ldr	r3, [pc, #60]	; (800e49c <ai_platform_context_acquire+0x88>)
 800e45e:	2201      	movs	r2, #1
 800e460:	601a      	str	r2, [r3, #0]
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	2a00      	cmp	r2, #0
 800e466:	d1fc      	bne.n	800e462 <ai_platform_context_acquire+0x4e>
 800e468:	4b0d      	ldr	r3, [pc, #52]	; (800e4a0 <ai_platform_context_acquire+0x8c>)
 800e46a:	4a0a      	ldr	r2, [pc, #40]	; (800e494 <ai_platform_context_acquire+0x80>)
 800e46c:	601a      	str	r2, [r3, #0]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	4b09      	ldr	r3, [pc, #36]	; (800e498 <ai_platform_context_acquire+0x84>)
 800e472:	429a      	cmp	r2, r3
 800e474:	d000      	beq.n	800e478 <ai_platform_context_acquire+0x64>
 800e476:	e7fe      	b.n	800e476 <ai_platform_context_acquire+0x62>
 800e478:	f7ff fe36 	bl	800e0e8 <_ai_platform_release_crc>
 800e47c:	4620      	mov	r0, r4
 800e47e:	bd10      	pop	{r4, pc}
 800e480:	a1c00100 	.word	0xa1c00100
 800e484:	e0002000 	.word	0xe0002000
 800e488:	e0042000 	.word	0xe0042000
 800e48c:	58024c08 	.word	0x58024c08
 800e490:	58024c00 	.word	0x58024c00
 800e494:	f407a5c2 	.word	0xf407a5c2
 800e498:	b5e8b5cd 	.word	0xb5e8b5cd
 800e49c:	40023008 	.word	0x40023008
 800e4a0:	40023000 	.word	0x40023000

0800e4a4 <ai_platform_network_get_error>:
 800e4a4:	b510      	push	{r4, lr}
 800e4a6:	b120      	cbz	r0, 800e4b2 <ai_platform_network_get_error+0xe>
 800e4a8:	4b32      	ldr	r3, [pc, #200]	; (800e574 <ai_platform_network_get_error+0xd0>)
 800e4aa:	6802      	ldr	r2, [r0, #0]
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	d02e      	beq.n	800e510 <ai_platform_network_get_error+0x6c>
 800e4b2:	4a31      	ldr	r2, [pc, #196]	; (800e578 <ai_platform_network_get_error+0xd4>)
 800e4b4:	6813      	ldr	r3, [r2, #0]
 800e4b6:	f023 0301 	bic.w	r3, r3, #1
 800e4ba:	6013      	str	r3, [r2, #0]
 800e4bc:	f7ff fe12 	bl	800e0e4 <_ai_platform_acquire_crc>
 800e4c0:	4b2e      	ldr	r3, [pc, #184]	; (800e57c <ai_platform_network_get_error+0xd8>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e4c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e4cc:	d00d      	beq.n	800e4ea <ai_platform_network_get_error+0x46>
 800e4ce:	4b2c      	ldr	r3, [pc, #176]	; (800e580 <ai_platform_network_get_error+0xdc>)
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	601a      	str	r2, [r3, #0]
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	2a00      	cmp	r2, #0
 800e4d8:	d1fc      	bne.n	800e4d4 <ai_platform_network_get_error+0x30>
 800e4da:	4b2a      	ldr	r3, [pc, #168]	; (800e584 <ai_platform_network_get_error+0xe0>)
 800e4dc:	4a2a      	ldr	r2, [pc, #168]	; (800e588 <ai_platform_network_get_error+0xe4>)
 800e4de:	601a      	str	r2, [r3, #0]
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	4b2a      	ldr	r3, [pc, #168]	; (800e58c <ai_platform_network_get_error+0xe8>)
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d00d      	beq.n	800e504 <ai_platform_network_get_error+0x60>
 800e4e8:	e7fe      	b.n	800e4e8 <ai_platform_network_get_error+0x44>
 800e4ea:	4b29      	ldr	r3, [pc, #164]	; (800e590 <ai_platform_network_get_error+0xec>)
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	601a      	str	r2, [r3, #0]
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	2a00      	cmp	r2, #0
 800e4f4:	d1fc      	bne.n	800e4f0 <ai_platform_network_get_error+0x4c>
 800e4f6:	4b27      	ldr	r3, [pc, #156]	; (800e594 <ai_platform_network_get_error+0xf0>)
 800e4f8:	4a23      	ldr	r2, [pc, #140]	; (800e588 <ai_platform_network_get_error+0xe4>)
 800e4fa:	601a      	str	r2, [r3, #0]
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	4b23      	ldr	r3, [pc, #140]	; (800e58c <ai_platform_network_get_error+0xe8>)
 800e500:	429a      	cmp	r2, r3
 800e502:	d104      	bne.n	800e50e <ai_platform_network_get_error+0x6a>
 800e504:	f7ff fdf0 	bl	800e0e8 <_ai_platform_release_crc>
 800e508:	f241 0010 	movw	r0, #4112	; 0x1010
 800e50c:	bd10      	pop	{r4, pc}
 800e50e:	e7fe      	b.n	800e50e <ai_platform_network_get_error+0x6a>
 800e510:	4a19      	ldr	r2, [pc, #100]	; (800e578 <ai_platform_network_get_error+0xd4>)
 800e512:	6813      	ldr	r3, [r2, #0]
 800e514:	f023 0301 	bic.w	r3, r3, #1
 800e518:	6013      	str	r3, [r2, #0]
 800e51a:	f7ff fde3 	bl	800e0e4 <_ai_platform_acquire_crc>
 800e51e:	4b17      	ldr	r3, [pc, #92]	; (800e57c <ai_platform_network_get_error+0xd8>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e52a:	d00d      	beq.n	800e548 <ai_platform_network_get_error+0xa4>
 800e52c:	4b14      	ldr	r3, [pc, #80]	; (800e580 <ai_platform_network_get_error+0xdc>)
 800e52e:	2201      	movs	r2, #1
 800e530:	601a      	str	r2, [r3, #0]
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	2a00      	cmp	r2, #0
 800e536:	d1fc      	bne.n	800e532 <ai_platform_network_get_error+0x8e>
 800e538:	4b12      	ldr	r3, [pc, #72]	; (800e584 <ai_platform_network_get_error+0xe0>)
 800e53a:	4a13      	ldr	r2, [pc, #76]	; (800e588 <ai_platform_network_get_error+0xe4>)
 800e53c:	601a      	str	r2, [r3, #0]
 800e53e:	681a      	ldr	r2, [r3, #0]
 800e540:	4b12      	ldr	r3, [pc, #72]	; (800e58c <ai_platform_network_get_error+0xe8>)
 800e542:	429a      	cmp	r2, r3
 800e544:	d00e      	beq.n	800e564 <ai_platform_network_get_error+0xc0>
 800e546:	e7fe      	b.n	800e546 <ai_platform_network_get_error+0xa2>
 800e548:	4b11      	ldr	r3, [pc, #68]	; (800e590 <ai_platform_network_get_error+0xec>)
 800e54a:	2201      	movs	r2, #1
 800e54c:	601a      	str	r2, [r3, #0]
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	2a00      	cmp	r2, #0
 800e552:	d1fc      	bne.n	800e54e <ai_platform_network_get_error+0xaa>
 800e554:	4b0f      	ldr	r3, [pc, #60]	; (800e594 <ai_platform_network_get_error+0xf0>)
 800e556:	4a0c      	ldr	r2, [pc, #48]	; (800e588 <ai_platform_network_get_error+0xe4>)
 800e558:	601a      	str	r2, [r3, #0]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	4b0b      	ldr	r3, [pc, #44]	; (800e58c <ai_platform_network_get_error+0xe8>)
 800e55e:	429a      	cmp	r2, r3
 800e560:	d000      	beq.n	800e564 <ai_platform_network_get_error+0xc0>
 800e562:	e7fe      	b.n	800e562 <ai_platform_network_get_error+0xbe>
 800e564:	f7ff fdc0 	bl	800e0e8 <_ai_platform_release_crc>
 800e568:	f104 0010 	add.w	r0, r4, #16
 800e56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e570:	f001 b828 	b.w	800f5c4 <core_get_error>
 800e574:	a1c00100 	.word	0xa1c00100
 800e578:	e0002000 	.word	0xe0002000
 800e57c:	e0042000 	.word	0xe0042000
 800e580:	58024c08 	.word	0x58024c08
 800e584:	58024c00 	.word	0x58024c00
 800e588:	f407a5c2 	.word	0xf407a5c2
 800e58c:	b5e8b5cd 	.word	0xb5e8b5cd
 800e590:	40023008 	.word	0x40023008
 800e594:	40023000 	.word	0x40023000

0800e598 <ai_platform_api_get_network_report>:
 800e598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e59c:	b083      	sub	sp, #12
 800e59e:	b120      	cbz	r0, 800e5aa <ai_platform_api_get_network_report+0x12>
 800e5a0:	4ba1      	ldr	r3, [pc, #644]	; (800e828 <ai_platform_api_get_network_report+0x290>)
 800e5a2:	6802      	ldr	r2, [r0, #0]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	4605      	mov	r5, r0
 800e5a8:	d030      	beq.n	800e60c <ai_platform_api_get_network_report+0x74>
 800e5aa:	4aa0      	ldr	r2, [pc, #640]	; (800e82c <ai_platform_api_get_network_report+0x294>)
 800e5ac:	6813      	ldr	r3, [r2, #0]
 800e5ae:	f023 0301 	bic.w	r3, r3, #1
 800e5b2:	6013      	str	r3, [r2, #0]
 800e5b4:	f7ff fd96 	bl	800e0e4 <_ai_platform_acquire_crc>
 800e5b8:	4b9d      	ldr	r3, [pc, #628]	; (800e830 <ai_platform_api_get_network_report+0x298>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e5c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5c4:	d00d      	beq.n	800e5e2 <ai_platform_api_get_network_report+0x4a>
 800e5c6:	4b9b      	ldr	r3, [pc, #620]	; (800e834 <ai_platform_api_get_network_report+0x29c>)
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	601a      	str	r2, [r3, #0]
 800e5cc:	681a      	ldr	r2, [r3, #0]
 800e5ce:	2a00      	cmp	r2, #0
 800e5d0:	d1fc      	bne.n	800e5cc <ai_platform_api_get_network_report+0x34>
 800e5d2:	4b99      	ldr	r3, [pc, #612]	; (800e838 <ai_platform_api_get_network_report+0x2a0>)
 800e5d4:	4a99      	ldr	r2, [pc, #612]	; (800e83c <ai_platform_api_get_network_report+0x2a4>)
 800e5d6:	601a      	str	r2, [r3, #0]
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	4b99      	ldr	r3, [pc, #612]	; (800e840 <ai_platform_api_get_network_report+0x2a8>)
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d00d      	beq.n	800e5fc <ai_platform_api_get_network_report+0x64>
 800e5e0:	e7fe      	b.n	800e5e0 <ai_platform_api_get_network_report+0x48>
 800e5e2:	4b98      	ldr	r3, [pc, #608]	; (800e844 <ai_platform_api_get_network_report+0x2ac>)
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	601a      	str	r2, [r3, #0]
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	2a00      	cmp	r2, #0
 800e5ec:	d1fc      	bne.n	800e5e8 <ai_platform_api_get_network_report+0x50>
 800e5ee:	4b96      	ldr	r3, [pc, #600]	; (800e848 <ai_platform_api_get_network_report+0x2b0>)
 800e5f0:	4a92      	ldr	r2, [pc, #584]	; (800e83c <ai_platform_api_get_network_report+0x2a4>)
 800e5f2:	601a      	str	r2, [r3, #0]
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	4b92      	ldr	r3, [pc, #584]	; (800e840 <ai_platform_api_get_network_report+0x2a8>)
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d106      	bne.n	800e60a <ai_platform_api_get_network_report+0x72>
 800e5fc:	f7ff fd74 	bl	800e0e8 <_ai_platform_release_crc>
 800e600:	2600      	movs	r6, #0
 800e602:	4630      	mov	r0, r6
 800e604:	b003      	add	sp, #12
 800e606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e60a:	e7fe      	b.n	800e60a <ai_platform_api_get_network_report+0x72>
 800e60c:	4a87      	ldr	r2, [pc, #540]	; (800e82c <ai_platform_api_get_network_report+0x294>)
 800e60e:	6813      	ldr	r3, [r2, #0]
 800e610:	f023 0301 	bic.w	r3, r3, #1
 800e614:	6013      	str	r3, [r2, #0]
 800e616:	460c      	mov	r4, r1
 800e618:	f7ff fd64 	bl	800e0e4 <_ai_platform_acquire_crc>
 800e61c:	4b84      	ldr	r3, [pc, #528]	; (800e830 <ai_platform_api_get_network_report+0x298>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e628:	d00d      	beq.n	800e646 <ai_platform_api_get_network_report+0xae>
 800e62a:	4b82      	ldr	r3, [pc, #520]	; (800e834 <ai_platform_api_get_network_report+0x29c>)
 800e62c:	2201      	movs	r2, #1
 800e62e:	601a      	str	r2, [r3, #0]
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	2a00      	cmp	r2, #0
 800e634:	d1fc      	bne.n	800e630 <ai_platform_api_get_network_report+0x98>
 800e636:	4b80      	ldr	r3, [pc, #512]	; (800e838 <ai_platform_api_get_network_report+0x2a0>)
 800e638:	4a80      	ldr	r2, [pc, #512]	; (800e83c <ai_platform_api_get_network_report+0x2a4>)
 800e63a:	601a      	str	r2, [r3, #0]
 800e63c:	681a      	ldr	r2, [r3, #0]
 800e63e:	4b80      	ldr	r3, [pc, #512]	; (800e840 <ai_platform_api_get_network_report+0x2a8>)
 800e640:	429a      	cmp	r2, r3
 800e642:	d00e      	beq.n	800e662 <ai_platform_api_get_network_report+0xca>
 800e644:	e7fe      	b.n	800e644 <ai_platform_api_get_network_report+0xac>
 800e646:	4b7f      	ldr	r3, [pc, #508]	; (800e844 <ai_platform_api_get_network_report+0x2ac>)
 800e648:	2201      	movs	r2, #1
 800e64a:	601a      	str	r2, [r3, #0]
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	2a00      	cmp	r2, #0
 800e650:	d1fc      	bne.n	800e64c <ai_platform_api_get_network_report+0xb4>
 800e652:	4b7d      	ldr	r3, [pc, #500]	; (800e848 <ai_platform_api_get_network_report+0x2b0>)
 800e654:	4a79      	ldr	r2, [pc, #484]	; (800e83c <ai_platform_api_get_network_report+0x2a4>)
 800e656:	601a      	str	r2, [r3, #0]
 800e658:	681a      	ldr	r2, [r3, #0]
 800e65a:	4b79      	ldr	r3, [pc, #484]	; (800e840 <ai_platform_api_get_network_report+0x2a8>)
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d000      	beq.n	800e662 <ai_platform_api_get_network_report+0xca>
 800e660:	e7fe      	b.n	800e660 <ai_platform_api_get_network_report+0xc8>
 800e662:	f7ff fd41 	bl	800e0e8 <_ai_platform_release_crc>
 800e666:	2c00      	cmp	r4, #0
 800e668:	d07c      	beq.n	800e764 <ai_platform_api_get_network_report+0x1cc>
 800e66a:	2300      	movs	r3, #0
 800e66c:	66e3      	str	r3, [r4, #108]	; 0x6c
 800e66e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800e670:	2a00      	cmp	r2, #0
 800e672:	d079      	beq.n	800e768 <ai_platform_api_get_network_report+0x1d0>
 800e674:	2301      	movs	r3, #1
 800e676:	66e3      	str	r3, [r4, #108]	; 0x6c
 800e678:	6913      	ldr	r3, [r2, #16]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d00c      	beq.n	800e698 <ai_platform_api_get_network_report+0x100>
 800e67e:	b15b      	cbz	r3, 800e698 <ai_platform_api_get_network_report+0x100>
 800e680:	2202      	movs	r2, #2
 800e682:	e003      	b.n	800e68c <ai_platform_api_get_network_report+0xf4>
 800e684:	1c50      	adds	r0, r2, #1
 800e686:	460b      	mov	r3, r1
 800e688:	b121      	cbz	r1, 800e694 <ai_platform_api_get_network_report+0xfc>
 800e68a:	4602      	mov	r2, r0
 800e68c:	66e2      	str	r2, [r4, #108]	; 0x6c
 800e68e:	6919      	ldr	r1, [r3, #16]
 800e690:	4299      	cmp	r1, r3
 800e692:	d1f7      	bne.n	800e684 <ai_platform_api_get_network_report+0xec>
 800e694:	2a00      	cmp	r2, #0
 800e696:	d067      	beq.n	800e768 <ai_platform_api_get_network_report+0x1d0>
 800e698:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f000 80d6 	beq.w	800e84c <ai_platform_api_get_network_report+0x2b4>
 800e6a0:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 800e6a2:	2f00      	cmp	r7, #0
 800e6a4:	f000 80d2 	beq.w	800e84c <ai_platform_api_get_network_report+0x2b4>
 800e6a8:	883b      	ldrh	r3, [r7, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f000 80ce 	beq.w	800e84c <ai_platform_api_get_network_report+0x2b4>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	f000 80ca 	beq.w	800e84c <ai_platform_api_get_network_report+0x2b4>
 800e6b8:	681e      	ldr	r6, [r3, #0]
 800e6ba:	2e00      	cmp	r6, #0
 800e6bc:	f000 80c6 	beq.w	800e84c <ai_platform_api_get_network_report+0x2b4>
 800e6c0:	f04f 0800 	mov.w	r8, #0
 800e6c4:	4641      	mov	r1, r8
 800e6c6:	f04f 0b18 	mov.w	fp, #24
 800e6ca:	f04f 0a01 	mov.w	sl, #1
 800e6ce:	e019      	b.n	800e704 <ai_platform_api_get_network_report+0x16c>
 800e6d0:	f849 1038 	str.w	r1, [r9, r8, lsl #3]
 800e6d4:	6830      	ldr	r0, [r6, #0]
 800e6d6:	6050      	str	r0, [r2, #4]
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d039      	beq.n	800e750 <ai_platform_api_get_network_report+0x1b8>
 800e6dc:	8840      	ldrh	r0, [r0, #2]
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	d036      	beq.n	800e750 <ai_platform_api_get_network_report+0x1b8>
 800e6e2:	f849 a00c 	str.w	sl, [r9, ip]
 800e6e6:	615a      	str	r2, [r3, #20]
 800e6e8:	8838      	ldrh	r0, [r7, #0]
 800e6ea:	f108 0301 	add.w	r3, r8, #1
 800e6ee:	4283      	cmp	r3, r0
 800e6f0:	4698      	mov	r8, r3
 800e6f2:	b29a      	uxth	r2, r3
 800e6f4:	d240      	bcs.n	800e778 <ai_platform_api_get_network_report+0x1e0>
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d03d      	beq.n	800e778 <ai_platform_api_get_network_report+0x1e0>
 800e6fc:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
 800e700:	2e00      	cmp	r6, #0
 800e702:	d039      	beq.n	800e778 <ai_platform_api_get_network_report+0x1e0>
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	69b2      	ldr	r2, [r6, #24]
 800e708:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800e70c:	6810      	ldr	r0, [r2, #0]
 800e70e:	685a      	ldr	r2, [r3, #4]
 800e710:	9101      	str	r1, [sp, #4]
 800e712:	9200      	str	r2, [sp, #0]
 800e714:	f003 f8b8 	bl	8011888 <ai_array_to_buffer_fmt>
 800e718:	9a00      	ldr	r2, [sp, #0]
 800e71a:	9901      	ldr	r1, [sp, #4]
 800e71c:	fb0b fc08 	mul.w	ip, fp, r8
 800e720:	eb02 030c 	add.w	r3, r2, ip
 800e724:	f842 000c 	str.w	r0, [r2, ip]
 800e728:	f8a3 a004 	strh.w	sl, [r3, #4]
 800e72c:	68f2      	ldr	r2, [r6, #12]
 800e72e:	68d2      	ldr	r2, [r2, #12]
 800e730:	80da      	strh	r2, [r3, #6]
 800e732:	68f2      	ldr	r2, [r6, #12]
 800e734:	6892      	ldr	r2, [r2, #8]
 800e736:	811a      	strh	r2, [r3, #8]
 800e738:	68f2      	ldr	r2, [r6, #12]
 800e73a:	6852      	ldr	r2, [r2, #4]
 800e73c:	60da      	str	r2, [r3, #12]
 800e73e:	69b2      	ldr	r2, [r6, #24]
 800e740:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800e744:	6892      	ldr	r2, [r2, #8]
 800e746:	611a      	str	r2, [r3, #16]
 800e748:	eb09 020c 	add.w	r2, r9, ip
 800e74c:	2a00      	cmp	r2, #0
 800e74e:	d1bf      	bne.n	800e6d0 <ai_platform_api_get_network_report+0x138>
 800e750:	2200      	movs	r2, #0
 800e752:	e7c8      	b.n	800e6e6 <ai_platform_api_get_network_report+0x14e>
 800e754:	2300      	movs	r3, #0
 800e756:	8663      	strh	r3, [r4, #50]	; 0x32
 800e758:	f105 0010 	add.w	r0, r5, #16
 800e75c:	2218      	movs	r2, #24
 800e75e:	2113      	movs	r1, #19
 800e760:	f000 ff36 	bl	800f5d0 <core_set_error>
 800e764:	2600      	movs	r6, #0
 800e766:	e74c      	b.n	800e602 <ai_platform_api_get_network_report+0x6a>
 800e768:	f105 0010 	add.w	r0, r5, #16
 800e76c:	2218      	movs	r2, #24
 800e76e:	2111      	movs	r1, #17
 800e770:	f000 ff2e 	bl	800f5d0 <core_set_error>
 800e774:	2600      	movs	r6, #0
 800e776:	e744      	b.n	800e602 <ai_platform_api_get_network_report+0x6a>
 800e778:	2a00      	cmp	r2, #0
 800e77a:	d067      	beq.n	800e84c <ai_platform_api_get_network_report+0x2b4>
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	6363      	str	r3, [r4, #52]	; 0x34
 800e782:	8622      	strh	r2, [r4, #48]	; 0x30
 800e784:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800e786:	2b01      	cmp	r3, #1
 800e788:	d9e4      	bls.n	800e754 <ai_platform_api_get_network_report+0x1bc>
 800e78a:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800e78e:	2600      	movs	r6, #0
 800e790:	f108 0a0c 	add.w	sl, r8, #12
 800e794:	4631      	mov	r1, r6
 800e796:	f04f 0b01 	mov.w	fp, #1
 800e79a:	b2b3      	uxth	r3, r6
 800e79c:	f1ba 0f00 	cmp.w	sl, #0
 800e7a0:	d05f      	beq.n	800e862 <ai_platform_api_get_network_report+0x2ca>
 800e7a2:	f8b8 000c 	ldrh.w	r0, [r8, #12]
 800e7a6:	4286      	cmp	r6, r0
 800e7a8:	d25b      	bcs.n	800e862 <ai_platform_api_get_network_report+0x2ca>
 800e7aa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	d057      	beq.n	800e862 <ai_platform_api_get_network_report+0x2ca>
 800e7b2:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800e7b6:	2f00      	cmp	r7, #0
 800e7b8:	d053      	beq.n	800e862 <ai_platform_api_get_network_report+0x2ca>
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800e7c0:	6818      	ldr	r0, [r3, #0]
 800e7c2:	6853      	ldr	r3, [r2, #4]
 800e7c4:	9101      	str	r1, [sp, #4]
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800e7cc:	f003 f85c 	bl	8011888 <ai_array_to_buffer_fmt>
 800e7d0:	2318      	movs	r3, #24
 800e7d2:	fb03 fe06 	mul.w	lr, r3, r6
 800e7d6:	9b00      	ldr	r3, [sp, #0]
 800e7d8:	9901      	ldr	r1, [sp, #4]
 800e7da:	f843 000e 	str.w	r0, [r3, lr]
 800e7de:	eb03 0c0e 	add.w	ip, r3, lr
 800e7e2:	00f0      	lsls	r0, r6, #3
 800e7e4:	f8ac b004 	strh.w	fp, [ip, #4]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	f8ac 3006 	strh.w	r3, [ip, #6]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	689b      	ldr	r3, [r3, #8]
 800e7f4:	f8ac 3008 	strh.w	r3, [ip, #8]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	f8cc 300c 	str.w	r3, [ip, #12]
 800e800:	69bb      	ldr	r3, [r7, #24]
 800e802:	689b      	ldr	r3, [r3, #8]
 800e804:	f8cc 3010 	str.w	r3, [ip, #16]
 800e808:	eb09 0300 	add.w	r3, r9, r0
 800e80c:	b33b      	cbz	r3, 800e85e <ai_platform_api_get_network_report+0x2c6>
 800e80e:	f849 1036 	str.w	r1, [r9, r6, lsl #3]
 800e812:	683f      	ldr	r7, [r7, #0]
 800e814:	605f      	str	r7, [r3, #4]
 800e816:	b317      	cbz	r7, 800e85e <ai_platform_api_get_network_report+0x2c6>
 800e818:	887f      	ldrh	r7, [r7, #2]
 800e81a:	b307      	cbz	r7, 800e85e <ai_platform_api_get_network_report+0x2c6>
 800e81c:	f849 b000 	str.w	fp, [r9, r0]
 800e820:	f8cc 3014 	str.w	r3, [ip, #20]
 800e824:	3601      	adds	r6, #1
 800e826:	e7b8      	b.n	800e79a <ai_platform_api_get_network_report+0x202>
 800e828:	a1c00100 	.word	0xa1c00100
 800e82c:	e0002000 	.word	0xe0002000
 800e830:	e0042000 	.word	0xe0042000
 800e834:	58024c08 	.word	0x58024c08
 800e838:	58024c00 	.word	0x58024c00
 800e83c:	f407a5c2 	.word	0xf407a5c2
 800e840:	b5e8b5cd 	.word	0xb5e8b5cd
 800e844:	40023008 	.word	0x40023008
 800e848:	40023000 	.word	0x40023000
 800e84c:	2600      	movs	r6, #0
 800e84e:	f105 0010 	add.w	r0, r5, #16
 800e852:	8626      	strh	r6, [r4, #48]	; 0x30
 800e854:	2218      	movs	r2, #24
 800e856:	2112      	movs	r1, #18
 800e858:	f000 feba 	bl	800f5d0 <core_set_error>
 800e85c:	e6d1      	b.n	800e602 <ai_platform_api_get_network_report+0x6a>
 800e85e:	2300      	movs	r3, #0
 800e860:	e7de      	b.n	800e820 <ai_platform_api_get_network_report+0x288>
 800e862:	2b00      	cmp	r3, #0
 800e864:	f43f af77 	beq.w	800e756 <ai_platform_api_get_network_report+0x1be>
 800e868:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e86c:	6852      	ldr	r2, [r2, #4]
 800e86e:	63a2      	str	r2, [r4, #56]	; 0x38
 800e870:	8663      	strh	r3, [r4, #50]	; 0x32
 800e872:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e874:	b16b      	cbz	r3, 800e892 <ai_platform_api_get_network_report+0x2fa>
 800e876:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800e878:	b15b      	cbz	r3, 800e892 <ai_platform_api_get_network_report+0x2fa>
 800e87a:	6a2b      	ldr	r3, [r5, #32]
 800e87c:	b10b      	cbz	r3, 800e882 <ai_platform_api_get_network_report+0x2ea>
 800e87e:	8beb      	ldrh	r3, [r5, #30]
 800e880:	b97b      	cbnz	r3, 800e8a2 <ai_platform_api_get_network_report+0x30a>
 800e882:	f105 0010 	add.w	r0, r5, #16
 800e886:	2212      	movs	r2, #18
 800e888:	2111      	movs	r1, #17
 800e88a:	f000 fea1 	bl	800f5d0 <core_set_error>
 800e88e:	2600      	movs	r6, #0
 800e890:	e6b7      	b.n	800e602 <ai_platform_api_get_network_report+0x6a>
 800e892:	f105 0010 	add.w	r0, r5, #16
 800e896:	2213      	movs	r2, #19
 800e898:	2111      	movs	r1, #17
 800e89a:	f000 fe99 	bl	800f5d0 <core_set_error>
 800e89e:	2600      	movs	r6, #0
 800e8a0:	e6af      	b.n	800e602 <ai_platform_api_get_network_report+0x6a>
 800e8a2:	686b      	ldr	r3, [r5, #4]
 800e8a4:	4a83      	ldr	r2, [pc, #524]	; (800eab4 <ai_platform_api_get_network_report+0x51c>)
 800e8a6:	6723      	str	r3, [r4, #112]	; 0x70
 800e8a8:	6813      	ldr	r3, [r2, #0]
 800e8aa:	f023 0301 	bic.w	r3, r3, #1
 800e8ae:	6013      	str	r3, [r2, #0]
 800e8b0:	f7ff fc18 	bl	800e0e4 <_ai_platform_acquire_crc>
 800e8b4:	4b80      	ldr	r3, [pc, #512]	; (800eab8 <ai_platform_api_get_network_report+0x520>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e8bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8c0:	d00d      	beq.n	800e8de <ai_platform_api_get_network_report+0x346>
 800e8c2:	4b7e      	ldr	r3, [pc, #504]	; (800eabc <ai_platform_api_get_network_report+0x524>)
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	601a      	str	r2, [r3, #0]
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	2a00      	cmp	r2, #0
 800e8cc:	d1fc      	bne.n	800e8c8 <ai_platform_api_get_network_report+0x330>
 800e8ce:	4b7c      	ldr	r3, [pc, #496]	; (800eac0 <ai_platform_api_get_network_report+0x528>)
 800e8d0:	4a7c      	ldr	r2, [pc, #496]	; (800eac4 <ai_platform_api_get_network_report+0x52c>)
 800e8d2:	601a      	str	r2, [r3, #0]
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	4b7c      	ldr	r3, [pc, #496]	; (800eac8 <ai_platform_api_get_network_report+0x530>)
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d00e      	beq.n	800e8fa <ai_platform_api_get_network_report+0x362>
 800e8dc:	e7fe      	b.n	800e8dc <ai_platform_api_get_network_report+0x344>
 800e8de:	4b7b      	ldr	r3, [pc, #492]	; (800eacc <ai_platform_api_get_network_report+0x534>)
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	601a      	str	r2, [r3, #0]
 800e8e4:	681a      	ldr	r2, [r3, #0]
 800e8e6:	2a00      	cmp	r2, #0
 800e8e8:	d1fc      	bne.n	800e8e4 <ai_platform_api_get_network_report+0x34c>
 800e8ea:	4b79      	ldr	r3, [pc, #484]	; (800ead0 <ai_platform_api_get_network_report+0x538>)
 800e8ec:	4a75      	ldr	r2, [pc, #468]	; (800eac4 <ai_platform_api_get_network_report+0x52c>)
 800e8ee:	601a      	str	r2, [r3, #0]
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	4b75      	ldr	r3, [pc, #468]	; (800eac8 <ai_platform_api_get_network_report+0x530>)
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d000      	beq.n	800e8fa <ai_platform_api_get_network_report+0x362>
 800e8f8:	e7fe      	b.n	800e8f8 <ai_platform_api_get_network_report+0x360>
 800e8fa:	f7ff fbf5 	bl	800e0e8 <_ai_platform_release_crc>
 800e8fe:	4a6d      	ldr	r2, [pc, #436]	; (800eab4 <ai_platform_api_get_network_report+0x51c>)
 800e900:	4b74      	ldr	r3, [pc, #464]	; (800ead4 <ai_platform_api_get_network_report+0x53c>)
 800e902:	6123      	str	r3, [r4, #16]
 800e904:	6813      	ldr	r3, [r2, #0]
 800e906:	f023 0301 	bic.w	r3, r3, #1
 800e90a:	6013      	str	r3, [r2, #0]
 800e90c:	f7ff fbea 	bl	800e0e4 <_ai_platform_acquire_crc>
 800e910:	4b69      	ldr	r3, [pc, #420]	; (800eab8 <ai_platform_api_get_network_report+0x520>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e91c:	d00d      	beq.n	800e93a <ai_platform_api_get_network_report+0x3a2>
 800e91e:	4b67      	ldr	r3, [pc, #412]	; (800eabc <ai_platform_api_get_network_report+0x524>)
 800e920:	2201      	movs	r2, #1
 800e922:	601a      	str	r2, [r3, #0]
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	2a00      	cmp	r2, #0
 800e928:	d1fc      	bne.n	800e924 <ai_platform_api_get_network_report+0x38c>
 800e92a:	4b65      	ldr	r3, [pc, #404]	; (800eac0 <ai_platform_api_get_network_report+0x528>)
 800e92c:	4a65      	ldr	r2, [pc, #404]	; (800eac4 <ai_platform_api_get_network_report+0x52c>)
 800e92e:	601a      	str	r2, [r3, #0]
 800e930:	681a      	ldr	r2, [r3, #0]
 800e932:	4b65      	ldr	r3, [pc, #404]	; (800eac8 <ai_platform_api_get_network_report+0x530>)
 800e934:	429a      	cmp	r2, r3
 800e936:	d00e      	beq.n	800e956 <ai_platform_api_get_network_report+0x3be>
 800e938:	e7fe      	b.n	800e938 <ai_platform_api_get_network_report+0x3a0>
 800e93a:	4b64      	ldr	r3, [pc, #400]	; (800eacc <ai_platform_api_get_network_report+0x534>)
 800e93c:	2201      	movs	r2, #1
 800e93e:	601a      	str	r2, [r3, #0]
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	2a00      	cmp	r2, #0
 800e944:	d1fc      	bne.n	800e940 <ai_platform_api_get_network_report+0x3a8>
 800e946:	4b62      	ldr	r3, [pc, #392]	; (800ead0 <ai_platform_api_get_network_report+0x538>)
 800e948:	4a5e      	ldr	r2, [pc, #376]	; (800eac4 <ai_platform_api_get_network_report+0x52c>)
 800e94a:	601a      	str	r2, [r3, #0]
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	4b5e      	ldr	r3, [pc, #376]	; (800eac8 <ai_platform_api_get_network_report+0x530>)
 800e950:	429a      	cmp	r2, r3
 800e952:	d000      	beq.n	800e956 <ai_platform_api_get_network_report+0x3be>
 800e954:	e7fe      	b.n	800e954 <ai_platform_api_get_network_report+0x3bc>
 800e956:	f7ff fbc7 	bl	800e0e8 <_ai_platform_release_crc>
 800e95a:	4a56      	ldr	r2, [pc, #344]	; (800eab4 <ai_platform_api_get_network_report+0x51c>)
 800e95c:	2307      	movs	r3, #7
 800e95e:	6163      	str	r3, [r4, #20]
 800e960:	6813      	ldr	r3, [r2, #0]
 800e962:	f023 0301 	bic.w	r3, r3, #1
 800e966:	6013      	str	r3, [r2, #0]
 800e968:	f7ff fbbc 	bl	800e0e4 <_ai_platform_acquire_crc>
 800e96c:	4b52      	ldr	r3, [pc, #328]	; (800eab8 <ai_platform_api_get_network_report+0x520>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e978:	d00d      	beq.n	800e996 <ai_platform_api_get_network_report+0x3fe>
 800e97a:	4b50      	ldr	r3, [pc, #320]	; (800eabc <ai_platform_api_get_network_report+0x524>)
 800e97c:	2201      	movs	r2, #1
 800e97e:	601a      	str	r2, [r3, #0]
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	2a00      	cmp	r2, #0
 800e984:	d1fc      	bne.n	800e980 <ai_platform_api_get_network_report+0x3e8>
 800e986:	4b4e      	ldr	r3, [pc, #312]	; (800eac0 <ai_platform_api_get_network_report+0x528>)
 800e988:	4a4e      	ldr	r2, [pc, #312]	; (800eac4 <ai_platform_api_get_network_report+0x52c>)
 800e98a:	601a      	str	r2, [r3, #0]
 800e98c:	681a      	ldr	r2, [r3, #0]
 800e98e:	4b4e      	ldr	r3, [pc, #312]	; (800eac8 <ai_platform_api_get_network_report+0x530>)
 800e990:	429a      	cmp	r2, r3
 800e992:	d00e      	beq.n	800e9b2 <ai_platform_api_get_network_report+0x41a>
 800e994:	e7fe      	b.n	800e994 <ai_platform_api_get_network_report+0x3fc>
 800e996:	4b4d      	ldr	r3, [pc, #308]	; (800eacc <ai_platform_api_get_network_report+0x534>)
 800e998:	2201      	movs	r2, #1
 800e99a:	601a      	str	r2, [r3, #0]
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	2a00      	cmp	r2, #0
 800e9a0:	d1fc      	bne.n	800e99c <ai_platform_api_get_network_report+0x404>
 800e9a2:	4b4b      	ldr	r3, [pc, #300]	; (800ead0 <ai_platform_api_get_network_report+0x538>)
 800e9a4:	4a47      	ldr	r2, [pc, #284]	; (800eac4 <ai_platform_api_get_network_report+0x52c>)
 800e9a6:	601a      	str	r2, [r3, #0]
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	4b47      	ldr	r3, [pc, #284]	; (800eac8 <ai_platform_api_get_network_report+0x530>)
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d000      	beq.n	800e9b2 <ai_platform_api_get_network_report+0x41a>
 800e9b0:	e7fe      	b.n	800e9b0 <ai_platform_api_get_network_report+0x418>
 800e9b2:	f7ff fb99 	bl	800e0e8 <_ai_platform_release_crc>
 800e9b6:	4a3f      	ldr	r2, [pc, #252]	; (800eab4 <ai_platform_api_get_network_report+0x51c>)
 800e9b8:	f240 1301 	movw	r3, #257	; 0x101
 800e9bc:	6263      	str	r3, [r4, #36]	; 0x24
 800e9be:	6813      	ldr	r3, [r2, #0]
 800e9c0:	f023 0301 	bic.w	r3, r3, #1
 800e9c4:	6013      	str	r3, [r2, #0]
 800e9c6:	f7ff fb8d 	bl	800e0e4 <_ai_platform_acquire_crc>
 800e9ca:	4b3b      	ldr	r3, [pc, #236]	; (800eab8 <ai_platform_api_get_network_report+0x520>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e9d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9d6:	d00d      	beq.n	800e9f4 <ai_platform_api_get_network_report+0x45c>
 800e9d8:	4b38      	ldr	r3, [pc, #224]	; (800eabc <ai_platform_api_get_network_report+0x524>)
 800e9da:	2201      	movs	r2, #1
 800e9dc:	601a      	str	r2, [r3, #0]
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	2a00      	cmp	r2, #0
 800e9e2:	d1fc      	bne.n	800e9de <ai_platform_api_get_network_report+0x446>
 800e9e4:	4b36      	ldr	r3, [pc, #216]	; (800eac0 <ai_platform_api_get_network_report+0x528>)
 800e9e6:	4a37      	ldr	r2, [pc, #220]	; (800eac4 <ai_platform_api_get_network_report+0x52c>)
 800e9e8:	601a      	str	r2, [r3, #0]
 800e9ea:	681a      	ldr	r2, [r3, #0]
 800e9ec:	4b36      	ldr	r3, [pc, #216]	; (800eac8 <ai_platform_api_get_network_report+0x530>)
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d00e      	beq.n	800ea10 <ai_platform_api_get_network_report+0x478>
 800e9f2:	e7fe      	b.n	800e9f2 <ai_platform_api_get_network_report+0x45a>
 800e9f4:	4b35      	ldr	r3, [pc, #212]	; (800eacc <ai_platform_api_get_network_report+0x534>)
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	601a      	str	r2, [r3, #0]
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	2a00      	cmp	r2, #0
 800e9fe:	d1fc      	bne.n	800e9fa <ai_platform_api_get_network_report+0x462>
 800ea00:	4b33      	ldr	r3, [pc, #204]	; (800ead0 <ai_platform_api_get_network_report+0x538>)
 800ea02:	4a30      	ldr	r2, [pc, #192]	; (800eac4 <ai_platform_api_get_network_report+0x52c>)
 800ea04:	601a      	str	r2, [r3, #0]
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	4b2f      	ldr	r3, [pc, #188]	; (800eac8 <ai_platform_api_get_network_report+0x530>)
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d000      	beq.n	800ea10 <ai_platform_api_get_network_report+0x478>
 800ea0e:	e7fe      	b.n	800ea0e <ai_platform_api_get_network_report+0x476>
 800ea10:	f7ff fb6a 	bl	800e0e8 <_ai_platform_release_crc>
 800ea14:	f240 4301 	movw	r3, #1025	; 0x401
 800ea18:	62a3      	str	r3, [r4, #40]	; 0x28
 800ea1a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ea1c:	4a2e      	ldr	r2, [pc, #184]	; (800ead8 <ai_platform_api_get_network_report+0x540>)
 800ea1e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ea20:	0e18      	lsrs	r0, r3, #24
 800ea22:	f884 0020 	strb.w	r0, [r4, #32]
 800ea26:	0c18      	lsrs	r0, r3, #16
 800ea28:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
 800ea2c:	0a1b      	lsrs	r3, r3, #8
 800ea2e:	2000      	movs	r0, #0
 800ea30:	4291      	cmp	r1, r2
 800ea32:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800ea36:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 800ea3a:	d019      	beq.n	800ea70 <ai_platform_api_get_network_report+0x4d8>
 800ea3c:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800ea3e:	b386      	cbz	r6, 800eaa2 <ai_platform_api_get_network_report+0x50a>
 800ea40:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800ea42:	b373      	cbz	r3, 800eaa2 <ai_platform_api_get_network_report+0x50a>
 800ea44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ea46:	f104 0754 	add.w	r7, r4, #84	; 0x54
 800ea4a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ea4c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ea50:	e887 0003 	stmia.w	r7, {r0, r1}
 800ea54:	6a2b      	ldr	r3, [r5, #32]
 800ea56:	b1db      	cbz	r3, 800ea90 <ai_platform_api_get_network_report+0x4f8>
 800ea58:	8bea      	ldrh	r2, [r5, #30]
 800ea5a:	b1ca      	cbz	r2, 800ea90 <ai_platform_api_get_network_report+0x4f8>
 800ea5c:	461d      	mov	r5, r3
 800ea5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea60:	343c      	adds	r4, #60	; 0x3c
 800ea62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea64:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ea68:	2601      	movs	r6, #1
 800ea6a:	e884 0003 	stmia.w	r4, {r0, r1}
 800ea6e:	e5c8      	b.n	800e602 <ai_platform_api_get_network_report+0x6a>
 800ea70:	f105 0324 	add.w	r3, r5, #36	; 0x24
 800ea74:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ea78:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800ea7c:	e883 0003 	stmia.w	r3, {r0, r1}
 800ea80:	351c      	adds	r5, #28
 800ea82:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ea86:	3440      	adds	r4, #64	; 0x40
 800ea88:	e884 0003 	stmia.w	r4, {r0, r1}
 800ea8c:	2601      	movs	r6, #1
 800ea8e:	e5b8      	b.n	800e602 <ai_platform_api_get_network_report+0x6a>
 800ea90:	2500      	movs	r5, #0
 800ea92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea94:	343c      	adds	r4, #60	; 0x3c
 800ea96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea98:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ea9c:	e884 0003 	stmia.w	r4, {r0, r1}
 800eaa0:	deff      	udf	#255	; 0xff
 800eaa2:	2500      	movs	r5, #0
 800eaa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eaa6:	3454      	adds	r4, #84	; 0x54
 800eaa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eaaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800eaae:	e884 0003 	stmia.w	r4, {r0, r1}
 800eab2:	deff      	udf	#255	; 0xff
 800eab4:	e0002000 	.word	0xe0002000
 800eab8:	e0042000 	.word	0xe0042000
 800eabc:	58024c08 	.word	0x58024c08
 800eac0:	58024c00 	.word	0x58024c00
 800eac4:	f407a5c2 	.word	0xf407a5c2
 800eac8:	b5e8b5cd 	.word	0xb5e8b5cd
 800eacc:	40023008 	.word	0x40023008
 800ead0:	40023000 	.word	0x40023000
 800ead4:	08017614 	.word	0x08017614
 800ead8:	a1facade 	.word	0xa1facade

0800eadc <ai_platform_network_create>:
 800eadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae0:	b082      	sub	sp, #8
 800eae2:	4607      	mov	r7, r0
 800eae4:	4616      	mov	r6, r2
 800eae6:	461d      	mov	r5, r3
 800eae8:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800eaec:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 800eaf0:	f7ff faf8 	bl	800e0e4 <_ai_platform_acquire_crc>
 800eaf4:	b178      	cbz	r0, 800eb16 <ai_platform_network_create+0x3a>
 800eaf6:	4b5a      	ldr	r3, [pc, #360]	; (800ec60 <ai_platform_network_create+0x184>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eafe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb02:	4602      	mov	r2, r0
 800eb04:	d00c      	beq.n	800eb20 <ai_platform_network_create+0x44>
 800eb06:	4b57      	ldr	r3, [pc, #348]	; (800ec64 <ai_platform_network_create+0x188>)
 800eb08:	2118      	movs	r1, #24
 800eb0a:	6019      	str	r1, [r3, #0]
 800eb0c:	6819      	ldr	r1, [r3, #0]
 800eb0e:	2918      	cmp	r1, #24
 800eb10:	d034      	beq.n	800eb7c <ai_platform_network_create+0xa0>
 800eb12:	f7ff fae9 	bl	800e0e8 <_ai_platform_release_crc>
 800eb16:	f241 0033 	movw	r0, #4147	; 0x1033
 800eb1a:	b002      	add	sp, #8
 800eb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb20:	4b51      	ldr	r3, [pc, #324]	; (800ec68 <ai_platform_network_create+0x18c>)
 800eb22:	2101      	movs	r1, #1
 800eb24:	6019      	str	r1, [r3, #0]
 800eb26:	2114      	movs	r1, #20
 800eb28:	e001      	b.n	800eb2e <ai_platform_network_create+0x52>
 800eb2a:	3901      	subs	r1, #1
 800eb2c:	d002      	beq.n	800eb34 <ai_platform_network_create+0x58>
 800eb2e:	6818      	ldr	r0, [r3, #0]
 800eb30:	2800      	cmp	r0, #0
 800eb32:	d1fa      	bne.n	800eb2a <ai_platform_network_create+0x4e>
 800eb34:	4b4c      	ldr	r3, [pc, #304]	; (800ec68 <ai_platform_network_create+0x18c>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	b9f3      	cbnz	r3, 800eb78 <ai_platform_network_create+0x9c>
 800eb3a:	4610      	mov	r0, r2
 800eb3c:	f7ff fad4 	bl	800e0e8 <_ai_platform_release_crc>
 800eb40:	4a4a      	ldr	r2, [pc, #296]	; (800ec6c <ai_platform_network_create+0x190>)
 800eb42:	6813      	ldr	r3, [r2, #0]
 800eb44:	f023 0301 	bic.w	r3, r3, #1
 800eb48:	6013      	str	r3, [r2, #0]
 800eb4a:	f7ff facb 	bl	800e0e4 <_ai_platform_acquire_crc>
 800eb4e:	4b44      	ldr	r3, [pc, #272]	; (800ec60 <ai_platform_network_create+0x184>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb5a:	d015      	beq.n	800eb88 <ai_platform_network_create+0xac>
 800eb5c:	4b41      	ldr	r3, [pc, #260]	; (800ec64 <ai_platform_network_create+0x188>)
 800eb5e:	2201      	movs	r2, #1
 800eb60:	601a      	str	r2, [r3, #0]
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	2a00      	cmp	r2, #0
 800eb66:	d1fc      	bne.n	800eb62 <ai_platform_network_create+0x86>
 800eb68:	4b41      	ldr	r3, [pc, #260]	; (800ec70 <ai_platform_network_create+0x194>)
 800eb6a:	4a42      	ldr	r2, [pc, #264]	; (800ec74 <ai_platform_network_create+0x198>)
 800eb6c:	601a      	str	r2, [r3, #0]
 800eb6e:	681a      	ldr	r2, [r3, #0]
 800eb70:	4b41      	ldr	r3, [pc, #260]	; (800ec78 <ai_platform_network_create+0x19c>)
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d016      	beq.n	800eba4 <ai_platform_network_create+0xc8>
 800eb76:	e7fe      	b.n	800eb76 <ai_platform_network_create+0x9a>
 800eb78:	4610      	mov	r0, r2
 800eb7a:	e7ca      	b.n	800eb12 <ai_platform_network_create+0x36>
 800eb7c:	2101      	movs	r1, #1
 800eb7e:	6019      	str	r1, [r3, #0]
 800eb80:	6819      	ldr	r1, [r3, #0]
 800eb82:	2900      	cmp	r1, #0
 800eb84:	d1fc      	bne.n	800eb80 <ai_platform_network_create+0xa4>
 800eb86:	e7d8      	b.n	800eb3a <ai_platform_network_create+0x5e>
 800eb88:	4b37      	ldr	r3, [pc, #220]	; (800ec68 <ai_platform_network_create+0x18c>)
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	601a      	str	r2, [r3, #0]
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	2a00      	cmp	r2, #0
 800eb92:	d1fc      	bne.n	800eb8e <ai_platform_network_create+0xb2>
 800eb94:	4b39      	ldr	r3, [pc, #228]	; (800ec7c <ai_platform_network_create+0x1a0>)
 800eb96:	4a37      	ldr	r2, [pc, #220]	; (800ec74 <ai_platform_network_create+0x198>)
 800eb98:	601a      	str	r2, [r3, #0]
 800eb9a:	681a      	ldr	r2, [r3, #0]
 800eb9c:	4b36      	ldr	r3, [pc, #216]	; (800ec78 <ai_platform_network_create+0x19c>)
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d000      	beq.n	800eba4 <ai_platform_network_create+0xc8>
 800eba2:	e7fe      	b.n	800eba2 <ai_platform_network_create+0xc6>
 800eba4:	f7ff faa0 	bl	800e0e8 <_ai_platform_release_crc>
 800eba8:	b1af      	cbz	r7, 800ebd6 <ai_platform_network_create+0xfa>
 800ebaa:	4b35      	ldr	r3, [pc, #212]	; (800ec80 <ai_platform_network_create+0x1a4>)
 800ebac:	6033      	str	r3, [r6, #0]
 800ebae:	603e      	str	r6, [r7, #0]
 800ebb0:	f000 fd06 	bl	800f5c0 <core_init>
 800ebb4:	b990      	cbnz	r0, 800ebdc <ai_platform_network_create+0x100>
 800ebb6:	062d      	lsls	r5, r5, #24
 800ebb8:	0424      	lsls	r4, r4, #16
 800ebba:	2230      	movs	r2, #48	; 0x30
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	603b      	str	r3, [r7, #0]
 800ebc0:	2110      	movs	r1, #16
 800ebc2:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 800ebc6:	2000      	movs	r0, #0
 800ebc8:	432b      	orrs	r3, r5
 800ebca:	f362 0007 	bfi	r0, r2, #0, #8
 800ebce:	6473      	str	r3, [r6, #68]	; 0x44
 800ebd0:	f361 201f 	bfi	r0, r1, #8, #24
 800ebd4:	e7a1      	b.n	800eb1a <ai_platform_network_create+0x3e>
 800ebd6:	f241 0010 	movw	r0, #4112	; 0x1010
 800ebda:	e79e      	b.n	800eb1a <ai_platform_network_create+0x3e>
 800ebdc:	4a23      	ldr	r2, [pc, #140]	; (800ec6c <ai_platform_network_create+0x190>)
 800ebde:	6813      	ldr	r3, [r2, #0]
 800ebe0:	f023 0301 	bic.w	r3, r3, #1
 800ebe4:	6013      	str	r3, [r2, #0]
 800ebe6:	f7ff fa7d 	bl	800e0e4 <_ai_platform_acquire_crc>
 800ebea:	4b1d      	ldr	r3, [pc, #116]	; (800ec60 <ai_platform_network_create+0x184>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ebf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebf6:	d00d      	beq.n	800ec14 <ai_platform_network_create+0x138>
 800ebf8:	4b1a      	ldr	r3, [pc, #104]	; (800ec64 <ai_platform_network_create+0x188>)
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	601a      	str	r2, [r3, #0]
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	2a00      	cmp	r2, #0
 800ec02:	d1fc      	bne.n	800ebfe <ai_platform_network_create+0x122>
 800ec04:	4b1a      	ldr	r3, [pc, #104]	; (800ec70 <ai_platform_network_create+0x194>)
 800ec06:	4a1b      	ldr	r2, [pc, #108]	; (800ec74 <ai_platform_network_create+0x198>)
 800ec08:	601a      	str	r2, [r3, #0]
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	4b1a      	ldr	r3, [pc, #104]	; (800ec78 <ai_platform_network_create+0x19c>)
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d00e      	beq.n	800ec30 <ai_platform_network_create+0x154>
 800ec12:	e7fe      	b.n	800ec12 <ai_platform_network_create+0x136>
 800ec14:	4b14      	ldr	r3, [pc, #80]	; (800ec68 <ai_platform_network_create+0x18c>)
 800ec16:	2201      	movs	r2, #1
 800ec18:	601a      	str	r2, [r3, #0]
 800ec1a:	681a      	ldr	r2, [r3, #0]
 800ec1c:	2a00      	cmp	r2, #0
 800ec1e:	d1fc      	bne.n	800ec1a <ai_platform_network_create+0x13e>
 800ec20:	4b16      	ldr	r3, [pc, #88]	; (800ec7c <ai_platform_network_create+0x1a0>)
 800ec22:	4a14      	ldr	r2, [pc, #80]	; (800ec74 <ai_platform_network_create+0x198>)
 800ec24:	601a      	str	r2, [r3, #0]
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	4b13      	ldr	r3, [pc, #76]	; (800ec78 <ai_platform_network_create+0x19c>)
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d000      	beq.n	800ec30 <ai_platform_network_create+0x154>
 800ec2e:	e7fe      	b.n	800ec2e <ai_platform_network_create+0x152>
 800ec30:	062d      	lsls	r5, r5, #24
 800ec32:	0424      	lsls	r4, r4, #16
 800ec34:	f7ff fa58 	bl	800e0e8 <_ai_platform_release_crc>
 800ec38:	ea45 0304 	orr.w	r3, r5, r4
 800ec3c:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800ec40:	d001      	beq.n	800ec46 <ai_platform_network_create+0x16a>
 800ec42:	2201      	movs	r2, #1
 800ec44:	e7ba      	b.n	800ebbc <ai_platform_network_create+0xe0>
 800ec46:	a802      	add	r0, sp, #8
 800ec48:	4b0e      	ldr	r3, [pc, #56]	; (800ec84 <ai_platform_network_create+0x1a8>)
 800ec4a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800ec4e:	f002 fd5f 	bl	8011710 <ai_check_custom_types>
 800ec52:	b110      	cbz	r0, 800ec5a <ai_platform_network_create+0x17e>
 800ec54:	2100      	movs	r1, #0
 800ec56:	460a      	mov	r2, r1
 800ec58:	e7b3      	b.n	800ebc2 <ai_platform_network_create+0xe6>
 800ec5a:	2202      	movs	r2, #2
 800ec5c:	e7ae      	b.n	800ebbc <ai_platform_network_create+0xe0>
 800ec5e:	bf00      	nop
 800ec60:	e0042000 	.word	0xe0042000
 800ec64:	58024c08 	.word	0x58024c08
 800ec68:	40023008 	.word	0x40023008
 800ec6c:	e0002000 	.word	0xe0002000
 800ec70:	58024c00 	.word	0x58024c00
 800ec74:	f407a5c2 	.word	0xf407a5c2
 800ec78:	b5e8b5cd 	.word	0xb5e8b5cd
 800ec7c:	40023000 	.word	0x40023000
 800ec80:	a1c00100 	.word	0xa1c00100
 800ec84:	84048403 	.word	0x84048403

0800ec88 <ai_platform_network_destroy>:
 800ec88:	b510      	push	{r4, lr}
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	b118      	cbz	r0, 800ec96 <ai_platform_network_destroy+0xe>
 800ec8e:	4b31      	ldr	r3, [pc, #196]	; (800ed54 <ai_platform_network_destroy+0xcc>)
 800ec90:	6802      	ldr	r2, [r0, #0]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d02d      	beq.n	800ecf2 <ai_platform_network_destroy+0x6a>
 800ec96:	4a30      	ldr	r2, [pc, #192]	; (800ed58 <ai_platform_network_destroy+0xd0>)
 800ec98:	6813      	ldr	r3, [r2, #0]
 800ec9a:	f023 0301 	bic.w	r3, r3, #1
 800ec9e:	6013      	str	r3, [r2, #0]
 800eca0:	f7ff fa20 	bl	800e0e4 <_ai_platform_acquire_crc>
 800eca4:	4b2d      	ldr	r3, [pc, #180]	; (800ed5c <ai_platform_network_destroy+0xd4>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ecac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ecb0:	d00d      	beq.n	800ecce <ai_platform_network_destroy+0x46>
 800ecb2:	4b2b      	ldr	r3, [pc, #172]	; (800ed60 <ai_platform_network_destroy+0xd8>)
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	601a      	str	r2, [r3, #0]
 800ecb8:	681a      	ldr	r2, [r3, #0]
 800ecba:	2a00      	cmp	r2, #0
 800ecbc:	d1fc      	bne.n	800ecb8 <ai_platform_network_destroy+0x30>
 800ecbe:	4b29      	ldr	r3, [pc, #164]	; (800ed64 <ai_platform_network_destroy+0xdc>)
 800ecc0:	4a29      	ldr	r2, [pc, #164]	; (800ed68 <ai_platform_network_destroy+0xe0>)
 800ecc2:	601a      	str	r2, [r3, #0]
 800ecc4:	681a      	ldr	r2, [r3, #0]
 800ecc6:	4b29      	ldr	r3, [pc, #164]	; (800ed6c <ai_platform_network_destroy+0xe4>)
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d00e      	beq.n	800ecea <ai_platform_network_destroy+0x62>
 800eccc:	e7fe      	b.n	800eccc <ai_platform_network_destroy+0x44>
 800ecce:	4b28      	ldr	r3, [pc, #160]	; (800ed70 <ai_platform_network_destroy+0xe8>)
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	601a      	str	r2, [r3, #0]
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	2a00      	cmp	r2, #0
 800ecd8:	d1fc      	bne.n	800ecd4 <ai_platform_network_destroy+0x4c>
 800ecda:	4b26      	ldr	r3, [pc, #152]	; (800ed74 <ai_platform_network_destroy+0xec>)
 800ecdc:	4a22      	ldr	r2, [pc, #136]	; (800ed68 <ai_platform_network_destroy+0xe0>)
 800ecde:	601a      	str	r2, [r3, #0]
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	4b22      	ldr	r3, [pc, #136]	; (800ed6c <ai_platform_network_destroy+0xe4>)
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d000      	beq.n	800ecea <ai_platform_network_destroy+0x62>
 800ece8:	e7fe      	b.n	800ece8 <ai_platform_network_destroy+0x60>
 800ecea:	f7ff f9fd 	bl	800e0e8 <_ai_platform_release_crc>
 800ecee:	4620      	mov	r0, r4
 800ecf0:	bd10      	pop	{r4, pc}
 800ecf2:	4a19      	ldr	r2, [pc, #100]	; (800ed58 <ai_platform_network_destroy+0xd0>)
 800ecf4:	6813      	ldr	r3, [r2, #0]
 800ecf6:	f023 0301 	bic.w	r3, r3, #1
 800ecfa:	6013      	str	r3, [r2, #0]
 800ecfc:	f7ff f9f2 	bl	800e0e4 <_ai_platform_acquire_crc>
 800ed00:	4b16      	ldr	r3, [pc, #88]	; (800ed5c <ai_platform_network_destroy+0xd4>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed0c:	d00d      	beq.n	800ed2a <ai_platform_network_destroy+0xa2>
 800ed0e:	4b14      	ldr	r3, [pc, #80]	; (800ed60 <ai_platform_network_destroy+0xd8>)
 800ed10:	2201      	movs	r2, #1
 800ed12:	601a      	str	r2, [r3, #0]
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	2a00      	cmp	r2, #0
 800ed18:	d1fc      	bne.n	800ed14 <ai_platform_network_destroy+0x8c>
 800ed1a:	4b12      	ldr	r3, [pc, #72]	; (800ed64 <ai_platform_network_destroy+0xdc>)
 800ed1c:	4a12      	ldr	r2, [pc, #72]	; (800ed68 <ai_platform_network_destroy+0xe0>)
 800ed1e:	601a      	str	r2, [r3, #0]
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	4b12      	ldr	r3, [pc, #72]	; (800ed6c <ai_platform_network_destroy+0xe4>)
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d00e      	beq.n	800ed46 <ai_platform_network_destroy+0xbe>
 800ed28:	e7fe      	b.n	800ed28 <ai_platform_network_destroy+0xa0>
 800ed2a:	4b11      	ldr	r3, [pc, #68]	; (800ed70 <ai_platform_network_destroy+0xe8>)
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	601a      	str	r2, [r3, #0]
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	2a00      	cmp	r2, #0
 800ed34:	d1fc      	bne.n	800ed30 <ai_platform_network_destroy+0xa8>
 800ed36:	4b0f      	ldr	r3, [pc, #60]	; (800ed74 <ai_platform_network_destroy+0xec>)
 800ed38:	4a0b      	ldr	r2, [pc, #44]	; (800ed68 <ai_platform_network_destroy+0xe0>)
 800ed3a:	601a      	str	r2, [r3, #0]
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	4b0b      	ldr	r3, [pc, #44]	; (800ed6c <ai_platform_network_destroy+0xe4>)
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d000      	beq.n	800ed46 <ai_platform_network_destroy+0xbe>
 800ed44:	e7fe      	b.n	800ed44 <ai_platform_network_destroy+0xbc>
 800ed46:	f7ff f9cf 	bl	800e0e8 <_ai_platform_release_crc>
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	f002 fd84 	bl	8011858 <ai_layers_destroy_all>
 800ed50:	2400      	movs	r4, #0
 800ed52:	e7cc      	b.n	800ecee <ai_platform_network_destroy+0x66>
 800ed54:	a1c00100 	.word	0xa1c00100
 800ed58:	e0002000 	.word	0xe0002000
 800ed5c:	e0042000 	.word	0xe0042000
 800ed60:	58024c08 	.word	0x58024c08
 800ed64:	58024c00 	.word	0x58024c00
 800ed68:	f407a5c2 	.word	0xf407a5c2
 800ed6c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ed70:	40023008 	.word	0x40023008
 800ed74:	40023000 	.word	0x40023000

0800ed78 <ai_platform_network_init>:
 800ed78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	d04d      	beq.n	800ee1c <ai_platform_network_init+0xa4>
 800ed80:	4b7c      	ldr	r3, [pc, #496]	; (800ef74 <ai_platform_network_init+0x1fc>)
 800ed82:	6802      	ldr	r2, [r0, #0]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	4604      	mov	r4, r0
 800ed88:	d148      	bne.n	800ee1c <ai_platform_network_init+0xa4>
 800ed8a:	4a7b      	ldr	r2, [pc, #492]	; (800ef78 <ai_platform_network_init+0x200>)
 800ed8c:	6813      	ldr	r3, [r2, #0]
 800ed8e:	f023 0301 	bic.w	r3, r3, #1
 800ed92:	6013      	str	r3, [r2, #0]
 800ed94:	460d      	mov	r5, r1
 800ed96:	f7ff f9a5 	bl	800e0e4 <_ai_platform_acquire_crc>
 800ed9a:	4b78      	ldr	r3, [pc, #480]	; (800ef7c <ai_platform_network_init+0x204>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eda2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eda6:	d00d      	beq.n	800edc4 <ai_platform_network_init+0x4c>
 800eda8:	4b75      	ldr	r3, [pc, #468]	; (800ef80 <ai_platform_network_init+0x208>)
 800edaa:	2201      	movs	r2, #1
 800edac:	601a      	str	r2, [r3, #0]
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	2a00      	cmp	r2, #0
 800edb2:	d1fc      	bne.n	800edae <ai_platform_network_init+0x36>
 800edb4:	4b73      	ldr	r3, [pc, #460]	; (800ef84 <ai_platform_network_init+0x20c>)
 800edb6:	4a74      	ldr	r2, [pc, #464]	; (800ef88 <ai_platform_network_init+0x210>)
 800edb8:	601a      	str	r2, [r3, #0]
 800edba:	681a      	ldr	r2, [r3, #0]
 800edbc:	4b73      	ldr	r3, [pc, #460]	; (800ef8c <ai_platform_network_init+0x214>)
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d00d      	beq.n	800edde <ai_platform_network_init+0x66>
 800edc2:	e7fe      	b.n	800edc2 <ai_platform_network_init+0x4a>
 800edc4:	4b72      	ldr	r3, [pc, #456]	; (800ef90 <ai_platform_network_init+0x218>)
 800edc6:	2201      	movs	r2, #1
 800edc8:	601a      	str	r2, [r3, #0]
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	2a00      	cmp	r2, #0
 800edce:	d1fc      	bne.n	800edca <ai_platform_network_init+0x52>
 800edd0:	4b70      	ldr	r3, [pc, #448]	; (800ef94 <ai_platform_network_init+0x21c>)
 800edd2:	4a6d      	ldr	r2, [pc, #436]	; (800ef88 <ai_platform_network_init+0x210>)
 800edd4:	601a      	str	r2, [r3, #0]
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	4b6c      	ldr	r3, [pc, #432]	; (800ef8c <ai_platform_network_init+0x214>)
 800edda:	429a      	cmp	r2, r3
 800eddc:	d11d      	bne.n	800ee1a <ai_platform_network_init+0xa2>
 800edde:	f7ff f983 	bl	800e0e8 <_ai_platform_release_crc>
 800ede2:	2d00      	cmp	r5, #0
 800ede4:	d076      	beq.n	800eed4 <ai_platform_network_init+0x15c>
 800ede6:	4b6c      	ldr	r3, [pc, #432]	; (800ef98 <ai_platform_network_init+0x220>)
 800ede8:	682a      	ldr	r2, [r5, #0]
 800edea:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d030      	beq.n	800ee54 <ai_platform_network_init+0xdc>
 800edf2:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800edf4:	46a9      	mov	r9, r5
 800edf6:	f105 0118 	add.w	r1, r5, #24
 800edfa:	2e00      	cmp	r6, #0
 800edfc:	f000 8095 	beq.w	800ef2a <ai_platform_network_init+0x1b2>
 800ee00:	f1bc 0f00 	cmp.w	ip, #0
 800ee04:	f000 80a4 	beq.w	800ef50 <ai_platform_network_init+0x1d8>
 800ee08:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 800ee0c:	f1b8 0f01 	cmp.w	r8, #1
 800ee10:	d16a      	bne.n	800eee8 <ai_platform_network_init+0x170>
 800ee12:	2700      	movs	r7, #0
 800ee14:	468c      	mov	ip, r1
 800ee16:	83a7      	strh	r7, [r4, #28]
 800ee18:	e028      	b.n	800ee6c <ai_platform_network_init+0xf4>
 800ee1a:	e7fe      	b.n	800ee1a <ai_platform_network_init+0xa2>
 800ee1c:	4a56      	ldr	r2, [pc, #344]	; (800ef78 <ai_platform_network_init+0x200>)
 800ee1e:	6813      	ldr	r3, [r2, #0]
 800ee20:	f023 0301 	bic.w	r3, r3, #1
 800ee24:	6013      	str	r3, [r2, #0]
 800ee26:	f7ff f95d 	bl	800e0e4 <_ai_platform_acquire_crc>
 800ee2a:	4b54      	ldr	r3, [pc, #336]	; (800ef7c <ai_platform_network_init+0x204>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ee32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee36:	d067      	beq.n	800ef08 <ai_platform_network_init+0x190>
 800ee38:	4b51      	ldr	r3, [pc, #324]	; (800ef80 <ai_platform_network_init+0x208>)
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	601a      	str	r2, [r3, #0]
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	2a00      	cmp	r2, #0
 800ee42:	d1fc      	bne.n	800ee3e <ai_platform_network_init+0xc6>
 800ee44:	4b4f      	ldr	r3, [pc, #316]	; (800ef84 <ai_platform_network_init+0x20c>)
 800ee46:	4a50      	ldr	r2, [pc, #320]	; (800ef88 <ai_platform_network_init+0x210>)
 800ee48:	601a      	str	r2, [r3, #0]
 800ee4a:	681a      	ldr	r2, [r3, #0]
 800ee4c:	4b4f      	ldr	r3, [pc, #316]	; (800ef8c <ai_platform_network_init+0x214>)
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d067      	beq.n	800ef22 <ai_platform_network_init+0x1aa>
 800ee52:	e7fe      	b.n	800ee52 <ai_platform_network_init+0xda>
 800ee54:	8be1      	ldrh	r1, [r4, #30]
 800ee56:	88eb      	ldrh	r3, [r5, #6]
 800ee58:	89af      	ldrh	r7, [r5, #12]
 800ee5a:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 800ee5e:	88aa      	ldrh	r2, [r5, #4]
 800ee60:	f8d5 9008 	ldr.w	r9, [r5, #8]
 800ee64:	428b      	cmp	r3, r1
 800ee66:	d13f      	bne.n	800eee8 <ai_platform_network_init+0x170>
 800ee68:	83a2      	strh	r2, [r4, #28]
 800ee6a:	b19b      	cbz	r3, 800ee94 <ai_platform_network_init+0x11c>
 800ee6c:	f04f 0e00 	mov.w	lr, #0
 800ee70:	46f2      	mov	sl, lr
 800ee72:	eb09 060e 	add.w	r6, r9, lr
 800ee76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ee78:	6a25      	ldr	r5, [r4, #32]
 800ee7a:	4475      	add	r5, lr
 800ee7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ee7e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ee82:	e885 0003 	stmia.w	r5, {r0, r1}
 800ee86:	8be3      	ldrh	r3, [r4, #30]
 800ee88:	f10a 0a01 	add.w	sl, sl, #1
 800ee8c:	459a      	cmp	sl, r3
 800ee8e:	f10e 0e18 	add.w	lr, lr, #24
 800ee92:	d3ee      	bcc.n	800ee72 <ai_platform_network_init+0xfa>
 800ee94:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800ee96:	4598      	cmp	r8, r3
 800ee98:	d12e      	bne.n	800eef8 <ai_platform_network_init+0x180>
 800ee9a:	84a7      	strh	r7, [r4, #36]	; 0x24
 800ee9c:	f1b8 0f00 	cmp.w	r8, #0
 800eea0:	d012      	beq.n	800eec8 <ai_platform_network_init+0x150>
 800eea2:	2700      	movs	r7, #0
 800eea4:	46be      	mov	lr, r7
 800eea6:	eb0c 0607 	add.w	r6, ip, r7
 800eeaa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800eeac:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800eeae:	443d      	add	r5, r7
 800eeb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eeb2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800eeb6:	e885 0003 	stmia.w	r5, {r0, r1}
 800eeba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800eebc:	f10e 0e01 	add.w	lr, lr, #1
 800eec0:	459e      	cmp	lr, r3
 800eec2:	f107 0718 	add.w	r7, r7, #24
 800eec6:	d3ee      	bcc.n	800eea6 <ai_platform_network_init+0x12e>
 800eec8:	2303      	movs	r3, #3
 800eeca:	60e3      	str	r3, [r4, #12]
 800eecc:	4620      	mov	r0, r4
 800eece:	f002 fc49 	bl	8011764 <ai_layers_init_all>
 800eed2:	e006      	b.n	800eee2 <ai_platform_network_init+0x16a>
 800eed4:	f104 0010 	add.w	r0, r4, #16
 800eed8:	2211      	movs	r2, #17
 800eeda:	2110      	movs	r1, #16
 800eedc:	462c      	mov	r4, r5
 800eede:	f000 fb77 	bl	800f5d0 <core_set_error>
 800eee2:	4620      	mov	r0, r4
 800eee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee8:	f104 0010 	add.w	r0, r4, #16
 800eeec:	2212      	movs	r2, #18
 800eeee:	2116      	movs	r1, #22
 800eef0:	f000 fb6e 	bl	800f5d0 <core_set_error>
 800eef4:	2400      	movs	r4, #0
 800eef6:	e7f4      	b.n	800eee2 <ai_platform_network_init+0x16a>
 800eef8:	f104 0010 	add.w	r0, r4, #16
 800eefc:	2213      	movs	r2, #19
 800eefe:	2116      	movs	r1, #22
 800ef00:	f000 fb66 	bl	800f5d0 <core_set_error>
 800ef04:	2400      	movs	r4, #0
 800ef06:	e7ec      	b.n	800eee2 <ai_platform_network_init+0x16a>
 800ef08:	4b21      	ldr	r3, [pc, #132]	; (800ef90 <ai_platform_network_init+0x218>)
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	601a      	str	r2, [r3, #0]
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	2a00      	cmp	r2, #0
 800ef12:	d1fc      	bne.n	800ef0e <ai_platform_network_init+0x196>
 800ef14:	4b1f      	ldr	r3, [pc, #124]	; (800ef94 <ai_platform_network_init+0x21c>)
 800ef16:	4a1c      	ldr	r2, [pc, #112]	; (800ef88 <ai_platform_network_init+0x210>)
 800ef18:	601a      	str	r2, [r3, #0]
 800ef1a:	681a      	ldr	r2, [r3, #0]
 800ef1c:	4b1b      	ldr	r3, [pc, #108]	; (800ef8c <ai_platform_network_init+0x214>)
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d115      	bne.n	800ef4e <ai_platform_network_init+0x1d6>
 800ef22:	f7ff f8e1 	bl	800e0e8 <_ai_platform_release_crc>
 800ef26:	2400      	movs	r4, #0
 800ef28:	e7db      	b.n	800eee2 <ai_platform_network_init+0x16a>
 800ef2a:	8c28      	ldrh	r0, [r5, #32]
 800ef2c:	8bea      	ldrh	r2, [r5, #30]
 800ef2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ef30:	fb02 f200 	mul.w	r2, r2, r0
 800ef34:	fb03 f302 	mul.w	r3, r3, r2
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	f43f af61 	beq.w	800ee00 <ai_platform_network_init+0x88>
 800ef3e:	f104 0010 	add.w	r0, r4, #16
 800ef42:	2213      	movs	r2, #19
 800ef44:	2110      	movs	r1, #16
 800ef46:	4634      	mov	r4, r6
 800ef48:	f000 fb42 	bl	800f5d0 <core_set_error>
 800ef4c:	e7c9      	b.n	800eee2 <ai_platform_network_init+0x16a>
 800ef4e:	e7fe      	b.n	800ef4e <ai_platform_network_init+0x1d6>
 800ef50:	8928      	ldrh	r0, [r5, #8]
 800ef52:	88ea      	ldrh	r2, [r5, #6]
 800ef54:	68eb      	ldr	r3, [r5, #12]
 800ef56:	fb02 f200 	mul.w	r2, r2, r0
 800ef5a:	fb03 f302 	mul.w	r3, r3, r2
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	f43f af52 	beq.w	800ee08 <ai_platform_network_init+0x90>
 800ef64:	f104 0010 	add.w	r0, r4, #16
 800ef68:	2212      	movs	r2, #18
 800ef6a:	2110      	movs	r1, #16
 800ef6c:	4664      	mov	r4, ip
 800ef6e:	f000 fb2f 	bl	800f5d0 <core_set_error>
 800ef72:	e7b6      	b.n	800eee2 <ai_platform_network_init+0x16a>
 800ef74:	a1c00100 	.word	0xa1c00100
 800ef78:	e0002000 	.word	0xe0002000
 800ef7c:	e0042000 	.word	0xe0042000
 800ef80:	58024c08 	.word	0x58024c08
 800ef84:	58024c00 	.word	0x58024c00
 800ef88:	f407a5c2 	.word	0xf407a5c2
 800ef8c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ef90:	40023008 	.word	0x40023008
 800ef94:	40023000 	.word	0x40023000
 800ef98:	a1facade 	.word	0xa1facade

0800ef9c <ai_platform_network_post_init>:
 800ef9c:	b538      	push	{r3, r4, r5, lr}
 800ef9e:	b120      	cbz	r0, 800efaa <ai_platform_network_post_init+0xe>
 800efa0:	4b3f      	ldr	r3, [pc, #252]	; (800f0a0 <ai_platform_network_post_init+0x104>)
 800efa2:	6802      	ldr	r2, [r0, #0]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	4604      	mov	r4, r0
 800efa8:	d02d      	beq.n	800f006 <ai_platform_network_post_init+0x6a>
 800efaa:	4a3e      	ldr	r2, [pc, #248]	; (800f0a4 <ai_platform_network_post_init+0x108>)
 800efac:	6813      	ldr	r3, [r2, #0]
 800efae:	f023 0301 	bic.w	r3, r3, #1
 800efb2:	6013      	str	r3, [r2, #0]
 800efb4:	f7ff f896 	bl	800e0e4 <_ai_platform_acquire_crc>
 800efb8:	4b3b      	ldr	r3, [pc, #236]	; (800f0a8 <ai_platform_network_post_init+0x10c>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800efc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efc4:	d00d      	beq.n	800efe2 <ai_platform_network_post_init+0x46>
 800efc6:	4b39      	ldr	r3, [pc, #228]	; (800f0ac <ai_platform_network_post_init+0x110>)
 800efc8:	2201      	movs	r2, #1
 800efca:	601a      	str	r2, [r3, #0]
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	2a00      	cmp	r2, #0
 800efd0:	d1fc      	bne.n	800efcc <ai_platform_network_post_init+0x30>
 800efd2:	4b37      	ldr	r3, [pc, #220]	; (800f0b0 <ai_platform_network_post_init+0x114>)
 800efd4:	4a37      	ldr	r2, [pc, #220]	; (800f0b4 <ai_platform_network_post_init+0x118>)
 800efd6:	601a      	str	r2, [r3, #0]
 800efd8:	681a      	ldr	r2, [r3, #0]
 800efda:	4b37      	ldr	r3, [pc, #220]	; (800f0b8 <ai_platform_network_post_init+0x11c>)
 800efdc:	429a      	cmp	r2, r3
 800efde:	d00d      	beq.n	800effc <ai_platform_network_post_init+0x60>
 800efe0:	e7fe      	b.n	800efe0 <ai_platform_network_post_init+0x44>
 800efe2:	4b36      	ldr	r3, [pc, #216]	; (800f0bc <ai_platform_network_post_init+0x120>)
 800efe4:	2201      	movs	r2, #1
 800efe6:	601a      	str	r2, [r3, #0]
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	2a00      	cmp	r2, #0
 800efec:	d1fc      	bne.n	800efe8 <ai_platform_network_post_init+0x4c>
 800efee:	4b34      	ldr	r3, [pc, #208]	; (800f0c0 <ai_platform_network_post_init+0x124>)
 800eff0:	4a30      	ldr	r2, [pc, #192]	; (800f0b4 <ai_platform_network_post_init+0x118>)
 800eff2:	601a      	str	r2, [r3, #0]
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	4b30      	ldr	r3, [pc, #192]	; (800f0b8 <ai_platform_network_post_init+0x11c>)
 800eff8:	429a      	cmp	r2, r3
 800effa:	d103      	bne.n	800f004 <ai_platform_network_post_init+0x68>
 800effc:	f7ff f874 	bl	800e0e8 <_ai_platform_release_crc>
 800f000:	2000      	movs	r0, #0
 800f002:	bd38      	pop	{r3, r4, r5, pc}
 800f004:	e7fe      	b.n	800f004 <ai_platform_network_post_init+0x68>
 800f006:	4a27      	ldr	r2, [pc, #156]	; (800f0a4 <ai_platform_network_post_init+0x108>)
 800f008:	6813      	ldr	r3, [r2, #0]
 800f00a:	f023 0301 	bic.w	r3, r3, #1
 800f00e:	6013      	str	r3, [r2, #0]
 800f010:	f7ff f868 	bl	800e0e4 <_ai_platform_acquire_crc>
 800f014:	4b24      	ldr	r3, [pc, #144]	; (800f0a8 <ai_platform_network_post_init+0x10c>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f01c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f020:	d00d      	beq.n	800f03e <ai_platform_network_post_init+0xa2>
 800f022:	4b22      	ldr	r3, [pc, #136]	; (800f0ac <ai_platform_network_post_init+0x110>)
 800f024:	2201      	movs	r2, #1
 800f026:	601a      	str	r2, [r3, #0]
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	2a00      	cmp	r2, #0
 800f02c:	d1fc      	bne.n	800f028 <ai_platform_network_post_init+0x8c>
 800f02e:	4b20      	ldr	r3, [pc, #128]	; (800f0b0 <ai_platform_network_post_init+0x114>)
 800f030:	4a20      	ldr	r2, [pc, #128]	; (800f0b4 <ai_platform_network_post_init+0x118>)
 800f032:	601a      	str	r2, [r3, #0]
 800f034:	681a      	ldr	r2, [r3, #0]
 800f036:	4b20      	ldr	r3, [pc, #128]	; (800f0b8 <ai_platform_network_post_init+0x11c>)
 800f038:	429a      	cmp	r2, r3
 800f03a:	d00e      	beq.n	800f05a <ai_platform_network_post_init+0xbe>
 800f03c:	e7fe      	b.n	800f03c <ai_platform_network_post_init+0xa0>
 800f03e:	4b1f      	ldr	r3, [pc, #124]	; (800f0bc <ai_platform_network_post_init+0x120>)
 800f040:	2201      	movs	r2, #1
 800f042:	601a      	str	r2, [r3, #0]
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	2a00      	cmp	r2, #0
 800f048:	d1fc      	bne.n	800f044 <ai_platform_network_post_init+0xa8>
 800f04a:	4b1d      	ldr	r3, [pc, #116]	; (800f0c0 <ai_platform_network_post_init+0x124>)
 800f04c:	4a19      	ldr	r2, [pc, #100]	; (800f0b4 <ai_platform_network_post_init+0x118>)
 800f04e:	601a      	str	r2, [r3, #0]
 800f050:	681a      	ldr	r2, [r3, #0]
 800f052:	4b19      	ldr	r3, [pc, #100]	; (800f0b8 <ai_platform_network_post_init+0x11c>)
 800f054:	429a      	cmp	r2, r3
 800f056:	d000      	beq.n	800f05a <ai_platform_network_post_init+0xbe>
 800f058:	e7fe      	b.n	800f058 <ai_platform_network_post_init+0xbc>
 800f05a:	f7ff f845 	bl	800e0e8 <_ai_platform_release_crc>
 800f05e:	68e3      	ldr	r3, [r4, #12]
 800f060:	f013 0502 	ands.w	r5, r3, #2
 800f064:	d011      	beq.n	800f08a <ai_platform_network_post_init+0xee>
 800f066:	4620      	mov	r0, r4
 800f068:	f002 fb90 	bl	801178c <ai_layers_post_init_all>
 800f06c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f06e:	b1a3      	cbz	r3, 800f09a <ai_platform_network_post_init+0xfe>
 800f070:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800f072:	b195      	cbz	r5, 800f09a <ai_platform_network_post_init+0xfe>
 800f074:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f076:	4629      	mov	r1, r5
 800f078:	2000      	movs	r0, #0
 800f07a:	4798      	blx	r3
 800f07c:	692b      	ldr	r3, [r5, #16]
 800f07e:	42ab      	cmp	r3, r5
 800f080:	d00b      	beq.n	800f09a <ai_platform_network_post_init+0xfe>
 800f082:	461d      	mov	r5, r3
 800f084:	b14b      	cbz	r3, 800f09a <ai_platform_network_post_init+0xfe>
 800f086:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f088:	e7f4      	b.n	800f074 <ai_platform_network_post_init+0xd8>
 800f08a:	f104 0010 	add.w	r0, r4, #16
 800f08e:	2210      	movs	r2, #16
 800f090:	2111      	movs	r1, #17
 800f092:	f000 fa9d 	bl	800f5d0 <core_set_error>
 800f096:	4628      	mov	r0, r5
 800f098:	bd38      	pop	{r3, r4, r5, pc}
 800f09a:	2001      	movs	r0, #1
 800f09c:	bd38      	pop	{r3, r4, r5, pc}
 800f09e:	bf00      	nop
 800f0a0:	a1c00100 	.word	0xa1c00100
 800f0a4:	e0002000 	.word	0xe0002000
 800f0a8:	e0042000 	.word	0xe0042000
 800f0ac:	58024c08 	.word	0x58024c08
 800f0b0:	58024c00 	.word	0x58024c00
 800f0b4:	f407a5c2 	.word	0xf407a5c2
 800f0b8:	b5e8b5cd 	.word	0xb5e8b5cd
 800f0bc:	40023008 	.word	0x40023008
 800f0c0:	40023000 	.word	0x40023000

0800f0c4 <ai_platform_network_process>:
 800f0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c8:	b085      	sub	sp, #20
 800f0ca:	460d      	mov	r5, r1
 800f0cc:	9202      	str	r2, [sp, #8]
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	b120      	cbz	r0, 800f0dc <ai_platform_network_process+0x18>
 800f0d2:	4b7b      	ldr	r3, [pc, #492]	; (800f2c0 <ai_platform_network_process+0x1fc>)
 800f0d4:	6802      	ldr	r2, [r0, #0]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	bf18      	it	ne
 800f0da:	2400      	movne	r4, #0
 800f0dc:	4a79      	ldr	r2, [pc, #484]	; (800f2c4 <ai_platform_network_process+0x200>)
 800f0de:	6813      	ldr	r3, [r2, #0]
 800f0e0:	f023 0301 	bic.w	r3, r3, #1
 800f0e4:	6013      	str	r3, [r2, #0]
 800f0e6:	f7fe fffd 	bl	800e0e4 <_ai_platform_acquire_crc>
 800f0ea:	4b77      	ldr	r3, [pc, #476]	; (800f2c8 <ai_platform_network_process+0x204>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f0f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f0f6:	d00d      	beq.n	800f114 <ai_platform_network_process+0x50>
 800f0f8:	4b74      	ldr	r3, [pc, #464]	; (800f2cc <ai_platform_network_process+0x208>)
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	601a      	str	r2, [r3, #0]
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	2a00      	cmp	r2, #0
 800f102:	d1fc      	bne.n	800f0fe <ai_platform_network_process+0x3a>
 800f104:	4b72      	ldr	r3, [pc, #456]	; (800f2d0 <ai_platform_network_process+0x20c>)
 800f106:	4a73      	ldr	r2, [pc, #460]	; (800f2d4 <ai_platform_network_process+0x210>)
 800f108:	601a      	str	r2, [r3, #0]
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	4b72      	ldr	r3, [pc, #456]	; (800f2d8 <ai_platform_network_process+0x214>)
 800f10e:	429a      	cmp	r2, r3
 800f110:	d00e      	beq.n	800f130 <ai_platform_network_process+0x6c>
 800f112:	e7fe      	b.n	800f112 <ai_platform_network_process+0x4e>
 800f114:	4b71      	ldr	r3, [pc, #452]	; (800f2dc <ai_platform_network_process+0x218>)
 800f116:	2201      	movs	r2, #1
 800f118:	601a      	str	r2, [r3, #0]
 800f11a:	681a      	ldr	r2, [r3, #0]
 800f11c:	2a00      	cmp	r2, #0
 800f11e:	d1fc      	bne.n	800f11a <ai_platform_network_process+0x56>
 800f120:	4b6f      	ldr	r3, [pc, #444]	; (800f2e0 <ai_platform_network_process+0x21c>)
 800f122:	4a6c      	ldr	r2, [pc, #432]	; (800f2d4 <ai_platform_network_process+0x210>)
 800f124:	601a      	str	r2, [r3, #0]
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	4b6b      	ldr	r3, [pc, #428]	; (800f2d8 <ai_platform_network_process+0x214>)
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d000      	beq.n	800f130 <ai_platform_network_process+0x6c>
 800f12e:	e7fe      	b.n	800f12e <ai_platform_network_process+0x6a>
 800f130:	f7fe ffda 	bl	800e0e8 <_ai_platform_release_crc>
 800f134:	2c00      	cmp	r4, #0
 800f136:	f000 808e 	beq.w	800f256 <ai_platform_network_process+0x192>
 800f13a:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800f13c:	2f00      	cmp	r7, #0
 800f13e:	f040 823c 	bne.w	800f5ba <ai_platform_network_process+0x4f6>
 800f142:	68e3      	ldr	r3, [r4, #12]
 800f144:	f003 0303 	and.w	r3, r3, #3
 800f148:	f04f 0b00 	mov.w	fp, #0
 800f14c:	2b03      	cmp	r3, #3
 800f14e:	f8c4 b014 	str.w	fp, [r4, #20]
 800f152:	f040 822b 	bne.w	800f5ac <ai_platform_network_process+0x4e8>
 800f156:	2d00      	cmp	r5, #0
 800f158:	f000 80a8 	beq.w	800f2ac <ai_platform_network_process+0x1e8>
 800f15c:	2f00      	cmp	r7, #0
 800f15e:	f000 80a5 	beq.w	800f2ac <ai_platform_network_process+0x1e8>
 800f162:	883b      	ldrh	r3, [r7, #0]
 800f164:	2b00      	cmp	r3, #0
 800f166:	f000 80a1 	beq.w	800f2ac <ai_platform_network_process+0x1e8>
 800f16a:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 800f16e:	9401      	str	r4, [sp, #4]
 800f170:	46d8      	mov	r8, fp
 800f172:	4598      	cmp	r8, r3
 800f174:	f080 80b6 	bcs.w	800f2e4 <ai_platform_network_process+0x220>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	f000 80b2 	beq.w	800f2e4 <ai_platform_network_process+0x220>
 800f180:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800f184:	2e00      	cmp	r6, #0
 800f186:	f000 80ad 	beq.w	800f2e4 <ai_platform_network_process+0x220>
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	9303      	str	r3, [sp, #12]
 800f190:	ea4f 1408 	mov.w	r4, r8, lsl #4
 800f194:	eb13 0a04 	adds.w	sl, r3, r4
 800f198:	f000 8087 	beq.w	800f2aa <ai_platform_network_process+0x1e6>
 800f19c:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800f1a0:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800f1a4:	69b0      	ldr	r0, [r6, #24]
 800f1a6:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800f1aa:	6841      	ldr	r1, [r0, #4]
 800f1ac:	fb0b f30e 	mul.w	r3, fp, lr
 800f1b0:	fb0c f303 	mul.w	r3, ip, r3
 800f1b4:	4299      	cmp	r1, r3
 800f1b6:	d36e      	bcc.n	800f296 <ai_platform_network_process+0x1d2>
 800f1b8:	68f3      	ldr	r3, [r6, #12]
 800f1ba:	68da      	ldr	r2, [r3, #12]
 800f1bc:	455a      	cmp	r2, fp
 800f1be:	d16a      	bne.n	800f296 <ai_platform_network_process+0x1d2>
 800f1c0:	689a      	ldr	r2, [r3, #8]
 800f1c2:	4572      	cmp	r2, lr
 800f1c4:	d167      	bne.n	800f296 <ai_platform_network_process+0x1d2>
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	459c      	cmp	ip, r3
 800f1ca:	d164      	bne.n	800f296 <ai_platform_network_process+0x1d2>
 800f1cc:	6800      	ldr	r0, [r0, #0]
 800f1ce:	f002 fbb3 	bl	8011938 <ai_array_get_byte_size>
 800f1d2:	68f2      	ldr	r2, [r6, #12]
 800f1d4:	6973      	ldr	r3, [r6, #20]
 800f1d6:	68d2      	ldr	r2, [r2, #12]
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	fb03 f302 	mul.w	r3, r3, r2
 800f1de:	4298      	cmp	r0, r3
 800f1e0:	d359      	bcc.n	800f296 <ai_platform_network_process+0x1d2>
 800f1e2:	69b3      	ldr	r3, [r6, #24]
 800f1e4:	6818      	ldr	r0, [r3, #0]
 800f1e6:	f002 fb4f 	bl	8011888 <ai_array_to_buffer_fmt>
 800f1ea:	682b      	ldr	r3, [r5, #0]
 800f1ec:	4043      	eors	r3, r0
 800f1ee:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800f1f2:	d146      	bne.n	800f282 <ai_platform_network_process+0x1be>
 800f1f4:	692b      	ldr	r3, [r5, #16]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d03a      	beq.n	800f270 <ai_platform_network_process+0x1ac>
 800f1fa:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800f1fe:	f1bb 0f00 	cmp.w	fp, #0
 800f202:	d02d      	beq.n	800f260 <ai_platform_network_process+0x19c>
 800f204:	68f2      	ldr	r2, [r6, #12]
 800f206:	6973      	ldr	r3, [r6, #20]
 800f208:	68d1      	ldr	r1, [r2, #12]
 800f20a:	68da      	ldr	r2, [r3, #12]
 800f20c:	fb02 f201 	mul.w	r2, r2, r1
 800f210:	f8ca 2008 	str.w	r2, [sl, #8]
 800f214:	88ab      	ldrh	r3, [r5, #4]
 800f216:	fb02 f203 	mul.w	r2, r2, r3
 800f21a:	f8ca 200c 	str.w	r2, [sl, #12]
 800f21e:	6929      	ldr	r1, [r5, #16]
 800f220:	f8ca 1004 	str.w	r1, [sl, #4]
 800f224:	692b      	ldr	r3, [r5, #16]
 800f226:	4413      	add	r3, r2
 800f228:	9a03      	ldr	r2, [sp, #12]
 800f22a:	5113      	str	r3, [r2, r4]
 800f22c:	69b0      	ldr	r0, [r6, #24]
 800f22e:	6803      	ldr	r3, [r0, #0]
 800f230:	45d9      	cmp	r9, fp
 800f232:	bf38      	it	cc
 800f234:	46d9      	movcc	r9, fp
 800f236:	009a      	lsls	r2, r3, #2
 800f238:	d408      	bmi.n	800f24c <ai_platform_network_process+0x188>
 800f23a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800f23e:	1a9b      	subs	r3, r3, r2
 800f240:	4419      	add	r1, r3
 800f242:	6081      	str	r1, [r0, #8]
 800f244:	69b3      	ldr	r3, [r6, #24]
 800f246:	f8da 2004 	ldr.w	r2, [sl, #4]
 800f24a:	60da      	str	r2, [r3, #12]
 800f24c:	883b      	ldrh	r3, [r7, #0]
 800f24e:	f108 0801 	add.w	r8, r8, #1
 800f252:	3518      	adds	r5, #24
 800f254:	e78d      	b.n	800f172 <ai_platform_network_process+0xae>
 800f256:	46a3      	mov	fp, r4
 800f258:	4658      	mov	r0, fp
 800f25a:	b005      	add	sp, #20
 800f25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f260:	9c01      	ldr	r4, [sp, #4]
 800f262:	2221      	movs	r2, #33	; 0x21
 800f264:	f104 0010 	add.w	r0, r4, #16
 800f268:	2112      	movs	r1, #18
 800f26a:	f000 f9b1 	bl	800f5d0 <core_set_error>
 800f26e:	e7f3      	b.n	800f258 <ai_platform_network_process+0x194>
 800f270:	9c01      	ldr	r4, [sp, #4]
 800f272:	2217      	movs	r2, #23
 800f274:	f104 0010 	add.w	r0, r4, #16
 800f278:	2112      	movs	r1, #18
 800f27a:	469b      	mov	fp, r3
 800f27c:	f000 f9a8 	bl	800f5d0 <core_set_error>
 800f280:	e7ea      	b.n	800f258 <ai_platform_network_process+0x194>
 800f282:	9c01      	ldr	r4, [sp, #4]
 800f284:	2219      	movs	r2, #25
 800f286:	f104 0010 	add.w	r0, r4, #16
 800f28a:	2112      	movs	r1, #18
 800f28c:	f000 f9a0 	bl	800f5d0 <core_set_error>
 800f290:	f04f 0b00 	mov.w	fp, #0
 800f294:	e7e0      	b.n	800f258 <ai_platform_network_process+0x194>
 800f296:	9c01      	ldr	r4, [sp, #4]
 800f298:	2218      	movs	r2, #24
 800f29a:	f104 0010 	add.w	r0, r4, #16
 800f29e:	2112      	movs	r1, #18
 800f2a0:	f000 f996 	bl	800f5d0 <core_set_error>
 800f2a4:	f04f 0b00 	mov.w	fp, #0
 800f2a8:	e7d6      	b.n	800f258 <ai_platform_network_process+0x194>
 800f2aa:	9c01      	ldr	r4, [sp, #4]
 800f2ac:	f104 0010 	add.w	r0, r4, #16
 800f2b0:	2217      	movs	r2, #23
 800f2b2:	2112      	movs	r1, #18
 800f2b4:	f000 f98c 	bl	800f5d0 <core_set_error>
 800f2b8:	f04f 0b00 	mov.w	fp, #0
 800f2bc:	e7cc      	b.n	800f258 <ai_platform_network_process+0x194>
 800f2be:	bf00      	nop
 800f2c0:	a1c00100 	.word	0xa1c00100
 800f2c4:	e0002000 	.word	0xe0002000
 800f2c8:	e0042000 	.word	0xe0042000
 800f2cc:	58024c08 	.word	0x58024c08
 800f2d0:	58024c00 	.word	0x58024c00
 800f2d4:	f407a5c2 	.word	0xf407a5c2
 800f2d8:	b5e8b5cd 	.word	0xb5e8b5cd
 800f2dc:	40023008 	.word	0x40023008
 800f2e0:	40023000 	.word	0x40023000
 800f2e4:	9c01      	ldr	r4, [sp, #4]
 800f2e6:	9a02      	ldr	r2, [sp, #8]
 800f2e8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800f2ea:	2a00      	cmp	r2, #0
 800f2ec:	f000 80a9 	beq.w	800f442 <ai_platform_network_process+0x37e>
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	f240 809b 	bls.w	800f42c <ai_platform_network_process+0x368>
 800f2f6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800f2fa:	f11a 0f0c 	cmn.w	sl, #12
 800f2fe:	f000 8095 	beq.w	800f42c <ai_platform_network_process+0x368>
 800f302:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800f306:	2b00      	cmp	r3, #0
 800f308:	f000 8090 	beq.w	800f42c <ai_platform_network_process+0x368>
 800f30c:	9d02      	ldr	r5, [sp, #8]
 800f30e:	9401      	str	r4, [sp, #4]
 800f310:	f04f 0800 	mov.w	r8, #0
 800f314:	4598      	cmp	r8, r3
 800f316:	f080 8092 	bcs.w	800f43e <ai_platform_network_process+0x37a>
 800f31a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	f000 808d 	beq.w	800f43e <ai_platform_network_process+0x37a>
 800f324:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800f328:	2e00      	cmp	r6, #0
 800f32a:	f000 8088 	beq.w	800f43e <ai_platform_network_process+0x37a>
 800f32e:	f8da 3014 	ldr.w	r3, [sl, #20]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	9302      	str	r3, [sp, #8]
 800f336:	ea4f 1408 	mov.w	r4, r8, lsl #4
 800f33a:	191f      	adds	r7, r3, r4
 800f33c:	f000 812d 	beq.w	800f59a <ai_platform_network_process+0x4d6>
 800f340:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800f344:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800f348:	69b0      	ldr	r0, [r6, #24]
 800f34a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800f34e:	6841      	ldr	r1, [r0, #4]
 800f350:	fb0b f30e 	mul.w	r3, fp, lr
 800f354:	fb0c f303 	mul.w	r3, ip, r3
 800f358:	4299      	cmp	r1, r3
 800f35a:	d366      	bcc.n	800f42a <ai_platform_network_process+0x366>
 800f35c:	68f3      	ldr	r3, [r6, #12]
 800f35e:	68da      	ldr	r2, [r3, #12]
 800f360:	455a      	cmp	r2, fp
 800f362:	d162      	bne.n	800f42a <ai_platform_network_process+0x366>
 800f364:	689a      	ldr	r2, [r3, #8]
 800f366:	4572      	cmp	r2, lr
 800f368:	d15f      	bne.n	800f42a <ai_platform_network_process+0x366>
 800f36a:	685b      	ldr	r3, [r3, #4]
 800f36c:	459c      	cmp	ip, r3
 800f36e:	d15c      	bne.n	800f42a <ai_platform_network_process+0x366>
 800f370:	6800      	ldr	r0, [r0, #0]
 800f372:	f002 fae1 	bl	8011938 <ai_array_get_byte_size>
 800f376:	68f2      	ldr	r2, [r6, #12]
 800f378:	6973      	ldr	r3, [r6, #20]
 800f37a:	68d2      	ldr	r2, [r2, #12]
 800f37c:	68db      	ldr	r3, [r3, #12]
 800f37e:	fb03 f302 	mul.w	r3, r3, r2
 800f382:	4298      	cmp	r0, r3
 800f384:	d351      	bcc.n	800f42a <ai_platform_network_process+0x366>
 800f386:	69b3      	ldr	r3, [r6, #24]
 800f388:	6818      	ldr	r0, [r3, #0]
 800f38a:	f002 fa7d 	bl	8011888 <ai_array_to_buffer_fmt>
 800f38e:	682b      	ldr	r3, [r5, #0]
 800f390:	4043      	eors	r3, r0
 800f392:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800f396:	d13e      	bne.n	800f416 <ai_platform_network_process+0x352>
 800f398:	692b      	ldr	r3, [r5, #16]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d032      	beq.n	800f404 <ai_platform_network_process+0x340>
 800f39e:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800f3a2:	f1bb 0f00 	cmp.w	fp, #0
 800f3a6:	d025      	beq.n	800f3f4 <ai_platform_network_process+0x330>
 800f3a8:	68f2      	ldr	r2, [r6, #12]
 800f3aa:	6973      	ldr	r3, [r6, #20]
 800f3ac:	68d1      	ldr	r1, [r2, #12]
 800f3ae:	68da      	ldr	r2, [r3, #12]
 800f3b0:	fb02 f201 	mul.w	r2, r2, r1
 800f3b4:	60ba      	str	r2, [r7, #8]
 800f3b6:	88ab      	ldrh	r3, [r5, #4]
 800f3b8:	fb02 f203 	mul.w	r2, r2, r3
 800f3bc:	60fa      	str	r2, [r7, #12]
 800f3be:	6929      	ldr	r1, [r5, #16]
 800f3c0:	6079      	str	r1, [r7, #4]
 800f3c2:	692b      	ldr	r3, [r5, #16]
 800f3c4:	4413      	add	r3, r2
 800f3c6:	9a02      	ldr	r2, [sp, #8]
 800f3c8:	5113      	str	r3, [r2, r4]
 800f3ca:	69b0      	ldr	r0, [r6, #24]
 800f3cc:	6803      	ldr	r3, [r0, #0]
 800f3ce:	45d9      	cmp	r9, fp
 800f3d0:	bf38      	it	cc
 800f3d2:	46d9      	movcc	r9, fp
 800f3d4:	009b      	lsls	r3, r3, #2
 800f3d6:	d407      	bmi.n	800f3e8 <ai_platform_network_process+0x324>
 800f3d8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800f3dc:	1a9b      	subs	r3, r3, r2
 800f3de:	4419      	add	r1, r3
 800f3e0:	6081      	str	r1, [r0, #8]
 800f3e2:	69b3      	ldr	r3, [r6, #24]
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	60da      	str	r2, [r3, #12]
 800f3e8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800f3ec:	f108 0801 	add.w	r8, r8, #1
 800f3f0:	3518      	adds	r5, #24
 800f3f2:	e78f      	b.n	800f314 <ai_platform_network_process+0x250>
 800f3f4:	9c01      	ldr	r4, [sp, #4]
 800f3f6:	2221      	movs	r2, #33	; 0x21
 800f3f8:	f104 0010 	add.w	r0, r4, #16
 800f3fc:	2113      	movs	r1, #19
 800f3fe:	f000 f8e7 	bl	800f5d0 <core_set_error>
 800f402:	e729      	b.n	800f258 <ai_platform_network_process+0x194>
 800f404:	9c01      	ldr	r4, [sp, #4]
 800f406:	2217      	movs	r2, #23
 800f408:	f104 0010 	add.w	r0, r4, #16
 800f40c:	2113      	movs	r1, #19
 800f40e:	469b      	mov	fp, r3
 800f410:	f000 f8de 	bl	800f5d0 <core_set_error>
 800f414:	e720      	b.n	800f258 <ai_platform_network_process+0x194>
 800f416:	9c01      	ldr	r4, [sp, #4]
 800f418:	2219      	movs	r2, #25
 800f41a:	f104 0010 	add.w	r0, r4, #16
 800f41e:	2113      	movs	r1, #19
 800f420:	f000 f8d6 	bl	800f5d0 <core_set_error>
 800f424:	f04f 0b00 	mov.w	fp, #0
 800f428:	e716      	b.n	800f258 <ai_platform_network_process+0x194>
 800f42a:	9c01      	ldr	r4, [sp, #4]
 800f42c:	f104 0010 	add.w	r0, r4, #16
 800f430:	2218      	movs	r2, #24
 800f432:	2113      	movs	r1, #19
 800f434:	f000 f8cc 	bl	800f5d0 <core_set_error>
 800f438:	f04f 0b00 	mov.w	fp, #0
 800f43c:	e70c      	b.n	800f258 <ai_platform_network_process+0x194>
 800f43e:	9c01      	ldr	r4, [sp, #4]
 800f440:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800f442:	f8a4 9014 	strh.w	r9, [r4, #20]
 800f446:	2b00      	cmp	r3, #0
 800f448:	f000 80a4 	beq.w	800f594 <ai_platform_network_process+0x4d0>
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f450:	f240 809e 	bls.w	800f590 <ai_platform_network_process+0x4cc>
 800f454:	f105 070c 	add.w	r7, r5, #12
 800f458:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 800f45c:	8aa3      	ldrh	r3, [r4, #20]
 800f45e:	455b      	cmp	r3, fp
 800f460:	f67f aefa 	bls.w	800f258 <ai_platform_network_process+0x194>
 800f464:	9401      	str	r4, [sp, #4]
 800f466:	2d00      	cmp	r5, #0
 800f468:	d036      	beq.n	800f4d8 <ai_platform_network_process+0x414>
 800f46a:	882b      	ldrh	r3, [r5, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d033      	beq.n	800f4d8 <ai_platform_network_process+0x414>
 800f470:	686b      	ldr	r3, [r5, #4]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d030      	beq.n	800f4d8 <ai_platform_network_process+0x414>
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	f04f 0800 	mov.w	r8, #0
 800f47c:	b9db      	cbnz	r3, 800f4b6 <ai_platform_network_process+0x3f2>
 800f47e:	e02b      	b.n	800f4d8 <ai_platform_network_process+0x414>
 800f480:	68d4      	ldr	r4, [r2, #12]
 800f482:	1b00      	subs	r0, r0, r4
 800f484:	4401      	add	r1, r0
 800f486:	6091      	str	r1, [r2, #8]
 800f488:	699b      	ldr	r3, [r3, #24]
 800f48a:	6872      	ldr	r2, [r6, #4]
 800f48c:	60da      	str	r2, [r3, #12]
 800f48e:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800f492:	f85a 2009 	ldr.w	r2, [sl, r9]
 800f496:	440b      	add	r3, r1
 800f498:	4293      	cmp	r3, r2
 800f49a:	bf24      	itt	cs
 800f49c:	68f3      	ldrcs	r3, [r6, #12]
 800f49e:	1ad3      	subcs	r3, r2, r3
 800f4a0:	6073      	str	r3, [r6, #4]
 800f4a2:	882b      	ldrh	r3, [r5, #0]
 800f4a4:	f108 0801 	add.w	r8, r8, #1
 800f4a8:	4598      	cmp	r8, r3
 800f4aa:	d215      	bcs.n	800f4d8 <ai_platform_network_process+0x414>
 800f4ac:	686b      	ldr	r3, [r5, #4]
 800f4ae:	b19b      	cbz	r3, 800f4d8 <ai_platform_network_process+0x414>
 800f4b0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800f4b4:	b183      	cbz	r3, 800f4d8 <ai_platform_network_process+0x414>
 800f4b6:	68a9      	ldr	r1, [r5, #8]
 800f4b8:	699a      	ldr	r2, [r3, #24]
 800f4ba:	f8d1 a000 	ldr.w	sl, [r1]
 800f4be:	6814      	ldr	r4, [r2, #0]
 800f4c0:	6890      	ldr	r0, [r2, #8]
 800f4c2:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800f4c6:	eb0a 0609 	add.w	r6, sl, r9
 800f4ca:	00a4      	lsls	r4, r4, #2
 800f4cc:	6871      	ldr	r1, [r6, #4]
 800f4ce:	d5d7      	bpl.n	800f480 <ai_platform_network_process+0x3bc>
 800f4d0:	68b2      	ldr	r2, [r6, #8]
 800f4d2:	f002 fb7f 	bl	8011bd4 <memcpy>
 800f4d6:	e7da      	b.n	800f48e <ai_platform_network_process+0x3ca>
 800f4d8:	9801      	ldr	r0, [sp, #4]
 800f4da:	f002 f96f 	bl	80117bc <ai_layers_forward_all>
 800f4de:	2f00      	cmp	r7, #0
 800f4e0:	d047      	beq.n	800f572 <ai_platform_network_process+0x4ae>
 800f4e2:	883b      	ldrh	r3, [r7, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d044      	beq.n	800f572 <ai_platform_network_process+0x4ae>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d041      	beq.n	800f572 <ai_platform_network_process+0x4ae>
 800f4ee:	6818      	ldr	r0, [r3, #0]
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	d03e      	beq.n	800f572 <ai_platform_network_process+0x4ae>
 800f4f4:	f04f 0800 	mov.w	r8, #0
 800f4f8:	e019      	b.n	800f52e <ai_platform_network_process+0x46a>
 800f4fa:	f85a 2009 	ldr.w	r2, [sl, r9]
 800f4fe:	4293      	cmp	r3, r2
 800f500:	bf24      	itt	cs
 800f502:	68f3      	ldrcs	r3, [r6, #12]
 800f504:	1ad3      	subcs	r3, r2, r3
 800f506:	6073      	str	r3, [r6, #4]
 800f508:	6981      	ldr	r1, [r0, #24]
 800f50a:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800f50e:	1b12      	subs	r2, r2, r4
 800f510:	4413      	add	r3, r2
 800f512:	608b      	str	r3, [r1, #8]
 800f514:	6983      	ldr	r3, [r0, #24]
 800f516:	6872      	ldr	r2, [r6, #4]
 800f518:	60da      	str	r2, [r3, #12]
 800f51a:	883b      	ldrh	r3, [r7, #0]
 800f51c:	f108 0801 	add.w	r8, r8, #1
 800f520:	4598      	cmp	r8, r3
 800f522:	d226      	bcs.n	800f572 <ai_platform_network_process+0x4ae>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	b323      	cbz	r3, 800f572 <ai_platform_network_process+0x4ae>
 800f528:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f52c:	b308      	cbz	r0, 800f572 <ai_platform_network_process+0x4ae>
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	6981      	ldr	r1, [r0, #24]
 800f532:	f8d3 a000 	ldr.w	sl, [r3]
 800f536:	680c      	ldr	r4, [r1, #0]
 800f538:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800f53c:	eb0a 0609 	add.w	r6, sl, r9
 800f540:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800f544:	00a4      	lsls	r4, r4, #2
 800f546:	eb0c 0302 	add.w	r3, ip, r2
 800f54a:	d5d6      	bpl.n	800f4fa <ai_platform_network_process+0x436>
 800f54c:	6889      	ldr	r1, [r1, #8]
 800f54e:	4660      	mov	r0, ip
 800f550:	f002 fb40 	bl	8011bd4 <memcpy>
 800f554:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800f558:	f85a 2009 	ldr.w	r2, [sl, r9]
 800f55c:	440b      	add	r3, r1
 800f55e:	4293      	cmp	r3, r2
 800f560:	bf24      	itt	cs
 800f562:	68f3      	ldrcs	r3, [r6, #12]
 800f564:	1ad3      	subcs	r3, r2, r3
 800f566:	6073      	str	r3, [r6, #4]
 800f568:	883b      	ldrh	r3, [r7, #0]
 800f56a:	f108 0801 	add.w	r8, r8, #1
 800f56e:	4598      	cmp	r8, r3
 800f570:	d3d8      	bcc.n	800f524 <ai_platform_network_process+0x460>
 800f572:	9b01      	ldr	r3, [sp, #4]
 800f574:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 800f578:	461a      	mov	r2, r3
 800f57a:	f10b 0b01 	add.w	fp, fp, #1
 800f57e:	8a9b      	ldrh	r3, [r3, #20]
 800f580:	fa1f fb8b 	uxth.w	fp, fp
 800f584:	455b      	cmp	r3, fp
 800f586:	f8a2 b016 	strh.w	fp, [r2, #22]
 800f58a:	f63f af6c 	bhi.w	800f466 <ai_platform_network_process+0x3a2>
 800f58e:	e663      	b.n	800f258 <ai_platform_network_process+0x194>
 800f590:	2700      	movs	r7, #0
 800f592:	e761      	b.n	800f458 <ai_platform_network_process+0x394>
 800f594:	461d      	mov	r5, r3
 800f596:	461f      	mov	r7, r3
 800f598:	e75e      	b.n	800f458 <ai_platform_network_process+0x394>
 800f59a:	9c01      	ldr	r4, [sp, #4]
 800f59c:	2217      	movs	r2, #23
 800f59e:	f104 0010 	add.w	r0, r4, #16
 800f5a2:	2113      	movs	r1, #19
 800f5a4:	f000 f814 	bl	800f5d0 <core_set_error>
 800f5a8:	46bb      	mov	fp, r7
 800f5aa:	e655      	b.n	800f258 <ai_platform_network_process+0x194>
 800f5ac:	f104 0010 	add.w	r0, r4, #16
 800f5b0:	2230      	movs	r2, #48	; 0x30
 800f5b2:	2111      	movs	r1, #17
 800f5b4:	f000 f80c 	bl	800f5d0 <core_set_error>
 800f5b8:	e64e      	b.n	800f258 <ai_platform_network_process+0x194>
 800f5ba:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800f5bc:	e5c1      	b.n	800f142 <ai_platform_network_process+0x7e>
 800f5be:	bf00      	nop

0800f5c0 <core_init>:
 800f5c0:	2001      	movs	r0, #1
 800f5c2:	4770      	bx	lr

0800f5c4 <core_get_error>:
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	6800      	ldr	r0, [r0, #0]
 800f5ca:	601a      	str	r2, [r3, #0]
 800f5cc:	4770      	bx	lr
 800f5ce:	bf00      	nop

0800f5d0 <core_set_error>:
 800f5d0:	7803      	ldrb	r3, [r0, #0]
 800f5d2:	b933      	cbnz	r3, 800f5e2 <core_set_error+0x12>
 800f5d4:	7001      	strb	r1, [r0, #0]
 800f5d6:	6803      	ldr	r3, [r0, #0]
 800f5d8:	f362 231f 	bfi	r3, r2, #8, #24
 800f5dc:	6003      	str	r3, [r0, #0]
 800f5de:	2001      	movs	r0, #1
 800f5e0:	4770      	bx	lr
 800f5e2:	2000      	movs	r0, #0
 800f5e4:	4770      	bx	lr
 800f5e6:	bf00      	nop

0800f5e8 <func_dummy>:
 800f5e8:	4770      	bx	lr
 800f5ea:	bf00      	nop

0800f5ec <ai_dict8_dot_array_f32>:
 800f5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5f0:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f5f4:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 800f5f8:	f000 80c0 	beq.w	800f77c <ai_dict8_dot_array_f32+0x190>
 800f5fc:	f101 0408 	add.w	r4, r1, #8
 800f600:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800f604:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800f784 <ai_dict8_dot_array_f32+0x198>
 800f608:	eb04 0e09 	add.w	lr, r4, r9
 800f60c:	f103 0520 	add.w	r5, r3, #32
 800f610:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 800f614:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800f618:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 800f61c:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 800f620:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 800f624:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800f628:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800f62c:	ed55 3a04 	vldr	s7, [r5, #-16]
 800f630:	ed55 4a03 	vldr	s9, [r5, #-12]
 800f634:	ed55 5a02 	vldr	s11, [r5, #-8]
 800f638:	ed55 6a01 	vldr	s13, [r5, #-4]
 800f63c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f640:	edd6 7a00 	vldr	s15, [r6]
 800f644:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800f648:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800f64c:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f650:	ed9a 3a00 	vldr	s6, [sl]
 800f654:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 800f658:	eee3 7a05 	vfma.f32	s15, s6, s10
 800f65c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f660:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f664:	ed97 3a00 	vldr	s6, [r7]
 800f668:	ed96 5a00 	vldr	s10, [r6]
 800f66c:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800f670:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 800f674:	eee3 7a04 	vfma.f32	s15, s6, s8
 800f678:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800f67c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f680:	ed9a 3a00 	vldr	s6, [sl]
 800f684:	ed96 4a00 	vldr	s8, [r6]
 800f688:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800f68c:	eee5 7a06 	vfma.f32	s15, s10, s12
 800f690:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f694:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f698:	ed97 5a00 	vldr	s10, [r7]
 800f69c:	ed96 6a00 	vldr	s12, [r6]
 800f6a0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f6a4:	3408      	adds	r4, #8
 800f6a6:	45a6      	cmp	lr, r4
 800f6a8:	f105 0520 	add.w	r5, r5, #32
 800f6ac:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f6b0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f6b4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f6b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f6bc:	d1a8      	bne.n	800f610 <ai_dict8_dot_array_f32+0x24>
 800f6be:	4449      	add	r1, r9
 800f6c0:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800f6c4:	f01c 0c07 	ands.w	ip, ip, #7
 800f6c8:	d050      	beq.n	800f76c <ai_dict8_dot_array_f32+0x180>
 800f6ca:	780c      	ldrb	r4, [r1, #0]
 800f6cc:	edd3 6a00 	vldr	s13, [r3]
 800f6d0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f6d4:	edd4 7a00 	vldr	s15, [r4]
 800f6d8:	f1bc 0f01 	cmp.w	ip, #1
 800f6dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f6e0:	d044      	beq.n	800f76c <ai_dict8_dot_array_f32+0x180>
 800f6e2:	784c      	ldrb	r4, [r1, #1]
 800f6e4:	edd3 6a01 	vldr	s13, [r3, #4]
 800f6e8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f6ec:	edd4 7a00 	vldr	s15, [r4]
 800f6f0:	f1bc 0f02 	cmp.w	ip, #2
 800f6f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f6f8:	d038      	beq.n	800f76c <ai_dict8_dot_array_f32+0x180>
 800f6fa:	788c      	ldrb	r4, [r1, #2]
 800f6fc:	edd3 6a02 	vldr	s13, [r3, #8]
 800f700:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f704:	edd4 7a00 	vldr	s15, [r4]
 800f708:	f1bc 0f03 	cmp.w	ip, #3
 800f70c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f710:	d02c      	beq.n	800f76c <ai_dict8_dot_array_f32+0x180>
 800f712:	78cc      	ldrb	r4, [r1, #3]
 800f714:	edd3 6a03 	vldr	s13, [r3, #12]
 800f718:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f71c:	edd4 7a00 	vldr	s15, [r4]
 800f720:	f1bc 0f04 	cmp.w	ip, #4
 800f724:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f728:	d020      	beq.n	800f76c <ai_dict8_dot_array_f32+0x180>
 800f72a:	790c      	ldrb	r4, [r1, #4]
 800f72c:	edd3 6a04 	vldr	s13, [r3, #16]
 800f730:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f734:	edd4 7a00 	vldr	s15, [r4]
 800f738:	f1bc 0f05 	cmp.w	ip, #5
 800f73c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f740:	d014      	beq.n	800f76c <ai_dict8_dot_array_f32+0x180>
 800f742:	794c      	ldrb	r4, [r1, #5]
 800f744:	edd3 6a05 	vldr	s13, [r3, #20]
 800f748:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f74c:	edd4 7a00 	vldr	s15, [r4]
 800f750:	f1bc 0f06 	cmp.w	ip, #6
 800f754:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f758:	d008      	beq.n	800f76c <ai_dict8_dot_array_f32+0x180>
 800f75a:	7989      	ldrb	r1, [r1, #6]
 800f75c:	edd3 7a06 	vldr	s15, [r3, #24]
 800f760:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f764:	edd2 6a00 	vldr	s13, [r2]
 800f768:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f76c:	edd0 7a00 	vldr	s15, [r0]
 800f770:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f774:	ed80 7a00 	vstr	s14, [r0]
 800f778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f77c:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800f784 <ai_dict8_dot_array_f32+0x198>
 800f780:	e7a0      	b.n	800f6c4 <ai_dict8_dot_array_f32+0xd8>
 800f782:	bf00      	nop
 800f784:	00000000 	.word	0x00000000

0800f788 <ai_dict4_dot_array_f32>:
 800f788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f78c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f78e:	f027 0c01 	bic.w	ip, r7, #1
 800f792:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800f796:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800f79a:	f000 80ae 	beq.w	800f8fa <ai_dict4_dot_array_f32+0x172>
 800f79e:	1d0d      	adds	r5, r1, #4
 800f7a0:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800f7a4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800f900 <ai_dict4_dot_array_f32+0x178>
 800f7a8:	eb05 0e09 	add.w	lr, r5, r9
 800f7ac:	f103 0420 	add.w	r4, r3, #32
 800f7b0:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800f7b4:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800f7b8:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 800f7bc:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 800f7c0:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800f7c4:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800f7c8:	ed14 5a04 	vldr	s10, [r4, #-16]
 800f7cc:	ed54 5a03 	vldr	s11, [r4, #-12]
 800f7d0:	ed14 6a02 	vldr	s12, [r4, #-8]
 800f7d4:	ed54 6a01 	vldr	s13, [r4, #-4]
 800f7d8:	f006 0a0f 	and.w	sl, r6, #15
 800f7dc:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800f7e0:	edda 7a00 	vldr	s15, [sl]
 800f7e4:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 800f7e8:	0936      	lsrs	r6, r6, #4
 800f7ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f7ee:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f7f2:	ed96 3a00 	vldr	s6, [r6]
 800f7f6:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800f7fa:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f7fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f802:	f00b 0b0f 	and.w	fp, fp, #15
 800f806:	edd6 3a00 	vldr	s7, [r6]
 800f80a:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800f80e:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f812:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800f816:	3504      	adds	r5, #4
 800f818:	ed9b 4a00 	vldr	s8, [fp]
 800f81c:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800f820:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f824:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800f828:	f00a 0a0f 	and.w	sl, sl, #15
 800f82c:	eddb 4a00 	vldr	s9, [fp]
 800f830:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f834:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800f838:	45ae      	cmp	lr, r5
 800f83a:	ed9a 5a00 	vldr	s10, [sl]
 800f83e:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800f842:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f846:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800f84a:	f006 060f 	and.w	r6, r6, #15
 800f84e:	edda 5a00 	vldr	s11, [sl]
 800f852:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f856:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f85a:	f104 0420 	add.w	r4, r4, #32
 800f85e:	ed96 6a00 	vldr	s12, [r6]
 800f862:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f866:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f86a:	d1a1      	bne.n	800f7b0 <ai_dict4_dot_array_f32+0x28>
 800f86c:	4449      	add	r1, r9
 800f86e:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800f872:	459c      	cmp	ip, r3
 800f874:	d92d      	bls.n	800f8d2 <ai_dict4_dot_array_f32+0x14a>
 800f876:	f10c 0c07 	add.w	ip, ip, #7
 800f87a:	f103 0508 	add.w	r5, r3, #8
 800f87e:	ebac 0c05 	sub.w	ip, ip, r5
 800f882:	f02c 0407 	bic.w	r4, ip, #7
 800f886:	f103 0810 	add.w	r8, r3, #16
 800f88a:	44a0      	add	r8, r4
 800f88c:	f101 3eff 	add.w	lr, r1, #4294967295
 800f890:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800f894:	ed15 6a01 	vldr	s12, [r5, #-4]
 800f898:	ed55 6a02 	vldr	s13, [r5, #-8]
 800f89c:	f004 060f 	and.w	r6, r4, #15
 800f8a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f8a4:	0924      	lsrs	r4, r4, #4
 800f8a6:	edd6 7a00 	vldr	s15, [r6]
 800f8aa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f8ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f8b2:	ed94 6a00 	vldr	s12, [r4]
 800f8b6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f8ba:	3508      	adds	r5, #8
 800f8bc:	45a8      	cmp	r8, r5
 800f8be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f8c2:	d1e5      	bne.n	800f890 <ai_dict4_dot_array_f32+0x108>
 800f8c4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800f8c8:	f10c 0c01 	add.w	ip, ip, #1
 800f8cc:	4461      	add	r1, ip
 800f8ce:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800f8d2:	07fc      	lsls	r4, r7, #31
 800f8d4:	d509      	bpl.n	800f8ea <ai_dict4_dot_array_f32+0x162>
 800f8d6:	7809      	ldrb	r1, [r1, #0]
 800f8d8:	edd3 7a00 	vldr	s15, [r3]
 800f8dc:	090b      	lsrs	r3, r1, #4
 800f8de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f8e2:	edd2 6a00 	vldr	s13, [r2]
 800f8e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f8ea:	edd0 7a00 	vldr	s15, [r0]
 800f8ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f8f2:	ed80 7a00 	vstr	s14, [r0]
 800f8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8fa:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800f900 <ai_dict4_dot_array_f32+0x178>
 800f8fe:	e7b8      	b.n	800f872 <ai_dict4_dot_array_f32+0xea>
 800f900:	00000000 	.word	0x00000000

0800f904 <ai_dict_decompress_f32>:
 800f904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f908:	9f08      	ldr	r7, [sp, #32]
 800f90a:	2b04      	cmp	r3, #4
 800f90c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800f910:	d00e      	beq.n	800f930 <ai_dict_decompress_f32+0x2c>
 800f912:	2b08      	cmp	r3, #8
 800f914:	d10a      	bne.n	800f92c <ai_dict_decompress_f32+0x28>
 800f916:	42b8      	cmp	r0, r7
 800f918:	d208      	bcs.n	800f92c <ai_dict_decompress_f32+0x28>
 800f91a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f91e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f840 3b04 	str.w	r3, [r0], #4
 800f928:	4287      	cmp	r7, r0
 800f92a:	d8f6      	bhi.n	800f91a <ai_dict_decompress_f32+0x16>
 800f92c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f930:	9b07      	ldr	r3, [sp, #28]
 800f932:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800f936:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800f93a:	f10c 38ff 	add.w	r8, ip, #4294967295
 800f93e:	f003 0e01 	and.w	lr, r3, #1
 800f942:	42b8      	cmp	r0, r7
 800f944:	d2f2      	bcs.n	800f92c <ai_dict_decompress_f32+0x28>
 800f946:	f1bc 0f00 	cmp.w	ip, #0
 800f94a:	d01a      	beq.n	800f982 <ai_dict_decompress_f32+0x7e>
 800f94c:	f100 0508 	add.w	r5, r0, #8
 800f950:	1e4c      	subs	r4, r1, #1
 800f952:	eb01 0608 	add.w	r6, r1, r8
 800f956:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f95a:	091b      	lsrs	r3, r3, #4
 800f95c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f960:	42a6      	cmp	r6, r4
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	f845 3c08 	str.w	r3, [r5, #-8]
 800f968:	7823      	ldrb	r3, [r4, #0]
 800f96a:	f003 030f 	and.w	r3, r3, #15
 800f96e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f972:	f105 0508 	add.w	r5, r5, #8
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	f845 3c0c 	str.w	r3, [r5, #-12]
 800f97c:	d1eb      	bne.n	800f956 <ai_dict_decompress_f32+0x52>
 800f97e:	4461      	add	r1, ip
 800f980:	4448      	add	r0, r9
 800f982:	f1be 0f00 	cmp.w	lr, #0
 800f986:	d103      	bne.n	800f990 <ai_dict_decompress_f32+0x8c>
 800f988:	4287      	cmp	r7, r0
 800f98a:	d8dc      	bhi.n	800f946 <ai_dict_decompress_f32+0x42>
 800f98c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f990:	780b      	ldrb	r3, [r1, #0]
 800f992:	091b      	lsrs	r3, r3, #4
 800f994:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f998:	3101      	adds	r1, #1
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	6003      	str	r3, [r0, #0]
 800f99e:	3004      	adds	r0, #4
 800f9a0:	e7cf      	b.n	800f942 <ai_dict_decompress_f32+0x3e>
 800f9a2:	bf00      	nop

0800f9a4 <forward_conv2d_nl_pool>:
 800f9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a8:	ed2d 8b10 	vpush	{d8-d15}
 800f9ac:	b0e1      	sub	sp, #388	; 0x184
 800f9ae:	6983      	ldr	r3, [r0, #24]
 800f9b0:	881e      	ldrh	r6, [r3, #0]
 800f9b2:	af0a      	add	r7, sp, #40	; 0x28
 800f9b4:	2e00      	cmp	r6, #0
 800f9b6:	f000 859b 	beq.w	80104f0 <forward_conv2d_nl_pool+0xb4c>
 800f9ba:	6859      	ldr	r1, [r3, #4]
 800f9bc:	684a      	ldr	r2, [r1, #4]
 800f9be:	2a00      	cmp	r2, #0
 800f9c0:	f000 8593 	beq.w	80104ea <forward_conv2d_nl_pool+0xb46>
 800f9c4:	f8d2 c000 	ldr.w	ip, [r2]
 800f9c8:	2e01      	cmp	r6, #1
 800f9ca:	f240 858b 	bls.w	80104e4 <forward_conv2d_nl_pool+0xb40>
 800f9ce:	690a      	ldr	r2, [r1, #16]
 800f9d0:	2a00      	cmp	r2, #0
 800f9d2:	f000 8582 	beq.w	80104da <forward_conv2d_nl_pool+0xb36>
 800f9d6:	f8d2 9000 	ldr.w	r9, [r2]
 800f9da:	2e02      	cmp	r6, #2
 800f9dc:	f000 8582 	beq.w	80104e4 <forward_conv2d_nl_pool+0xb40>
 800f9e0:	69cd      	ldr	r5, [r1, #28]
 800f9e2:	2d00      	cmp	r5, #0
 800f9e4:	f000 8571 	beq.w	80104ca <forward_conv2d_nl_pool+0xb26>
 800f9e8:	682a      	ldr	r2, [r5, #0]
 800f9ea:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800f9ee:	f111 0218 	adds.w	r2, r1, #24
 800f9f2:	d004      	beq.n	800f9fe <forward_conv2d_nl_pool+0x5a>
 800f9f4:	8b0a      	ldrh	r2, [r1, #24]
 800f9f6:	2a01      	cmp	r2, #1
 800f9f8:	f240 857c 	bls.w	80104f4 <forward_conv2d_nl_pool+0xb50>
 800f9fc:	686a      	ldr	r2, [r5, #4]
 800f9fe:	68a9      	ldr	r1, [r5, #8]
 800fa00:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800fa02:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800fa06:	f8dc b018 	ldr.w	fp, [ip, #24]
 800fa0a:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 800fa0e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800fa12:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800fa16:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800fa1a:	f8db 4008 	ldr.w	r4, [fp, #8]
 800fa1e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800fa22:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800fa26:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800fa2a:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 800fa2e:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800fa32:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800fa36:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa3a:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800fa3e:	f8de 4004 	ldr.w	r4, [lr, #4]
 800fa42:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800fa46:	f8de 400c 	ldr.w	r4, [lr, #12]
 800fa4a:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800fa4e:	f8de 4008 	ldr.w	r4, [lr, #8]
 800fa52:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 800fa56:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800fa5a:	6824      	ldr	r4, [r4, #0]
 800fa5c:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 800fa60:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800fa64:	6864      	ldr	r4, [r4, #4]
 800fa66:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800fa6a:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800fa6e:	68a5      	ldr	r5, [r4, #8]
 800fa70:	f8da 4004 	ldr.w	r4, [sl, #4]
 800fa74:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800fa78:	f8da 4008 	ldr.w	r4, [sl, #8]
 800fa7c:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800fa80:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800fa82:	6824      	ldr	r4, [r4, #0]
 800fa84:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 800fa88:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800fa8a:	6864      	ldr	r4, [r4, #4]
 800fa8c:	643c      	str	r4, [r7, #64]	; 0x40
 800fa8e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800fa92:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800fa96:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fa98:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800fa9c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800fa9e:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800faa2:	69c4      	ldr	r4, [r0, #28]
 800faa4:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 800faa8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800faaa:	64bc      	str	r4, [r7, #72]	; 0x48
 800faac:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800faae:	647c      	str	r4, [r7, #68]	; 0x44
 800fab0:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800fab2:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800fab6:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 800faba:	2a00      	cmp	r2, #0
 800fabc:	f000 84f8 	beq.w	80104b0 <forward_conv2d_nl_pool+0xb0c>
 800fac0:	6992      	ldr	r2, [r2, #24]
 800fac2:	6892      	ldr	r2, [r2, #8]
 800fac4:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800fac8:	4680      	mov	r8, r0
 800faca:	6a00      	ldr	r0, [r0, #32]
 800facc:	2900      	cmp	r1, #0
 800face:	f000 84e4 	beq.w	801049a <forward_conv2d_nl_pool+0xaf6>
 800fad2:	698a      	ldr	r2, [r1, #24]
 800fad4:	2a00      	cmp	r2, #0
 800fad6:	f000 8533 	beq.w	8010540 <forward_conv2d_nl_pool+0xb9c>
 800fada:	694b      	ldr	r3, [r1, #20]
 800fadc:	689b      	ldr	r3, [r3, #8]
 800fade:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800fae2:	e9d2 0100 	ldrd	r0, r1, [r2]
 800fae6:	6893      	ldr	r3, [r2, #8]
 800fae8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800faec:	f001 ff24 	bl	8011938 <ai_array_get_byte_size>
 800faf0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800faf4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800faf8:	881e      	ldrh	r6, [r3, #0]
 800fafa:	f8d2 c018 	ldr.w	ip, [r2, #24]
 800fafe:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800fb02:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 800fb06:	63f9      	str	r1, [r7, #60]	; 0x3c
 800fb08:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800fb0c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800fb10:	fa11 f585 	uxtah	r5, r1, r5
 800fb14:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800fb18:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800fb1c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 800fb20:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800fb24:	3901      	subs	r1, #1
 800fb26:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800fb2a:	eb05 0e00 	add.w	lr, r5, r0
 800fb2e:	fa1f f28a 	uxth.w	r2, sl
 800fb32:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 800fb36:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800fb3a:	f8dc 4000 	ldr.w	r4, [ip]
 800fb3e:	f8dc 1000 	ldr.w	r1, [ip]
 800fb42:	3a01      	subs	r2, #1
 800fb44:	fb00 5002 	mla	r0, r0, r2, r5
 800fb48:	fa1f f28b 	uxth.w	r2, fp
 800fb4c:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 800fb50:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800fb54:	f3c1 5141 	ubfx	r1, r1, #21, #2
 800fb58:	1e50      	subs	r0, r2, #1
 800fb5a:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800fb5e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800fb62:	fa44 f101 	asr.w	r1, r4, r1
 800fb66:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800fb6a:	f8dc 4000 	ldr.w	r4, [ip]
 800fb6e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800fb72:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fb76:	f3c4 4543 	ubfx	r5, r4, #17, #4
 800fb7a:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800fb7e:	ebae 0202 	sub.w	r2, lr, r2
 800fb82:	fa1f fe81 	uxth.w	lr, r1
 800fb86:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800fb8a:	fbb2 f2f1 	udiv	r2, r2, r1
 800fb8e:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800fb92:	3c01      	subs	r4, #1
 800fb94:	fb04 1100 	mla	r1, r4, r0, r1
 800fb98:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800fb9c:	1c51      	adds	r1, r2, #1
 800fb9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800fba2:	487c      	ldr	r0, [pc, #496]	; (800fd94 <forward_conv2d_nl_pool+0x3f0>)
 800fba4:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800fba8:	4611      	mov	r1, r2
 800fbaa:	2a00      	cmp	r2, #0
 800fbac:	bf08      	it	eq
 800fbae:	4601      	moveq	r1, r0
 800fbb0:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 800fbb4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800fbb8:	2d04      	cmp	r5, #4
 800fbba:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800fbbe:	f000 849e 	beq.w	80104fe <forward_conv2d_nl_pool+0xb5a>
 800fbc2:	2d08      	cmp	r5, #8
 800fbc4:	f000 849b 	beq.w	80104fe <forward_conv2d_nl_pool+0xb5a>
 800fbc8:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800fbcc:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800fbd0:	2e03      	cmp	r6, #3
 800fbd2:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 800fbd6:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800fbda:	f240 8483 	bls.w	80104e4 <forward_conv2d_nl_pool+0xb40>
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	f000 8489 	beq.w	80104fa <forward_conv2d_nl_pool+0xb56>
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800fbee:	68da      	ldr	r2, [r3, #12]
 800fbf0:	699b      	ldr	r3, [r3, #24]
 800fbf2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800fbf6:	6899      	ldr	r1, [r3, #8]
 800fbf8:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800fbfc:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800fc00:	6896      	ldr	r6, [r2, #8]
 800fc02:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 800fc06:	4249      	negs	r1, r1
 800fc08:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	f000 82dd 	beq.w	80101cc <forward_conv2d_nl_pool+0x828>
 800fc12:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fc16:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800fc1a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800fc1e:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 800fc22:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 800fd98 <forward_conv2d_nl_pool+0x3f4>
 800fc26:	fb03 f200 	mul.w	r2, r3, r0
 800fc2a:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800fc2e:	008c      	lsls	r4, r1, #2
 800fc30:	fb04 f000 	mul.w	r0, r4, r0
 800fc34:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 800fc38:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800fc3c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 800fc40:	fb01 fc02 	mul.w	ip, r1, r2
 800fc44:	00a2      	lsls	r2, r4, #2
 800fc46:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800fc4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fc4e:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 800fc52:	00ab      	lsls	r3, r5, #2
 800fc54:	4694      	mov	ip, r2
 800fc56:	fb0c f204 	mul.w	r2, ip, r4
 800fc5a:	fb04 f303 	mul.w	r3, r4, r3
 800fc5e:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800fc62:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800fc66:	00a4      	lsls	r4, r4, #2
 800fc68:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800fc6c:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800fc70:	f04f 0c00 	mov.w	ip, #0
 800fc74:	fa0f f58b 	sxth.w	r5, fp
 800fc78:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 800fc7c:	46a4      	mov	ip, r4
 800fc7e:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 800fc82:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 800fc86:	fa0f f58a 	sxth.w	r5, sl
 800fc8a:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 800fc8e:	fb0c fc04 	mul.w	ip, ip, r4
 800fc92:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 800fc96:	fb06 fc03 	mul.w	ip, r6, r3
 800fc9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fc9e:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 800fca2:	4240      	negs	r0, r0
 800fca4:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 800fca8:	469c      	mov	ip, r3
 800fcaa:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 800fcae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fcb2:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 800fcb6:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 800fcba:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 800fcbe:	fb00 f303 	mul.w	r3, r0, r3
 800fcc2:	460d      	mov	r5, r1
 800fcc4:	fb0c fc04 	mul.w	ip, ip, r4
 800fcc8:	627b      	str	r3, [r7, #36]	; 0x24
 800fcca:	fb04 f305 	mul.w	r3, r4, r5
 800fcce:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 800fcd2:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 800fcd6:	623b      	str	r3, [r7, #32]
 800fcd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fcdc:	46a6      	mov	lr, r4
 800fcde:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 800fce2:	fb05 f503 	mul.w	r5, r5, r3
 800fce6:	667d      	str	r5, [r7, #100]	; 0x64
 800fce8:	4625      	mov	r5, r4
 800fcea:	fb05 f503 	mul.w	r5, r5, r3
 800fcee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800fcf2:	66bd      	str	r5, [r7, #104]	; 0x68
 800fcf4:	fb00 f101 	mul.w	r1, r0, r1
 800fcf8:	fb03 f306 	mul.w	r3, r3, r6
 800fcfc:	657b      	str	r3, [r7, #84]	; 0x54
 800fcfe:	008b      	lsls	r3, r1, #2
 800fd00:	633b      	str	r3, [r7, #48]	; 0x30
 800fd02:	0093      	lsls	r3, r2, #2
 800fd04:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd06:	0083      	lsls	r3, r0, #2
 800fd08:	61bb      	str	r3, [r7, #24]
 800fd0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fd0e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800fd12:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800fd16:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800fd1a:	2400      	movs	r4, #0
 800fd1c:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd1e:	4603      	mov	r3, r0
 800fd20:	fb03 f301 	mul.w	r3, r3, r1
 800fd24:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 800fd28:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800fd2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800fd30:	00d1      	lsls	r1, r2, #3
 800fd32:	0113      	lsls	r3, r2, #4
 800fd34:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800fd38:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800fd3c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800fd40:	fb00 f004 	mul.w	r0, r0, r4
 800fd44:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800fd48:	66f8      	str	r0, [r7, #108]	; 0x6c
 800fd4a:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800fd4e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800fd52:	469a      	mov	sl, r3
 800fd54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	f340 81d0 	ble.w	80100fe <forward_conv2d_nl_pool+0x75a>
 800fd5e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800fd62:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800fd66:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800fd6a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800fd6e:	2900      	cmp	r1, #0
 800fd70:	441a      	add	r2, r3
 800fd72:	bfb4      	ite	lt
 800fd74:	2100      	movlt	r1, #0
 800fd76:	2300      	movge	r3, #0
 800fd78:	4282      	cmp	r2, r0
 800fd7a:	bf28      	it	cs
 800fd7c:	4602      	movcs	r2, r0
 800fd7e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800fd82:	2801      	cmp	r0, #1
 800fd84:	f000 83f6 	beq.w	8010574 <forward_conv2d_nl_pool+0xbd0>
 800fd88:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800fd8c:	4281      	cmp	r1, r0
 800fd8e:	f000 822a 	beq.w	80101e6 <forward_conv2d_nl_pool+0x842>
 800fd92:	e003      	b.n	800fd9c <forward_conv2d_nl_pool+0x3f8>
 800fd94:	0800f5e9 	.word	0x0800f5e9
 800fd98:	00000000 	.word	0x00000000
 800fd9c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800fda0:	2900      	cmp	r1, #0
 800fda2:	f000 819f 	beq.w	80100e4 <forward_conv2d_nl_pool+0x740>
 800fda6:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800fdaa:	fb93 f1f0 	sdiv	r1, r3, r0
 800fdae:	fb00 3111 	mls	r1, r0, r1, r3
 800fdb2:	1a41      	subs	r1, r0, r1
 800fdb4:	1ad2      	subs	r2, r2, r3
 800fdb6:	fb91 f5f0 	sdiv	r5, r1, r0
 800fdba:	fb00 1515 	mls	r5, r0, r5, r1
 800fdbe:	1b52      	subs	r2, r2, r5
 800fdc0:	4601      	mov	r1, r0
 800fdc2:	4402      	add	r2, r0
 800fdc4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800fdc8:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 800fdcc:	4604      	mov	r4, r0
 800fdce:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800fdd2:	fbb4 f4f0 	udiv	r4, r4, r0
 800fdd6:	6a38      	ldr	r0, [r7, #32]
 800fdd8:	3a01      	subs	r2, #1
 800fdda:	fb92 f8f1 	sdiv	r8, r2, r1
 800fdde:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800fde2:	eba0 0c04 	sub.w	ip, r0, r4
 800fde6:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800fdea:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800fdee:	4614      	mov	r4, r2
 800fdf0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800fdf4:	fbb4 f2f2 	udiv	r2, r4, r2
 800fdf8:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800fdfc:	663a      	str	r2, [r7, #96]	; 0x60
 800fdfe:	441d      	add	r5, r3
 800fe00:	fb0e f000 	mul.w	r0, lr, r0
 800fe04:	440b      	add	r3, r1
 800fe06:	eba6 0608 	sub.w	r6, r6, r8
 800fe0a:	fb04 f505 	mul.w	r5, r4, r5
 800fe0e:	3b01      	subs	r3, #1
 800fe10:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800fe14:	fb93 f3f4 	sdiv	r3, r3, r4
 800fe18:	fb00 f406 	mul.w	r4, r0, r6
 800fe1c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800fe20:	677d      	str	r5, [r7, #116]	; 0x74
 800fe22:	0091      	lsls	r1, r2, #2
 800fe24:	fb00 f003 	mul.w	r0, r0, r3
 800fe28:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800fe2c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800fe2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fe32:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800fe36:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800fe3a:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800fe3e:	1ac3      	subs	r3, r0, r3
 800fe40:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800fe44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fe48:	008b      	lsls	r3, r1, #2
 800fe4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe4c:	00d3      	lsls	r3, r2, #3
 800fe4e:	61fb      	str	r3, [r7, #28]
 800fe50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fe54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fe58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fe5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fe60:	2300      	movs	r3, #0
 800fe62:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 800fe66:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800fe6a:	67bb      	str	r3, [r7, #120]	; 0x78
 800fe6c:	46c2      	mov	sl, r8
 800fe6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fe72:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800fe76:	eb03 0c02 	add.w	ip, r3, r2
 800fe7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	f2c0 811c 	blt.w	80100bc <forward_conv2d_nl_pool+0x718>
 800fe84:	2000      	movs	r0, #0
 800fe86:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 800fe88:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 800fe8c:	4605      	mov	r5, r0
 800fe8e:	4606      	mov	r6, r0
 800fe90:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fe94:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800fe98:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800fe9c:	4413      	add	r3, r2
 800fe9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800fea2:	440a      	add	r2, r1
 800fea4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800fea8:	428b      	cmp	r3, r1
 800feaa:	bf94      	ite	ls
 800feac:	ebc6 0303 	rsbls	r3, r6, r3
 800feb0:	ebc6 0301 	rsbhi	r3, r6, r1
 800feb4:	4415      	add	r5, r2
 800feb6:	1a1b      	subs	r3, r3, r0
 800feb8:	00a4      	lsls	r4, r4, #2
 800feba:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800febe:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 800fec2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800fec6:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 800fec8:	4602      	mov	r2, r0
 800feca:	2800      	cmp	r0, #0
 800fecc:	bf08      	it	eq
 800fece:	4662      	moveq	r2, ip
 800fed0:	f108 31ff 	add.w	r1, r8, #4294967295
 800fed4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800fed8:	fb91 f1f0 	sdiv	r1, r1, r0
 800fedc:	4429      	add	r1, r5
 800fede:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 800fee2:	fb0e 5501 	mla	r5, lr, r1, r5
 800fee6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800feea:	4403      	add	r3, r0
 800feec:	fb01 6104 	mla	r1, r1, r4, r6
 800fef0:	3b01      	subs	r3, #1
 800fef2:	fb93 f6f0 	sdiv	r6, r3, r0
 800fef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef8:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800fefc:	fb06 3110 	mls	r1, r6, r0, r3
 800ff00:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800ff04:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800ff08:	4562      	cmp	r2, ip
 800ff0a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ff0e:	bf08      	it	eq
 800ff10:	eeb0 6a48 	vmoveq.f32	s12, s16
 800ff14:	1b9b      	subs	r3, r3, r6
 800ff16:	2800      	cmp	r0, #0
 800ff18:	d070      	beq.n	800fffc <forward_conv2d_nl_pool+0x658>
 800ff1a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800ff1e:	fb0e f803 	mul.w	r8, lr, r3
 800ff22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff24:	fb00 fb01 	mul.w	fp, r0, r1
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d067      	beq.n	800fffc <forward_conv2d_nl_pool+0x658>
 800ff2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff30:	18d3      	adds	r3, r2, r3
 800ff32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ff36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ff3a:	1a9b      	subs	r3, r3, r2
 800ff3c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff3e:	2300      	movs	r3, #0
 800ff40:	673b      	str	r3, [r7, #112]	; 0x70
 800ff42:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800ff46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff48:	4413      	add	r3, r2
 800ff4a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff4c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800ff50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff52:	4413      	add	r3, r2
 800ff54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800ff58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ff5c:	ecf3 7a01 	vldmia	r3!, {s15}
 800ff60:	f1ba 0f00 	cmp.w	sl, #0
 800ff64:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800ff68:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ff6c:	f340 80a4 	ble.w	80100b8 <forward_conv2d_nl_pool+0x714>
 800ff70:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800ff74:	f04f 0c00 	mov.w	ip, #0
 800ff78:	2e00      	cmp	r6, #0
 800ff7a:	dd19      	ble.n	800ffb0 <forward_conv2d_nl_pool+0x60c>
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	eb00 040e 	add.w	r4, r0, lr
 800ff82:	4284      	cmp	r4, r0
 800ff84:	d910      	bls.n	800ffa8 <forward_conv2d_nl_pool+0x604>
 800ff86:	4603      	mov	r3, r0
 800ff88:	462a      	mov	r2, r5
 800ff8a:	ecb3 7a01 	vldmia	r3!, {s14}
 800ff8e:	ecf2 6a01 	vldmia	r2!, {s13}
 800ff92:	429c      	cmp	r4, r3
 800ff94:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ff98:	d8f7      	bhi.n	800ff8a <forward_conv2d_nl_pool+0x5e6>
 800ff9a:	43c3      	mvns	r3, r0
 800ff9c:	441c      	add	r4, r3
 800ff9e:	f024 0403 	bic.w	r4, r4, #3
 800ffa2:	3404      	adds	r4, #4
 800ffa4:	4425      	add	r5, r4
 800ffa6:	4420      	add	r0, r4
 800ffa8:	3101      	adds	r1, #1
 800ffaa:	428e      	cmp	r6, r1
 800ffac:	4448      	add	r0, r9
 800ffae:	d1e6      	bne.n	800ff7e <forward_conv2d_nl_pool+0x5da>
 800ffb0:	f10c 0c01 	add.w	ip, ip, #1
 800ffb4:	45e2      	cmp	sl, ip
 800ffb6:	4458      	add	r0, fp
 800ffb8:	4445      	add	r5, r8
 800ffba:	d1dd      	bne.n	800ff78 <forward_conv2d_nl_pool+0x5d4>
 800ffbc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800ffc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ffc4:	441d      	add	r5, r3
 800ffc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ffca:	ece3 7a01 	vstmia	r3!, {s15}
 800ffce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800ffd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	d1be      	bne.n	800ff58 <forward_conv2d_nl_pool+0x5b4>
 800ffda:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800ffde:	69f9      	ldr	r1, [r7, #28]
 800ffe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ffe2:	4472      	add	r2, lr
 800ffe4:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800ffe8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ffea:	1a52      	subs	r2, r2, r1
 800ffec:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800fff0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800fff4:	3301      	adds	r3, #1
 800fff6:	429a      	cmp	r2, r3
 800fff8:	673b      	str	r3, [r7, #112]	; 0x70
 800fffa:	d1a2      	bne.n	800ff42 <forward_conv2d_nl_pool+0x59e>
 800fffc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8010000:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010006:	4608      	mov	r0, r1
 8010008:	4410      	add	r0, r2
 801000a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801000e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8010012:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8010016:	4401      	add	r1, r0
 8010018:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 801001c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010020:	1a8a      	subs	r2, r1, r2
 8010022:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8010026:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801002a:	3301      	adds	r3, #1
 801002c:	429a      	cmp	r2, r3
 801002e:	67bb      	str	r3, [r7, #120]	; 0x78
 8010030:	f47f af1d 	bne.w	800fe6e <forward_conv2d_nl_pool+0x4ca>
 8010034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010038:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801003c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8010040:	699b      	ldr	r3, [r3, #24]
 8010042:	2a00      	cmp	r2, #0
 8010044:	f000 8210 	beq.w	8010468 <forward_conv2d_nl_pool+0xac4>
 8010048:	2400      	movs	r4, #0
 801004a:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 801004e:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 8010052:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 8010056:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 801005a:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 801005e:	609e      	str	r6, [r3, #8]
 8010060:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8010064:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8010068:	462b      	mov	r3, r5
 801006a:	4641      	mov	r1, r8
 801006c:	4640      	mov	r0, r8
 801006e:	47a0      	blx	r4
 8010070:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8010074:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8010078:	6859      	ldr	r1, [r3, #4]
 801007a:	68da      	ldr	r2, [r3, #12]
 801007c:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8010080:	4405      	add	r5, r0
 8010082:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8010086:	0089      	lsls	r1, r1, #2
 8010088:	4406      	add	r6, r0
 801008a:	eba5 0c09 	sub.w	ip, r5, r9
 801008e:	1850      	adds	r0, r2, r1
 8010090:	45a4      	cmp	ip, r4
 8010092:	bfa8      	it	ge
 8010094:	464d      	movge	r5, r9
 8010096:	4286      	cmp	r6, r0
 8010098:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 801009c:	bf28      	it	cs
 801009e:	1a76      	subcs	r6, r6, r1
 80100a0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80100a4:	3001      	adds	r0, #1
 80100a6:	4281      	cmp	r1, r0
 80100a8:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 80100ac:	d1d7      	bne.n	801005e <forward_conv2d_nl_pool+0x6ba>
 80100ae:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 80100b2:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 80100b6:	e019      	b.n	80100ec <forward_conv2d_nl_pool+0x748>
 80100b8:	461a      	mov	r2, r3
 80100ba:	e781      	b.n	800ffc0 <forward_conv2d_nl_pool+0x61c>
 80100bc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80100c0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80100c4:	fb90 f3f2 	sdiv	r3, r0, r2
 80100c8:	fb02 0313 	mls	r3, r2, r3, r0
 80100cc:	1ad3      	subs	r3, r2, r3
 80100ce:	4605      	mov	r5, r0
 80100d0:	fb93 f0f2 	sdiv	r0, r3, r2
 80100d4:	fb02 3010 	mls	r0, r2, r0, r3
 80100d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80100da:	462e      	mov	r6, r5
 80100dc:	18c4      	adds	r4, r0, r3
 80100de:	eb02 0805 	add.w	r8, r2, r5
 80100e2:	e6d5      	b.n	800fe90 <forward_conv2d_nl_pool+0x4ec>
 80100e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80100e8:	699b      	ldr	r3, [r3, #24]
 80100ea:	68da      	ldr	r2, [r3, #12]
 80100ec:	609a      	str	r2, [r3, #8]
 80100ee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80100f2:	3301      	adds	r3, #1
 80100f4:	b21b      	sxth	r3, r3
 80100f6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80100fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80100fe:	3b01      	subs	r3, #1
 8010100:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010104:	f100 83bf 	bmi.w	8010886 <forward_conv2d_nl_pool+0xee2>
 8010108:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801010c:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8010110:	42a3      	cmp	r3, r4
 8010112:	f200 839d 	bhi.w	8010850 <forward_conv2d_nl_pool+0xeac>
 8010116:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801011a:	b29b      	uxth	r3, r3
 801011c:	6990      	ldr	r0, [r2, #24]
 801011e:	9301      	str	r3, [sp, #4]
 8010120:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010124:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 8010128:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 801012c:	1a9b      	subs	r3, r3, r2
 801012e:	fa1f f188 	uxth.w	r1, r8
 8010132:	b29a      	uxth	r2, r3
 8010134:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010138:	9308      	str	r3, [sp, #32]
 801013a:	9105      	str	r1, [sp, #20]
 801013c:	2601      	movs	r6, #1
 801013e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010142:	9607      	str	r6, [sp, #28]
 8010144:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8010148:	9506      	str	r5, [sp, #24]
 801014a:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 801014e:	9304      	str	r3, [sp, #16]
 8010150:	1a64      	subs	r4, r4, r1
 8010152:	b2b1      	uxth	r1, r6
 8010154:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8010158:	9300      	str	r3, [sp, #0]
 801015a:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801015e:	b224      	sxth	r4, r4
 8010160:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8010164:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8010168:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 801016c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 801016e:	47a0      	blx	r4
 8010170:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8010174:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8010178:	688a      	ldr	r2, [r1, #8]
 801017a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801017c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8010180:	fa0f f388 	sxth.w	r3, r8
 8010184:	1af3      	subs	r3, r6, r3
 8010186:	4422      	add	r2, r4
 8010188:	462e      	mov	r6, r5
 801018a:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 801018e:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 8010192:	608a      	str	r2, [r1, #8]
 8010194:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010198:	4426      	add	r6, r4
 801019a:	b21b      	sxth	r3, r3
 801019c:	1b2c      	subs	r4, r5, r4
 801019e:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 80101a2:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 80101a4:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80101a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80101ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80101b0:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 80101b4:	3001      	adds	r0, #1
 80101b6:	442c      	add	r4, r5
 80101b8:	4283      	cmp	r3, r0
 80101ba:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 80101be:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 80101c2:	f63f adc7 	bhi.w	800fd54 <forward_conv2d_nl_pool+0x3b0>
 80101c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80101ca:	699b      	ldr	r3, [r3, #24]
 80101cc:	68da      	ldr	r2, [r3, #12]
 80101ce:	609a      	str	r2, [r3, #8]
 80101d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80101d4:	68d3      	ldr	r3, [r2, #12]
 80101d6:	6093      	str	r3, [r2, #8]
 80101d8:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80101dc:	46bd      	mov	sp, r7
 80101de:	ecbd 8b10 	vpop	{d8-d15}
 80101e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80101e8:	2901      	cmp	r1, #1
 80101ea:	f47f add7 	bne.w	800fd9c <forward_conv2d_nl_pool+0x3f8>
 80101ee:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80101f2:	2900      	cmp	r1, #0
 80101f4:	f43f af76 	beq.w	80100e4 <forward_conv2d_nl_pool+0x740>
 80101f8:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80101fc:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 8010200:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8010204:	1ad2      	subs	r2, r2, r3
 8010206:	1a8c      	subs	r4, r1, r2
 8010208:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 801020c:	00b2      	lsls	r2, r6, #2
 801020e:	fb02 f204 	mul.w	r2, r2, r4
 8010212:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8010216:	fbb1 f1f0 	udiv	r1, r1, r0
 801021a:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 801021e:	460d      	mov	r5, r1
 8010220:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010222:	62ba      	str	r2, [r7, #40]	; 0x28
 8010224:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8010228:	0082      	lsls	r2, r0, #2
 801022a:	65ba      	str	r2, [r7, #88]	; 0x58
 801022c:	00ca      	lsls	r2, r1, #3
 801022e:	607a      	str	r2, [r7, #4]
 8010230:	00aa      	lsls	r2, r5, #2
 8010232:	60ba      	str	r2, [r7, #8]
 8010234:	fb03 f206 	mul.w	r2, r3, r6
 8010238:	67ba      	str	r2, [r7, #120]	; 0x78
 801023a:	69ba      	ldr	r2, [r7, #24]
 801023c:	fb02 f303 	mul.w	r3, r2, r3
 8010240:	617b      	str	r3, [r7, #20]
 8010242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010246:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801024a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801024e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8010252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010256:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801025a:	2300      	movs	r3, #0
 801025c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010264:	2b00      	cmp	r3, #0
 8010266:	f2c0 8112 	blt.w	801048e <forward_conv2d_nl_pool+0xaea>
 801026a:	2100      	movs	r1, #0
 801026c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801026e:	460a      	mov	r2, r1
 8010270:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8010274:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8010278:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 801027c:	4420      	add	r0, r4
 801027e:	4408      	add	r0, r1
 8010280:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8010284:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8010288:	190c      	adds	r4, r1, r4
 801028a:	42ac      	cmp	r4, r5
 801028c:	bf28      	it	cs
 801028e:	462c      	movcs	r4, r5
 8010290:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 8010294:	0080      	lsls	r0, r0, #2
 8010296:	1aa4      	subs	r4, r4, r2
 8010298:	2d00      	cmp	r5, #0
 801029a:	f000 80e9 	beq.w	8010470 <forward_conv2d_nl_pool+0xacc>
 801029e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80102a2:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 80102a6:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80102aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80102ae:	42b5      	cmp	r5, r6
 80102b0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80102b4:	eba3 0204 	sub.w	r2, r3, r4
 80102b8:	eba1 0104 	sub.w	r1, r1, r4
 80102bc:	bf08      	it	eq
 80102be:	eef0 3a48 	vmoveq.f32	s7, s16
 80102c2:	462b      	mov	r3, r5
 80102c4:	697d      	ldr	r5, [r7, #20]
 80102c6:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 80102ca:	4428      	add	r0, r5
 80102cc:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 80102d0:	fb05 6e00 	mla	lr, r5, r0, r6
 80102d4:	eb0e 000b 	add.w	r0, lr, fp
 80102d8:	4586      	cmp	lr, r0
 80102da:	61f8      	str	r0, [r7, #28]
 80102dc:	f080 80a5 	bcs.w	801042a <forward_conv2d_nl_pool+0xa86>
 80102e0:	0092      	lsls	r2, r2, #2
 80102e2:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80102e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102e8:	fb01 f10b 	mul.w	r1, r1, fp
 80102ec:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80102f0:	f024 0803 	bic.w	r8, r4, #3
 80102f4:	2a00      	cmp	r2, #0
 80102f6:	f000 8098 	beq.w	801042a <forward_conv2d_nl_pool+0xa86>
 80102fa:	f108 32ff 	add.w	r2, r8, #4294967295
 80102fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010300:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8010304:	0892      	lsrs	r2, r2, #2
 8010306:	3201      	adds	r2, #1
 8010308:	4401      	add	r1, r0
 801030a:	fb02 f00a 	mul.w	r0, r2, sl
 801030e:	6638      	str	r0, [r7, #96]	; 0x60
 8010310:	0110      	lsls	r0, r2, #4
 8010312:	0092      	lsls	r2, r2, #2
 8010314:	65fa      	str	r2, [r7, #92]	; 0x5c
 8010316:	1aca      	subs	r2, r1, r3
 8010318:	613a      	str	r2, [r7, #16]
 801031a:	68ba      	ldr	r2, [r7, #8]
 801031c:	6738      	str	r0, [r7, #112]	; 0x70
 801031e:	4413      	add	r3, r2
 8010320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010324:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010328:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801032a:	4413      	add	r3, r2
 801032c:	60fb      	str	r3, [r7, #12]
 801032e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010332:	693b      	ldr	r3, [r7, #16]
 8010334:	4413      	add	r3, r2
 8010336:	677b      	str	r3, [r7, #116]	; 0x74
 8010338:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801033c:	ecf3 6a01 	vldmia	r3!, {s13}
 8010340:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010344:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010348:	2b00      	cmp	r3, #0
 801034a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801034e:	dd57      	ble.n	8010400 <forward_conv2d_nl_pool+0xa5c>
 8010350:	4676      	mov	r6, lr
 8010352:	f04f 0c00 	mov.w	ip, #0
 8010356:	f1b8 0f00 	cmp.w	r8, #0
 801035a:	f340 8087 	ble.w	801046c <forward_conv2d_nl_pool+0xac8>
 801035e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010362:	f109 0310 	add.w	r3, r9, #16
 8010366:	18b1      	adds	r1, r6, r2
 8010368:	2000      	movs	r0, #0
 801036a:	4632      	mov	r2, r6
 801036c:	eb02 050b 	add.w	r5, r2, fp
 8010370:	ed95 7a00 	vldr	s14, [r5]
 8010374:	ed53 7a03 	vldr	s15, [r3, #-12]
 8010378:	ed92 4a00 	vldr	s8, [r2]
 801037c:	ed53 4a04 	vldr	s9, [r3, #-16]
 8010380:	ed91 5a00 	vldr	s10, [r1]
 8010384:	ed53 5a02 	vldr	s11, [r3, #-8]
 8010388:	ed13 6a01 	vldr	s12, [r3, #-4]
 801038c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010390:	eb01 050b 	add.w	r5, r1, fp
 8010394:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010398:	3004      	adds	r0, #4
 801039a:	4540      	cmp	r0, r8
 801039c:	ed95 7a00 	vldr	s14, [r5]
 80103a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80103a4:	4452      	add	r2, sl
 80103a6:	4451      	add	r1, sl
 80103a8:	f103 0310 	add.w	r3, r3, #16
 80103ac:	eee7 7a06 	vfma.f32	s15, s14, s12
 80103b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80103b4:	dbda      	blt.n	801036c <forward_conv2d_nl_pool+0x9c8>
 80103b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103b8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80103ba:	441e      	add	r6, r3
 80103bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80103be:	4499      	add	r9, r3
 80103c0:	42a0      	cmp	r0, r4
 80103c2:	da11      	bge.n	80103e8 <forward_conv2d_nl_pool+0xa44>
 80103c4:	4602      	mov	r2, r0
 80103c6:	4633      	mov	r3, r6
 80103c8:	4649      	mov	r1, r9
 80103ca:	edd3 7a00 	vldr	s15, [r3]
 80103ce:	ecb1 7a01 	vldmia	r1!, {s14}
 80103d2:	3201      	adds	r2, #1
 80103d4:	42a2      	cmp	r2, r4
 80103d6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80103da:	445b      	add	r3, fp
 80103dc:	d1f5      	bne.n	80103ca <forward_conv2d_nl_pool+0xa26>
 80103de:	1a20      	subs	r0, r4, r0
 80103e0:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 80103e4:	fb00 660b 	mla	r6, r0, fp, r6
 80103e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103ec:	441e      	add	r6, r3
 80103ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80103f2:	4499      	add	r9, r3
 80103f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80103f8:	f10c 0c01 	add.w	ip, ip, #1
 80103fc:	4563      	cmp	r3, ip
 80103fe:	d1aa      	bne.n	8010356 <forward_conv2d_nl_pool+0x9b2>
 8010400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010402:	4499      	add	r9, r3
 8010404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010406:	ece3 6a01 	vstmia	r3!, {s13}
 801040a:	677b      	str	r3, [r7, #116]	; 0x74
 801040c:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 8010410:	4293      	cmp	r3, r2
 8010412:	d191      	bne.n	8010338 <forward_conv2d_nl_pool+0x994>
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	687a      	ldr	r2, [r7, #4]
 8010418:	1a9b      	subs	r3, r3, r2
 801041a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801041e:	69fb      	ldr	r3, [r7, #28]
 8010420:	f10e 0e04 	add.w	lr, lr, #4
 8010424:	459e      	cmp	lr, r3
 8010426:	f4ff af7d 	bcc.w	8010324 <forward_conv2d_nl_pool+0x980>
 801042a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801042e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8010432:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010436:	440a      	add	r2, r1
 8010438:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 801043c:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8010440:	4608      	mov	r0, r1
 8010442:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010446:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 801044a:	4410      	add	r0, r2
 801044c:	1a8a      	subs	r2, r1, r2
 801044e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8010452:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8010456:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 801045a:	3301      	adds	r3, #1
 801045c:	429a      	cmp	r2, r3
 801045e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010462:	f47f aefd 	bne.w	8010260 <forward_conv2d_nl_pool+0x8bc>
 8010466:	e5e7      	b.n	8010038 <forward_conv2d_nl_pool+0x694>
 8010468:	68da      	ldr	r2, [r3, #12]
 801046a:	e63f      	b.n	80100ec <forward_conv2d_nl_pool+0x748>
 801046c:	2000      	movs	r0, #0
 801046e:	e7a7      	b.n	80103c0 <forward_conv2d_nl_pool+0xa1c>
 8010470:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8010474:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8010478:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801047c:	1b19      	subs	r1, r3, r4
 801047e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010482:	eef0 3a48 	vmov.f32	s7, s16
 8010486:	1b1a      	subs	r2, r3, r4
 8010488:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801048c:	e71a      	b.n	80102c4 <forward_conv2d_nl_pool+0x920>
 801048e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8010492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010494:	460a      	mov	r2, r1
 8010496:	440b      	add	r3, r1
 8010498:	e6ea      	b.n	8010270 <forward_conv2d_nl_pool+0x8cc>
 801049a:	b168      	cbz	r0, 80104b8 <forward_conv2d_nl_pool+0xb14>
 801049c:	6882      	ldr	r2, [r0, #8]
 801049e:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 80104a2:	2201      	movs	r2, #1
 80104a4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80104a8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80104ac:	f7ff bb29 	b.w	800fb02 <forward_conv2d_nl_pool+0x15e>
 80104b0:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80104b4:	f7ff bb08 	b.w	800fac8 <forward_conv2d_nl_pool+0x124>
 80104b8:	2201      	movs	r2, #1
 80104ba:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80104be:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80104c2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80104c6:	f7ff bb1c 	b.w	800fb02 <forward_conv2d_nl_pool+0x15e>
 80104ca:	3118      	adds	r1, #24
 80104cc:	d008      	beq.n	80104e0 <forward_conv2d_nl_pool+0xb3c>
 80104ce:	462a      	mov	r2, r5
 80104d0:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 80104d4:	4629      	mov	r1, r5
 80104d6:	f7ff ba93 	b.w	800fa00 <forward_conv2d_nl_pool+0x5c>
 80104da:	4691      	mov	r9, r2
 80104dc:	f7ff ba7d 	b.w	800f9da <forward_conv2d_nl_pool+0x36>
 80104e0:	68cb      	ldr	r3, [r1, #12]
 80104e2:	deff      	udf	#255	; 0xff
 80104e4:	2300      	movs	r3, #0
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	deff      	udf	#255	; 0xff
 80104ea:	4694      	mov	ip, r2
 80104ec:	f7ff ba6c 	b.w	800f9c8 <forward_conv2d_nl_pool+0x24>
 80104f0:	6873      	ldr	r3, [r6, #4]
 80104f2:	deff      	udf	#255	; 0xff
 80104f4:	2200      	movs	r2, #0
 80104f6:	f7ff ba82 	b.w	800f9fe <forward_conv2d_nl_pool+0x5a>
 80104fa:	68db      	ldr	r3, [r3, #12]
 80104fc:	deff      	udf	#255	; 0xff
 80104fe:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8010502:	2a00      	cmp	r2, #0
 8010504:	f43f ab60 	beq.w	800fbc8 <forward_conv2d_nl_pool+0x224>
 8010508:	2e03      	cmp	r6, #3
 801050a:	d9eb      	bls.n	80104e4 <forward_conv2d_nl_pool+0xb40>
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010510:	b323      	cbz	r3, 801055c <forward_conv2d_nl_pool+0xbb8>
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	b313      	cbz	r3, 801055c <forward_conv2d_nl_pool+0xbb8>
 8010516:	699b      	ldr	r3, [r3, #24]
 8010518:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801051c:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8010520:	9301      	str	r3, [sp, #4]
 8010522:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8010526:	9000      	str	r0, [sp, #0]
 8010528:	4673      	mov	r3, lr
 801052a:	4620      	mov	r0, r4
 801052c:	f7ff f9ea 	bl	800f904 <ai_dict_decompress_f32>
 8010530:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8010534:	b17c      	cbz	r4, 8010556 <forward_conv2d_nl_pool+0xbb2>
 8010536:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 801053a:	881e      	ldrh	r6, [r3, #0]
 801053c:	f7ff bb44 	b.w	800fbc8 <forward_conv2d_nl_pool+0x224>
 8010540:	b178      	cbz	r0, 8010562 <forward_conv2d_nl_pool+0xbbe>
 8010542:	6881      	ldr	r1, [r0, #8]
 8010544:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8010548:	2201      	movs	r2, #1
 801054a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 801054e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8010552:	f7ff bad6 	b.w	800fb02 <forward_conv2d_nl_pool+0x15e>
 8010556:	881e      	ldrh	r6, [r3, #0]
 8010558:	f7ff bb36 	b.w	800fbc8 <forward_conv2d_nl_pool+0x224>
 801055c:	2300      	movs	r3, #0
 801055e:	699b      	ldr	r3, [r3, #24]
 8010560:	deff      	udf	#255	; 0xff
 8010562:	2201      	movs	r2, #1
 8010564:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8010568:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 801056c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8010570:	f7ff bac7 	b.w	800fb02 <forward_conv2d_nl_pool+0x15e>
 8010574:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8010576:	2801      	cmp	r0, #1
 8010578:	f47f ac10 	bne.w	800fd9c <forward_conv2d_nl_pool+0x3f8>
 801057c:	1ad2      	subs	r2, r2, r3
 801057e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010580:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8010584:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8010588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801058a:	fb00 4101 	mla	r1, r0, r1, r4
 801058e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8010592:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8010596:	f080 81c4 	bcs.w	8010922 <forward_conv2d_nl_pool+0xf7e>
 801059a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801059e:	2a00      	cmp	r2, #0
 80105a0:	f43f ad4a 	beq.w	8010038 <forward_conv2d_nl_pool+0x694>
 80105a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80105a8:	fb02 f303 	mul.w	r3, r2, r3
 80105ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80105ae:	677b      	str	r3, [r7, #116]	; 0x74
 80105b0:	1a9b      	subs	r3, r3, r2
 80105b2:	663b      	str	r3, [r7, #96]	; 0x60
 80105b4:	188b      	adds	r3, r1, r2
 80105b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80105b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80105bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80105c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80105c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80105c8:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 80105cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80105d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80105d4:	2300      	movs	r3, #0
 80105d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80105da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80105de:	2b00      	cmp	r3, #0
 80105e0:	f000 8133 	beq.w	801084a <forward_conv2d_nl_pool+0xea6>
 80105e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80105e8:	ed93 6a00 	vldr	s12, [r3]
 80105ec:	3304      	adds	r3, #4
 80105ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80105f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	f000 8101 	beq.w	80107fe <forward_conv2d_nl_pool+0xe5a>
 80105fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010600:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010604:	eb03 0802 	add.w	r8, r3, r2
 8010608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801060a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801060e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010618:	67bb      	str	r3, [r7, #120]	; 0x78
 801061a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801061e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010622:	f04f 0b00 	mov.w	fp, #0
 8010626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801062a:	2b00      	cmp	r3, #0
 801062c:	f2c0 8104 	blt.w	8010838 <forward_conv2d_nl_pool+0xe94>
 8010630:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010634:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010636:	2300      	movs	r3, #0
 8010638:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 801063c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8010640:	eb02 0c04 	add.w	ip, r2, r4
 8010644:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010648:	4540      	cmp	r0, r8
 801064a:	bf94      	ite	ls
 801064c:	ebc3 0300 	rsbls	r3, r3, r0
 8010650:	ebc3 0308 	rsbhi	r3, r3, r8
 8010654:	eba2 0903 	sub.w	r9, r2, r3
 8010658:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801065c:	1ac4      	subs	r4, r0, r3
 801065e:	fb03 f302 	mul.w	r3, r3, r2
 8010662:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8010666:	2a00      	cmp	r2, #0
 8010668:	f340 80e3 	ble.w	8010832 <forward_conv2d_nl_pool+0xe8e>
 801066c:	f023 050f 	bic.w	r5, r3, #15
 8010670:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8010674:	1e68      	subs	r0, r5, #1
 8010676:	0900      	lsrs	r0, r0, #4
 8010678:	3001      	adds	r0, #1
 801067a:	fb06 f204 	mul.w	r2, r6, r4
 801067e:	673a      	str	r2, [r7, #112]	; 0x70
 8010680:	0102      	lsls	r2, r0, #4
 8010682:	65ba      	str	r2, [r7, #88]	; 0x58
 8010684:	fb06 f909 	mul.w	r9, r6, r9
 8010688:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 801068c:	eef0 6a46 	vmov.f32	s13, s12
 8010690:	f04f 0e00 	mov.w	lr, #0
 8010694:	4662      	mov	r2, ip
 8010696:	2d00      	cmp	r5, #0
 8010698:	f340 80c9 	ble.w	801082e <forward_conv2d_nl_pool+0xe8a>
 801069c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80106a0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80106a4:	2600      	movs	r6, #0
 80106a6:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 80106aa:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80106ae:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 80106b2:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 80106b6:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 80106ba:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 80106be:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80106c2:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 80106c6:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 80106ca:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 80106ce:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 80106d2:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 80106d6:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 80106da:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 80106de:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 80106e2:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 80106e6:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 80106ea:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 80106ee:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 80106f2:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 80106f6:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80106fa:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80106fe:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8010702:	ed50 3a04 	vldr	s7, [r0, #-16]
 8010706:	ed14 4a04 	vldr	s8, [r4, #-16]
 801070a:	ed50 4a03 	vldr	s9, [r0, #-12]
 801070e:	ed14 5a03 	vldr	s10, [r4, #-12]
 8010712:	ed50 5a02 	vldr	s11, [r0, #-8]
 8010716:	ed14 7a02 	vldr	s14, [r4, #-8]
 801071a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 801071e:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8010722:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8010726:	3610      	adds	r6, #16
 8010728:	42ae      	cmp	r6, r5
 801072a:	ed14 fa01 	vldr	s30, [r4, #-4]
 801072e:	ed50 ea01 	vldr	s29, [r0, #-4]
 8010732:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8010736:	f104 0440 	add.w	r4, r4, #64	; 0x40
 801073a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 801073e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8010742:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8010746:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801074a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 801074e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8010752:	eee8 7a80 	vfma.f32	s15, s17, s0
 8010756:	eee0 7a81 	vfma.f32	s15, s1, s2
 801075a:	eee1 7a82 	vfma.f32	s15, s3, s4
 801075e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8010762:	eee3 7a84 	vfma.f32	s15, s7, s8
 8010766:	eee4 7a85 	vfma.f32	s15, s9, s10
 801076a:	eee5 7a87 	vfma.f32	s15, s11, s14
 801076e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8010772:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010776:	db96      	blt.n	80106a6 <forward_conv2d_nl_pool+0xd02>
 8010778:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801077a:	4451      	add	r1, sl
 801077c:	4452      	add	r2, sl
 801077e:	4283      	cmp	r3, r0
 8010780:	dd0f      	ble.n	80107a2 <forward_conv2d_nl_pool+0xdfe>
 8010782:	4604      	mov	r4, r0
 8010784:	468c      	mov	ip, r1
 8010786:	4616      	mov	r6, r2
 8010788:	ecb6 7a01 	vldmia	r6!, {s14}
 801078c:	ecfc 7a01 	vldmia	ip!, {s15}
 8010790:	3401      	adds	r4, #1
 8010792:	42a3      	cmp	r3, r4
 8010794:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010798:	d1f6      	bne.n	8010788 <forward_conv2d_nl_pool+0xde4>
 801079a:	1a18      	subs	r0, r3, r0
 801079c:	0080      	lsls	r0, r0, #2
 801079e:	4402      	add	r2, r0
 80107a0:	4401      	add	r1, r0
 80107a2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80107a4:	4402      	add	r2, r0
 80107a6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80107aa:	f10e 0e01 	add.w	lr, lr, #1
 80107ae:	4570      	cmp	r0, lr
 80107b0:	4449      	add	r1, r9
 80107b2:	f47f af70 	bne.w	8010696 <forward_conv2d_nl_pool+0xcf2>
 80107b6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80107ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107bc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80107c0:	edc3 6a00 	vstr	s13, [r3]
 80107c4:	4608      	mov	r0, r1
 80107c6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80107ca:	440b      	add	r3, r1
 80107cc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80107d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80107d2:	4410      	add	r0, r2
 80107d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107d6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80107da:	4608      	mov	r0, r1
 80107dc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80107e0:	4418      	add	r0, r3
 80107e2:	1acb      	subs	r3, r1, r3
 80107e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80107e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80107ec:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80107f0:	f10b 0b01 	add.w	fp, fp, #1
 80107f4:	455b      	cmp	r3, fp
 80107f6:	eba8 0802 	sub.w	r8, r8, r2
 80107fa:	f47f af14 	bne.w	8010626 <forward_conv2d_nl_pool+0xc82>
 80107fe:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8010802:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010804:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010808:	440a      	add	r2, r1
 801080a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 801080e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8010812:	3204      	adds	r2, #4
 8010814:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8010818:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801081c:	3301      	adds	r3, #1
 801081e:	429a      	cmp	r2, r3
 8010820:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010824:	f47f aed9 	bne.w	80105da <forward_conv2d_nl_pool+0xc36>
 8010828:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 801082c:	e404      	b.n	8010038 <forward_conv2d_nl_pool+0x694>
 801082e:	2000      	movs	r0, #0
 8010830:	e7a5      	b.n	801077e <forward_conv2d_nl_pool+0xdda>
 8010832:	eef0 6a46 	vmov.f32	s13, s12
 8010836:	e7be      	b.n	80107b6 <forward_conv2d_nl_pool+0xe12>
 8010838:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801083c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8010840:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8010844:	eba8 0303 	sub.w	r3, r8, r3
 8010848:	e6f6      	b.n	8010638 <forward_conv2d_nl_pool+0xc94>
 801084a:	eeb0 6a48 	vmov.f32	s12, s16
 801084e:	e6d0      	b.n	80105f2 <forward_conv2d_nl_pool+0xc4e>
 8010850:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8010854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010858:	4611      	mov	r1, r2
 801085a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801085e:	4419      	add	r1, r3
 8010860:	1ad3      	subs	r3, r2, r3
 8010862:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8010866:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801086c:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8010870:	4413      	add	r3, r2
 8010872:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8010876:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801087a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801087e:	4293      	cmp	r3, r2
 8010880:	f63f aa68 	bhi.w	800fd54 <forward_conv2d_nl_pool+0x3b0>
 8010884:	e49f      	b.n	80101c6 <forward_conv2d_nl_pool+0x822>
 8010886:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801088a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 801088e:	699a      	ldr	r2, [r3, #24]
 8010890:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8010894:	68d1      	ldr	r1, [r2, #12]
 8010896:	6853      	ldr	r3, [r2, #4]
 8010898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801089a:	fb00 4012 	mls	r0, r0, r2, r4
 801089e:	009b      	lsls	r3, r3, #2
 80108a0:	4281      	cmp	r1, r0
 80108a2:	bf88      	it	hi
 80108a4:	18c0      	addhi	r0, r0, r3
 80108a6:	4281      	cmp	r1, r0
 80108a8:	eb01 0203 	add.w	r2, r1, r3
 80108ac:	d216      	bcs.n	80108dc <forward_conv2d_nl_pool+0xf38>
 80108ae:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 80108b2:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 80108b6:	42a1      	cmp	r1, r4
 80108b8:	d010      	beq.n	80108dc <forward_conv2d_nl_pool+0xf38>
 80108ba:	4290      	cmp	r0, r2
 80108bc:	d20e      	bcs.n	80108dc <forward_conv2d_nl_pool+0xf38>
 80108be:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80108c2:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 80108c6:	f850 3b04 	ldr.w	r3, [r0], #4
 80108ca:	f841 3b04 	str.w	r3, [r1], #4
 80108ce:	69a2      	ldr	r2, [r4, #24]
 80108d0:	6853      	ldr	r3, [r2, #4]
 80108d2:	68d2      	ldr	r2, [r2, #12]
 80108d4:	009b      	lsls	r3, r3, #2
 80108d6:	441a      	add	r2, r3
 80108d8:	4282      	cmp	r2, r0
 80108da:	d8f4      	bhi.n	80108c6 <forward_conv2d_nl_pool+0xf22>
 80108dc:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80108e0:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80108e4:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 80108e8:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80108ea:	4420      	add	r0, r4
 80108ec:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80108f0:	1a40      	subs	r0, r0, r1
 80108f2:	4421      	add	r1, r4
 80108f4:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 80108f8:	442c      	add	r4, r5
 80108fa:	b209      	sxth	r1, r1
 80108fc:	b200      	sxth	r0, r0
 80108fe:	4294      	cmp	r4, r2
 8010900:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8010904:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8010908:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 801090c:	4621      	mov	r1, r4
 801090e:	f4ff abfb 	bcc.w	8010108 <forward_conv2d_nl_pool+0x764>
 8010912:	425b      	negs	r3, r3
 8010914:	4419      	add	r1, r3
 8010916:	4291      	cmp	r1, r2
 8010918:	d2fc      	bcs.n	8010914 <forward_conv2d_nl_pool+0xf70>
 801091a:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 801091e:	f7ff bbf3 	b.w	8010108 <forward_conv2d_nl_pool+0x764>
 8010922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010926:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 801092a:	320a      	adds	r2, #10
 801092c:	f022 0207 	bic.w	r2, r2, #7
 8010930:	ebad 0d02 	sub.w	sp, sp, r2
 8010934:	aa0a      	add	r2, sp, #40	; 0x28
 8010936:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 801093a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801093e:	2a00      	cmp	r2, #0
 8010940:	f000 8153 	beq.w	8010bea <forward_conv2d_nl_pool+0x1246>
 8010944:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010948:	f8c7 b01c 	str.w	fp, [r7, #28]
 801094c:	fb02 f303 	mul.w	r3, r2, r3
 8010950:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010952:	663b      	str	r3, [r7, #96]	; 0x60
 8010954:	1a9b      	subs	r3, r3, r2
 8010956:	65bb      	str	r3, [r7, #88]	; 0x58
 8010958:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801095c:	f8c7 a014 	str.w	sl, [r7, #20]
 8010960:	4413      	add	r3, r2
 8010962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010964:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8010968:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801096c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010970:	67bb      	str	r3, [r7, #120]	; 0x78
 8010972:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010976:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801097a:	2300      	movs	r3, #0
 801097c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010980:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010984:	b13b      	cbz	r3, 8010996 <forward_conv2d_nl_pool+0xff2>
 8010986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801098a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 801098e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8010992:	f001 f91f 	bl	8011bd4 <memcpy>
 8010996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801099a:	2b00      	cmp	r3, #0
 801099c:	f000 8137 	beq.w	8010c0e <forward_conv2d_nl_pool+0x126a>
 80109a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109a2:	ed93 6a00 	vldr	s12, [r3]
 80109a6:	3304      	adds	r3, #4
 80109a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80109aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	f000 8101 	beq.w	8010bb6 <forward_conv2d_nl_pool+0x1212>
 80109b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80109b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80109bc:	eb03 0802 	add.w	r8, r3, r2
 80109c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80109c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80109cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109d0:	677b      	str	r3, [r7, #116]	; 0x74
 80109d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80109d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80109da:	f04f 0b00 	mov.w	fp, #0
 80109de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	f2c0 810a 	blt.w	8010bfc <forward_conv2d_nl_pool+0x1258>
 80109e8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80109ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80109ee:	2300      	movs	r3, #0
 80109f0:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 80109f4:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80109f8:	eb02 0c04 	add.w	ip, r2, r4
 80109fc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010a00:	4540      	cmp	r0, r8
 8010a02:	bf94      	ite	ls
 8010a04:	ebc3 0300 	rsbls	r3, r3, r0
 8010a08:	ebc3 0308 	rsbhi	r3, r3, r8
 8010a0c:	eba2 0903 	sub.w	r9, r2, r3
 8010a10:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8010a14:	1ac4      	subs	r4, r0, r3
 8010a16:	fb03 f302 	mul.w	r3, r3, r2
 8010a1a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8010a1e:	2a00      	cmp	r2, #0
 8010a20:	f340 80e9 	ble.w	8010bf6 <forward_conv2d_nl_pool+0x1252>
 8010a24:	f023 050f 	bic.w	r5, r3, #15
 8010a28:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8010a2c:	1e68      	subs	r0, r5, #1
 8010a2e:	0900      	lsrs	r0, r0, #4
 8010a30:	3001      	adds	r0, #1
 8010a32:	fb06 f204 	mul.w	r2, r6, r4
 8010a36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8010a38:	0102      	lsls	r2, r0, #4
 8010a3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8010a3c:	fb06 f909 	mul.w	r9, r6, r9
 8010a40:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8010a44:	eef0 6a46 	vmov.f32	s13, s12
 8010a48:	f04f 0e00 	mov.w	lr, #0
 8010a4c:	4662      	mov	r2, ip
 8010a4e:	2d00      	cmp	r5, #0
 8010a50:	f340 80cf 	ble.w	8010bf2 <forward_conv2d_nl_pool+0x124e>
 8010a54:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8010a58:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8010a5c:	2600      	movs	r6, #0
 8010a5e:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8010a62:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8010a66:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8010a6a:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 8010a6e:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8010a72:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8010a76:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8010a7a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8010a7e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8010a82:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8010a86:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8010a8a:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8010a8e:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 8010a92:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8010a96:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8010a9a:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 8010a9e:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8010aa2:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8010aa6:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8010aaa:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8010aae:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8010ab2:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 8010ab6:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8010aba:	ed50 3a04 	vldr	s7, [r0, #-16]
 8010abe:	ed14 4a04 	vldr	s8, [r4, #-16]
 8010ac2:	ed54 4a03 	vldr	s9, [r4, #-12]
 8010ac6:	ed10 5a03 	vldr	s10, [r0, #-12]
 8010aca:	ed50 5a02 	vldr	s11, [r0, #-8]
 8010ace:	ed14 7a02 	vldr	s14, [r4, #-8]
 8010ad2:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8010ad6:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8010ada:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8010ade:	3610      	adds	r6, #16
 8010ae0:	42ae      	cmp	r6, r5
 8010ae2:	ed14 fa01 	vldr	s30, [r4, #-4]
 8010ae6:	ed50 ea01 	vldr	s29, [r0, #-4]
 8010aea:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8010aee:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8010af2:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8010af6:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8010afa:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8010afe:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8010b02:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8010b06:	eee9 7a89 	vfma.f32	s15, s19, s18
 8010b0a:	eee8 7a80 	vfma.f32	s15, s17, s0
 8010b0e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8010b12:	eee1 7a82 	vfma.f32	s15, s3, s4
 8010b16:	eee2 7a83 	vfma.f32	s15, s5, s6
 8010b1a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8010b1e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010b22:	eee5 7a87 	vfma.f32	s15, s11, s14
 8010b26:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8010b2a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010b2e:	db96      	blt.n	8010a5e <forward_conv2d_nl_pool+0x10ba>
 8010b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b32:	4451      	add	r1, sl
 8010b34:	4452      	add	r2, sl
 8010b36:	4283      	cmp	r3, r0
 8010b38:	dd0f      	ble.n	8010b5a <forward_conv2d_nl_pool+0x11b6>
 8010b3a:	4604      	mov	r4, r0
 8010b3c:	468c      	mov	ip, r1
 8010b3e:	4616      	mov	r6, r2
 8010b40:	ecb6 7a01 	vldmia	r6!, {s14}
 8010b44:	ecfc 7a01 	vldmia	ip!, {s15}
 8010b48:	3401      	adds	r4, #1
 8010b4a:	42a3      	cmp	r3, r4
 8010b4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010b50:	d1f6      	bne.n	8010b40 <forward_conv2d_nl_pool+0x119c>
 8010b52:	1a18      	subs	r0, r3, r0
 8010b54:	0080      	lsls	r0, r0, #2
 8010b56:	4402      	add	r2, r0
 8010b58:	4401      	add	r1, r0
 8010b5a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8010b5c:	4402      	add	r2, r0
 8010b5e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8010b62:	f10e 0e01 	add.w	lr, lr, #1
 8010b66:	4570      	cmp	r0, lr
 8010b68:	4449      	add	r1, r9
 8010b6a:	f47f af70 	bne.w	8010a4e <forward_conv2d_nl_pool+0x10aa>
 8010b6e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8010b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b74:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010b78:	edc3 6a00 	vstr	s13, [r3]
 8010b7c:	4608      	mov	r0, r1
 8010b7e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8010b82:	440b      	add	r3, r1
 8010b84:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010b88:	677b      	str	r3, [r7, #116]	; 0x74
 8010b8a:	4410      	add	r0, r2
 8010b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b8e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8010b92:	4608      	mov	r0, r1
 8010b94:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8010b98:	4418      	add	r0, r3
 8010b9a:	1acb      	subs	r3, r1, r3
 8010b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010ba0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8010ba4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8010ba8:	f10b 0b01 	add.w	fp, fp, #1
 8010bac:	455b      	cmp	r3, fp
 8010bae:	eba8 0802 	sub.w	r8, r8, r2
 8010bb2:	f47f af14 	bne.w	80109de <forward_conv2d_nl_pool+0x103a>
 8010bb6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8010bba:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8010bbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010bc2:	440a      	add	r2, r1
 8010bc4:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8010bc8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8010bcc:	3204      	adds	r2, #4
 8010bce:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8010bd2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010bde:	f47f aecf 	bne.w	8010980 <forward_conv2d_nl_pool+0xfdc>
 8010be2:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8010be6:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8010bea:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8010bee:	f7ff ba23 	b.w	8010038 <forward_conv2d_nl_pool+0x694>
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	e79f      	b.n	8010b36 <forward_conv2d_nl_pool+0x1192>
 8010bf6:	eef0 6a46 	vmov.f32	s13, s12
 8010bfa:	e7b8      	b.n	8010b6e <forward_conv2d_nl_pool+0x11ca>
 8010bfc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010c00:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8010c04:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8010c08:	eba8 0303 	sub.w	r3, r8, r3
 8010c0c:	e6f0      	b.n	80109f0 <forward_conv2d_nl_pool+0x104c>
 8010c0e:	eeb0 6a48 	vmov.f32	s12, s16
 8010c12:	e6ca      	b.n	80109aa <forward_conv2d_nl_pool+0x1006>

08010c14 <forward_dense>:
 8010c14:	6983      	ldr	r3, [r0, #24]
 8010c16:	881a      	ldrh	r2, [r3, #0]
 8010c18:	2a00      	cmp	r2, #0
 8010c1a:	f000 80b5 	beq.w	8010d88 <forward_dense+0x174>
 8010c1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c22:	ed2d 8b10 	vpush	{d8-d15}
 8010c26:	685f      	ldr	r7, [r3, #4]
 8010c28:	687e      	ldr	r6, [r7, #4]
 8010c2a:	b091      	sub	sp, #68	; 0x44
 8010c2c:	b106      	cbz	r6, 8010c30 <forward_dense+0x1c>
 8010c2e:	6836      	ldr	r6, [r6, #0]
 8010c30:	2a01      	cmp	r2, #1
 8010c32:	f240 80a6 	bls.w	8010d82 <forward_dense+0x16e>
 8010c36:	693d      	ldr	r5, [r7, #16]
 8010c38:	b105      	cbz	r5, 8010c3c <forward_dense+0x28>
 8010c3a:	682d      	ldr	r5, [r5, #0]
 8010c3c:	2a02      	cmp	r2, #2
 8010c3e:	f000 80a5 	beq.w	8010d8c <forward_dense+0x178>
 8010c42:	69fb      	ldr	r3, [r7, #28]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	f000 821b 	beq.w	8011080 <forward_dense+0x46c>
 8010c4a:	6819      	ldr	r1, [r3, #0]
 8010c4c:	9106      	str	r1, [sp, #24]
 8010c4e:	f117 0118 	adds.w	r1, r7, #24
 8010c52:	f000 80c9 	beq.w	8010de8 <forward_dense+0x1d4>
 8010c56:	8b39      	ldrh	r1, [r7, #24]
 8010c58:	2901      	cmp	r1, #1
 8010c5a:	f240 820e 	bls.w	801107a <forward_dense+0x466>
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	f000 80c4 	beq.w	8010dec <forward_dense+0x1d8>
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	9307      	str	r3, [sp, #28]
 8010c68:	9b06      	ldr	r3, [sp, #24]
 8010c6a:	68ec      	ldr	r4, [r5, #12]
 8010c6c:	6998      	ldr	r0, [r3, #24]
 8010c6e:	68f1      	ldr	r1, [r6, #12]
 8010c70:	6803      	ldr	r3, [r0, #0]
 8010c72:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8010c76:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 8010c7a:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8010c7e:	f3c3 5141 	ubfx	r1, r3, #21, #2
 8010c82:	fa49 f101 	asr.w	r1, r9, r1
 8010c86:	910b      	str	r1, [sp, #44]	; 0x2c
 8010c88:	2a03      	cmp	r2, #3
 8010c8a:	fb0e f10c 	mul.w	r1, lr, ip
 8010c8e:	6864      	ldr	r4, [r4, #4]
 8010c90:	9108      	str	r1, [sp, #32]
 8010c92:	f000 81de 	beq.w	8011052 <forward_dense+0x43e>
 8010c96:	6abf      	ldr	r7, [r7, #40]	; 0x28
 8010c98:	b117      	cbz	r7, 8010ca0 <forward_dense+0x8c>
 8010c9a:	683f      	ldr	r7, [r7, #0]
 8010c9c:	b107      	cbz	r7, 8010ca0 <forward_dense+0x8c>
 8010c9e:	69bf      	ldr	r7, [r7, #24]
 8010ca0:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8010ca4:	2b04      	cmp	r3, #4
 8010ca6:	f000 81d7 	beq.w	8011058 <forward_dense+0x444>
 8010caa:	2b08      	cmp	r3, #8
 8010cac:	f000 81d4 	beq.w	8011058 <forward_dense+0x444>
 8010cb0:	f04f 0a00 	mov.w	sl, #0
 8010cb4:	69ab      	ldr	r3, [r5, #24]
 8010cb6:	69b2      	ldr	r2, [r6, #24]
 8010cb8:	6899      	ldr	r1, [r3, #8]
 8010cba:	9b06      	ldr	r3, [sp, #24]
 8010cbc:	9104      	str	r1, [sp, #16]
 8010cbe:	695b      	ldr	r3, [r3, #20]
 8010cc0:	6897      	ldr	r7, [r2, #8]
 8010cc2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8010cc6:	00a3      	lsls	r3, r4, #2
 8010cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8010cca:	18ce      	adds	r6, r1, r3
 8010ccc:	9b08      	ldr	r3, [sp, #32]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d052      	beq.n	8010d78 <forward_dense+0x164>
 8010cd2:	f1a8 0310 	sub.w	r3, r8, #16
 8010cd6:	091b      	lsrs	r3, r3, #4
 8010cd8:	3301      	adds	r3, #1
 8010cda:	019b      	lsls	r3, r3, #6
 8010cdc:	930c      	str	r3, [sp, #48]	; 0x30
 8010cde:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8010ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	9305      	str	r3, [sp, #20]
 8010ce8:	eddf aace 	vldr	s21, [pc, #824]	; 8011024 <forward_dense+0x410>
 8010cec:	f008 030f 	and.w	r3, r8, #15
 8010cf0:	930d      	str	r3, [sp, #52]	; 0x34
 8010cf2:	9b06      	ldr	r3, [sp, #24]
 8010cf4:	699b      	ldr	r3, [r3, #24]
 8010cf6:	689d      	ldr	r5, [r3, #8]
 8010cf8:	9b07      	ldr	r3, [sp, #28]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	f000 818f 	beq.w	801101e <forward_dense+0x40a>
 8010d00:	699b      	ldr	r3, [r3, #24]
 8010d02:	689c      	ldr	r4, [r3, #8]
 8010d04:	9b04      	ldr	r3, [sp, #16]
 8010d06:	f1ba 0f00 	cmp.w	sl, #0
 8010d0a:	d071      	beq.n	8010df0 <forward_dense+0x1dc>
 8010d0c:	42b3      	cmp	r3, r6
 8010d0e:	d229      	bcs.n	8010d64 <forward_dense+0x150>
 8010d10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010d12:	469b      	mov	fp, r3
 8010d14:	ab0f      	add	r3, sp, #60	; 0x3c
 8010d16:	9303      	str	r3, [sp, #12]
 8010d18:	2a04      	cmp	r2, #4
 8010d1a:	4633      	mov	r3, r6
 8010d1c:	4646      	mov	r6, r8
 8010d1e:	4698      	mov	r8, r3
 8010d20:	d037      	beq.n	8010d92 <forward_dense+0x17e>
 8010d22:	2c00      	cmp	r4, #0
 8010d24:	f000 8180 	beq.w	8011028 <forward_dense+0x414>
 8010d28:	f8d4 c000 	ldr.w	ip, [r4]
 8010d2c:	9803      	ldr	r0, [sp, #12]
 8010d2e:	9600      	str	r6, [sp, #0]
 8010d30:	463b      	mov	r3, r7
 8010d32:	4629      	mov	r1, r5
 8010d34:	4652      	mov	r2, sl
 8010d36:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8010d3a:	f7fe fc57 	bl	800f5ec <ai_dict8_dot_array_f32>
 8010d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d40:	f84b 3b04 	str.w	r3, [fp], #4
 8010d44:	45c3      	cmp	fp, r8
 8010d46:	f104 0404 	add.w	r4, r4, #4
 8010d4a:	444d      	add	r5, r9
 8010d4c:	d3e9      	bcc.n	8010d22 <forward_dense+0x10e>
 8010d4e:	4643      	mov	r3, r8
 8010d50:	46b0      	mov	r8, r6
 8010d52:	461e      	mov	r6, r3
 8010d54:	9a04      	ldr	r2, [sp, #16]
 8010d56:	43d3      	mvns	r3, r2
 8010d58:	4433      	add	r3, r6
 8010d5a:	f023 0303 	bic.w	r3, r3, #3
 8010d5e:	3304      	adds	r3, #4
 8010d60:	18d3      	adds	r3, r2, r3
 8010d62:	9304      	str	r3, [sp, #16]
 8010d64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d66:	9b05      	ldr	r3, [sp, #20]
 8010d68:	4417      	add	r7, r2
 8010d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d6c:	4416      	add	r6, r2
 8010d6e:	9a08      	ldr	r2, [sp, #32]
 8010d70:	3301      	adds	r3, #1
 8010d72:	4293      	cmp	r3, r2
 8010d74:	9305      	str	r3, [sp, #20]
 8010d76:	d1bc      	bne.n	8010cf2 <forward_dense+0xde>
 8010d78:	b011      	add	sp, #68	; 0x44
 8010d7a:	ecbd 8b10 	vpop	{d8-d15}
 8010d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d82:	2300      	movs	r3, #0
 8010d84:	685b      	ldr	r3, [r3, #4]
 8010d86:	deff      	udf	#255	; 0xff
 8010d88:	6853      	ldr	r3, [r2, #4]
 8010d8a:	deff      	udf	#255	; 0xff
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	deff      	udf	#255	; 0xff
 8010d92:	b1a4      	cbz	r4, 8010dbe <forward_dense+0x1aa>
 8010d94:	f8d4 c000 	ldr.w	ip, [r4]
 8010d98:	9803      	ldr	r0, [sp, #12]
 8010d9a:	9600      	str	r6, [sp, #0]
 8010d9c:	463b      	mov	r3, r7
 8010d9e:	4629      	mov	r1, r5
 8010da0:	4652      	mov	r2, sl
 8010da2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8010da6:	f7fe fcef 	bl	800f788 <ai_dict4_dot_array_f32>
 8010daa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010dac:	f84b 3b04 	str.w	r3, [fp], #4
 8010db0:	45c3      	cmp	fp, r8
 8010db2:	f104 0404 	add.w	r4, r4, #4
 8010db6:	444d      	add	r5, r9
 8010db8:	d2c9      	bcs.n	8010d4e <forward_dense+0x13a>
 8010dba:	2c00      	cmp	r4, #0
 8010dbc:	d1ea      	bne.n	8010d94 <forward_dense+0x180>
 8010dbe:	4634      	mov	r4, r6
 8010dc0:	4646      	mov	r6, r8
 8010dc2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010dc6:	9400      	str	r4, [sp, #0]
 8010dc8:	463b      	mov	r3, r7
 8010dca:	4629      	mov	r1, r5
 8010dcc:	4652      	mov	r2, sl
 8010dce:	4640      	mov	r0, r8
 8010dd0:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8010dd4:	f7fe fcd8 	bl	800f788 <ai_dict4_dot_array_f32>
 8010dd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010dda:	f84b 3b04 	str.w	r3, [fp], #4
 8010dde:	45b3      	cmp	fp, r6
 8010de0:	444d      	add	r5, r9
 8010de2:	d3f0      	bcc.n	8010dc6 <forward_dense+0x1b2>
 8010de4:	46a0      	mov	r8, r4
 8010de6:	e7b5      	b.n	8010d54 <forward_dense+0x140>
 8010de8:	9107      	str	r1, [sp, #28]
 8010dea:	e73d      	b.n	8010c68 <forward_dense+0x54>
 8010dec:	9307      	str	r3, [sp, #28]
 8010dee:	e73b      	b.n	8010c68 <forward_dense+0x54>
 8010df0:	42b3      	cmp	r3, r6
 8010df2:	d2b7      	bcs.n	8010d64 <forward_dense+0x150>
 8010df4:	4618      	mov	r0, r3
 8010df6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010df8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8010dfc:	eb07 0c03 	add.w	ip, r7, r3
 8010e00:	469e      	mov	lr, r3
 8010e02:	2c00      	cmp	r4, #0
 8010e04:	f000 80ff 	beq.w	8011006 <forward_dense+0x3f2>
 8010e08:	f1b8 0f0f 	cmp.w	r8, #15
 8010e0c:	edd4 fa00 	vldr	s31, [r4]
 8010e10:	eddf 6a84 	vldr	s13, [pc, #528]	; 8011024 <forward_dense+0x410>
 8010e14:	f104 0404 	add.w	r4, r4, #4
 8010e18:	f240 80fd 	bls.w	8011016 <forward_dense+0x402>
 8010e1c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010e20:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8010e24:	4641      	mov	r1, r8
 8010e26:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8010e2a:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8010e2e:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8010e32:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8010e36:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8010e3a:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8010e3e:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8010e42:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8010e46:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8010e4a:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8010e4e:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8010e52:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8010e56:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8010e5a:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8010e5e:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8010e62:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8010e66:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8010e6a:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8010e6e:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8010e72:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8010e76:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8010e7a:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8010e7e:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8010e82:	ed12 4a04 	vldr	s8, [r2, #-16]
 8010e86:	ed53 4a04 	vldr	s9, [r3, #-16]
 8010e8a:	ed13 5a03 	vldr	s10, [r3, #-12]
 8010e8e:	ed52 5a03 	vldr	s11, [r2, #-12]
 8010e92:	ed13 6a02 	vldr	s12, [r3, #-8]
 8010e96:	ed12 7a02 	vldr	s14, [r2, #-8]
 8010e9a:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8010e9e:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8010ea2:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8010ea6:	3910      	subs	r1, #16
 8010ea8:	290f      	cmp	r1, #15
 8010eaa:	ed52 ea01 	vldr	s29, [r2, #-4]
 8010eae:	ed13 ea01 	vldr	s28, [r3, #-4]
 8010eb2:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8010eb6:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8010eba:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8010ebe:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8010ec2:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8010ec6:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8010eca:	eee9 7a89 	vfma.f32	s15, s19, s18
 8010ece:	eee8 7a88 	vfma.f32	s15, s17, s16
 8010ed2:	eee0 7a20 	vfma.f32	s15, s0, s1
 8010ed6:	eee1 7a21 	vfma.f32	s15, s2, s3
 8010eda:	eee2 7a22 	vfma.f32	s15, s4, s5
 8010ede:	eee3 7a23 	vfma.f32	s15, s6, s7
 8010ee2:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010ee6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010eea:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010eee:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8010ef2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010ef6:	d896      	bhi.n	8010e26 <forward_dense+0x212>
 8010ef8:	eb05 010e 	add.w	r1, r5, lr
 8010efc:	465b      	mov	r3, fp
 8010efe:	4662      	mov	r2, ip
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d075      	beq.n	8010ff0 <forward_dense+0x3dc>
 8010f04:	ed91 7a00 	vldr	s14, [r1]
 8010f08:	edd2 7a00 	vldr	s15, [r2]
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010f12:	d06d      	beq.n	8010ff0 <forward_dense+0x3dc>
 8010f14:	ed91 7a01 	vldr	s14, [r1, #4]
 8010f18:	edd2 7a01 	vldr	s15, [r2, #4]
 8010f1c:	2b02      	cmp	r3, #2
 8010f1e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010f22:	d065      	beq.n	8010ff0 <forward_dense+0x3dc>
 8010f24:	ed91 7a02 	vldr	s14, [r1, #8]
 8010f28:	edd2 7a02 	vldr	s15, [r2, #8]
 8010f2c:	2b03      	cmp	r3, #3
 8010f2e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010f32:	d05d      	beq.n	8010ff0 <forward_dense+0x3dc>
 8010f34:	ed91 7a03 	vldr	s14, [r1, #12]
 8010f38:	edd2 7a03 	vldr	s15, [r2, #12]
 8010f3c:	2b04      	cmp	r3, #4
 8010f3e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010f42:	d055      	beq.n	8010ff0 <forward_dense+0x3dc>
 8010f44:	ed91 7a04 	vldr	s14, [r1, #16]
 8010f48:	edd2 7a04 	vldr	s15, [r2, #16]
 8010f4c:	2b05      	cmp	r3, #5
 8010f4e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010f52:	d04d      	beq.n	8010ff0 <forward_dense+0x3dc>
 8010f54:	ed91 7a05 	vldr	s14, [r1, #20]
 8010f58:	edd2 7a05 	vldr	s15, [r2, #20]
 8010f5c:	2b06      	cmp	r3, #6
 8010f5e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010f62:	d045      	beq.n	8010ff0 <forward_dense+0x3dc>
 8010f64:	ed91 7a06 	vldr	s14, [r1, #24]
 8010f68:	edd2 7a06 	vldr	s15, [r2, #24]
 8010f6c:	2b07      	cmp	r3, #7
 8010f6e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010f72:	d03d      	beq.n	8010ff0 <forward_dense+0x3dc>
 8010f74:	ed91 7a07 	vldr	s14, [r1, #28]
 8010f78:	edd2 7a07 	vldr	s15, [r2, #28]
 8010f7c:	2b08      	cmp	r3, #8
 8010f7e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010f82:	d035      	beq.n	8010ff0 <forward_dense+0x3dc>
 8010f84:	ed91 7a08 	vldr	s14, [r1, #32]
 8010f88:	edd2 7a08 	vldr	s15, [r2, #32]
 8010f8c:	2b09      	cmp	r3, #9
 8010f8e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010f92:	d02d      	beq.n	8010ff0 <forward_dense+0x3dc>
 8010f94:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8010f98:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8010f9c:	2b0a      	cmp	r3, #10
 8010f9e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010fa2:	d025      	beq.n	8010ff0 <forward_dense+0x3dc>
 8010fa4:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8010fa8:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8010fac:	2b0b      	cmp	r3, #11
 8010fae:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010fb2:	d01d      	beq.n	8010ff0 <forward_dense+0x3dc>
 8010fb4:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8010fb8:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8010fbc:	2b0c      	cmp	r3, #12
 8010fbe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010fc2:	d015      	beq.n	8010ff0 <forward_dense+0x3dc>
 8010fc4:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8010fc8:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8010fcc:	2b0d      	cmp	r3, #13
 8010fce:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010fd2:	d00d      	beq.n	8010ff0 <forward_dense+0x3dc>
 8010fd4:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8010fd8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8010fdc:	2b0e      	cmp	r3, #14
 8010fde:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010fe2:	d005      	beq.n	8010ff0 <forward_dense+0x3dc>
 8010fe4:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8010fe8:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8010fec:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010ff0:	444d      	add	r5, r9
 8010ff2:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8010ff6:	ece0 6a01 	vstmia	r0!, {s13}
 8010ffa:	42b0      	cmp	r0, r6
 8010ffc:	f4bf aeaa 	bcs.w	8010d54 <forward_dense+0x140>
 8011000:	2c00      	cmp	r4, #0
 8011002:	f47f af01 	bne.w	8010e08 <forward_dense+0x1f4>
 8011006:	f1b8 0f0f 	cmp.w	r8, #15
 801100a:	eef0 fa6a 	vmov.f32	s31, s21
 801100e:	eddf 6a05 	vldr	s13, [pc, #20]	; 8011024 <forward_dense+0x410>
 8011012:	f63f af03 	bhi.w	8010e1c <forward_dense+0x208>
 8011016:	4643      	mov	r3, r8
 8011018:	4629      	mov	r1, r5
 801101a:	463a      	mov	r2, r7
 801101c:	e770      	b.n	8010f00 <forward_dense+0x2ec>
 801101e:	461c      	mov	r4, r3
 8011020:	e670      	b.n	8010d04 <forward_dense+0xf0>
 8011022:	bf00      	nop
 8011024:	00000000 	.word	0x00000000
 8011028:	4634      	mov	r4, r6
 801102a:	4646      	mov	r6, r8
 801102c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011030:	9400      	str	r4, [sp, #0]
 8011032:	463b      	mov	r3, r7
 8011034:	4629      	mov	r1, r5
 8011036:	4652      	mov	r2, sl
 8011038:	4640      	mov	r0, r8
 801103a:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 801103e:	f7fe fad5 	bl	800f5ec <ai_dict8_dot_array_f32>
 8011042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011044:	f84b 3b04 	str.w	r3, [fp], #4
 8011048:	455e      	cmp	r6, fp
 801104a:	444d      	add	r5, r9
 801104c:	d8f0      	bhi.n	8011030 <forward_dense+0x41c>
 801104e:	46a0      	mov	r8, r4
 8011050:	e680      	b.n	8010d54 <forward_dense+0x140>
 8011052:	2300      	movs	r3, #0
 8011054:	685b      	ldr	r3, [r3, #4]
 8011056:	deff      	udf	#255	; 0xff
 8011058:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801105c:	2f00      	cmp	r7, #0
 801105e:	f43f ae29 	beq.w	8010cb4 <forward_dense+0xa0>
 8011062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011066:	f000 fc67 	bl	8011938 <ai_array_get_byte_size>
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	4602      	mov	r2, r0
 801106e:	4651      	mov	r1, sl
 8011070:	4618      	mov	r0, r3
 8011072:	f000 fdaf 	bl	8011bd4 <memcpy>
 8011076:	4682      	mov	sl, r0
 8011078:	e61c      	b.n	8010cb4 <forward_dense+0xa0>
 801107a:	2300      	movs	r3, #0
 801107c:	9307      	str	r3, [sp, #28]
 801107e:	e5f3      	b.n	8010c68 <forward_dense+0x54>
 8011080:	9306      	str	r3, [sp, #24]
 8011082:	e5e4      	b.n	8010c4e <forward_dense+0x3a>

08011084 <nl_func_relu_array_f32>:
 8011084:	b410      	push	{r4}
 8011086:	698c      	ldr	r4, [r1, #24]
 8011088:	6981      	ldr	r1, [r0, #24]
 801108a:	68a3      	ldr	r3, [r4, #8]
 801108c:	6889      	ldr	r1, [r1, #8]
 801108e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8011092:	3a01      	subs	r2, #1
 8011094:	0092      	lsls	r2, r2, #2
 8011096:	189b      	adds	r3, r3, r2
 8011098:	d216      	bcs.n	80110c8 <nl_func_relu_array_f32+0x44>
 801109a:	3204      	adds	r2, #4
 801109c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80110d0 <nl_func_relu_array_f32+0x4c>
 80110a0:	4411      	add	r1, r2
 80110a2:	3304      	adds	r3, #4
 80110a4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80110a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80110ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110b0:	bfb8      	it	lt
 80110b2:	eef0 7a47 	vmovlt.f32	s15, s14
 80110b6:	ed61 7a01 	vstmdb	r1!, {s15}
 80110ba:	68a0      	ldr	r0, [r4, #8]
 80110bc:	f1a3 0208 	sub.w	r2, r3, #8
 80110c0:	4290      	cmp	r0, r2
 80110c2:	f1a3 0304 	sub.w	r3, r3, #4
 80110c6:	d9ed      	bls.n	80110a4 <nl_func_relu_array_f32+0x20>
 80110c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110cc:	4770      	bx	lr
 80110ce:	bf00      	nop
 80110d0:	00000000 	.word	0x00000000

080110d4 <nl_func_sm_array_f32>:
 80110d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d8:	ed2d 8b04 	vpush	{d8-d9}
 80110dc:	b089      	sub	sp, #36	; 0x24
 80110de:	698f      	ldr	r7, [r1, #24]
 80110e0:	6984      	ldr	r4, [r0, #24]
 80110e2:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80110e6:	68bd      	ldr	r5, [r7, #8]
 80110e8:	9402      	str	r4, [sp, #8]
 80110ea:	4626      	mov	r6, r4
 80110ec:	4696      	mov	lr, r2
 80110ee:	eba2 020c 	sub.w	r2, r2, ip
 80110f2:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 80110f6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80110f8:	68fa      	ldr	r2, [r7, #12]
 80110fa:	68b6      	ldr	r6, [r6, #8]
 80110fc:	ebae 0e04 	sub.w	lr, lr, r4
 8011100:	4295      	cmp	r5, r2
 8011102:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 8011106:	d354      	bcc.n	80111b2 <nl_func_sm_array_f32+0xde>
 8011108:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801110c:	f1cc 0200 	rsb	r2, ip, #0
 8011110:	00a4      	lsls	r4, r4, #2
 8011112:	e9cd 1006 	strd	r1, r0, [sp, #24]
 8011116:	9303      	str	r3, [sp, #12]
 8011118:	9204      	str	r2, [sp, #16]
 801111a:	009b      	lsls	r3, r3, #2
 801111c:	4262      	negs	r2, r4
 801111e:	9205      	str	r2, [sp, #20]
 8011120:	9301      	str	r3, [sp, #4]
 8011122:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8011126:	9b02      	ldr	r3, [sp, #8]
 8011128:	9a07      	ldr	r2, [sp, #28]
 801112a:	60bd      	str	r5, [r7, #8]
 801112c:	609e      	str	r6, [r3, #8]
 801112e:	9b06      	ldr	r3, [sp, #24]
 8011130:	6992      	ldr	r2, [r2, #24]
 8011132:	699b      	ldr	r3, [r3, #24]
 8011134:	6894      	ldr	r4, [r2, #8]
 8011136:	9a03      	ldr	r2, [sp, #12]
 8011138:	689b      	ldr	r3, [r3, #8]
 801113a:	2a01      	cmp	r2, #1
 801113c:	ed93 8a00 	vldr	s16, [r3]
 8011140:	d940      	bls.n	80111c4 <nl_func_sm_array_f32+0xf0>
 8011142:	9901      	ldr	r1, [sp, #4]
 8011144:	1d1a      	adds	r2, r3, #4
 8011146:	eb03 0b01 	add.w	fp, r3, r1
 801114a:	ecf2 7a01 	vldmia	r2!, {s15}
 801114e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011156:	bfb8      	it	lt
 8011158:	eeb0 8a67 	vmovlt.f32	s16, s15
 801115c:	4593      	cmp	fp, r2
 801115e:	d1f4      	bne.n	801114a <nl_func_sm_array_f32+0x76>
 8011160:	eddf 8a1b 	vldr	s17, [pc, #108]	; 80111d0 <nl_func_sm_array_f32+0xfc>
 8011164:	469a      	mov	sl, r3
 8011166:	46a1      	mov	r9, r4
 8011168:	46a0      	mov	r8, r4
 801116a:	ecba 0a01 	vldmia	sl!, {s0}
 801116e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8011172:	f003 fcab 	bl	8014acc <expf>
 8011176:	45d3      	cmp	fp, sl
 8011178:	eca8 0a01 	vstmia	r8!, {s0}
 801117c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8011180:	d1f3      	bne.n	801116a <nl_func_sm_array_f32+0x96>
 8011182:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801118a:	d00b      	beq.n	80111a4 <nl_func_sm_array_f32+0xd0>
 801118c:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8011190:	9b01      	ldr	r3, [sp, #4]
 8011192:	441c      	add	r4, r3
 8011194:	edd9 7a00 	vldr	s15, [r9]
 8011198:	ee67 7a87 	vmul.f32	s15, s15, s14
 801119c:	ece9 7a01 	vstmia	r9!, {s15}
 80111a0:	454c      	cmp	r4, r9
 80111a2:	d1f7      	bne.n	8011194 <nl_func_sm_array_f32+0xc0>
 80111a4:	9b04      	ldr	r3, [sp, #16]
 80111a6:	68fa      	ldr	r2, [r7, #12]
 80111a8:	441d      	add	r5, r3
 80111aa:	9b05      	ldr	r3, [sp, #20]
 80111ac:	42aa      	cmp	r2, r5
 80111ae:	441e      	add	r6, r3
 80111b0:	d9b9      	bls.n	8011126 <nl_func_sm_array_f32+0x52>
 80111b2:	60ba      	str	r2, [r7, #8]
 80111b4:	9a02      	ldr	r2, [sp, #8]
 80111b6:	68d3      	ldr	r3, [r2, #12]
 80111b8:	6093      	str	r3, [r2, #8]
 80111ba:	b009      	add	sp, #36	; 0x24
 80111bc:	ecbd 8b04 	vpop	{d8-d9}
 80111c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c4:	2a00      	cmp	r2, #0
 80111c6:	d0ed      	beq.n	80111a4 <nl_func_sm_array_f32+0xd0>
 80111c8:	9a01      	ldr	r2, [sp, #4]
 80111ca:	eb03 0b02 	add.w	fp, r3, r2
 80111ce:	e7c7      	b.n	8011160 <nl_func_sm_array_f32+0x8c>
 80111d0:	00000000 	.word	0x00000000

080111d4 <nl_func_relu_generic_array_f32>:
 80111d4:	b430      	push	{r4, r5}
 80111d6:	6989      	ldr	r1, [r1, #24]
 80111d8:	6980      	ldr	r0, [r0, #24]
 80111da:	edd3 6a02 	vldr	s13, [r3, #8]
 80111de:	688c      	ldr	r4, [r1, #8]
 80111e0:	6880      	ldr	r0, [r0, #8]
 80111e2:	ed93 7a00 	vldr	s14, [r3]
 80111e6:	ed93 6a01 	vldr	s12, [r3, #4]
 80111ea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80111ee:	3a01      	subs	r2, #1
 80111f0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80111f4:	0092      	lsls	r2, r2, #2
 80111f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111fa:	4410      	add	r0, r2
 80111fc:	4422      	add	r2, r4
 80111fe:	d421      	bmi.n	8011244 <nl_func_relu_generic_array_f32+0x70>
 8011200:	4294      	cmp	r4, r2
 8011202:	d83d      	bhi.n	8011280 <nl_func_relu_generic_array_f32+0xac>
 8011204:	1d13      	adds	r3, r2, #4
 8011206:	1d02      	adds	r2, r0, #4
 8011208:	e010      	b.n	801122c <nl_func_relu_generic_array_f32+0x58>
 801120a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011212:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8011216:	d501      	bpl.n	801121c <nl_func_relu_generic_array_f32+0x48>
 8011218:	ee65 7a86 	vmul.f32	s15, s11, s12
 801121c:	ed62 7a01 	vstmdb	r2!, {s15}
 8011220:	6888      	ldr	r0, [r1, #8]
 8011222:	f1a3 0408 	sub.w	r4, r3, #8
 8011226:	4284      	cmp	r4, r0
 8011228:	462b      	mov	r3, r5
 801122a:	d329      	bcc.n	8011280 <nl_func_relu_generic_array_f32+0xac>
 801122c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011230:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011238:	f1a3 0504 	sub.w	r5, r3, #4
 801123c:	d4e5      	bmi.n	801120a <nl_func_relu_generic_array_f32+0x36>
 801123e:	eef0 7a66 	vmov.f32	s15, s13
 8011242:	e7eb      	b.n	801121c <nl_func_relu_generic_array_f32+0x48>
 8011244:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801124c:	d01a      	beq.n	8011284 <nl_func_relu_generic_array_f32+0xb0>
 801124e:	4294      	cmp	r4, r2
 8011250:	d816      	bhi.n	8011280 <nl_func_relu_generic_array_f32+0xac>
 8011252:	1d13      	adds	r3, r2, #4
 8011254:	1d02      	adds	r2, r0, #4
 8011256:	ed53 7a01 	vldr	s15, [r3, #-4]
 801125a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801125e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011262:	f1a3 0408 	sub.w	r4, r3, #8
 8011266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801126a:	f1a3 0004 	sub.w	r0, r3, #4
 801126e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011272:	4623      	mov	r3, r4
 8011274:	d51e      	bpl.n	80112b4 <nl_func_relu_generic_array_f32+0xe0>
 8011276:	ed62 6a01 	vstmdb	r2!, {s13}
 801127a:	688b      	ldr	r3, [r1, #8]
 801127c:	42a3      	cmp	r3, r4
 801127e:	d91e      	bls.n	80112be <nl_func_relu_generic_array_f32+0xea>
 8011280:	bc30      	pop	{r4, r5}
 8011282:	4770      	bx	lr
 8011284:	4294      	cmp	r4, r2
 8011286:	d8fb      	bhi.n	8011280 <nl_func_relu_generic_array_f32+0xac>
 8011288:	1d13      	adds	r3, r2, #4
 801128a:	2500      	movs	r5, #0
 801128c:	1d02      	adds	r2, r0, #4
 801128e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011296:	f1a3 0408 	sub.w	r4, r3, #8
 801129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801129e:	f1a3 0004 	sub.w	r0, r3, #4
 80112a2:	4623      	mov	r3, r4
 80112a4:	db0d      	blt.n	80112c2 <nl_func_relu_generic_array_f32+0xee>
 80112a6:	ed62 7a01 	vstmdb	r2!, {s15}
 80112aa:	688b      	ldr	r3, [r1, #8]
 80112ac:	42a3      	cmp	r3, r4
 80112ae:	d8e7      	bhi.n	8011280 <nl_func_relu_generic_array_f32+0xac>
 80112b0:	4603      	mov	r3, r0
 80112b2:	e7ec      	b.n	801128e <nl_func_relu_generic_array_f32+0xba>
 80112b4:	ed62 7a01 	vstmdb	r2!, {s15}
 80112b8:	688c      	ldr	r4, [r1, #8]
 80112ba:	429c      	cmp	r4, r3
 80112bc:	d8e0      	bhi.n	8011280 <nl_func_relu_generic_array_f32+0xac>
 80112be:	4603      	mov	r3, r0
 80112c0:	e7c9      	b.n	8011256 <nl_func_relu_generic_array_f32+0x82>
 80112c2:	f842 5d04 	str.w	r5, [r2, #-4]!
 80112c6:	688c      	ldr	r4, [r1, #8]
 80112c8:	429c      	cmp	r4, r3
 80112ca:	d8d9      	bhi.n	8011280 <nl_func_relu_generic_array_f32+0xac>
 80112cc:	4603      	mov	r3, r0
 80112ce:	e7de      	b.n	801128e <nl_func_relu_generic_array_f32+0xba>

080112d0 <forward_relu>:
 80112d0:	6982      	ldr	r2, [r0, #24]
 80112d2:	8813      	ldrh	r3, [r2, #0]
 80112d4:	b333      	cbz	r3, 8011324 <forward_relu+0x54>
 80112d6:	6852      	ldr	r2, [r2, #4]
 80112d8:	6851      	ldr	r1, [r2, #4]
 80112da:	b101      	cbz	r1, 80112de <forward_relu+0xe>
 80112dc:	6809      	ldr	r1, [r1, #0]
 80112de:	2b01      	cmp	r3, #1
 80112e0:	d91d      	bls.n	801131e <forward_relu+0x4e>
 80112e2:	b4f0      	push	{r4, r5, r6, r7}
 80112e4:	6917      	ldr	r7, [r2, #16]
 80112e6:	b107      	cbz	r7, 80112ea <forward_relu+0x1a>
 80112e8:	683f      	ldr	r7, [r7, #0]
 80112ea:	688c      	ldr	r4, [r1, #8]
 80112ec:	69c3      	ldr	r3, [r0, #28]
 80112ee:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d044      	beq.n	8011380 <forward_relu+0xb0>
 80112f6:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 80112fa:	2d01      	cmp	r5, #1
 80112fc:	d014      	beq.n	8011328 <forward_relu+0x58>
 80112fe:	2c00      	cmp	r4, #0
 8011300:	d074      	beq.n	80113ec <forward_relu+0x11c>
 8011302:	68ce      	ldr	r6, [r1, #12]
 8011304:	2201      	movs	r2, #1
 8011306:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 801130a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801130e:	42a6      	cmp	r6, r4
 8011310:	fb05 f202 	mul.w	r2, r5, r2
 8011314:	d1f9      	bne.n	801130a <forward_relu+0x3a>
 8011316:	4638      	mov	r0, r7
 8011318:	bcf0      	pop	{r4, r5, r6, r7}
 801131a:	f7ff bf5b 	b.w	80111d4 <nl_func_relu_generic_array_f32>
 801131e:	2300      	movs	r3, #0
 8011320:	685b      	ldr	r3, [r3, #4]
 8011322:	deff      	udf	#255	; 0xff
 8011324:	685b      	ldr	r3, [r3, #4]
 8011326:	deff      	udf	#255	; 0xff
 8011328:	69ba      	ldr	r2, [r7, #24]
 801132a:	6988      	ldr	r0, [r1, #24]
 801132c:	6896      	ldr	r6, [r2, #8]
 801132e:	ed93 7a00 	vldr	s14, [r3]
 8011332:	6882      	ldr	r2, [r0, #8]
 8011334:	b184      	cbz	r4, 8011358 <forward_relu+0x88>
 8011336:	68cf      	ldr	r7, [r1, #12]
 8011338:	462b      	mov	r3, r5
 801133a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801133e:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8011342:	42a7      	cmp	r7, r4
 8011344:	fb01 f303 	mul.w	r3, r1, r3
 8011348:	d1f9      	bne.n	801133e <forward_relu+0x6e>
 801134a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801134e:	3b01      	subs	r3, #1
 8011350:	009b      	lsls	r3, r3, #2
 8011352:	18d2      	adds	r2, r2, r3
 8011354:	441e      	add	r6, r3
 8011356:	d23f      	bcs.n	80113d8 <forward_relu+0x108>
 8011358:	1d13      	adds	r3, r2, #4
 801135a:	2500      	movs	r5, #0
 801135c:	1d32      	adds	r2, r6, #4
 801135e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011362:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801136a:	f1a3 0104 	sub.w	r1, r3, #4
 801136e:	d835      	bhi.n	80113dc <forward_relu+0x10c>
 8011370:	ed62 7a01 	vstmdb	r2!, {s15}
 8011374:	6884      	ldr	r4, [r0, #8]
 8011376:	3b08      	subs	r3, #8
 8011378:	429c      	cmp	r4, r3
 801137a:	d82d      	bhi.n	80113d8 <forward_relu+0x108>
 801137c:	460b      	mov	r3, r1
 801137e:	e7ee      	b.n	801135e <forward_relu+0x8e>
 8011380:	69bb      	ldr	r3, [r7, #24]
 8011382:	698d      	ldr	r5, [r1, #24]
 8011384:	6898      	ldr	r0, [r3, #8]
 8011386:	68ab      	ldr	r3, [r5, #8]
 8011388:	b184      	cbz	r4, 80113ac <forward_relu+0xdc>
 801138a:	68ce      	ldr	r6, [r1, #12]
 801138c:	2201      	movs	r2, #1
 801138e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011392:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8011396:	42a6      	cmp	r6, r4
 8011398:	fb01 f202 	mul.w	r2, r1, r2
 801139c:	d1f9      	bne.n	8011392 <forward_relu+0xc2>
 801139e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80113a2:	3a01      	subs	r2, #1
 80113a4:	0092      	lsls	r2, r2, #2
 80113a6:	189b      	adds	r3, r3, r2
 80113a8:	4410      	add	r0, r2
 80113aa:	d215      	bcs.n	80113d8 <forward_relu+0x108>
 80113ac:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80113f0 <forward_relu+0x120>
 80113b0:	3304      	adds	r3, #4
 80113b2:	1d01      	adds	r1, r0, #4
 80113b4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80113b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80113bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113c0:	bfb8      	it	lt
 80113c2:	eef0 7a47 	vmovlt.f32	s15, s14
 80113c6:	ed61 7a01 	vstmdb	r1!, {s15}
 80113ca:	68a8      	ldr	r0, [r5, #8]
 80113cc:	f1a3 0208 	sub.w	r2, r3, #8
 80113d0:	4290      	cmp	r0, r2
 80113d2:	f1a3 0304 	sub.w	r3, r3, #4
 80113d6:	d9ed      	bls.n	80113b4 <forward_relu+0xe4>
 80113d8:	bcf0      	pop	{r4, r5, r6, r7}
 80113da:	4770      	bx	lr
 80113dc:	f842 5d04 	str.w	r5, [r2, #-4]!
 80113e0:	6884      	ldr	r4, [r0, #8]
 80113e2:	3b08      	subs	r3, #8
 80113e4:	429c      	cmp	r4, r3
 80113e6:	d8f7      	bhi.n	80113d8 <forward_relu+0x108>
 80113e8:	460b      	mov	r3, r1
 80113ea:	e7b8      	b.n	801135e <forward_relu+0x8e>
 80113ec:	2201      	movs	r2, #1
 80113ee:	e792      	b.n	8011316 <forward_relu+0x46>
 80113f0:	00000000 	.word	0x00000000

080113f4 <forward_sm>:
 80113f4:	6982      	ldr	r2, [r0, #24]
 80113f6:	8813      	ldrh	r3, [r2, #0]
 80113f8:	b32b      	cbz	r3, 8011446 <forward_sm+0x52>
 80113fa:	6852      	ldr	r2, [r2, #4]
 80113fc:	6851      	ldr	r1, [r2, #4]
 80113fe:	b101      	cbz	r1, 8011402 <forward_sm+0xe>
 8011400:	6809      	ldr	r1, [r1, #0]
 8011402:	2b01      	cmp	r3, #1
 8011404:	d91c      	bls.n	8011440 <forward_sm+0x4c>
 8011406:	6913      	ldr	r3, [r2, #16]
 8011408:	b1c3      	cbz	r3, 801143c <forward_sm+0x48>
 801140a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801140c:	6818      	ldr	r0, [r3, #0]
 801140e:	688c      	ldr	r4, [r1, #8]
 8011410:	68c3      	ldr	r3, [r0, #12]
 8011412:	68ce      	ldr	r6, [r1, #12]
 8011414:	685f      	ldr	r7, [r3, #4]
 8011416:	6873      	ldr	r3, [r6, #4]
 8011418:	0a24      	lsrs	r4, r4, #8
 801141a:	b083      	sub	sp, #12
 801141c:	d015      	beq.n	801144a <forward_sm+0x56>
 801141e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011422:	2201      	movs	r2, #1
 8011424:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011428:	42a6      	cmp	r6, r4
 801142a:	fb05 f202 	mul.w	r2, r5, r2
 801142e:	d1f9      	bne.n	8011424 <forward_sm+0x30>
 8011430:	e9cd 3700 	strd	r3, r7, [sp]
 8011434:	f7ff fe4e 	bl	80110d4 <nl_func_sm_array_f32>
 8011438:	b003      	add	sp, #12
 801143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801143c:	68db      	ldr	r3, [r3, #12]
 801143e:	deff      	udf	#255	; 0xff
 8011440:	2300      	movs	r3, #0
 8011442:	685b      	ldr	r3, [r3, #4]
 8011444:	deff      	udf	#255	; 0xff
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	deff      	udf	#255	; 0xff
 801144a:	2201      	movs	r2, #1
 801144c:	e9cd 3700 	strd	r3, r7, [sp]
 8011450:	f7ff fe40 	bl	80110d4 <nl_func_sm_array_f32>
 8011454:	b003      	add	sp, #12
 8011456:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011458 <pool_func_mp_array_f32>:
 8011458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801145c:	b093      	sub	sp, #76	; 0x4c
 801145e:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8011462:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8011464:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 8011468:	68a8      	ldr	r0, [r5, #8]
 801146a:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 801146e:	9508      	str	r5, [sp, #32]
 8011470:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 8011474:	9002      	str	r0, [sp, #8]
 8011476:	950d      	str	r5, [sp, #52]	; 0x34
 8011478:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 801147c:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 8011480:	9004      	str	r0, [sp, #16]
 8011482:	9506      	str	r5, [sp, #24]
 8011484:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 8011488:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 801148c:	9009      	str	r0, [sp, #36]	; 0x24
 801148e:	950b      	str	r5, [sp, #44]	; 0x2c
 8011490:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8011494:	9200      	str	r2, [sp, #0]
 8011496:	468a      	mov	sl, r1
 8011498:	4699      	mov	r9, r3
 801149a:	b95c      	cbnz	r4, 80114b4 <pool_func_mp_array_f32+0x5c>
 801149c:	b950      	cbnz	r0, 80114b4 <pool_func_mp_array_f32+0x5c>
 801149e:	9b04      	ldr	r3, [sp, #16]
 80114a0:	1a5a      	subs	r2, r3, r1
 80114a2:	9b06      	ldr	r3, [sp, #24]
 80114a4:	9908      	ldr	r1, [sp, #32]
 80114a6:	3a01      	subs	r2, #1
 80114a8:	3b01      	subs	r3, #1
 80114aa:	fb13 2301 	smlabb	r3, r3, r1, r2
 80114ae:	041a      	lsls	r2, r3, #16
 80114b0:	f100 809b 	bmi.w	80115ea <pool_func_mp_array_f32+0x192>
 80114b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	f000 808b 	beq.w	80115d2 <pool_func_mp_array_f32+0x17a>
 80114bc:	9b06      	ldr	r3, [sp, #24]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	f000 8087 	beq.w	80115d2 <pool_func_mp_array_f32+0x17a>
 80114c4:	f1b9 0f00 	cmp.w	r9, #0
 80114c8:	f000 8083 	beq.w	80115d2 <pool_func_mp_array_f32+0x17a>
 80114cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114ce:	1b1c      	subs	r4, r3, r4
 80114d0:	9b04      	ldr	r3, [sp, #16]
 80114d2:	1a1b      	subs	r3, r3, r0
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	4240      	negs	r0, r0
 80114d8:	2200      	movs	r2, #0
 80114da:	b2a1      	uxth	r1, r4
 80114dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80114de:	b283      	uxth	r3, r0
 80114e0:	920e      	str	r2, [sp, #56]	; 0x38
 80114e2:	910c      	str	r1, [sp, #48]	; 0x30
 80114e4:	9310      	str	r3, [sp, #64]	; 0x40
 80114e6:	9c06      	ldr	r4, [sp, #24]
 80114e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80114ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114ec:	fb02 f204 	mul.w	r2, r2, r4
 80114f0:	1acb      	subs	r3, r1, r3
 80114f2:	920a      	str	r2, [sp, #40]	; 0x28
 80114f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80114f6:	9205      	str	r2, [sp, #20]
 80114f8:	2000      	movs	r0, #0
 80114fa:	b21b      	sxth	r3, r3
 80114fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80114fe:	9303      	str	r3, [sp, #12]
 8011500:	9007      	str	r0, [sp, #28]
 8011502:	4603      	mov	r3, r0
 8011504:	fa0f f881 	sxth.w	r8, r1
 8011508:	9204      	str	r2, [sp, #16]
 801150a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801150c:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8011510:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8011514:	4413      	add	r3, r2
 8011516:	f04f 0e00 	mov.w	lr, #0
 801151a:	fb09 f303 	mul.w	r3, r9, r3
 801151e:	9301      	str	r3, [sp, #4]
 8011520:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8011524:	4675      	mov	r5, lr
 8011526:	9903      	ldr	r1, [sp, #12]
 8011528:	eddf 7a78 	vldr	s15, [pc, #480]	; 801170c <pool_func_mp_array_f32+0x2b4>
 801152c:	4588      	cmp	r8, r1
 801152e:	dd24      	ble.n	801157a <pool_func_mp_array_f32+0x122>
 8011530:	4564      	cmp	r4, ip
 8011532:	dd1e      	ble.n	8011572 <pool_func_mp_array_f32+0x11a>
 8011534:	2900      	cmp	r1, #0
 8011536:	fb0a f601 	mul.w	r6, sl, r1
 801153a:	db1a      	blt.n	8011572 <pool_func_mp_array_f32+0x11a>
 801153c:	9b00      	ldr	r3, [sp, #0]
 801153e:	4299      	cmp	r1, r3
 8011540:	da17      	bge.n	8011572 <pool_func_mp_array_f32+0x11a>
 8011542:	f1bc 0f00 	cmp.w	ip, #0
 8011546:	4663      	mov	r3, ip
 8011548:	db46      	blt.n	80115d8 <pool_func_mp_array_f32+0x180>
 801154a:	18f2      	adds	r2, r6, r3
 801154c:	fb09 5202 	mla	r2, r9, r2, r5
 8011550:	1c58      	adds	r0, r3, #1
 8011552:	459a      	cmp	sl, r3
 8011554:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8011558:	b203      	sxth	r3, r0
 801155a:	dd08      	ble.n	801156e <pool_func_mp_array_f32+0x116>
 801155c:	ed92 7a00 	vldr	s14, [r2]
 8011560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011568:	bfb8      	it	lt
 801156a:	eef0 7a47 	vmovlt.f32	s15, s14
 801156e:	429c      	cmp	r4, r3
 8011570:	dceb      	bgt.n	801154a <pool_func_mp_array_f32+0xf2>
 8011572:	3101      	adds	r1, #1
 8011574:	b209      	sxth	r1, r1
 8011576:	4588      	cmp	r8, r1
 8011578:	dcda      	bgt.n	8011530 <pool_func_mp_array_f32+0xd8>
 801157a:	9b01      	ldr	r3, [sp, #4]
 801157c:	f10e 0e01 	add.w	lr, lr, #1
 8011580:	441d      	add	r5, r3
 8011582:	9b02      	ldr	r3, [sp, #8]
 8011584:	fa0f fe8e 	sxth.w	lr, lr
 8011588:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801158c:	45ce      	cmp	lr, r9
 801158e:	edc5 7a00 	vstr	s15, [r5]
 8011592:	4675      	mov	r5, lr
 8011594:	dbc7      	blt.n	8011526 <pool_func_mp_array_f32+0xce>
 8011596:	9b07      	ldr	r3, [sp, #28]
 8011598:	9808      	ldr	r0, [sp, #32]
 801159a:	3301      	adds	r3, #1
 801159c:	b219      	sxth	r1, r3
 801159e:	9b05      	ldr	r3, [sp, #20]
 80115a0:	9107      	str	r1, [sp, #28]
 80115a2:	461a      	mov	r2, r3
 80115a4:	4402      	add	r2, r0
 80115a6:	9b04      	ldr	r3, [sp, #16]
 80115a8:	b292      	uxth	r2, r2
 80115aa:	9205      	str	r2, [sp, #20]
 80115ac:	9a06      	ldr	r2, [sp, #24]
 80115ae:	4403      	add	r3, r0
 80115b0:	b29b      	uxth	r3, r3
 80115b2:	428a      	cmp	r2, r1
 80115b4:	9304      	str	r3, [sp, #16]
 80115b6:	460b      	mov	r3, r1
 80115b8:	dca7      	bgt.n	801150a <pool_func_mp_array_f32+0xb2>
 80115ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115bc:	3301      	adds	r3, #1
 80115be:	b21a      	sxth	r2, r3
 80115c0:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 80115c4:	440b      	add	r3, r1
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	930c      	str	r3, [sp, #48]	; 0x30
 80115ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115cc:	920e      	str	r2, [sp, #56]	; 0x38
 80115ce:	4293      	cmp	r3, r2
 80115d0:	dc89      	bgt.n	80114e6 <pool_func_mp_array_f32+0x8e>
 80115d2:	b013      	add	sp, #76	; 0x4c
 80115d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d8:	3301      	adds	r3, #1
 80115da:	b21b      	sxth	r3, r3
 80115dc:	42bb      	cmp	r3, r7
 80115de:	dac6      	bge.n	801156e <pool_func_mp_array_f32+0x116>
 80115e0:	3301      	adds	r3, #1
 80115e2:	b21b      	sxth	r3, r3
 80115e4:	42bb      	cmp	r3, r7
 80115e6:	dbf7      	blt.n	80115d8 <pool_func_mp_array_f32+0x180>
 80115e8:	e7c1      	b.n	801156e <pool_func_mp_array_f32+0x116>
 80115ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115ec:	9a00      	ldr	r2, [sp, #0]
 80115ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80115f0:	1a9a      	subs	r2, r3, r2
 80115f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115f4:	3a01      	subs	r2, #1
 80115f6:	3b01      	subs	r3, #1
 80115f8:	fb13 2301 	smlabb	r3, r3, r1, r2
 80115fc:	041b      	lsls	r3, r3, #16
 80115fe:	f57f af59 	bpl.w	80114b4 <pool_func_mp_array_f32+0x5c>
 8011602:	fb0a f309 	mul.w	r3, sl, r9
 8011606:	009b      	lsls	r3, r3, #2
 8011608:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 801160c:	930e      	str	r3, [sp, #56]	; 0x38
 801160e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011610:	9001      	str	r0, [sp, #4]
 8011612:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 8011616:	9300      	str	r3, [sp, #0]
 8011618:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801161c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801161e:	429a      	cmp	r2, r3
 8011620:	ddd7      	ble.n	80115d2 <pool_func_mp_array_f32+0x17a>
 8011622:	9a00      	ldr	r2, [sp, #0]
 8011624:	9906      	ldr	r1, [sp, #24]
 8011626:	fa0f f882 	sxth.w	r8, r2
 801162a:	2900      	cmp	r1, #0
 801162c:	d062      	beq.n	80116f4 <pool_func_mp_array_f32+0x29c>
 801162e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011630:	fb01 f303 	mul.w	r3, r1, r3
 8011634:	1a12      	subs	r2, r2, r0
 8011636:	9305      	str	r3, [sp, #20]
 8011638:	b213      	sxth	r3, r2
 801163a:	9307      	str	r3, [sp, #28]
 801163c:	f1b9 0f00 	cmp.w	r9, #0
 8011640:	d058      	beq.n	80116f4 <pool_func_mp_array_f32+0x29c>
 8011642:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011644:	fb02 f303 	mul.w	r3, r2, r3
 8011648:	2600      	movs	r6, #0
 801164a:	930c      	str	r3, [sp, #48]	; 0x30
 801164c:	9b04      	ldr	r3, [sp, #16]
 801164e:	9303      	str	r3, [sp, #12]
 8011650:	4637      	mov	r7, r6
 8011652:	46b2      	mov	sl, r6
 8011654:	9b05      	ldr	r3, [sp, #20]
 8011656:	9611      	str	r6, [sp, #68]	; 0x44
 8011658:	eb0a 0b03 	add.w	fp, sl, r3
 801165c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801165e:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8011662:	b235      	sxth	r5, r6
 8011664:	18eb      	adds	r3, r5, r3
 8011666:	f04f 0a00 	mov.w	sl, #0
 801166a:	fb09 f303 	mul.w	r3, r9, r3
 801166e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011670:	930a      	str	r3, [sp, #40]	; 0x28
 8011672:	fb09 fb0b 	mul.w	fp, r9, fp
 8011676:	46d6      	mov	lr, sl
 8011678:	9807      	ldr	r0, [sp, #28]
 801167a:	4580      	cmp	r8, r0
 801167c:	dd43      	ble.n	8011706 <pool_func_mp_array_f32+0x2ae>
 801167e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011680:	eddf 7a22 	vldr	s15, [pc, #136]	; 801170c <pool_func_mp_array_f32+0x2b4>
 8011684:	eb0e 0403 	add.w	r4, lr, r3
 8011688:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801168a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801168e:	42a9      	cmp	r1, r5
 8011690:	dd0f      	ble.n	80116b2 <pool_func_mp_array_f32+0x25a>
 8011692:	4622      	mov	r2, r4
 8011694:	462b      	mov	r3, r5
 8011696:	ed92 7a00 	vldr	s14, [r2]
 801169a:	3301      	adds	r3, #1
 801169c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80116a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116a4:	b21b      	sxth	r3, r3
 80116a6:	bfb8      	it	lt
 80116a8:	eef0 7a47 	vmovlt.f32	s15, s14
 80116ac:	4299      	cmp	r1, r3
 80116ae:	4462      	add	r2, ip
 80116b0:	d1f1      	bne.n	8011696 <pool_func_mp_array_f32+0x23e>
 80116b2:	3001      	adds	r0, #1
 80116b4:	b200      	sxth	r0, r0
 80116b6:	4580      	cmp	r8, r0
 80116b8:	4434      	add	r4, r6
 80116ba:	d1e8      	bne.n	801168e <pool_func_mp_array_f32+0x236>
 80116bc:	f10a 0a01 	add.w	sl, sl, #1
 80116c0:	9a02      	ldr	r2, [sp, #8]
 80116c2:	eb0b 030e 	add.w	r3, fp, lr
 80116c6:	fa0f fa8a 	sxth.w	sl, sl
 80116ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80116ce:	45ca      	cmp	sl, r9
 80116d0:	edc3 7a00 	vstr	s15, [r3]
 80116d4:	46d6      	mov	lr, sl
 80116d6:	dbcf      	blt.n	8011678 <pool_func_mp_array_f32+0x220>
 80116d8:	9b03      	ldr	r3, [sp, #12]
 80116da:	9a08      	ldr	r2, [sp, #32]
 80116dc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80116de:	4413      	add	r3, r2
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	3701      	adds	r7, #1
 80116e4:	9303      	str	r3, [sp, #12]
 80116e6:	9b06      	ldr	r3, [sp, #24]
 80116e8:	b23f      	sxth	r7, r7
 80116ea:	4416      	add	r6, r2
 80116ec:	42bb      	cmp	r3, r7
 80116ee:	b2b6      	uxth	r6, r6
 80116f0:	46ba      	mov	sl, r7
 80116f2:	dcaf      	bgt.n	8011654 <pool_func_mp_array_f32+0x1fc>
 80116f4:	9b00      	ldr	r3, [sp, #0]
 80116f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80116f8:	4413      	add	r3, r2
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	9300      	str	r3, [sp, #0]
 80116fe:	9b01      	ldr	r3, [sp, #4]
 8011700:	3301      	adds	r3, #1
 8011702:	9301      	str	r3, [sp, #4]
 8011704:	e788      	b.n	8011618 <pool_func_mp_array_f32+0x1c0>
 8011706:	eddf 7a01 	vldr	s15, [pc, #4]	; 801170c <pool_func_mp_array_f32+0x2b4>
 801170a:	e7d7      	b.n	80116bc <pool_func_mp_array_f32+0x264>
 801170c:	cf000000 	.word	0xcf000000

08011710 <ai_check_custom_types>:
 8011710:	4b13      	ldr	r3, [pc, #76]	; (8011760 <ai_check_custom_types+0x50>)
 8011712:	b082      	sub	sp, #8
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	9301      	str	r3, [sp, #4]
 8011718:	b118      	cbz	r0, 8011722 <ai_check_custom_types+0x12>
 801171a:	7803      	ldrb	r3, [r0, #0]
 801171c:	2b03      	cmp	r3, #3
 801171e:	d002      	beq.n	8011726 <ai_check_custom_types+0x16>
 8011720:	2000      	movs	r0, #0
 8011722:	b002      	add	sp, #8
 8011724:	4770      	bx	lr
 8011726:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801172a:	4293      	cmp	r3, r2
 801172c:	d004      	beq.n	8011738 <ai_check_custom_types+0x28>
 801172e:	2001      	movs	r0, #1
 8011730:	f080 0001 	eor.w	r0, r0, #1
 8011734:	b002      	add	sp, #8
 8011736:	4770      	bx	lr
 8011738:	7842      	ldrb	r2, [r0, #1]
 801173a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801173e:	429a      	cmp	r2, r3
 8011740:	f100 0001 	add.w	r0, r0, #1
 8011744:	d1f3      	bne.n	801172e <ai_check_custom_types+0x1e>
 8011746:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801174a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801174e:	429a      	cmp	r2, r3
 8011750:	d1ed      	bne.n	801172e <ai_check_custom_types+0x1e>
 8011752:	7842      	ldrb	r2, [r0, #1]
 8011754:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011758:	429a      	cmp	r2, r3
 801175a:	d1e8      	bne.n	801172e <ai_check_custom_types+0x1e>
 801175c:	2000      	movs	r0, #0
 801175e:	e7e7      	b.n	8011730 <ai_check_custom_types+0x20>
 8011760:	08015814 	.word	0x08015814

08011764 <ai_layers_init_all>:
 8011764:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8011766:	b17a      	cbz	r2, 8011788 <ai_layers_init_all+0x24>
 8011768:	6913      	ldr	r3, [r2, #16]
 801176a:	60d0      	str	r0, [r2, #12]
 801176c:	429a      	cmp	r2, r3
 801176e:	f04f 0201 	mov.w	r2, #1
 8011772:	d009      	beq.n	8011788 <ai_layers_init_all+0x24>
 8011774:	b143      	cbz	r3, 8011788 <ai_layers_init_all+0x24>
 8011776:	6919      	ldr	r1, [r3, #16]
 8011778:	60d8      	str	r0, [r3, #12]
 801177a:	4299      	cmp	r1, r3
 801177c:	f102 0201 	add.w	r2, r2, #1
 8011780:	d002      	beq.n	8011788 <ai_layers_init_all+0x24>
 8011782:	460b      	mov	r3, r1
 8011784:	2b00      	cmp	r3, #0
 8011786:	d1f6      	bne.n	8011776 <ai_layers_init_all+0x12>
 8011788:	4610      	mov	r0, r2
 801178a:	4770      	bx	lr

0801178c <ai_layers_post_init_all>:
 801178c:	b538      	push	{r3, r4, r5, lr}
 801178e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8011790:	b18c      	cbz	r4, 80117b6 <ai_layers_post_init_all+0x2a>
 8011792:	2500      	movs	r5, #0
 8011794:	6863      	ldr	r3, [r4, #4]
 8011796:	f013 0f01 	tst.w	r3, #1
 801179a:	4620      	mov	r0, r4
 801179c:	d003      	beq.n	80117a6 <ai_layers_post_init_all+0x1a>
 801179e:	6a23      	ldr	r3, [r4, #32]
 80117a0:	b10b      	cbz	r3, 80117a6 <ai_layers_post_init_all+0x1a>
 80117a2:	4798      	blx	r3
 80117a4:	3501      	adds	r5, #1
 80117a6:	6923      	ldr	r3, [r4, #16]
 80117a8:	42a3      	cmp	r3, r4
 80117aa:	d002      	beq.n	80117b2 <ai_layers_post_init_all+0x26>
 80117ac:	461c      	mov	r4, r3
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d1f0      	bne.n	8011794 <ai_layers_post_init_all+0x8>
 80117b2:	4628      	mov	r0, r5
 80117b4:	bd38      	pop	{r3, r4, r5, pc}
 80117b6:	4625      	mov	r5, r4
 80117b8:	e7fb      	b.n	80117b2 <ai_layers_post_init_all+0x26>
 80117ba:	bf00      	nop

080117bc <ai_layers_forward_all>:
 80117bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117c0:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 80117c2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80117c4:	4604      	mov	r4, r0
 80117c6:	2f00      	cmp	r7, #0
 80117c8:	d02c      	beq.n	8011824 <ai_layers_forward_all+0x68>
 80117ca:	2d00      	cmp	r5, #0
 80117cc:	d03f      	beq.n	801184e <ai_layers_forward_all+0x92>
 80117ce:	6385      	str	r5, [r0, #56]	; 0x38
 80117d0:	4629      	mov	r1, r5
 80117d2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80117d4:	2001      	movs	r0, #1
 80117d6:	47b8      	blx	r7
 80117d8:	2600      	movs	r6, #0
 80117da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80117dc:	46b0      	mov	r8, r6
 80117de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80117e0:	2002      	movs	r0, #2
 80117e2:	47b8      	blx	r7
 80117e4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80117e6:	696b      	ldr	r3, [r5, #20]
 80117e8:	4628      	mov	r0, r5
 80117ea:	4798      	blx	r3
 80117ec:	692b      	ldr	r3, [r5, #16]
 80117ee:	429d      	cmp	r5, r3
 80117f0:	f04f 0003 	mov.w	r0, #3
 80117f4:	4619      	mov	r1, r3
 80117f6:	d009      	beq.n	801180c <ai_layers_forward_all+0x50>
 80117f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80117fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80117fc:	47b8      	blx	r7
 80117fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011800:	3601      	adds	r6, #1
 8011802:	2900      	cmp	r1, #0
 8011804:	d1eb      	bne.n	80117de <ai_layers_forward_all+0x22>
 8011806:	4630      	mov	r0, r6
 8011808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801180c:	2100      	movs	r1, #0
 801180e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8011812:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8011814:	47b8      	blx	r7
 8011816:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011818:	3601      	adds	r6, #1
 801181a:	2900      	cmp	r1, #0
 801181c:	d1df      	bne.n	80117de <ai_layers_forward_all+0x22>
 801181e:	4630      	mov	r0, r6
 8011820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011824:	b19d      	cbz	r5, 801184e <ai_layers_forward_all+0x92>
 8011826:	6385      	str	r5, [r0, #56]	; 0x38
 8011828:	463e      	mov	r6, r7
 801182a:	696b      	ldr	r3, [r5, #20]
 801182c:	4628      	mov	r0, r5
 801182e:	4798      	blx	r3
 8011830:	692b      	ldr	r3, [r5, #16]
 8011832:	42ab      	cmp	r3, r5
 8011834:	f106 0601 	add.w	r6, r6, #1
 8011838:	d004      	beq.n	8011844 <ai_layers_forward_all+0x88>
 801183a:	63a3      	str	r3, [r4, #56]	; 0x38
 801183c:	461d      	mov	r5, r3
 801183e:	2b00      	cmp	r3, #0
 8011840:	d1f3      	bne.n	801182a <ai_layers_forward_all+0x6e>
 8011842:	e7e0      	b.n	8011806 <ai_layers_forward_all+0x4a>
 8011844:	2300      	movs	r3, #0
 8011846:	63a3      	str	r3, [r4, #56]	; 0x38
 8011848:	4630      	mov	r0, r6
 801184a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801184e:	462e      	mov	r6, r5
 8011850:	4630      	mov	r0, r6
 8011852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011856:	bf00      	nop

08011858 <ai_layers_destroy_all>:
 8011858:	b538      	push	{r3, r4, r5, lr}
 801185a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801185c:	b18c      	cbz	r4, 8011882 <ai_layers_destroy_all+0x2a>
 801185e:	2500      	movs	r5, #0
 8011860:	6863      	ldr	r3, [r4, #4]
 8011862:	f013 0f04 	tst.w	r3, #4
 8011866:	4620      	mov	r0, r4
 8011868:	d003      	beq.n	8011872 <ai_layers_destroy_all+0x1a>
 801186a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801186c:	b10b      	cbz	r3, 8011872 <ai_layers_destroy_all+0x1a>
 801186e:	4798      	blx	r3
 8011870:	3501      	adds	r5, #1
 8011872:	6923      	ldr	r3, [r4, #16]
 8011874:	42a3      	cmp	r3, r4
 8011876:	d002      	beq.n	801187e <ai_layers_destroy_all+0x26>
 8011878:	461c      	mov	r4, r3
 801187a:	2b00      	cmp	r3, #0
 801187c:	d1f0      	bne.n	8011860 <ai_layers_destroy_all+0x8>
 801187e:	4628      	mov	r0, r5
 8011880:	bd38      	pop	{r3, r4, r5, pc}
 8011882:	4625      	mov	r5, r4
 8011884:	e7fb      	b.n	801187e <ai_layers_destroy_all+0x26>
 8011886:	bf00      	nop

08011888 <ai_array_to_buffer_fmt>:
 8011888:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801188c:	2b02      	cmp	r3, #2
 801188e:	d029      	beq.n	80118e4 <ai_array_to_buffer_fmt+0x5c>
 8011890:	4a22      	ldr	r2, [pc, #136]	; (801191c <ai_array_to_buffer_fmt+0x94>)
 8011892:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8011896:	4293      	cmp	r3, r2
 8011898:	d010      	beq.n	80118bc <ai_array_to_buffer_fmt+0x34>
 801189a:	dd13      	ble.n	80118c4 <ai_array_to_buffer_fmt+0x3c>
 801189c:	4a20      	ldr	r2, [pc, #128]	; (8011920 <ai_array_to_buffer_fmt+0x98>)
 801189e:	4293      	cmp	r3, r2
 80118a0:	d00c      	beq.n	80118bc <ai_array_to_buffer_fmt+0x34>
 80118a2:	dc27      	bgt.n	80118f4 <ai_array_to_buffer_fmt+0x6c>
 80118a4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80118a8:	4293      	cmp	r3, r2
 80118aa:	d007      	beq.n	80118bc <ai_array_to_buffer_fmt+0x34>
 80118ac:	3207      	adds	r2, #7
 80118ae:	4293      	cmp	r3, r2
 80118b0:	d004      	beq.n	80118bc <ai_array_to_buffer_fmt+0x34>
 80118b2:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 80118b6:	4293      	cmp	r3, r2
 80118b8:	d000      	beq.n	80118bc <ai_array_to_buffer_fmt+0x34>
 80118ba:	2340      	movs	r3, #64	; 0x40
 80118bc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80118c0:	4318      	orrs	r0, r3
 80118c2:	4770      	bx	lr
 80118c4:	4a17      	ldr	r2, [pc, #92]	; (8011924 <ai_array_to_buffer_fmt+0x9c>)
 80118c6:	4293      	cmp	r3, r2
 80118c8:	d0f8      	beq.n	80118bc <ai_array_to_buffer_fmt+0x34>
 80118ca:	dd1e      	ble.n	801190a <ai_array_to_buffer_fmt+0x82>
 80118cc:	4a16      	ldr	r2, [pc, #88]	; (8011928 <ai_array_to_buffer_fmt+0xa0>)
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d0f4      	beq.n	80118bc <ai_array_to_buffer_fmt+0x34>
 80118d2:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 80118d6:	4293      	cmp	r3, r2
 80118d8:	d0f0      	beq.n	80118bc <ai_array_to_buffer_fmt+0x34>
 80118da:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80118de:	4293      	cmp	r3, r2
 80118e0:	d1eb      	bne.n	80118ba <ai_array_to_buffer_fmt+0x32>
 80118e2:	e7eb      	b.n	80118bc <ai_array_to_buffer_fmt+0x34>
 80118e4:	4b11      	ldr	r3, [pc, #68]	; (801192c <ai_array_to_buffer_fmt+0xa4>)
 80118e6:	4003      	ands	r3, r0
 80118e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80118ec:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80118f0:	4318      	orrs	r0, r3
 80118f2:	4770      	bx	lr
 80118f4:	4a0e      	ldr	r2, [pc, #56]	; (8011930 <ai_array_to_buffer_fmt+0xa8>)
 80118f6:	4293      	cmp	r3, r2
 80118f8:	d0e0      	beq.n	80118bc <ai_array_to_buffer_fmt+0x34>
 80118fa:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 80118fe:	4293      	cmp	r3, r2
 8011900:	d0dc      	beq.n	80118bc <ai_array_to_buffer_fmt+0x34>
 8011902:	4a0c      	ldr	r2, [pc, #48]	; (8011934 <ai_array_to_buffer_fmt+0xac>)
 8011904:	4293      	cmp	r3, r2
 8011906:	d1d8      	bne.n	80118ba <ai_array_to_buffer_fmt+0x32>
 8011908:	e7d8      	b.n	80118bc <ai_array_to_buffer_fmt+0x34>
 801190a:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 801190e:	4293      	cmp	r3, r2
 8011910:	d0d4      	beq.n	80118bc <ai_array_to_buffer_fmt+0x34>
 8011912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011916:	4293      	cmp	r3, r2
 8011918:	d0d0      	beq.n	80118bc <ai_array_to_buffer_fmt+0x34>
 801191a:	e7ce      	b.n	80118ba <ai_array_to_buffer_fmt+0x32>
 801191c:	00060440 	.word	0x00060440
 8011920:	00840840 	.word	0x00840840
 8011924:	00040447 	.word	0x00040447
 8011928:	0004084f 	.word	0x0004084f
 801192c:	00803fff 	.word	0x00803fff
 8011930:	00841040 	.word	0x00841040
 8011934:	0084084f 	.word	0x0084084f

08011938 <ai_array_get_byte_size>:
 8011938:	b1c1      	cbz	r1, 801196c <ai_array_get_byte_size+0x34>
 801193a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 801193e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8011942:	4413      	add	r3, r2
 8011944:	fb01 f103 	mul.w	r1, r1, r3
 8011948:	f3c0 5241 	ubfx	r2, r0, #21, #2
 801194c:	3107      	adds	r1, #7
 801194e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8011952:	f021 0107 	bic.w	r1, r1, #7
 8011956:	2804      	cmp	r0, #4
 8011958:	fa21 f102 	lsr.w	r1, r1, r2
 801195c:	d008      	beq.n	8011970 <ai_array_get_byte_size+0x38>
 801195e:	2808      	cmp	r0, #8
 8011960:	d101      	bne.n	8011966 <ai_array_get_byte_size+0x2e>
 8011962:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8011966:	3107      	adds	r1, #7
 8011968:	08c8      	lsrs	r0, r1, #3
 801196a:	4770      	bx	lr
 801196c:	4608      	mov	r0, r1
 801196e:	4770      	bx	lr
 8011970:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8011974:	3107      	adds	r1, #7
 8011976:	08c8      	lsrs	r0, r1, #3
 8011978:	4770      	bx	lr
 801197a:	bf00      	nop

0801197c <__errno>:
 801197c:	4b01      	ldr	r3, [pc, #4]	; (8011984 <__errno+0x8>)
 801197e:	6818      	ldr	r0, [r3, #0]
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop
 8011984:	200008cc 	.word	0x200008cc

08011988 <std>:
 8011988:	2300      	movs	r3, #0
 801198a:	b510      	push	{r4, lr}
 801198c:	4604      	mov	r4, r0
 801198e:	e9c0 3300 	strd	r3, r3, [r0]
 8011992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011996:	6083      	str	r3, [r0, #8]
 8011998:	8181      	strh	r1, [r0, #12]
 801199a:	6643      	str	r3, [r0, #100]	; 0x64
 801199c:	81c2      	strh	r2, [r0, #14]
 801199e:	6183      	str	r3, [r0, #24]
 80119a0:	4619      	mov	r1, r3
 80119a2:	2208      	movs	r2, #8
 80119a4:	305c      	adds	r0, #92	; 0x5c
 80119a6:	f000 f923 	bl	8011bf0 <memset>
 80119aa:	4b05      	ldr	r3, [pc, #20]	; (80119c0 <std+0x38>)
 80119ac:	6263      	str	r3, [r4, #36]	; 0x24
 80119ae:	4b05      	ldr	r3, [pc, #20]	; (80119c4 <std+0x3c>)
 80119b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80119b2:	4b05      	ldr	r3, [pc, #20]	; (80119c8 <std+0x40>)
 80119b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80119b6:	4b05      	ldr	r3, [pc, #20]	; (80119cc <std+0x44>)
 80119b8:	6224      	str	r4, [r4, #32]
 80119ba:	6323      	str	r3, [r4, #48]	; 0x30
 80119bc:	bd10      	pop	{r4, pc}
 80119be:	bf00      	nop
 80119c0:	080128e5 	.word	0x080128e5
 80119c4:	08012907 	.word	0x08012907
 80119c8:	0801293f 	.word	0x0801293f
 80119cc:	08012963 	.word	0x08012963

080119d0 <_cleanup_r>:
 80119d0:	4901      	ldr	r1, [pc, #4]	; (80119d8 <_cleanup_r+0x8>)
 80119d2:	f000 b8af 	b.w	8011b34 <_fwalk_reent>
 80119d6:	bf00      	nop
 80119d8:	08013aa1 	.word	0x08013aa1

080119dc <__sfmoreglue>:
 80119dc:	b570      	push	{r4, r5, r6, lr}
 80119de:	2268      	movs	r2, #104	; 0x68
 80119e0:	1e4d      	subs	r5, r1, #1
 80119e2:	4355      	muls	r5, r2
 80119e4:	460e      	mov	r6, r1
 80119e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80119ea:	f000 f975 	bl	8011cd8 <_malloc_r>
 80119ee:	4604      	mov	r4, r0
 80119f0:	b140      	cbz	r0, 8011a04 <__sfmoreglue+0x28>
 80119f2:	2100      	movs	r1, #0
 80119f4:	e9c0 1600 	strd	r1, r6, [r0]
 80119f8:	300c      	adds	r0, #12
 80119fa:	60a0      	str	r0, [r4, #8]
 80119fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011a00:	f000 f8f6 	bl	8011bf0 <memset>
 8011a04:	4620      	mov	r0, r4
 8011a06:	bd70      	pop	{r4, r5, r6, pc}

08011a08 <__sfp_lock_acquire>:
 8011a08:	4801      	ldr	r0, [pc, #4]	; (8011a10 <__sfp_lock_acquire+0x8>)
 8011a0a:	f000 b8d8 	b.w	8011bbe <__retarget_lock_acquire_recursive>
 8011a0e:	bf00      	nop
 8011a10:	2000520d 	.word	0x2000520d

08011a14 <__sfp_lock_release>:
 8011a14:	4801      	ldr	r0, [pc, #4]	; (8011a1c <__sfp_lock_release+0x8>)
 8011a16:	f000 b8d3 	b.w	8011bc0 <__retarget_lock_release_recursive>
 8011a1a:	bf00      	nop
 8011a1c:	2000520d 	.word	0x2000520d

08011a20 <__sinit_lock_acquire>:
 8011a20:	4801      	ldr	r0, [pc, #4]	; (8011a28 <__sinit_lock_acquire+0x8>)
 8011a22:	f000 b8cc 	b.w	8011bbe <__retarget_lock_acquire_recursive>
 8011a26:	bf00      	nop
 8011a28:	2000520e 	.word	0x2000520e

08011a2c <__sinit_lock_release>:
 8011a2c:	4801      	ldr	r0, [pc, #4]	; (8011a34 <__sinit_lock_release+0x8>)
 8011a2e:	f000 b8c7 	b.w	8011bc0 <__retarget_lock_release_recursive>
 8011a32:	bf00      	nop
 8011a34:	2000520e 	.word	0x2000520e

08011a38 <__sinit>:
 8011a38:	b510      	push	{r4, lr}
 8011a3a:	4604      	mov	r4, r0
 8011a3c:	f7ff fff0 	bl	8011a20 <__sinit_lock_acquire>
 8011a40:	69a3      	ldr	r3, [r4, #24]
 8011a42:	b11b      	cbz	r3, 8011a4c <__sinit+0x14>
 8011a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a48:	f7ff bff0 	b.w	8011a2c <__sinit_lock_release>
 8011a4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011a50:	6523      	str	r3, [r4, #80]	; 0x50
 8011a52:	4b13      	ldr	r3, [pc, #76]	; (8011aa0 <__sinit+0x68>)
 8011a54:	4a13      	ldr	r2, [pc, #76]	; (8011aa4 <__sinit+0x6c>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	62a2      	str	r2, [r4, #40]	; 0x28
 8011a5a:	42a3      	cmp	r3, r4
 8011a5c:	bf04      	itt	eq
 8011a5e:	2301      	moveq	r3, #1
 8011a60:	61a3      	streq	r3, [r4, #24]
 8011a62:	4620      	mov	r0, r4
 8011a64:	f000 f820 	bl	8011aa8 <__sfp>
 8011a68:	6060      	str	r0, [r4, #4]
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	f000 f81c 	bl	8011aa8 <__sfp>
 8011a70:	60a0      	str	r0, [r4, #8]
 8011a72:	4620      	mov	r0, r4
 8011a74:	f000 f818 	bl	8011aa8 <__sfp>
 8011a78:	2200      	movs	r2, #0
 8011a7a:	60e0      	str	r0, [r4, #12]
 8011a7c:	2104      	movs	r1, #4
 8011a7e:	6860      	ldr	r0, [r4, #4]
 8011a80:	f7ff ff82 	bl	8011988 <std>
 8011a84:	68a0      	ldr	r0, [r4, #8]
 8011a86:	2201      	movs	r2, #1
 8011a88:	2109      	movs	r1, #9
 8011a8a:	f7ff ff7d 	bl	8011988 <std>
 8011a8e:	68e0      	ldr	r0, [r4, #12]
 8011a90:	2202      	movs	r2, #2
 8011a92:	2112      	movs	r1, #18
 8011a94:	f7ff ff78 	bl	8011988 <std>
 8011a98:	2301      	movs	r3, #1
 8011a9a:	61a3      	str	r3, [r4, #24]
 8011a9c:	e7d2      	b.n	8011a44 <__sinit+0xc>
 8011a9e:	bf00      	nop
 8011aa0:	08017680 	.word	0x08017680
 8011aa4:	080119d1 	.word	0x080119d1

08011aa8 <__sfp>:
 8011aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aaa:	4607      	mov	r7, r0
 8011aac:	f7ff ffac 	bl	8011a08 <__sfp_lock_acquire>
 8011ab0:	4b1e      	ldr	r3, [pc, #120]	; (8011b2c <__sfp+0x84>)
 8011ab2:	681e      	ldr	r6, [r3, #0]
 8011ab4:	69b3      	ldr	r3, [r6, #24]
 8011ab6:	b913      	cbnz	r3, 8011abe <__sfp+0x16>
 8011ab8:	4630      	mov	r0, r6
 8011aba:	f7ff ffbd 	bl	8011a38 <__sinit>
 8011abe:	3648      	adds	r6, #72	; 0x48
 8011ac0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011ac4:	3b01      	subs	r3, #1
 8011ac6:	d503      	bpl.n	8011ad0 <__sfp+0x28>
 8011ac8:	6833      	ldr	r3, [r6, #0]
 8011aca:	b30b      	cbz	r3, 8011b10 <__sfp+0x68>
 8011acc:	6836      	ldr	r6, [r6, #0]
 8011ace:	e7f7      	b.n	8011ac0 <__sfp+0x18>
 8011ad0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011ad4:	b9d5      	cbnz	r5, 8011b0c <__sfp+0x64>
 8011ad6:	4b16      	ldr	r3, [pc, #88]	; (8011b30 <__sfp+0x88>)
 8011ad8:	60e3      	str	r3, [r4, #12]
 8011ada:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011ade:	6665      	str	r5, [r4, #100]	; 0x64
 8011ae0:	f000 f86c 	bl	8011bbc <__retarget_lock_init_recursive>
 8011ae4:	f7ff ff96 	bl	8011a14 <__sfp_lock_release>
 8011ae8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011aec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011af0:	6025      	str	r5, [r4, #0]
 8011af2:	61a5      	str	r5, [r4, #24]
 8011af4:	2208      	movs	r2, #8
 8011af6:	4629      	mov	r1, r5
 8011af8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011afc:	f000 f878 	bl	8011bf0 <memset>
 8011b00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011b04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011b08:	4620      	mov	r0, r4
 8011b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b0c:	3468      	adds	r4, #104	; 0x68
 8011b0e:	e7d9      	b.n	8011ac4 <__sfp+0x1c>
 8011b10:	2104      	movs	r1, #4
 8011b12:	4638      	mov	r0, r7
 8011b14:	f7ff ff62 	bl	80119dc <__sfmoreglue>
 8011b18:	4604      	mov	r4, r0
 8011b1a:	6030      	str	r0, [r6, #0]
 8011b1c:	2800      	cmp	r0, #0
 8011b1e:	d1d5      	bne.n	8011acc <__sfp+0x24>
 8011b20:	f7ff ff78 	bl	8011a14 <__sfp_lock_release>
 8011b24:	230c      	movs	r3, #12
 8011b26:	603b      	str	r3, [r7, #0]
 8011b28:	e7ee      	b.n	8011b08 <__sfp+0x60>
 8011b2a:	bf00      	nop
 8011b2c:	08017680 	.word	0x08017680
 8011b30:	ffff0001 	.word	0xffff0001

08011b34 <_fwalk_reent>:
 8011b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b38:	4606      	mov	r6, r0
 8011b3a:	4688      	mov	r8, r1
 8011b3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011b40:	2700      	movs	r7, #0
 8011b42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b46:	f1b9 0901 	subs.w	r9, r9, #1
 8011b4a:	d505      	bpl.n	8011b58 <_fwalk_reent+0x24>
 8011b4c:	6824      	ldr	r4, [r4, #0]
 8011b4e:	2c00      	cmp	r4, #0
 8011b50:	d1f7      	bne.n	8011b42 <_fwalk_reent+0xe>
 8011b52:	4638      	mov	r0, r7
 8011b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b58:	89ab      	ldrh	r3, [r5, #12]
 8011b5a:	2b01      	cmp	r3, #1
 8011b5c:	d907      	bls.n	8011b6e <_fwalk_reent+0x3a>
 8011b5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b62:	3301      	adds	r3, #1
 8011b64:	d003      	beq.n	8011b6e <_fwalk_reent+0x3a>
 8011b66:	4629      	mov	r1, r5
 8011b68:	4630      	mov	r0, r6
 8011b6a:	47c0      	blx	r8
 8011b6c:	4307      	orrs	r7, r0
 8011b6e:	3568      	adds	r5, #104	; 0x68
 8011b70:	e7e9      	b.n	8011b46 <_fwalk_reent+0x12>
	...

08011b74 <__libc_init_array>:
 8011b74:	b570      	push	{r4, r5, r6, lr}
 8011b76:	4d0d      	ldr	r5, [pc, #52]	; (8011bac <__libc_init_array+0x38>)
 8011b78:	4c0d      	ldr	r4, [pc, #52]	; (8011bb0 <__libc_init_array+0x3c>)
 8011b7a:	1b64      	subs	r4, r4, r5
 8011b7c:	10a4      	asrs	r4, r4, #2
 8011b7e:	2600      	movs	r6, #0
 8011b80:	42a6      	cmp	r6, r4
 8011b82:	d109      	bne.n	8011b98 <__libc_init_array+0x24>
 8011b84:	4d0b      	ldr	r5, [pc, #44]	; (8011bb4 <__libc_init_array+0x40>)
 8011b86:	4c0c      	ldr	r4, [pc, #48]	; (8011bb8 <__libc_init_array+0x44>)
 8011b88:	f003 f8d4 	bl	8014d34 <_init>
 8011b8c:	1b64      	subs	r4, r4, r5
 8011b8e:	10a4      	asrs	r4, r4, #2
 8011b90:	2600      	movs	r6, #0
 8011b92:	42a6      	cmp	r6, r4
 8011b94:	d105      	bne.n	8011ba2 <__libc_init_array+0x2e>
 8011b96:	bd70      	pop	{r4, r5, r6, pc}
 8011b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b9c:	4798      	blx	r3
 8011b9e:	3601      	adds	r6, #1
 8011ba0:	e7ee      	b.n	8011b80 <__libc_init_array+0xc>
 8011ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ba6:	4798      	blx	r3
 8011ba8:	3601      	adds	r6, #1
 8011baa:	e7f2      	b.n	8011b92 <__libc_init_array+0x1e>
 8011bac:	08017a78 	.word	0x08017a78
 8011bb0:	08017a78 	.word	0x08017a78
 8011bb4:	08017a78 	.word	0x08017a78
 8011bb8:	08017a7c 	.word	0x08017a7c

08011bbc <__retarget_lock_init_recursive>:
 8011bbc:	4770      	bx	lr

08011bbe <__retarget_lock_acquire_recursive>:
 8011bbe:	4770      	bx	lr

08011bc0 <__retarget_lock_release_recursive>:
 8011bc0:	4770      	bx	lr
	...

08011bc4 <malloc>:
 8011bc4:	4b02      	ldr	r3, [pc, #8]	; (8011bd0 <malloc+0xc>)
 8011bc6:	4601      	mov	r1, r0
 8011bc8:	6818      	ldr	r0, [r3, #0]
 8011bca:	f000 b885 	b.w	8011cd8 <_malloc_r>
 8011bce:	bf00      	nop
 8011bd0:	200008cc 	.word	0x200008cc

08011bd4 <memcpy>:
 8011bd4:	440a      	add	r2, r1
 8011bd6:	4291      	cmp	r1, r2
 8011bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8011bdc:	d100      	bne.n	8011be0 <memcpy+0xc>
 8011bde:	4770      	bx	lr
 8011be0:	b510      	push	{r4, lr}
 8011be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011be6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011bea:	4291      	cmp	r1, r2
 8011bec:	d1f9      	bne.n	8011be2 <memcpy+0xe>
 8011bee:	bd10      	pop	{r4, pc}

08011bf0 <memset>:
 8011bf0:	4402      	add	r2, r0
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	4293      	cmp	r3, r2
 8011bf6:	d100      	bne.n	8011bfa <memset+0xa>
 8011bf8:	4770      	bx	lr
 8011bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8011bfe:	e7f9      	b.n	8011bf4 <memset+0x4>

08011c00 <_free_r>:
 8011c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c02:	2900      	cmp	r1, #0
 8011c04:	d044      	beq.n	8011c90 <_free_r+0x90>
 8011c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c0a:	9001      	str	r0, [sp, #4]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	f1a1 0404 	sub.w	r4, r1, #4
 8011c12:	bfb8      	it	lt
 8011c14:	18e4      	addlt	r4, r4, r3
 8011c16:	f002 f80d 	bl	8013c34 <__malloc_lock>
 8011c1a:	4a1e      	ldr	r2, [pc, #120]	; (8011c94 <_free_r+0x94>)
 8011c1c:	9801      	ldr	r0, [sp, #4]
 8011c1e:	6813      	ldr	r3, [r2, #0]
 8011c20:	b933      	cbnz	r3, 8011c30 <_free_r+0x30>
 8011c22:	6063      	str	r3, [r4, #4]
 8011c24:	6014      	str	r4, [r2, #0]
 8011c26:	b003      	add	sp, #12
 8011c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c2c:	f002 b808 	b.w	8013c40 <__malloc_unlock>
 8011c30:	42a3      	cmp	r3, r4
 8011c32:	d908      	bls.n	8011c46 <_free_r+0x46>
 8011c34:	6825      	ldr	r5, [r4, #0]
 8011c36:	1961      	adds	r1, r4, r5
 8011c38:	428b      	cmp	r3, r1
 8011c3a:	bf01      	itttt	eq
 8011c3c:	6819      	ldreq	r1, [r3, #0]
 8011c3e:	685b      	ldreq	r3, [r3, #4]
 8011c40:	1949      	addeq	r1, r1, r5
 8011c42:	6021      	streq	r1, [r4, #0]
 8011c44:	e7ed      	b.n	8011c22 <_free_r+0x22>
 8011c46:	461a      	mov	r2, r3
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	b10b      	cbz	r3, 8011c50 <_free_r+0x50>
 8011c4c:	42a3      	cmp	r3, r4
 8011c4e:	d9fa      	bls.n	8011c46 <_free_r+0x46>
 8011c50:	6811      	ldr	r1, [r2, #0]
 8011c52:	1855      	adds	r5, r2, r1
 8011c54:	42a5      	cmp	r5, r4
 8011c56:	d10b      	bne.n	8011c70 <_free_r+0x70>
 8011c58:	6824      	ldr	r4, [r4, #0]
 8011c5a:	4421      	add	r1, r4
 8011c5c:	1854      	adds	r4, r2, r1
 8011c5e:	42a3      	cmp	r3, r4
 8011c60:	6011      	str	r1, [r2, #0]
 8011c62:	d1e0      	bne.n	8011c26 <_free_r+0x26>
 8011c64:	681c      	ldr	r4, [r3, #0]
 8011c66:	685b      	ldr	r3, [r3, #4]
 8011c68:	6053      	str	r3, [r2, #4]
 8011c6a:	4421      	add	r1, r4
 8011c6c:	6011      	str	r1, [r2, #0]
 8011c6e:	e7da      	b.n	8011c26 <_free_r+0x26>
 8011c70:	d902      	bls.n	8011c78 <_free_r+0x78>
 8011c72:	230c      	movs	r3, #12
 8011c74:	6003      	str	r3, [r0, #0]
 8011c76:	e7d6      	b.n	8011c26 <_free_r+0x26>
 8011c78:	6825      	ldr	r5, [r4, #0]
 8011c7a:	1961      	adds	r1, r4, r5
 8011c7c:	428b      	cmp	r3, r1
 8011c7e:	bf04      	itt	eq
 8011c80:	6819      	ldreq	r1, [r3, #0]
 8011c82:	685b      	ldreq	r3, [r3, #4]
 8011c84:	6063      	str	r3, [r4, #4]
 8011c86:	bf04      	itt	eq
 8011c88:	1949      	addeq	r1, r1, r5
 8011c8a:	6021      	streq	r1, [r4, #0]
 8011c8c:	6054      	str	r4, [r2, #4]
 8011c8e:	e7ca      	b.n	8011c26 <_free_r+0x26>
 8011c90:	b003      	add	sp, #12
 8011c92:	bd30      	pop	{r4, r5, pc}
 8011c94:	20005210 	.word	0x20005210

08011c98 <sbrk_aligned>:
 8011c98:	b570      	push	{r4, r5, r6, lr}
 8011c9a:	4e0e      	ldr	r6, [pc, #56]	; (8011cd4 <sbrk_aligned+0x3c>)
 8011c9c:	460c      	mov	r4, r1
 8011c9e:	6831      	ldr	r1, [r6, #0]
 8011ca0:	4605      	mov	r5, r0
 8011ca2:	b911      	cbnz	r1, 8011caa <sbrk_aligned+0x12>
 8011ca4:	f000 fdee 	bl	8012884 <_sbrk_r>
 8011ca8:	6030      	str	r0, [r6, #0]
 8011caa:	4621      	mov	r1, r4
 8011cac:	4628      	mov	r0, r5
 8011cae:	f000 fde9 	bl	8012884 <_sbrk_r>
 8011cb2:	1c43      	adds	r3, r0, #1
 8011cb4:	d00a      	beq.n	8011ccc <sbrk_aligned+0x34>
 8011cb6:	1cc4      	adds	r4, r0, #3
 8011cb8:	f024 0403 	bic.w	r4, r4, #3
 8011cbc:	42a0      	cmp	r0, r4
 8011cbe:	d007      	beq.n	8011cd0 <sbrk_aligned+0x38>
 8011cc0:	1a21      	subs	r1, r4, r0
 8011cc2:	4628      	mov	r0, r5
 8011cc4:	f000 fdde 	bl	8012884 <_sbrk_r>
 8011cc8:	3001      	adds	r0, #1
 8011cca:	d101      	bne.n	8011cd0 <sbrk_aligned+0x38>
 8011ccc:	f04f 34ff 	mov.w	r4, #4294967295
 8011cd0:	4620      	mov	r0, r4
 8011cd2:	bd70      	pop	{r4, r5, r6, pc}
 8011cd4:	20005214 	.word	0x20005214

08011cd8 <_malloc_r>:
 8011cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cdc:	1ccd      	adds	r5, r1, #3
 8011cde:	f025 0503 	bic.w	r5, r5, #3
 8011ce2:	3508      	adds	r5, #8
 8011ce4:	2d0c      	cmp	r5, #12
 8011ce6:	bf38      	it	cc
 8011ce8:	250c      	movcc	r5, #12
 8011cea:	2d00      	cmp	r5, #0
 8011cec:	4607      	mov	r7, r0
 8011cee:	db01      	blt.n	8011cf4 <_malloc_r+0x1c>
 8011cf0:	42a9      	cmp	r1, r5
 8011cf2:	d905      	bls.n	8011d00 <_malloc_r+0x28>
 8011cf4:	230c      	movs	r3, #12
 8011cf6:	603b      	str	r3, [r7, #0]
 8011cf8:	2600      	movs	r6, #0
 8011cfa:	4630      	mov	r0, r6
 8011cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d00:	4e2e      	ldr	r6, [pc, #184]	; (8011dbc <_malloc_r+0xe4>)
 8011d02:	f001 ff97 	bl	8013c34 <__malloc_lock>
 8011d06:	6833      	ldr	r3, [r6, #0]
 8011d08:	461c      	mov	r4, r3
 8011d0a:	bb34      	cbnz	r4, 8011d5a <_malloc_r+0x82>
 8011d0c:	4629      	mov	r1, r5
 8011d0e:	4638      	mov	r0, r7
 8011d10:	f7ff ffc2 	bl	8011c98 <sbrk_aligned>
 8011d14:	1c43      	adds	r3, r0, #1
 8011d16:	4604      	mov	r4, r0
 8011d18:	d14d      	bne.n	8011db6 <_malloc_r+0xde>
 8011d1a:	6834      	ldr	r4, [r6, #0]
 8011d1c:	4626      	mov	r6, r4
 8011d1e:	2e00      	cmp	r6, #0
 8011d20:	d140      	bne.n	8011da4 <_malloc_r+0xcc>
 8011d22:	6823      	ldr	r3, [r4, #0]
 8011d24:	4631      	mov	r1, r6
 8011d26:	4638      	mov	r0, r7
 8011d28:	eb04 0803 	add.w	r8, r4, r3
 8011d2c:	f000 fdaa 	bl	8012884 <_sbrk_r>
 8011d30:	4580      	cmp	r8, r0
 8011d32:	d13a      	bne.n	8011daa <_malloc_r+0xd2>
 8011d34:	6821      	ldr	r1, [r4, #0]
 8011d36:	3503      	adds	r5, #3
 8011d38:	1a6d      	subs	r5, r5, r1
 8011d3a:	f025 0503 	bic.w	r5, r5, #3
 8011d3e:	3508      	adds	r5, #8
 8011d40:	2d0c      	cmp	r5, #12
 8011d42:	bf38      	it	cc
 8011d44:	250c      	movcc	r5, #12
 8011d46:	4629      	mov	r1, r5
 8011d48:	4638      	mov	r0, r7
 8011d4a:	f7ff ffa5 	bl	8011c98 <sbrk_aligned>
 8011d4e:	3001      	adds	r0, #1
 8011d50:	d02b      	beq.n	8011daa <_malloc_r+0xd2>
 8011d52:	6823      	ldr	r3, [r4, #0]
 8011d54:	442b      	add	r3, r5
 8011d56:	6023      	str	r3, [r4, #0]
 8011d58:	e00e      	b.n	8011d78 <_malloc_r+0xa0>
 8011d5a:	6822      	ldr	r2, [r4, #0]
 8011d5c:	1b52      	subs	r2, r2, r5
 8011d5e:	d41e      	bmi.n	8011d9e <_malloc_r+0xc6>
 8011d60:	2a0b      	cmp	r2, #11
 8011d62:	d916      	bls.n	8011d92 <_malloc_r+0xba>
 8011d64:	1961      	adds	r1, r4, r5
 8011d66:	42a3      	cmp	r3, r4
 8011d68:	6025      	str	r5, [r4, #0]
 8011d6a:	bf18      	it	ne
 8011d6c:	6059      	strne	r1, [r3, #4]
 8011d6e:	6863      	ldr	r3, [r4, #4]
 8011d70:	bf08      	it	eq
 8011d72:	6031      	streq	r1, [r6, #0]
 8011d74:	5162      	str	r2, [r4, r5]
 8011d76:	604b      	str	r3, [r1, #4]
 8011d78:	4638      	mov	r0, r7
 8011d7a:	f104 060b 	add.w	r6, r4, #11
 8011d7e:	f001 ff5f 	bl	8013c40 <__malloc_unlock>
 8011d82:	f026 0607 	bic.w	r6, r6, #7
 8011d86:	1d23      	adds	r3, r4, #4
 8011d88:	1af2      	subs	r2, r6, r3
 8011d8a:	d0b6      	beq.n	8011cfa <_malloc_r+0x22>
 8011d8c:	1b9b      	subs	r3, r3, r6
 8011d8e:	50a3      	str	r3, [r4, r2]
 8011d90:	e7b3      	b.n	8011cfa <_malloc_r+0x22>
 8011d92:	6862      	ldr	r2, [r4, #4]
 8011d94:	42a3      	cmp	r3, r4
 8011d96:	bf0c      	ite	eq
 8011d98:	6032      	streq	r2, [r6, #0]
 8011d9a:	605a      	strne	r2, [r3, #4]
 8011d9c:	e7ec      	b.n	8011d78 <_malloc_r+0xa0>
 8011d9e:	4623      	mov	r3, r4
 8011da0:	6864      	ldr	r4, [r4, #4]
 8011da2:	e7b2      	b.n	8011d0a <_malloc_r+0x32>
 8011da4:	4634      	mov	r4, r6
 8011da6:	6876      	ldr	r6, [r6, #4]
 8011da8:	e7b9      	b.n	8011d1e <_malloc_r+0x46>
 8011daa:	230c      	movs	r3, #12
 8011dac:	603b      	str	r3, [r7, #0]
 8011dae:	4638      	mov	r0, r7
 8011db0:	f001 ff46 	bl	8013c40 <__malloc_unlock>
 8011db4:	e7a1      	b.n	8011cfa <_malloc_r+0x22>
 8011db6:	6025      	str	r5, [r4, #0]
 8011db8:	e7de      	b.n	8011d78 <_malloc_r+0xa0>
 8011dba:	bf00      	nop
 8011dbc:	20005210 	.word	0x20005210

08011dc0 <__cvt>:
 8011dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011dc4:	ec55 4b10 	vmov	r4, r5, d0
 8011dc8:	2d00      	cmp	r5, #0
 8011dca:	460e      	mov	r6, r1
 8011dcc:	4619      	mov	r1, r3
 8011dce:	462b      	mov	r3, r5
 8011dd0:	bfbb      	ittet	lt
 8011dd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011dd6:	461d      	movlt	r5, r3
 8011dd8:	2300      	movge	r3, #0
 8011dda:	232d      	movlt	r3, #45	; 0x2d
 8011ddc:	700b      	strb	r3, [r1, #0]
 8011dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011de0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011de4:	4691      	mov	r9, r2
 8011de6:	f023 0820 	bic.w	r8, r3, #32
 8011dea:	bfbc      	itt	lt
 8011dec:	4622      	movlt	r2, r4
 8011dee:	4614      	movlt	r4, r2
 8011df0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011df4:	d005      	beq.n	8011e02 <__cvt+0x42>
 8011df6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011dfa:	d100      	bne.n	8011dfe <__cvt+0x3e>
 8011dfc:	3601      	adds	r6, #1
 8011dfe:	2102      	movs	r1, #2
 8011e00:	e000      	b.n	8011e04 <__cvt+0x44>
 8011e02:	2103      	movs	r1, #3
 8011e04:	ab03      	add	r3, sp, #12
 8011e06:	9301      	str	r3, [sp, #4]
 8011e08:	ab02      	add	r3, sp, #8
 8011e0a:	9300      	str	r3, [sp, #0]
 8011e0c:	ec45 4b10 	vmov	d0, r4, r5
 8011e10:	4653      	mov	r3, sl
 8011e12:	4632      	mov	r2, r6
 8011e14:	f000 ffd0 	bl	8012db8 <_dtoa_r>
 8011e18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011e1c:	4607      	mov	r7, r0
 8011e1e:	d102      	bne.n	8011e26 <__cvt+0x66>
 8011e20:	f019 0f01 	tst.w	r9, #1
 8011e24:	d022      	beq.n	8011e6c <__cvt+0xac>
 8011e26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011e2a:	eb07 0906 	add.w	r9, r7, r6
 8011e2e:	d110      	bne.n	8011e52 <__cvt+0x92>
 8011e30:	783b      	ldrb	r3, [r7, #0]
 8011e32:	2b30      	cmp	r3, #48	; 0x30
 8011e34:	d10a      	bne.n	8011e4c <__cvt+0x8c>
 8011e36:	2200      	movs	r2, #0
 8011e38:	2300      	movs	r3, #0
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	4629      	mov	r1, r5
 8011e3e:	f7ee fe43 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e42:	b918      	cbnz	r0, 8011e4c <__cvt+0x8c>
 8011e44:	f1c6 0601 	rsb	r6, r6, #1
 8011e48:	f8ca 6000 	str.w	r6, [sl]
 8011e4c:	f8da 3000 	ldr.w	r3, [sl]
 8011e50:	4499      	add	r9, r3
 8011e52:	2200      	movs	r2, #0
 8011e54:	2300      	movs	r3, #0
 8011e56:	4620      	mov	r0, r4
 8011e58:	4629      	mov	r1, r5
 8011e5a:	f7ee fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e5e:	b108      	cbz	r0, 8011e64 <__cvt+0xa4>
 8011e60:	f8cd 900c 	str.w	r9, [sp, #12]
 8011e64:	2230      	movs	r2, #48	; 0x30
 8011e66:	9b03      	ldr	r3, [sp, #12]
 8011e68:	454b      	cmp	r3, r9
 8011e6a:	d307      	bcc.n	8011e7c <__cvt+0xbc>
 8011e6c:	9b03      	ldr	r3, [sp, #12]
 8011e6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e70:	1bdb      	subs	r3, r3, r7
 8011e72:	4638      	mov	r0, r7
 8011e74:	6013      	str	r3, [r2, #0]
 8011e76:	b004      	add	sp, #16
 8011e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e7c:	1c59      	adds	r1, r3, #1
 8011e7e:	9103      	str	r1, [sp, #12]
 8011e80:	701a      	strb	r2, [r3, #0]
 8011e82:	e7f0      	b.n	8011e66 <__cvt+0xa6>

08011e84 <__exponent>:
 8011e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e86:	4603      	mov	r3, r0
 8011e88:	2900      	cmp	r1, #0
 8011e8a:	bfb8      	it	lt
 8011e8c:	4249      	neglt	r1, r1
 8011e8e:	f803 2b02 	strb.w	r2, [r3], #2
 8011e92:	bfb4      	ite	lt
 8011e94:	222d      	movlt	r2, #45	; 0x2d
 8011e96:	222b      	movge	r2, #43	; 0x2b
 8011e98:	2909      	cmp	r1, #9
 8011e9a:	7042      	strb	r2, [r0, #1]
 8011e9c:	dd2a      	ble.n	8011ef4 <__exponent+0x70>
 8011e9e:	f10d 0407 	add.w	r4, sp, #7
 8011ea2:	46a4      	mov	ip, r4
 8011ea4:	270a      	movs	r7, #10
 8011ea6:	46a6      	mov	lr, r4
 8011ea8:	460a      	mov	r2, r1
 8011eaa:	fb91 f6f7 	sdiv	r6, r1, r7
 8011eae:	fb07 1516 	mls	r5, r7, r6, r1
 8011eb2:	3530      	adds	r5, #48	; 0x30
 8011eb4:	2a63      	cmp	r2, #99	; 0x63
 8011eb6:	f104 34ff 	add.w	r4, r4, #4294967295
 8011eba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011ebe:	4631      	mov	r1, r6
 8011ec0:	dcf1      	bgt.n	8011ea6 <__exponent+0x22>
 8011ec2:	3130      	adds	r1, #48	; 0x30
 8011ec4:	f1ae 0502 	sub.w	r5, lr, #2
 8011ec8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011ecc:	1c44      	adds	r4, r0, #1
 8011ece:	4629      	mov	r1, r5
 8011ed0:	4561      	cmp	r1, ip
 8011ed2:	d30a      	bcc.n	8011eea <__exponent+0x66>
 8011ed4:	f10d 0209 	add.w	r2, sp, #9
 8011ed8:	eba2 020e 	sub.w	r2, r2, lr
 8011edc:	4565      	cmp	r5, ip
 8011ede:	bf88      	it	hi
 8011ee0:	2200      	movhi	r2, #0
 8011ee2:	4413      	add	r3, r2
 8011ee4:	1a18      	subs	r0, r3, r0
 8011ee6:	b003      	add	sp, #12
 8011ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011eee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011ef2:	e7ed      	b.n	8011ed0 <__exponent+0x4c>
 8011ef4:	2330      	movs	r3, #48	; 0x30
 8011ef6:	3130      	adds	r1, #48	; 0x30
 8011ef8:	7083      	strb	r3, [r0, #2]
 8011efa:	70c1      	strb	r1, [r0, #3]
 8011efc:	1d03      	adds	r3, r0, #4
 8011efe:	e7f1      	b.n	8011ee4 <__exponent+0x60>

08011f00 <_printf_float>:
 8011f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f04:	ed2d 8b02 	vpush	{d8}
 8011f08:	b08d      	sub	sp, #52	; 0x34
 8011f0a:	460c      	mov	r4, r1
 8011f0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011f10:	4616      	mov	r6, r2
 8011f12:	461f      	mov	r7, r3
 8011f14:	4605      	mov	r5, r0
 8011f16:	f001 fe11 	bl	8013b3c <_localeconv_r>
 8011f1a:	f8d0 a000 	ldr.w	sl, [r0]
 8011f1e:	4650      	mov	r0, sl
 8011f20:	f7ee f956 	bl	80001d0 <strlen>
 8011f24:	2300      	movs	r3, #0
 8011f26:	930a      	str	r3, [sp, #40]	; 0x28
 8011f28:	6823      	ldr	r3, [r4, #0]
 8011f2a:	9305      	str	r3, [sp, #20]
 8011f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8011f30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011f34:	3307      	adds	r3, #7
 8011f36:	f023 0307 	bic.w	r3, r3, #7
 8011f3a:	f103 0208 	add.w	r2, r3, #8
 8011f3e:	f8c8 2000 	str.w	r2, [r8]
 8011f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011f4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011f4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011f52:	9307      	str	r3, [sp, #28]
 8011f54:	f8cd 8018 	str.w	r8, [sp, #24]
 8011f58:	ee08 0a10 	vmov	s16, r0
 8011f5c:	4b9f      	ldr	r3, [pc, #636]	; (80121dc <_printf_float+0x2dc>)
 8011f5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f62:	f04f 32ff 	mov.w	r2, #4294967295
 8011f66:	f7ee fde1 	bl	8000b2c <__aeabi_dcmpun>
 8011f6a:	bb88      	cbnz	r0, 8011fd0 <_printf_float+0xd0>
 8011f6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f70:	4b9a      	ldr	r3, [pc, #616]	; (80121dc <_printf_float+0x2dc>)
 8011f72:	f04f 32ff 	mov.w	r2, #4294967295
 8011f76:	f7ee fdbb 	bl	8000af0 <__aeabi_dcmple>
 8011f7a:	bb48      	cbnz	r0, 8011fd0 <_printf_float+0xd0>
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	2300      	movs	r3, #0
 8011f80:	4640      	mov	r0, r8
 8011f82:	4649      	mov	r1, r9
 8011f84:	f7ee fdaa 	bl	8000adc <__aeabi_dcmplt>
 8011f88:	b110      	cbz	r0, 8011f90 <_printf_float+0x90>
 8011f8a:	232d      	movs	r3, #45	; 0x2d
 8011f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f90:	4b93      	ldr	r3, [pc, #588]	; (80121e0 <_printf_float+0x2e0>)
 8011f92:	4894      	ldr	r0, [pc, #592]	; (80121e4 <_printf_float+0x2e4>)
 8011f94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011f98:	bf94      	ite	ls
 8011f9a:	4698      	movls	r8, r3
 8011f9c:	4680      	movhi	r8, r0
 8011f9e:	2303      	movs	r3, #3
 8011fa0:	6123      	str	r3, [r4, #16]
 8011fa2:	9b05      	ldr	r3, [sp, #20]
 8011fa4:	f023 0204 	bic.w	r2, r3, #4
 8011fa8:	6022      	str	r2, [r4, #0]
 8011faa:	f04f 0900 	mov.w	r9, #0
 8011fae:	9700      	str	r7, [sp, #0]
 8011fb0:	4633      	mov	r3, r6
 8011fb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8011fb4:	4621      	mov	r1, r4
 8011fb6:	4628      	mov	r0, r5
 8011fb8:	f000 f9d8 	bl	801236c <_printf_common>
 8011fbc:	3001      	adds	r0, #1
 8011fbe:	f040 8090 	bne.w	80120e2 <_printf_float+0x1e2>
 8011fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc6:	b00d      	add	sp, #52	; 0x34
 8011fc8:	ecbd 8b02 	vpop	{d8}
 8011fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fd0:	4642      	mov	r2, r8
 8011fd2:	464b      	mov	r3, r9
 8011fd4:	4640      	mov	r0, r8
 8011fd6:	4649      	mov	r1, r9
 8011fd8:	f7ee fda8 	bl	8000b2c <__aeabi_dcmpun>
 8011fdc:	b140      	cbz	r0, 8011ff0 <_printf_float+0xf0>
 8011fde:	464b      	mov	r3, r9
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	bfbc      	itt	lt
 8011fe4:	232d      	movlt	r3, #45	; 0x2d
 8011fe6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011fea:	487f      	ldr	r0, [pc, #508]	; (80121e8 <_printf_float+0x2e8>)
 8011fec:	4b7f      	ldr	r3, [pc, #508]	; (80121ec <_printf_float+0x2ec>)
 8011fee:	e7d1      	b.n	8011f94 <_printf_float+0x94>
 8011ff0:	6863      	ldr	r3, [r4, #4]
 8011ff2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011ff6:	9206      	str	r2, [sp, #24]
 8011ff8:	1c5a      	adds	r2, r3, #1
 8011ffa:	d13f      	bne.n	801207c <_printf_float+0x17c>
 8011ffc:	2306      	movs	r3, #6
 8011ffe:	6063      	str	r3, [r4, #4]
 8012000:	9b05      	ldr	r3, [sp, #20]
 8012002:	6861      	ldr	r1, [r4, #4]
 8012004:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012008:	2300      	movs	r3, #0
 801200a:	9303      	str	r3, [sp, #12]
 801200c:	ab0a      	add	r3, sp, #40	; 0x28
 801200e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012012:	ab09      	add	r3, sp, #36	; 0x24
 8012014:	ec49 8b10 	vmov	d0, r8, r9
 8012018:	9300      	str	r3, [sp, #0]
 801201a:	6022      	str	r2, [r4, #0]
 801201c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012020:	4628      	mov	r0, r5
 8012022:	f7ff fecd 	bl	8011dc0 <__cvt>
 8012026:	9b06      	ldr	r3, [sp, #24]
 8012028:	9909      	ldr	r1, [sp, #36]	; 0x24
 801202a:	2b47      	cmp	r3, #71	; 0x47
 801202c:	4680      	mov	r8, r0
 801202e:	d108      	bne.n	8012042 <_printf_float+0x142>
 8012030:	1cc8      	adds	r0, r1, #3
 8012032:	db02      	blt.n	801203a <_printf_float+0x13a>
 8012034:	6863      	ldr	r3, [r4, #4]
 8012036:	4299      	cmp	r1, r3
 8012038:	dd41      	ble.n	80120be <_printf_float+0x1be>
 801203a:	f1ab 0b02 	sub.w	fp, fp, #2
 801203e:	fa5f fb8b 	uxtb.w	fp, fp
 8012042:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012046:	d820      	bhi.n	801208a <_printf_float+0x18a>
 8012048:	3901      	subs	r1, #1
 801204a:	465a      	mov	r2, fp
 801204c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012050:	9109      	str	r1, [sp, #36]	; 0x24
 8012052:	f7ff ff17 	bl	8011e84 <__exponent>
 8012056:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012058:	1813      	adds	r3, r2, r0
 801205a:	2a01      	cmp	r2, #1
 801205c:	4681      	mov	r9, r0
 801205e:	6123      	str	r3, [r4, #16]
 8012060:	dc02      	bgt.n	8012068 <_printf_float+0x168>
 8012062:	6822      	ldr	r2, [r4, #0]
 8012064:	07d2      	lsls	r2, r2, #31
 8012066:	d501      	bpl.n	801206c <_printf_float+0x16c>
 8012068:	3301      	adds	r3, #1
 801206a:	6123      	str	r3, [r4, #16]
 801206c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012070:	2b00      	cmp	r3, #0
 8012072:	d09c      	beq.n	8011fae <_printf_float+0xae>
 8012074:	232d      	movs	r3, #45	; 0x2d
 8012076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801207a:	e798      	b.n	8011fae <_printf_float+0xae>
 801207c:	9a06      	ldr	r2, [sp, #24]
 801207e:	2a47      	cmp	r2, #71	; 0x47
 8012080:	d1be      	bne.n	8012000 <_printf_float+0x100>
 8012082:	2b00      	cmp	r3, #0
 8012084:	d1bc      	bne.n	8012000 <_printf_float+0x100>
 8012086:	2301      	movs	r3, #1
 8012088:	e7b9      	b.n	8011ffe <_printf_float+0xfe>
 801208a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801208e:	d118      	bne.n	80120c2 <_printf_float+0x1c2>
 8012090:	2900      	cmp	r1, #0
 8012092:	6863      	ldr	r3, [r4, #4]
 8012094:	dd0b      	ble.n	80120ae <_printf_float+0x1ae>
 8012096:	6121      	str	r1, [r4, #16]
 8012098:	b913      	cbnz	r3, 80120a0 <_printf_float+0x1a0>
 801209a:	6822      	ldr	r2, [r4, #0]
 801209c:	07d0      	lsls	r0, r2, #31
 801209e:	d502      	bpl.n	80120a6 <_printf_float+0x1a6>
 80120a0:	3301      	adds	r3, #1
 80120a2:	440b      	add	r3, r1
 80120a4:	6123      	str	r3, [r4, #16]
 80120a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80120a8:	f04f 0900 	mov.w	r9, #0
 80120ac:	e7de      	b.n	801206c <_printf_float+0x16c>
 80120ae:	b913      	cbnz	r3, 80120b6 <_printf_float+0x1b6>
 80120b0:	6822      	ldr	r2, [r4, #0]
 80120b2:	07d2      	lsls	r2, r2, #31
 80120b4:	d501      	bpl.n	80120ba <_printf_float+0x1ba>
 80120b6:	3302      	adds	r3, #2
 80120b8:	e7f4      	b.n	80120a4 <_printf_float+0x1a4>
 80120ba:	2301      	movs	r3, #1
 80120bc:	e7f2      	b.n	80120a4 <_printf_float+0x1a4>
 80120be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80120c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120c4:	4299      	cmp	r1, r3
 80120c6:	db05      	blt.n	80120d4 <_printf_float+0x1d4>
 80120c8:	6823      	ldr	r3, [r4, #0]
 80120ca:	6121      	str	r1, [r4, #16]
 80120cc:	07d8      	lsls	r0, r3, #31
 80120ce:	d5ea      	bpl.n	80120a6 <_printf_float+0x1a6>
 80120d0:	1c4b      	adds	r3, r1, #1
 80120d2:	e7e7      	b.n	80120a4 <_printf_float+0x1a4>
 80120d4:	2900      	cmp	r1, #0
 80120d6:	bfd4      	ite	le
 80120d8:	f1c1 0202 	rsble	r2, r1, #2
 80120dc:	2201      	movgt	r2, #1
 80120de:	4413      	add	r3, r2
 80120e0:	e7e0      	b.n	80120a4 <_printf_float+0x1a4>
 80120e2:	6823      	ldr	r3, [r4, #0]
 80120e4:	055a      	lsls	r2, r3, #21
 80120e6:	d407      	bmi.n	80120f8 <_printf_float+0x1f8>
 80120e8:	6923      	ldr	r3, [r4, #16]
 80120ea:	4642      	mov	r2, r8
 80120ec:	4631      	mov	r1, r6
 80120ee:	4628      	mov	r0, r5
 80120f0:	47b8      	blx	r7
 80120f2:	3001      	adds	r0, #1
 80120f4:	d12c      	bne.n	8012150 <_printf_float+0x250>
 80120f6:	e764      	b.n	8011fc2 <_printf_float+0xc2>
 80120f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80120fc:	f240 80e0 	bls.w	80122c0 <_printf_float+0x3c0>
 8012100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012104:	2200      	movs	r2, #0
 8012106:	2300      	movs	r3, #0
 8012108:	f7ee fcde 	bl	8000ac8 <__aeabi_dcmpeq>
 801210c:	2800      	cmp	r0, #0
 801210e:	d034      	beq.n	801217a <_printf_float+0x27a>
 8012110:	4a37      	ldr	r2, [pc, #220]	; (80121f0 <_printf_float+0x2f0>)
 8012112:	2301      	movs	r3, #1
 8012114:	4631      	mov	r1, r6
 8012116:	4628      	mov	r0, r5
 8012118:	47b8      	blx	r7
 801211a:	3001      	adds	r0, #1
 801211c:	f43f af51 	beq.w	8011fc2 <_printf_float+0xc2>
 8012120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012124:	429a      	cmp	r2, r3
 8012126:	db02      	blt.n	801212e <_printf_float+0x22e>
 8012128:	6823      	ldr	r3, [r4, #0]
 801212a:	07d8      	lsls	r0, r3, #31
 801212c:	d510      	bpl.n	8012150 <_printf_float+0x250>
 801212e:	ee18 3a10 	vmov	r3, s16
 8012132:	4652      	mov	r2, sl
 8012134:	4631      	mov	r1, r6
 8012136:	4628      	mov	r0, r5
 8012138:	47b8      	blx	r7
 801213a:	3001      	adds	r0, #1
 801213c:	f43f af41 	beq.w	8011fc2 <_printf_float+0xc2>
 8012140:	f04f 0800 	mov.w	r8, #0
 8012144:	f104 091a 	add.w	r9, r4, #26
 8012148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801214a:	3b01      	subs	r3, #1
 801214c:	4543      	cmp	r3, r8
 801214e:	dc09      	bgt.n	8012164 <_printf_float+0x264>
 8012150:	6823      	ldr	r3, [r4, #0]
 8012152:	079b      	lsls	r3, r3, #30
 8012154:	f100 8105 	bmi.w	8012362 <_printf_float+0x462>
 8012158:	68e0      	ldr	r0, [r4, #12]
 801215a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801215c:	4298      	cmp	r0, r3
 801215e:	bfb8      	it	lt
 8012160:	4618      	movlt	r0, r3
 8012162:	e730      	b.n	8011fc6 <_printf_float+0xc6>
 8012164:	2301      	movs	r3, #1
 8012166:	464a      	mov	r2, r9
 8012168:	4631      	mov	r1, r6
 801216a:	4628      	mov	r0, r5
 801216c:	47b8      	blx	r7
 801216e:	3001      	adds	r0, #1
 8012170:	f43f af27 	beq.w	8011fc2 <_printf_float+0xc2>
 8012174:	f108 0801 	add.w	r8, r8, #1
 8012178:	e7e6      	b.n	8012148 <_printf_float+0x248>
 801217a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801217c:	2b00      	cmp	r3, #0
 801217e:	dc39      	bgt.n	80121f4 <_printf_float+0x2f4>
 8012180:	4a1b      	ldr	r2, [pc, #108]	; (80121f0 <_printf_float+0x2f0>)
 8012182:	2301      	movs	r3, #1
 8012184:	4631      	mov	r1, r6
 8012186:	4628      	mov	r0, r5
 8012188:	47b8      	blx	r7
 801218a:	3001      	adds	r0, #1
 801218c:	f43f af19 	beq.w	8011fc2 <_printf_float+0xc2>
 8012190:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012194:	4313      	orrs	r3, r2
 8012196:	d102      	bne.n	801219e <_printf_float+0x29e>
 8012198:	6823      	ldr	r3, [r4, #0]
 801219a:	07d9      	lsls	r1, r3, #31
 801219c:	d5d8      	bpl.n	8012150 <_printf_float+0x250>
 801219e:	ee18 3a10 	vmov	r3, s16
 80121a2:	4652      	mov	r2, sl
 80121a4:	4631      	mov	r1, r6
 80121a6:	4628      	mov	r0, r5
 80121a8:	47b8      	blx	r7
 80121aa:	3001      	adds	r0, #1
 80121ac:	f43f af09 	beq.w	8011fc2 <_printf_float+0xc2>
 80121b0:	f04f 0900 	mov.w	r9, #0
 80121b4:	f104 0a1a 	add.w	sl, r4, #26
 80121b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121ba:	425b      	negs	r3, r3
 80121bc:	454b      	cmp	r3, r9
 80121be:	dc01      	bgt.n	80121c4 <_printf_float+0x2c4>
 80121c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121c2:	e792      	b.n	80120ea <_printf_float+0x1ea>
 80121c4:	2301      	movs	r3, #1
 80121c6:	4652      	mov	r2, sl
 80121c8:	4631      	mov	r1, r6
 80121ca:	4628      	mov	r0, r5
 80121cc:	47b8      	blx	r7
 80121ce:	3001      	adds	r0, #1
 80121d0:	f43f aef7 	beq.w	8011fc2 <_printf_float+0xc2>
 80121d4:	f109 0901 	add.w	r9, r9, #1
 80121d8:	e7ee      	b.n	80121b8 <_printf_float+0x2b8>
 80121da:	bf00      	nop
 80121dc:	7fefffff 	.word	0x7fefffff
 80121e0:	08017684 	.word	0x08017684
 80121e4:	08017688 	.word	0x08017688
 80121e8:	08017690 	.word	0x08017690
 80121ec:	0801768c 	.word	0x0801768c
 80121f0:	08017694 	.word	0x08017694
 80121f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80121f8:	429a      	cmp	r2, r3
 80121fa:	bfa8      	it	ge
 80121fc:	461a      	movge	r2, r3
 80121fe:	2a00      	cmp	r2, #0
 8012200:	4691      	mov	r9, r2
 8012202:	dc37      	bgt.n	8012274 <_printf_float+0x374>
 8012204:	f04f 0b00 	mov.w	fp, #0
 8012208:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801220c:	f104 021a 	add.w	r2, r4, #26
 8012210:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012212:	9305      	str	r3, [sp, #20]
 8012214:	eba3 0309 	sub.w	r3, r3, r9
 8012218:	455b      	cmp	r3, fp
 801221a:	dc33      	bgt.n	8012284 <_printf_float+0x384>
 801221c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012220:	429a      	cmp	r2, r3
 8012222:	db3b      	blt.n	801229c <_printf_float+0x39c>
 8012224:	6823      	ldr	r3, [r4, #0]
 8012226:	07da      	lsls	r2, r3, #31
 8012228:	d438      	bmi.n	801229c <_printf_float+0x39c>
 801222a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801222c:	9a05      	ldr	r2, [sp, #20]
 801222e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012230:	1a9a      	subs	r2, r3, r2
 8012232:	eba3 0901 	sub.w	r9, r3, r1
 8012236:	4591      	cmp	r9, r2
 8012238:	bfa8      	it	ge
 801223a:	4691      	movge	r9, r2
 801223c:	f1b9 0f00 	cmp.w	r9, #0
 8012240:	dc35      	bgt.n	80122ae <_printf_float+0x3ae>
 8012242:	f04f 0800 	mov.w	r8, #0
 8012246:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801224a:	f104 0a1a 	add.w	sl, r4, #26
 801224e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012252:	1a9b      	subs	r3, r3, r2
 8012254:	eba3 0309 	sub.w	r3, r3, r9
 8012258:	4543      	cmp	r3, r8
 801225a:	f77f af79 	ble.w	8012150 <_printf_float+0x250>
 801225e:	2301      	movs	r3, #1
 8012260:	4652      	mov	r2, sl
 8012262:	4631      	mov	r1, r6
 8012264:	4628      	mov	r0, r5
 8012266:	47b8      	blx	r7
 8012268:	3001      	adds	r0, #1
 801226a:	f43f aeaa 	beq.w	8011fc2 <_printf_float+0xc2>
 801226e:	f108 0801 	add.w	r8, r8, #1
 8012272:	e7ec      	b.n	801224e <_printf_float+0x34e>
 8012274:	4613      	mov	r3, r2
 8012276:	4631      	mov	r1, r6
 8012278:	4642      	mov	r2, r8
 801227a:	4628      	mov	r0, r5
 801227c:	47b8      	blx	r7
 801227e:	3001      	adds	r0, #1
 8012280:	d1c0      	bne.n	8012204 <_printf_float+0x304>
 8012282:	e69e      	b.n	8011fc2 <_printf_float+0xc2>
 8012284:	2301      	movs	r3, #1
 8012286:	4631      	mov	r1, r6
 8012288:	4628      	mov	r0, r5
 801228a:	9205      	str	r2, [sp, #20]
 801228c:	47b8      	blx	r7
 801228e:	3001      	adds	r0, #1
 8012290:	f43f ae97 	beq.w	8011fc2 <_printf_float+0xc2>
 8012294:	9a05      	ldr	r2, [sp, #20]
 8012296:	f10b 0b01 	add.w	fp, fp, #1
 801229a:	e7b9      	b.n	8012210 <_printf_float+0x310>
 801229c:	ee18 3a10 	vmov	r3, s16
 80122a0:	4652      	mov	r2, sl
 80122a2:	4631      	mov	r1, r6
 80122a4:	4628      	mov	r0, r5
 80122a6:	47b8      	blx	r7
 80122a8:	3001      	adds	r0, #1
 80122aa:	d1be      	bne.n	801222a <_printf_float+0x32a>
 80122ac:	e689      	b.n	8011fc2 <_printf_float+0xc2>
 80122ae:	9a05      	ldr	r2, [sp, #20]
 80122b0:	464b      	mov	r3, r9
 80122b2:	4442      	add	r2, r8
 80122b4:	4631      	mov	r1, r6
 80122b6:	4628      	mov	r0, r5
 80122b8:	47b8      	blx	r7
 80122ba:	3001      	adds	r0, #1
 80122bc:	d1c1      	bne.n	8012242 <_printf_float+0x342>
 80122be:	e680      	b.n	8011fc2 <_printf_float+0xc2>
 80122c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122c2:	2a01      	cmp	r2, #1
 80122c4:	dc01      	bgt.n	80122ca <_printf_float+0x3ca>
 80122c6:	07db      	lsls	r3, r3, #31
 80122c8:	d538      	bpl.n	801233c <_printf_float+0x43c>
 80122ca:	2301      	movs	r3, #1
 80122cc:	4642      	mov	r2, r8
 80122ce:	4631      	mov	r1, r6
 80122d0:	4628      	mov	r0, r5
 80122d2:	47b8      	blx	r7
 80122d4:	3001      	adds	r0, #1
 80122d6:	f43f ae74 	beq.w	8011fc2 <_printf_float+0xc2>
 80122da:	ee18 3a10 	vmov	r3, s16
 80122de:	4652      	mov	r2, sl
 80122e0:	4631      	mov	r1, r6
 80122e2:	4628      	mov	r0, r5
 80122e4:	47b8      	blx	r7
 80122e6:	3001      	adds	r0, #1
 80122e8:	f43f ae6b 	beq.w	8011fc2 <_printf_float+0xc2>
 80122ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80122f0:	2200      	movs	r2, #0
 80122f2:	2300      	movs	r3, #0
 80122f4:	f7ee fbe8 	bl	8000ac8 <__aeabi_dcmpeq>
 80122f8:	b9d8      	cbnz	r0, 8012332 <_printf_float+0x432>
 80122fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122fc:	f108 0201 	add.w	r2, r8, #1
 8012300:	3b01      	subs	r3, #1
 8012302:	4631      	mov	r1, r6
 8012304:	4628      	mov	r0, r5
 8012306:	47b8      	blx	r7
 8012308:	3001      	adds	r0, #1
 801230a:	d10e      	bne.n	801232a <_printf_float+0x42a>
 801230c:	e659      	b.n	8011fc2 <_printf_float+0xc2>
 801230e:	2301      	movs	r3, #1
 8012310:	4652      	mov	r2, sl
 8012312:	4631      	mov	r1, r6
 8012314:	4628      	mov	r0, r5
 8012316:	47b8      	blx	r7
 8012318:	3001      	adds	r0, #1
 801231a:	f43f ae52 	beq.w	8011fc2 <_printf_float+0xc2>
 801231e:	f108 0801 	add.w	r8, r8, #1
 8012322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012324:	3b01      	subs	r3, #1
 8012326:	4543      	cmp	r3, r8
 8012328:	dcf1      	bgt.n	801230e <_printf_float+0x40e>
 801232a:	464b      	mov	r3, r9
 801232c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012330:	e6dc      	b.n	80120ec <_printf_float+0x1ec>
 8012332:	f04f 0800 	mov.w	r8, #0
 8012336:	f104 0a1a 	add.w	sl, r4, #26
 801233a:	e7f2      	b.n	8012322 <_printf_float+0x422>
 801233c:	2301      	movs	r3, #1
 801233e:	4642      	mov	r2, r8
 8012340:	e7df      	b.n	8012302 <_printf_float+0x402>
 8012342:	2301      	movs	r3, #1
 8012344:	464a      	mov	r2, r9
 8012346:	4631      	mov	r1, r6
 8012348:	4628      	mov	r0, r5
 801234a:	47b8      	blx	r7
 801234c:	3001      	adds	r0, #1
 801234e:	f43f ae38 	beq.w	8011fc2 <_printf_float+0xc2>
 8012352:	f108 0801 	add.w	r8, r8, #1
 8012356:	68e3      	ldr	r3, [r4, #12]
 8012358:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801235a:	1a5b      	subs	r3, r3, r1
 801235c:	4543      	cmp	r3, r8
 801235e:	dcf0      	bgt.n	8012342 <_printf_float+0x442>
 8012360:	e6fa      	b.n	8012158 <_printf_float+0x258>
 8012362:	f04f 0800 	mov.w	r8, #0
 8012366:	f104 0919 	add.w	r9, r4, #25
 801236a:	e7f4      	b.n	8012356 <_printf_float+0x456>

0801236c <_printf_common>:
 801236c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012370:	4616      	mov	r6, r2
 8012372:	4699      	mov	r9, r3
 8012374:	688a      	ldr	r2, [r1, #8]
 8012376:	690b      	ldr	r3, [r1, #16]
 8012378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801237c:	4293      	cmp	r3, r2
 801237e:	bfb8      	it	lt
 8012380:	4613      	movlt	r3, r2
 8012382:	6033      	str	r3, [r6, #0]
 8012384:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012388:	4607      	mov	r7, r0
 801238a:	460c      	mov	r4, r1
 801238c:	b10a      	cbz	r2, 8012392 <_printf_common+0x26>
 801238e:	3301      	adds	r3, #1
 8012390:	6033      	str	r3, [r6, #0]
 8012392:	6823      	ldr	r3, [r4, #0]
 8012394:	0699      	lsls	r1, r3, #26
 8012396:	bf42      	ittt	mi
 8012398:	6833      	ldrmi	r3, [r6, #0]
 801239a:	3302      	addmi	r3, #2
 801239c:	6033      	strmi	r3, [r6, #0]
 801239e:	6825      	ldr	r5, [r4, #0]
 80123a0:	f015 0506 	ands.w	r5, r5, #6
 80123a4:	d106      	bne.n	80123b4 <_printf_common+0x48>
 80123a6:	f104 0a19 	add.w	sl, r4, #25
 80123aa:	68e3      	ldr	r3, [r4, #12]
 80123ac:	6832      	ldr	r2, [r6, #0]
 80123ae:	1a9b      	subs	r3, r3, r2
 80123b0:	42ab      	cmp	r3, r5
 80123b2:	dc26      	bgt.n	8012402 <_printf_common+0x96>
 80123b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80123b8:	1e13      	subs	r3, r2, #0
 80123ba:	6822      	ldr	r2, [r4, #0]
 80123bc:	bf18      	it	ne
 80123be:	2301      	movne	r3, #1
 80123c0:	0692      	lsls	r2, r2, #26
 80123c2:	d42b      	bmi.n	801241c <_printf_common+0xb0>
 80123c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80123c8:	4649      	mov	r1, r9
 80123ca:	4638      	mov	r0, r7
 80123cc:	47c0      	blx	r8
 80123ce:	3001      	adds	r0, #1
 80123d0:	d01e      	beq.n	8012410 <_printf_common+0xa4>
 80123d2:	6823      	ldr	r3, [r4, #0]
 80123d4:	68e5      	ldr	r5, [r4, #12]
 80123d6:	6832      	ldr	r2, [r6, #0]
 80123d8:	f003 0306 	and.w	r3, r3, #6
 80123dc:	2b04      	cmp	r3, #4
 80123de:	bf08      	it	eq
 80123e0:	1aad      	subeq	r5, r5, r2
 80123e2:	68a3      	ldr	r3, [r4, #8]
 80123e4:	6922      	ldr	r2, [r4, #16]
 80123e6:	bf0c      	ite	eq
 80123e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80123ec:	2500      	movne	r5, #0
 80123ee:	4293      	cmp	r3, r2
 80123f0:	bfc4      	itt	gt
 80123f2:	1a9b      	subgt	r3, r3, r2
 80123f4:	18ed      	addgt	r5, r5, r3
 80123f6:	2600      	movs	r6, #0
 80123f8:	341a      	adds	r4, #26
 80123fa:	42b5      	cmp	r5, r6
 80123fc:	d11a      	bne.n	8012434 <_printf_common+0xc8>
 80123fe:	2000      	movs	r0, #0
 8012400:	e008      	b.n	8012414 <_printf_common+0xa8>
 8012402:	2301      	movs	r3, #1
 8012404:	4652      	mov	r2, sl
 8012406:	4649      	mov	r1, r9
 8012408:	4638      	mov	r0, r7
 801240a:	47c0      	blx	r8
 801240c:	3001      	adds	r0, #1
 801240e:	d103      	bne.n	8012418 <_printf_common+0xac>
 8012410:	f04f 30ff 	mov.w	r0, #4294967295
 8012414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012418:	3501      	adds	r5, #1
 801241a:	e7c6      	b.n	80123aa <_printf_common+0x3e>
 801241c:	18e1      	adds	r1, r4, r3
 801241e:	1c5a      	adds	r2, r3, #1
 8012420:	2030      	movs	r0, #48	; 0x30
 8012422:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012426:	4422      	add	r2, r4
 8012428:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801242c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012430:	3302      	adds	r3, #2
 8012432:	e7c7      	b.n	80123c4 <_printf_common+0x58>
 8012434:	2301      	movs	r3, #1
 8012436:	4622      	mov	r2, r4
 8012438:	4649      	mov	r1, r9
 801243a:	4638      	mov	r0, r7
 801243c:	47c0      	blx	r8
 801243e:	3001      	adds	r0, #1
 8012440:	d0e6      	beq.n	8012410 <_printf_common+0xa4>
 8012442:	3601      	adds	r6, #1
 8012444:	e7d9      	b.n	80123fa <_printf_common+0x8e>
	...

08012448 <_printf_i>:
 8012448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801244c:	7e0f      	ldrb	r7, [r1, #24]
 801244e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012450:	2f78      	cmp	r7, #120	; 0x78
 8012452:	4691      	mov	r9, r2
 8012454:	4680      	mov	r8, r0
 8012456:	460c      	mov	r4, r1
 8012458:	469a      	mov	sl, r3
 801245a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801245e:	d807      	bhi.n	8012470 <_printf_i+0x28>
 8012460:	2f62      	cmp	r7, #98	; 0x62
 8012462:	d80a      	bhi.n	801247a <_printf_i+0x32>
 8012464:	2f00      	cmp	r7, #0
 8012466:	f000 80d8 	beq.w	801261a <_printf_i+0x1d2>
 801246a:	2f58      	cmp	r7, #88	; 0x58
 801246c:	f000 80a3 	beq.w	80125b6 <_printf_i+0x16e>
 8012470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012478:	e03a      	b.n	80124f0 <_printf_i+0xa8>
 801247a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801247e:	2b15      	cmp	r3, #21
 8012480:	d8f6      	bhi.n	8012470 <_printf_i+0x28>
 8012482:	a101      	add	r1, pc, #4	; (adr r1, 8012488 <_printf_i+0x40>)
 8012484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012488:	080124e1 	.word	0x080124e1
 801248c:	080124f5 	.word	0x080124f5
 8012490:	08012471 	.word	0x08012471
 8012494:	08012471 	.word	0x08012471
 8012498:	08012471 	.word	0x08012471
 801249c:	08012471 	.word	0x08012471
 80124a0:	080124f5 	.word	0x080124f5
 80124a4:	08012471 	.word	0x08012471
 80124a8:	08012471 	.word	0x08012471
 80124ac:	08012471 	.word	0x08012471
 80124b0:	08012471 	.word	0x08012471
 80124b4:	08012601 	.word	0x08012601
 80124b8:	08012525 	.word	0x08012525
 80124bc:	080125e3 	.word	0x080125e3
 80124c0:	08012471 	.word	0x08012471
 80124c4:	08012471 	.word	0x08012471
 80124c8:	08012623 	.word	0x08012623
 80124cc:	08012471 	.word	0x08012471
 80124d0:	08012525 	.word	0x08012525
 80124d4:	08012471 	.word	0x08012471
 80124d8:	08012471 	.word	0x08012471
 80124dc:	080125eb 	.word	0x080125eb
 80124e0:	682b      	ldr	r3, [r5, #0]
 80124e2:	1d1a      	adds	r2, r3, #4
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	602a      	str	r2, [r5, #0]
 80124e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80124ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80124f0:	2301      	movs	r3, #1
 80124f2:	e0a3      	b.n	801263c <_printf_i+0x1f4>
 80124f4:	6820      	ldr	r0, [r4, #0]
 80124f6:	6829      	ldr	r1, [r5, #0]
 80124f8:	0606      	lsls	r6, r0, #24
 80124fa:	f101 0304 	add.w	r3, r1, #4
 80124fe:	d50a      	bpl.n	8012516 <_printf_i+0xce>
 8012500:	680e      	ldr	r6, [r1, #0]
 8012502:	602b      	str	r3, [r5, #0]
 8012504:	2e00      	cmp	r6, #0
 8012506:	da03      	bge.n	8012510 <_printf_i+0xc8>
 8012508:	232d      	movs	r3, #45	; 0x2d
 801250a:	4276      	negs	r6, r6
 801250c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012510:	485e      	ldr	r0, [pc, #376]	; (801268c <_printf_i+0x244>)
 8012512:	230a      	movs	r3, #10
 8012514:	e019      	b.n	801254a <_printf_i+0x102>
 8012516:	680e      	ldr	r6, [r1, #0]
 8012518:	602b      	str	r3, [r5, #0]
 801251a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801251e:	bf18      	it	ne
 8012520:	b236      	sxthne	r6, r6
 8012522:	e7ef      	b.n	8012504 <_printf_i+0xbc>
 8012524:	682b      	ldr	r3, [r5, #0]
 8012526:	6820      	ldr	r0, [r4, #0]
 8012528:	1d19      	adds	r1, r3, #4
 801252a:	6029      	str	r1, [r5, #0]
 801252c:	0601      	lsls	r1, r0, #24
 801252e:	d501      	bpl.n	8012534 <_printf_i+0xec>
 8012530:	681e      	ldr	r6, [r3, #0]
 8012532:	e002      	b.n	801253a <_printf_i+0xf2>
 8012534:	0646      	lsls	r6, r0, #25
 8012536:	d5fb      	bpl.n	8012530 <_printf_i+0xe8>
 8012538:	881e      	ldrh	r6, [r3, #0]
 801253a:	4854      	ldr	r0, [pc, #336]	; (801268c <_printf_i+0x244>)
 801253c:	2f6f      	cmp	r7, #111	; 0x6f
 801253e:	bf0c      	ite	eq
 8012540:	2308      	moveq	r3, #8
 8012542:	230a      	movne	r3, #10
 8012544:	2100      	movs	r1, #0
 8012546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801254a:	6865      	ldr	r5, [r4, #4]
 801254c:	60a5      	str	r5, [r4, #8]
 801254e:	2d00      	cmp	r5, #0
 8012550:	bfa2      	ittt	ge
 8012552:	6821      	ldrge	r1, [r4, #0]
 8012554:	f021 0104 	bicge.w	r1, r1, #4
 8012558:	6021      	strge	r1, [r4, #0]
 801255a:	b90e      	cbnz	r6, 8012560 <_printf_i+0x118>
 801255c:	2d00      	cmp	r5, #0
 801255e:	d04d      	beq.n	80125fc <_printf_i+0x1b4>
 8012560:	4615      	mov	r5, r2
 8012562:	fbb6 f1f3 	udiv	r1, r6, r3
 8012566:	fb03 6711 	mls	r7, r3, r1, r6
 801256a:	5dc7      	ldrb	r7, [r0, r7]
 801256c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012570:	4637      	mov	r7, r6
 8012572:	42bb      	cmp	r3, r7
 8012574:	460e      	mov	r6, r1
 8012576:	d9f4      	bls.n	8012562 <_printf_i+0x11a>
 8012578:	2b08      	cmp	r3, #8
 801257a:	d10b      	bne.n	8012594 <_printf_i+0x14c>
 801257c:	6823      	ldr	r3, [r4, #0]
 801257e:	07de      	lsls	r6, r3, #31
 8012580:	d508      	bpl.n	8012594 <_printf_i+0x14c>
 8012582:	6923      	ldr	r3, [r4, #16]
 8012584:	6861      	ldr	r1, [r4, #4]
 8012586:	4299      	cmp	r1, r3
 8012588:	bfde      	ittt	le
 801258a:	2330      	movle	r3, #48	; 0x30
 801258c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012590:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012594:	1b52      	subs	r2, r2, r5
 8012596:	6122      	str	r2, [r4, #16]
 8012598:	f8cd a000 	str.w	sl, [sp]
 801259c:	464b      	mov	r3, r9
 801259e:	aa03      	add	r2, sp, #12
 80125a0:	4621      	mov	r1, r4
 80125a2:	4640      	mov	r0, r8
 80125a4:	f7ff fee2 	bl	801236c <_printf_common>
 80125a8:	3001      	adds	r0, #1
 80125aa:	d14c      	bne.n	8012646 <_printf_i+0x1fe>
 80125ac:	f04f 30ff 	mov.w	r0, #4294967295
 80125b0:	b004      	add	sp, #16
 80125b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125b6:	4835      	ldr	r0, [pc, #212]	; (801268c <_printf_i+0x244>)
 80125b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80125bc:	6829      	ldr	r1, [r5, #0]
 80125be:	6823      	ldr	r3, [r4, #0]
 80125c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80125c4:	6029      	str	r1, [r5, #0]
 80125c6:	061d      	lsls	r5, r3, #24
 80125c8:	d514      	bpl.n	80125f4 <_printf_i+0x1ac>
 80125ca:	07df      	lsls	r7, r3, #31
 80125cc:	bf44      	itt	mi
 80125ce:	f043 0320 	orrmi.w	r3, r3, #32
 80125d2:	6023      	strmi	r3, [r4, #0]
 80125d4:	b91e      	cbnz	r6, 80125de <_printf_i+0x196>
 80125d6:	6823      	ldr	r3, [r4, #0]
 80125d8:	f023 0320 	bic.w	r3, r3, #32
 80125dc:	6023      	str	r3, [r4, #0]
 80125de:	2310      	movs	r3, #16
 80125e0:	e7b0      	b.n	8012544 <_printf_i+0xfc>
 80125e2:	6823      	ldr	r3, [r4, #0]
 80125e4:	f043 0320 	orr.w	r3, r3, #32
 80125e8:	6023      	str	r3, [r4, #0]
 80125ea:	2378      	movs	r3, #120	; 0x78
 80125ec:	4828      	ldr	r0, [pc, #160]	; (8012690 <_printf_i+0x248>)
 80125ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80125f2:	e7e3      	b.n	80125bc <_printf_i+0x174>
 80125f4:	0659      	lsls	r1, r3, #25
 80125f6:	bf48      	it	mi
 80125f8:	b2b6      	uxthmi	r6, r6
 80125fa:	e7e6      	b.n	80125ca <_printf_i+0x182>
 80125fc:	4615      	mov	r5, r2
 80125fe:	e7bb      	b.n	8012578 <_printf_i+0x130>
 8012600:	682b      	ldr	r3, [r5, #0]
 8012602:	6826      	ldr	r6, [r4, #0]
 8012604:	6961      	ldr	r1, [r4, #20]
 8012606:	1d18      	adds	r0, r3, #4
 8012608:	6028      	str	r0, [r5, #0]
 801260a:	0635      	lsls	r5, r6, #24
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	d501      	bpl.n	8012614 <_printf_i+0x1cc>
 8012610:	6019      	str	r1, [r3, #0]
 8012612:	e002      	b.n	801261a <_printf_i+0x1d2>
 8012614:	0670      	lsls	r0, r6, #25
 8012616:	d5fb      	bpl.n	8012610 <_printf_i+0x1c8>
 8012618:	8019      	strh	r1, [r3, #0]
 801261a:	2300      	movs	r3, #0
 801261c:	6123      	str	r3, [r4, #16]
 801261e:	4615      	mov	r5, r2
 8012620:	e7ba      	b.n	8012598 <_printf_i+0x150>
 8012622:	682b      	ldr	r3, [r5, #0]
 8012624:	1d1a      	adds	r2, r3, #4
 8012626:	602a      	str	r2, [r5, #0]
 8012628:	681d      	ldr	r5, [r3, #0]
 801262a:	6862      	ldr	r2, [r4, #4]
 801262c:	2100      	movs	r1, #0
 801262e:	4628      	mov	r0, r5
 8012630:	f7ed fdd6 	bl	80001e0 <memchr>
 8012634:	b108      	cbz	r0, 801263a <_printf_i+0x1f2>
 8012636:	1b40      	subs	r0, r0, r5
 8012638:	6060      	str	r0, [r4, #4]
 801263a:	6863      	ldr	r3, [r4, #4]
 801263c:	6123      	str	r3, [r4, #16]
 801263e:	2300      	movs	r3, #0
 8012640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012644:	e7a8      	b.n	8012598 <_printf_i+0x150>
 8012646:	6923      	ldr	r3, [r4, #16]
 8012648:	462a      	mov	r2, r5
 801264a:	4649      	mov	r1, r9
 801264c:	4640      	mov	r0, r8
 801264e:	47d0      	blx	sl
 8012650:	3001      	adds	r0, #1
 8012652:	d0ab      	beq.n	80125ac <_printf_i+0x164>
 8012654:	6823      	ldr	r3, [r4, #0]
 8012656:	079b      	lsls	r3, r3, #30
 8012658:	d413      	bmi.n	8012682 <_printf_i+0x23a>
 801265a:	68e0      	ldr	r0, [r4, #12]
 801265c:	9b03      	ldr	r3, [sp, #12]
 801265e:	4298      	cmp	r0, r3
 8012660:	bfb8      	it	lt
 8012662:	4618      	movlt	r0, r3
 8012664:	e7a4      	b.n	80125b0 <_printf_i+0x168>
 8012666:	2301      	movs	r3, #1
 8012668:	4632      	mov	r2, r6
 801266a:	4649      	mov	r1, r9
 801266c:	4640      	mov	r0, r8
 801266e:	47d0      	blx	sl
 8012670:	3001      	adds	r0, #1
 8012672:	d09b      	beq.n	80125ac <_printf_i+0x164>
 8012674:	3501      	adds	r5, #1
 8012676:	68e3      	ldr	r3, [r4, #12]
 8012678:	9903      	ldr	r1, [sp, #12]
 801267a:	1a5b      	subs	r3, r3, r1
 801267c:	42ab      	cmp	r3, r5
 801267e:	dcf2      	bgt.n	8012666 <_printf_i+0x21e>
 8012680:	e7eb      	b.n	801265a <_printf_i+0x212>
 8012682:	2500      	movs	r5, #0
 8012684:	f104 0619 	add.w	r6, r4, #25
 8012688:	e7f5      	b.n	8012676 <_printf_i+0x22e>
 801268a:	bf00      	nop
 801268c:	08017696 	.word	0x08017696
 8012690:	080176a7 	.word	0x080176a7

08012694 <iprintf>:
 8012694:	b40f      	push	{r0, r1, r2, r3}
 8012696:	4b0a      	ldr	r3, [pc, #40]	; (80126c0 <iprintf+0x2c>)
 8012698:	b513      	push	{r0, r1, r4, lr}
 801269a:	681c      	ldr	r4, [r3, #0]
 801269c:	b124      	cbz	r4, 80126a8 <iprintf+0x14>
 801269e:	69a3      	ldr	r3, [r4, #24]
 80126a0:	b913      	cbnz	r3, 80126a8 <iprintf+0x14>
 80126a2:	4620      	mov	r0, r4
 80126a4:	f7ff f9c8 	bl	8011a38 <__sinit>
 80126a8:	ab05      	add	r3, sp, #20
 80126aa:	9a04      	ldr	r2, [sp, #16]
 80126ac:	68a1      	ldr	r1, [r4, #8]
 80126ae:	9301      	str	r3, [sp, #4]
 80126b0:	4620      	mov	r0, r4
 80126b2:	f002 f819 	bl	80146e8 <_vfiprintf_r>
 80126b6:	b002      	add	sp, #8
 80126b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126bc:	b004      	add	sp, #16
 80126be:	4770      	bx	lr
 80126c0:	200008cc 	.word	0x200008cc

080126c4 <_puts_r>:
 80126c4:	b570      	push	{r4, r5, r6, lr}
 80126c6:	460e      	mov	r6, r1
 80126c8:	4605      	mov	r5, r0
 80126ca:	b118      	cbz	r0, 80126d4 <_puts_r+0x10>
 80126cc:	6983      	ldr	r3, [r0, #24]
 80126ce:	b90b      	cbnz	r3, 80126d4 <_puts_r+0x10>
 80126d0:	f7ff f9b2 	bl	8011a38 <__sinit>
 80126d4:	69ab      	ldr	r3, [r5, #24]
 80126d6:	68ac      	ldr	r4, [r5, #8]
 80126d8:	b913      	cbnz	r3, 80126e0 <_puts_r+0x1c>
 80126da:	4628      	mov	r0, r5
 80126dc:	f7ff f9ac 	bl	8011a38 <__sinit>
 80126e0:	4b2c      	ldr	r3, [pc, #176]	; (8012794 <_puts_r+0xd0>)
 80126e2:	429c      	cmp	r4, r3
 80126e4:	d120      	bne.n	8012728 <_puts_r+0x64>
 80126e6:	686c      	ldr	r4, [r5, #4]
 80126e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126ea:	07db      	lsls	r3, r3, #31
 80126ec:	d405      	bmi.n	80126fa <_puts_r+0x36>
 80126ee:	89a3      	ldrh	r3, [r4, #12]
 80126f0:	0598      	lsls	r0, r3, #22
 80126f2:	d402      	bmi.n	80126fa <_puts_r+0x36>
 80126f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126f6:	f7ff fa62 	bl	8011bbe <__retarget_lock_acquire_recursive>
 80126fa:	89a3      	ldrh	r3, [r4, #12]
 80126fc:	0719      	lsls	r1, r3, #28
 80126fe:	d51d      	bpl.n	801273c <_puts_r+0x78>
 8012700:	6923      	ldr	r3, [r4, #16]
 8012702:	b1db      	cbz	r3, 801273c <_puts_r+0x78>
 8012704:	3e01      	subs	r6, #1
 8012706:	68a3      	ldr	r3, [r4, #8]
 8012708:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801270c:	3b01      	subs	r3, #1
 801270e:	60a3      	str	r3, [r4, #8]
 8012710:	bb39      	cbnz	r1, 8012762 <_puts_r+0x9e>
 8012712:	2b00      	cmp	r3, #0
 8012714:	da38      	bge.n	8012788 <_puts_r+0xc4>
 8012716:	4622      	mov	r2, r4
 8012718:	210a      	movs	r1, #10
 801271a:	4628      	mov	r0, r5
 801271c:	f000 f9be 	bl	8012a9c <__swbuf_r>
 8012720:	3001      	adds	r0, #1
 8012722:	d011      	beq.n	8012748 <_puts_r+0x84>
 8012724:	250a      	movs	r5, #10
 8012726:	e011      	b.n	801274c <_puts_r+0x88>
 8012728:	4b1b      	ldr	r3, [pc, #108]	; (8012798 <_puts_r+0xd4>)
 801272a:	429c      	cmp	r4, r3
 801272c:	d101      	bne.n	8012732 <_puts_r+0x6e>
 801272e:	68ac      	ldr	r4, [r5, #8]
 8012730:	e7da      	b.n	80126e8 <_puts_r+0x24>
 8012732:	4b1a      	ldr	r3, [pc, #104]	; (801279c <_puts_r+0xd8>)
 8012734:	429c      	cmp	r4, r3
 8012736:	bf08      	it	eq
 8012738:	68ec      	ldreq	r4, [r5, #12]
 801273a:	e7d5      	b.n	80126e8 <_puts_r+0x24>
 801273c:	4621      	mov	r1, r4
 801273e:	4628      	mov	r0, r5
 8012740:	f000 fa10 	bl	8012b64 <__swsetup_r>
 8012744:	2800      	cmp	r0, #0
 8012746:	d0dd      	beq.n	8012704 <_puts_r+0x40>
 8012748:	f04f 35ff 	mov.w	r5, #4294967295
 801274c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801274e:	07da      	lsls	r2, r3, #31
 8012750:	d405      	bmi.n	801275e <_puts_r+0x9a>
 8012752:	89a3      	ldrh	r3, [r4, #12]
 8012754:	059b      	lsls	r3, r3, #22
 8012756:	d402      	bmi.n	801275e <_puts_r+0x9a>
 8012758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801275a:	f7ff fa31 	bl	8011bc0 <__retarget_lock_release_recursive>
 801275e:	4628      	mov	r0, r5
 8012760:	bd70      	pop	{r4, r5, r6, pc}
 8012762:	2b00      	cmp	r3, #0
 8012764:	da04      	bge.n	8012770 <_puts_r+0xac>
 8012766:	69a2      	ldr	r2, [r4, #24]
 8012768:	429a      	cmp	r2, r3
 801276a:	dc06      	bgt.n	801277a <_puts_r+0xb6>
 801276c:	290a      	cmp	r1, #10
 801276e:	d004      	beq.n	801277a <_puts_r+0xb6>
 8012770:	6823      	ldr	r3, [r4, #0]
 8012772:	1c5a      	adds	r2, r3, #1
 8012774:	6022      	str	r2, [r4, #0]
 8012776:	7019      	strb	r1, [r3, #0]
 8012778:	e7c5      	b.n	8012706 <_puts_r+0x42>
 801277a:	4622      	mov	r2, r4
 801277c:	4628      	mov	r0, r5
 801277e:	f000 f98d 	bl	8012a9c <__swbuf_r>
 8012782:	3001      	adds	r0, #1
 8012784:	d1bf      	bne.n	8012706 <_puts_r+0x42>
 8012786:	e7df      	b.n	8012748 <_puts_r+0x84>
 8012788:	6823      	ldr	r3, [r4, #0]
 801278a:	250a      	movs	r5, #10
 801278c:	1c5a      	adds	r2, r3, #1
 801278e:	6022      	str	r2, [r4, #0]
 8012790:	701d      	strb	r5, [r3, #0]
 8012792:	e7db      	b.n	801274c <_puts_r+0x88>
 8012794:	08017640 	.word	0x08017640
 8012798:	08017660 	.word	0x08017660
 801279c:	08017620 	.word	0x08017620

080127a0 <puts>:
 80127a0:	4b02      	ldr	r3, [pc, #8]	; (80127ac <puts+0xc>)
 80127a2:	4601      	mov	r1, r0
 80127a4:	6818      	ldr	r0, [r3, #0]
 80127a6:	f7ff bf8d 	b.w	80126c4 <_puts_r>
 80127aa:	bf00      	nop
 80127ac:	200008cc 	.word	0x200008cc

080127b0 <cleanup_glue>:
 80127b0:	b538      	push	{r3, r4, r5, lr}
 80127b2:	460c      	mov	r4, r1
 80127b4:	6809      	ldr	r1, [r1, #0]
 80127b6:	4605      	mov	r5, r0
 80127b8:	b109      	cbz	r1, 80127be <cleanup_glue+0xe>
 80127ba:	f7ff fff9 	bl	80127b0 <cleanup_glue>
 80127be:	4621      	mov	r1, r4
 80127c0:	4628      	mov	r0, r5
 80127c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127c6:	f7ff ba1b 	b.w	8011c00 <_free_r>
	...

080127cc <_reclaim_reent>:
 80127cc:	4b2c      	ldr	r3, [pc, #176]	; (8012880 <_reclaim_reent+0xb4>)
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	4283      	cmp	r3, r0
 80127d2:	b570      	push	{r4, r5, r6, lr}
 80127d4:	4604      	mov	r4, r0
 80127d6:	d051      	beq.n	801287c <_reclaim_reent+0xb0>
 80127d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80127da:	b143      	cbz	r3, 80127ee <_reclaim_reent+0x22>
 80127dc:	68db      	ldr	r3, [r3, #12]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d14a      	bne.n	8012878 <_reclaim_reent+0xac>
 80127e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127e4:	6819      	ldr	r1, [r3, #0]
 80127e6:	b111      	cbz	r1, 80127ee <_reclaim_reent+0x22>
 80127e8:	4620      	mov	r0, r4
 80127ea:	f7ff fa09 	bl	8011c00 <_free_r>
 80127ee:	6961      	ldr	r1, [r4, #20]
 80127f0:	b111      	cbz	r1, 80127f8 <_reclaim_reent+0x2c>
 80127f2:	4620      	mov	r0, r4
 80127f4:	f7ff fa04 	bl	8011c00 <_free_r>
 80127f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80127fa:	b111      	cbz	r1, 8012802 <_reclaim_reent+0x36>
 80127fc:	4620      	mov	r0, r4
 80127fe:	f7ff f9ff 	bl	8011c00 <_free_r>
 8012802:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012804:	b111      	cbz	r1, 801280c <_reclaim_reent+0x40>
 8012806:	4620      	mov	r0, r4
 8012808:	f7ff f9fa 	bl	8011c00 <_free_r>
 801280c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801280e:	b111      	cbz	r1, 8012816 <_reclaim_reent+0x4a>
 8012810:	4620      	mov	r0, r4
 8012812:	f7ff f9f5 	bl	8011c00 <_free_r>
 8012816:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012818:	b111      	cbz	r1, 8012820 <_reclaim_reent+0x54>
 801281a:	4620      	mov	r0, r4
 801281c:	f7ff f9f0 	bl	8011c00 <_free_r>
 8012820:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012822:	b111      	cbz	r1, 801282a <_reclaim_reent+0x5e>
 8012824:	4620      	mov	r0, r4
 8012826:	f7ff f9eb 	bl	8011c00 <_free_r>
 801282a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801282c:	b111      	cbz	r1, 8012834 <_reclaim_reent+0x68>
 801282e:	4620      	mov	r0, r4
 8012830:	f7ff f9e6 	bl	8011c00 <_free_r>
 8012834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012836:	b111      	cbz	r1, 801283e <_reclaim_reent+0x72>
 8012838:	4620      	mov	r0, r4
 801283a:	f7ff f9e1 	bl	8011c00 <_free_r>
 801283e:	69a3      	ldr	r3, [r4, #24]
 8012840:	b1e3      	cbz	r3, 801287c <_reclaim_reent+0xb0>
 8012842:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012844:	4620      	mov	r0, r4
 8012846:	4798      	blx	r3
 8012848:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801284a:	b1b9      	cbz	r1, 801287c <_reclaim_reent+0xb0>
 801284c:	4620      	mov	r0, r4
 801284e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012852:	f7ff bfad 	b.w	80127b0 <cleanup_glue>
 8012856:	5949      	ldr	r1, [r1, r5]
 8012858:	b941      	cbnz	r1, 801286c <_reclaim_reent+0xa0>
 801285a:	3504      	adds	r5, #4
 801285c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801285e:	2d80      	cmp	r5, #128	; 0x80
 8012860:	68d9      	ldr	r1, [r3, #12]
 8012862:	d1f8      	bne.n	8012856 <_reclaim_reent+0x8a>
 8012864:	4620      	mov	r0, r4
 8012866:	f7ff f9cb 	bl	8011c00 <_free_r>
 801286a:	e7ba      	b.n	80127e2 <_reclaim_reent+0x16>
 801286c:	680e      	ldr	r6, [r1, #0]
 801286e:	4620      	mov	r0, r4
 8012870:	f7ff f9c6 	bl	8011c00 <_free_r>
 8012874:	4631      	mov	r1, r6
 8012876:	e7ef      	b.n	8012858 <_reclaim_reent+0x8c>
 8012878:	2500      	movs	r5, #0
 801287a:	e7ef      	b.n	801285c <_reclaim_reent+0x90>
 801287c:	bd70      	pop	{r4, r5, r6, pc}
 801287e:	bf00      	nop
 8012880:	200008cc 	.word	0x200008cc

08012884 <_sbrk_r>:
 8012884:	b538      	push	{r3, r4, r5, lr}
 8012886:	4d06      	ldr	r5, [pc, #24]	; (80128a0 <_sbrk_r+0x1c>)
 8012888:	2300      	movs	r3, #0
 801288a:	4604      	mov	r4, r0
 801288c:	4608      	mov	r0, r1
 801288e:	602b      	str	r3, [r5, #0]
 8012890:	f7ef fd9c 	bl	80023cc <_sbrk>
 8012894:	1c43      	adds	r3, r0, #1
 8012896:	d102      	bne.n	801289e <_sbrk_r+0x1a>
 8012898:	682b      	ldr	r3, [r5, #0]
 801289a:	b103      	cbz	r3, 801289e <_sbrk_r+0x1a>
 801289c:	6023      	str	r3, [r4, #0]
 801289e:	bd38      	pop	{r3, r4, r5, pc}
 80128a0:	20005218 	.word	0x20005218

080128a4 <siprintf>:
 80128a4:	b40e      	push	{r1, r2, r3}
 80128a6:	b500      	push	{lr}
 80128a8:	b09c      	sub	sp, #112	; 0x70
 80128aa:	ab1d      	add	r3, sp, #116	; 0x74
 80128ac:	9002      	str	r0, [sp, #8]
 80128ae:	9006      	str	r0, [sp, #24]
 80128b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80128b4:	4809      	ldr	r0, [pc, #36]	; (80128dc <siprintf+0x38>)
 80128b6:	9107      	str	r1, [sp, #28]
 80128b8:	9104      	str	r1, [sp, #16]
 80128ba:	4909      	ldr	r1, [pc, #36]	; (80128e0 <siprintf+0x3c>)
 80128bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80128c0:	9105      	str	r1, [sp, #20]
 80128c2:	6800      	ldr	r0, [r0, #0]
 80128c4:	9301      	str	r3, [sp, #4]
 80128c6:	a902      	add	r1, sp, #8
 80128c8:	f001 fde4 	bl	8014494 <_svfiprintf_r>
 80128cc:	9b02      	ldr	r3, [sp, #8]
 80128ce:	2200      	movs	r2, #0
 80128d0:	701a      	strb	r2, [r3, #0]
 80128d2:	b01c      	add	sp, #112	; 0x70
 80128d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80128d8:	b003      	add	sp, #12
 80128da:	4770      	bx	lr
 80128dc:	200008cc 	.word	0x200008cc
 80128e0:	ffff0208 	.word	0xffff0208

080128e4 <__sread>:
 80128e4:	b510      	push	{r4, lr}
 80128e6:	460c      	mov	r4, r1
 80128e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128ec:	f002 f82c 	bl	8014948 <_read_r>
 80128f0:	2800      	cmp	r0, #0
 80128f2:	bfab      	itete	ge
 80128f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80128f6:	89a3      	ldrhlt	r3, [r4, #12]
 80128f8:	181b      	addge	r3, r3, r0
 80128fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80128fe:	bfac      	ite	ge
 8012900:	6563      	strge	r3, [r4, #84]	; 0x54
 8012902:	81a3      	strhlt	r3, [r4, #12]
 8012904:	bd10      	pop	{r4, pc}

08012906 <__swrite>:
 8012906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801290a:	461f      	mov	r7, r3
 801290c:	898b      	ldrh	r3, [r1, #12]
 801290e:	05db      	lsls	r3, r3, #23
 8012910:	4605      	mov	r5, r0
 8012912:	460c      	mov	r4, r1
 8012914:	4616      	mov	r6, r2
 8012916:	d505      	bpl.n	8012924 <__swrite+0x1e>
 8012918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801291c:	2302      	movs	r3, #2
 801291e:	2200      	movs	r2, #0
 8012920:	f001 f910 	bl	8013b44 <_lseek_r>
 8012924:	89a3      	ldrh	r3, [r4, #12]
 8012926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801292a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801292e:	81a3      	strh	r3, [r4, #12]
 8012930:	4632      	mov	r2, r6
 8012932:	463b      	mov	r3, r7
 8012934:	4628      	mov	r0, r5
 8012936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801293a:	f000 b901 	b.w	8012b40 <_write_r>

0801293e <__sseek>:
 801293e:	b510      	push	{r4, lr}
 8012940:	460c      	mov	r4, r1
 8012942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012946:	f001 f8fd 	bl	8013b44 <_lseek_r>
 801294a:	1c43      	adds	r3, r0, #1
 801294c:	89a3      	ldrh	r3, [r4, #12]
 801294e:	bf15      	itete	ne
 8012950:	6560      	strne	r0, [r4, #84]	; 0x54
 8012952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801295a:	81a3      	strheq	r3, [r4, #12]
 801295c:	bf18      	it	ne
 801295e:	81a3      	strhne	r3, [r4, #12]
 8012960:	bd10      	pop	{r4, pc}

08012962 <__sclose>:
 8012962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012966:	f000 b989 	b.w	8012c7c <_close_r>

0801296a <strncmp>:
 801296a:	b510      	push	{r4, lr}
 801296c:	b17a      	cbz	r2, 801298e <strncmp+0x24>
 801296e:	4603      	mov	r3, r0
 8012970:	3901      	subs	r1, #1
 8012972:	1884      	adds	r4, r0, r2
 8012974:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012978:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801297c:	4290      	cmp	r0, r2
 801297e:	d101      	bne.n	8012984 <strncmp+0x1a>
 8012980:	42a3      	cmp	r3, r4
 8012982:	d101      	bne.n	8012988 <strncmp+0x1e>
 8012984:	1a80      	subs	r0, r0, r2
 8012986:	bd10      	pop	{r4, pc}
 8012988:	2800      	cmp	r0, #0
 801298a:	d1f3      	bne.n	8012974 <strncmp+0xa>
 801298c:	e7fa      	b.n	8012984 <strncmp+0x1a>
 801298e:	4610      	mov	r0, r2
 8012990:	e7f9      	b.n	8012986 <strncmp+0x1c>

08012992 <strncpy>:
 8012992:	b510      	push	{r4, lr}
 8012994:	3901      	subs	r1, #1
 8012996:	4603      	mov	r3, r0
 8012998:	b132      	cbz	r2, 80129a8 <strncpy+0x16>
 801299a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801299e:	f803 4b01 	strb.w	r4, [r3], #1
 80129a2:	3a01      	subs	r2, #1
 80129a4:	2c00      	cmp	r4, #0
 80129a6:	d1f7      	bne.n	8012998 <strncpy+0x6>
 80129a8:	441a      	add	r2, r3
 80129aa:	2100      	movs	r1, #0
 80129ac:	4293      	cmp	r3, r2
 80129ae:	d100      	bne.n	80129b2 <strncpy+0x20>
 80129b0:	bd10      	pop	{r4, pc}
 80129b2:	f803 1b01 	strb.w	r1, [r3], #1
 80129b6:	e7f9      	b.n	80129ac <strncpy+0x1a>

080129b8 <strstr>:
 80129b8:	780a      	ldrb	r2, [r1, #0]
 80129ba:	b570      	push	{r4, r5, r6, lr}
 80129bc:	b96a      	cbnz	r2, 80129da <strstr+0x22>
 80129be:	bd70      	pop	{r4, r5, r6, pc}
 80129c0:	429a      	cmp	r2, r3
 80129c2:	d109      	bne.n	80129d8 <strstr+0x20>
 80129c4:	460c      	mov	r4, r1
 80129c6:	4605      	mov	r5, r0
 80129c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d0f6      	beq.n	80129be <strstr+0x6>
 80129d0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80129d4:	429e      	cmp	r6, r3
 80129d6:	d0f7      	beq.n	80129c8 <strstr+0x10>
 80129d8:	3001      	adds	r0, #1
 80129da:	7803      	ldrb	r3, [r0, #0]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d1ef      	bne.n	80129c0 <strstr+0x8>
 80129e0:	4618      	mov	r0, r3
 80129e2:	e7ec      	b.n	80129be <strstr+0x6>

080129e4 <strtok>:
 80129e4:	4b16      	ldr	r3, [pc, #88]	; (8012a40 <strtok+0x5c>)
 80129e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80129e8:	681e      	ldr	r6, [r3, #0]
 80129ea:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80129ec:	4605      	mov	r5, r0
 80129ee:	b9fc      	cbnz	r4, 8012a30 <strtok+0x4c>
 80129f0:	2050      	movs	r0, #80	; 0x50
 80129f2:	9101      	str	r1, [sp, #4]
 80129f4:	f7ff f8e6 	bl	8011bc4 <malloc>
 80129f8:	9901      	ldr	r1, [sp, #4]
 80129fa:	65b0      	str	r0, [r6, #88]	; 0x58
 80129fc:	4602      	mov	r2, r0
 80129fe:	b920      	cbnz	r0, 8012a0a <strtok+0x26>
 8012a00:	4b10      	ldr	r3, [pc, #64]	; (8012a44 <strtok+0x60>)
 8012a02:	4811      	ldr	r0, [pc, #68]	; (8012a48 <strtok+0x64>)
 8012a04:	2157      	movs	r1, #87	; 0x57
 8012a06:	f000 f91b 	bl	8012c40 <__assert_func>
 8012a0a:	e9c0 4400 	strd	r4, r4, [r0]
 8012a0e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012a12:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012a16:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012a1a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012a1e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012a22:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012a26:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012a2a:	6184      	str	r4, [r0, #24]
 8012a2c:	7704      	strb	r4, [r0, #28]
 8012a2e:	6244      	str	r4, [r0, #36]	; 0x24
 8012a30:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8012a32:	2301      	movs	r3, #1
 8012a34:	4628      	mov	r0, r5
 8012a36:	b002      	add	sp, #8
 8012a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a3c:	f000 b806 	b.w	8012a4c <__strtok_r>
 8012a40:	200008cc 	.word	0x200008cc
 8012a44:	080176b8 	.word	0x080176b8
 8012a48:	080176cf 	.word	0x080176cf

08012a4c <__strtok_r>:
 8012a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a4e:	b908      	cbnz	r0, 8012a54 <__strtok_r+0x8>
 8012a50:	6810      	ldr	r0, [r2, #0]
 8012a52:	b188      	cbz	r0, 8012a78 <__strtok_r+0x2c>
 8012a54:	4604      	mov	r4, r0
 8012a56:	4620      	mov	r0, r4
 8012a58:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012a5c:	460f      	mov	r7, r1
 8012a5e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012a62:	b91e      	cbnz	r6, 8012a6c <__strtok_r+0x20>
 8012a64:	b965      	cbnz	r5, 8012a80 <__strtok_r+0x34>
 8012a66:	6015      	str	r5, [r2, #0]
 8012a68:	4628      	mov	r0, r5
 8012a6a:	e005      	b.n	8012a78 <__strtok_r+0x2c>
 8012a6c:	42b5      	cmp	r5, r6
 8012a6e:	d1f6      	bne.n	8012a5e <__strtok_r+0x12>
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d1f0      	bne.n	8012a56 <__strtok_r+0xa>
 8012a74:	6014      	str	r4, [r2, #0]
 8012a76:	7003      	strb	r3, [r0, #0]
 8012a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a7a:	461c      	mov	r4, r3
 8012a7c:	e00c      	b.n	8012a98 <__strtok_r+0x4c>
 8012a7e:	b915      	cbnz	r5, 8012a86 <__strtok_r+0x3a>
 8012a80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012a84:	460e      	mov	r6, r1
 8012a86:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012a8a:	42ab      	cmp	r3, r5
 8012a8c:	d1f7      	bne.n	8012a7e <__strtok_r+0x32>
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d0f3      	beq.n	8012a7a <__strtok_r+0x2e>
 8012a92:	2300      	movs	r3, #0
 8012a94:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012a98:	6014      	str	r4, [r2, #0]
 8012a9a:	e7ed      	b.n	8012a78 <__strtok_r+0x2c>

08012a9c <__swbuf_r>:
 8012a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a9e:	460e      	mov	r6, r1
 8012aa0:	4614      	mov	r4, r2
 8012aa2:	4605      	mov	r5, r0
 8012aa4:	b118      	cbz	r0, 8012aae <__swbuf_r+0x12>
 8012aa6:	6983      	ldr	r3, [r0, #24]
 8012aa8:	b90b      	cbnz	r3, 8012aae <__swbuf_r+0x12>
 8012aaa:	f7fe ffc5 	bl	8011a38 <__sinit>
 8012aae:	4b21      	ldr	r3, [pc, #132]	; (8012b34 <__swbuf_r+0x98>)
 8012ab0:	429c      	cmp	r4, r3
 8012ab2:	d12b      	bne.n	8012b0c <__swbuf_r+0x70>
 8012ab4:	686c      	ldr	r4, [r5, #4]
 8012ab6:	69a3      	ldr	r3, [r4, #24]
 8012ab8:	60a3      	str	r3, [r4, #8]
 8012aba:	89a3      	ldrh	r3, [r4, #12]
 8012abc:	071a      	lsls	r2, r3, #28
 8012abe:	d52f      	bpl.n	8012b20 <__swbuf_r+0x84>
 8012ac0:	6923      	ldr	r3, [r4, #16]
 8012ac2:	b36b      	cbz	r3, 8012b20 <__swbuf_r+0x84>
 8012ac4:	6923      	ldr	r3, [r4, #16]
 8012ac6:	6820      	ldr	r0, [r4, #0]
 8012ac8:	1ac0      	subs	r0, r0, r3
 8012aca:	6963      	ldr	r3, [r4, #20]
 8012acc:	b2f6      	uxtb	r6, r6
 8012ace:	4283      	cmp	r3, r0
 8012ad0:	4637      	mov	r7, r6
 8012ad2:	dc04      	bgt.n	8012ade <__swbuf_r+0x42>
 8012ad4:	4621      	mov	r1, r4
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	f000 ffe2 	bl	8013aa0 <_fflush_r>
 8012adc:	bb30      	cbnz	r0, 8012b2c <__swbuf_r+0x90>
 8012ade:	68a3      	ldr	r3, [r4, #8]
 8012ae0:	3b01      	subs	r3, #1
 8012ae2:	60a3      	str	r3, [r4, #8]
 8012ae4:	6823      	ldr	r3, [r4, #0]
 8012ae6:	1c5a      	adds	r2, r3, #1
 8012ae8:	6022      	str	r2, [r4, #0]
 8012aea:	701e      	strb	r6, [r3, #0]
 8012aec:	6963      	ldr	r3, [r4, #20]
 8012aee:	3001      	adds	r0, #1
 8012af0:	4283      	cmp	r3, r0
 8012af2:	d004      	beq.n	8012afe <__swbuf_r+0x62>
 8012af4:	89a3      	ldrh	r3, [r4, #12]
 8012af6:	07db      	lsls	r3, r3, #31
 8012af8:	d506      	bpl.n	8012b08 <__swbuf_r+0x6c>
 8012afa:	2e0a      	cmp	r6, #10
 8012afc:	d104      	bne.n	8012b08 <__swbuf_r+0x6c>
 8012afe:	4621      	mov	r1, r4
 8012b00:	4628      	mov	r0, r5
 8012b02:	f000 ffcd 	bl	8013aa0 <_fflush_r>
 8012b06:	b988      	cbnz	r0, 8012b2c <__swbuf_r+0x90>
 8012b08:	4638      	mov	r0, r7
 8012b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b0c:	4b0a      	ldr	r3, [pc, #40]	; (8012b38 <__swbuf_r+0x9c>)
 8012b0e:	429c      	cmp	r4, r3
 8012b10:	d101      	bne.n	8012b16 <__swbuf_r+0x7a>
 8012b12:	68ac      	ldr	r4, [r5, #8]
 8012b14:	e7cf      	b.n	8012ab6 <__swbuf_r+0x1a>
 8012b16:	4b09      	ldr	r3, [pc, #36]	; (8012b3c <__swbuf_r+0xa0>)
 8012b18:	429c      	cmp	r4, r3
 8012b1a:	bf08      	it	eq
 8012b1c:	68ec      	ldreq	r4, [r5, #12]
 8012b1e:	e7ca      	b.n	8012ab6 <__swbuf_r+0x1a>
 8012b20:	4621      	mov	r1, r4
 8012b22:	4628      	mov	r0, r5
 8012b24:	f000 f81e 	bl	8012b64 <__swsetup_r>
 8012b28:	2800      	cmp	r0, #0
 8012b2a:	d0cb      	beq.n	8012ac4 <__swbuf_r+0x28>
 8012b2c:	f04f 37ff 	mov.w	r7, #4294967295
 8012b30:	e7ea      	b.n	8012b08 <__swbuf_r+0x6c>
 8012b32:	bf00      	nop
 8012b34:	08017640 	.word	0x08017640
 8012b38:	08017660 	.word	0x08017660
 8012b3c:	08017620 	.word	0x08017620

08012b40 <_write_r>:
 8012b40:	b538      	push	{r3, r4, r5, lr}
 8012b42:	4d07      	ldr	r5, [pc, #28]	; (8012b60 <_write_r+0x20>)
 8012b44:	4604      	mov	r4, r0
 8012b46:	4608      	mov	r0, r1
 8012b48:	4611      	mov	r1, r2
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	602a      	str	r2, [r5, #0]
 8012b4e:	461a      	mov	r2, r3
 8012b50:	f7ef fbeb 	bl	800232a <_write>
 8012b54:	1c43      	adds	r3, r0, #1
 8012b56:	d102      	bne.n	8012b5e <_write_r+0x1e>
 8012b58:	682b      	ldr	r3, [r5, #0]
 8012b5a:	b103      	cbz	r3, 8012b5e <_write_r+0x1e>
 8012b5c:	6023      	str	r3, [r4, #0]
 8012b5e:	bd38      	pop	{r3, r4, r5, pc}
 8012b60:	20005218 	.word	0x20005218

08012b64 <__swsetup_r>:
 8012b64:	4b32      	ldr	r3, [pc, #200]	; (8012c30 <__swsetup_r+0xcc>)
 8012b66:	b570      	push	{r4, r5, r6, lr}
 8012b68:	681d      	ldr	r5, [r3, #0]
 8012b6a:	4606      	mov	r6, r0
 8012b6c:	460c      	mov	r4, r1
 8012b6e:	b125      	cbz	r5, 8012b7a <__swsetup_r+0x16>
 8012b70:	69ab      	ldr	r3, [r5, #24]
 8012b72:	b913      	cbnz	r3, 8012b7a <__swsetup_r+0x16>
 8012b74:	4628      	mov	r0, r5
 8012b76:	f7fe ff5f 	bl	8011a38 <__sinit>
 8012b7a:	4b2e      	ldr	r3, [pc, #184]	; (8012c34 <__swsetup_r+0xd0>)
 8012b7c:	429c      	cmp	r4, r3
 8012b7e:	d10f      	bne.n	8012ba0 <__swsetup_r+0x3c>
 8012b80:	686c      	ldr	r4, [r5, #4]
 8012b82:	89a3      	ldrh	r3, [r4, #12]
 8012b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b88:	0719      	lsls	r1, r3, #28
 8012b8a:	d42c      	bmi.n	8012be6 <__swsetup_r+0x82>
 8012b8c:	06dd      	lsls	r5, r3, #27
 8012b8e:	d411      	bmi.n	8012bb4 <__swsetup_r+0x50>
 8012b90:	2309      	movs	r3, #9
 8012b92:	6033      	str	r3, [r6, #0]
 8012b94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012b98:	81a3      	strh	r3, [r4, #12]
 8012b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8012b9e:	e03e      	b.n	8012c1e <__swsetup_r+0xba>
 8012ba0:	4b25      	ldr	r3, [pc, #148]	; (8012c38 <__swsetup_r+0xd4>)
 8012ba2:	429c      	cmp	r4, r3
 8012ba4:	d101      	bne.n	8012baa <__swsetup_r+0x46>
 8012ba6:	68ac      	ldr	r4, [r5, #8]
 8012ba8:	e7eb      	b.n	8012b82 <__swsetup_r+0x1e>
 8012baa:	4b24      	ldr	r3, [pc, #144]	; (8012c3c <__swsetup_r+0xd8>)
 8012bac:	429c      	cmp	r4, r3
 8012bae:	bf08      	it	eq
 8012bb0:	68ec      	ldreq	r4, [r5, #12]
 8012bb2:	e7e6      	b.n	8012b82 <__swsetup_r+0x1e>
 8012bb4:	0758      	lsls	r0, r3, #29
 8012bb6:	d512      	bpl.n	8012bde <__swsetup_r+0x7a>
 8012bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012bba:	b141      	cbz	r1, 8012bce <__swsetup_r+0x6a>
 8012bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012bc0:	4299      	cmp	r1, r3
 8012bc2:	d002      	beq.n	8012bca <__swsetup_r+0x66>
 8012bc4:	4630      	mov	r0, r6
 8012bc6:	f7ff f81b 	bl	8011c00 <_free_r>
 8012bca:	2300      	movs	r3, #0
 8012bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8012bce:	89a3      	ldrh	r3, [r4, #12]
 8012bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012bd4:	81a3      	strh	r3, [r4, #12]
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	6063      	str	r3, [r4, #4]
 8012bda:	6923      	ldr	r3, [r4, #16]
 8012bdc:	6023      	str	r3, [r4, #0]
 8012bde:	89a3      	ldrh	r3, [r4, #12]
 8012be0:	f043 0308 	orr.w	r3, r3, #8
 8012be4:	81a3      	strh	r3, [r4, #12]
 8012be6:	6923      	ldr	r3, [r4, #16]
 8012be8:	b94b      	cbnz	r3, 8012bfe <__swsetup_r+0x9a>
 8012bea:	89a3      	ldrh	r3, [r4, #12]
 8012bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012bf4:	d003      	beq.n	8012bfe <__swsetup_r+0x9a>
 8012bf6:	4621      	mov	r1, r4
 8012bf8:	4630      	mov	r0, r6
 8012bfa:	f000 ffdb 	bl	8013bb4 <__smakebuf_r>
 8012bfe:	89a0      	ldrh	r0, [r4, #12]
 8012c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c04:	f010 0301 	ands.w	r3, r0, #1
 8012c08:	d00a      	beq.n	8012c20 <__swsetup_r+0xbc>
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	60a3      	str	r3, [r4, #8]
 8012c0e:	6963      	ldr	r3, [r4, #20]
 8012c10:	425b      	negs	r3, r3
 8012c12:	61a3      	str	r3, [r4, #24]
 8012c14:	6923      	ldr	r3, [r4, #16]
 8012c16:	b943      	cbnz	r3, 8012c2a <__swsetup_r+0xc6>
 8012c18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012c1c:	d1ba      	bne.n	8012b94 <__swsetup_r+0x30>
 8012c1e:	bd70      	pop	{r4, r5, r6, pc}
 8012c20:	0781      	lsls	r1, r0, #30
 8012c22:	bf58      	it	pl
 8012c24:	6963      	ldrpl	r3, [r4, #20]
 8012c26:	60a3      	str	r3, [r4, #8]
 8012c28:	e7f4      	b.n	8012c14 <__swsetup_r+0xb0>
 8012c2a:	2000      	movs	r0, #0
 8012c2c:	e7f7      	b.n	8012c1e <__swsetup_r+0xba>
 8012c2e:	bf00      	nop
 8012c30:	200008cc 	.word	0x200008cc
 8012c34:	08017640 	.word	0x08017640
 8012c38:	08017660 	.word	0x08017660
 8012c3c:	08017620 	.word	0x08017620

08012c40 <__assert_func>:
 8012c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c42:	4614      	mov	r4, r2
 8012c44:	461a      	mov	r2, r3
 8012c46:	4b09      	ldr	r3, [pc, #36]	; (8012c6c <__assert_func+0x2c>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	4605      	mov	r5, r0
 8012c4c:	68d8      	ldr	r0, [r3, #12]
 8012c4e:	b14c      	cbz	r4, 8012c64 <__assert_func+0x24>
 8012c50:	4b07      	ldr	r3, [pc, #28]	; (8012c70 <__assert_func+0x30>)
 8012c52:	9100      	str	r1, [sp, #0]
 8012c54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012c58:	4906      	ldr	r1, [pc, #24]	; (8012c74 <__assert_func+0x34>)
 8012c5a:	462b      	mov	r3, r5
 8012c5c:	f000 ff5c 	bl	8013b18 <fiprintf>
 8012c60:	f001 fe84 	bl	801496c <abort>
 8012c64:	4b04      	ldr	r3, [pc, #16]	; (8012c78 <__assert_func+0x38>)
 8012c66:	461c      	mov	r4, r3
 8012c68:	e7f3      	b.n	8012c52 <__assert_func+0x12>
 8012c6a:	bf00      	nop
 8012c6c:	200008cc 	.word	0x200008cc
 8012c70:	0801772c 	.word	0x0801772c
 8012c74:	08017739 	.word	0x08017739
 8012c78:	08017767 	.word	0x08017767

08012c7c <_close_r>:
 8012c7c:	b538      	push	{r3, r4, r5, lr}
 8012c7e:	4d06      	ldr	r5, [pc, #24]	; (8012c98 <_close_r+0x1c>)
 8012c80:	2300      	movs	r3, #0
 8012c82:	4604      	mov	r4, r0
 8012c84:	4608      	mov	r0, r1
 8012c86:	602b      	str	r3, [r5, #0]
 8012c88:	f7ef fb6b 	bl	8002362 <_close>
 8012c8c:	1c43      	adds	r3, r0, #1
 8012c8e:	d102      	bne.n	8012c96 <_close_r+0x1a>
 8012c90:	682b      	ldr	r3, [r5, #0]
 8012c92:	b103      	cbz	r3, 8012c96 <_close_r+0x1a>
 8012c94:	6023      	str	r3, [r4, #0]
 8012c96:	bd38      	pop	{r3, r4, r5, pc}
 8012c98:	20005218 	.word	0x20005218

08012c9c <quorem>:
 8012c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca0:	6903      	ldr	r3, [r0, #16]
 8012ca2:	690c      	ldr	r4, [r1, #16]
 8012ca4:	42a3      	cmp	r3, r4
 8012ca6:	4607      	mov	r7, r0
 8012ca8:	f2c0 8081 	blt.w	8012dae <quorem+0x112>
 8012cac:	3c01      	subs	r4, #1
 8012cae:	f101 0814 	add.w	r8, r1, #20
 8012cb2:	f100 0514 	add.w	r5, r0, #20
 8012cb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012cba:	9301      	str	r3, [sp, #4]
 8012cbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012cc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012cc4:	3301      	adds	r3, #1
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012ccc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012cd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8012cd4:	d331      	bcc.n	8012d3a <quorem+0x9e>
 8012cd6:	f04f 0e00 	mov.w	lr, #0
 8012cda:	4640      	mov	r0, r8
 8012cdc:	46ac      	mov	ip, r5
 8012cde:	46f2      	mov	sl, lr
 8012ce0:	f850 2b04 	ldr.w	r2, [r0], #4
 8012ce4:	b293      	uxth	r3, r2
 8012ce6:	fb06 e303 	mla	r3, r6, r3, lr
 8012cea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	ebaa 0303 	sub.w	r3, sl, r3
 8012cf4:	f8dc a000 	ldr.w	sl, [ip]
 8012cf8:	0c12      	lsrs	r2, r2, #16
 8012cfa:	fa13 f38a 	uxtah	r3, r3, sl
 8012cfe:	fb06 e202 	mla	r2, r6, r2, lr
 8012d02:	9300      	str	r3, [sp, #0]
 8012d04:	9b00      	ldr	r3, [sp, #0]
 8012d06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012d0a:	b292      	uxth	r2, r2
 8012d0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012d10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d14:	f8bd 3000 	ldrh.w	r3, [sp]
 8012d18:	4581      	cmp	r9, r0
 8012d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d1e:	f84c 3b04 	str.w	r3, [ip], #4
 8012d22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012d26:	d2db      	bcs.n	8012ce0 <quorem+0x44>
 8012d28:	f855 300b 	ldr.w	r3, [r5, fp]
 8012d2c:	b92b      	cbnz	r3, 8012d3a <quorem+0x9e>
 8012d2e:	9b01      	ldr	r3, [sp, #4]
 8012d30:	3b04      	subs	r3, #4
 8012d32:	429d      	cmp	r5, r3
 8012d34:	461a      	mov	r2, r3
 8012d36:	d32e      	bcc.n	8012d96 <quorem+0xfa>
 8012d38:	613c      	str	r4, [r7, #16]
 8012d3a:	4638      	mov	r0, r7
 8012d3c:	f001 fa08 	bl	8014150 <__mcmp>
 8012d40:	2800      	cmp	r0, #0
 8012d42:	db24      	blt.n	8012d8e <quorem+0xf2>
 8012d44:	3601      	adds	r6, #1
 8012d46:	4628      	mov	r0, r5
 8012d48:	f04f 0c00 	mov.w	ip, #0
 8012d4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012d50:	f8d0 e000 	ldr.w	lr, [r0]
 8012d54:	b293      	uxth	r3, r2
 8012d56:	ebac 0303 	sub.w	r3, ip, r3
 8012d5a:	0c12      	lsrs	r2, r2, #16
 8012d5c:	fa13 f38e 	uxtah	r3, r3, lr
 8012d60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012d64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d68:	b29b      	uxth	r3, r3
 8012d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d6e:	45c1      	cmp	r9, r8
 8012d70:	f840 3b04 	str.w	r3, [r0], #4
 8012d74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012d78:	d2e8      	bcs.n	8012d4c <quorem+0xb0>
 8012d7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d82:	b922      	cbnz	r2, 8012d8e <quorem+0xf2>
 8012d84:	3b04      	subs	r3, #4
 8012d86:	429d      	cmp	r5, r3
 8012d88:	461a      	mov	r2, r3
 8012d8a:	d30a      	bcc.n	8012da2 <quorem+0x106>
 8012d8c:	613c      	str	r4, [r7, #16]
 8012d8e:	4630      	mov	r0, r6
 8012d90:	b003      	add	sp, #12
 8012d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d96:	6812      	ldr	r2, [r2, #0]
 8012d98:	3b04      	subs	r3, #4
 8012d9a:	2a00      	cmp	r2, #0
 8012d9c:	d1cc      	bne.n	8012d38 <quorem+0x9c>
 8012d9e:	3c01      	subs	r4, #1
 8012da0:	e7c7      	b.n	8012d32 <quorem+0x96>
 8012da2:	6812      	ldr	r2, [r2, #0]
 8012da4:	3b04      	subs	r3, #4
 8012da6:	2a00      	cmp	r2, #0
 8012da8:	d1f0      	bne.n	8012d8c <quorem+0xf0>
 8012daa:	3c01      	subs	r4, #1
 8012dac:	e7eb      	b.n	8012d86 <quorem+0xea>
 8012dae:	2000      	movs	r0, #0
 8012db0:	e7ee      	b.n	8012d90 <quorem+0xf4>
 8012db2:	0000      	movs	r0, r0
 8012db4:	0000      	movs	r0, r0
	...

08012db8 <_dtoa_r>:
 8012db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dbc:	ed2d 8b04 	vpush	{d8-d9}
 8012dc0:	ec57 6b10 	vmov	r6, r7, d0
 8012dc4:	b093      	sub	sp, #76	; 0x4c
 8012dc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012dc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012dcc:	9106      	str	r1, [sp, #24]
 8012dce:	ee10 aa10 	vmov	sl, s0
 8012dd2:	4604      	mov	r4, r0
 8012dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8012dd6:	930c      	str	r3, [sp, #48]	; 0x30
 8012dd8:	46bb      	mov	fp, r7
 8012dda:	b975      	cbnz	r5, 8012dfa <_dtoa_r+0x42>
 8012ddc:	2010      	movs	r0, #16
 8012dde:	f7fe fef1 	bl	8011bc4 <malloc>
 8012de2:	4602      	mov	r2, r0
 8012de4:	6260      	str	r0, [r4, #36]	; 0x24
 8012de6:	b920      	cbnz	r0, 8012df2 <_dtoa_r+0x3a>
 8012de8:	4ba7      	ldr	r3, [pc, #668]	; (8013088 <_dtoa_r+0x2d0>)
 8012dea:	21ea      	movs	r1, #234	; 0xea
 8012dec:	48a7      	ldr	r0, [pc, #668]	; (801308c <_dtoa_r+0x2d4>)
 8012dee:	f7ff ff27 	bl	8012c40 <__assert_func>
 8012df2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012df6:	6005      	str	r5, [r0, #0]
 8012df8:	60c5      	str	r5, [r0, #12]
 8012dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012dfc:	6819      	ldr	r1, [r3, #0]
 8012dfe:	b151      	cbz	r1, 8012e16 <_dtoa_r+0x5e>
 8012e00:	685a      	ldr	r2, [r3, #4]
 8012e02:	604a      	str	r2, [r1, #4]
 8012e04:	2301      	movs	r3, #1
 8012e06:	4093      	lsls	r3, r2
 8012e08:	608b      	str	r3, [r1, #8]
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	f000 ff5e 	bl	8013ccc <_Bfree>
 8012e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e12:	2200      	movs	r2, #0
 8012e14:	601a      	str	r2, [r3, #0]
 8012e16:	1e3b      	subs	r3, r7, #0
 8012e18:	bfaa      	itet	ge
 8012e1a:	2300      	movge	r3, #0
 8012e1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012e20:	f8c8 3000 	strge.w	r3, [r8]
 8012e24:	4b9a      	ldr	r3, [pc, #616]	; (8013090 <_dtoa_r+0x2d8>)
 8012e26:	bfbc      	itt	lt
 8012e28:	2201      	movlt	r2, #1
 8012e2a:	f8c8 2000 	strlt.w	r2, [r8]
 8012e2e:	ea33 030b 	bics.w	r3, r3, fp
 8012e32:	d11b      	bne.n	8012e6c <_dtoa_r+0xb4>
 8012e34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e36:	f242 730f 	movw	r3, #9999	; 0x270f
 8012e3a:	6013      	str	r3, [r2, #0]
 8012e3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012e40:	4333      	orrs	r3, r6
 8012e42:	f000 8592 	beq.w	801396a <_dtoa_r+0xbb2>
 8012e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e48:	b963      	cbnz	r3, 8012e64 <_dtoa_r+0xac>
 8012e4a:	4b92      	ldr	r3, [pc, #584]	; (8013094 <_dtoa_r+0x2dc>)
 8012e4c:	e022      	b.n	8012e94 <_dtoa_r+0xdc>
 8012e4e:	4b92      	ldr	r3, [pc, #584]	; (8013098 <_dtoa_r+0x2e0>)
 8012e50:	9301      	str	r3, [sp, #4]
 8012e52:	3308      	adds	r3, #8
 8012e54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012e56:	6013      	str	r3, [r2, #0]
 8012e58:	9801      	ldr	r0, [sp, #4]
 8012e5a:	b013      	add	sp, #76	; 0x4c
 8012e5c:	ecbd 8b04 	vpop	{d8-d9}
 8012e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e64:	4b8b      	ldr	r3, [pc, #556]	; (8013094 <_dtoa_r+0x2dc>)
 8012e66:	9301      	str	r3, [sp, #4]
 8012e68:	3303      	adds	r3, #3
 8012e6a:	e7f3      	b.n	8012e54 <_dtoa_r+0x9c>
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	2300      	movs	r3, #0
 8012e70:	4650      	mov	r0, sl
 8012e72:	4659      	mov	r1, fp
 8012e74:	f7ed fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 8012e78:	ec4b ab19 	vmov	d9, sl, fp
 8012e7c:	4680      	mov	r8, r0
 8012e7e:	b158      	cbz	r0, 8012e98 <_dtoa_r+0xe0>
 8012e80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e82:	2301      	movs	r3, #1
 8012e84:	6013      	str	r3, [r2, #0]
 8012e86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	f000 856b 	beq.w	8013964 <_dtoa_r+0xbac>
 8012e8e:	4883      	ldr	r0, [pc, #524]	; (801309c <_dtoa_r+0x2e4>)
 8012e90:	6018      	str	r0, [r3, #0]
 8012e92:	1e43      	subs	r3, r0, #1
 8012e94:	9301      	str	r3, [sp, #4]
 8012e96:	e7df      	b.n	8012e58 <_dtoa_r+0xa0>
 8012e98:	ec4b ab10 	vmov	d0, sl, fp
 8012e9c:	aa10      	add	r2, sp, #64	; 0x40
 8012e9e:	a911      	add	r1, sp, #68	; 0x44
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	f001 f9fb 	bl	801429c <__d2b>
 8012ea6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012eaa:	ee08 0a10 	vmov	s16, r0
 8012eae:	2d00      	cmp	r5, #0
 8012eb0:	f000 8084 	beq.w	8012fbc <_dtoa_r+0x204>
 8012eb4:	ee19 3a90 	vmov	r3, s19
 8012eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ebc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012ec0:	4656      	mov	r6, sl
 8012ec2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012ec6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012eca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012ece:	4b74      	ldr	r3, [pc, #464]	; (80130a0 <_dtoa_r+0x2e8>)
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	4630      	mov	r0, r6
 8012ed4:	4639      	mov	r1, r7
 8012ed6:	f7ed f9d7 	bl	8000288 <__aeabi_dsub>
 8012eda:	a365      	add	r3, pc, #404	; (adr r3, 8013070 <_dtoa_r+0x2b8>)
 8012edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee0:	f7ed fb8a 	bl	80005f8 <__aeabi_dmul>
 8012ee4:	a364      	add	r3, pc, #400	; (adr r3, 8013078 <_dtoa_r+0x2c0>)
 8012ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eea:	f7ed f9cf 	bl	800028c <__adddf3>
 8012eee:	4606      	mov	r6, r0
 8012ef0:	4628      	mov	r0, r5
 8012ef2:	460f      	mov	r7, r1
 8012ef4:	f7ed fb16 	bl	8000524 <__aeabi_i2d>
 8012ef8:	a361      	add	r3, pc, #388	; (adr r3, 8013080 <_dtoa_r+0x2c8>)
 8012efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efe:	f7ed fb7b 	bl	80005f8 <__aeabi_dmul>
 8012f02:	4602      	mov	r2, r0
 8012f04:	460b      	mov	r3, r1
 8012f06:	4630      	mov	r0, r6
 8012f08:	4639      	mov	r1, r7
 8012f0a:	f7ed f9bf 	bl	800028c <__adddf3>
 8012f0e:	4606      	mov	r6, r0
 8012f10:	460f      	mov	r7, r1
 8012f12:	f7ed fe21 	bl	8000b58 <__aeabi_d2iz>
 8012f16:	2200      	movs	r2, #0
 8012f18:	9000      	str	r0, [sp, #0]
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	4630      	mov	r0, r6
 8012f1e:	4639      	mov	r1, r7
 8012f20:	f7ed fddc 	bl	8000adc <__aeabi_dcmplt>
 8012f24:	b150      	cbz	r0, 8012f3c <_dtoa_r+0x184>
 8012f26:	9800      	ldr	r0, [sp, #0]
 8012f28:	f7ed fafc 	bl	8000524 <__aeabi_i2d>
 8012f2c:	4632      	mov	r2, r6
 8012f2e:	463b      	mov	r3, r7
 8012f30:	f7ed fdca 	bl	8000ac8 <__aeabi_dcmpeq>
 8012f34:	b910      	cbnz	r0, 8012f3c <_dtoa_r+0x184>
 8012f36:	9b00      	ldr	r3, [sp, #0]
 8012f38:	3b01      	subs	r3, #1
 8012f3a:	9300      	str	r3, [sp, #0]
 8012f3c:	9b00      	ldr	r3, [sp, #0]
 8012f3e:	2b16      	cmp	r3, #22
 8012f40:	d85a      	bhi.n	8012ff8 <_dtoa_r+0x240>
 8012f42:	9a00      	ldr	r2, [sp, #0]
 8012f44:	4b57      	ldr	r3, [pc, #348]	; (80130a4 <_dtoa_r+0x2ec>)
 8012f46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f4e:	ec51 0b19 	vmov	r0, r1, d9
 8012f52:	f7ed fdc3 	bl	8000adc <__aeabi_dcmplt>
 8012f56:	2800      	cmp	r0, #0
 8012f58:	d050      	beq.n	8012ffc <_dtoa_r+0x244>
 8012f5a:	9b00      	ldr	r3, [sp, #0]
 8012f5c:	3b01      	subs	r3, #1
 8012f5e:	9300      	str	r3, [sp, #0]
 8012f60:	2300      	movs	r3, #0
 8012f62:	930b      	str	r3, [sp, #44]	; 0x2c
 8012f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012f66:	1b5d      	subs	r5, r3, r5
 8012f68:	1e6b      	subs	r3, r5, #1
 8012f6a:	9305      	str	r3, [sp, #20]
 8012f6c:	bf45      	ittet	mi
 8012f6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8012f72:	9304      	strmi	r3, [sp, #16]
 8012f74:	2300      	movpl	r3, #0
 8012f76:	2300      	movmi	r3, #0
 8012f78:	bf4c      	ite	mi
 8012f7a:	9305      	strmi	r3, [sp, #20]
 8012f7c:	9304      	strpl	r3, [sp, #16]
 8012f7e:	9b00      	ldr	r3, [sp, #0]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	db3d      	blt.n	8013000 <_dtoa_r+0x248>
 8012f84:	9b05      	ldr	r3, [sp, #20]
 8012f86:	9a00      	ldr	r2, [sp, #0]
 8012f88:	920a      	str	r2, [sp, #40]	; 0x28
 8012f8a:	4413      	add	r3, r2
 8012f8c:	9305      	str	r3, [sp, #20]
 8012f8e:	2300      	movs	r3, #0
 8012f90:	9307      	str	r3, [sp, #28]
 8012f92:	9b06      	ldr	r3, [sp, #24]
 8012f94:	2b09      	cmp	r3, #9
 8012f96:	f200 8089 	bhi.w	80130ac <_dtoa_r+0x2f4>
 8012f9a:	2b05      	cmp	r3, #5
 8012f9c:	bfc4      	itt	gt
 8012f9e:	3b04      	subgt	r3, #4
 8012fa0:	9306      	strgt	r3, [sp, #24]
 8012fa2:	9b06      	ldr	r3, [sp, #24]
 8012fa4:	f1a3 0302 	sub.w	r3, r3, #2
 8012fa8:	bfcc      	ite	gt
 8012faa:	2500      	movgt	r5, #0
 8012fac:	2501      	movle	r5, #1
 8012fae:	2b03      	cmp	r3, #3
 8012fb0:	f200 8087 	bhi.w	80130c2 <_dtoa_r+0x30a>
 8012fb4:	e8df f003 	tbb	[pc, r3]
 8012fb8:	59383a2d 	.word	0x59383a2d
 8012fbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012fc0:	441d      	add	r5, r3
 8012fc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012fc6:	2b20      	cmp	r3, #32
 8012fc8:	bfc1      	itttt	gt
 8012fca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012fce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012fd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8012fd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012fda:	bfda      	itte	le
 8012fdc:	f1c3 0320 	rsble	r3, r3, #32
 8012fe0:	fa06 f003 	lslle.w	r0, r6, r3
 8012fe4:	4318      	orrgt	r0, r3
 8012fe6:	f7ed fa8d 	bl	8000504 <__aeabi_ui2d>
 8012fea:	2301      	movs	r3, #1
 8012fec:	4606      	mov	r6, r0
 8012fee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012ff2:	3d01      	subs	r5, #1
 8012ff4:	930e      	str	r3, [sp, #56]	; 0x38
 8012ff6:	e76a      	b.n	8012ece <_dtoa_r+0x116>
 8012ff8:	2301      	movs	r3, #1
 8012ffa:	e7b2      	b.n	8012f62 <_dtoa_r+0x1aa>
 8012ffc:	900b      	str	r0, [sp, #44]	; 0x2c
 8012ffe:	e7b1      	b.n	8012f64 <_dtoa_r+0x1ac>
 8013000:	9b04      	ldr	r3, [sp, #16]
 8013002:	9a00      	ldr	r2, [sp, #0]
 8013004:	1a9b      	subs	r3, r3, r2
 8013006:	9304      	str	r3, [sp, #16]
 8013008:	4253      	negs	r3, r2
 801300a:	9307      	str	r3, [sp, #28]
 801300c:	2300      	movs	r3, #0
 801300e:	930a      	str	r3, [sp, #40]	; 0x28
 8013010:	e7bf      	b.n	8012f92 <_dtoa_r+0x1da>
 8013012:	2300      	movs	r3, #0
 8013014:	9308      	str	r3, [sp, #32]
 8013016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013018:	2b00      	cmp	r3, #0
 801301a:	dc55      	bgt.n	80130c8 <_dtoa_r+0x310>
 801301c:	2301      	movs	r3, #1
 801301e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013022:	461a      	mov	r2, r3
 8013024:	9209      	str	r2, [sp, #36]	; 0x24
 8013026:	e00c      	b.n	8013042 <_dtoa_r+0x28a>
 8013028:	2301      	movs	r3, #1
 801302a:	e7f3      	b.n	8013014 <_dtoa_r+0x25c>
 801302c:	2300      	movs	r3, #0
 801302e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013030:	9308      	str	r3, [sp, #32]
 8013032:	9b00      	ldr	r3, [sp, #0]
 8013034:	4413      	add	r3, r2
 8013036:	9302      	str	r3, [sp, #8]
 8013038:	3301      	adds	r3, #1
 801303a:	2b01      	cmp	r3, #1
 801303c:	9303      	str	r3, [sp, #12]
 801303e:	bfb8      	it	lt
 8013040:	2301      	movlt	r3, #1
 8013042:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013044:	2200      	movs	r2, #0
 8013046:	6042      	str	r2, [r0, #4]
 8013048:	2204      	movs	r2, #4
 801304a:	f102 0614 	add.w	r6, r2, #20
 801304e:	429e      	cmp	r6, r3
 8013050:	6841      	ldr	r1, [r0, #4]
 8013052:	d93d      	bls.n	80130d0 <_dtoa_r+0x318>
 8013054:	4620      	mov	r0, r4
 8013056:	f000 fdf9 	bl	8013c4c <_Balloc>
 801305a:	9001      	str	r0, [sp, #4]
 801305c:	2800      	cmp	r0, #0
 801305e:	d13b      	bne.n	80130d8 <_dtoa_r+0x320>
 8013060:	4b11      	ldr	r3, [pc, #68]	; (80130a8 <_dtoa_r+0x2f0>)
 8013062:	4602      	mov	r2, r0
 8013064:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013068:	e6c0      	b.n	8012dec <_dtoa_r+0x34>
 801306a:	2301      	movs	r3, #1
 801306c:	e7df      	b.n	801302e <_dtoa_r+0x276>
 801306e:	bf00      	nop
 8013070:	636f4361 	.word	0x636f4361
 8013074:	3fd287a7 	.word	0x3fd287a7
 8013078:	8b60c8b3 	.word	0x8b60c8b3
 801307c:	3fc68a28 	.word	0x3fc68a28
 8013080:	509f79fb 	.word	0x509f79fb
 8013084:	3fd34413 	.word	0x3fd34413
 8013088:	080176b8 	.word	0x080176b8
 801308c:	08017775 	.word	0x08017775
 8013090:	7ff00000 	.word	0x7ff00000
 8013094:	08017771 	.word	0x08017771
 8013098:	08017768 	.word	0x08017768
 801309c:	08017695 	.word	0x08017695
 80130a0:	3ff80000 	.word	0x3ff80000
 80130a4:	08017868 	.word	0x08017868
 80130a8:	080177d0 	.word	0x080177d0
 80130ac:	2501      	movs	r5, #1
 80130ae:	2300      	movs	r3, #0
 80130b0:	9306      	str	r3, [sp, #24]
 80130b2:	9508      	str	r5, [sp, #32]
 80130b4:	f04f 33ff 	mov.w	r3, #4294967295
 80130b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80130bc:	2200      	movs	r2, #0
 80130be:	2312      	movs	r3, #18
 80130c0:	e7b0      	b.n	8013024 <_dtoa_r+0x26c>
 80130c2:	2301      	movs	r3, #1
 80130c4:	9308      	str	r3, [sp, #32]
 80130c6:	e7f5      	b.n	80130b4 <_dtoa_r+0x2fc>
 80130c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80130ce:	e7b8      	b.n	8013042 <_dtoa_r+0x28a>
 80130d0:	3101      	adds	r1, #1
 80130d2:	6041      	str	r1, [r0, #4]
 80130d4:	0052      	lsls	r2, r2, #1
 80130d6:	e7b8      	b.n	801304a <_dtoa_r+0x292>
 80130d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80130da:	9a01      	ldr	r2, [sp, #4]
 80130dc:	601a      	str	r2, [r3, #0]
 80130de:	9b03      	ldr	r3, [sp, #12]
 80130e0:	2b0e      	cmp	r3, #14
 80130e2:	f200 809d 	bhi.w	8013220 <_dtoa_r+0x468>
 80130e6:	2d00      	cmp	r5, #0
 80130e8:	f000 809a 	beq.w	8013220 <_dtoa_r+0x468>
 80130ec:	9b00      	ldr	r3, [sp, #0]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	dd32      	ble.n	8013158 <_dtoa_r+0x3a0>
 80130f2:	4ab7      	ldr	r2, [pc, #732]	; (80133d0 <_dtoa_r+0x618>)
 80130f4:	f003 030f 	and.w	r3, r3, #15
 80130f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80130fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013100:	9b00      	ldr	r3, [sp, #0]
 8013102:	05d8      	lsls	r0, r3, #23
 8013104:	ea4f 1723 	mov.w	r7, r3, asr #4
 8013108:	d516      	bpl.n	8013138 <_dtoa_r+0x380>
 801310a:	4bb2      	ldr	r3, [pc, #712]	; (80133d4 <_dtoa_r+0x61c>)
 801310c:	ec51 0b19 	vmov	r0, r1, d9
 8013110:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013114:	f7ed fb9a 	bl	800084c <__aeabi_ddiv>
 8013118:	f007 070f 	and.w	r7, r7, #15
 801311c:	4682      	mov	sl, r0
 801311e:	468b      	mov	fp, r1
 8013120:	2503      	movs	r5, #3
 8013122:	4eac      	ldr	r6, [pc, #688]	; (80133d4 <_dtoa_r+0x61c>)
 8013124:	b957      	cbnz	r7, 801313c <_dtoa_r+0x384>
 8013126:	4642      	mov	r2, r8
 8013128:	464b      	mov	r3, r9
 801312a:	4650      	mov	r0, sl
 801312c:	4659      	mov	r1, fp
 801312e:	f7ed fb8d 	bl	800084c <__aeabi_ddiv>
 8013132:	4682      	mov	sl, r0
 8013134:	468b      	mov	fp, r1
 8013136:	e028      	b.n	801318a <_dtoa_r+0x3d2>
 8013138:	2502      	movs	r5, #2
 801313a:	e7f2      	b.n	8013122 <_dtoa_r+0x36a>
 801313c:	07f9      	lsls	r1, r7, #31
 801313e:	d508      	bpl.n	8013152 <_dtoa_r+0x39a>
 8013140:	4640      	mov	r0, r8
 8013142:	4649      	mov	r1, r9
 8013144:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013148:	f7ed fa56 	bl	80005f8 <__aeabi_dmul>
 801314c:	3501      	adds	r5, #1
 801314e:	4680      	mov	r8, r0
 8013150:	4689      	mov	r9, r1
 8013152:	107f      	asrs	r7, r7, #1
 8013154:	3608      	adds	r6, #8
 8013156:	e7e5      	b.n	8013124 <_dtoa_r+0x36c>
 8013158:	f000 809b 	beq.w	8013292 <_dtoa_r+0x4da>
 801315c:	9b00      	ldr	r3, [sp, #0]
 801315e:	4f9d      	ldr	r7, [pc, #628]	; (80133d4 <_dtoa_r+0x61c>)
 8013160:	425e      	negs	r6, r3
 8013162:	4b9b      	ldr	r3, [pc, #620]	; (80133d0 <_dtoa_r+0x618>)
 8013164:	f006 020f 	and.w	r2, r6, #15
 8013168:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013170:	ec51 0b19 	vmov	r0, r1, d9
 8013174:	f7ed fa40 	bl	80005f8 <__aeabi_dmul>
 8013178:	1136      	asrs	r6, r6, #4
 801317a:	4682      	mov	sl, r0
 801317c:	468b      	mov	fp, r1
 801317e:	2300      	movs	r3, #0
 8013180:	2502      	movs	r5, #2
 8013182:	2e00      	cmp	r6, #0
 8013184:	d17a      	bne.n	801327c <_dtoa_r+0x4c4>
 8013186:	2b00      	cmp	r3, #0
 8013188:	d1d3      	bne.n	8013132 <_dtoa_r+0x37a>
 801318a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801318c:	2b00      	cmp	r3, #0
 801318e:	f000 8082 	beq.w	8013296 <_dtoa_r+0x4de>
 8013192:	4b91      	ldr	r3, [pc, #580]	; (80133d8 <_dtoa_r+0x620>)
 8013194:	2200      	movs	r2, #0
 8013196:	4650      	mov	r0, sl
 8013198:	4659      	mov	r1, fp
 801319a:	f7ed fc9f 	bl	8000adc <__aeabi_dcmplt>
 801319e:	2800      	cmp	r0, #0
 80131a0:	d079      	beq.n	8013296 <_dtoa_r+0x4de>
 80131a2:	9b03      	ldr	r3, [sp, #12]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d076      	beq.n	8013296 <_dtoa_r+0x4de>
 80131a8:	9b02      	ldr	r3, [sp, #8]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	dd36      	ble.n	801321c <_dtoa_r+0x464>
 80131ae:	9b00      	ldr	r3, [sp, #0]
 80131b0:	4650      	mov	r0, sl
 80131b2:	4659      	mov	r1, fp
 80131b4:	1e5f      	subs	r7, r3, #1
 80131b6:	2200      	movs	r2, #0
 80131b8:	4b88      	ldr	r3, [pc, #544]	; (80133dc <_dtoa_r+0x624>)
 80131ba:	f7ed fa1d 	bl	80005f8 <__aeabi_dmul>
 80131be:	9e02      	ldr	r6, [sp, #8]
 80131c0:	4682      	mov	sl, r0
 80131c2:	468b      	mov	fp, r1
 80131c4:	3501      	adds	r5, #1
 80131c6:	4628      	mov	r0, r5
 80131c8:	f7ed f9ac 	bl	8000524 <__aeabi_i2d>
 80131cc:	4652      	mov	r2, sl
 80131ce:	465b      	mov	r3, fp
 80131d0:	f7ed fa12 	bl	80005f8 <__aeabi_dmul>
 80131d4:	4b82      	ldr	r3, [pc, #520]	; (80133e0 <_dtoa_r+0x628>)
 80131d6:	2200      	movs	r2, #0
 80131d8:	f7ed f858 	bl	800028c <__adddf3>
 80131dc:	46d0      	mov	r8, sl
 80131de:	46d9      	mov	r9, fp
 80131e0:	4682      	mov	sl, r0
 80131e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80131e6:	2e00      	cmp	r6, #0
 80131e8:	d158      	bne.n	801329c <_dtoa_r+0x4e4>
 80131ea:	4b7e      	ldr	r3, [pc, #504]	; (80133e4 <_dtoa_r+0x62c>)
 80131ec:	2200      	movs	r2, #0
 80131ee:	4640      	mov	r0, r8
 80131f0:	4649      	mov	r1, r9
 80131f2:	f7ed f849 	bl	8000288 <__aeabi_dsub>
 80131f6:	4652      	mov	r2, sl
 80131f8:	465b      	mov	r3, fp
 80131fa:	4680      	mov	r8, r0
 80131fc:	4689      	mov	r9, r1
 80131fe:	f7ed fc8b 	bl	8000b18 <__aeabi_dcmpgt>
 8013202:	2800      	cmp	r0, #0
 8013204:	f040 8295 	bne.w	8013732 <_dtoa_r+0x97a>
 8013208:	4652      	mov	r2, sl
 801320a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801320e:	4640      	mov	r0, r8
 8013210:	4649      	mov	r1, r9
 8013212:	f7ed fc63 	bl	8000adc <__aeabi_dcmplt>
 8013216:	2800      	cmp	r0, #0
 8013218:	f040 8289 	bne.w	801372e <_dtoa_r+0x976>
 801321c:	ec5b ab19 	vmov	sl, fp, d9
 8013220:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013222:	2b00      	cmp	r3, #0
 8013224:	f2c0 8148 	blt.w	80134b8 <_dtoa_r+0x700>
 8013228:	9a00      	ldr	r2, [sp, #0]
 801322a:	2a0e      	cmp	r2, #14
 801322c:	f300 8144 	bgt.w	80134b8 <_dtoa_r+0x700>
 8013230:	4b67      	ldr	r3, [pc, #412]	; (80133d0 <_dtoa_r+0x618>)
 8013232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013236:	e9d3 8900 	ldrd	r8, r9, [r3]
 801323a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801323c:	2b00      	cmp	r3, #0
 801323e:	f280 80d5 	bge.w	80133ec <_dtoa_r+0x634>
 8013242:	9b03      	ldr	r3, [sp, #12]
 8013244:	2b00      	cmp	r3, #0
 8013246:	f300 80d1 	bgt.w	80133ec <_dtoa_r+0x634>
 801324a:	f040 826f 	bne.w	801372c <_dtoa_r+0x974>
 801324e:	4b65      	ldr	r3, [pc, #404]	; (80133e4 <_dtoa_r+0x62c>)
 8013250:	2200      	movs	r2, #0
 8013252:	4640      	mov	r0, r8
 8013254:	4649      	mov	r1, r9
 8013256:	f7ed f9cf 	bl	80005f8 <__aeabi_dmul>
 801325a:	4652      	mov	r2, sl
 801325c:	465b      	mov	r3, fp
 801325e:	f7ed fc51 	bl	8000b04 <__aeabi_dcmpge>
 8013262:	9e03      	ldr	r6, [sp, #12]
 8013264:	4637      	mov	r7, r6
 8013266:	2800      	cmp	r0, #0
 8013268:	f040 8245 	bne.w	80136f6 <_dtoa_r+0x93e>
 801326c:	9d01      	ldr	r5, [sp, #4]
 801326e:	2331      	movs	r3, #49	; 0x31
 8013270:	f805 3b01 	strb.w	r3, [r5], #1
 8013274:	9b00      	ldr	r3, [sp, #0]
 8013276:	3301      	adds	r3, #1
 8013278:	9300      	str	r3, [sp, #0]
 801327a:	e240      	b.n	80136fe <_dtoa_r+0x946>
 801327c:	07f2      	lsls	r2, r6, #31
 801327e:	d505      	bpl.n	801328c <_dtoa_r+0x4d4>
 8013280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013284:	f7ed f9b8 	bl	80005f8 <__aeabi_dmul>
 8013288:	3501      	adds	r5, #1
 801328a:	2301      	movs	r3, #1
 801328c:	1076      	asrs	r6, r6, #1
 801328e:	3708      	adds	r7, #8
 8013290:	e777      	b.n	8013182 <_dtoa_r+0x3ca>
 8013292:	2502      	movs	r5, #2
 8013294:	e779      	b.n	801318a <_dtoa_r+0x3d2>
 8013296:	9f00      	ldr	r7, [sp, #0]
 8013298:	9e03      	ldr	r6, [sp, #12]
 801329a:	e794      	b.n	80131c6 <_dtoa_r+0x40e>
 801329c:	9901      	ldr	r1, [sp, #4]
 801329e:	4b4c      	ldr	r3, [pc, #304]	; (80133d0 <_dtoa_r+0x618>)
 80132a0:	4431      	add	r1, r6
 80132a2:	910d      	str	r1, [sp, #52]	; 0x34
 80132a4:	9908      	ldr	r1, [sp, #32]
 80132a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80132aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80132ae:	2900      	cmp	r1, #0
 80132b0:	d043      	beq.n	801333a <_dtoa_r+0x582>
 80132b2:	494d      	ldr	r1, [pc, #308]	; (80133e8 <_dtoa_r+0x630>)
 80132b4:	2000      	movs	r0, #0
 80132b6:	f7ed fac9 	bl	800084c <__aeabi_ddiv>
 80132ba:	4652      	mov	r2, sl
 80132bc:	465b      	mov	r3, fp
 80132be:	f7ec ffe3 	bl	8000288 <__aeabi_dsub>
 80132c2:	9d01      	ldr	r5, [sp, #4]
 80132c4:	4682      	mov	sl, r0
 80132c6:	468b      	mov	fp, r1
 80132c8:	4649      	mov	r1, r9
 80132ca:	4640      	mov	r0, r8
 80132cc:	f7ed fc44 	bl	8000b58 <__aeabi_d2iz>
 80132d0:	4606      	mov	r6, r0
 80132d2:	f7ed f927 	bl	8000524 <__aeabi_i2d>
 80132d6:	4602      	mov	r2, r0
 80132d8:	460b      	mov	r3, r1
 80132da:	4640      	mov	r0, r8
 80132dc:	4649      	mov	r1, r9
 80132de:	f7ec ffd3 	bl	8000288 <__aeabi_dsub>
 80132e2:	3630      	adds	r6, #48	; 0x30
 80132e4:	f805 6b01 	strb.w	r6, [r5], #1
 80132e8:	4652      	mov	r2, sl
 80132ea:	465b      	mov	r3, fp
 80132ec:	4680      	mov	r8, r0
 80132ee:	4689      	mov	r9, r1
 80132f0:	f7ed fbf4 	bl	8000adc <__aeabi_dcmplt>
 80132f4:	2800      	cmp	r0, #0
 80132f6:	d163      	bne.n	80133c0 <_dtoa_r+0x608>
 80132f8:	4642      	mov	r2, r8
 80132fa:	464b      	mov	r3, r9
 80132fc:	4936      	ldr	r1, [pc, #216]	; (80133d8 <_dtoa_r+0x620>)
 80132fe:	2000      	movs	r0, #0
 8013300:	f7ec ffc2 	bl	8000288 <__aeabi_dsub>
 8013304:	4652      	mov	r2, sl
 8013306:	465b      	mov	r3, fp
 8013308:	f7ed fbe8 	bl	8000adc <__aeabi_dcmplt>
 801330c:	2800      	cmp	r0, #0
 801330e:	f040 80b5 	bne.w	801347c <_dtoa_r+0x6c4>
 8013312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013314:	429d      	cmp	r5, r3
 8013316:	d081      	beq.n	801321c <_dtoa_r+0x464>
 8013318:	4b30      	ldr	r3, [pc, #192]	; (80133dc <_dtoa_r+0x624>)
 801331a:	2200      	movs	r2, #0
 801331c:	4650      	mov	r0, sl
 801331e:	4659      	mov	r1, fp
 8013320:	f7ed f96a 	bl	80005f8 <__aeabi_dmul>
 8013324:	4b2d      	ldr	r3, [pc, #180]	; (80133dc <_dtoa_r+0x624>)
 8013326:	4682      	mov	sl, r0
 8013328:	468b      	mov	fp, r1
 801332a:	4640      	mov	r0, r8
 801332c:	4649      	mov	r1, r9
 801332e:	2200      	movs	r2, #0
 8013330:	f7ed f962 	bl	80005f8 <__aeabi_dmul>
 8013334:	4680      	mov	r8, r0
 8013336:	4689      	mov	r9, r1
 8013338:	e7c6      	b.n	80132c8 <_dtoa_r+0x510>
 801333a:	4650      	mov	r0, sl
 801333c:	4659      	mov	r1, fp
 801333e:	f7ed f95b 	bl	80005f8 <__aeabi_dmul>
 8013342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013344:	9d01      	ldr	r5, [sp, #4]
 8013346:	930f      	str	r3, [sp, #60]	; 0x3c
 8013348:	4682      	mov	sl, r0
 801334a:	468b      	mov	fp, r1
 801334c:	4649      	mov	r1, r9
 801334e:	4640      	mov	r0, r8
 8013350:	f7ed fc02 	bl	8000b58 <__aeabi_d2iz>
 8013354:	4606      	mov	r6, r0
 8013356:	f7ed f8e5 	bl	8000524 <__aeabi_i2d>
 801335a:	3630      	adds	r6, #48	; 0x30
 801335c:	4602      	mov	r2, r0
 801335e:	460b      	mov	r3, r1
 8013360:	4640      	mov	r0, r8
 8013362:	4649      	mov	r1, r9
 8013364:	f7ec ff90 	bl	8000288 <__aeabi_dsub>
 8013368:	f805 6b01 	strb.w	r6, [r5], #1
 801336c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801336e:	429d      	cmp	r5, r3
 8013370:	4680      	mov	r8, r0
 8013372:	4689      	mov	r9, r1
 8013374:	f04f 0200 	mov.w	r2, #0
 8013378:	d124      	bne.n	80133c4 <_dtoa_r+0x60c>
 801337a:	4b1b      	ldr	r3, [pc, #108]	; (80133e8 <_dtoa_r+0x630>)
 801337c:	4650      	mov	r0, sl
 801337e:	4659      	mov	r1, fp
 8013380:	f7ec ff84 	bl	800028c <__adddf3>
 8013384:	4602      	mov	r2, r0
 8013386:	460b      	mov	r3, r1
 8013388:	4640      	mov	r0, r8
 801338a:	4649      	mov	r1, r9
 801338c:	f7ed fbc4 	bl	8000b18 <__aeabi_dcmpgt>
 8013390:	2800      	cmp	r0, #0
 8013392:	d173      	bne.n	801347c <_dtoa_r+0x6c4>
 8013394:	4652      	mov	r2, sl
 8013396:	465b      	mov	r3, fp
 8013398:	4913      	ldr	r1, [pc, #76]	; (80133e8 <_dtoa_r+0x630>)
 801339a:	2000      	movs	r0, #0
 801339c:	f7ec ff74 	bl	8000288 <__aeabi_dsub>
 80133a0:	4602      	mov	r2, r0
 80133a2:	460b      	mov	r3, r1
 80133a4:	4640      	mov	r0, r8
 80133a6:	4649      	mov	r1, r9
 80133a8:	f7ed fb98 	bl	8000adc <__aeabi_dcmplt>
 80133ac:	2800      	cmp	r0, #0
 80133ae:	f43f af35 	beq.w	801321c <_dtoa_r+0x464>
 80133b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80133b4:	1e6b      	subs	r3, r5, #1
 80133b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80133b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80133bc:	2b30      	cmp	r3, #48	; 0x30
 80133be:	d0f8      	beq.n	80133b2 <_dtoa_r+0x5fa>
 80133c0:	9700      	str	r7, [sp, #0]
 80133c2:	e049      	b.n	8013458 <_dtoa_r+0x6a0>
 80133c4:	4b05      	ldr	r3, [pc, #20]	; (80133dc <_dtoa_r+0x624>)
 80133c6:	f7ed f917 	bl	80005f8 <__aeabi_dmul>
 80133ca:	4680      	mov	r8, r0
 80133cc:	4689      	mov	r9, r1
 80133ce:	e7bd      	b.n	801334c <_dtoa_r+0x594>
 80133d0:	08017868 	.word	0x08017868
 80133d4:	08017840 	.word	0x08017840
 80133d8:	3ff00000 	.word	0x3ff00000
 80133dc:	40240000 	.word	0x40240000
 80133e0:	401c0000 	.word	0x401c0000
 80133e4:	40140000 	.word	0x40140000
 80133e8:	3fe00000 	.word	0x3fe00000
 80133ec:	9d01      	ldr	r5, [sp, #4]
 80133ee:	4656      	mov	r6, sl
 80133f0:	465f      	mov	r7, fp
 80133f2:	4642      	mov	r2, r8
 80133f4:	464b      	mov	r3, r9
 80133f6:	4630      	mov	r0, r6
 80133f8:	4639      	mov	r1, r7
 80133fa:	f7ed fa27 	bl	800084c <__aeabi_ddiv>
 80133fe:	f7ed fbab 	bl	8000b58 <__aeabi_d2iz>
 8013402:	4682      	mov	sl, r0
 8013404:	f7ed f88e 	bl	8000524 <__aeabi_i2d>
 8013408:	4642      	mov	r2, r8
 801340a:	464b      	mov	r3, r9
 801340c:	f7ed f8f4 	bl	80005f8 <__aeabi_dmul>
 8013410:	4602      	mov	r2, r0
 8013412:	460b      	mov	r3, r1
 8013414:	4630      	mov	r0, r6
 8013416:	4639      	mov	r1, r7
 8013418:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801341c:	f7ec ff34 	bl	8000288 <__aeabi_dsub>
 8013420:	f805 6b01 	strb.w	r6, [r5], #1
 8013424:	9e01      	ldr	r6, [sp, #4]
 8013426:	9f03      	ldr	r7, [sp, #12]
 8013428:	1bae      	subs	r6, r5, r6
 801342a:	42b7      	cmp	r7, r6
 801342c:	4602      	mov	r2, r0
 801342e:	460b      	mov	r3, r1
 8013430:	d135      	bne.n	801349e <_dtoa_r+0x6e6>
 8013432:	f7ec ff2b 	bl	800028c <__adddf3>
 8013436:	4642      	mov	r2, r8
 8013438:	464b      	mov	r3, r9
 801343a:	4606      	mov	r6, r0
 801343c:	460f      	mov	r7, r1
 801343e:	f7ed fb6b 	bl	8000b18 <__aeabi_dcmpgt>
 8013442:	b9d0      	cbnz	r0, 801347a <_dtoa_r+0x6c2>
 8013444:	4642      	mov	r2, r8
 8013446:	464b      	mov	r3, r9
 8013448:	4630      	mov	r0, r6
 801344a:	4639      	mov	r1, r7
 801344c:	f7ed fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8013450:	b110      	cbz	r0, 8013458 <_dtoa_r+0x6a0>
 8013452:	f01a 0f01 	tst.w	sl, #1
 8013456:	d110      	bne.n	801347a <_dtoa_r+0x6c2>
 8013458:	4620      	mov	r0, r4
 801345a:	ee18 1a10 	vmov	r1, s16
 801345e:	f000 fc35 	bl	8013ccc <_Bfree>
 8013462:	2300      	movs	r3, #0
 8013464:	9800      	ldr	r0, [sp, #0]
 8013466:	702b      	strb	r3, [r5, #0]
 8013468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801346a:	3001      	adds	r0, #1
 801346c:	6018      	str	r0, [r3, #0]
 801346e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013470:	2b00      	cmp	r3, #0
 8013472:	f43f acf1 	beq.w	8012e58 <_dtoa_r+0xa0>
 8013476:	601d      	str	r5, [r3, #0]
 8013478:	e4ee      	b.n	8012e58 <_dtoa_r+0xa0>
 801347a:	9f00      	ldr	r7, [sp, #0]
 801347c:	462b      	mov	r3, r5
 801347e:	461d      	mov	r5, r3
 8013480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013484:	2a39      	cmp	r2, #57	; 0x39
 8013486:	d106      	bne.n	8013496 <_dtoa_r+0x6de>
 8013488:	9a01      	ldr	r2, [sp, #4]
 801348a:	429a      	cmp	r2, r3
 801348c:	d1f7      	bne.n	801347e <_dtoa_r+0x6c6>
 801348e:	9901      	ldr	r1, [sp, #4]
 8013490:	2230      	movs	r2, #48	; 0x30
 8013492:	3701      	adds	r7, #1
 8013494:	700a      	strb	r2, [r1, #0]
 8013496:	781a      	ldrb	r2, [r3, #0]
 8013498:	3201      	adds	r2, #1
 801349a:	701a      	strb	r2, [r3, #0]
 801349c:	e790      	b.n	80133c0 <_dtoa_r+0x608>
 801349e:	4ba6      	ldr	r3, [pc, #664]	; (8013738 <_dtoa_r+0x980>)
 80134a0:	2200      	movs	r2, #0
 80134a2:	f7ed f8a9 	bl	80005f8 <__aeabi_dmul>
 80134a6:	2200      	movs	r2, #0
 80134a8:	2300      	movs	r3, #0
 80134aa:	4606      	mov	r6, r0
 80134ac:	460f      	mov	r7, r1
 80134ae:	f7ed fb0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80134b2:	2800      	cmp	r0, #0
 80134b4:	d09d      	beq.n	80133f2 <_dtoa_r+0x63a>
 80134b6:	e7cf      	b.n	8013458 <_dtoa_r+0x6a0>
 80134b8:	9a08      	ldr	r2, [sp, #32]
 80134ba:	2a00      	cmp	r2, #0
 80134bc:	f000 80d7 	beq.w	801366e <_dtoa_r+0x8b6>
 80134c0:	9a06      	ldr	r2, [sp, #24]
 80134c2:	2a01      	cmp	r2, #1
 80134c4:	f300 80ba 	bgt.w	801363c <_dtoa_r+0x884>
 80134c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80134ca:	2a00      	cmp	r2, #0
 80134cc:	f000 80b2 	beq.w	8013634 <_dtoa_r+0x87c>
 80134d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80134d4:	9e07      	ldr	r6, [sp, #28]
 80134d6:	9d04      	ldr	r5, [sp, #16]
 80134d8:	9a04      	ldr	r2, [sp, #16]
 80134da:	441a      	add	r2, r3
 80134dc:	9204      	str	r2, [sp, #16]
 80134de:	9a05      	ldr	r2, [sp, #20]
 80134e0:	2101      	movs	r1, #1
 80134e2:	441a      	add	r2, r3
 80134e4:	4620      	mov	r0, r4
 80134e6:	9205      	str	r2, [sp, #20]
 80134e8:	f000 fca8 	bl	8013e3c <__i2b>
 80134ec:	4607      	mov	r7, r0
 80134ee:	2d00      	cmp	r5, #0
 80134f0:	dd0c      	ble.n	801350c <_dtoa_r+0x754>
 80134f2:	9b05      	ldr	r3, [sp, #20]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	dd09      	ble.n	801350c <_dtoa_r+0x754>
 80134f8:	42ab      	cmp	r3, r5
 80134fa:	9a04      	ldr	r2, [sp, #16]
 80134fc:	bfa8      	it	ge
 80134fe:	462b      	movge	r3, r5
 8013500:	1ad2      	subs	r2, r2, r3
 8013502:	9204      	str	r2, [sp, #16]
 8013504:	9a05      	ldr	r2, [sp, #20]
 8013506:	1aed      	subs	r5, r5, r3
 8013508:	1ad3      	subs	r3, r2, r3
 801350a:	9305      	str	r3, [sp, #20]
 801350c:	9b07      	ldr	r3, [sp, #28]
 801350e:	b31b      	cbz	r3, 8013558 <_dtoa_r+0x7a0>
 8013510:	9b08      	ldr	r3, [sp, #32]
 8013512:	2b00      	cmp	r3, #0
 8013514:	f000 80af 	beq.w	8013676 <_dtoa_r+0x8be>
 8013518:	2e00      	cmp	r6, #0
 801351a:	dd13      	ble.n	8013544 <_dtoa_r+0x78c>
 801351c:	4639      	mov	r1, r7
 801351e:	4632      	mov	r2, r6
 8013520:	4620      	mov	r0, r4
 8013522:	f000 fd4b 	bl	8013fbc <__pow5mult>
 8013526:	ee18 2a10 	vmov	r2, s16
 801352a:	4601      	mov	r1, r0
 801352c:	4607      	mov	r7, r0
 801352e:	4620      	mov	r0, r4
 8013530:	f000 fc9a 	bl	8013e68 <__multiply>
 8013534:	ee18 1a10 	vmov	r1, s16
 8013538:	4680      	mov	r8, r0
 801353a:	4620      	mov	r0, r4
 801353c:	f000 fbc6 	bl	8013ccc <_Bfree>
 8013540:	ee08 8a10 	vmov	s16, r8
 8013544:	9b07      	ldr	r3, [sp, #28]
 8013546:	1b9a      	subs	r2, r3, r6
 8013548:	d006      	beq.n	8013558 <_dtoa_r+0x7a0>
 801354a:	ee18 1a10 	vmov	r1, s16
 801354e:	4620      	mov	r0, r4
 8013550:	f000 fd34 	bl	8013fbc <__pow5mult>
 8013554:	ee08 0a10 	vmov	s16, r0
 8013558:	2101      	movs	r1, #1
 801355a:	4620      	mov	r0, r4
 801355c:	f000 fc6e 	bl	8013e3c <__i2b>
 8013560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013562:	2b00      	cmp	r3, #0
 8013564:	4606      	mov	r6, r0
 8013566:	f340 8088 	ble.w	801367a <_dtoa_r+0x8c2>
 801356a:	461a      	mov	r2, r3
 801356c:	4601      	mov	r1, r0
 801356e:	4620      	mov	r0, r4
 8013570:	f000 fd24 	bl	8013fbc <__pow5mult>
 8013574:	9b06      	ldr	r3, [sp, #24]
 8013576:	2b01      	cmp	r3, #1
 8013578:	4606      	mov	r6, r0
 801357a:	f340 8081 	ble.w	8013680 <_dtoa_r+0x8c8>
 801357e:	f04f 0800 	mov.w	r8, #0
 8013582:	6933      	ldr	r3, [r6, #16]
 8013584:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013588:	6918      	ldr	r0, [r3, #16]
 801358a:	f000 fc07 	bl	8013d9c <__hi0bits>
 801358e:	f1c0 0020 	rsb	r0, r0, #32
 8013592:	9b05      	ldr	r3, [sp, #20]
 8013594:	4418      	add	r0, r3
 8013596:	f010 001f 	ands.w	r0, r0, #31
 801359a:	f000 8092 	beq.w	80136c2 <_dtoa_r+0x90a>
 801359e:	f1c0 0320 	rsb	r3, r0, #32
 80135a2:	2b04      	cmp	r3, #4
 80135a4:	f340 808a 	ble.w	80136bc <_dtoa_r+0x904>
 80135a8:	f1c0 001c 	rsb	r0, r0, #28
 80135ac:	9b04      	ldr	r3, [sp, #16]
 80135ae:	4403      	add	r3, r0
 80135b0:	9304      	str	r3, [sp, #16]
 80135b2:	9b05      	ldr	r3, [sp, #20]
 80135b4:	4403      	add	r3, r0
 80135b6:	4405      	add	r5, r0
 80135b8:	9305      	str	r3, [sp, #20]
 80135ba:	9b04      	ldr	r3, [sp, #16]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	dd07      	ble.n	80135d0 <_dtoa_r+0x818>
 80135c0:	ee18 1a10 	vmov	r1, s16
 80135c4:	461a      	mov	r2, r3
 80135c6:	4620      	mov	r0, r4
 80135c8:	f000 fd52 	bl	8014070 <__lshift>
 80135cc:	ee08 0a10 	vmov	s16, r0
 80135d0:	9b05      	ldr	r3, [sp, #20]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	dd05      	ble.n	80135e2 <_dtoa_r+0x82a>
 80135d6:	4631      	mov	r1, r6
 80135d8:	461a      	mov	r2, r3
 80135da:	4620      	mov	r0, r4
 80135dc:	f000 fd48 	bl	8014070 <__lshift>
 80135e0:	4606      	mov	r6, r0
 80135e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d06e      	beq.n	80136c6 <_dtoa_r+0x90e>
 80135e8:	ee18 0a10 	vmov	r0, s16
 80135ec:	4631      	mov	r1, r6
 80135ee:	f000 fdaf 	bl	8014150 <__mcmp>
 80135f2:	2800      	cmp	r0, #0
 80135f4:	da67      	bge.n	80136c6 <_dtoa_r+0x90e>
 80135f6:	9b00      	ldr	r3, [sp, #0]
 80135f8:	3b01      	subs	r3, #1
 80135fa:	ee18 1a10 	vmov	r1, s16
 80135fe:	9300      	str	r3, [sp, #0]
 8013600:	220a      	movs	r2, #10
 8013602:	2300      	movs	r3, #0
 8013604:	4620      	mov	r0, r4
 8013606:	f000 fb83 	bl	8013d10 <__multadd>
 801360a:	9b08      	ldr	r3, [sp, #32]
 801360c:	ee08 0a10 	vmov	s16, r0
 8013610:	2b00      	cmp	r3, #0
 8013612:	f000 81b1 	beq.w	8013978 <_dtoa_r+0xbc0>
 8013616:	2300      	movs	r3, #0
 8013618:	4639      	mov	r1, r7
 801361a:	220a      	movs	r2, #10
 801361c:	4620      	mov	r0, r4
 801361e:	f000 fb77 	bl	8013d10 <__multadd>
 8013622:	9b02      	ldr	r3, [sp, #8]
 8013624:	2b00      	cmp	r3, #0
 8013626:	4607      	mov	r7, r0
 8013628:	f300 808e 	bgt.w	8013748 <_dtoa_r+0x990>
 801362c:	9b06      	ldr	r3, [sp, #24]
 801362e:	2b02      	cmp	r3, #2
 8013630:	dc51      	bgt.n	80136d6 <_dtoa_r+0x91e>
 8013632:	e089      	b.n	8013748 <_dtoa_r+0x990>
 8013634:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013636:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801363a:	e74b      	b.n	80134d4 <_dtoa_r+0x71c>
 801363c:	9b03      	ldr	r3, [sp, #12]
 801363e:	1e5e      	subs	r6, r3, #1
 8013640:	9b07      	ldr	r3, [sp, #28]
 8013642:	42b3      	cmp	r3, r6
 8013644:	bfbf      	itttt	lt
 8013646:	9b07      	ldrlt	r3, [sp, #28]
 8013648:	9607      	strlt	r6, [sp, #28]
 801364a:	1af2      	sublt	r2, r6, r3
 801364c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801364e:	bfb6      	itet	lt
 8013650:	189b      	addlt	r3, r3, r2
 8013652:	1b9e      	subge	r6, r3, r6
 8013654:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013656:	9b03      	ldr	r3, [sp, #12]
 8013658:	bfb8      	it	lt
 801365a:	2600      	movlt	r6, #0
 801365c:	2b00      	cmp	r3, #0
 801365e:	bfb7      	itett	lt
 8013660:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013664:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013668:	1a9d      	sublt	r5, r3, r2
 801366a:	2300      	movlt	r3, #0
 801366c:	e734      	b.n	80134d8 <_dtoa_r+0x720>
 801366e:	9e07      	ldr	r6, [sp, #28]
 8013670:	9d04      	ldr	r5, [sp, #16]
 8013672:	9f08      	ldr	r7, [sp, #32]
 8013674:	e73b      	b.n	80134ee <_dtoa_r+0x736>
 8013676:	9a07      	ldr	r2, [sp, #28]
 8013678:	e767      	b.n	801354a <_dtoa_r+0x792>
 801367a:	9b06      	ldr	r3, [sp, #24]
 801367c:	2b01      	cmp	r3, #1
 801367e:	dc18      	bgt.n	80136b2 <_dtoa_r+0x8fa>
 8013680:	f1ba 0f00 	cmp.w	sl, #0
 8013684:	d115      	bne.n	80136b2 <_dtoa_r+0x8fa>
 8013686:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801368a:	b993      	cbnz	r3, 80136b2 <_dtoa_r+0x8fa>
 801368c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013690:	0d1b      	lsrs	r3, r3, #20
 8013692:	051b      	lsls	r3, r3, #20
 8013694:	b183      	cbz	r3, 80136b8 <_dtoa_r+0x900>
 8013696:	9b04      	ldr	r3, [sp, #16]
 8013698:	3301      	adds	r3, #1
 801369a:	9304      	str	r3, [sp, #16]
 801369c:	9b05      	ldr	r3, [sp, #20]
 801369e:	3301      	adds	r3, #1
 80136a0:	9305      	str	r3, [sp, #20]
 80136a2:	f04f 0801 	mov.w	r8, #1
 80136a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	f47f af6a 	bne.w	8013582 <_dtoa_r+0x7ca>
 80136ae:	2001      	movs	r0, #1
 80136b0:	e76f      	b.n	8013592 <_dtoa_r+0x7da>
 80136b2:	f04f 0800 	mov.w	r8, #0
 80136b6:	e7f6      	b.n	80136a6 <_dtoa_r+0x8ee>
 80136b8:	4698      	mov	r8, r3
 80136ba:	e7f4      	b.n	80136a6 <_dtoa_r+0x8ee>
 80136bc:	f43f af7d 	beq.w	80135ba <_dtoa_r+0x802>
 80136c0:	4618      	mov	r0, r3
 80136c2:	301c      	adds	r0, #28
 80136c4:	e772      	b.n	80135ac <_dtoa_r+0x7f4>
 80136c6:	9b03      	ldr	r3, [sp, #12]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	dc37      	bgt.n	801373c <_dtoa_r+0x984>
 80136cc:	9b06      	ldr	r3, [sp, #24]
 80136ce:	2b02      	cmp	r3, #2
 80136d0:	dd34      	ble.n	801373c <_dtoa_r+0x984>
 80136d2:	9b03      	ldr	r3, [sp, #12]
 80136d4:	9302      	str	r3, [sp, #8]
 80136d6:	9b02      	ldr	r3, [sp, #8]
 80136d8:	b96b      	cbnz	r3, 80136f6 <_dtoa_r+0x93e>
 80136da:	4631      	mov	r1, r6
 80136dc:	2205      	movs	r2, #5
 80136de:	4620      	mov	r0, r4
 80136e0:	f000 fb16 	bl	8013d10 <__multadd>
 80136e4:	4601      	mov	r1, r0
 80136e6:	4606      	mov	r6, r0
 80136e8:	ee18 0a10 	vmov	r0, s16
 80136ec:	f000 fd30 	bl	8014150 <__mcmp>
 80136f0:	2800      	cmp	r0, #0
 80136f2:	f73f adbb 	bgt.w	801326c <_dtoa_r+0x4b4>
 80136f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136f8:	9d01      	ldr	r5, [sp, #4]
 80136fa:	43db      	mvns	r3, r3
 80136fc:	9300      	str	r3, [sp, #0]
 80136fe:	f04f 0800 	mov.w	r8, #0
 8013702:	4631      	mov	r1, r6
 8013704:	4620      	mov	r0, r4
 8013706:	f000 fae1 	bl	8013ccc <_Bfree>
 801370a:	2f00      	cmp	r7, #0
 801370c:	f43f aea4 	beq.w	8013458 <_dtoa_r+0x6a0>
 8013710:	f1b8 0f00 	cmp.w	r8, #0
 8013714:	d005      	beq.n	8013722 <_dtoa_r+0x96a>
 8013716:	45b8      	cmp	r8, r7
 8013718:	d003      	beq.n	8013722 <_dtoa_r+0x96a>
 801371a:	4641      	mov	r1, r8
 801371c:	4620      	mov	r0, r4
 801371e:	f000 fad5 	bl	8013ccc <_Bfree>
 8013722:	4639      	mov	r1, r7
 8013724:	4620      	mov	r0, r4
 8013726:	f000 fad1 	bl	8013ccc <_Bfree>
 801372a:	e695      	b.n	8013458 <_dtoa_r+0x6a0>
 801372c:	2600      	movs	r6, #0
 801372e:	4637      	mov	r7, r6
 8013730:	e7e1      	b.n	80136f6 <_dtoa_r+0x93e>
 8013732:	9700      	str	r7, [sp, #0]
 8013734:	4637      	mov	r7, r6
 8013736:	e599      	b.n	801326c <_dtoa_r+0x4b4>
 8013738:	40240000 	.word	0x40240000
 801373c:	9b08      	ldr	r3, [sp, #32]
 801373e:	2b00      	cmp	r3, #0
 8013740:	f000 80ca 	beq.w	80138d8 <_dtoa_r+0xb20>
 8013744:	9b03      	ldr	r3, [sp, #12]
 8013746:	9302      	str	r3, [sp, #8]
 8013748:	2d00      	cmp	r5, #0
 801374a:	dd05      	ble.n	8013758 <_dtoa_r+0x9a0>
 801374c:	4639      	mov	r1, r7
 801374e:	462a      	mov	r2, r5
 8013750:	4620      	mov	r0, r4
 8013752:	f000 fc8d 	bl	8014070 <__lshift>
 8013756:	4607      	mov	r7, r0
 8013758:	f1b8 0f00 	cmp.w	r8, #0
 801375c:	d05b      	beq.n	8013816 <_dtoa_r+0xa5e>
 801375e:	6879      	ldr	r1, [r7, #4]
 8013760:	4620      	mov	r0, r4
 8013762:	f000 fa73 	bl	8013c4c <_Balloc>
 8013766:	4605      	mov	r5, r0
 8013768:	b928      	cbnz	r0, 8013776 <_dtoa_r+0x9be>
 801376a:	4b87      	ldr	r3, [pc, #540]	; (8013988 <_dtoa_r+0xbd0>)
 801376c:	4602      	mov	r2, r0
 801376e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013772:	f7ff bb3b 	b.w	8012dec <_dtoa_r+0x34>
 8013776:	693a      	ldr	r2, [r7, #16]
 8013778:	3202      	adds	r2, #2
 801377a:	0092      	lsls	r2, r2, #2
 801377c:	f107 010c 	add.w	r1, r7, #12
 8013780:	300c      	adds	r0, #12
 8013782:	f7fe fa27 	bl	8011bd4 <memcpy>
 8013786:	2201      	movs	r2, #1
 8013788:	4629      	mov	r1, r5
 801378a:	4620      	mov	r0, r4
 801378c:	f000 fc70 	bl	8014070 <__lshift>
 8013790:	9b01      	ldr	r3, [sp, #4]
 8013792:	f103 0901 	add.w	r9, r3, #1
 8013796:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801379a:	4413      	add	r3, r2
 801379c:	9305      	str	r3, [sp, #20]
 801379e:	f00a 0301 	and.w	r3, sl, #1
 80137a2:	46b8      	mov	r8, r7
 80137a4:	9304      	str	r3, [sp, #16]
 80137a6:	4607      	mov	r7, r0
 80137a8:	4631      	mov	r1, r6
 80137aa:	ee18 0a10 	vmov	r0, s16
 80137ae:	f7ff fa75 	bl	8012c9c <quorem>
 80137b2:	4641      	mov	r1, r8
 80137b4:	9002      	str	r0, [sp, #8]
 80137b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80137ba:	ee18 0a10 	vmov	r0, s16
 80137be:	f000 fcc7 	bl	8014150 <__mcmp>
 80137c2:	463a      	mov	r2, r7
 80137c4:	9003      	str	r0, [sp, #12]
 80137c6:	4631      	mov	r1, r6
 80137c8:	4620      	mov	r0, r4
 80137ca:	f000 fcdd 	bl	8014188 <__mdiff>
 80137ce:	68c2      	ldr	r2, [r0, #12]
 80137d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80137d4:	4605      	mov	r5, r0
 80137d6:	bb02      	cbnz	r2, 801381a <_dtoa_r+0xa62>
 80137d8:	4601      	mov	r1, r0
 80137da:	ee18 0a10 	vmov	r0, s16
 80137de:	f000 fcb7 	bl	8014150 <__mcmp>
 80137e2:	4602      	mov	r2, r0
 80137e4:	4629      	mov	r1, r5
 80137e6:	4620      	mov	r0, r4
 80137e8:	9207      	str	r2, [sp, #28]
 80137ea:	f000 fa6f 	bl	8013ccc <_Bfree>
 80137ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80137f2:	ea43 0102 	orr.w	r1, r3, r2
 80137f6:	9b04      	ldr	r3, [sp, #16]
 80137f8:	430b      	orrs	r3, r1
 80137fa:	464d      	mov	r5, r9
 80137fc:	d10f      	bne.n	801381e <_dtoa_r+0xa66>
 80137fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013802:	d02a      	beq.n	801385a <_dtoa_r+0xaa2>
 8013804:	9b03      	ldr	r3, [sp, #12]
 8013806:	2b00      	cmp	r3, #0
 8013808:	dd02      	ble.n	8013810 <_dtoa_r+0xa58>
 801380a:	9b02      	ldr	r3, [sp, #8]
 801380c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013810:	f88b a000 	strb.w	sl, [fp]
 8013814:	e775      	b.n	8013702 <_dtoa_r+0x94a>
 8013816:	4638      	mov	r0, r7
 8013818:	e7ba      	b.n	8013790 <_dtoa_r+0x9d8>
 801381a:	2201      	movs	r2, #1
 801381c:	e7e2      	b.n	80137e4 <_dtoa_r+0xa2c>
 801381e:	9b03      	ldr	r3, [sp, #12]
 8013820:	2b00      	cmp	r3, #0
 8013822:	db04      	blt.n	801382e <_dtoa_r+0xa76>
 8013824:	9906      	ldr	r1, [sp, #24]
 8013826:	430b      	orrs	r3, r1
 8013828:	9904      	ldr	r1, [sp, #16]
 801382a:	430b      	orrs	r3, r1
 801382c:	d122      	bne.n	8013874 <_dtoa_r+0xabc>
 801382e:	2a00      	cmp	r2, #0
 8013830:	ddee      	ble.n	8013810 <_dtoa_r+0xa58>
 8013832:	ee18 1a10 	vmov	r1, s16
 8013836:	2201      	movs	r2, #1
 8013838:	4620      	mov	r0, r4
 801383a:	f000 fc19 	bl	8014070 <__lshift>
 801383e:	4631      	mov	r1, r6
 8013840:	ee08 0a10 	vmov	s16, r0
 8013844:	f000 fc84 	bl	8014150 <__mcmp>
 8013848:	2800      	cmp	r0, #0
 801384a:	dc03      	bgt.n	8013854 <_dtoa_r+0xa9c>
 801384c:	d1e0      	bne.n	8013810 <_dtoa_r+0xa58>
 801384e:	f01a 0f01 	tst.w	sl, #1
 8013852:	d0dd      	beq.n	8013810 <_dtoa_r+0xa58>
 8013854:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013858:	d1d7      	bne.n	801380a <_dtoa_r+0xa52>
 801385a:	2339      	movs	r3, #57	; 0x39
 801385c:	f88b 3000 	strb.w	r3, [fp]
 8013860:	462b      	mov	r3, r5
 8013862:	461d      	mov	r5, r3
 8013864:	3b01      	subs	r3, #1
 8013866:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801386a:	2a39      	cmp	r2, #57	; 0x39
 801386c:	d071      	beq.n	8013952 <_dtoa_r+0xb9a>
 801386e:	3201      	adds	r2, #1
 8013870:	701a      	strb	r2, [r3, #0]
 8013872:	e746      	b.n	8013702 <_dtoa_r+0x94a>
 8013874:	2a00      	cmp	r2, #0
 8013876:	dd07      	ble.n	8013888 <_dtoa_r+0xad0>
 8013878:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801387c:	d0ed      	beq.n	801385a <_dtoa_r+0xaa2>
 801387e:	f10a 0301 	add.w	r3, sl, #1
 8013882:	f88b 3000 	strb.w	r3, [fp]
 8013886:	e73c      	b.n	8013702 <_dtoa_r+0x94a>
 8013888:	9b05      	ldr	r3, [sp, #20]
 801388a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801388e:	4599      	cmp	r9, r3
 8013890:	d047      	beq.n	8013922 <_dtoa_r+0xb6a>
 8013892:	ee18 1a10 	vmov	r1, s16
 8013896:	2300      	movs	r3, #0
 8013898:	220a      	movs	r2, #10
 801389a:	4620      	mov	r0, r4
 801389c:	f000 fa38 	bl	8013d10 <__multadd>
 80138a0:	45b8      	cmp	r8, r7
 80138a2:	ee08 0a10 	vmov	s16, r0
 80138a6:	f04f 0300 	mov.w	r3, #0
 80138aa:	f04f 020a 	mov.w	r2, #10
 80138ae:	4641      	mov	r1, r8
 80138b0:	4620      	mov	r0, r4
 80138b2:	d106      	bne.n	80138c2 <_dtoa_r+0xb0a>
 80138b4:	f000 fa2c 	bl	8013d10 <__multadd>
 80138b8:	4680      	mov	r8, r0
 80138ba:	4607      	mov	r7, r0
 80138bc:	f109 0901 	add.w	r9, r9, #1
 80138c0:	e772      	b.n	80137a8 <_dtoa_r+0x9f0>
 80138c2:	f000 fa25 	bl	8013d10 <__multadd>
 80138c6:	4639      	mov	r1, r7
 80138c8:	4680      	mov	r8, r0
 80138ca:	2300      	movs	r3, #0
 80138cc:	220a      	movs	r2, #10
 80138ce:	4620      	mov	r0, r4
 80138d0:	f000 fa1e 	bl	8013d10 <__multadd>
 80138d4:	4607      	mov	r7, r0
 80138d6:	e7f1      	b.n	80138bc <_dtoa_r+0xb04>
 80138d8:	9b03      	ldr	r3, [sp, #12]
 80138da:	9302      	str	r3, [sp, #8]
 80138dc:	9d01      	ldr	r5, [sp, #4]
 80138de:	ee18 0a10 	vmov	r0, s16
 80138e2:	4631      	mov	r1, r6
 80138e4:	f7ff f9da 	bl	8012c9c <quorem>
 80138e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80138ec:	9b01      	ldr	r3, [sp, #4]
 80138ee:	f805 ab01 	strb.w	sl, [r5], #1
 80138f2:	1aea      	subs	r2, r5, r3
 80138f4:	9b02      	ldr	r3, [sp, #8]
 80138f6:	4293      	cmp	r3, r2
 80138f8:	dd09      	ble.n	801390e <_dtoa_r+0xb56>
 80138fa:	ee18 1a10 	vmov	r1, s16
 80138fe:	2300      	movs	r3, #0
 8013900:	220a      	movs	r2, #10
 8013902:	4620      	mov	r0, r4
 8013904:	f000 fa04 	bl	8013d10 <__multadd>
 8013908:	ee08 0a10 	vmov	s16, r0
 801390c:	e7e7      	b.n	80138de <_dtoa_r+0xb26>
 801390e:	9b02      	ldr	r3, [sp, #8]
 8013910:	2b00      	cmp	r3, #0
 8013912:	bfc8      	it	gt
 8013914:	461d      	movgt	r5, r3
 8013916:	9b01      	ldr	r3, [sp, #4]
 8013918:	bfd8      	it	le
 801391a:	2501      	movle	r5, #1
 801391c:	441d      	add	r5, r3
 801391e:	f04f 0800 	mov.w	r8, #0
 8013922:	ee18 1a10 	vmov	r1, s16
 8013926:	2201      	movs	r2, #1
 8013928:	4620      	mov	r0, r4
 801392a:	f000 fba1 	bl	8014070 <__lshift>
 801392e:	4631      	mov	r1, r6
 8013930:	ee08 0a10 	vmov	s16, r0
 8013934:	f000 fc0c 	bl	8014150 <__mcmp>
 8013938:	2800      	cmp	r0, #0
 801393a:	dc91      	bgt.n	8013860 <_dtoa_r+0xaa8>
 801393c:	d102      	bne.n	8013944 <_dtoa_r+0xb8c>
 801393e:	f01a 0f01 	tst.w	sl, #1
 8013942:	d18d      	bne.n	8013860 <_dtoa_r+0xaa8>
 8013944:	462b      	mov	r3, r5
 8013946:	461d      	mov	r5, r3
 8013948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801394c:	2a30      	cmp	r2, #48	; 0x30
 801394e:	d0fa      	beq.n	8013946 <_dtoa_r+0xb8e>
 8013950:	e6d7      	b.n	8013702 <_dtoa_r+0x94a>
 8013952:	9a01      	ldr	r2, [sp, #4]
 8013954:	429a      	cmp	r2, r3
 8013956:	d184      	bne.n	8013862 <_dtoa_r+0xaaa>
 8013958:	9b00      	ldr	r3, [sp, #0]
 801395a:	3301      	adds	r3, #1
 801395c:	9300      	str	r3, [sp, #0]
 801395e:	2331      	movs	r3, #49	; 0x31
 8013960:	7013      	strb	r3, [r2, #0]
 8013962:	e6ce      	b.n	8013702 <_dtoa_r+0x94a>
 8013964:	4b09      	ldr	r3, [pc, #36]	; (801398c <_dtoa_r+0xbd4>)
 8013966:	f7ff ba95 	b.w	8012e94 <_dtoa_r+0xdc>
 801396a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801396c:	2b00      	cmp	r3, #0
 801396e:	f47f aa6e 	bne.w	8012e4e <_dtoa_r+0x96>
 8013972:	4b07      	ldr	r3, [pc, #28]	; (8013990 <_dtoa_r+0xbd8>)
 8013974:	f7ff ba8e 	b.w	8012e94 <_dtoa_r+0xdc>
 8013978:	9b02      	ldr	r3, [sp, #8]
 801397a:	2b00      	cmp	r3, #0
 801397c:	dcae      	bgt.n	80138dc <_dtoa_r+0xb24>
 801397e:	9b06      	ldr	r3, [sp, #24]
 8013980:	2b02      	cmp	r3, #2
 8013982:	f73f aea8 	bgt.w	80136d6 <_dtoa_r+0x91e>
 8013986:	e7a9      	b.n	80138dc <_dtoa_r+0xb24>
 8013988:	080177d0 	.word	0x080177d0
 801398c:	08017694 	.word	0x08017694
 8013990:	08017768 	.word	0x08017768

08013994 <__sflush_r>:
 8013994:	898a      	ldrh	r2, [r1, #12]
 8013996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801399a:	4605      	mov	r5, r0
 801399c:	0710      	lsls	r0, r2, #28
 801399e:	460c      	mov	r4, r1
 80139a0:	d458      	bmi.n	8013a54 <__sflush_r+0xc0>
 80139a2:	684b      	ldr	r3, [r1, #4]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	dc05      	bgt.n	80139b4 <__sflush_r+0x20>
 80139a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	dc02      	bgt.n	80139b4 <__sflush_r+0x20>
 80139ae:	2000      	movs	r0, #0
 80139b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80139b6:	2e00      	cmp	r6, #0
 80139b8:	d0f9      	beq.n	80139ae <__sflush_r+0x1a>
 80139ba:	2300      	movs	r3, #0
 80139bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80139c0:	682f      	ldr	r7, [r5, #0]
 80139c2:	602b      	str	r3, [r5, #0]
 80139c4:	d032      	beq.n	8013a2c <__sflush_r+0x98>
 80139c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80139c8:	89a3      	ldrh	r3, [r4, #12]
 80139ca:	075a      	lsls	r2, r3, #29
 80139cc:	d505      	bpl.n	80139da <__sflush_r+0x46>
 80139ce:	6863      	ldr	r3, [r4, #4]
 80139d0:	1ac0      	subs	r0, r0, r3
 80139d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80139d4:	b10b      	cbz	r3, 80139da <__sflush_r+0x46>
 80139d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80139d8:	1ac0      	subs	r0, r0, r3
 80139da:	2300      	movs	r3, #0
 80139dc:	4602      	mov	r2, r0
 80139de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80139e0:	6a21      	ldr	r1, [r4, #32]
 80139e2:	4628      	mov	r0, r5
 80139e4:	47b0      	blx	r6
 80139e6:	1c43      	adds	r3, r0, #1
 80139e8:	89a3      	ldrh	r3, [r4, #12]
 80139ea:	d106      	bne.n	80139fa <__sflush_r+0x66>
 80139ec:	6829      	ldr	r1, [r5, #0]
 80139ee:	291d      	cmp	r1, #29
 80139f0:	d82c      	bhi.n	8013a4c <__sflush_r+0xb8>
 80139f2:	4a2a      	ldr	r2, [pc, #168]	; (8013a9c <__sflush_r+0x108>)
 80139f4:	40ca      	lsrs	r2, r1
 80139f6:	07d6      	lsls	r6, r2, #31
 80139f8:	d528      	bpl.n	8013a4c <__sflush_r+0xb8>
 80139fa:	2200      	movs	r2, #0
 80139fc:	6062      	str	r2, [r4, #4]
 80139fe:	04d9      	lsls	r1, r3, #19
 8013a00:	6922      	ldr	r2, [r4, #16]
 8013a02:	6022      	str	r2, [r4, #0]
 8013a04:	d504      	bpl.n	8013a10 <__sflush_r+0x7c>
 8013a06:	1c42      	adds	r2, r0, #1
 8013a08:	d101      	bne.n	8013a0e <__sflush_r+0x7a>
 8013a0a:	682b      	ldr	r3, [r5, #0]
 8013a0c:	b903      	cbnz	r3, 8013a10 <__sflush_r+0x7c>
 8013a0e:	6560      	str	r0, [r4, #84]	; 0x54
 8013a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a12:	602f      	str	r7, [r5, #0]
 8013a14:	2900      	cmp	r1, #0
 8013a16:	d0ca      	beq.n	80139ae <__sflush_r+0x1a>
 8013a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a1c:	4299      	cmp	r1, r3
 8013a1e:	d002      	beq.n	8013a26 <__sflush_r+0x92>
 8013a20:	4628      	mov	r0, r5
 8013a22:	f7fe f8ed 	bl	8011c00 <_free_r>
 8013a26:	2000      	movs	r0, #0
 8013a28:	6360      	str	r0, [r4, #52]	; 0x34
 8013a2a:	e7c1      	b.n	80139b0 <__sflush_r+0x1c>
 8013a2c:	6a21      	ldr	r1, [r4, #32]
 8013a2e:	2301      	movs	r3, #1
 8013a30:	4628      	mov	r0, r5
 8013a32:	47b0      	blx	r6
 8013a34:	1c41      	adds	r1, r0, #1
 8013a36:	d1c7      	bne.n	80139c8 <__sflush_r+0x34>
 8013a38:	682b      	ldr	r3, [r5, #0]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d0c4      	beq.n	80139c8 <__sflush_r+0x34>
 8013a3e:	2b1d      	cmp	r3, #29
 8013a40:	d001      	beq.n	8013a46 <__sflush_r+0xb2>
 8013a42:	2b16      	cmp	r3, #22
 8013a44:	d101      	bne.n	8013a4a <__sflush_r+0xb6>
 8013a46:	602f      	str	r7, [r5, #0]
 8013a48:	e7b1      	b.n	80139ae <__sflush_r+0x1a>
 8013a4a:	89a3      	ldrh	r3, [r4, #12]
 8013a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a50:	81a3      	strh	r3, [r4, #12]
 8013a52:	e7ad      	b.n	80139b0 <__sflush_r+0x1c>
 8013a54:	690f      	ldr	r7, [r1, #16]
 8013a56:	2f00      	cmp	r7, #0
 8013a58:	d0a9      	beq.n	80139ae <__sflush_r+0x1a>
 8013a5a:	0793      	lsls	r3, r2, #30
 8013a5c:	680e      	ldr	r6, [r1, #0]
 8013a5e:	bf08      	it	eq
 8013a60:	694b      	ldreq	r3, [r1, #20]
 8013a62:	600f      	str	r7, [r1, #0]
 8013a64:	bf18      	it	ne
 8013a66:	2300      	movne	r3, #0
 8013a68:	eba6 0807 	sub.w	r8, r6, r7
 8013a6c:	608b      	str	r3, [r1, #8]
 8013a6e:	f1b8 0f00 	cmp.w	r8, #0
 8013a72:	dd9c      	ble.n	80139ae <__sflush_r+0x1a>
 8013a74:	6a21      	ldr	r1, [r4, #32]
 8013a76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a78:	4643      	mov	r3, r8
 8013a7a:	463a      	mov	r2, r7
 8013a7c:	4628      	mov	r0, r5
 8013a7e:	47b0      	blx	r6
 8013a80:	2800      	cmp	r0, #0
 8013a82:	dc06      	bgt.n	8013a92 <__sflush_r+0xfe>
 8013a84:	89a3      	ldrh	r3, [r4, #12]
 8013a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a8a:	81a3      	strh	r3, [r4, #12]
 8013a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8013a90:	e78e      	b.n	80139b0 <__sflush_r+0x1c>
 8013a92:	4407      	add	r7, r0
 8013a94:	eba8 0800 	sub.w	r8, r8, r0
 8013a98:	e7e9      	b.n	8013a6e <__sflush_r+0xda>
 8013a9a:	bf00      	nop
 8013a9c:	20400001 	.word	0x20400001

08013aa0 <_fflush_r>:
 8013aa0:	b538      	push	{r3, r4, r5, lr}
 8013aa2:	690b      	ldr	r3, [r1, #16]
 8013aa4:	4605      	mov	r5, r0
 8013aa6:	460c      	mov	r4, r1
 8013aa8:	b913      	cbnz	r3, 8013ab0 <_fflush_r+0x10>
 8013aaa:	2500      	movs	r5, #0
 8013aac:	4628      	mov	r0, r5
 8013aae:	bd38      	pop	{r3, r4, r5, pc}
 8013ab0:	b118      	cbz	r0, 8013aba <_fflush_r+0x1a>
 8013ab2:	6983      	ldr	r3, [r0, #24]
 8013ab4:	b90b      	cbnz	r3, 8013aba <_fflush_r+0x1a>
 8013ab6:	f7fd ffbf 	bl	8011a38 <__sinit>
 8013aba:	4b14      	ldr	r3, [pc, #80]	; (8013b0c <_fflush_r+0x6c>)
 8013abc:	429c      	cmp	r4, r3
 8013abe:	d11b      	bne.n	8013af8 <_fflush_r+0x58>
 8013ac0:	686c      	ldr	r4, [r5, #4]
 8013ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d0ef      	beq.n	8013aaa <_fflush_r+0xa>
 8013aca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013acc:	07d0      	lsls	r0, r2, #31
 8013ace:	d404      	bmi.n	8013ada <_fflush_r+0x3a>
 8013ad0:	0599      	lsls	r1, r3, #22
 8013ad2:	d402      	bmi.n	8013ada <_fflush_r+0x3a>
 8013ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ad6:	f7fe f872 	bl	8011bbe <__retarget_lock_acquire_recursive>
 8013ada:	4628      	mov	r0, r5
 8013adc:	4621      	mov	r1, r4
 8013ade:	f7ff ff59 	bl	8013994 <__sflush_r>
 8013ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ae4:	07da      	lsls	r2, r3, #31
 8013ae6:	4605      	mov	r5, r0
 8013ae8:	d4e0      	bmi.n	8013aac <_fflush_r+0xc>
 8013aea:	89a3      	ldrh	r3, [r4, #12]
 8013aec:	059b      	lsls	r3, r3, #22
 8013aee:	d4dd      	bmi.n	8013aac <_fflush_r+0xc>
 8013af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013af2:	f7fe f865 	bl	8011bc0 <__retarget_lock_release_recursive>
 8013af6:	e7d9      	b.n	8013aac <_fflush_r+0xc>
 8013af8:	4b05      	ldr	r3, [pc, #20]	; (8013b10 <_fflush_r+0x70>)
 8013afa:	429c      	cmp	r4, r3
 8013afc:	d101      	bne.n	8013b02 <_fflush_r+0x62>
 8013afe:	68ac      	ldr	r4, [r5, #8]
 8013b00:	e7df      	b.n	8013ac2 <_fflush_r+0x22>
 8013b02:	4b04      	ldr	r3, [pc, #16]	; (8013b14 <_fflush_r+0x74>)
 8013b04:	429c      	cmp	r4, r3
 8013b06:	bf08      	it	eq
 8013b08:	68ec      	ldreq	r4, [r5, #12]
 8013b0a:	e7da      	b.n	8013ac2 <_fflush_r+0x22>
 8013b0c:	08017640 	.word	0x08017640
 8013b10:	08017660 	.word	0x08017660
 8013b14:	08017620 	.word	0x08017620

08013b18 <fiprintf>:
 8013b18:	b40e      	push	{r1, r2, r3}
 8013b1a:	b503      	push	{r0, r1, lr}
 8013b1c:	4601      	mov	r1, r0
 8013b1e:	ab03      	add	r3, sp, #12
 8013b20:	4805      	ldr	r0, [pc, #20]	; (8013b38 <fiprintf+0x20>)
 8013b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b26:	6800      	ldr	r0, [r0, #0]
 8013b28:	9301      	str	r3, [sp, #4]
 8013b2a:	f000 fddd 	bl	80146e8 <_vfiprintf_r>
 8013b2e:	b002      	add	sp, #8
 8013b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b34:	b003      	add	sp, #12
 8013b36:	4770      	bx	lr
 8013b38:	200008cc 	.word	0x200008cc

08013b3c <_localeconv_r>:
 8013b3c:	4800      	ldr	r0, [pc, #0]	; (8013b40 <_localeconv_r+0x4>)
 8013b3e:	4770      	bx	lr
 8013b40:	20000a20 	.word	0x20000a20

08013b44 <_lseek_r>:
 8013b44:	b538      	push	{r3, r4, r5, lr}
 8013b46:	4d07      	ldr	r5, [pc, #28]	; (8013b64 <_lseek_r+0x20>)
 8013b48:	4604      	mov	r4, r0
 8013b4a:	4608      	mov	r0, r1
 8013b4c:	4611      	mov	r1, r2
 8013b4e:	2200      	movs	r2, #0
 8013b50:	602a      	str	r2, [r5, #0]
 8013b52:	461a      	mov	r2, r3
 8013b54:	f7ee fc2c 	bl	80023b0 <_lseek>
 8013b58:	1c43      	adds	r3, r0, #1
 8013b5a:	d102      	bne.n	8013b62 <_lseek_r+0x1e>
 8013b5c:	682b      	ldr	r3, [r5, #0]
 8013b5e:	b103      	cbz	r3, 8013b62 <_lseek_r+0x1e>
 8013b60:	6023      	str	r3, [r4, #0]
 8013b62:	bd38      	pop	{r3, r4, r5, pc}
 8013b64:	20005218 	.word	0x20005218

08013b68 <__swhatbuf_r>:
 8013b68:	b570      	push	{r4, r5, r6, lr}
 8013b6a:	460e      	mov	r6, r1
 8013b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b70:	2900      	cmp	r1, #0
 8013b72:	b096      	sub	sp, #88	; 0x58
 8013b74:	4614      	mov	r4, r2
 8013b76:	461d      	mov	r5, r3
 8013b78:	da08      	bge.n	8013b8c <__swhatbuf_r+0x24>
 8013b7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013b7e:	2200      	movs	r2, #0
 8013b80:	602a      	str	r2, [r5, #0]
 8013b82:	061a      	lsls	r2, r3, #24
 8013b84:	d410      	bmi.n	8013ba8 <__swhatbuf_r+0x40>
 8013b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b8a:	e00e      	b.n	8013baa <__swhatbuf_r+0x42>
 8013b8c:	466a      	mov	r2, sp
 8013b8e:	f000 fef5 	bl	801497c <_fstat_r>
 8013b92:	2800      	cmp	r0, #0
 8013b94:	dbf1      	blt.n	8013b7a <__swhatbuf_r+0x12>
 8013b96:	9a01      	ldr	r2, [sp, #4]
 8013b98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013b9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013ba0:	425a      	negs	r2, r3
 8013ba2:	415a      	adcs	r2, r3
 8013ba4:	602a      	str	r2, [r5, #0]
 8013ba6:	e7ee      	b.n	8013b86 <__swhatbuf_r+0x1e>
 8013ba8:	2340      	movs	r3, #64	; 0x40
 8013baa:	2000      	movs	r0, #0
 8013bac:	6023      	str	r3, [r4, #0]
 8013bae:	b016      	add	sp, #88	; 0x58
 8013bb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08013bb4 <__smakebuf_r>:
 8013bb4:	898b      	ldrh	r3, [r1, #12]
 8013bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013bb8:	079d      	lsls	r5, r3, #30
 8013bba:	4606      	mov	r6, r0
 8013bbc:	460c      	mov	r4, r1
 8013bbe:	d507      	bpl.n	8013bd0 <__smakebuf_r+0x1c>
 8013bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013bc4:	6023      	str	r3, [r4, #0]
 8013bc6:	6123      	str	r3, [r4, #16]
 8013bc8:	2301      	movs	r3, #1
 8013bca:	6163      	str	r3, [r4, #20]
 8013bcc:	b002      	add	sp, #8
 8013bce:	bd70      	pop	{r4, r5, r6, pc}
 8013bd0:	ab01      	add	r3, sp, #4
 8013bd2:	466a      	mov	r2, sp
 8013bd4:	f7ff ffc8 	bl	8013b68 <__swhatbuf_r>
 8013bd8:	9900      	ldr	r1, [sp, #0]
 8013bda:	4605      	mov	r5, r0
 8013bdc:	4630      	mov	r0, r6
 8013bde:	f7fe f87b 	bl	8011cd8 <_malloc_r>
 8013be2:	b948      	cbnz	r0, 8013bf8 <__smakebuf_r+0x44>
 8013be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013be8:	059a      	lsls	r2, r3, #22
 8013bea:	d4ef      	bmi.n	8013bcc <__smakebuf_r+0x18>
 8013bec:	f023 0303 	bic.w	r3, r3, #3
 8013bf0:	f043 0302 	orr.w	r3, r3, #2
 8013bf4:	81a3      	strh	r3, [r4, #12]
 8013bf6:	e7e3      	b.n	8013bc0 <__smakebuf_r+0xc>
 8013bf8:	4b0d      	ldr	r3, [pc, #52]	; (8013c30 <__smakebuf_r+0x7c>)
 8013bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8013bfc:	89a3      	ldrh	r3, [r4, #12]
 8013bfe:	6020      	str	r0, [r4, #0]
 8013c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c04:	81a3      	strh	r3, [r4, #12]
 8013c06:	9b00      	ldr	r3, [sp, #0]
 8013c08:	6163      	str	r3, [r4, #20]
 8013c0a:	9b01      	ldr	r3, [sp, #4]
 8013c0c:	6120      	str	r0, [r4, #16]
 8013c0e:	b15b      	cbz	r3, 8013c28 <__smakebuf_r+0x74>
 8013c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c14:	4630      	mov	r0, r6
 8013c16:	f000 fec3 	bl	80149a0 <_isatty_r>
 8013c1a:	b128      	cbz	r0, 8013c28 <__smakebuf_r+0x74>
 8013c1c:	89a3      	ldrh	r3, [r4, #12]
 8013c1e:	f023 0303 	bic.w	r3, r3, #3
 8013c22:	f043 0301 	orr.w	r3, r3, #1
 8013c26:	81a3      	strh	r3, [r4, #12]
 8013c28:	89a0      	ldrh	r0, [r4, #12]
 8013c2a:	4305      	orrs	r5, r0
 8013c2c:	81a5      	strh	r5, [r4, #12]
 8013c2e:	e7cd      	b.n	8013bcc <__smakebuf_r+0x18>
 8013c30:	080119d1 	.word	0x080119d1

08013c34 <__malloc_lock>:
 8013c34:	4801      	ldr	r0, [pc, #4]	; (8013c3c <__malloc_lock+0x8>)
 8013c36:	f7fd bfc2 	b.w	8011bbe <__retarget_lock_acquire_recursive>
 8013c3a:	bf00      	nop
 8013c3c:	2000520c 	.word	0x2000520c

08013c40 <__malloc_unlock>:
 8013c40:	4801      	ldr	r0, [pc, #4]	; (8013c48 <__malloc_unlock+0x8>)
 8013c42:	f7fd bfbd 	b.w	8011bc0 <__retarget_lock_release_recursive>
 8013c46:	bf00      	nop
 8013c48:	2000520c 	.word	0x2000520c

08013c4c <_Balloc>:
 8013c4c:	b570      	push	{r4, r5, r6, lr}
 8013c4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013c50:	4604      	mov	r4, r0
 8013c52:	460d      	mov	r5, r1
 8013c54:	b976      	cbnz	r6, 8013c74 <_Balloc+0x28>
 8013c56:	2010      	movs	r0, #16
 8013c58:	f7fd ffb4 	bl	8011bc4 <malloc>
 8013c5c:	4602      	mov	r2, r0
 8013c5e:	6260      	str	r0, [r4, #36]	; 0x24
 8013c60:	b920      	cbnz	r0, 8013c6c <_Balloc+0x20>
 8013c62:	4b18      	ldr	r3, [pc, #96]	; (8013cc4 <_Balloc+0x78>)
 8013c64:	4818      	ldr	r0, [pc, #96]	; (8013cc8 <_Balloc+0x7c>)
 8013c66:	2166      	movs	r1, #102	; 0x66
 8013c68:	f7fe ffea 	bl	8012c40 <__assert_func>
 8013c6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013c70:	6006      	str	r6, [r0, #0]
 8013c72:	60c6      	str	r6, [r0, #12]
 8013c74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013c76:	68f3      	ldr	r3, [r6, #12]
 8013c78:	b183      	cbz	r3, 8013c9c <_Balloc+0x50>
 8013c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c7c:	68db      	ldr	r3, [r3, #12]
 8013c7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013c82:	b9b8      	cbnz	r0, 8013cb4 <_Balloc+0x68>
 8013c84:	2101      	movs	r1, #1
 8013c86:	fa01 f605 	lsl.w	r6, r1, r5
 8013c8a:	1d72      	adds	r2, r6, #5
 8013c8c:	0092      	lsls	r2, r2, #2
 8013c8e:	4620      	mov	r0, r4
 8013c90:	f000 fb60 	bl	8014354 <_calloc_r>
 8013c94:	b160      	cbz	r0, 8013cb0 <_Balloc+0x64>
 8013c96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013c9a:	e00e      	b.n	8013cba <_Balloc+0x6e>
 8013c9c:	2221      	movs	r2, #33	; 0x21
 8013c9e:	2104      	movs	r1, #4
 8013ca0:	4620      	mov	r0, r4
 8013ca2:	f000 fb57 	bl	8014354 <_calloc_r>
 8013ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ca8:	60f0      	str	r0, [r6, #12]
 8013caa:	68db      	ldr	r3, [r3, #12]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d1e4      	bne.n	8013c7a <_Balloc+0x2e>
 8013cb0:	2000      	movs	r0, #0
 8013cb2:	bd70      	pop	{r4, r5, r6, pc}
 8013cb4:	6802      	ldr	r2, [r0, #0]
 8013cb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013cba:	2300      	movs	r3, #0
 8013cbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013cc0:	e7f7      	b.n	8013cb2 <_Balloc+0x66>
 8013cc2:	bf00      	nop
 8013cc4:	080176b8 	.word	0x080176b8
 8013cc8:	080177e1 	.word	0x080177e1

08013ccc <_Bfree>:
 8013ccc:	b570      	push	{r4, r5, r6, lr}
 8013cce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013cd0:	4605      	mov	r5, r0
 8013cd2:	460c      	mov	r4, r1
 8013cd4:	b976      	cbnz	r6, 8013cf4 <_Bfree+0x28>
 8013cd6:	2010      	movs	r0, #16
 8013cd8:	f7fd ff74 	bl	8011bc4 <malloc>
 8013cdc:	4602      	mov	r2, r0
 8013cde:	6268      	str	r0, [r5, #36]	; 0x24
 8013ce0:	b920      	cbnz	r0, 8013cec <_Bfree+0x20>
 8013ce2:	4b09      	ldr	r3, [pc, #36]	; (8013d08 <_Bfree+0x3c>)
 8013ce4:	4809      	ldr	r0, [pc, #36]	; (8013d0c <_Bfree+0x40>)
 8013ce6:	218a      	movs	r1, #138	; 0x8a
 8013ce8:	f7fe ffaa 	bl	8012c40 <__assert_func>
 8013cec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013cf0:	6006      	str	r6, [r0, #0]
 8013cf2:	60c6      	str	r6, [r0, #12]
 8013cf4:	b13c      	cbz	r4, 8013d06 <_Bfree+0x3a>
 8013cf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013cf8:	6862      	ldr	r2, [r4, #4]
 8013cfa:	68db      	ldr	r3, [r3, #12]
 8013cfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013d00:	6021      	str	r1, [r4, #0]
 8013d02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013d06:	bd70      	pop	{r4, r5, r6, pc}
 8013d08:	080176b8 	.word	0x080176b8
 8013d0c:	080177e1 	.word	0x080177e1

08013d10 <__multadd>:
 8013d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d14:	690d      	ldr	r5, [r1, #16]
 8013d16:	4607      	mov	r7, r0
 8013d18:	460c      	mov	r4, r1
 8013d1a:	461e      	mov	r6, r3
 8013d1c:	f101 0c14 	add.w	ip, r1, #20
 8013d20:	2000      	movs	r0, #0
 8013d22:	f8dc 3000 	ldr.w	r3, [ip]
 8013d26:	b299      	uxth	r1, r3
 8013d28:	fb02 6101 	mla	r1, r2, r1, r6
 8013d2c:	0c1e      	lsrs	r6, r3, #16
 8013d2e:	0c0b      	lsrs	r3, r1, #16
 8013d30:	fb02 3306 	mla	r3, r2, r6, r3
 8013d34:	b289      	uxth	r1, r1
 8013d36:	3001      	adds	r0, #1
 8013d38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013d3c:	4285      	cmp	r5, r0
 8013d3e:	f84c 1b04 	str.w	r1, [ip], #4
 8013d42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013d46:	dcec      	bgt.n	8013d22 <__multadd+0x12>
 8013d48:	b30e      	cbz	r6, 8013d8e <__multadd+0x7e>
 8013d4a:	68a3      	ldr	r3, [r4, #8]
 8013d4c:	42ab      	cmp	r3, r5
 8013d4e:	dc19      	bgt.n	8013d84 <__multadd+0x74>
 8013d50:	6861      	ldr	r1, [r4, #4]
 8013d52:	4638      	mov	r0, r7
 8013d54:	3101      	adds	r1, #1
 8013d56:	f7ff ff79 	bl	8013c4c <_Balloc>
 8013d5a:	4680      	mov	r8, r0
 8013d5c:	b928      	cbnz	r0, 8013d6a <__multadd+0x5a>
 8013d5e:	4602      	mov	r2, r0
 8013d60:	4b0c      	ldr	r3, [pc, #48]	; (8013d94 <__multadd+0x84>)
 8013d62:	480d      	ldr	r0, [pc, #52]	; (8013d98 <__multadd+0x88>)
 8013d64:	21b5      	movs	r1, #181	; 0xb5
 8013d66:	f7fe ff6b 	bl	8012c40 <__assert_func>
 8013d6a:	6922      	ldr	r2, [r4, #16]
 8013d6c:	3202      	adds	r2, #2
 8013d6e:	f104 010c 	add.w	r1, r4, #12
 8013d72:	0092      	lsls	r2, r2, #2
 8013d74:	300c      	adds	r0, #12
 8013d76:	f7fd ff2d 	bl	8011bd4 <memcpy>
 8013d7a:	4621      	mov	r1, r4
 8013d7c:	4638      	mov	r0, r7
 8013d7e:	f7ff ffa5 	bl	8013ccc <_Bfree>
 8013d82:	4644      	mov	r4, r8
 8013d84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013d88:	3501      	adds	r5, #1
 8013d8a:	615e      	str	r6, [r3, #20]
 8013d8c:	6125      	str	r5, [r4, #16]
 8013d8e:	4620      	mov	r0, r4
 8013d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d94:	080177d0 	.word	0x080177d0
 8013d98:	080177e1 	.word	0x080177e1

08013d9c <__hi0bits>:
 8013d9c:	0c03      	lsrs	r3, r0, #16
 8013d9e:	041b      	lsls	r3, r3, #16
 8013da0:	b9d3      	cbnz	r3, 8013dd8 <__hi0bits+0x3c>
 8013da2:	0400      	lsls	r0, r0, #16
 8013da4:	2310      	movs	r3, #16
 8013da6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013daa:	bf04      	itt	eq
 8013dac:	0200      	lsleq	r0, r0, #8
 8013dae:	3308      	addeq	r3, #8
 8013db0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013db4:	bf04      	itt	eq
 8013db6:	0100      	lsleq	r0, r0, #4
 8013db8:	3304      	addeq	r3, #4
 8013dba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013dbe:	bf04      	itt	eq
 8013dc0:	0080      	lsleq	r0, r0, #2
 8013dc2:	3302      	addeq	r3, #2
 8013dc4:	2800      	cmp	r0, #0
 8013dc6:	db05      	blt.n	8013dd4 <__hi0bits+0x38>
 8013dc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013dcc:	f103 0301 	add.w	r3, r3, #1
 8013dd0:	bf08      	it	eq
 8013dd2:	2320      	moveq	r3, #32
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	4770      	bx	lr
 8013dd8:	2300      	movs	r3, #0
 8013dda:	e7e4      	b.n	8013da6 <__hi0bits+0xa>

08013ddc <__lo0bits>:
 8013ddc:	6803      	ldr	r3, [r0, #0]
 8013dde:	f013 0207 	ands.w	r2, r3, #7
 8013de2:	4601      	mov	r1, r0
 8013de4:	d00b      	beq.n	8013dfe <__lo0bits+0x22>
 8013de6:	07da      	lsls	r2, r3, #31
 8013de8:	d423      	bmi.n	8013e32 <__lo0bits+0x56>
 8013dea:	0798      	lsls	r0, r3, #30
 8013dec:	bf49      	itett	mi
 8013dee:	085b      	lsrmi	r3, r3, #1
 8013df0:	089b      	lsrpl	r3, r3, #2
 8013df2:	2001      	movmi	r0, #1
 8013df4:	600b      	strmi	r3, [r1, #0]
 8013df6:	bf5c      	itt	pl
 8013df8:	600b      	strpl	r3, [r1, #0]
 8013dfa:	2002      	movpl	r0, #2
 8013dfc:	4770      	bx	lr
 8013dfe:	b298      	uxth	r0, r3
 8013e00:	b9a8      	cbnz	r0, 8013e2e <__lo0bits+0x52>
 8013e02:	0c1b      	lsrs	r3, r3, #16
 8013e04:	2010      	movs	r0, #16
 8013e06:	b2da      	uxtb	r2, r3
 8013e08:	b90a      	cbnz	r2, 8013e0e <__lo0bits+0x32>
 8013e0a:	3008      	adds	r0, #8
 8013e0c:	0a1b      	lsrs	r3, r3, #8
 8013e0e:	071a      	lsls	r2, r3, #28
 8013e10:	bf04      	itt	eq
 8013e12:	091b      	lsreq	r3, r3, #4
 8013e14:	3004      	addeq	r0, #4
 8013e16:	079a      	lsls	r2, r3, #30
 8013e18:	bf04      	itt	eq
 8013e1a:	089b      	lsreq	r3, r3, #2
 8013e1c:	3002      	addeq	r0, #2
 8013e1e:	07da      	lsls	r2, r3, #31
 8013e20:	d403      	bmi.n	8013e2a <__lo0bits+0x4e>
 8013e22:	085b      	lsrs	r3, r3, #1
 8013e24:	f100 0001 	add.w	r0, r0, #1
 8013e28:	d005      	beq.n	8013e36 <__lo0bits+0x5a>
 8013e2a:	600b      	str	r3, [r1, #0]
 8013e2c:	4770      	bx	lr
 8013e2e:	4610      	mov	r0, r2
 8013e30:	e7e9      	b.n	8013e06 <__lo0bits+0x2a>
 8013e32:	2000      	movs	r0, #0
 8013e34:	4770      	bx	lr
 8013e36:	2020      	movs	r0, #32
 8013e38:	4770      	bx	lr
	...

08013e3c <__i2b>:
 8013e3c:	b510      	push	{r4, lr}
 8013e3e:	460c      	mov	r4, r1
 8013e40:	2101      	movs	r1, #1
 8013e42:	f7ff ff03 	bl	8013c4c <_Balloc>
 8013e46:	4602      	mov	r2, r0
 8013e48:	b928      	cbnz	r0, 8013e56 <__i2b+0x1a>
 8013e4a:	4b05      	ldr	r3, [pc, #20]	; (8013e60 <__i2b+0x24>)
 8013e4c:	4805      	ldr	r0, [pc, #20]	; (8013e64 <__i2b+0x28>)
 8013e4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013e52:	f7fe fef5 	bl	8012c40 <__assert_func>
 8013e56:	2301      	movs	r3, #1
 8013e58:	6144      	str	r4, [r0, #20]
 8013e5a:	6103      	str	r3, [r0, #16]
 8013e5c:	bd10      	pop	{r4, pc}
 8013e5e:	bf00      	nop
 8013e60:	080177d0 	.word	0x080177d0
 8013e64:	080177e1 	.word	0x080177e1

08013e68 <__multiply>:
 8013e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e6c:	4691      	mov	r9, r2
 8013e6e:	690a      	ldr	r2, [r1, #16]
 8013e70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013e74:	429a      	cmp	r2, r3
 8013e76:	bfb8      	it	lt
 8013e78:	460b      	movlt	r3, r1
 8013e7a:	460c      	mov	r4, r1
 8013e7c:	bfbc      	itt	lt
 8013e7e:	464c      	movlt	r4, r9
 8013e80:	4699      	movlt	r9, r3
 8013e82:	6927      	ldr	r7, [r4, #16]
 8013e84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013e88:	68a3      	ldr	r3, [r4, #8]
 8013e8a:	6861      	ldr	r1, [r4, #4]
 8013e8c:	eb07 060a 	add.w	r6, r7, sl
 8013e90:	42b3      	cmp	r3, r6
 8013e92:	b085      	sub	sp, #20
 8013e94:	bfb8      	it	lt
 8013e96:	3101      	addlt	r1, #1
 8013e98:	f7ff fed8 	bl	8013c4c <_Balloc>
 8013e9c:	b930      	cbnz	r0, 8013eac <__multiply+0x44>
 8013e9e:	4602      	mov	r2, r0
 8013ea0:	4b44      	ldr	r3, [pc, #272]	; (8013fb4 <__multiply+0x14c>)
 8013ea2:	4845      	ldr	r0, [pc, #276]	; (8013fb8 <__multiply+0x150>)
 8013ea4:	f240 115d 	movw	r1, #349	; 0x15d
 8013ea8:	f7fe feca 	bl	8012c40 <__assert_func>
 8013eac:	f100 0514 	add.w	r5, r0, #20
 8013eb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013eb4:	462b      	mov	r3, r5
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	4543      	cmp	r3, r8
 8013eba:	d321      	bcc.n	8013f00 <__multiply+0x98>
 8013ebc:	f104 0314 	add.w	r3, r4, #20
 8013ec0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013ec4:	f109 0314 	add.w	r3, r9, #20
 8013ec8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013ecc:	9202      	str	r2, [sp, #8]
 8013ece:	1b3a      	subs	r2, r7, r4
 8013ed0:	3a15      	subs	r2, #21
 8013ed2:	f022 0203 	bic.w	r2, r2, #3
 8013ed6:	3204      	adds	r2, #4
 8013ed8:	f104 0115 	add.w	r1, r4, #21
 8013edc:	428f      	cmp	r7, r1
 8013ede:	bf38      	it	cc
 8013ee0:	2204      	movcc	r2, #4
 8013ee2:	9201      	str	r2, [sp, #4]
 8013ee4:	9a02      	ldr	r2, [sp, #8]
 8013ee6:	9303      	str	r3, [sp, #12]
 8013ee8:	429a      	cmp	r2, r3
 8013eea:	d80c      	bhi.n	8013f06 <__multiply+0x9e>
 8013eec:	2e00      	cmp	r6, #0
 8013eee:	dd03      	ble.n	8013ef8 <__multiply+0x90>
 8013ef0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d05a      	beq.n	8013fae <__multiply+0x146>
 8013ef8:	6106      	str	r6, [r0, #16]
 8013efa:	b005      	add	sp, #20
 8013efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f00:	f843 2b04 	str.w	r2, [r3], #4
 8013f04:	e7d8      	b.n	8013eb8 <__multiply+0x50>
 8013f06:	f8b3 a000 	ldrh.w	sl, [r3]
 8013f0a:	f1ba 0f00 	cmp.w	sl, #0
 8013f0e:	d024      	beq.n	8013f5a <__multiply+0xf2>
 8013f10:	f104 0e14 	add.w	lr, r4, #20
 8013f14:	46a9      	mov	r9, r5
 8013f16:	f04f 0c00 	mov.w	ip, #0
 8013f1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013f1e:	f8d9 1000 	ldr.w	r1, [r9]
 8013f22:	fa1f fb82 	uxth.w	fp, r2
 8013f26:	b289      	uxth	r1, r1
 8013f28:	fb0a 110b 	mla	r1, sl, fp, r1
 8013f2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013f30:	f8d9 2000 	ldr.w	r2, [r9]
 8013f34:	4461      	add	r1, ip
 8013f36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013f3a:	fb0a c20b 	mla	r2, sl, fp, ip
 8013f3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013f42:	b289      	uxth	r1, r1
 8013f44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013f48:	4577      	cmp	r7, lr
 8013f4a:	f849 1b04 	str.w	r1, [r9], #4
 8013f4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013f52:	d8e2      	bhi.n	8013f1a <__multiply+0xb2>
 8013f54:	9a01      	ldr	r2, [sp, #4]
 8013f56:	f845 c002 	str.w	ip, [r5, r2]
 8013f5a:	9a03      	ldr	r2, [sp, #12]
 8013f5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013f60:	3304      	adds	r3, #4
 8013f62:	f1b9 0f00 	cmp.w	r9, #0
 8013f66:	d020      	beq.n	8013faa <__multiply+0x142>
 8013f68:	6829      	ldr	r1, [r5, #0]
 8013f6a:	f104 0c14 	add.w	ip, r4, #20
 8013f6e:	46ae      	mov	lr, r5
 8013f70:	f04f 0a00 	mov.w	sl, #0
 8013f74:	f8bc b000 	ldrh.w	fp, [ip]
 8013f78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013f7c:	fb09 220b 	mla	r2, r9, fp, r2
 8013f80:	4492      	add	sl, r2
 8013f82:	b289      	uxth	r1, r1
 8013f84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013f88:	f84e 1b04 	str.w	r1, [lr], #4
 8013f8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013f90:	f8be 1000 	ldrh.w	r1, [lr]
 8013f94:	0c12      	lsrs	r2, r2, #16
 8013f96:	fb09 1102 	mla	r1, r9, r2, r1
 8013f9a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013f9e:	4567      	cmp	r7, ip
 8013fa0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013fa4:	d8e6      	bhi.n	8013f74 <__multiply+0x10c>
 8013fa6:	9a01      	ldr	r2, [sp, #4]
 8013fa8:	50a9      	str	r1, [r5, r2]
 8013faa:	3504      	adds	r5, #4
 8013fac:	e79a      	b.n	8013ee4 <__multiply+0x7c>
 8013fae:	3e01      	subs	r6, #1
 8013fb0:	e79c      	b.n	8013eec <__multiply+0x84>
 8013fb2:	bf00      	nop
 8013fb4:	080177d0 	.word	0x080177d0
 8013fb8:	080177e1 	.word	0x080177e1

08013fbc <__pow5mult>:
 8013fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fc0:	4615      	mov	r5, r2
 8013fc2:	f012 0203 	ands.w	r2, r2, #3
 8013fc6:	4606      	mov	r6, r0
 8013fc8:	460f      	mov	r7, r1
 8013fca:	d007      	beq.n	8013fdc <__pow5mult+0x20>
 8013fcc:	4c25      	ldr	r4, [pc, #148]	; (8014064 <__pow5mult+0xa8>)
 8013fce:	3a01      	subs	r2, #1
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013fd6:	f7ff fe9b 	bl	8013d10 <__multadd>
 8013fda:	4607      	mov	r7, r0
 8013fdc:	10ad      	asrs	r5, r5, #2
 8013fde:	d03d      	beq.n	801405c <__pow5mult+0xa0>
 8013fe0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013fe2:	b97c      	cbnz	r4, 8014004 <__pow5mult+0x48>
 8013fe4:	2010      	movs	r0, #16
 8013fe6:	f7fd fded 	bl	8011bc4 <malloc>
 8013fea:	4602      	mov	r2, r0
 8013fec:	6270      	str	r0, [r6, #36]	; 0x24
 8013fee:	b928      	cbnz	r0, 8013ffc <__pow5mult+0x40>
 8013ff0:	4b1d      	ldr	r3, [pc, #116]	; (8014068 <__pow5mult+0xac>)
 8013ff2:	481e      	ldr	r0, [pc, #120]	; (801406c <__pow5mult+0xb0>)
 8013ff4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013ff8:	f7fe fe22 	bl	8012c40 <__assert_func>
 8013ffc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014000:	6004      	str	r4, [r0, #0]
 8014002:	60c4      	str	r4, [r0, #12]
 8014004:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014008:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801400c:	b94c      	cbnz	r4, 8014022 <__pow5mult+0x66>
 801400e:	f240 2171 	movw	r1, #625	; 0x271
 8014012:	4630      	mov	r0, r6
 8014014:	f7ff ff12 	bl	8013e3c <__i2b>
 8014018:	2300      	movs	r3, #0
 801401a:	f8c8 0008 	str.w	r0, [r8, #8]
 801401e:	4604      	mov	r4, r0
 8014020:	6003      	str	r3, [r0, #0]
 8014022:	f04f 0900 	mov.w	r9, #0
 8014026:	07eb      	lsls	r3, r5, #31
 8014028:	d50a      	bpl.n	8014040 <__pow5mult+0x84>
 801402a:	4639      	mov	r1, r7
 801402c:	4622      	mov	r2, r4
 801402e:	4630      	mov	r0, r6
 8014030:	f7ff ff1a 	bl	8013e68 <__multiply>
 8014034:	4639      	mov	r1, r7
 8014036:	4680      	mov	r8, r0
 8014038:	4630      	mov	r0, r6
 801403a:	f7ff fe47 	bl	8013ccc <_Bfree>
 801403e:	4647      	mov	r7, r8
 8014040:	106d      	asrs	r5, r5, #1
 8014042:	d00b      	beq.n	801405c <__pow5mult+0xa0>
 8014044:	6820      	ldr	r0, [r4, #0]
 8014046:	b938      	cbnz	r0, 8014058 <__pow5mult+0x9c>
 8014048:	4622      	mov	r2, r4
 801404a:	4621      	mov	r1, r4
 801404c:	4630      	mov	r0, r6
 801404e:	f7ff ff0b 	bl	8013e68 <__multiply>
 8014052:	6020      	str	r0, [r4, #0]
 8014054:	f8c0 9000 	str.w	r9, [r0]
 8014058:	4604      	mov	r4, r0
 801405a:	e7e4      	b.n	8014026 <__pow5mult+0x6a>
 801405c:	4638      	mov	r0, r7
 801405e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014062:	bf00      	nop
 8014064:	08017930 	.word	0x08017930
 8014068:	080176b8 	.word	0x080176b8
 801406c:	080177e1 	.word	0x080177e1

08014070 <__lshift>:
 8014070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014074:	460c      	mov	r4, r1
 8014076:	6849      	ldr	r1, [r1, #4]
 8014078:	6923      	ldr	r3, [r4, #16]
 801407a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801407e:	68a3      	ldr	r3, [r4, #8]
 8014080:	4607      	mov	r7, r0
 8014082:	4691      	mov	r9, r2
 8014084:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014088:	f108 0601 	add.w	r6, r8, #1
 801408c:	42b3      	cmp	r3, r6
 801408e:	db0b      	blt.n	80140a8 <__lshift+0x38>
 8014090:	4638      	mov	r0, r7
 8014092:	f7ff fddb 	bl	8013c4c <_Balloc>
 8014096:	4605      	mov	r5, r0
 8014098:	b948      	cbnz	r0, 80140ae <__lshift+0x3e>
 801409a:	4602      	mov	r2, r0
 801409c:	4b2a      	ldr	r3, [pc, #168]	; (8014148 <__lshift+0xd8>)
 801409e:	482b      	ldr	r0, [pc, #172]	; (801414c <__lshift+0xdc>)
 80140a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80140a4:	f7fe fdcc 	bl	8012c40 <__assert_func>
 80140a8:	3101      	adds	r1, #1
 80140aa:	005b      	lsls	r3, r3, #1
 80140ac:	e7ee      	b.n	801408c <__lshift+0x1c>
 80140ae:	2300      	movs	r3, #0
 80140b0:	f100 0114 	add.w	r1, r0, #20
 80140b4:	f100 0210 	add.w	r2, r0, #16
 80140b8:	4618      	mov	r0, r3
 80140ba:	4553      	cmp	r3, sl
 80140bc:	db37      	blt.n	801412e <__lshift+0xbe>
 80140be:	6920      	ldr	r0, [r4, #16]
 80140c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80140c4:	f104 0314 	add.w	r3, r4, #20
 80140c8:	f019 091f 	ands.w	r9, r9, #31
 80140cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80140d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80140d4:	d02f      	beq.n	8014136 <__lshift+0xc6>
 80140d6:	f1c9 0e20 	rsb	lr, r9, #32
 80140da:	468a      	mov	sl, r1
 80140dc:	f04f 0c00 	mov.w	ip, #0
 80140e0:	681a      	ldr	r2, [r3, #0]
 80140e2:	fa02 f209 	lsl.w	r2, r2, r9
 80140e6:	ea42 020c 	orr.w	r2, r2, ip
 80140ea:	f84a 2b04 	str.w	r2, [sl], #4
 80140ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80140f2:	4298      	cmp	r0, r3
 80140f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80140f8:	d8f2      	bhi.n	80140e0 <__lshift+0x70>
 80140fa:	1b03      	subs	r3, r0, r4
 80140fc:	3b15      	subs	r3, #21
 80140fe:	f023 0303 	bic.w	r3, r3, #3
 8014102:	3304      	adds	r3, #4
 8014104:	f104 0215 	add.w	r2, r4, #21
 8014108:	4290      	cmp	r0, r2
 801410a:	bf38      	it	cc
 801410c:	2304      	movcc	r3, #4
 801410e:	f841 c003 	str.w	ip, [r1, r3]
 8014112:	f1bc 0f00 	cmp.w	ip, #0
 8014116:	d001      	beq.n	801411c <__lshift+0xac>
 8014118:	f108 0602 	add.w	r6, r8, #2
 801411c:	3e01      	subs	r6, #1
 801411e:	4638      	mov	r0, r7
 8014120:	612e      	str	r6, [r5, #16]
 8014122:	4621      	mov	r1, r4
 8014124:	f7ff fdd2 	bl	8013ccc <_Bfree>
 8014128:	4628      	mov	r0, r5
 801412a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801412e:	f842 0f04 	str.w	r0, [r2, #4]!
 8014132:	3301      	adds	r3, #1
 8014134:	e7c1      	b.n	80140ba <__lshift+0x4a>
 8014136:	3904      	subs	r1, #4
 8014138:	f853 2b04 	ldr.w	r2, [r3], #4
 801413c:	f841 2f04 	str.w	r2, [r1, #4]!
 8014140:	4298      	cmp	r0, r3
 8014142:	d8f9      	bhi.n	8014138 <__lshift+0xc8>
 8014144:	e7ea      	b.n	801411c <__lshift+0xac>
 8014146:	bf00      	nop
 8014148:	080177d0 	.word	0x080177d0
 801414c:	080177e1 	.word	0x080177e1

08014150 <__mcmp>:
 8014150:	b530      	push	{r4, r5, lr}
 8014152:	6902      	ldr	r2, [r0, #16]
 8014154:	690c      	ldr	r4, [r1, #16]
 8014156:	1b12      	subs	r2, r2, r4
 8014158:	d10e      	bne.n	8014178 <__mcmp+0x28>
 801415a:	f100 0314 	add.w	r3, r0, #20
 801415e:	3114      	adds	r1, #20
 8014160:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014164:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014168:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801416c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014170:	42a5      	cmp	r5, r4
 8014172:	d003      	beq.n	801417c <__mcmp+0x2c>
 8014174:	d305      	bcc.n	8014182 <__mcmp+0x32>
 8014176:	2201      	movs	r2, #1
 8014178:	4610      	mov	r0, r2
 801417a:	bd30      	pop	{r4, r5, pc}
 801417c:	4283      	cmp	r3, r0
 801417e:	d3f3      	bcc.n	8014168 <__mcmp+0x18>
 8014180:	e7fa      	b.n	8014178 <__mcmp+0x28>
 8014182:	f04f 32ff 	mov.w	r2, #4294967295
 8014186:	e7f7      	b.n	8014178 <__mcmp+0x28>

08014188 <__mdiff>:
 8014188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801418c:	460c      	mov	r4, r1
 801418e:	4606      	mov	r6, r0
 8014190:	4611      	mov	r1, r2
 8014192:	4620      	mov	r0, r4
 8014194:	4690      	mov	r8, r2
 8014196:	f7ff ffdb 	bl	8014150 <__mcmp>
 801419a:	1e05      	subs	r5, r0, #0
 801419c:	d110      	bne.n	80141c0 <__mdiff+0x38>
 801419e:	4629      	mov	r1, r5
 80141a0:	4630      	mov	r0, r6
 80141a2:	f7ff fd53 	bl	8013c4c <_Balloc>
 80141a6:	b930      	cbnz	r0, 80141b6 <__mdiff+0x2e>
 80141a8:	4b3a      	ldr	r3, [pc, #232]	; (8014294 <__mdiff+0x10c>)
 80141aa:	4602      	mov	r2, r0
 80141ac:	f240 2132 	movw	r1, #562	; 0x232
 80141b0:	4839      	ldr	r0, [pc, #228]	; (8014298 <__mdiff+0x110>)
 80141b2:	f7fe fd45 	bl	8012c40 <__assert_func>
 80141b6:	2301      	movs	r3, #1
 80141b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80141bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141c0:	bfa4      	itt	ge
 80141c2:	4643      	movge	r3, r8
 80141c4:	46a0      	movge	r8, r4
 80141c6:	4630      	mov	r0, r6
 80141c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80141cc:	bfa6      	itte	ge
 80141ce:	461c      	movge	r4, r3
 80141d0:	2500      	movge	r5, #0
 80141d2:	2501      	movlt	r5, #1
 80141d4:	f7ff fd3a 	bl	8013c4c <_Balloc>
 80141d8:	b920      	cbnz	r0, 80141e4 <__mdiff+0x5c>
 80141da:	4b2e      	ldr	r3, [pc, #184]	; (8014294 <__mdiff+0x10c>)
 80141dc:	4602      	mov	r2, r0
 80141de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80141e2:	e7e5      	b.n	80141b0 <__mdiff+0x28>
 80141e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80141e8:	6926      	ldr	r6, [r4, #16]
 80141ea:	60c5      	str	r5, [r0, #12]
 80141ec:	f104 0914 	add.w	r9, r4, #20
 80141f0:	f108 0514 	add.w	r5, r8, #20
 80141f4:	f100 0e14 	add.w	lr, r0, #20
 80141f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80141fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014200:	f108 0210 	add.w	r2, r8, #16
 8014204:	46f2      	mov	sl, lr
 8014206:	2100      	movs	r1, #0
 8014208:	f859 3b04 	ldr.w	r3, [r9], #4
 801420c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014210:	fa1f f883 	uxth.w	r8, r3
 8014214:	fa11 f18b 	uxtah	r1, r1, fp
 8014218:	0c1b      	lsrs	r3, r3, #16
 801421a:	eba1 0808 	sub.w	r8, r1, r8
 801421e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014222:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014226:	fa1f f888 	uxth.w	r8, r8
 801422a:	1419      	asrs	r1, r3, #16
 801422c:	454e      	cmp	r6, r9
 801422e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014232:	f84a 3b04 	str.w	r3, [sl], #4
 8014236:	d8e7      	bhi.n	8014208 <__mdiff+0x80>
 8014238:	1b33      	subs	r3, r6, r4
 801423a:	3b15      	subs	r3, #21
 801423c:	f023 0303 	bic.w	r3, r3, #3
 8014240:	3304      	adds	r3, #4
 8014242:	3415      	adds	r4, #21
 8014244:	42a6      	cmp	r6, r4
 8014246:	bf38      	it	cc
 8014248:	2304      	movcc	r3, #4
 801424a:	441d      	add	r5, r3
 801424c:	4473      	add	r3, lr
 801424e:	469e      	mov	lr, r3
 8014250:	462e      	mov	r6, r5
 8014252:	4566      	cmp	r6, ip
 8014254:	d30e      	bcc.n	8014274 <__mdiff+0xec>
 8014256:	f10c 0203 	add.w	r2, ip, #3
 801425a:	1b52      	subs	r2, r2, r5
 801425c:	f022 0203 	bic.w	r2, r2, #3
 8014260:	3d03      	subs	r5, #3
 8014262:	45ac      	cmp	ip, r5
 8014264:	bf38      	it	cc
 8014266:	2200      	movcc	r2, #0
 8014268:	441a      	add	r2, r3
 801426a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801426e:	b17b      	cbz	r3, 8014290 <__mdiff+0x108>
 8014270:	6107      	str	r7, [r0, #16]
 8014272:	e7a3      	b.n	80141bc <__mdiff+0x34>
 8014274:	f856 8b04 	ldr.w	r8, [r6], #4
 8014278:	fa11 f288 	uxtah	r2, r1, r8
 801427c:	1414      	asrs	r4, r2, #16
 801427e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014282:	b292      	uxth	r2, r2
 8014284:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014288:	f84e 2b04 	str.w	r2, [lr], #4
 801428c:	1421      	asrs	r1, r4, #16
 801428e:	e7e0      	b.n	8014252 <__mdiff+0xca>
 8014290:	3f01      	subs	r7, #1
 8014292:	e7ea      	b.n	801426a <__mdiff+0xe2>
 8014294:	080177d0 	.word	0x080177d0
 8014298:	080177e1 	.word	0x080177e1

0801429c <__d2b>:
 801429c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80142a0:	4689      	mov	r9, r1
 80142a2:	2101      	movs	r1, #1
 80142a4:	ec57 6b10 	vmov	r6, r7, d0
 80142a8:	4690      	mov	r8, r2
 80142aa:	f7ff fccf 	bl	8013c4c <_Balloc>
 80142ae:	4604      	mov	r4, r0
 80142b0:	b930      	cbnz	r0, 80142c0 <__d2b+0x24>
 80142b2:	4602      	mov	r2, r0
 80142b4:	4b25      	ldr	r3, [pc, #148]	; (801434c <__d2b+0xb0>)
 80142b6:	4826      	ldr	r0, [pc, #152]	; (8014350 <__d2b+0xb4>)
 80142b8:	f240 310a 	movw	r1, #778	; 0x30a
 80142bc:	f7fe fcc0 	bl	8012c40 <__assert_func>
 80142c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80142c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80142c8:	bb35      	cbnz	r5, 8014318 <__d2b+0x7c>
 80142ca:	2e00      	cmp	r6, #0
 80142cc:	9301      	str	r3, [sp, #4]
 80142ce:	d028      	beq.n	8014322 <__d2b+0x86>
 80142d0:	4668      	mov	r0, sp
 80142d2:	9600      	str	r6, [sp, #0]
 80142d4:	f7ff fd82 	bl	8013ddc <__lo0bits>
 80142d8:	9900      	ldr	r1, [sp, #0]
 80142da:	b300      	cbz	r0, 801431e <__d2b+0x82>
 80142dc:	9a01      	ldr	r2, [sp, #4]
 80142de:	f1c0 0320 	rsb	r3, r0, #32
 80142e2:	fa02 f303 	lsl.w	r3, r2, r3
 80142e6:	430b      	orrs	r3, r1
 80142e8:	40c2      	lsrs	r2, r0
 80142ea:	6163      	str	r3, [r4, #20]
 80142ec:	9201      	str	r2, [sp, #4]
 80142ee:	9b01      	ldr	r3, [sp, #4]
 80142f0:	61a3      	str	r3, [r4, #24]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	bf14      	ite	ne
 80142f6:	2202      	movne	r2, #2
 80142f8:	2201      	moveq	r2, #1
 80142fa:	6122      	str	r2, [r4, #16]
 80142fc:	b1d5      	cbz	r5, 8014334 <__d2b+0x98>
 80142fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014302:	4405      	add	r5, r0
 8014304:	f8c9 5000 	str.w	r5, [r9]
 8014308:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801430c:	f8c8 0000 	str.w	r0, [r8]
 8014310:	4620      	mov	r0, r4
 8014312:	b003      	add	sp, #12
 8014314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801431c:	e7d5      	b.n	80142ca <__d2b+0x2e>
 801431e:	6161      	str	r1, [r4, #20]
 8014320:	e7e5      	b.n	80142ee <__d2b+0x52>
 8014322:	a801      	add	r0, sp, #4
 8014324:	f7ff fd5a 	bl	8013ddc <__lo0bits>
 8014328:	9b01      	ldr	r3, [sp, #4]
 801432a:	6163      	str	r3, [r4, #20]
 801432c:	2201      	movs	r2, #1
 801432e:	6122      	str	r2, [r4, #16]
 8014330:	3020      	adds	r0, #32
 8014332:	e7e3      	b.n	80142fc <__d2b+0x60>
 8014334:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014338:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801433c:	f8c9 0000 	str.w	r0, [r9]
 8014340:	6918      	ldr	r0, [r3, #16]
 8014342:	f7ff fd2b 	bl	8013d9c <__hi0bits>
 8014346:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801434a:	e7df      	b.n	801430c <__d2b+0x70>
 801434c:	080177d0 	.word	0x080177d0
 8014350:	080177e1 	.word	0x080177e1

08014354 <_calloc_r>:
 8014354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014356:	fba1 2402 	umull	r2, r4, r1, r2
 801435a:	b94c      	cbnz	r4, 8014370 <_calloc_r+0x1c>
 801435c:	4611      	mov	r1, r2
 801435e:	9201      	str	r2, [sp, #4]
 8014360:	f7fd fcba 	bl	8011cd8 <_malloc_r>
 8014364:	9a01      	ldr	r2, [sp, #4]
 8014366:	4605      	mov	r5, r0
 8014368:	b930      	cbnz	r0, 8014378 <_calloc_r+0x24>
 801436a:	4628      	mov	r0, r5
 801436c:	b003      	add	sp, #12
 801436e:	bd30      	pop	{r4, r5, pc}
 8014370:	220c      	movs	r2, #12
 8014372:	6002      	str	r2, [r0, #0]
 8014374:	2500      	movs	r5, #0
 8014376:	e7f8      	b.n	801436a <_calloc_r+0x16>
 8014378:	4621      	mov	r1, r4
 801437a:	f7fd fc39 	bl	8011bf0 <memset>
 801437e:	e7f4      	b.n	801436a <_calloc_r+0x16>

08014380 <_realloc_r>:
 8014380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014384:	4680      	mov	r8, r0
 8014386:	4614      	mov	r4, r2
 8014388:	460e      	mov	r6, r1
 801438a:	b921      	cbnz	r1, 8014396 <_realloc_r+0x16>
 801438c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014390:	4611      	mov	r1, r2
 8014392:	f7fd bca1 	b.w	8011cd8 <_malloc_r>
 8014396:	b92a      	cbnz	r2, 80143a4 <_realloc_r+0x24>
 8014398:	f7fd fc32 	bl	8011c00 <_free_r>
 801439c:	4625      	mov	r5, r4
 801439e:	4628      	mov	r0, r5
 80143a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143a4:	f000 fb38 	bl	8014a18 <_malloc_usable_size_r>
 80143a8:	4284      	cmp	r4, r0
 80143aa:	4607      	mov	r7, r0
 80143ac:	d802      	bhi.n	80143b4 <_realloc_r+0x34>
 80143ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80143b2:	d812      	bhi.n	80143da <_realloc_r+0x5a>
 80143b4:	4621      	mov	r1, r4
 80143b6:	4640      	mov	r0, r8
 80143b8:	f7fd fc8e 	bl	8011cd8 <_malloc_r>
 80143bc:	4605      	mov	r5, r0
 80143be:	2800      	cmp	r0, #0
 80143c0:	d0ed      	beq.n	801439e <_realloc_r+0x1e>
 80143c2:	42bc      	cmp	r4, r7
 80143c4:	4622      	mov	r2, r4
 80143c6:	4631      	mov	r1, r6
 80143c8:	bf28      	it	cs
 80143ca:	463a      	movcs	r2, r7
 80143cc:	f7fd fc02 	bl	8011bd4 <memcpy>
 80143d0:	4631      	mov	r1, r6
 80143d2:	4640      	mov	r0, r8
 80143d4:	f7fd fc14 	bl	8011c00 <_free_r>
 80143d8:	e7e1      	b.n	801439e <_realloc_r+0x1e>
 80143da:	4635      	mov	r5, r6
 80143dc:	e7df      	b.n	801439e <_realloc_r+0x1e>

080143de <__ssputs_r>:
 80143de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143e2:	688e      	ldr	r6, [r1, #8]
 80143e4:	429e      	cmp	r6, r3
 80143e6:	4682      	mov	sl, r0
 80143e8:	460c      	mov	r4, r1
 80143ea:	4690      	mov	r8, r2
 80143ec:	461f      	mov	r7, r3
 80143ee:	d838      	bhi.n	8014462 <__ssputs_r+0x84>
 80143f0:	898a      	ldrh	r2, [r1, #12]
 80143f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80143f6:	d032      	beq.n	801445e <__ssputs_r+0x80>
 80143f8:	6825      	ldr	r5, [r4, #0]
 80143fa:	6909      	ldr	r1, [r1, #16]
 80143fc:	eba5 0901 	sub.w	r9, r5, r1
 8014400:	6965      	ldr	r5, [r4, #20]
 8014402:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014406:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801440a:	3301      	adds	r3, #1
 801440c:	444b      	add	r3, r9
 801440e:	106d      	asrs	r5, r5, #1
 8014410:	429d      	cmp	r5, r3
 8014412:	bf38      	it	cc
 8014414:	461d      	movcc	r5, r3
 8014416:	0553      	lsls	r3, r2, #21
 8014418:	d531      	bpl.n	801447e <__ssputs_r+0xa0>
 801441a:	4629      	mov	r1, r5
 801441c:	f7fd fc5c 	bl	8011cd8 <_malloc_r>
 8014420:	4606      	mov	r6, r0
 8014422:	b950      	cbnz	r0, 801443a <__ssputs_r+0x5c>
 8014424:	230c      	movs	r3, #12
 8014426:	f8ca 3000 	str.w	r3, [sl]
 801442a:	89a3      	ldrh	r3, [r4, #12]
 801442c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014430:	81a3      	strh	r3, [r4, #12]
 8014432:	f04f 30ff 	mov.w	r0, #4294967295
 8014436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801443a:	6921      	ldr	r1, [r4, #16]
 801443c:	464a      	mov	r2, r9
 801443e:	f7fd fbc9 	bl	8011bd4 <memcpy>
 8014442:	89a3      	ldrh	r3, [r4, #12]
 8014444:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801444c:	81a3      	strh	r3, [r4, #12]
 801444e:	6126      	str	r6, [r4, #16]
 8014450:	6165      	str	r5, [r4, #20]
 8014452:	444e      	add	r6, r9
 8014454:	eba5 0509 	sub.w	r5, r5, r9
 8014458:	6026      	str	r6, [r4, #0]
 801445a:	60a5      	str	r5, [r4, #8]
 801445c:	463e      	mov	r6, r7
 801445e:	42be      	cmp	r6, r7
 8014460:	d900      	bls.n	8014464 <__ssputs_r+0x86>
 8014462:	463e      	mov	r6, r7
 8014464:	6820      	ldr	r0, [r4, #0]
 8014466:	4632      	mov	r2, r6
 8014468:	4641      	mov	r1, r8
 801446a:	f000 fabb 	bl	80149e4 <memmove>
 801446e:	68a3      	ldr	r3, [r4, #8]
 8014470:	1b9b      	subs	r3, r3, r6
 8014472:	60a3      	str	r3, [r4, #8]
 8014474:	6823      	ldr	r3, [r4, #0]
 8014476:	4433      	add	r3, r6
 8014478:	6023      	str	r3, [r4, #0]
 801447a:	2000      	movs	r0, #0
 801447c:	e7db      	b.n	8014436 <__ssputs_r+0x58>
 801447e:	462a      	mov	r2, r5
 8014480:	f7ff ff7e 	bl	8014380 <_realloc_r>
 8014484:	4606      	mov	r6, r0
 8014486:	2800      	cmp	r0, #0
 8014488:	d1e1      	bne.n	801444e <__ssputs_r+0x70>
 801448a:	6921      	ldr	r1, [r4, #16]
 801448c:	4650      	mov	r0, sl
 801448e:	f7fd fbb7 	bl	8011c00 <_free_r>
 8014492:	e7c7      	b.n	8014424 <__ssputs_r+0x46>

08014494 <_svfiprintf_r>:
 8014494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014498:	4698      	mov	r8, r3
 801449a:	898b      	ldrh	r3, [r1, #12]
 801449c:	061b      	lsls	r3, r3, #24
 801449e:	b09d      	sub	sp, #116	; 0x74
 80144a0:	4607      	mov	r7, r0
 80144a2:	460d      	mov	r5, r1
 80144a4:	4614      	mov	r4, r2
 80144a6:	d50e      	bpl.n	80144c6 <_svfiprintf_r+0x32>
 80144a8:	690b      	ldr	r3, [r1, #16]
 80144aa:	b963      	cbnz	r3, 80144c6 <_svfiprintf_r+0x32>
 80144ac:	2140      	movs	r1, #64	; 0x40
 80144ae:	f7fd fc13 	bl	8011cd8 <_malloc_r>
 80144b2:	6028      	str	r0, [r5, #0]
 80144b4:	6128      	str	r0, [r5, #16]
 80144b6:	b920      	cbnz	r0, 80144c2 <_svfiprintf_r+0x2e>
 80144b8:	230c      	movs	r3, #12
 80144ba:	603b      	str	r3, [r7, #0]
 80144bc:	f04f 30ff 	mov.w	r0, #4294967295
 80144c0:	e0d1      	b.n	8014666 <_svfiprintf_r+0x1d2>
 80144c2:	2340      	movs	r3, #64	; 0x40
 80144c4:	616b      	str	r3, [r5, #20]
 80144c6:	2300      	movs	r3, #0
 80144c8:	9309      	str	r3, [sp, #36]	; 0x24
 80144ca:	2320      	movs	r3, #32
 80144cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80144d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80144d4:	2330      	movs	r3, #48	; 0x30
 80144d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014680 <_svfiprintf_r+0x1ec>
 80144da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80144de:	f04f 0901 	mov.w	r9, #1
 80144e2:	4623      	mov	r3, r4
 80144e4:	469a      	mov	sl, r3
 80144e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80144ea:	b10a      	cbz	r2, 80144f0 <_svfiprintf_r+0x5c>
 80144ec:	2a25      	cmp	r2, #37	; 0x25
 80144ee:	d1f9      	bne.n	80144e4 <_svfiprintf_r+0x50>
 80144f0:	ebba 0b04 	subs.w	fp, sl, r4
 80144f4:	d00b      	beq.n	801450e <_svfiprintf_r+0x7a>
 80144f6:	465b      	mov	r3, fp
 80144f8:	4622      	mov	r2, r4
 80144fa:	4629      	mov	r1, r5
 80144fc:	4638      	mov	r0, r7
 80144fe:	f7ff ff6e 	bl	80143de <__ssputs_r>
 8014502:	3001      	adds	r0, #1
 8014504:	f000 80aa 	beq.w	801465c <_svfiprintf_r+0x1c8>
 8014508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801450a:	445a      	add	r2, fp
 801450c:	9209      	str	r2, [sp, #36]	; 0x24
 801450e:	f89a 3000 	ldrb.w	r3, [sl]
 8014512:	2b00      	cmp	r3, #0
 8014514:	f000 80a2 	beq.w	801465c <_svfiprintf_r+0x1c8>
 8014518:	2300      	movs	r3, #0
 801451a:	f04f 32ff 	mov.w	r2, #4294967295
 801451e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014522:	f10a 0a01 	add.w	sl, sl, #1
 8014526:	9304      	str	r3, [sp, #16]
 8014528:	9307      	str	r3, [sp, #28]
 801452a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801452e:	931a      	str	r3, [sp, #104]	; 0x68
 8014530:	4654      	mov	r4, sl
 8014532:	2205      	movs	r2, #5
 8014534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014538:	4851      	ldr	r0, [pc, #324]	; (8014680 <_svfiprintf_r+0x1ec>)
 801453a:	f7eb fe51 	bl	80001e0 <memchr>
 801453e:	9a04      	ldr	r2, [sp, #16]
 8014540:	b9d8      	cbnz	r0, 801457a <_svfiprintf_r+0xe6>
 8014542:	06d0      	lsls	r0, r2, #27
 8014544:	bf44      	itt	mi
 8014546:	2320      	movmi	r3, #32
 8014548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801454c:	0711      	lsls	r1, r2, #28
 801454e:	bf44      	itt	mi
 8014550:	232b      	movmi	r3, #43	; 0x2b
 8014552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014556:	f89a 3000 	ldrb.w	r3, [sl]
 801455a:	2b2a      	cmp	r3, #42	; 0x2a
 801455c:	d015      	beq.n	801458a <_svfiprintf_r+0xf6>
 801455e:	9a07      	ldr	r2, [sp, #28]
 8014560:	4654      	mov	r4, sl
 8014562:	2000      	movs	r0, #0
 8014564:	f04f 0c0a 	mov.w	ip, #10
 8014568:	4621      	mov	r1, r4
 801456a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801456e:	3b30      	subs	r3, #48	; 0x30
 8014570:	2b09      	cmp	r3, #9
 8014572:	d94e      	bls.n	8014612 <_svfiprintf_r+0x17e>
 8014574:	b1b0      	cbz	r0, 80145a4 <_svfiprintf_r+0x110>
 8014576:	9207      	str	r2, [sp, #28]
 8014578:	e014      	b.n	80145a4 <_svfiprintf_r+0x110>
 801457a:	eba0 0308 	sub.w	r3, r0, r8
 801457e:	fa09 f303 	lsl.w	r3, r9, r3
 8014582:	4313      	orrs	r3, r2
 8014584:	9304      	str	r3, [sp, #16]
 8014586:	46a2      	mov	sl, r4
 8014588:	e7d2      	b.n	8014530 <_svfiprintf_r+0x9c>
 801458a:	9b03      	ldr	r3, [sp, #12]
 801458c:	1d19      	adds	r1, r3, #4
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	9103      	str	r1, [sp, #12]
 8014592:	2b00      	cmp	r3, #0
 8014594:	bfbb      	ittet	lt
 8014596:	425b      	neglt	r3, r3
 8014598:	f042 0202 	orrlt.w	r2, r2, #2
 801459c:	9307      	strge	r3, [sp, #28]
 801459e:	9307      	strlt	r3, [sp, #28]
 80145a0:	bfb8      	it	lt
 80145a2:	9204      	strlt	r2, [sp, #16]
 80145a4:	7823      	ldrb	r3, [r4, #0]
 80145a6:	2b2e      	cmp	r3, #46	; 0x2e
 80145a8:	d10c      	bne.n	80145c4 <_svfiprintf_r+0x130>
 80145aa:	7863      	ldrb	r3, [r4, #1]
 80145ac:	2b2a      	cmp	r3, #42	; 0x2a
 80145ae:	d135      	bne.n	801461c <_svfiprintf_r+0x188>
 80145b0:	9b03      	ldr	r3, [sp, #12]
 80145b2:	1d1a      	adds	r2, r3, #4
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	9203      	str	r2, [sp, #12]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	bfb8      	it	lt
 80145bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80145c0:	3402      	adds	r4, #2
 80145c2:	9305      	str	r3, [sp, #20]
 80145c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014690 <_svfiprintf_r+0x1fc>
 80145c8:	7821      	ldrb	r1, [r4, #0]
 80145ca:	2203      	movs	r2, #3
 80145cc:	4650      	mov	r0, sl
 80145ce:	f7eb fe07 	bl	80001e0 <memchr>
 80145d2:	b140      	cbz	r0, 80145e6 <_svfiprintf_r+0x152>
 80145d4:	2340      	movs	r3, #64	; 0x40
 80145d6:	eba0 000a 	sub.w	r0, r0, sl
 80145da:	fa03 f000 	lsl.w	r0, r3, r0
 80145de:	9b04      	ldr	r3, [sp, #16]
 80145e0:	4303      	orrs	r3, r0
 80145e2:	3401      	adds	r4, #1
 80145e4:	9304      	str	r3, [sp, #16]
 80145e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145ea:	4826      	ldr	r0, [pc, #152]	; (8014684 <_svfiprintf_r+0x1f0>)
 80145ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80145f0:	2206      	movs	r2, #6
 80145f2:	f7eb fdf5 	bl	80001e0 <memchr>
 80145f6:	2800      	cmp	r0, #0
 80145f8:	d038      	beq.n	801466c <_svfiprintf_r+0x1d8>
 80145fa:	4b23      	ldr	r3, [pc, #140]	; (8014688 <_svfiprintf_r+0x1f4>)
 80145fc:	bb1b      	cbnz	r3, 8014646 <_svfiprintf_r+0x1b2>
 80145fe:	9b03      	ldr	r3, [sp, #12]
 8014600:	3307      	adds	r3, #7
 8014602:	f023 0307 	bic.w	r3, r3, #7
 8014606:	3308      	adds	r3, #8
 8014608:	9303      	str	r3, [sp, #12]
 801460a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801460c:	4433      	add	r3, r6
 801460e:	9309      	str	r3, [sp, #36]	; 0x24
 8014610:	e767      	b.n	80144e2 <_svfiprintf_r+0x4e>
 8014612:	fb0c 3202 	mla	r2, ip, r2, r3
 8014616:	460c      	mov	r4, r1
 8014618:	2001      	movs	r0, #1
 801461a:	e7a5      	b.n	8014568 <_svfiprintf_r+0xd4>
 801461c:	2300      	movs	r3, #0
 801461e:	3401      	adds	r4, #1
 8014620:	9305      	str	r3, [sp, #20]
 8014622:	4619      	mov	r1, r3
 8014624:	f04f 0c0a 	mov.w	ip, #10
 8014628:	4620      	mov	r0, r4
 801462a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801462e:	3a30      	subs	r2, #48	; 0x30
 8014630:	2a09      	cmp	r2, #9
 8014632:	d903      	bls.n	801463c <_svfiprintf_r+0x1a8>
 8014634:	2b00      	cmp	r3, #0
 8014636:	d0c5      	beq.n	80145c4 <_svfiprintf_r+0x130>
 8014638:	9105      	str	r1, [sp, #20]
 801463a:	e7c3      	b.n	80145c4 <_svfiprintf_r+0x130>
 801463c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014640:	4604      	mov	r4, r0
 8014642:	2301      	movs	r3, #1
 8014644:	e7f0      	b.n	8014628 <_svfiprintf_r+0x194>
 8014646:	ab03      	add	r3, sp, #12
 8014648:	9300      	str	r3, [sp, #0]
 801464a:	462a      	mov	r2, r5
 801464c:	4b0f      	ldr	r3, [pc, #60]	; (801468c <_svfiprintf_r+0x1f8>)
 801464e:	a904      	add	r1, sp, #16
 8014650:	4638      	mov	r0, r7
 8014652:	f7fd fc55 	bl	8011f00 <_printf_float>
 8014656:	1c42      	adds	r2, r0, #1
 8014658:	4606      	mov	r6, r0
 801465a:	d1d6      	bne.n	801460a <_svfiprintf_r+0x176>
 801465c:	89ab      	ldrh	r3, [r5, #12]
 801465e:	065b      	lsls	r3, r3, #25
 8014660:	f53f af2c 	bmi.w	80144bc <_svfiprintf_r+0x28>
 8014664:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014666:	b01d      	add	sp, #116	; 0x74
 8014668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801466c:	ab03      	add	r3, sp, #12
 801466e:	9300      	str	r3, [sp, #0]
 8014670:	462a      	mov	r2, r5
 8014672:	4b06      	ldr	r3, [pc, #24]	; (801468c <_svfiprintf_r+0x1f8>)
 8014674:	a904      	add	r1, sp, #16
 8014676:	4638      	mov	r0, r7
 8014678:	f7fd fee6 	bl	8012448 <_printf_i>
 801467c:	e7eb      	b.n	8014656 <_svfiprintf_r+0x1c2>
 801467e:	bf00      	nop
 8014680:	0801793c 	.word	0x0801793c
 8014684:	08017946 	.word	0x08017946
 8014688:	08011f01 	.word	0x08011f01
 801468c:	080143df 	.word	0x080143df
 8014690:	08017942 	.word	0x08017942

08014694 <__sfputc_r>:
 8014694:	6893      	ldr	r3, [r2, #8]
 8014696:	3b01      	subs	r3, #1
 8014698:	2b00      	cmp	r3, #0
 801469a:	b410      	push	{r4}
 801469c:	6093      	str	r3, [r2, #8]
 801469e:	da08      	bge.n	80146b2 <__sfputc_r+0x1e>
 80146a0:	6994      	ldr	r4, [r2, #24]
 80146a2:	42a3      	cmp	r3, r4
 80146a4:	db01      	blt.n	80146aa <__sfputc_r+0x16>
 80146a6:	290a      	cmp	r1, #10
 80146a8:	d103      	bne.n	80146b2 <__sfputc_r+0x1e>
 80146aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146ae:	f7fe b9f5 	b.w	8012a9c <__swbuf_r>
 80146b2:	6813      	ldr	r3, [r2, #0]
 80146b4:	1c58      	adds	r0, r3, #1
 80146b6:	6010      	str	r0, [r2, #0]
 80146b8:	7019      	strb	r1, [r3, #0]
 80146ba:	4608      	mov	r0, r1
 80146bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146c0:	4770      	bx	lr

080146c2 <__sfputs_r>:
 80146c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146c4:	4606      	mov	r6, r0
 80146c6:	460f      	mov	r7, r1
 80146c8:	4614      	mov	r4, r2
 80146ca:	18d5      	adds	r5, r2, r3
 80146cc:	42ac      	cmp	r4, r5
 80146ce:	d101      	bne.n	80146d4 <__sfputs_r+0x12>
 80146d0:	2000      	movs	r0, #0
 80146d2:	e007      	b.n	80146e4 <__sfputs_r+0x22>
 80146d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146d8:	463a      	mov	r2, r7
 80146da:	4630      	mov	r0, r6
 80146dc:	f7ff ffda 	bl	8014694 <__sfputc_r>
 80146e0:	1c43      	adds	r3, r0, #1
 80146e2:	d1f3      	bne.n	80146cc <__sfputs_r+0xa>
 80146e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080146e8 <_vfiprintf_r>:
 80146e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146ec:	460d      	mov	r5, r1
 80146ee:	b09d      	sub	sp, #116	; 0x74
 80146f0:	4614      	mov	r4, r2
 80146f2:	4698      	mov	r8, r3
 80146f4:	4606      	mov	r6, r0
 80146f6:	b118      	cbz	r0, 8014700 <_vfiprintf_r+0x18>
 80146f8:	6983      	ldr	r3, [r0, #24]
 80146fa:	b90b      	cbnz	r3, 8014700 <_vfiprintf_r+0x18>
 80146fc:	f7fd f99c 	bl	8011a38 <__sinit>
 8014700:	4b89      	ldr	r3, [pc, #548]	; (8014928 <_vfiprintf_r+0x240>)
 8014702:	429d      	cmp	r5, r3
 8014704:	d11b      	bne.n	801473e <_vfiprintf_r+0x56>
 8014706:	6875      	ldr	r5, [r6, #4]
 8014708:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801470a:	07d9      	lsls	r1, r3, #31
 801470c:	d405      	bmi.n	801471a <_vfiprintf_r+0x32>
 801470e:	89ab      	ldrh	r3, [r5, #12]
 8014710:	059a      	lsls	r2, r3, #22
 8014712:	d402      	bmi.n	801471a <_vfiprintf_r+0x32>
 8014714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014716:	f7fd fa52 	bl	8011bbe <__retarget_lock_acquire_recursive>
 801471a:	89ab      	ldrh	r3, [r5, #12]
 801471c:	071b      	lsls	r3, r3, #28
 801471e:	d501      	bpl.n	8014724 <_vfiprintf_r+0x3c>
 8014720:	692b      	ldr	r3, [r5, #16]
 8014722:	b9eb      	cbnz	r3, 8014760 <_vfiprintf_r+0x78>
 8014724:	4629      	mov	r1, r5
 8014726:	4630      	mov	r0, r6
 8014728:	f7fe fa1c 	bl	8012b64 <__swsetup_r>
 801472c:	b1c0      	cbz	r0, 8014760 <_vfiprintf_r+0x78>
 801472e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014730:	07dc      	lsls	r4, r3, #31
 8014732:	d50e      	bpl.n	8014752 <_vfiprintf_r+0x6a>
 8014734:	f04f 30ff 	mov.w	r0, #4294967295
 8014738:	b01d      	add	sp, #116	; 0x74
 801473a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801473e:	4b7b      	ldr	r3, [pc, #492]	; (801492c <_vfiprintf_r+0x244>)
 8014740:	429d      	cmp	r5, r3
 8014742:	d101      	bne.n	8014748 <_vfiprintf_r+0x60>
 8014744:	68b5      	ldr	r5, [r6, #8]
 8014746:	e7df      	b.n	8014708 <_vfiprintf_r+0x20>
 8014748:	4b79      	ldr	r3, [pc, #484]	; (8014930 <_vfiprintf_r+0x248>)
 801474a:	429d      	cmp	r5, r3
 801474c:	bf08      	it	eq
 801474e:	68f5      	ldreq	r5, [r6, #12]
 8014750:	e7da      	b.n	8014708 <_vfiprintf_r+0x20>
 8014752:	89ab      	ldrh	r3, [r5, #12]
 8014754:	0598      	lsls	r0, r3, #22
 8014756:	d4ed      	bmi.n	8014734 <_vfiprintf_r+0x4c>
 8014758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801475a:	f7fd fa31 	bl	8011bc0 <__retarget_lock_release_recursive>
 801475e:	e7e9      	b.n	8014734 <_vfiprintf_r+0x4c>
 8014760:	2300      	movs	r3, #0
 8014762:	9309      	str	r3, [sp, #36]	; 0x24
 8014764:	2320      	movs	r3, #32
 8014766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801476a:	f8cd 800c 	str.w	r8, [sp, #12]
 801476e:	2330      	movs	r3, #48	; 0x30
 8014770:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014934 <_vfiprintf_r+0x24c>
 8014774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014778:	f04f 0901 	mov.w	r9, #1
 801477c:	4623      	mov	r3, r4
 801477e:	469a      	mov	sl, r3
 8014780:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014784:	b10a      	cbz	r2, 801478a <_vfiprintf_r+0xa2>
 8014786:	2a25      	cmp	r2, #37	; 0x25
 8014788:	d1f9      	bne.n	801477e <_vfiprintf_r+0x96>
 801478a:	ebba 0b04 	subs.w	fp, sl, r4
 801478e:	d00b      	beq.n	80147a8 <_vfiprintf_r+0xc0>
 8014790:	465b      	mov	r3, fp
 8014792:	4622      	mov	r2, r4
 8014794:	4629      	mov	r1, r5
 8014796:	4630      	mov	r0, r6
 8014798:	f7ff ff93 	bl	80146c2 <__sfputs_r>
 801479c:	3001      	adds	r0, #1
 801479e:	f000 80aa 	beq.w	80148f6 <_vfiprintf_r+0x20e>
 80147a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147a4:	445a      	add	r2, fp
 80147a6:	9209      	str	r2, [sp, #36]	; 0x24
 80147a8:	f89a 3000 	ldrb.w	r3, [sl]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	f000 80a2 	beq.w	80148f6 <_vfiprintf_r+0x20e>
 80147b2:	2300      	movs	r3, #0
 80147b4:	f04f 32ff 	mov.w	r2, #4294967295
 80147b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80147bc:	f10a 0a01 	add.w	sl, sl, #1
 80147c0:	9304      	str	r3, [sp, #16]
 80147c2:	9307      	str	r3, [sp, #28]
 80147c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80147c8:	931a      	str	r3, [sp, #104]	; 0x68
 80147ca:	4654      	mov	r4, sl
 80147cc:	2205      	movs	r2, #5
 80147ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147d2:	4858      	ldr	r0, [pc, #352]	; (8014934 <_vfiprintf_r+0x24c>)
 80147d4:	f7eb fd04 	bl	80001e0 <memchr>
 80147d8:	9a04      	ldr	r2, [sp, #16]
 80147da:	b9d8      	cbnz	r0, 8014814 <_vfiprintf_r+0x12c>
 80147dc:	06d1      	lsls	r1, r2, #27
 80147de:	bf44      	itt	mi
 80147e0:	2320      	movmi	r3, #32
 80147e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147e6:	0713      	lsls	r3, r2, #28
 80147e8:	bf44      	itt	mi
 80147ea:	232b      	movmi	r3, #43	; 0x2b
 80147ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147f0:	f89a 3000 	ldrb.w	r3, [sl]
 80147f4:	2b2a      	cmp	r3, #42	; 0x2a
 80147f6:	d015      	beq.n	8014824 <_vfiprintf_r+0x13c>
 80147f8:	9a07      	ldr	r2, [sp, #28]
 80147fa:	4654      	mov	r4, sl
 80147fc:	2000      	movs	r0, #0
 80147fe:	f04f 0c0a 	mov.w	ip, #10
 8014802:	4621      	mov	r1, r4
 8014804:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014808:	3b30      	subs	r3, #48	; 0x30
 801480a:	2b09      	cmp	r3, #9
 801480c:	d94e      	bls.n	80148ac <_vfiprintf_r+0x1c4>
 801480e:	b1b0      	cbz	r0, 801483e <_vfiprintf_r+0x156>
 8014810:	9207      	str	r2, [sp, #28]
 8014812:	e014      	b.n	801483e <_vfiprintf_r+0x156>
 8014814:	eba0 0308 	sub.w	r3, r0, r8
 8014818:	fa09 f303 	lsl.w	r3, r9, r3
 801481c:	4313      	orrs	r3, r2
 801481e:	9304      	str	r3, [sp, #16]
 8014820:	46a2      	mov	sl, r4
 8014822:	e7d2      	b.n	80147ca <_vfiprintf_r+0xe2>
 8014824:	9b03      	ldr	r3, [sp, #12]
 8014826:	1d19      	adds	r1, r3, #4
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	9103      	str	r1, [sp, #12]
 801482c:	2b00      	cmp	r3, #0
 801482e:	bfbb      	ittet	lt
 8014830:	425b      	neglt	r3, r3
 8014832:	f042 0202 	orrlt.w	r2, r2, #2
 8014836:	9307      	strge	r3, [sp, #28]
 8014838:	9307      	strlt	r3, [sp, #28]
 801483a:	bfb8      	it	lt
 801483c:	9204      	strlt	r2, [sp, #16]
 801483e:	7823      	ldrb	r3, [r4, #0]
 8014840:	2b2e      	cmp	r3, #46	; 0x2e
 8014842:	d10c      	bne.n	801485e <_vfiprintf_r+0x176>
 8014844:	7863      	ldrb	r3, [r4, #1]
 8014846:	2b2a      	cmp	r3, #42	; 0x2a
 8014848:	d135      	bne.n	80148b6 <_vfiprintf_r+0x1ce>
 801484a:	9b03      	ldr	r3, [sp, #12]
 801484c:	1d1a      	adds	r2, r3, #4
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	9203      	str	r2, [sp, #12]
 8014852:	2b00      	cmp	r3, #0
 8014854:	bfb8      	it	lt
 8014856:	f04f 33ff 	movlt.w	r3, #4294967295
 801485a:	3402      	adds	r4, #2
 801485c:	9305      	str	r3, [sp, #20]
 801485e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014944 <_vfiprintf_r+0x25c>
 8014862:	7821      	ldrb	r1, [r4, #0]
 8014864:	2203      	movs	r2, #3
 8014866:	4650      	mov	r0, sl
 8014868:	f7eb fcba 	bl	80001e0 <memchr>
 801486c:	b140      	cbz	r0, 8014880 <_vfiprintf_r+0x198>
 801486e:	2340      	movs	r3, #64	; 0x40
 8014870:	eba0 000a 	sub.w	r0, r0, sl
 8014874:	fa03 f000 	lsl.w	r0, r3, r0
 8014878:	9b04      	ldr	r3, [sp, #16]
 801487a:	4303      	orrs	r3, r0
 801487c:	3401      	adds	r4, #1
 801487e:	9304      	str	r3, [sp, #16]
 8014880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014884:	482c      	ldr	r0, [pc, #176]	; (8014938 <_vfiprintf_r+0x250>)
 8014886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801488a:	2206      	movs	r2, #6
 801488c:	f7eb fca8 	bl	80001e0 <memchr>
 8014890:	2800      	cmp	r0, #0
 8014892:	d03f      	beq.n	8014914 <_vfiprintf_r+0x22c>
 8014894:	4b29      	ldr	r3, [pc, #164]	; (801493c <_vfiprintf_r+0x254>)
 8014896:	bb1b      	cbnz	r3, 80148e0 <_vfiprintf_r+0x1f8>
 8014898:	9b03      	ldr	r3, [sp, #12]
 801489a:	3307      	adds	r3, #7
 801489c:	f023 0307 	bic.w	r3, r3, #7
 80148a0:	3308      	adds	r3, #8
 80148a2:	9303      	str	r3, [sp, #12]
 80148a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148a6:	443b      	add	r3, r7
 80148a8:	9309      	str	r3, [sp, #36]	; 0x24
 80148aa:	e767      	b.n	801477c <_vfiprintf_r+0x94>
 80148ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80148b0:	460c      	mov	r4, r1
 80148b2:	2001      	movs	r0, #1
 80148b4:	e7a5      	b.n	8014802 <_vfiprintf_r+0x11a>
 80148b6:	2300      	movs	r3, #0
 80148b8:	3401      	adds	r4, #1
 80148ba:	9305      	str	r3, [sp, #20]
 80148bc:	4619      	mov	r1, r3
 80148be:	f04f 0c0a 	mov.w	ip, #10
 80148c2:	4620      	mov	r0, r4
 80148c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80148c8:	3a30      	subs	r2, #48	; 0x30
 80148ca:	2a09      	cmp	r2, #9
 80148cc:	d903      	bls.n	80148d6 <_vfiprintf_r+0x1ee>
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d0c5      	beq.n	801485e <_vfiprintf_r+0x176>
 80148d2:	9105      	str	r1, [sp, #20]
 80148d4:	e7c3      	b.n	801485e <_vfiprintf_r+0x176>
 80148d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80148da:	4604      	mov	r4, r0
 80148dc:	2301      	movs	r3, #1
 80148de:	e7f0      	b.n	80148c2 <_vfiprintf_r+0x1da>
 80148e0:	ab03      	add	r3, sp, #12
 80148e2:	9300      	str	r3, [sp, #0]
 80148e4:	462a      	mov	r2, r5
 80148e6:	4b16      	ldr	r3, [pc, #88]	; (8014940 <_vfiprintf_r+0x258>)
 80148e8:	a904      	add	r1, sp, #16
 80148ea:	4630      	mov	r0, r6
 80148ec:	f7fd fb08 	bl	8011f00 <_printf_float>
 80148f0:	4607      	mov	r7, r0
 80148f2:	1c78      	adds	r0, r7, #1
 80148f4:	d1d6      	bne.n	80148a4 <_vfiprintf_r+0x1bc>
 80148f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80148f8:	07d9      	lsls	r1, r3, #31
 80148fa:	d405      	bmi.n	8014908 <_vfiprintf_r+0x220>
 80148fc:	89ab      	ldrh	r3, [r5, #12]
 80148fe:	059a      	lsls	r2, r3, #22
 8014900:	d402      	bmi.n	8014908 <_vfiprintf_r+0x220>
 8014902:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014904:	f7fd f95c 	bl	8011bc0 <__retarget_lock_release_recursive>
 8014908:	89ab      	ldrh	r3, [r5, #12]
 801490a:	065b      	lsls	r3, r3, #25
 801490c:	f53f af12 	bmi.w	8014734 <_vfiprintf_r+0x4c>
 8014910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014912:	e711      	b.n	8014738 <_vfiprintf_r+0x50>
 8014914:	ab03      	add	r3, sp, #12
 8014916:	9300      	str	r3, [sp, #0]
 8014918:	462a      	mov	r2, r5
 801491a:	4b09      	ldr	r3, [pc, #36]	; (8014940 <_vfiprintf_r+0x258>)
 801491c:	a904      	add	r1, sp, #16
 801491e:	4630      	mov	r0, r6
 8014920:	f7fd fd92 	bl	8012448 <_printf_i>
 8014924:	e7e4      	b.n	80148f0 <_vfiprintf_r+0x208>
 8014926:	bf00      	nop
 8014928:	08017640 	.word	0x08017640
 801492c:	08017660 	.word	0x08017660
 8014930:	08017620 	.word	0x08017620
 8014934:	0801793c 	.word	0x0801793c
 8014938:	08017946 	.word	0x08017946
 801493c:	08011f01 	.word	0x08011f01
 8014940:	080146c3 	.word	0x080146c3
 8014944:	08017942 	.word	0x08017942

08014948 <_read_r>:
 8014948:	b538      	push	{r3, r4, r5, lr}
 801494a:	4d07      	ldr	r5, [pc, #28]	; (8014968 <_read_r+0x20>)
 801494c:	4604      	mov	r4, r0
 801494e:	4608      	mov	r0, r1
 8014950:	4611      	mov	r1, r2
 8014952:	2200      	movs	r2, #0
 8014954:	602a      	str	r2, [r5, #0]
 8014956:	461a      	mov	r2, r3
 8014958:	f7ed fcca 	bl	80022f0 <_read>
 801495c:	1c43      	adds	r3, r0, #1
 801495e:	d102      	bne.n	8014966 <_read_r+0x1e>
 8014960:	682b      	ldr	r3, [r5, #0]
 8014962:	b103      	cbz	r3, 8014966 <_read_r+0x1e>
 8014964:	6023      	str	r3, [r4, #0]
 8014966:	bd38      	pop	{r3, r4, r5, pc}
 8014968:	20005218 	.word	0x20005218

0801496c <abort>:
 801496c:	b508      	push	{r3, lr}
 801496e:	2006      	movs	r0, #6
 8014970:	f000 f882 	bl	8014a78 <raise>
 8014974:	2001      	movs	r0, #1
 8014976:	f7ed fcb1 	bl	80022dc <_exit>
	...

0801497c <_fstat_r>:
 801497c:	b538      	push	{r3, r4, r5, lr}
 801497e:	4d07      	ldr	r5, [pc, #28]	; (801499c <_fstat_r+0x20>)
 8014980:	2300      	movs	r3, #0
 8014982:	4604      	mov	r4, r0
 8014984:	4608      	mov	r0, r1
 8014986:	4611      	mov	r1, r2
 8014988:	602b      	str	r3, [r5, #0]
 801498a:	f7ed fcf6 	bl	800237a <_fstat>
 801498e:	1c43      	adds	r3, r0, #1
 8014990:	d102      	bne.n	8014998 <_fstat_r+0x1c>
 8014992:	682b      	ldr	r3, [r5, #0]
 8014994:	b103      	cbz	r3, 8014998 <_fstat_r+0x1c>
 8014996:	6023      	str	r3, [r4, #0]
 8014998:	bd38      	pop	{r3, r4, r5, pc}
 801499a:	bf00      	nop
 801499c:	20005218 	.word	0x20005218

080149a0 <_isatty_r>:
 80149a0:	b538      	push	{r3, r4, r5, lr}
 80149a2:	4d06      	ldr	r5, [pc, #24]	; (80149bc <_isatty_r+0x1c>)
 80149a4:	2300      	movs	r3, #0
 80149a6:	4604      	mov	r4, r0
 80149a8:	4608      	mov	r0, r1
 80149aa:	602b      	str	r3, [r5, #0]
 80149ac:	f7ed fcf5 	bl	800239a <_isatty>
 80149b0:	1c43      	adds	r3, r0, #1
 80149b2:	d102      	bne.n	80149ba <_isatty_r+0x1a>
 80149b4:	682b      	ldr	r3, [r5, #0]
 80149b6:	b103      	cbz	r3, 80149ba <_isatty_r+0x1a>
 80149b8:	6023      	str	r3, [r4, #0]
 80149ba:	bd38      	pop	{r3, r4, r5, pc}
 80149bc:	20005218 	.word	0x20005218

080149c0 <__ascii_mbtowc>:
 80149c0:	b082      	sub	sp, #8
 80149c2:	b901      	cbnz	r1, 80149c6 <__ascii_mbtowc+0x6>
 80149c4:	a901      	add	r1, sp, #4
 80149c6:	b142      	cbz	r2, 80149da <__ascii_mbtowc+0x1a>
 80149c8:	b14b      	cbz	r3, 80149de <__ascii_mbtowc+0x1e>
 80149ca:	7813      	ldrb	r3, [r2, #0]
 80149cc:	600b      	str	r3, [r1, #0]
 80149ce:	7812      	ldrb	r2, [r2, #0]
 80149d0:	1e10      	subs	r0, r2, #0
 80149d2:	bf18      	it	ne
 80149d4:	2001      	movne	r0, #1
 80149d6:	b002      	add	sp, #8
 80149d8:	4770      	bx	lr
 80149da:	4610      	mov	r0, r2
 80149dc:	e7fb      	b.n	80149d6 <__ascii_mbtowc+0x16>
 80149de:	f06f 0001 	mvn.w	r0, #1
 80149e2:	e7f8      	b.n	80149d6 <__ascii_mbtowc+0x16>

080149e4 <memmove>:
 80149e4:	4288      	cmp	r0, r1
 80149e6:	b510      	push	{r4, lr}
 80149e8:	eb01 0402 	add.w	r4, r1, r2
 80149ec:	d902      	bls.n	80149f4 <memmove+0x10>
 80149ee:	4284      	cmp	r4, r0
 80149f0:	4623      	mov	r3, r4
 80149f2:	d807      	bhi.n	8014a04 <memmove+0x20>
 80149f4:	1e43      	subs	r3, r0, #1
 80149f6:	42a1      	cmp	r1, r4
 80149f8:	d008      	beq.n	8014a0c <memmove+0x28>
 80149fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80149fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014a02:	e7f8      	b.n	80149f6 <memmove+0x12>
 8014a04:	4402      	add	r2, r0
 8014a06:	4601      	mov	r1, r0
 8014a08:	428a      	cmp	r2, r1
 8014a0a:	d100      	bne.n	8014a0e <memmove+0x2a>
 8014a0c:	bd10      	pop	{r4, pc}
 8014a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014a16:	e7f7      	b.n	8014a08 <memmove+0x24>

08014a18 <_malloc_usable_size_r>:
 8014a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a1c:	1f18      	subs	r0, r3, #4
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	bfbc      	itt	lt
 8014a22:	580b      	ldrlt	r3, [r1, r0]
 8014a24:	18c0      	addlt	r0, r0, r3
 8014a26:	4770      	bx	lr

08014a28 <_raise_r>:
 8014a28:	291f      	cmp	r1, #31
 8014a2a:	b538      	push	{r3, r4, r5, lr}
 8014a2c:	4604      	mov	r4, r0
 8014a2e:	460d      	mov	r5, r1
 8014a30:	d904      	bls.n	8014a3c <_raise_r+0x14>
 8014a32:	2316      	movs	r3, #22
 8014a34:	6003      	str	r3, [r0, #0]
 8014a36:	f04f 30ff 	mov.w	r0, #4294967295
 8014a3a:	bd38      	pop	{r3, r4, r5, pc}
 8014a3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014a3e:	b112      	cbz	r2, 8014a46 <_raise_r+0x1e>
 8014a40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014a44:	b94b      	cbnz	r3, 8014a5a <_raise_r+0x32>
 8014a46:	4620      	mov	r0, r4
 8014a48:	f000 f830 	bl	8014aac <_getpid_r>
 8014a4c:	462a      	mov	r2, r5
 8014a4e:	4601      	mov	r1, r0
 8014a50:	4620      	mov	r0, r4
 8014a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a56:	f000 b817 	b.w	8014a88 <_kill_r>
 8014a5a:	2b01      	cmp	r3, #1
 8014a5c:	d00a      	beq.n	8014a74 <_raise_r+0x4c>
 8014a5e:	1c59      	adds	r1, r3, #1
 8014a60:	d103      	bne.n	8014a6a <_raise_r+0x42>
 8014a62:	2316      	movs	r3, #22
 8014a64:	6003      	str	r3, [r0, #0]
 8014a66:	2001      	movs	r0, #1
 8014a68:	e7e7      	b.n	8014a3a <_raise_r+0x12>
 8014a6a:	2400      	movs	r4, #0
 8014a6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014a70:	4628      	mov	r0, r5
 8014a72:	4798      	blx	r3
 8014a74:	2000      	movs	r0, #0
 8014a76:	e7e0      	b.n	8014a3a <_raise_r+0x12>

08014a78 <raise>:
 8014a78:	4b02      	ldr	r3, [pc, #8]	; (8014a84 <raise+0xc>)
 8014a7a:	4601      	mov	r1, r0
 8014a7c:	6818      	ldr	r0, [r3, #0]
 8014a7e:	f7ff bfd3 	b.w	8014a28 <_raise_r>
 8014a82:	bf00      	nop
 8014a84:	200008cc 	.word	0x200008cc

08014a88 <_kill_r>:
 8014a88:	b538      	push	{r3, r4, r5, lr}
 8014a8a:	4d07      	ldr	r5, [pc, #28]	; (8014aa8 <_kill_r+0x20>)
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	4604      	mov	r4, r0
 8014a90:	4608      	mov	r0, r1
 8014a92:	4611      	mov	r1, r2
 8014a94:	602b      	str	r3, [r5, #0]
 8014a96:	f7ed fc11 	bl	80022bc <_kill>
 8014a9a:	1c43      	adds	r3, r0, #1
 8014a9c:	d102      	bne.n	8014aa4 <_kill_r+0x1c>
 8014a9e:	682b      	ldr	r3, [r5, #0]
 8014aa0:	b103      	cbz	r3, 8014aa4 <_kill_r+0x1c>
 8014aa2:	6023      	str	r3, [r4, #0]
 8014aa4:	bd38      	pop	{r3, r4, r5, pc}
 8014aa6:	bf00      	nop
 8014aa8:	20005218 	.word	0x20005218

08014aac <_getpid_r>:
 8014aac:	f7ed bbfe 	b.w	80022ac <_getpid>

08014ab0 <__ascii_wctomb>:
 8014ab0:	b149      	cbz	r1, 8014ac6 <__ascii_wctomb+0x16>
 8014ab2:	2aff      	cmp	r2, #255	; 0xff
 8014ab4:	bf85      	ittet	hi
 8014ab6:	238a      	movhi	r3, #138	; 0x8a
 8014ab8:	6003      	strhi	r3, [r0, #0]
 8014aba:	700a      	strbls	r2, [r1, #0]
 8014abc:	f04f 30ff 	movhi.w	r0, #4294967295
 8014ac0:	bf98      	it	ls
 8014ac2:	2001      	movls	r0, #1
 8014ac4:	4770      	bx	lr
 8014ac6:	4608      	mov	r0, r1
 8014ac8:	4770      	bx	lr
	...

08014acc <expf>:
 8014acc:	b508      	push	{r3, lr}
 8014ace:	ed2d 8b02 	vpush	{d8}
 8014ad2:	eef0 8a40 	vmov.f32	s17, s0
 8014ad6:	f000 f82f 	bl	8014b38 <__ieee754_expf>
 8014ada:	eeb0 8a40 	vmov.f32	s16, s0
 8014ade:	eeb0 0a68 	vmov.f32	s0, s17
 8014ae2:	f000 f919 	bl	8014d18 <finitef>
 8014ae6:	b160      	cbz	r0, 8014b02 <expf+0x36>
 8014ae8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8014b28 <expf+0x5c>
 8014aec:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014af4:	dd0a      	ble.n	8014b0c <expf+0x40>
 8014af6:	f7fc ff41 	bl	801197c <__errno>
 8014afa:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8014b2c <expf+0x60>
 8014afe:	2322      	movs	r3, #34	; 0x22
 8014b00:	6003      	str	r3, [r0, #0]
 8014b02:	eeb0 0a48 	vmov.f32	s0, s16
 8014b06:	ecbd 8b02 	vpop	{d8}
 8014b0a:	bd08      	pop	{r3, pc}
 8014b0c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014b30 <expf+0x64>
 8014b10:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b18:	d5f3      	bpl.n	8014b02 <expf+0x36>
 8014b1a:	f7fc ff2f 	bl	801197c <__errno>
 8014b1e:	2322      	movs	r3, #34	; 0x22
 8014b20:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8014b34 <expf+0x68>
 8014b24:	6003      	str	r3, [r0, #0]
 8014b26:	e7ec      	b.n	8014b02 <expf+0x36>
 8014b28:	42b17180 	.word	0x42b17180
 8014b2c:	7f800000 	.word	0x7f800000
 8014b30:	c2cff1b5 	.word	0xc2cff1b5
 8014b34:	00000000 	.word	0x00000000

08014b38 <__ieee754_expf>:
 8014b38:	ee10 2a10 	vmov	r2, s0
 8014b3c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014b40:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014b44:	d902      	bls.n	8014b4c <__ieee754_expf+0x14>
 8014b46:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014b4a:	4770      	bx	lr
 8014b4c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8014b50:	d106      	bne.n	8014b60 <__ieee754_expf+0x28>
 8014b52:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8014c8c <__ieee754_expf+0x154>
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	bf18      	it	ne
 8014b5a:	eeb0 0a67 	vmovne.f32	s0, s15
 8014b5e:	4770      	bx	lr
 8014b60:	484b      	ldr	r0, [pc, #300]	; (8014c90 <__ieee754_expf+0x158>)
 8014b62:	4282      	cmp	r2, r0
 8014b64:	dd02      	ble.n	8014b6c <__ieee754_expf+0x34>
 8014b66:	2000      	movs	r0, #0
 8014b68:	f000 b8d0 	b.w	8014d0c <__math_oflowf>
 8014b6c:	2a00      	cmp	r2, #0
 8014b6e:	da05      	bge.n	8014b7c <__ieee754_expf+0x44>
 8014b70:	4a48      	ldr	r2, [pc, #288]	; (8014c94 <__ieee754_expf+0x15c>)
 8014b72:	4291      	cmp	r1, r2
 8014b74:	d902      	bls.n	8014b7c <__ieee754_expf+0x44>
 8014b76:	2000      	movs	r0, #0
 8014b78:	f000 b8c2 	b.w	8014d00 <__math_uflowf>
 8014b7c:	4a46      	ldr	r2, [pc, #280]	; (8014c98 <__ieee754_expf+0x160>)
 8014b7e:	4291      	cmp	r1, r2
 8014b80:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014b84:	d952      	bls.n	8014c2c <__ieee754_expf+0xf4>
 8014b86:	4a45      	ldr	r2, [pc, #276]	; (8014c9c <__ieee754_expf+0x164>)
 8014b88:	4291      	cmp	r1, r2
 8014b8a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8014b8e:	d834      	bhi.n	8014bfa <__ieee754_expf+0xc2>
 8014b90:	4943      	ldr	r1, [pc, #268]	; (8014ca0 <__ieee754_expf+0x168>)
 8014b92:	4411      	add	r1, r2
 8014b94:	ed91 7a00 	vldr	s14, [r1]
 8014b98:	4942      	ldr	r1, [pc, #264]	; (8014ca4 <__ieee754_expf+0x16c>)
 8014b9a:	440a      	add	r2, r1
 8014b9c:	edd2 7a00 	vldr	s15, [r2]
 8014ba0:	ee30 7a47 	vsub.f32	s14, s0, s14
 8014ba4:	f1c3 0201 	rsb	r2, r3, #1
 8014ba8:	1ad2      	subs	r2, r2, r3
 8014baa:	ee37 0a67 	vsub.f32	s0, s14, s15
 8014bae:	ee20 6a00 	vmul.f32	s12, s0, s0
 8014bb2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8014ca8 <__ieee754_expf+0x170>
 8014bb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8014cac <__ieee754_expf+0x174>
 8014bba:	eee6 6a05 	vfma.f32	s13, s12, s10
 8014bbe:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8014cb0 <__ieee754_expf+0x178>
 8014bc2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8014bc6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8014cb4 <__ieee754_expf+0x17c>
 8014bca:	eee5 6a06 	vfma.f32	s13, s10, s12
 8014bce:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8014cb8 <__ieee754_expf+0x180>
 8014bd2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8014bd6:	eef0 6a40 	vmov.f32	s13, s0
 8014bda:	eee5 6a46 	vfms.f32	s13, s10, s12
 8014bde:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014be2:	ee20 5a26 	vmul.f32	s10, s0, s13
 8014be6:	bb92      	cbnz	r2, 8014c4e <__ieee754_expf+0x116>
 8014be8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8014bec:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8014bf0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014bf4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8014bf8:	4770      	bx	lr
 8014bfa:	4b30      	ldr	r3, [pc, #192]	; (8014cbc <__ieee754_expf+0x184>)
 8014bfc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8014cc0 <__ieee754_expf+0x188>
 8014c00:	eddf 6a30 	vldr	s13, [pc, #192]	; 8014cc4 <__ieee754_expf+0x18c>
 8014c04:	4413      	add	r3, r2
 8014c06:	edd3 7a00 	vldr	s15, [r3]
 8014c0a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014c0e:	eeb0 7a40 	vmov.f32	s14, s0
 8014c12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c16:	ee17 2a90 	vmov	r2, s15
 8014c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c1e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8014c22:	eddf 6a29 	vldr	s13, [pc, #164]	; 8014cc8 <__ieee754_expf+0x190>
 8014c26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014c2a:	e7be      	b.n	8014baa <__ieee754_expf+0x72>
 8014c2c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8014c30:	d20b      	bcs.n	8014c4a <__ieee754_expf+0x112>
 8014c32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8014ccc <__ieee754_expf+0x194>
 8014c36:	ee70 6a26 	vadd.f32	s13, s0, s13
 8014c3a:	eef4 6ae5 	vcmpe.f32	s13, s11
 8014c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c42:	dd02      	ble.n	8014c4a <__ieee754_expf+0x112>
 8014c44:	ee30 0a25 	vadd.f32	s0, s0, s11
 8014c48:	4770      	bx	lr
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	e7af      	b.n	8014bae <__ieee754_expf+0x76>
 8014c4e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8014c52:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8014c56:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8014c5a:	bfb8      	it	lt
 8014c5c:	3264      	addlt	r2, #100	; 0x64
 8014c5e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014c62:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8014c66:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8014c6a:	ee17 3a90 	vmov	r3, s15
 8014c6e:	bfab      	itete	ge
 8014c70:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8014c74:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8014c78:	ee00 3a10 	vmovge	s0, r3
 8014c7c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8014cd0 <__ieee754_expf+0x198>
 8014c80:	bfbc      	itt	lt
 8014c82:	ee00 3a10 	vmovlt	s0, r3
 8014c86:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8014c8a:	4770      	bx	lr
 8014c8c:	00000000 	.word	0x00000000
 8014c90:	42b17217 	.word	0x42b17217
 8014c94:	42cff1b5 	.word	0x42cff1b5
 8014c98:	3eb17218 	.word	0x3eb17218
 8014c9c:	3f851591 	.word	0x3f851591
 8014ca0:	08017a60 	.word	0x08017a60
 8014ca4:	08017a68 	.word	0x08017a68
 8014ca8:	3331bb4c 	.word	0x3331bb4c
 8014cac:	b5ddea0e 	.word	0xb5ddea0e
 8014cb0:	388ab355 	.word	0x388ab355
 8014cb4:	bb360b61 	.word	0xbb360b61
 8014cb8:	3e2aaaab 	.word	0x3e2aaaab
 8014cbc:	08017a58 	.word	0x08017a58
 8014cc0:	3fb8aa3b 	.word	0x3fb8aa3b
 8014cc4:	3f317180 	.word	0x3f317180
 8014cc8:	3717f7d1 	.word	0x3717f7d1
 8014ccc:	7149f2ca 	.word	0x7149f2ca
 8014cd0:	0d800000 	.word	0x0d800000

08014cd4 <with_errnof>:
 8014cd4:	b513      	push	{r0, r1, r4, lr}
 8014cd6:	4604      	mov	r4, r0
 8014cd8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014cdc:	f7fc fe4e 	bl	801197c <__errno>
 8014ce0:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014ce4:	6004      	str	r4, [r0, #0]
 8014ce6:	b002      	add	sp, #8
 8014ce8:	bd10      	pop	{r4, pc}

08014cea <xflowf>:
 8014cea:	b130      	cbz	r0, 8014cfa <xflowf+0x10>
 8014cec:	eef1 7a40 	vneg.f32	s15, s0
 8014cf0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014cf4:	2022      	movs	r0, #34	; 0x22
 8014cf6:	f7ff bfed 	b.w	8014cd4 <with_errnof>
 8014cfa:	eef0 7a40 	vmov.f32	s15, s0
 8014cfe:	e7f7      	b.n	8014cf0 <xflowf+0x6>

08014d00 <__math_uflowf>:
 8014d00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014d08 <__math_uflowf+0x8>
 8014d04:	f7ff bff1 	b.w	8014cea <xflowf>
 8014d08:	10000000 	.word	0x10000000

08014d0c <__math_oflowf>:
 8014d0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014d14 <__math_oflowf+0x8>
 8014d10:	f7ff bfeb 	b.w	8014cea <xflowf>
 8014d14:	70000000 	.word	0x70000000

08014d18 <finitef>:
 8014d18:	b082      	sub	sp, #8
 8014d1a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014d1e:	9801      	ldr	r0, [sp, #4]
 8014d20:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014d24:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8014d28:	bfac      	ite	ge
 8014d2a:	2000      	movge	r0, #0
 8014d2c:	2001      	movlt	r0, #1
 8014d2e:	b002      	add	sp, #8
 8014d30:	4770      	bx	lr
	...

08014d34 <_init>:
 8014d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d36:	bf00      	nop
 8014d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d3a:	bc08      	pop	{r3}
 8014d3c:	469e      	mov	lr, r3
 8014d3e:	4770      	bx	lr

08014d40 <_fini>:
 8014d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d42:	bf00      	nop
 8014d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d46:	bc08      	pop	{r3}
 8014d48:	469e      	mov	lr, r3
 8014d4a:	4770      	bx	lr
